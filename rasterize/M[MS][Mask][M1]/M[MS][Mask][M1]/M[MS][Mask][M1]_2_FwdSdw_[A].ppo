#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1167;
float _3835;
float _3836;
float _3837;
float _3838;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _304.x * cbMtdParam._m0[11u].x;
    float _310 = _304.y * cbMtdParam._m0[11u].y;
    float _311 = _304.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3847 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _428 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _280.x) * ((_415 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309);
    float _431 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _280.y) * ((_415 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310);
    float _434 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _280.z) * ((_415 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311);
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _415) + _468;
    float _480 = ((((_447.x - _466) * _415) + _466) * 2.0) + (-1.0);
    float _482 = ((((_447.y - _467) * _415) + _467) * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _3858 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _517 = (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _545 = _543.x;
    float _562 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _545) * _415) + _545;
    float _566 = ((_529.x - _562) * cbMtdParam._m0[19u].z) + _562;
    float _570 = (cbMtdParam._m0[19u].w * (_504.z - _477)) + _477;
    float _572 = cbMtdParam._m0[22u].x + _504.w;
    float _575 = fma(_488, _227 * NORMAL.x, fma(_517, _234 * TANGENT.x, (_220 * _212) * _516));
    float _578 = fma(_488, _227 * NORMAL.y, fma(_517, _234 * TANGENT.y, (_220 * _213) * _516));
    float _581 = fma(_488, _227 * NORMAL.z, fma(_517, _234 * TANGENT.z, (_220 * _214) * _516));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _3869 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _589 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3891 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3902 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3913 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3924 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _594 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _659 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _649);
    float _660 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _649);
    float _661 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _649);
    float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
    float _666 = _659 * _665;
    float _667 = _660 * _665;
    float _668 = _661 * _665;
    vec4 _673 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _675 = _673.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _847 = sqrt(((_659 * _659) + (_660 * _660)) + (_661 * _661));
        float _853 = (cbMatDynParam._m0[5u].x * _847) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _858 = (cbMatDynParam._m0[5u].z * _847) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _854)) + _854) < ((_675 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _705 = fma(_588, cbSceneParam._m0[5u].z, fma(_587, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _586));
    float _708 = fma(_588, cbSceneParam._m0[6u].z, fma(_587, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _586));
    float _711 = fma(_588, cbSceneParam._m0[7u].z, fma(_587, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _586));
    uint _724 = _240 + 9u;
    uint _725 = _724 + uint(cbMatDynParam._m0[0u].w);
    float _731 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_725].x;
    float _732 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_725].y;
    float _733 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_725].z;
    float _3957 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _737 = 1.0 - _594;
    float _738 = _734 * _737;
    float _739 = _735 * _737;
    float _740 = _736 * _737;
    float _745 = (_734 + (-0.039999999105930328369140625)) * _594;
    float _746 = (_735 + (-0.039999999105930328369140625)) * _594;
    float _747 = (_736 + (-0.039999999105930328369140625)) * _594;
    float _748 = _745 + 0.039999999105930328369140625;
    float _750 = _746 + 0.039999999105930328369140625;
    float _751 = _747 + 0.039999999105930328369140625;
    vec4 _760 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687));
    float _764 = ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * TEXCOORD_5.w) * _760.x;
    float _765 = dot(vec3(_586, _587, _588), vec3(_666, _667, _668));
    float _768 = _765 * 2.0;
    float _772 = (_768 * _586) - _666;
    float _773 = (_768 * _587) - _667;
    float _774 = (_768 * _588) - _668;
    float _778 = abs(dot(vec3(_666, _667, _668), vec3(_586, _587, _588)));
    float _3990 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = sqrt(_589);
    float _793 = exp2((_780 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_780 * 3.0));
    float _799 = (1.0 - _793) * ((_780 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _800 = _793 * _780;
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_836, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828));
        float _895 = fma(_836, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828));
        float _899 = fma(_836, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828));
        float _924 = _828 + _586;
        float _925 = _832 + _587;
        float _926 = _836 + _588;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_586, _587, _588), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _4038 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_586, _587, _588), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4071 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_586, _587, _588), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4104 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1209 = fma(_836, cbModelParam._m0[30u].z, fma(_832, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828));
        float _1213 = fma(_836, cbModelParam._m0[31u].z, fma(_832, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828));
        float _1217 = fma(_836, cbModelParam._m0[32u].z, fma(_832, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828));
        float _1240 = _828 + _586;
        float _1241 = _832 + _587;
        float _1242 = _836 + _588;
        float _1252 = fma(_1242, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240)) - _1209;
        float _1253 = fma(_1242, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240)) - _1213;
        float _1254 = fma(_1242, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240)) - _1217;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1209 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1213 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[35u].z) + ((((((_1217 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1308 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1275.x + (-0.5));
        float _1310 = _1308 * (_1275.y + (-0.5));
        float _1311 = _1308 * (_1275.z + (-0.5));
        float _1318 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1282.x + (-0.5));
        float _1320 = _1318 * (_1282.y + (-0.5));
        float _1321 = _1318 * (_1282.z + (-0.5));
        float _1328 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1289.x + (-0.5));
        float _1330 = _1328 * (_1289.y + (-0.5));
        float _1331 = _1328 * (_1289.z + (-0.5));
        float _1338 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1296.x + (-0.5));
        float _1340 = _1338 * (_1296.y + (-0.5));
        float _1341 = _1338 * (_1296.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_586, _587, _588), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4167 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1372 + 1.0))) + _1377) * _1342;
        float _1387 = _1310 * 0.5;
        float _1388 = _1320 * 0.5;
        float _1389 = _1330 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_586, _587, _588), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4200 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1414 + 1.0))) + _1419) * _1343;
        float _1429 = _1311 * 0.5;
        float _1430 = _1321 * 0.5;
        float _1431 = _1331 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_586, _587, _588), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4233 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1456 + 1.0))) + _1461) * _1344;
        _1478 = _1311;
        _1479 = _1310;
        _1480 = _1309;
        _1481 = _1321;
        _1482 = _1320;
        _1483 = _1319;
        _1484 = _1331;
        _1485 = _1330;
        _1486 = _1329;
        _1487 = _1344;
        _1488 = _1343;
        _1489 = _1342;
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = _1167;
        _1489 = _1167;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1179)) + _1179;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1180)) + _1180;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1181)) + _1181;
    float _1525 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1502));
    float _1546 = _772 * 0.5;
    float _1547 = _773 * 0.5;
    float _1548 = _774 * 0.5;
    float _1549 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1552 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1555 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1589;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1562 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1566 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1570 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1577 = dot(vec4(cbModelParam._m0[39u]), vec4(_1546, _1547, _1548, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1600;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1591 = dot(vec4(cbModelParam._m0[40u]), vec4(_1546, _1547, _1548, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1604 = (_1600 * cbModelParam._m0[1u].x) + (_1589 * (1.0 - cbModelParam._m0[1u].x));
    float _1614 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1614 : min(cbModelParam._m0[25u].z, _1614));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_836, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_836, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_836, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_774, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772));
        float _1678 = fma(_774, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772));
        float _1681 = fma(_774, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1709 = frontier_phi_17_15_ladder;
        }
        float _1882;
        if (_1678 > 0.0)
        {
            _1882 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1882 = frontier_phi_26_22_ladder;
        }
        float _2177;
        if (_1681 > 0.0)
        {
            _2177 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2177 = frontier_phi_38_33_ladder;
        }
        float _2179 = isnan(_1882) ? _1709 : (isnan(_1709) ? _1882 : min(_1709, _1882));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1675) + _1664;
        float _2185 = (_2180 * _1678) + _1668;
        float _2186 = (_2180 * _1681) + _1672;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1615);
            frontier_phi_16_38_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_16_38_ladder_2;
        _1699 = frontier_phi_16_38_ladder_1;
        _1701 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_772, _773, _774), _1615);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_836, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_836, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_836, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_774, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772));
        float _1775 = fma(_774, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772));
        float _1778 = fma(_774, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772));
        float _1887;
        if (_1772 > 0.0)
        {
            _1887 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1887 = frontier_phi_28_24_ladder;
        }
        float _2204;
        if (_1775 > 0.0)
        {
            _2204 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2204 = frontier_phi_40_35_ladder;
        }
        float _2542;
        if (_1778 > 0.0)
        {
            _2542 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2542 = frontier_phi_50_47_ladder;
        }
        float _2544 = isnan(_2204) ? _1887 : (isnan(_1887) ? _2204 : min(_1887, _2204));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1772) + _1761;
        float _2550 = (_2545 * _1775) + _1765;
        float _2551 = (_2545 * _1778) + _1769;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_25_50_ladder = _2673.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2673.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2673.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_25_50_ladder_2;
        _1799 = frontier_phi_25_50_ladder_1;
        _1801 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_772, _773, _774), _1706);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1814 = (((_799 * _748) + _800) * _764) * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1816 = (((_799 * _750) + _800) * _764) * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1818 = (((_799 * _751) + _800) * _764) * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1874 = _1861 / _1873;
    float _1875 = _1865 / _1873;
    float _1876 = _1869 / _1873;
    float _2023;
    float _2024;
    float _2025;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1903 = ((uint(_1876 > cbSceneParam._m0[59u].y) + uint(_1876 > cbSceneParam._m0[59u].x)) + uint(_1876 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1904 = _1903 + 43u;
        uint _1912 = _1903 + 44u;
        uint _1920 = _1903 + 45u;
        uint _1928 = _1903 + 46u;
        float _1939 = fma(_1873, cbSceneParam._m0[_1904].w, fma(_1869, cbSceneParam._m0[_1904].z, fma(_1865, cbSceneParam._m0[_1904].y, _1861 * cbSceneParam._m0[_1904].x)));
        float _1943 = fma(_1873, cbSceneParam._m0[_1912].w, fma(_1869, cbSceneParam._m0[_1912].z, fma(_1865, cbSceneParam._m0[_1912].y, _1861 * cbSceneParam._m0[_1912].x)));
        float _1951 = fma(_1873, cbSceneParam._m0[_1928].w, fma(_1869, cbSceneParam._m0[_1928].z, fma(_1865, cbSceneParam._m0[_1928].y, _1861 * cbSceneParam._m0[_1928].x)));
        float _1956 = cbSceneParam._m0[33u].z * _1951;
        float _1958 = cbSceneParam._m0[33u].w * _1951;
        float _1961 = fma(_1873, cbSceneParam._m0[_1920].w, fma(_1869, cbSceneParam._m0[_1920].z, fma(_1865, cbSceneParam._m0[_1920].y, _1861 * cbSceneParam._m0[_1920].x))) / _1951;
        float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876))) * cbSceneParam._m0[33u].y;
        float _4359 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2016 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1939) / _1951, (_1958 + _1943) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1939) / _1951, (_1943 - _1956) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 - _1956) / _1951, (_1943 - _1958) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 - _1958) / _1951, (_1956 + _1943) / _1951), _1961), 0.0)).x), vec4(0.25)));
        _2023 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
        _2024 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
        _2025 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2023 = 1.0;
        _2024 = 1.0;
        _2025 = 1.0;
    }
    float _2089;
    float _2091;
    float _2093;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2077 = fma(_1873, cbSceneParam._m0[63u].w, fma(_1869, cbSceneParam._m0[63u].z, fma(_1865, cbSceneParam._m0[63u].y, _1861 * cbSceneParam._m0[63u].x)));
        float _2078 = fma(_1873, cbSceneParam._m0[60u].w, fma(_1869, cbSceneParam._m0[60u].z, fma(_1865, cbSceneParam._m0[60u].y, _1861 * cbSceneParam._m0[60u].x))) / _2077;
        float _2079 = fma(_1873, cbSceneParam._m0[61u].w, fma(_1869, cbSceneParam._m0[61u].z, fma(_1865, cbSceneParam._m0[61u].y, _1861 * cbSceneParam._m0[61u].x))) / _2077;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2078 >= cbSceneParam._m0[64u].x) && (_2079 >= cbSceneParam._m0[64u].y)) && (_2078 <= cbSceneParam._m0[64u].z)) && (_2079 <= cbSceneParam._m0[64u].w))
        {
            float _2217 = fma(_1873, cbSceneParam._m0[62u].w, fma(_1869, cbSceneParam._m0[62u].z, fma(_1865, cbSceneParam._m0[62u].y, _1861 * cbSceneParam._m0[62u].x))) / _2077;
            float _2221 = isnan(cbSceneParam._m0[41u].w) ? _2217 : (isnan(_2217) ? cbSceneParam._m0[41u].w : max(_2217, cbSceneParam._m0[41u].w));
            float _2264 = (cbSceneParam._m0[33u].x - sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876))) * cbSceneParam._m0[33u].y;
            float _4375 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
            float _2271 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2078, cbSceneParam._m0[33u].w + _2079), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2078, _2079 - cbSceneParam._m0[33u].z), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2078 - cbSceneParam._m0[33u].z, _2079 - cbSceneParam._m0[33u].w), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2078 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2079), _2221), 0.0)).x), vec4(0.25)));
            float _2275 = 1.0 - (_2271 * cbSceneParam._m0[34u].x);
            float _2276 = 1.0 - (_2271 * cbSceneParam._m0[34u].y);
            float _2277 = 1.0 - (_2271 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
            frontier_phi_37_36_ladder_1 = isnan(_2276) ? _2024 : (isnan(_2024) ? _2276 : min(_2024, _2276));
            frontier_phi_37_36_ladder_2 = isnan(_2275) ? _2023 : (isnan(_2023) ? _2275 : min(_2023, _2275));
        }
        else
        {
            frontier_phi_37_36_ladder = _2025;
            frontier_phi_37_36_ladder_1 = _2024;
            frontier_phi_37_36_ladder_2 = _2023;
        }
        _2089 = frontier_phi_37_36_ladder_2;
        _2091 = frontier_phi_37_36_ladder_1;
        _2093 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2089 = _2023;
        _2091 = _2024;
        _2093 = _2025;
    }
    uvec4 _2098 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2100 = _2098.x * 14u;
    uint _2101 = _2100 + 13u;
    float _2108 = _764 + (-1.0);
    float _2113 = (cbLight._m0[_2101].x * _2108) + 1.0;
    float _2114 = (cbLight._m0[_2101].y * _2108) + 1.0;
    float _2115 = (cbLight._m0[_2101].z * _2108) + 1.0;
    float _2116 = (cbLight._m0[_2101].w * _2108) + 1.0;
    uint _2117 = _2100 + 5u;
    float _2123 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2127 = _2100 + 4u;
    float _2136 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2140 = _2100 | 1u;
    float _2151 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_586, _587, _588));
    float _2154 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_586, _587, _588));
    float _4411 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _4422 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2159 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2161 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2168 = ((cbLight._m0[_2117].x * _2123) * _2161) + (((cbLight._m0[_2127].x * _2089) * _2136) * _2159);
    float _2169 = ((_2123 * cbLight._m0[_2117].y) * _2161) + (((cbLight._m0[_2127].y * _2091) * _2136) * _2159);
    float _2170 = ((_2123 * cbLight._m0[_2117].z) * _2161) + (((cbLight._m0[_2127].z * _2093) * _2136) * _2159);
    uvec4 _2174 = floatBitsToUint(cbLight._m0[_2100 + 12u]);
    bool _2176 = _2174.x == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2176)
    {
        _2278 = _2168;
        _2280 = _2169;
        _2282 = _2170;
    }
    else
    {
        uint _2286 = _2100 + 6u;
        float _2302 = (dot(vec3(cbLight._m0[_2100 + 2u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4433 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2305 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2278 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2168;
        _2280 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2169;
        _2282 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2170;
    }
    bool _2285 = _2174.y == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2285)
    {
        _2340 = _2278;
        _2342 = _2280;
        _2344 = _2282;
    }
    else
    {
        uint _2513 = _2100 + 7u;
        float _2529 = (dot(vec3(cbLight._m0[_2100 + 3u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2530 = _2529 * _2529;
        float _4449 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2531 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2532 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2340 = (((cbLight._m0[_2513].x * 0.3183098733425140380859375) * _2531) * _2532) + _2278;
        _2342 = (((cbLight._m0[_2513].y * 0.3183098733425140380859375) * _2531) * _2532) + _2280;
        _2344 = (((cbLight._m0[_2513].z * 0.3183098733425140380859375) * _2531) * _2532) + _2282;
    }
    uint _2347 = _2100 + 8u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _589) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2100].x + _666;
    float _2363 = cbLight._m0[_2100].y + _667;
    float _2364 = cbLight._m0[_2100].z + _668;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2100].xyz));
    float _4465 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _2376 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2377 = dot(vec3(_586, _587, _588), vec3(_2369, _2370, _2371));
    float _4487 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2369, _2370, _2371));
    float _4498 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2361 * _2361;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2398 = 0.959999978542327880859375 - _745;
    float _2400 = 0.959999978542327880859375 - _746;
    float _2401 = 0.959999978542327880859375 - _747;
    float _2408 = 1.0 - _2361;
    float _2419 = (0.5 / (((_2376 * ((_2375 * _2408) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2408) + _2361) * _2375))) * _2375;
    float _4509 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    uint _2435 = _2100 + 9u;
    float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _589) * 0.949999988079071044921875);
    float _2447 = _2446 * _2446;
    float _2448 = cbLight._m0[_2140].x + _666;
    float _2449 = cbLight._m0[_2140].y + _667;
    float _2450 = cbLight._m0[_2140].z + _668;
    float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
    float _2455 = _2454 * _2448;
    float _2456 = _2454 * _2449;
    float _2457 = _2454 * _2450;
    float _2458 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2140].xyz));
    float _4520 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2462 = dot(vec3(_586, _587, _588), vec3(_2455, _2456, _2457));
    float _4531 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2466 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2455, _2456, _2457));
    float _4542 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2470 = _2447 * _2447;
    float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
    float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
    float _2488 = 1.0 - _2447;
    float _2498 = (0.5 / (((_2376 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2488) + _2447) * _2461))) * _2461;
    float _4553 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2500 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
    float _2510 = (((((_2481 * _2398) + _748) * cbLight._m0[_2435].x) * _2500) * _2123) + ((((cbLight._m0[_2347].x * _2089) * ((_2397 * _2398) + _748)) * _2421) * _2136);
    float _2511 = (((((_2481 * _2400) + _750) * cbLight._m0[_2435].y) * _2500) * _2123) + ((((cbLight._m0[_2347].y * _2091) * ((_2397 * _2400) + _750)) * _2421) * _2136);
    float _2512 = (((((_2481 * _2401) + _751) * cbLight._m0[_2435].z) * _2500) * _2123) + ((((cbLight._m0[_2347].z * _2093) * ((_2397 * _2401) + _751)) * _2421) * _2136);
    float _2568;
    float _2570;
    float _2572;
    if (_2176)
    {
        _2568 = _2510;
        _2570 = _2511;
        _2572 = _2512;
    }
    else
    {
        uint _2574 = _2100 + 2u;
        uint _2578 = _2100 + 10u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _589) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _666;
        float _2595 = cbLight._m0[_2574].y + _667;
        float _2596 = cbLight._m0[_2574].z + _668;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2574].xyz));
        float _4564 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2608 = dot(vec3(_586, _587, _588), vec3(_2601, _2602, _2603));
        float _4575 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4586 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
        float _2634 = 1.0 - _2593;
        float _2644 = (0.5 / (((_2376 * ((_2607 * _2634) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2634) + _2593) * _2607))) * _2607;
        float _4597 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2568 = (((((_2627 * _2398) + _748) * cbLight._m0[_2578].x) * _2646) * _2647) + _2510;
        _2570 = (((((_2627 * _2400) + _750) * cbLight._m0[_2578].y) * _2646) * _2647) + _2511;
        _2572 = (((((_2627 * _2401) + _751) * cbLight._m0[_2578].z) * _2646) * _2647) + _2512;
    }
    float _2678;
    float _2680;
    float _2682;
    if (_2285)
    {
        _2678 = _2568;
        _2680 = _2570;
        _2682 = _2572;
    }
    else
    {
        uint _2689 = _2100 + 3u;
        uint _2693 = _2100 + 11u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _589) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _666;
        float _2710 = cbLight._m0[_2689].y + _667;
        float _2711 = cbLight._m0[_2689].z + _668;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2689].xyz));
        float _4613 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2723 = dot(vec3(_586, _587, _588), vec3(_2716, _2717, _2718));
        float _4624 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4635 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
        float _2749 = 1.0 - _2708;
        float _2759 = (0.5 / (((_2376 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2749) + _2708) * _2722))) * _2722;
        float _4646 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2761 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2762 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2678 = (((((_2742 * _2398) + _748) * cbLight._m0[_2693].x) * _2761) * _2762) + _2568;
        _2680 = (((((_2742 * _2400) + _750) * cbLight._m0[_2693].y) * _2761) * _2762) + _2570;
        _2682 = (((((_2742 * _2401) + _751) * cbLight._m0[_2693].z) * _2761) * _2762) + _2572;
    }
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_2098.y == 0u)
    {
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.x;
        uint _2795 = uint((float(_2783.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _2784))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _2784)));
        float _2805 = (log2(_1876 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2806 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        uint _2809 = uint(isnan(14.0) ? _2806 : (isnan(_2806) ? 14.0 : min(_2806, 14.0)));
        uvec4 _2814 = texelFetch(g_lightClusterGridBuffer, int(((_2809 << 2u) + (_2795 << 6u)) >> 2u));
        uint _2815 = _2814.x;
        uint _2816 = _2783.z;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((((1u << ((_2816 >> 4u) & 15u)) + 4294967295u) & _2815) == 0u) || ((_2816 & 240u) == 0u))
        {
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
        }
        else
        {
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            uint _3054 = 0u;
            uint _3063;
            bool _3064;
            for (;;)
            {
                _3063 = texelFetch(g_lightClassification, int((((_2809 << 5u) + (_2795 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                _3064 = _3063 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3064)
                {
                    frontier_phi_71_pred = _3053;
                    frontier_phi_71_pred_1 = _3052;
                    frontier_phi_71_pred_2 = _3051;
                    frontier_phi_71_pred_3 = _3050;
                    frontier_phi_71_pred_4 = _3049;
                    frontier_phi_71_pred_5 = _3048;
                }
                else
                {
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    uint _3199;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3063;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    for (;;)
                    {
                        uint _3203 = uint(findLSB(_3199)) + (_3054 << 5u);
                        uint _3200 = (_3199 + 4294967295u) & _3199;
                        uint _3205 = _3203 * 48u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3225 = (_3203 * 48u) + 4u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3244 = (_3203 * 48u) + 8u;
                        vec3 _3255 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x));
                        float _3259 = _3219.x - _1874;
                        float _3260 = _3219.y - _1875;
                        float _3261 = _3219.z - _1876;
                        float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                        float _3265 = inversesqrt(_3262);
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3269 = dot(vec3(_705, _708, _711), vec3(_3266, _3267, _3268));
                        float _3274 = 1.0 - (_3262 * _3219.w);
                        float _4672 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3275 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3276 = sqrt(_3262) * _3238.w;
                        float _3279 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3269) + _3280;
                        float _3286 = _3276 * _3276;
                        float _3290 = ((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3275) / ((_3286 * 0.699999988079071044921875) + 1.0);
                        float _3294 = (-0.0) - _1874;
                        float _3295 = (-0.0) - _1875;
                        float _3296 = (-0.0) - _1876;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3310 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                        float _3311 = 1.0 - _780;
                        float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                        float _3319 = _3318 * _3318;
                        float _3320 = _3319 * _3319;
                        float _3321 = _3301 + _3266;
                        float _3322 = _3302 + _3267;
                        float _3323 = _3303 + _3268;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3331 = dot(vec3(_705, _708, _711), vec3(_3301, _3302, _3303));
                        float _4688 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3335 = dot(vec3(_705, _708, _711), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                        float _4699 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                        float _3343 = _3279 * _3319;
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3269) + _3344;
                        float _4710 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3348 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3349 = 1.0 - _3319;
                        float _3359 = (0.5 / (((_3348 * ((_3334 * _3349) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3319) * _3334))) * _3348;
                        float _4721 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3370 = (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3342 * _3342) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125))) * _3275;
                        _3123 = (_3290 * _3238.x) + _3196;
                        _3124 = (_3290 * _3238.y) + _3197;
                        _3125 = (_3290 * _3238.z) + _3198;
                        _3120 = (_3370 * _3255.x) + _3193;
                        _3121 = (_3370 * _3255.y) + _3194;
                        _3122 = (_3370 * _3255.z) + _3195;
                        if (_3200 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3200;
                        }
                    }
                    frontier_phi_71_pred = _3125;
                    frontier_phi_71_pred_1 = _3124;
                    frontier_phi_71_pred_2 = _3123;
                    frontier_phi_71_pred_3 = _3122;
                    frontier_phi_71_pred_4 = _3121;
                    frontier_phi_71_pred_5 = _3120;
                }
                _2906 = frontier_phi_71_pred;
                _2904 = frontier_phi_71_pred_1;
                _2902 = frontier_phi_71_pred_2;
                _2900 = frontier_phi_71_pred_3;
                _2898 = frontier_phi_71_pred_4;
                _2896 = frontier_phi_71_pred_5;
                uint _3055 = _3054 + 1u;
                if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3048 = _2896;
                    _3049 = _2898;
                    _3050 = _2900;
                    _3051 = _2902;
                    _3052 = _2904;
                    _3053 = _2906;
                    _3054 = _3055;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
        }
        uvec4 _2909 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2910 = _2909.z;
        uint _2912 = (_2910 >> 8u) & 15u;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((4294967295u << _2912) & _2815) == 0u)
        {
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
        }
        else
        {
            float _3041 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
            float _3042 = _3041 * _1874;
            float _3043 = _3041 * _1875;
            float _3044 = _3041 * _1876;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2912 < ((_2910 >> 12u) & 15u))
            {
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3176 = _2895;
                float _3177 = _2897;
                float _3178 = _2899;
                float _3179 = _2901;
                float _3180 = _2903;
                float _3181 = _2905;
                uint _3182 = _2912;
                uint _3191;
                bool _3192;
                for (;;)
                {
                    _3191 = texelFetch(g_lightClassification, int((((_2809 << 5u) + (_2795 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                    _3192 = _3191 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3192)
                    {
                        frontier_phi_82_pred = _3181;
                        frontier_phi_82_pred_1 = _3180;
                        frontier_phi_82_pred_2 = _3179;
                        frontier_phi_82_pred_3 = _3178;
                        frontier_phi_82_pred_4 = _3177;
                        frontier_phi_82_pred_5 = _3176;
                    }
                    else
                    {
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3397 = _3176;
                        float _3398 = _3177;
                        float _3399 = _3178;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        uint _3403 = _3191;
                        uint _3404;
                        vec4 _3429;
                        float _3430;
                        vec4 _3445;
                        vec3 _3457;
                        vec4 _3472;
                        vec4 _3488;
                        float _3535;
                        bool _3536;
                        for (;;)
                        {
                            uint _3414 = ((_3182 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3403));
                            _3404 = (_3403 + 4294967295u) & _3403;
                            uint _3416 = _3414 * 40u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3430 = _3429.w;
                            uint _3432 = (_3414 * 40u) + 4u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3414 * 40u) + 8u;
                            _3457 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x));
                            uint _3459 = (_3414 * 40u) + 16u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3475 = (_3414 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3491 = (_3414 * 40u) + 24u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3510 = (_3414 * 40u) + 28u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3535 = fma(_1876, _3523.z, fma(_1875, _3523.y, _3523.x * _1874)) + _3523.w;
                            _3536 = !((fma(_1876, _3504.z, fma(_1875, _3504.y, _3504.x * _1874)) + _3504.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3536)
                            {
                                float _3563 = _3429.x - _1874;
                                float _3564 = _3429.y - _1875;
                                float _3565 = _3429.z - _1876;
                                float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                                float _3569 = inversesqrt(_3566);
                                float _3570 = _3569 * _3563;
                                float _3571 = _3569 * _3564;
                                float _3572 = _3569 * _3565;
                                float _3576 = 1.0 - (_3566 / (_3430 * _3430));
                                float _4732 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3581 = sqrt(_3566) * _3445.w;
                                float _3583 = 1.39999997615814208984375 / (_3581 + 1.39999997615814208984375);
                                float _3584 = _3583 * _3583;
                                float _3587 = ((1.0 - _3584) * dot(vec3(_3570, _3571, _3572), vec3(_705, _708, _711))) + _3584;
                                float _3590 = _3581 * _3581;
                                float _3594 = (fma(_1876, _3472.z, fma(_1875, _3472.y, _3472.x * _1874)) + _3472.w) / _3535;
                                float _3595 = (fma(_1876, _3488.z, fma(_1875, _3488.y, _3488.x * _1874)) + _3488.w) / _3535;
                                float _3599 = 1.0 - dot(vec2(_3594, _3595), vec2(_3594, _3595));
                                float _4748 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3601 = _3600 * (((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3577) / ((_3590 * 0.699999988079071044921875) + 1.0));
                                float _3613 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                                float _3614 = 1.0 - _780;
                                float _3621 = sqrt(1.0 - ((1.0 - (_3614 * _3614)) * (1.0 - (_3613 * _3613))));
                                float _3622 = _3621 * _3621;
                                float _3623 = _3622 * _3622;
                                float _3624 = _3570 - _3042;
                                float _3625 = _3571 - _3043;
                                float _3626 = _3572 - _3044;
                                float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                                float _3634 = dot(vec3(_705, _708, _711), vec3((-0.0) - _3042, (-0.0) - _3043, (-0.0) - _3044));
                                float _4759 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3638 = dot(vec3(_705, _708, _711), vec3(_3630 * _3624, _3630 * _3625, _3630 * _3626));
                                float _4770 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3645 = ((_3641 * _3641) * (_3623 + (-1.0))) + 1.0;
                                float _3646 = _3583 * _3622;
                                float _3647 = _3646 * _3646;
                                float _3653 = ((1.0 - _3647) * dot(vec3(_705, _708, _711), vec3(_3570, _3571, _3572))) + _3647;
                                float _4781 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3655 = 1.0 - _3622;
                                float _3665 = (0.5 / (((_3654 * ((_3637 * _3655) + _3622)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3622) * _3637))) * _3654;
                                float _4792 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3675 = (_3600 * _3577) * (((_3623 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3645 * _3645) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3601 * _3445.z;
                                frontier_phi_88_pred_1 = _3601 * _3445.y;
                                frontier_phi_88_pred_2 = _3601 * _3445.x;
                                frontier_phi_88_pred_3 = _3675 * _3457.z;
                                frontier_phi_88_pred_4 = _3675 * _3457.y;
                                frontier_phi_88_pred_5 = _3675 * _3457.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3684 = frontier_phi_88_pred;
                            _3683 = frontier_phi_88_pred_1;
                            _3682 = frontier_phi_88_pred_2;
                            _3681 = frontier_phi_88_pred_3;
                            _3680 = frontier_phi_88_pred_4;
                            _3679 = frontier_phi_88_pred_5;
                            _3387 = _3682 + _3400;
                            _3388 = _3683 + _3401;
                            _3389 = _3684 + _3402;
                            _3384 = _3679 + _3397;
                            _3385 = _3680 + _3398;
                            _3386 = _3681 + _3399;
                            if (_3404 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3404;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3389;
                        frontier_phi_82_pred_1 = _3388;
                        frontier_phi_82_pred_2 = _3387;
                        frontier_phi_82_pred_3 = _3386;
                        frontier_phi_82_pred_4 = _3385;
                        frontier_phi_82_pred_5 = _3384;
                    }
                    _3027 = frontier_phi_82_pred;
                    _3025 = frontier_phi_82_pred_1;
                    _3023 = frontier_phi_82_pred_2;
                    _3021 = frontier_phi_82_pred_3;
                    _3019 = frontier_phi_82_pred_4;
                    _3017 = frontier_phi_82_pred_5;
                    uint _3183 = _3182 + 1u;
                    if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3176 = _3017;
                        _3177 = _3019;
                        _3178 = _3021;
                        _3179 = _3023;
                        _3180 = _3025;
                        _3181 = _3027;
                        _3182 = _3183;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3023;
                frontier_phi_63_64_ladder_1 = _3027;
                frontier_phi_63_64_ladder_2 = _3025;
                frontier_phi_63_64_ladder_3 = _3021;
                frontier_phi_63_64_ladder_4 = _3019;
                frontier_phi_63_64_ladder_5 = _3017;
            }
            else
            {
                frontier_phi_63_64_ladder = _2901;
                frontier_phi_63_64_ladder_1 = _2905;
                frontier_phi_63_64_ladder_2 = _2903;
                frontier_phi_63_64_ladder_3 = _2899;
                frontier_phi_63_64_ladder_4 = _2897;
                frontier_phi_63_64_ladder_5 = _2895;
            }
            _3016 = frontier_phi_63_64_ladder_5;
            _3018 = frontier_phi_63_64_ladder_4;
            _3020 = frontier_phi_63_64_ladder_3;
            _3022 = frontier_phi_63_64_ladder;
            _3024 = frontier_phi_63_64_ladder_2;
            _3026 = frontier_phi_63_64_ladder_1;
        }
        float _3031 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2828 = (_3031 * _3022) + _2340;
        _2830 = (_3031 * _3024) + _2342;
        _2832 = (_3031 * _3026) + _2344;
        _2834 = ((_3016 * _748) * _3031) + _2678;
        _2836 = ((_3018 * _750) * _3031) + _2680;
        _2838 = ((_3020 * _751) * _3031) + _2682;
    }
    else
    {
        _2828 = _2340;
        _2830 = _2342;
        _2832 = _2344;
        _2834 = _2678;
        _2836 = _2680;
        _2838 = _2682;
    }
    float _4808 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4819 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4830 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _2855 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2828 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _764))) + ((_2834 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1604)) * cbPerFrame._m0[3u].x);
    float _2856 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2830 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _764))) + ((_2836 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1604)) * cbPerFrame._m0[3u].x);
    float _2857 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2832 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _764))) + ((_2838 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1604)) * cbPerFrame._m0[3u].x);
    uint _2858 = _240 + 6u;
    float _2866 = _686 / cbSceneParam._m0[86u].x;
    float _2867 = _687 / cbSceneParam._m0[86u].y;
    vec4 _2881 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2866, _2867, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2883 = _2881.x;
    float _2884 = _2881.y;
    float _2885 = _2881.z;
    float _2886 = _2881.w;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _2920 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _2921 = _2920 / _608;
        float _2932 = _2921 * _659;
        float _2933 = _660 * _2921;
        float _2934 = (-0.0) - _2933;
        float _2936 = _2921 * _661;
        float _2938 = (cbSceneParam._m0[77u].w * _2934) / _2920;
        float _2939 = _2938 + cbSceneParam._m0[79u].w;
        float _2940 = cbSceneParam._m0[79u].w - _2933;
        float _2946 = sqrt(((_2932 * _2932) + (_2933 * _2933)) + (_2936 * _2936));
        float _2949 = (1.0 - (cbSceneParam._m0[77u].w / _2920)) * _2946;
        float _2954 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2956 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3133;
        if (abs((_2934 - _2938) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3133 = ((((_2939 > 0.0) ? exp2(_2954 * _2939) : (2.0 - exp2(_2956 * _2939))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2949;
        }
        else
        {
            float _3077 = 1.0 / cbSceneParam._m0[80u].x;
            float _3078 = isnan(_2940) ? _2939 : (isnan(_2939) ? _2940 : max(_2939, _2940));
            float _3079 = isnan(_2940) ? _2939 : (isnan(_2939) ? _2940 : min(_2939, _2940));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            _3133 = ((abs(_2946 / _2934) * cbSceneParam._m0[80u].y) * ((((_3088 - _3089) * 2.0) - ((exp2(_2954 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0)))) - exp2(_2954 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))))) * _3077)) - ((exp2(_2956 * _3088) - exp2(_2956 * _3089)) * _3077))) + (_2949 * cbSceneParam._m0[80u].z);
        }
        vec4 _3135 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2866, _2867, 1.0), 0.0);
        float _3144 = exp2((_3133 * (-1.44269502162933349609375)) * (1.0 - _3135.w));
        float _3145 = log2(_3144);
        float _3161 = log2(_2886);
        _2958 = (exp2(_3161 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].x)) * _3135.x) / cbSceneParam._m0[78u].x)) + _2883;
        _2960 = (exp2(_3161 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].y)) * _3135.y) / cbSceneParam._m0[78u].y)) + _2884;
        _2962 = (exp2(_3161 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].z)) * _3135.z) / cbSceneParam._m0[78u].z)) + _2885;
        _2964 = _3144 * _2886;
    }
    else
    {
        _2958 = _2883;
        _2960 = _2884;
        _2962 = _2885;
        _2964 = _2886;
    }
    bool _3171;
    vec4 _2974;
    vec4 _2996;
    float _2998;
    float _3002;
    float _3003;
    float _3004;
    float _3005;
    bool _3015;
    for (;;)
    {
        _2974 = cbMatDynParam._m0[0u];
        float _2976 = roundEven(_2974.y);
        bool _2977 = _2976 == 3.0;
        float _2978 = log2(_2964);
        float _2985 = exp2(_2978 * cbSceneParam._m0[78u].x) * _2855;
        float _2986 = exp2(_2978 * cbSceneParam._m0[78u].y) * _2856;
        float _2987 = exp2(_2978 * cbSceneParam._m0[78u].z) * _2857;
        float _2994 = _675 + (-0.5);
        _2996 = cbMtdParam._m0[1u];
        _2998 = _2996.y * _2994;
        float _3001 = (_2976 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3002 = _3001 * (_2977 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2958)));
        _3003 = _3001 * (_2977 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2960)));
        _3004 = _3001 * (_2977 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2962)));
        _3005 = _2994 * 0.999000012874603271484375;
        _3015 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3015)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _3005) < 0.5)
            {
                _3171 = true;
                break;
            }
        }
        uint _3112 = _724 + uint(_2974.w);
        if ((cbInstanceData._m0[_3112].w < 1.0) && ((cbInstanceData._m0[_3112].w + _3005) < 0.5))
        {
            _3171 = true;
            break;
        }
        if ((_2998 + 1.0) < _2996.x)
        {
            _3171 = true;
            break;
        }
        _3171 = false;
        break;
    }
    float _3375;
    if (_3171)
    {
        discard_state = true;
        _3375 = 0.0;
    }
    else
    {
        _3375 = cbInstanceData._m0[_2858].w;
    }
    SV_Target.x = _3002;
    SV_Target.y = _3003;
    SV_Target.z = _3004;
    SV_Target.w = _3375;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2858].w;
    discard_exit();
}


