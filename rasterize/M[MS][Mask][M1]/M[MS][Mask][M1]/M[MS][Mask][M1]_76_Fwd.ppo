#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1455;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _343.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3780 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _418 = (_411 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _419 = (_411 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _420 = (_411 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _469 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _483 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _343.y) * 2.0) - ((((_459 - _469) * cbMtdParam._m0[23u].w) + _469) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3791 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _491 = (_484 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418;
    float _492 = (_484 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419;
    float _493 = (_484 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _530 = _528.x;
    float _531 = _528.y;
    float _532 = _528.z;
    float _539 = ((_511.x - _530) * _411) + _530;
    float _540 = ((_511.y - _531) * _411) + _531;
    float _541 = ((_511.z - _532) * _411) + _532;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _566 = ((_553.z - _541) * _484) + _541;
    float _569 = ((((_553.x - _539) * _484) + _539) * 2.0) + (-1.0);
    float _571 = ((((_553.y - _540) * _484) + _540) * 2.0) + (-1.0);
    float _572 = dot(vec2(_569, _571), vec2(_569, _571));
    float _3802 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _603 = (((_591.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _569;
    float _604 = (((_591.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _571;
    float _607 = fma(_577, _245, fma(_604, _252, _603 * _238));
    float _610 = fma(_577, _246, fma(_604, _253, _603 * _239));
    float _613 = fma(_577, _247, fma(_604, _254, _603 * _240));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _656 = (cbMtdParam._m0[19u].x + dot(vec4(_617 * _607, _617 * _610, _617 * _613, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_646 - _647) * cbMtdParam._m0[24u].z) + _647) * cbMtdParam._m0[21u].z);
    float _3813 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _659 = (-0.0) - cbMtdParam._m0[24u].x;
    float _661 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
    float _669 = _657 - ((_657 * TEXCOORD_8.x) * _662);
    float _670 = _657 - ((_657 * TEXCOORD_8.y) * _662);
    float _671 = _657 - ((_657 * TEXCOORD_8.z) * _662);
    float _678 = (_669 * (cbMtdParam._m0[17u].x - _491)) + _491;
    float _679 = (_670 * (cbMtdParam._m0[17u].y - _492)) + _492;
    float _680 = (_671 * (cbMtdParam._m0[17u].z - _493)) + _493;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _721 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_694 - _695) * cbMtdParam._m0[24u].w) + _695) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3834 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _730 = ((((cbMtdParam._m0[10u].x - _678) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _722) + _678;
    float _731 = ((((cbMtdParam._m0[10u].y - _679) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _722) + _679;
    float _732 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _680)) * _722) + _680;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _760 = _758.x;
    float _778 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _760) * _411) + _760;
    float _795 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _778) * _484) + _778;
    float _799 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _795) * cbMtdParam._m0[19u].z) + _795;
    float _801 = _799 - (_799 * _669);
    float _803 = _801 - (_801 * _722);
    float _807 = (cbMtdParam._m0[19u].w * (_591.z - _566)) + _566;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _828 = (_821.x * 2.0) + (-1.0);
    float _829 = (_821.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _3845 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _838 = ((_821.z - _807) * _669) + _807;
    float _841 = ((cbMtdParam._m0[23u].x - _838) * _722) + _838;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _866 = (_860.x * 2.0) + (-1.0);
    float _867 = (_860.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _3856 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _883 = ((sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _577) * _671) + _577;
    float _886 = (((_828 - _603) * _669) + _603) + (cbMtdParam._m0[21u].x * _603);
    float _887 = (((_829 - _604) * _670) + _604) + (cbMtdParam._m0[21u].x * _604);
    float _898 = (((_866 - _886) + (_886 * cbMtdParam._m0[22u].z)) * _722) + _886;
    float _899 = (((_867 - _887) + (_887 * cbMtdParam._m0[22u].z)) * _722) + _887;
    float _900 = (_722 * (sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) - _883)) + _883;
    float _902 = cbMtdParam._m0[22u].x + _591.w;
    float _905 = fma(_900, _245, fma(_899, _252, _898 * _238));
    float _908 = fma(_900, _246, fma(_899, _253, _898 * _239));
    float _911 = fma(_900, _247, fma(_899, _254, _898 * _240));
    float _915 = inversesqrt(dot(vec3(_905, _908, _911), vec3(_905, _908, _911)));
    float _916 = _915 * _905;
    float _917 = _915 * _908;
    float _918 = _915 * _911;
    float _3867 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _919 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _3889 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3900 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3911 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3922 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _924 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _938 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _988 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _978);
    float _989 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _978);
    float _990 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _978);
    float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
    float _995 = _988 * _994;
    float _996 = _989 * _994;
    float _997 = _990 * _994;
    float _1003 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1004 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1022 = fma(_918, cbSceneParam._m0[5u].z, fma(_917, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _916));
    float _1025 = fma(_918, cbSceneParam._m0[6u].z, fma(_917, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _916));
    float _1028 = fma(_918, cbSceneParam._m0[7u].z, fma(_917, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _916));
    uint _1042 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1048 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_1042].x;
    float _1049 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1042].y;
    float _1050 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_1042].z;
    float _3933 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1054 = 1.0 - _924;
    float _1055 = _1051 * _1054;
    float _1056 = _1052 * _1054;
    float _1057 = _1053 * _1054;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _924;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _924;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _924;
    float _1065 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1003, cbSceneParam._m0[86u].y * _1004));
    float _1081 = ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_916, _917, _918), vec3(_995, _996, _997));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _916) - _995;
    float _1090 = (_1085 * _917) - _996;
    float _1091 = (_1085 * _918) - _997;
    float _1095 = abs(dot(vec3(_995, _996, _997), vec3(_916, _917, _918)));
    float _3966 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_919);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1116 = (1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1117 = _1110 * _1097;
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1454;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1179 = fma(_1153, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145));
        float _1183 = fma(_1153, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145));
        float _1187 = fma(_1153, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145));
        float _1212 = _1145 + _916;
        float _1213 = _1149 + _917;
        float _1214 = _1153 + _918;
        float _1224 = fma(_1214, cbModelParam._m0[26u].z, fma(_1213, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1212)) - _1179;
        float _1225 = fma(_1214, cbModelParam._m0[27u].z, fma(_1213, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1212)) - _1183;
        float _1226 = fma(_1214, cbModelParam._m0[28u].z, fma(_1213, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1212)) - _1187;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1179 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1183 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[34u].z) + ((((((_1187 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1282 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1248.x + (-0.5));
        float _1284 = _1282 * (_1248.y + (-0.5));
        float _1285 = _1282 * (_1248.z + (-0.5));
        float _1292 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1255.x + (-0.5));
        float _1294 = _1292 * (_1255.y + (-0.5));
        float _1295 = _1292 * (_1255.z + (-0.5));
        float _1302 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1262.x + (-0.5));
        float _1304 = _1302 * (_1262.y + (-0.5));
        float _1305 = _1302 * (_1262.z + (-0.5));
        float _1312 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1269.x + (-0.5));
        float _1314 = _1312 * (_1269.y + (-0.5));
        float _1315 = _1312 * (_1269.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1336 = (dot(vec3(_916, _917, _918), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1346 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4014 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1348 + 1.0))) + _1353) * _1316;
        float _1363 = _1284 * 0.5;
        float _1364 = _1294 * 0.5;
        float _1365 = _1304 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_916, _917, _918), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4047 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1390 + 1.0))) + _1395) * _1317;
        float _1405 = _1285 * 0.5;
        float _1406 = _1295 * 0.5;
        float _1407 = _1305 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_916, _917, _918), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4080 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1432 + 1.0))) + _1437) * _1318;
        _1454 = _1285;
        _1456 = _1284;
        _1457 = _1283;
        _1458 = _1295;
        _1459 = _1294;
        _1460 = _1293;
        _1461 = _1305;
        _1462 = _1304;
        _1463 = _1303;
        _1464 = _1318;
        _1465 = _1317;
        _1466 = _1316;
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1455;
        _1456 = _1455;
        _1457 = _1455;
        _1458 = _1455;
        _1459 = _1455;
        _1460 = _1455;
        _1461 = _1455;
        _1462 = _1455;
        _1463 = _1455;
        _1464 = _1455;
        _1465 = _1455;
        _1466 = _1455;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1153, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145));
        float _1497 = fma(_1153, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145));
        float _1501 = fma(_1153, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145));
        float _1524 = _1145 + _916;
        float _1525 = _1149 + _917;
        float _1526 = _1153 + _918;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_916, _917, _918), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4143 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_916, _917, _918), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4176 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_916, _917, _918), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4209 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1455;
        _1763 = _1455;
        _1764 = _1455;
        _1765 = _1455;
        _1766 = _1455;
        _1767 = _1455;
        _1768 = _1455;
        _1769 = _1455;
        _1770 = _1455;
        _1771 = _1455;
        _1772 = _1455;
        _1773 = _1455;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1467)) + _1467;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1468)) + _1468;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1469)) + _1469;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1089 * 0.5;
    float _1831 = _1090 * 0.5;
    float _1832 = _1091 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1454, _1458, _1461, _1464));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _919);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1947 = fma(_1153, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145)) + cbModelParam._m0[13u].w;
        float _1951 = fma(_1153, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145)) + cbModelParam._m0[14u].w;
        float _1955 = fma(_1153, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145)) + cbModelParam._m0[15u].w;
        float _1958 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1961 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1964 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _1992;
        if (_1958 > 0.0)
        {
            _1992 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1992 = frontier_phi_14_12_ladder;
        }
        float _2195;
        if (_1961 > 0.0)
        {
            _2195 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2195 = frontier_phi_23_19_ladder;
        }
        float _2449;
        if (_1964 > 0.0)
        {
            _2449 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2449 = frontier_phi_35_30_ladder;
        }
        float _2451 = isnan(_2195) ? _1992 : (isnan(_1992) ? _2195 : min(_1992, _2195));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1958) + _1947;
        float _2457 = (_2452 * _1961) + _1951;
        float _2458 = (_2452 * _1964) + _1955;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2459;
        float _2463 = _2459 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 > _2463) || ((_2457 < _2461) || ((_2456 < _2461) || (_2456 > _2463))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2458, cbModelParam._m0[9u].z, fma(_2457, cbModelParam._m0[9u].y, _2456 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2458, cbModelParam._m0[10u].z, fma(_2457, cbModelParam._m0[10u].y, _2456 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2458, cbModelParam._m0[11u].z, fma(_2457, cbModelParam._m0[11u].y, _2456 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_13_35_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1980 = frontier_phi_13_35_ladder_2;
        _1982 = frontier_phi_13_35_ladder_1;
        _1984 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1899);
        _1980 = _1968.x * cbModelParam._m0[1u].y;
        _1982 = _1968.y * cbModelParam._m0[1u].y;
        _1984 = _1968.z * cbModelParam._m0[1u].y;
    }
    float _1988 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _919);
    float _1989 = isnan(_1988) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1988 : min(cbModelParam._m0[25u].w, _1988));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1153, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1153, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1153, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2057 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2060 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2200;
        if (_2054 > 0.0)
        {
            _2200 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2200 = frontier_phi_25_21_ladder;
        }
        float _2476;
        if (_2057 > 0.0)
        {
            _2476 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2476 = frontier_phi_37_32_ladder;
        }
        float _2689;
        if (_2060 > 0.0)
        {
            _2689 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2689 = frontier_phi_46_43_ladder;
        }
        float _2691 = isnan(_2476) ? _2200 : (isnan(_2200) ? _2476 : min(_2200, _2476));
        float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
        float _2696 = (_2692 * _2054) + _2043;
        float _2697 = (_2692 * _2057) + _2047;
        float _2698 = (_2692 * _2060) + _2051;
        float _2699 = _2692 * 9.9999997473787516355514526367188e-05;
        float _2700 = (-1.0) - _2699;
        float _2702 = _2699 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2698 > _2702) || ((_2698 < _2700) || ((_2697 > _2702) || ((_2697 < _2700) || ((_2696 < _2700) || (_2696 > _2702))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2698, cbModelParam._m0[17u].z, fma(_2697, cbModelParam._m0[17u].y, _2696 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2698, cbModelParam._m0[18u].z, fma(_2697, cbModelParam._m0[18u].y, _2696 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2698, cbModelParam._m0[19u].z, fma(_2697, cbModelParam._m0[19u].y, _2696 * cbModelParam._m0[19u].x))), _1989);
            frontier_phi_22_46_ladder = _2897.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2897.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2897.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_22_46_ladder_2;
        _2081 = frontier_phi_22_46_ladder_1;
        _2083 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _1989);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1116 * _1065) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2079 - _1980)) + _1980);
    float _2098 = (((_1116 * _1067) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2100 = (((_1116 * _1068) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    uvec4 _2119 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2121 = _2119.x * 14u;
    uint _2122 = _2121 + 13u;
    float _2129 = _1081 + (-1.0);
    float _2134 = (cbLight._m0[_2122].x * _2129) + 1.0;
    float _2135 = (cbLight._m0[_2122].y * _2129) + 1.0;
    float _2136 = (cbLight._m0[_2122].z * _2129) + 1.0;
    float _2137 = (cbLight._m0[_2122].w * _2129) + 1.0;
    uint _2138 = _2121 + 5u;
    float _2144 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2148 = _2121 + 4u;
    float _2154 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2158 = _2121 | 1u;
    float _2169 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_916, _917, _918));
    float _2172 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_916, _917, _918));
    float _4345 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _4356 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2177 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2179 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2186 = ((cbLight._m0[_2138].x * _2144) * _2179) + ((cbLight._m0[_2148].x * _2154) * _2177);
    float _2187 = ((_2144 * cbLight._m0[_2138].y) * _2179) + ((_2154 * cbLight._m0[_2148].y) * _2177);
    float _2188 = ((_2144 * cbLight._m0[_2138].z) * _2179) + ((_2154 * cbLight._m0[_2148].z) * _2177);
    uvec4 _2192 = floatBitsToUint(cbLight._m0[_2121 + 12u]);
    bool _2194 = _2192.x == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2194)
    {
        _2205 = _2186;
        _2207 = _2187;
        _2209 = _2188;
    }
    else
    {
        uint _2213 = _2121 + 6u;
        float _2229 = (dot(vec3(cbLight._m0[_2121 + 2u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4367 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2232 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2205 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _2186;
        _2207 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _2187;
        _2209 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _2188;
    }
    bool _2212 = _2192.y == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2212)
    {
        _2250 = _2205;
        _2252 = _2207;
        _2254 = _2209;
    }
    else
    {
        uint _2420 = _2121 + 7u;
        float _2436 = (dot(vec3(cbLight._m0[_2121 + 3u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4383 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2439 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2250 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2205;
        _2252 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2207;
        _2254 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2209;
    }
    uint _2257 = _2121 + 8u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _919) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2121].x + _995;
    float _2273 = cbLight._m0[_2121].y + _996;
    float _2274 = cbLight._m0[_2121].z + _997;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2121].xyz));
    float _4399 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2286 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2287 = dot(vec3(_916, _917, _918), vec3(_2279, _2280, _2281));
    float _4421 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2279, _2280, _2281));
    float _4432 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2271 * _2271;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2307 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2308 = 0.959999978542327880859375 - _1062;
    float _2310 = 0.959999978542327880859375 - _1063;
    float _2311 = 0.959999978542327880859375 - _1064;
    float _2318 = 1.0 - _2271;
    float _2329 = (0.5 / (((_2286 * ((_2285 * _2318) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2318) + _2271) * _2285))) * _2285;
    float _4443 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    uint _2342 = _2121 + 9u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _919) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2158].x + _995;
    float _2356 = cbLight._m0[_2158].y + _996;
    float _2357 = cbLight._m0[_2158].z + _997;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2158].xyz));
    float _4454 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2369 = dot(vec3(_916, _917, _918), vec3(_2362, _2363, _2364));
    float _4465 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2362, _2363, _2364));
    float _4476 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2354 * _2354;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2395 = 1.0 - _2354;
    float _2405 = (0.5 / (((_2286 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2395) + _2354) * _2368))) * _2368;
    float _4487 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    float _2417 = (((((_2388 * _2308) + _1065) * cbLight._m0[_2342].x) * _2407) * _2144) + (((((_2307 * _2308) + _1065) * cbLight._m0[_2257].x) * _2331) * _2154);
    float _2418 = (((((_2388 * _2310) + _1067) * cbLight._m0[_2342].y) * _2407) * _2144) + (((((_2307 * _2310) + _1067) * cbLight._m0[_2257].y) * _2331) * _2154);
    float _2419 = (((((_2388 * _2311) + _1068) * cbLight._m0[_2342].z) * _2407) * _2144) + (((((_2307 * _2311) + _1068) * cbLight._m0[_2257].z) * _2331) * _2154);
    float _2481;
    float _2483;
    float _2485;
    if (_2194)
    {
        _2481 = _2417;
        _2483 = _2418;
        _2485 = _2419;
    }
    else
    {
        uint _2487 = _2121 + 2u;
        uint _2491 = _2121 + 10u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _919) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _995;
        float _2508 = cbLight._m0[_2487].y + _996;
        float _2509 = cbLight._m0[_2487].z + _997;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2487].xyz));
        float _4498 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2521 = dot(vec3(_916, _917, _918), vec3(_2514, _2515, _2516));
        float _4509 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4520 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2547 = 1.0 - _2506;
        float _2557 = (0.5 / (((_2286 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2547) + _2506) * _2520))) * _2520;
        float _4531 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2481 = (((((_2540 * _2308) + _1065) * cbLight._m0[_2491].x) * _2559) * _2560) + _2417;
        _2483 = (((((_2540 * _2310) + _1067) * cbLight._m0[_2491].y) * _2559) * _2560) + _2418;
        _2485 = (((((_2540 * _2311) + _1068) * cbLight._m0[_2491].z) * _2559) * _2560) + _2419;
    }
    float _2595;
    float _2597;
    float _2599;
    if (_2212)
    {
        _2595 = _2481;
        _2597 = _2483;
        _2599 = _2485;
    }
    else
    {
        uint _2606 = _2121 + 3u;
        uint _2610 = _2121 + 11u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _919) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _995;
        float _2627 = cbLight._m0[_2606].y + _996;
        float _2628 = cbLight._m0[_2606].z + _997;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2606].xyz));
        float _4547 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2640 = dot(vec3(_916, _917, _918), vec3(_2633, _2634, _2635));
        float _4558 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4569 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2286 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2666) + _2625) * _2639))) * _2639;
        float _4580 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2595 = (((((_2659 * _2308) + _1065) * cbLight._m0[_2610].x) * _2678) * _2679) + _2481;
        _2597 = (((((_2659 * _2310) + _1067) * cbLight._m0[_2610].y) * _2678) * _2679) + _2483;
        _2599 = (((((_2659 * _2311) + _1068) * cbLight._m0[_2610].z) * _2678) * _2679) + _2485;
    }
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_2119.y == 0u)
    {
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2754;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2754;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2754;
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.x;
        uint _2781 = uint((float(_2769.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1004) / _2770))) + floor(float(uint(cbSceneParam._m0[85u].x * _1003) / _2770)));
        float _2791 = (log2(_2757 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2792 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        uint _2795 = uint(isnan(14.0) ? _2792 : (isnan(_2792) ? 14.0 : min(_2792, 14.0)));
        uvec4 _2800 = texelFetch(g_lightClusterGridBuffer, int(((_2795 << 2u) + (_2781 << 6u)) >> 2u));
        uint _2801 = _2800.x;
        uint _2802 = _2769.z;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((((1u << ((_2802 >> 4u) & 15u)) + 4294967295u) & _2801) == 0u) || ((_2802 & 240u) == 0u))
        {
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
        }
        else
        {
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            uint _3052 = 0u;
            uint _3061;
            bool _3062;
            for (;;)
            {
                _3061 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                _3062 = _3061 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3062)
                {
                    frontier_phi_61_pred = _3046;
                    frontier_phi_61_pred_1 = _3051;
                    frontier_phi_61_pred_2 = _3050;
                    frontier_phi_61_pred_3 = _3049;
                    frontier_phi_61_pred_4 = _3048;
                    frontier_phi_61_pred_5 = _3047;
                }
                else
                {
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    uint _3176;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3061;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    for (;;)
                    {
                        uint _3180 = uint(findLSB(_3176)) + (_3052 << 5u);
                        uint _3177 = (_3176 + 4294967295u) & _3176;
                        uint _3182 = _3180 * 48u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3202 = (_3180 * 48u) + 4u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3221 = (_3180 * 48u) + 8u;
                        vec3 _3232 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x));
                        float _3236 = _3196.x - _2755;
                        float _3237 = _3196.y - _2756;
                        float _3238 = _3196.z - _2757;
                        float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                        float _3242 = inversesqrt(_3239);
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3246 = dot(vec3(_1022, _1025, _1028), vec3(_3243, _3244, _3245));
                        float _3251 = 1.0 - (_3239 * _3196.w);
                        float _4606 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3253 = sqrt(_3239) * _3215.w;
                        float _3256 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3246) + _3257;
                        float _3263 = _3253 * _3253;
                        float _3267 = ((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3252) / ((_3263 * 0.699999988079071044921875) + 1.0);
                        float _3271 = (-0.0) - _2755;
                        float _3272 = (-0.0) - _2756;
                        float _3273 = (-0.0) - _2757;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3288 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _1097;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_1022, _1025, _1028), vec3(_3278, _3279, _3280));
                        float _4622 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3313 = dot(vec3(_1022, _1025, _1028), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4633 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3256 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3246) + _3322;
                        float _4644 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4655 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3320 * _3320) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125))) * _3252;
                        _3105 = (_3267 * _3215.x) + _3173;
                        _3106 = (_3267 * _3215.y) + _3174;
                        _3107 = (_3267 * _3215.z) + _3175;
                        _3102 = (_3348 * _3232.x) + _3170;
                        _3103 = (_3348 * _3232.y) + _3171;
                        _3104 = (_3348 * _3232.z) + _3172;
                        if (_3177 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3177;
                        }
                    }
                    frontier_phi_61_pred = _3102;
                    frontier_phi_61_pred_1 = _3107;
                    frontier_phi_61_pred_2 = _3106;
                    frontier_phi_61_pred_3 = _3105;
                    frontier_phi_61_pred_4 = _3104;
                    frontier_phi_61_pred_5 = _3103;
                }
                _2903 = frontier_phi_61_pred;
                _2913 = frontier_phi_61_pred_1;
                _2911 = frontier_phi_61_pred_2;
                _2909 = frontier_phi_61_pred_3;
                _2907 = frontier_phi_61_pred_4;
                _2905 = frontier_phi_61_pred_5;
                uint _3053 = _3052 + 1u;
                if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3046 = _2903;
                    _3047 = _2905;
                    _3048 = _2907;
                    _3049 = _2909;
                    _3050 = _2911;
                    _3051 = _2913;
                    _3052 = _3053;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
        }
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.z;
        uint _2919 = (_2917 >> 8u) & 15u;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((4294967295u << _2919) & _2801) == 0u)
        {
            _3014 = _2902;
            _3016 = _2904;
            _3018 = _2906;
            _3020 = _2908;
            _3022 = _2910;
            _3024 = _2912;
        }
        else
        {
            float _3039 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
            float _3040 = _3039 * _2755;
            float _3041 = _3039 * _2756;
            float _3042 = _3039 * _2757;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2919 < ((_2917 >> 12u) & 15u))
            {
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3153 = _2902;
                float _3154 = _2904;
                float _3155 = _2906;
                float _3156 = _2908;
                float _3157 = _2910;
                float _3158 = _2912;
                uint _3159 = _2919;
                uint _3168;
                bool _3169;
                for (;;)
                {
                    _3168 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                    _3169 = _3168 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3169)
                    {
                        frontier_phi_67_pred = _3156;
                        frontier_phi_67_pred_1 = _3157;
                        frontier_phi_67_pred_2 = _3158;
                        frontier_phi_67_pred_3 = _3155;
                        frontier_phi_67_pred_4 = _3154;
                        frontier_phi_67_pred_5 = _3153;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        uint _3372 = _3168;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3383 = ((_3159 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3383 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3383 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3383 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_2757, _3490.z, fma(_2756, _3490.y, _3490.x * _2755)) + _3490.w;
                            _3503 = !((fma(_2757, _3471.z, fma(_2756, _3471.y, _3471.x * _2755)) + _3471.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3398.x - _2755;
                                float _3531 = _3398.y - _2756;
                                float _3532 = _3398.z - _2757;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3399 * _3399));
                                float _4666 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3548 = sqrt(_3533) * _3414.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_1022, _1025, _1028))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_2757, _3441.z, fma(_2756, _3441.y, _3441.x * _2755)) + _3441.w) / _3502;
                                float _3562 = (fma(_2757, _3456.z, fma(_2756, _3456.y, _3456.x * _2755)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4682 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _1097;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3040;
                                float _3592 = _3538 - _3041;
                                float _3593 = _3539 - _3042;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_1022, _1025, _1028), vec3((-0.0) - _3040, (-0.0) - _3041, (-0.0) - _3042));
                                float _4693 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3605 = dot(vec3(_1022, _1025, _1028), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4704 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_1022, _1025, _1028), vec3(_3537, _3538, _3539))) + _3614;
                                float _4715 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4726 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3642 * _3426.x;
                                frontier_phi_73_pred_1 = _3642 * _3426.y;
                                frontier_phi_73_pred_2 = _3568 * _3414.z;
                                frontier_phi_73_pred_3 = _3568 * _3414.y;
                                frontier_phi_73_pred_4 = _3568 * _3414.x;
                                frontier_phi_73_pred_5 = _3642 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3646 = frontier_phi_73_pred;
                            _3647 = frontier_phi_73_pred_1;
                            _3651 = frontier_phi_73_pred_2;
                            _3650 = frontier_phi_73_pred_3;
                            _3649 = frontier_phi_73_pred_4;
                            _3648 = frontier_phi_73_pred_5;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3356;
                        frontier_phi_67_pred_1 = _3357;
                        frontier_phi_67_pred_2 = _3358;
                        frontier_phi_67_pred_3 = _3355;
                        frontier_phi_67_pred_4 = _3354;
                        frontier_phi_67_pred_5 = _3353;
                    }
                    _3021 = frontier_phi_67_pred;
                    _3023 = frontier_phi_67_pred_1;
                    _3025 = frontier_phi_67_pred_2;
                    _3019 = frontier_phi_67_pred_3;
                    _3017 = frontier_phi_67_pred_4;
                    _3015 = frontier_phi_67_pred_5;
                    uint _3160 = _3159 + 1u;
                    if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3153 = _3015;
                        _3154 = _3017;
                        _3155 = _3019;
                        _3156 = _3021;
                        _3157 = _3023;
                        _3158 = _3025;
                        _3159 = _3160;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3023;
                frontier_phi_55_56_ladder_1 = _3025;
                frontier_phi_55_56_ladder_2 = _3021;
                frontier_phi_55_56_ladder_3 = _3019;
                frontier_phi_55_56_ladder_4 = _3017;
                frontier_phi_55_56_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_55_56_ladder = _2910;
                frontier_phi_55_56_ladder_1 = _2912;
                frontier_phi_55_56_ladder_2 = _2908;
                frontier_phi_55_56_ladder_3 = _2906;
                frontier_phi_55_56_ladder_4 = _2904;
                frontier_phi_55_56_ladder_5 = _2902;
            }
            _3014 = frontier_phi_55_56_ladder_5;
            _3016 = frontier_phi_55_56_ladder_4;
            _3018 = frontier_phi_55_56_ladder_3;
            _3020 = frontier_phi_55_56_ladder_2;
            _3022 = frontier_phi_55_56_ladder;
            _3024 = frontier_phi_55_56_ladder_1;
        }
        float _3029 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _2814 = (_3029 * _3020) + _2250;
        _2816 = (_3029 * _3022) + _2252;
        _2818 = (_3029 * _3024) + _2254;
        _2820 = ((_3014 * _1065) * _3029) + _2595;
        _2822 = ((_3016 * _1067) * _3029) + _2597;
        _2824 = ((_3018 * _1068) * _3029) + _2599;
    }
    else
    {
        _2814 = _2250;
        _2816 = _2252;
        _2818 = _2254;
        _2820 = _2595;
        _2822 = _2597;
        _2824 = _2599;
    }
    float _4742 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _4753 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4764 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    uint _2844 = _257 + 6u;
    float _2852 = _1003 / cbSceneParam._m0[86u].x;
    float _2853 = _1004 / cbSceneParam._m0[86u].y;
    vec4 _2867 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, (log2((isnan(cbSceneParam._m0[77u].w) ? _938 : (isnan(_938) ? cbSceneParam._m0[77u].w : min(_938, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2869 = _2867.x;
    float _2870 = _2867.y;
    float _2871 = _2867.z;
    float _2872 = _2867.w;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_938 > cbSceneParam._m0[78u].w)
    {
        float _2927 = isnan(_938) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _938 : min(cbSceneParam._m0[80u].w, _938));
        float _2928 = _2927 / _938;
        float _2939 = _2928 * _988;
        float _2940 = _989 * _2928;
        float _2941 = (-0.0) - _2940;
        float _2942 = _2928 * _990;
        float _2944 = (cbSceneParam._m0[77u].w * _2941) / _2927;
        float _2945 = _2944 + cbSceneParam._m0[79u].w;
        float _2946 = cbSceneParam._m0[79u].w - _2940;
        float _2952 = sqrt(((_2939 * _2939) + (_2940 * _2940)) + (_2942 * _2942));
        float _2955 = (1.0 - (cbSceneParam._m0[77u].w / _2927)) * _2952;
        float _2960 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2962 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3115;
        if (abs((_2941 - _2944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3115 = ((((_2945 > 0.0) ? exp2(_2960 * _2945) : (2.0 - exp2(_2962 * _2945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2955;
        }
        else
        {
            float _3075 = 1.0 / cbSceneParam._m0[80u].x;
            float _3076 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : max(_2945, _2946));
            float _3077 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : min(_2945, _2946));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            _3115 = ((abs(_2952 / _2941) * cbSceneParam._m0[80u].y) * ((((_3086 - _3087) * 2.0) - ((exp2(_2960 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0)))) - exp2(_2960 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))))) * _3075)) - ((exp2(_2962 * _3086) - exp2(_2962 * _3087)) * _3075))) + (_2955 * cbSceneParam._m0[80u].z);
        }
        vec4 _3117 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, 1.0), 0.0);
        float _3126 = exp2((_3115 * (-1.44269502162933349609375)) * (1.0 - _3117.w));
        float _3127 = log2(_3126);
        float _3143 = log2(_2872);
        _2964 = (exp2(_3143 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].x)) * _3117.x) / cbSceneParam._m0[78u].x)) + _2869;
        _2966 = (exp2(_3143 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].y)) * _3117.y) / cbSceneParam._m0[78u].y)) + _2870;
        _2968 = (exp2(_3143 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].z)) * _3117.z) / cbSceneParam._m0[78u].z)) + _2871;
        _2970 = _3126 * _2872;
    }
    else
    {
        _2964 = _2869;
        _2966 = _2870;
        _2968 = _2871;
        _2970 = _2872;
    }
    float _2982 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2983 = _2982 == 3.0;
    float _2984 = log2(_2970);
    float _2991 = exp2(_2984 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2814 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1081))) + ((_2820 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2984 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2816 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1081))) + ((_2822 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _2993 = exp2(_2984 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2818 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1081))) + ((_2824 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3002 = (_2982 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3002 * (_2983 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.y = _3002 * (_2983 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.z = _3002 * (_2983 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.w = cbInstanceData._m0[_2844].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2844].w;
}


