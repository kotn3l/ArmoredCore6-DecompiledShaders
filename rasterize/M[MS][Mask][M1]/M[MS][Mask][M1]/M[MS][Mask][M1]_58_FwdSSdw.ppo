#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1425;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3776 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3787 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3798 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _433 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _450 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_421 - _433) * cbMtdParam._m0[23u].w) + _433) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3809 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _458 = (_451 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _459 = (_451 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _460 = (_451 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _499 = _497.x;
    float _509 = dot(vec4(_499, _497.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _523 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_499 - _509) * cbMtdParam._m0[23u].w) + _509) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3820 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _531 = (_524 * ((_477.x * cbMtdParam._m0[13u].x) - _458)) + _458;
    float _532 = (_524 * ((_477.y * cbMtdParam._m0[13u].y) - _459)) + _459;
    float _533 = (_524 * ((_477.z * cbMtdParam._m0[13u].z) - _460)) + _460;
    float _537 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _531;
    float _540 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _532;
    float _543 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _533;
    float _550 = ((_531 - _537) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) + _537;
    float _551 = ((_532 - _540) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _540;
    float _552 = ((_533 - _543) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _543;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _451) + _606;
    float _616 = ((_587.y - _607) * _451) + _607;
    float _617 = ((_587.z - _608) * _451) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_629.z - _617) * _524) + _617;
    float _645 = ((((_629.x - _615) * _524) + _615) * 2.0) + (-1.0);
    float _646 = ((((_629.y - _616) * _524) + _616) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3831 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _684 = (_645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_564.x * 2.0) + (-1.0)))) + (((_672.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _685 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_564.y * 2.0) + (-1.0)))) + (((_672.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _699 = _697.x;
    float _700 = 1.0 - _699;
    float _729 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_699 - _700) * cbMtdParam._m0[24u].w) + _700) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3842 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _738 = ((((cbMtdParam._m0[10u].x - _550) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _730) + _550;
    float _739 = ((((cbMtdParam._m0[10u].y - _551) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _730) + _551;
    float _740 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _552)) * _730) + _552;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _768 = _766.x;
    float _786 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _768) * _451) + _768;
    float _804 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _304) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _305) + cbTextureTilingScale._m0[21u].w)).x - _786) * _524) + _786;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _804) * cbMtdParam._m0[19u].z) + _804;
    float _810 = _808 - (_808 * _730);
    float _815 = (((_564.z - _642) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _642;
    float _819 = ((_672.z - _815) * cbMtdParam._m0[19u].w) + _815;
    float _823 = ((cbMtdParam._m0[23u].x - _819) * _730) + _819;
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _848 = (_842.x * 2.0) + (-1.0);
    float _849 = (_842.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _3853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _866 = (_730 * (((cbMtdParam._m0[22u].z * _684) - _684) + _848)) + _684;
    float _867 = (_730 * (((cbMtdParam._m0[22u].z * _685) - _685) + _849)) + _685;
    float _868 = (_730 * (sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) - _652)) + _652;
    float _872 = cbMtdParam._m0[22u].x + _672.w;
    float _875 = fma(_868, _253 * NORMAL.x, fma(_867, _260 * TANGENT.x, (_246 * _238) * _866));
    float _878 = fma(_868, _253 * NORMAL.y, fma(_867, _260 * TANGENT.y, (_246 * _239) * _866));
    float _881 = fma(_868, _253 * NORMAL.z, fma(_867, _260 * TANGENT.z, (_246 * _240) * _866));
    float _885 = inversesqrt(dot(vec3(_875, _878, _881), vec3(_875, _878, _881)));
    float _886 = _885 * _875;
    float _887 = _885 * _878;
    float _888 = _885 * _881;
    float _3864 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _889 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _3886 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3897 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3908 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3919 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _894 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _908 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _958 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _948);
    float _959 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _948);
    float _960 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _948);
    float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
    float _965 = _958 * _964;
    float _966 = _959 * _964;
    float _967 = _960 * _964;
    float _973 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _974 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _992 = fma(_888, cbSceneParam._m0[5u].z, fma(_887, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _886));
    float _995 = fma(_888, cbSceneParam._m0[6u].z, fma(_887, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _886));
    float _998 = fma(_888, cbSceneParam._m0[7u].z, fma(_887, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _886));
    uint _1012 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1018 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_1012].x;
    float _1019 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_1012].y;
    float _1020 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_1012].z;
    float _3930 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1024 = 1.0 - _894;
    float _1025 = _1021 * _1024;
    float _1026 = _1022 * _1024;
    float _1027 = _1023 * _1024;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _894;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _894;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _894;
    float _1035 = _1032 + 0.039999999105930328369140625;
    float _1037 = _1033 + 0.039999999105930328369140625;
    float _1038 = _1034 + 0.039999999105930328369140625;
    vec4 _1047 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _973, cbSceneParam._m0[86u].y * _974));
    float _1051 = ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * TEXCOORD_5.w) * _1047.x;
    float _1052 = dot(vec3(_886, _887, _888), vec3(_965, _966, _967));
    float _1055 = _1052 * 2.0;
    float _1059 = (_1055 * _886) - _965;
    float _1060 = (_1055 * _887) - _966;
    float _1061 = (_1055 * _888) - _967;
    float _1065 = abs(dot(vec3(_965, _966, _967), vec3(_886, _887, _888)));
    float _3963 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1067 = sqrt(_889);
    float _1080 = exp2((_1067 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1067 * 3.0));
    float _1086 = (1.0 - _1080) * ((_1067 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1087 = _1080 * _1067;
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1424;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1149 = fma(_1123, cbModelParam._m0[26u].z, fma(_1119, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115));
        float _1153 = fma(_1123, cbModelParam._m0[27u].z, fma(_1119, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115));
        float _1157 = fma(_1123, cbModelParam._m0[28u].z, fma(_1119, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115));
        float _1182 = _1115 + _886;
        float _1183 = _1119 + _887;
        float _1184 = _1123 + _888;
        float _1194 = fma(_1184, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182)) - _1149;
        float _1195 = fma(_1184, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182)) - _1153;
        float _1196 = fma(_1184, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182)) - _1157;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1149 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1153 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[34u].z) + ((((((_1157 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1252 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1218.x + (-0.5));
        float _1254 = _1252 * (_1218.y + (-0.5));
        float _1255 = _1252 * (_1218.z + (-0.5));
        float _1262 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1225.x + (-0.5));
        float _1264 = _1262 * (_1225.y + (-0.5));
        float _1265 = _1262 * (_1225.z + (-0.5));
        float _1272 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1232.x + (-0.5));
        float _1274 = _1272 * (_1232.y + (-0.5));
        float _1275 = _1272 * (_1232.z + (-0.5));
        float _1282 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1239.x + (-0.5));
        float _1284 = _1282 * (_1239.y + (-0.5));
        float _1285 = _1282 * (_1239.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1306 = (dot(vec3(_886, _887, _888), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1316 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4011 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1318 + 1.0))) + _1323) * _1286;
        float _1333 = _1254 * 0.5;
        float _1334 = _1264 * 0.5;
        float _1335 = _1274 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_886, _887, _888), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4044 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1360 + 1.0))) + _1365) * _1287;
        float _1375 = _1255 * 0.5;
        float _1376 = _1265 * 0.5;
        float _1377 = _1275 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_886, _887, _888), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4077 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1402 + 1.0))) + _1407) * _1288;
        _1424 = _1255;
        _1426 = _1254;
        _1427 = _1253;
        _1428 = _1265;
        _1429 = _1264;
        _1430 = _1263;
        _1431 = _1275;
        _1432 = _1274;
        _1433 = _1273;
        _1434 = _1288;
        _1435 = _1287;
        _1436 = _1286;
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1425;
        _1426 = _1425;
        _1427 = _1425;
        _1428 = _1425;
        _1429 = _1425;
        _1430 = _1425;
        _1431 = _1425;
        _1432 = _1425;
        _1433 = _1425;
        _1434 = _1425;
        _1435 = _1425;
        _1436 = _1425;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1463 = fma(_1123, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115));
        float _1467 = fma(_1123, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115));
        float _1471 = fma(_1123, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115));
        float _1494 = _1115 + _886;
        float _1495 = _1119 + _887;
        float _1496 = _1123 + _888;
        float _1506 = fma(_1496, cbModelParam._m0[30u].z, fma(_1495, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1494)) - _1463;
        float _1507 = fma(_1496, cbModelParam._m0[31u].z, fma(_1495, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1494)) - _1467;
        float _1508 = fma(_1496, cbModelParam._m0[32u].z, fma(_1495, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1494)) - _1471;
        float _1512 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
        float _1525 = ((_1512 * _1506) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1463 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1512 * _1507) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1467 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1512 * _1508) / cbModelParam._m0[35u].z) + ((((((_1471 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1562 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1529.x + (-0.5));
        float _1564 = _1562 * (_1529.y + (-0.5));
        float _1565 = _1562 * (_1529.z + (-0.5));
        float _1572 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1536.x + (-0.5));
        float _1574 = _1572 * (_1536.y + (-0.5));
        float _1575 = _1572 * (_1536.z + (-0.5));
        float _1582 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1543.x + (-0.5));
        float _1584 = _1582 * (_1543.y + (-0.5));
        float _1585 = _1582 * (_1543.z + (-0.5));
        float _1592 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1550.x + (-0.5));
        float _1594 = _1592 * (_1550.y + (-0.5));
        float _1595 = _1592 * (_1550.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_886, _887, _888), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4140 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1626 + 1.0))) + _1631) * _1596;
        float _1641 = _1564 * 0.5;
        float _1642 = _1574 * 0.5;
        float _1643 = _1584 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_886, _887, _888), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4173 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1668 + 1.0))) + _1673) * _1597;
        float _1683 = _1565 * 0.5;
        float _1684 = _1575 * 0.5;
        float _1685 = _1585 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_886, _887, _888), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4206 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1710 + 1.0))) + _1715) * _1598;
        _1732 = _1565;
        _1733 = _1564;
        _1734 = _1563;
        _1735 = _1575;
        _1736 = _1574;
        _1737 = _1573;
        _1738 = _1585;
        _1739 = _1584;
        _1740 = _1583;
        _1741 = _1598;
        _1742 = _1597;
        _1743 = _1596;
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1425;
        _1733 = _1425;
        _1734 = _1425;
        _1735 = _1425;
        _1736 = _1425;
        _1737 = _1425;
        _1738 = _1425;
        _1739 = _1425;
        _1740 = _1425;
        _1741 = _1425;
        _1742 = _1425;
        _1743 = _1425;
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1437)) + _1437;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1438)) + _1438;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1439)) + _1439;
    float _1779 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1756));
    float _1800 = _1059 * 0.5;
    float _1801 = _1060 * 0.5;
    float _1802 = _1061 * 0.5;
    float _1803 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1806 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1809 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1843;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1816 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1424, _1428, _1431, _1434));
        float _1820 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1824 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1831 = dot(vec4(cbModelParam._m0[39u]), vec4(_1800, _1801, _1802, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1854;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1845 = dot(vec4(cbModelParam._m0[40u]), vec4(_1800, _1801, _1802, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1858 = (_1854 * cbModelParam._m0[1u].x) + (_1843 * (1.0 - cbModelParam._m0[1u].x));
    float _1868 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _889);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1868 : min(cbModelParam._m0[25u].z, _1868));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1918 = fma(_1123, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115)) + cbModelParam._m0[13u].w;
        float _1922 = fma(_1123, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115)) + cbModelParam._m0[14u].w;
        float _1926 = fma(_1123, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115)) + cbModelParam._m0[15u].w;
        float _1929 = fma(_1061, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059));
        float _1932 = fma(_1061, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059));
        float _1935 = fma(_1061, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059));
        float _1963;
        if (_1929 > 0.0)
        {
            _1963 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1963 = frontier_phi_14_12_ladder;
        }
        float _2187;
        if (_1932 > 0.0)
        {
            _2187 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2187 = frontier_phi_23_19_ladder;
        }
        float _2444;
        if (_1935 > 0.0)
        {
            _2444 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2444 = frontier_phi_35_30_ladder;
        }
        float _2446 = isnan(_2187) ? _1963 : (isnan(_1963) ? _2187 : min(_1963, _2187));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1929) + _1918;
        float _2452 = (_2447 * _1932) + _1922;
        float _2453 = (_2447 * _1935) + _1926;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1869);
            frontier_phi_13_35_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1951 = frontier_phi_13_35_ladder_2;
        _1953 = frontier_phi_13_35_ladder_1;
        _1955 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1059, _1060, _1061), _1869);
        _1951 = _1939.x * cbModelParam._m0[1u].y;
        _1953 = _1939.y * cbModelParam._m0[1u].y;
        _1955 = _1939.z * cbModelParam._m0[1u].y;
    }
    float _1959 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _889);
    float _1960 = isnan(_1959) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1959 : min(cbModelParam._m0[25u].w, _1959));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1123, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1123, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1123, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1061, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059));
        float _2028 = fma(_1061, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059));
        float _2031 = fma(_1061, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059));
        float _2192;
        if (_2025 > 0.0)
        {
            _2192 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2192 = frontier_phi_25_21_ladder;
        }
        float _2471;
        if (_2028 > 0.0)
        {
            _2471 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2471 = frontier_phi_37_32_ladder;
        }
        float _2684;
        if (_2031 > 0.0)
        {
            _2684 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2684 = frontier_phi_46_43_ladder;
        }
        float _2686 = isnan(_2471) ? _2192 : (isnan(_2192) ? _2471 : min(_2192, _2471));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _2025) + _2014;
        float _2692 = (_2687 * _2028) + _2018;
        float _2693 = (_2687 * _2031) + _2022;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1960);
            frontier_phi_22_46_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_22_46_ladder_2;
        _2052 = frontier_phi_22_46_ladder_1;
        _2054 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1059, _1060, _1061), _1960);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2067 = (((_1086 * _1035) + _1087) * _1051) * ((cbModelParam._m0[1u].w * (_2050 - _1951)) + _1951);
    float _2069 = (((_1086 * _1037) + _1087) * _1051) * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2071 = (((_1086 * _1038) + _1087) * _1051) * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    vec4 _2088 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_973, _974));
    float _2090 = _2088.w;
    float _2102 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2090);
    float _2103 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2090);
    float _2104 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2090);
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _1051 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_886, _887, _888));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_886, _887, _888));
    float _4342 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4353 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2102) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2103) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2104) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2110 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_886, _887, _888)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4364 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2224 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2415 = _2110 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_886, _887, _888)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4380 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2434 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2242 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2197;
        _2244 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2199;
        _2246 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2201;
    }
    uint _2249 = _2110 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _889) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2110].x + _965;
    float _2265 = cbLight._m0[_2110].y + _966;
    float _2266 = cbLight._m0[_2110].z + _967;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2110].xyz));
    float _4396 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _2278 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2279 = dot(vec3(_886, _887, _888), vec3(_2271, _2272, _2273));
    float _4418 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2271, _2272, _2273));
    float _4429 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _1032;
    float _2302 = 0.959999978542327880859375 - _1033;
    float _2303 = 0.959999978542327880859375 - _1034;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4440 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2337 = _2110 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _889) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2150].x + _965;
    float _2351 = cbLight._m0[_2150].y + _966;
    float _2352 = cbLight._m0[_2150].z + _967;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2150].xyz));
    float _4451 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2364 = dot(vec3(_886, _887, _888), vec3(_2357, _2358, _2359));
    float _4462 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2357, _2358, _2359));
    float _4473 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2390 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2278 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2390) + _2349) * _2363))) * _2363;
    float _4484 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2412 = (((((_2383 * _2300) + _1035) * cbLight._m0[_2337].x) * _2402) * _2133) + ((((cbLight._m0[_2249].x * _2102) * ((_2299 * _2300) + _1035)) * _2323) * _2146);
    float _2413 = (((((_2383 * _2302) + _1037) * cbLight._m0[_2337].y) * _2402) * _2133) + ((((cbLight._m0[_2249].y * _2103) * ((_2299 * _2302) + _1037)) * _2323) * _2146);
    float _2414 = (((((_2383 * _2303) + _1038) * cbLight._m0[_2337].z) * _2402) * _2133) + ((((cbLight._m0[_2249].z * _2104) * ((_2299 * _2303) + _1038)) * _2323) * _2146);
    float _2476;
    float _2478;
    float _2480;
    if (_2186)
    {
        _2476 = _2412;
        _2478 = _2413;
        _2480 = _2414;
    }
    else
    {
        uint _2482 = _2110 + 2u;
        uint _2486 = _2110 + 10u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _889) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _965;
        float _2503 = cbLight._m0[_2482].y + _966;
        float _2504 = cbLight._m0[_2482].z + _967;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2482].xyz));
        float _4495 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2516 = dot(vec3(_886, _887, _888), vec3(_2509, _2510, _2511));
        float _4506 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4517 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2278 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2542) + _2501) * _2515))) * _2515;
        float _4528 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2476 = (((((_2535 * _2300) + _1035) * cbLight._m0[_2486].x) * _2554) * _2555) + _2412;
        _2478 = (((((_2535 * _2302) + _1037) * cbLight._m0[_2486].y) * _2554) * _2555) + _2413;
        _2480 = (((((_2535 * _2303) + _1038) * cbLight._m0[_2486].z) * _2554) * _2555) + _2414;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2204)
    {
        _2590 = _2476;
        _2592 = _2478;
        _2594 = _2480;
    }
    else
    {
        uint _2601 = _2110 + 3u;
        uint _2605 = _2110 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _889) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _965;
        float _2622 = cbLight._m0[_2601].y + _966;
        float _2623 = cbLight._m0[_2601].z + _967;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2601].xyz));
        float _4544 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2635 = dot(vec3(_886, _887, _888), vec3(_2628, _2629, _2630));
        float _4555 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4566 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2661 = 1.0 - _2620;
        float _2671 = (0.5 / (((_2278 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2661) + _2620) * _2634))) * _2634;
        float _4577 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2590 = (((((_2654 * _2300) + _1035) * cbLight._m0[_2605].x) * _2673) * _2674) + _2476;
        _2592 = (((((_2654 * _2302) + _1037) * cbLight._m0[_2605].y) * _2673) * _2674) + _2478;
        _2594 = (((((_2654 * _2303) + _1038) * cbLight._m0[_2605].z) * _2673) * _2674) + _2480;
    }
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_2108.y == 0u)
    {
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2749;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2749;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2749;
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.x;
        uint _2776 = uint((float(_2764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _974) / _2765))) + floor(float(uint(cbSceneParam._m0[85u].x * _973) / _2765)));
        float _2786 = (log2(_2752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2787 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        uint _2790 = uint(isnan(14.0) ? _2787 : (isnan(_2787) ? 14.0 : min(_2787, 14.0)));
        uvec4 _2795 = texelFetch(g_lightClusterGridBuffer, int(((_2790 << 2u) + (_2776 << 6u)) >> 2u));
        uint _2796 = _2795.x;
        uint _2797 = _2764.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2797 >> 4u) & 15u)) + 4294967295u) & _2796) == 0u) || ((_2797 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3058)
                {
                    frontier_phi_61_pred = _3042;
                    frontier_phi_61_pred_1 = _3047;
                    frontier_phi_61_pred_2 = _3046;
                    frontier_phi_61_pred_3 = _3045;
                    frontier_phi_61_pred_4 = _3044;
                    frontier_phi_61_pred_5 = _3043;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3057;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3048 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _2750;
                        float _3233 = _3192.y - _2751;
                        float _3234 = _3192.z - _2752;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_992, _995, _998), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4603 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _2750;
                        float _3268 = (-0.0) - _2751;
                        float _3269 = (-0.0) - _2752;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3284 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _1067;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_992, _995, _998), vec3(_3274, _3275, _3276));
                        float _4619 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3309 = dot(vec3(_992, _995, _998), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4630 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3252 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3242) + _3318;
                        float _4641 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4652 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3316 * _3316) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3101 = (_3263 * _3211.x) + _3169;
                        _3102 = (_3263 * _3211.y) + _3170;
                        _3103 = (_3263 * _3211.z) + _3171;
                        _3098 = (_3344 * _3228.x) + _3166;
                        _3099 = (_3344 * _3228.y) + _3167;
                        _3100 = (_3344 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_61_pred = _3098;
                    frontier_phi_61_pred_1 = _3103;
                    frontier_phi_61_pred_2 = _3102;
                    frontier_phi_61_pred_3 = _3101;
                    frontier_phi_61_pred_4 = _3100;
                    frontier_phi_61_pred_5 = _3099;
                }
                _2898 = frontier_phi_61_pred;
                _2908 = frontier_phi_61_pred_1;
                _2906 = frontier_phi_61_pred_2;
                _2904 = frontier_phi_61_pred_3;
                _2902 = frontier_phi_61_pred_4;
                _2900 = frontier_phi_61_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2898;
                    _3043 = _2900;
                    _3044 = _2902;
                    _3045 = _2904;
                    _3046 = _2906;
                    _3047 = _2908;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2914) & _2796) == 0u)
        {
            _3010 = _2897;
            _3012 = _2899;
            _3014 = _2901;
            _3016 = _2903;
            _3018 = _2905;
            _3020 = _2907;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
            float _3036 = _3035 * _2750;
            float _3037 = _3035 * _2751;
            float _3038 = _3035 * _2752;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3149 = _2897;
                float _3150 = _2899;
                float _3151 = _2901;
                float _3152 = _2903;
                float _3153 = _2905;
                float _3154 = _2907;
                uint _3155 = _2914;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3165)
                    {
                        frontier_phi_67_pred = _3152;
                        frontier_phi_67_pred_1 = _3153;
                        frontier_phi_67_pred_2 = _3154;
                        frontier_phi_67_pred_3 = _3151;
                        frontier_phi_67_pred_4 = _3150;
                        frontier_phi_67_pred_5 = _3149;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        uint _3368 = _3164;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3379 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3379 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3379 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_2752, _3486.z, fma(_2751, _3486.y, _3486.x * _2750)) + _3486.w;
                            _3499 = !((fma(_2752, _3467.z, fma(_2751, _3467.y, _3467.x * _2750)) + _3467.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3394.x - _2750;
                                float _3527 = _3394.y - _2751;
                                float _3528 = _3394.z - _2752;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3395 * _3395));
                                float _4663 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3544 = sqrt(_3529) * _3410.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_992, _995, _998))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_2752, _3437.z, fma(_2751, _3437.y, _3437.x * _2750)) + _3437.w) / _3498;
                                float _3558 = (fma(_2752, _3452.z, fma(_2751, _3452.y, _3452.x * _2750)) + _3452.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4679 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _1067;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3036;
                                float _3588 = _3534 - _3037;
                                float _3589 = _3535 - _3038;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_992, _995, _998), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4690 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3601 = dot(vec3(_992, _995, _998), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4701 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_992, _995, _998), vec3(_3533, _3534, _3535))) + _3610;
                                float _4712 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4723 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3638 * _3422.x;
                                frontier_phi_73_pred_1 = _3638 * _3422.y;
                                frontier_phi_73_pred_2 = _3564 * _3410.z;
                                frontier_phi_73_pred_3 = _3564 * _3410.y;
                                frontier_phi_73_pred_4 = _3564 * _3410.x;
                                frontier_phi_73_pred_5 = _3638 * _3422.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3642 = frontier_phi_73_pred;
                            _3643 = frontier_phi_73_pred_1;
                            _3647 = frontier_phi_73_pred_2;
                            _3646 = frontier_phi_73_pred_3;
                            _3645 = frontier_phi_73_pred_4;
                            _3644 = frontier_phi_73_pred_5;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3352;
                        frontier_phi_67_pred_1 = _3353;
                        frontier_phi_67_pred_2 = _3354;
                        frontier_phi_67_pred_3 = _3351;
                        frontier_phi_67_pred_4 = _3350;
                        frontier_phi_67_pred_5 = _3349;
                    }
                    _3017 = frontier_phi_67_pred;
                    _3019 = frontier_phi_67_pred_1;
                    _3021 = frontier_phi_67_pred_2;
                    _3015 = frontier_phi_67_pred_3;
                    _3013 = frontier_phi_67_pred_4;
                    _3011 = frontier_phi_67_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _3011;
                        _3150 = _3013;
                        _3151 = _3015;
                        _3152 = _3017;
                        _3153 = _3019;
                        _3154 = _3021;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3019;
                frontier_phi_55_56_ladder_1 = _3021;
                frontier_phi_55_56_ladder_2 = _3017;
                frontier_phi_55_56_ladder_3 = _3015;
                frontier_phi_55_56_ladder_4 = _3013;
                frontier_phi_55_56_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_55_56_ladder = _2905;
                frontier_phi_55_56_ladder_1 = _2907;
                frontier_phi_55_56_ladder_2 = _2903;
                frontier_phi_55_56_ladder_3 = _2901;
                frontier_phi_55_56_ladder_4 = _2899;
                frontier_phi_55_56_ladder_5 = _2897;
            }
            _3010 = frontier_phi_55_56_ladder_5;
            _3012 = frontier_phi_55_56_ladder_4;
            _3014 = frontier_phi_55_56_ladder_3;
            _3016 = frontier_phi_55_56_ladder_2;
            _3018 = frontier_phi_55_56_ladder;
            _3020 = frontier_phi_55_56_ladder_1;
        }
        float _3025 = isnan(1.0) ? _1051 : (isnan(_1051) ? 1.0 : min(_1051, 1.0));
        _2809 = (_3025 * _3016) + _2242;
        _2811 = (_3025 * _3018) + _2244;
        _2813 = (_3025 * _3020) + _2246;
        _2815 = ((_3010 * _1035) * _3025) + _2590;
        _2817 = ((_3012 * _1037) * _3025) + _2592;
        _2819 = ((_3014 * _1038) * _3025) + _2594;
    }
    else
    {
        _2809 = _2242;
        _2811 = _2244;
        _2813 = _2246;
        _2815 = _2590;
        _2817 = _2592;
        _2819 = _2594;
    }
    float _4739 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _4750 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4761 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    uint _2839 = _285 + 6u;
    float _2847 = _973 / cbSceneParam._m0[86u].x;
    float _2848 = _974 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _908 : (isnan(_908) ? cbSceneParam._m0[77u].w : min(_908, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_908 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_908) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _908 : min(cbSceneParam._m0[80u].w, _908));
        float _2923 = _2922 / _908;
        float _2934 = _2923 * _958;
        float _2935 = _959 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2938 = _2923 * _960;
        float _2940 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2935;
        float _2948 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2936 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3073 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3111 = ((abs(_2948 / _2936) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2958 * _3082) - exp2(_2958 * _3083)) * _3071))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2867);
        _2960 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2962 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2964 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2966 = _3122 * _2867;
    }
    else
    {
        _2960 = _2864;
        _2962 = _2865;
        _2964 = _2866;
        _2966 = _2867;
    }
    float _2978 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2979 = _2978 == 3.0;
    float _2980 = log2(_2966);
    float _2987 = exp2(_2980 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2809 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1051))) + ((_2815 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1858)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2980 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2811 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1051))) + ((_2817 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1858)) * cbPerFrame._m0[3u].x));
    float _2989 = exp2(_2980 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2813 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1051))) + ((_2819 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1858)) * cbPerFrame._m0[3u].x));
    float _2998 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2998 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.y = _2998 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.z = _2998 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.w = cbInstanceData._m0[_2839].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2839].w;
}


