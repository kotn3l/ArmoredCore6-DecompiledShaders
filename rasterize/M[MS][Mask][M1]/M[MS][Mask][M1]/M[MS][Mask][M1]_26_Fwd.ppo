#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1331;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[23u].w) + _382) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3658 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _407 = (_400 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _408 = (_400 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _409 = (_400 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _444 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _446 = _444.x;
    float _447 = _444.y;
    float _448 = _444.z;
    float _457 = ((_427.z - _448) * _400) + _448;
    float _460 = ((((_427.x - _446) * _400) + _446) * 2.0) + (-1.0);
    float _462 = ((((_427.y - _447) * _400) + _447) * 2.0) + (-1.0);
    float _463 = dot(vec2(_460, _462), vec2(_460, _462));
    float _3669 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    vec4 _484 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _496 = (((_484.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _460;
    float _497 = (((_484.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _462;
    float _500 = fma(_468, _237, fma(_497, _244, _496 * _230));
    float _503 = fma(_468, _238, fma(_497, _245, _496 * _231));
    float _506 = fma(_468, _239, fma(_497, _246, _496 * _232));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _539 = _537.x;
    float _540 = 1.0 - _539;
    float _549 = (cbMtdParam._m0[19u].x + dot(vec4(_510 * _500, _510 * _503, _510 * _506, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_539 - _540) * cbMtdParam._m0[24u].z) + _540) * cbMtdParam._m0[21u].z);
    float _3680 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _552 = (-0.0) - cbMtdParam._m0[24u].x;
    float _554 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
    float _562 = _550 - ((_550 * TEXCOORD_8.x) * _555);
    float _563 = _550 - ((_550 * TEXCOORD_8.y) * _555);
    float _564 = _550 - ((_550 * TEXCOORD_8.z) * _555);
    float _571 = (_562 * (cbMtdParam._m0[17u].x - _407)) + _407;
    float _572 = (_563 * (cbMtdParam._m0[17u].y - _408)) + _408;
    float _573 = (_564 * (cbMtdParam._m0[17u].z - _409)) + _409;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _614 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_587 - _588) * cbMtdParam._m0[24u].w) + _588) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3701 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _623 = ((((cbMtdParam._m0[10u].x - _571) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _615) + _571;
    float _624 = ((((cbMtdParam._m0[10u].y - _572) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _615) + _572;
    float _625 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _573)) * _615) + _573;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _653 = _651.x;
    float _671 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _653) * _400) + _653;
    float _675 = ((_637.x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _677 = _675 - (_675 * _562);
    float _679 = _677 - (_677 * _615);
    float _683 = (cbMtdParam._m0[19u].w * (_484.z - _457)) + _457;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _704 = (_697.x * 2.0) + (-1.0);
    float _705 = (_697.y * 2.0) + (-1.0);
    float _706 = dot(vec2(_704, _705), vec2(_704, _705));
    float _3712 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _714 = ((_697.z - _683) * _562) + _683;
    float _717 = ((cbMtdParam._m0[23u].x - _714) * _615) + _714;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _742 = (_736.x * 2.0) + (-1.0);
    float _743 = (_736.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3723 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _759 = ((sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) - _468) * _564) + _468;
    float _762 = (((_704 - _496) * _562) + _496) + (cbMtdParam._m0[21u].x * _496);
    float _763 = (((_705 - _497) * _563) + _497) + (cbMtdParam._m0[21u].x * _497);
    float _774 = (((_742 - _762) + (_762 * cbMtdParam._m0[22u].z)) * _615) + _762;
    float _775 = (((_743 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _615) + _763;
    float _776 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) - _759)) + _759;
    float _778 = cbMtdParam._m0[22u].x + _484.w;
    float _781 = fma(_776, _237, fma(_775, _244, _774 * _230));
    float _784 = fma(_776, _238, fma(_775, _245, _774 * _231));
    float _787 = fma(_776, _239, fma(_775, _246, _774 * _232));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _3734 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _795 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3756 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3767 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3778 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3789 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _800 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _901 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _904 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _918 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_918].z;
    float _3800 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _930 = 1.0 - _800;
    float _931 = _927 * _930;
    float _932 = _928 * _930;
    float _933 = _929 * _930;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _800;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _800;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _800;
    float _941 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _957 = ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * TEXCOORD_5.w) * _953.x;
    float _958 = dot(vec3(_792, _793, _794), vec3(_871, _872, _873));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _792) - _871;
    float _966 = (_961 * _793) - _872;
    float _967 = (_961 * _794) - _873;
    float _971 = abs(dot(vec3(_871, _872, _873), vec3(_792, _793, _794)));
    float _3833 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_795);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _992 = (1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _993 = _986 * _973;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1330;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1055 = fma(_1029, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021));
        float _1059 = fma(_1029, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021));
        float _1063 = fma(_1029, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021));
        float _1088 = _1021 + _792;
        float _1089 = _1025 + _793;
        float _1090 = _1029 + _794;
        float _1100 = fma(_1090, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088)) - _1055;
        float _1101 = fma(_1090, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088)) - _1059;
        float _1102 = fma(_1090, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088)) - _1063;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1055 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1059 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[34u].z) + ((((((_1063 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1158 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1124.x + (-0.5));
        float _1160 = _1158 * (_1124.y + (-0.5));
        float _1161 = _1158 * (_1124.z + (-0.5));
        float _1168 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1131.x + (-0.5));
        float _1170 = _1168 * (_1131.y + (-0.5));
        float _1171 = _1168 * (_1131.z + (-0.5));
        float _1178 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1138.x + (-0.5));
        float _1180 = _1178 * (_1138.y + (-0.5));
        float _1181 = _1178 * (_1138.z + (-0.5));
        float _1188 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1145.x + (-0.5));
        float _1190 = _1188 * (_1145.y + (-0.5));
        float _1191 = _1188 * (_1145.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1212 = (dot(vec3(_792, _793, _794), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1222 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3881 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1224 + 1.0))) + _1229) * _1192;
        float _1239 = _1160 * 0.5;
        float _1240 = _1170 * 0.5;
        float _1241 = _1180 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_792, _793, _794), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3914 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1266 + 1.0))) + _1271) * _1193;
        float _1281 = _1161 * 0.5;
        float _1282 = _1171 * 0.5;
        float _1283 = _1181 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_792, _793, _794), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3947 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1308 + 1.0))) + _1313) * _1194;
        _1330 = _1161;
        _1332 = _1160;
        _1333 = _1159;
        _1334 = _1171;
        _1335 = _1170;
        _1336 = _1169;
        _1337 = _1181;
        _1338 = _1180;
        _1339 = _1179;
        _1340 = _1194;
        _1341 = _1193;
        _1342 = _1192;
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1331;
        _1332 = _1331;
        _1333 = _1331;
        _1334 = _1331;
        _1335 = _1331;
        _1336 = _1331;
        _1337 = _1331;
        _1338 = _1331;
        _1339 = _1331;
        _1340 = _1331;
        _1341 = _1331;
        _1342 = _1331;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1029, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021));
        float _1374 = fma(_1029, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021));
        float _1378 = fma(_1029, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021));
        float _1401 = _1021 + _792;
        float _1402 = _1025 + _793;
        float _1403 = _1029 + _794;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_792, _793, _794), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4010 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_792, _793, _794), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4043 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_792, _793, _794), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4076 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1331;
        _1640 = _1331;
        _1641 = _1331;
        _1642 = _1331;
        _1643 = _1331;
        _1644 = _1331;
        _1645 = _1331;
        _1646 = _1331;
        _1647 = _1331;
        _1648 = _1331;
        _1649 = _1331;
        _1650 = _1331;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1343)) + _1343;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1344)) + _1344;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _965 * 0.5;
    float _1708 = _966 * 0.5;
    float _1709 = _967 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1330, _1334, _1337, _1340));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1824 = fma(_1029, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021)) + cbModelParam._m0[13u].w;
        float _1828 = fma(_1029, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021)) + cbModelParam._m0[14u].w;
        float _1832 = fma(_1029, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021)) + cbModelParam._m0[15u].w;
        float _1835 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1838 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1841 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1869;
        if (_1835 > 0.0)
        {
            _1869 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1869 = frontier_phi_14_12_ladder;
        }
        float _2072;
        if (_1838 > 0.0)
        {
            _2072 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2072 = frontier_phi_23_19_ladder;
        }
        float _2326;
        if (_1841 > 0.0)
        {
            _2326 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2326 = frontier_phi_35_30_ladder;
        }
        float _2328 = isnan(_2072) ? _1869 : (isnan(_1869) ? _2072 : min(_1869, _2072));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1835) + _1824;
        float _2334 = (_2329 * _1838) + _1828;
        float _2335 = (_2329 * _1841) + _1832;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_13_35_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1857 = frontier_phi_13_35_ladder_2;
        _1859 = frontier_phi_13_35_ladder_1;
        _1861 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1776);
        _1857 = _1845.x * cbModelParam._m0[1u].y;
        _1859 = _1845.y * cbModelParam._m0[1u].y;
        _1861 = _1845.z * cbModelParam._m0[1u].y;
    }
    float _1865 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1865 : min(cbModelParam._m0[25u].w, _1865));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_1029, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_1029, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_1029, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1934 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1937 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2077;
        if (_1931 > 0.0)
        {
            _2077 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2077 = frontier_phi_25_21_ladder;
        }
        float _2353;
        if (_1934 > 0.0)
        {
            _2353 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2353 = frontier_phi_37_32_ladder;
        }
        float _2566;
        if (_1937 > 0.0)
        {
            _2566 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2566 = frontier_phi_46_43_ladder;
        }
        float _2568 = isnan(_2353) ? _2077 : (isnan(_2077) ? _2353 : min(_2077, _2353));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1931) + _1920;
        float _2574 = (_2569 * _1934) + _1924;
        float _2575 = (_2569 * _1937) + _1928;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1866);
            frontier_phi_22_46_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_22_46_ladder_2;
        _1958 = frontier_phi_22_46_ladder_1;
        _1960 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1866);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1973 = (((_992 * _941) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1956 - _1857)) + _1857);
    float _1975 = (((_992 * _943) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1977 = (((_992 * _944) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    uvec4 _1996 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1998 = _1996.x * 14u;
    uint _1999 = _1998 + 13u;
    float _2006 = _957 + (-1.0);
    float _2011 = (cbLight._m0[_1999].x * _2006) + 1.0;
    float _2012 = (cbLight._m0[_1999].y * _2006) + 1.0;
    float _2013 = (cbLight._m0[_1999].z * _2006) + 1.0;
    float _2014 = (cbLight._m0[_1999].w * _2006) + 1.0;
    uint _2015 = _1998 + 5u;
    float _2021 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2025 = _1998 + 4u;
    float _2031 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2035 = _1998 | 1u;
    float _2046 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_792, _793, _794));
    float _2049 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_792, _793, _794));
    float _4212 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _4223 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2054 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.3183098733425140380859375;
    float _2056 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2063 = ((cbLight._m0[_2015].x * _2021) * _2056) + ((cbLight._m0[_2025].x * _2031) * _2054);
    float _2064 = ((_2021 * cbLight._m0[_2015].y) * _2056) + ((_2031 * cbLight._m0[_2025].y) * _2054);
    float _2065 = ((_2021 * cbLight._m0[_2015].z) * _2056) + ((_2031 * cbLight._m0[_2025].z) * _2054);
    uvec4 _2069 = floatBitsToUint(cbLight._m0[_1998 + 12u]);
    bool _2071 = _2069.x == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2071)
    {
        _2082 = _2063;
        _2084 = _2064;
        _2086 = _2065;
    }
    else
    {
        uint _2090 = _1998 + 6u;
        float _2106 = (dot(vec3(cbLight._m0[_1998 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4234 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2109 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2082 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _2063;
        _2084 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _2064;
        _2086 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _2065;
    }
    bool _2089 = _2069.y == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2089)
    {
        _2127 = _2082;
        _2129 = _2084;
        _2131 = _2086;
    }
    else
    {
        uint _2297 = _1998 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_1998 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4250 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2316 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2127 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2082;
        _2129 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2084;
        _2131 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2086;
    }
    uint _2134 = _1998 + 8u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _795) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1998].x + _871;
    float _2150 = cbLight._m0[_1998].y + _872;
    float _2151 = cbLight._m0[_1998].z + _873;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_1998].xyz));
    float _4266 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2163 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2164 = dot(vec3(_792, _793, _794), vec3(_2156, _2157, _2158));
    float _4288 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2168 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2156, _2157, _2158));
    float _4299 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2172 = _2148 * _2148;
    float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
    float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2185 = 0.959999978542327880859375 - _938;
    float _2187 = 0.959999978542327880859375 - _939;
    float _2188 = 0.959999978542327880859375 - _940;
    float _2195 = 1.0 - _2148;
    float _2206 = (0.5 / (((_2163 * ((_2162 * _2195) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2195) + _2148) * _2162))) * _2162;
    float _4310 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2208 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
    uint _2219 = _1998 + 9u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _795) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_2035].x + _871;
    float _2233 = cbLight._m0[_2035].y + _872;
    float _2234 = cbLight._m0[_2035].z + _873;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2035].xyz));
    float _4321 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2246 = dot(vec3(_792, _793, _794), vec3(_2239, _2240, _2241));
    float _4332 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2239, _2240, _2241));
    float _4343 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2231 * _2231;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
    float _2272 = 1.0 - _2231;
    float _2282 = (0.5 / (((_2163 * ((_2245 * _2272) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2272) + _2231) * _2245))) * _2245;
    float _4354 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    float _2294 = (((((_2265 * _2185) + _941) * cbLight._m0[_2219].x) * _2284) * _2021) + (((((_2184 * _2185) + _941) * cbLight._m0[_2134].x) * _2208) * _2031);
    float _2295 = (((((_2265 * _2187) + _943) * cbLight._m0[_2219].y) * _2284) * _2021) + (((((_2184 * _2187) + _943) * cbLight._m0[_2134].y) * _2208) * _2031);
    float _2296 = (((((_2265 * _2188) + _944) * cbLight._m0[_2219].z) * _2284) * _2021) + (((((_2184 * _2188) + _944) * cbLight._m0[_2134].z) * _2208) * _2031);
    float _2358;
    float _2360;
    float _2362;
    if (_2071)
    {
        _2358 = _2294;
        _2360 = _2295;
        _2362 = _2296;
    }
    else
    {
        uint _2364 = _1998 + 2u;
        uint _2368 = _1998 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _795) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _871;
        float _2385 = cbLight._m0[_2364].y + _872;
        float _2386 = cbLight._m0[_2364].z + _873;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2364].xyz));
        float _4365 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2398 = dot(vec3(_792, _793, _794), vec3(_2391, _2392, _2393));
        float _4376 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4387 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2163 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2424) + _2383) * _2397))) * _2397;
        float _4398 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2358 = (((((_2417 * _2185) + _941) * cbLight._m0[_2368].x) * _2436) * _2437) + _2294;
        _2360 = (((((_2417 * _2187) + _943) * cbLight._m0[_2368].y) * _2436) * _2437) + _2295;
        _2362 = (((((_2417 * _2188) + _944) * cbLight._m0[_2368].z) * _2436) * _2437) + _2296;
    }
    float _2472;
    float _2474;
    float _2476;
    if (_2089)
    {
        _2472 = _2358;
        _2474 = _2360;
        _2476 = _2362;
    }
    else
    {
        uint _2483 = _1998 + 3u;
        uint _2487 = _1998 + 11u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _795) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _871;
        float _2504 = cbLight._m0[_2483].y + _872;
        float _2505 = cbLight._m0[_2483].z + _873;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2483].xyz));
        float _4414 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2517 = dot(vec3(_792, _793, _794), vec3(_2510, _2511, _2512));
        float _4425 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4436 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2163 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2543) + _2502) * _2516))) * _2516;
        float _4447 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2472 = (((((_2536 * _2185) + _941) * cbLight._m0[_2487].x) * _2555) * _2556) + _2358;
        _2474 = (((((_2536 * _2187) + _943) * cbLight._m0[_2487].y) * _2555) * _2556) + _2360;
        _2476 = (((((_2536 * _2188) + _944) * cbLight._m0[_2487].z) * _2555) * _2556) + _2362;
    }
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_1996.y == 0u)
    {
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2631;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2631;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2631;
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.x;
        uint _2658 = uint((float(_2646.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2647))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2647)));
        float _2668 = (log2(_2634 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        uint _2672 = uint(isnan(14.0) ? _2669 : (isnan(_2669) ? 14.0 : min(_2669, 14.0)));
        uvec4 _2677 = texelFetch(g_lightClusterGridBuffer, int(((_2672 << 2u) + (_2658 << 6u)) >> 2u));
        uint _2678 = _2677.x;
        uint _2679 = _2646.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2679 >> 4u) & 15u)) + 4294967295u) & _2678) == 0u) || ((_2679 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            uint _2929 = 0u;
            uint _2938;
            bool _2939;
            for (;;)
            {
                _2938 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                _2939 = _2938 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2939)
                {
                    frontier_phi_61_pred = _2923;
                    frontier_phi_61_pred_1 = _2928;
                    frontier_phi_61_pred_2 = _2927;
                    frontier_phi_61_pred_3 = _2926;
                    frontier_phi_61_pred_4 = _2925;
                    frontier_phi_61_pred_5 = _2924;
                }
                else
                {
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    uint _3053;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2938;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3057 = uint(findLSB(_3053)) + (_2929 << 5u);
                        uint _3054 = (_3053 + 4294967295u) & _3053;
                        uint _3059 = _3057 * 48u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3079 = (_3057 * 48u) + 4u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3098 = (_3057 * 48u) + 8u;
                        vec3 _3109 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x));
                        float _3113 = _3073.x - _2632;
                        float _3114 = _3073.y - _2633;
                        float _3115 = _3073.z - _2634;
                        float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                        float _3119 = inversesqrt(_3116);
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3123 = dot(vec3(_898, _901, _904), vec3(_3120, _3121, _3122));
                        float _3128 = 1.0 - (_3116 * _3073.w);
                        float _4473 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3130 = sqrt(_3116) * _3092.w;
                        float _3133 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3123) + _3134;
                        float _3140 = _3130 * _3130;
                        float _3144 = ((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3129) / ((_3140 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _2632;
                        float _3149 = (-0.0) - _2633;
                        float _3150 = (-0.0) - _2634;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3165 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                        float _3166 = 1.0 - _973;
                        float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                        float _3174 = _3173 * _3173;
                        float _3175 = _3174 * _3174;
                        float _3176 = _3155 + _3120;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3186 = dot(vec3(_898, _901, _904), vec3(_3155, _3156, _3157));
                        float _4489 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3190 = dot(vec3(_898, _901, _904), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                        float _4500 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                        float _3198 = _3133 * _3174;
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3123) + _3199;
                        float _4511 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3204 = 1.0 - _3174;
                        float _3214 = (0.5 / (((_3203 * ((_3189 * _3204) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3174) * _3189))) * _3203;
                        float _4522 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3225 = (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3197 * _3197) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125))) * _3129;
                        _2982 = (_3144 * _3092.x) + _3050;
                        _2983 = (_3144 * _3092.y) + _3051;
                        _2984 = (_3144 * _3092.z) + _3052;
                        _2979 = (_3225 * _3109.x) + _3047;
                        _2980 = (_3225 * _3109.y) + _3048;
                        _2981 = (_3225 * _3109.z) + _3049;
                        if (_3054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _3054;
                        }
                    }
                    frontier_phi_61_pred = _2979;
                    frontier_phi_61_pred_1 = _2984;
                    frontier_phi_61_pred_2 = _2983;
                    frontier_phi_61_pred_3 = _2982;
                    frontier_phi_61_pred_4 = _2981;
                    frontier_phi_61_pred_5 = _2980;
                }
                _2780 = frontier_phi_61_pred;
                _2790 = frontier_phi_61_pred_1;
                _2788 = frontier_phi_61_pred_2;
                _2786 = frontier_phi_61_pred_3;
                _2784 = frontier_phi_61_pred_4;
                _2782 = frontier_phi_61_pred_5;
                uint _2930 = _2929 + 1u;
                if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2923 = _2780;
                    _2924 = _2782;
                    _2925 = _2784;
                    _2926 = _2786;
                    _2927 = _2788;
                    _2928 = _2790;
                    _2929 = _2930;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((4294967295u << _2796) & _2678) == 0u)
        {
            _2891 = _2779;
            _2893 = _2781;
            _2895 = _2783;
            _2897 = _2785;
            _2899 = _2787;
            _2901 = _2789;
        }
        else
        {
            float _2916 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
            float _2917 = _2916 * _2632;
            float _2918 = _2916 * _2633;
            float _2919 = _2916 * _2634;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _3030 = _2779;
                float _3031 = _2781;
                float _3032 = _2783;
                float _3033 = _2785;
                float _3034 = _2787;
                float _3035 = _2789;
                uint _3036 = _2796;
                uint _3045;
                bool _3046;
                for (;;)
                {
                    _3045 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                    _3046 = _3045 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3046)
                    {
                        frontier_phi_67_pred = _3033;
                        frontier_phi_67_pred_1 = _3034;
                        frontier_phi_67_pred_2 = _3035;
                        frontier_phi_67_pred_3 = _3032;
                        frontier_phi_67_pred_4 = _3031;
                        frontier_phi_67_pred_5 = _3030;
                    }
                    else
                    {
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        uint _3249 = _3045;
                        uint _3250;
                        vec4 _3275;
                        float _3276;
                        vec4 _3291;
                        vec3 _3303;
                        vec4 _3318;
                        vec4 _3334;
                        float _3380;
                        bool _3381;
                        for (;;)
                        {
                            uint _3260 = ((_3036 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3249));
                            _3250 = (_3249 + 4294967295u) & _3249;
                            uint _3262 = _3260 * 40u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3276 = _3275.w;
                            uint _3278 = (_3260 * 40u) + 4u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3260 * 40u) + 8u;
                            _3303 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x));
                            uint _3305 = (_3260 * 40u) + 16u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3321 = (_3260 * 40u) + 20u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3260 * 40u) + 24u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3355 = (_3260 * 40u) + 28u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3380 = fma(_2634, _3368.z, fma(_2633, _3368.y, _3368.x * _2632)) + _3368.w;
                            _3381 = !((fma(_2634, _3349.z, fma(_2633, _3349.y, _3349.x * _2632)) + _3349.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3381)
                            {
                                float _3408 = _3275.x - _2632;
                                float _3409 = _3275.y - _2633;
                                float _3410 = _3275.z - _2634;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3276 * _3276));
                                float _4533 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3426 = sqrt(_3411) * _3291.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3432 = ((1.0 - _3429) * dot(vec3(_3415, _3416, _3417), vec3(_898, _901, _904))) + _3429;
                                float _3435 = _3426 * _3426;
                                float _3439 = (fma(_2634, _3318.z, fma(_2633, _3318.y, _3318.x * _2632)) + _3318.w) / _3380;
                                float _3440 = (fma(_2634, _3334.z, fma(_2633, _3334.y, _3334.x * _2632)) + _3334.w) / _3380;
                                float _3444 = 1.0 - dot(vec2(_3439, _3440), vec2(_3439, _3440));
                                float _4549 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3446 = _3445 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3422) / ((_3435 * 0.699999988079071044921875) + 1.0));
                                float _3458 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                                float _3459 = 1.0 - _973;
                                float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                                float _3467 = _3466 * _3466;
                                float _3468 = _3467 * _3467;
                                float _3469 = _3415 - _2917;
                                float _3470 = _3416 - _2918;
                                float _3471 = _3417 - _2919;
                                float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                                float _3479 = dot(vec3(_898, _901, _904), vec3((-0.0) - _2917, (-0.0) - _2918, (-0.0) - _2919));
                                float _4560 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3483 = dot(vec3(_898, _901, _904), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                                float _4571 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                                float _3491 = _3428 * _3467;
                                float _3492 = _3491 * _3491;
                                float _3498 = ((1.0 - _3492) * dot(vec3(_898, _901, _904), vec3(_3415, _3416, _3417))) + _3492;
                                float _4582 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3500 = 1.0 - _3467;
                                float _3510 = (0.5 / (((_3499 * ((_3482 * _3500) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3467) * _3482))) * _3499;
                                float _4593 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3520 = (_3445 * _3422) * (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3490 * _3490) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3520 * _3303.x;
                                frontier_phi_73_pred_1 = _3520 * _3303.y;
                                frontier_phi_73_pred_2 = _3446 * _3291.z;
                                frontier_phi_73_pred_3 = _3446 * _3291.y;
                                frontier_phi_73_pred_4 = _3446 * _3291.x;
                                frontier_phi_73_pred_5 = _3520 * _3303.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3524 = frontier_phi_73_pred;
                            _3525 = frontier_phi_73_pred_1;
                            _3529 = frontier_phi_73_pred_2;
                            _3528 = frontier_phi_73_pred_3;
                            _3527 = frontier_phi_73_pred_4;
                            _3526 = frontier_phi_73_pred_5;
                            _3233 = _3527 + _3246;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3230 = _3524 + _3243;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            if (_3250 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3250;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3233;
                        frontier_phi_67_pred_1 = _3234;
                        frontier_phi_67_pred_2 = _3235;
                        frontier_phi_67_pred_3 = _3232;
                        frontier_phi_67_pred_4 = _3231;
                        frontier_phi_67_pred_5 = _3230;
                    }
                    _2898 = frontier_phi_67_pred;
                    _2900 = frontier_phi_67_pred_1;
                    _2902 = frontier_phi_67_pred_2;
                    _2896 = frontier_phi_67_pred_3;
                    _2894 = frontier_phi_67_pred_4;
                    _2892 = frontier_phi_67_pred_5;
                    uint _3037 = _3036 + 1u;
                    if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3030 = _2892;
                        _3031 = _2894;
                        _3032 = _2896;
                        _3033 = _2898;
                        _3034 = _2900;
                        _3035 = _2902;
                        _3036 = _3037;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2900;
                frontier_phi_55_56_ladder_1 = _2902;
                frontier_phi_55_56_ladder_2 = _2898;
                frontier_phi_55_56_ladder_3 = _2896;
                frontier_phi_55_56_ladder_4 = _2894;
                frontier_phi_55_56_ladder_5 = _2892;
            }
            else
            {
                frontier_phi_55_56_ladder = _2787;
                frontier_phi_55_56_ladder_1 = _2789;
                frontier_phi_55_56_ladder_2 = _2785;
                frontier_phi_55_56_ladder_3 = _2783;
                frontier_phi_55_56_ladder_4 = _2781;
                frontier_phi_55_56_ladder_5 = _2779;
            }
            _2891 = frontier_phi_55_56_ladder_5;
            _2893 = frontier_phi_55_56_ladder_4;
            _2895 = frontier_phi_55_56_ladder_3;
            _2897 = frontier_phi_55_56_ladder_2;
            _2899 = frontier_phi_55_56_ladder;
            _2901 = frontier_phi_55_56_ladder_1;
        }
        float _2906 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2691 = (_2906 * _2897) + _2127;
        _2693 = (_2906 * _2899) + _2129;
        _2695 = (_2906 * _2901) + _2131;
        _2697 = ((_2891 * _941) * _2906) + _2472;
        _2699 = ((_2893 * _943) * _2906) + _2474;
        _2701 = ((_2895 * _944) * _2906) + _2476;
    }
    else
    {
        _2691 = _2127;
        _2693 = _2129;
        _2695 = _2131;
        _2697 = _2472;
        _2699 = _2474;
        _2701 = _2476;
    }
    float _4609 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4620 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4631 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    uint _2721 = _249 + 6u;
    float _2729 = _879 / cbSceneParam._m0[86u].x;
    float _2730 = _880 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2805 = _2804 / _814;
        float _2816 = _2805 * _864;
        float _2817 = _865 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2819 = _2805 * _866;
        float _2821 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2822 = _2821 + cbSceneParam._m0[79u].w;
        float _2823 = cbSceneParam._m0[79u].w - _2817;
        float _2829 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2819 * _2819));
        float _2832 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2829;
        float _2837 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2839 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2818 - _2821) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2822 > 0.0) ? exp2(_2837 * _2822) : (2.0 - exp2(_2839 * _2822))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2832;
        }
        else
        {
            float _2952 = 1.0 / cbSceneParam._m0[80u].x;
            float _2953 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : max(_2822, _2823));
            float _2954 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : min(_2822, _2823));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            _2992 = ((abs(_2829 / _2818) * cbSceneParam._m0[80u].y) * ((((_2963 - _2964) * 2.0) - ((exp2(_2837 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)))) - exp2(_2837 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))))) * _2952)) - ((exp2(_2839 * _2963) - exp2(_2839 * _2964)) * _2952))) + (_2832 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2749);
        _2841 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2843 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2845 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2847 = _3003 * _2749;
    }
    else
    {
        _2841 = _2746;
        _2843 = _2747;
        _2845 = _2748;
        _2847 = _2749;
    }
    float _2859 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2860 = _2859 == 3.0;
    float _2861 = log2(_2847);
    float _2868 = exp2(_2861 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2691 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _957))) + ((_2697 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2869 = exp2(_2861 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2693 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _957))) + ((_2699 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2870 = exp2(_2861 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2695 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _957))) + ((_2701 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2879 = (_2859 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2879 * (_2860 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.y = _2879 * (_2860 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.z = _2879 * (_2860 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.w = cbInstanceData._m0[_2721].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2721].w;
}


