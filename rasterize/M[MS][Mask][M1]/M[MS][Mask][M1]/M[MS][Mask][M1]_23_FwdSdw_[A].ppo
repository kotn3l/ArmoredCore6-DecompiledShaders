#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1347;
float _4011;
float _4012;
float _4013;
float _4014;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4023 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4034 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4045 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4056 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _444 = (_437 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _445 = (_437 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _446 = (_437 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _450 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _444;
    float _453 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _445;
    float _456 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _446;
    float _463 = ((_444 - _450) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) + _450;
    float _464 = ((_445 - _453) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) + _453;
    float _465 = ((_446 - _456) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) + _456;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _540 = ((_510.z - _531) * _437) + _531;
    float _543 = ((((_510.x - _529) * _437) + _529) * 2.0) + (-1.0);
    float _544 = ((((_510.y - _530) * _437) + _530) * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _4067 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _582 = (_543 + ((((_483.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_570.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _583 = (_544 + ((((_483.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_570.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _586 = fma(_550, _241, fma(_583, _248, _582 * _234));
    float _589 = fma(_550, _242, fma(_583, _249, _582 * _235));
    float _592 = fma(_550, _243, fma(_583, _250, _582 * _236));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _635 = (cbMtdParam._m0[19u].x + dot(vec4(_596 * _586, _596 * _589, _596 * _592, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_625 - _626) * cbMtdParam._m0[24u].z) + _626) * cbMtdParam._m0[21u].z);
    float _4078 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _643 = (_636 * (cbMtdParam._m0[17u].x - _463)) + _463;
    float _644 = (_636 * (cbMtdParam._m0[17u].y - _464)) + _464;
    float _645 = (_636 * (cbMtdParam._m0[17u].z - _465)) + _465;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _673 = _671.x;
    float _691 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _673) * _437) + _673;
    float _695 = ((_657.x - _691) * cbMtdParam._m0[19u].z) + _691;
    float _697 = _695 - (_695 * _636);
    float _702 = (((_483.z - _540) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _540;
    float _706 = ((_570.z - _702) * cbMtdParam._m0[19u].w) + _702;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _726 = (_719.x * 2.0) + (-1.0);
    float _727 = (_719.y * 2.0) + (-1.0);
    float _728 = dot(vec2(_726, _727), vec2(_726, _727));
    float _4089 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _736 = ((_719.z - _706) * _636) + _706;
    float _746 = ((sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) - _550) * _636) + _550;
    float _749 = (((_726 - _582) * _636) + _582) + (cbMtdParam._m0[21u].x * _582);
    float _750 = (((_727 - _583) * _636) + _583) + (cbMtdParam._m0[21u].x * _583);
    float _752 = cbMtdParam._m0[22u].x + _570.w;
    float _755 = fma(_746, _241, fma(_750, _248, _749 * _234));
    float _758 = fma(_746, _242, fma(_750, _249, _749 * _235));
    float _761 = fma(_746, _243, fma(_750, _250, _749 * _236));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    float _766 = _765 * _755;
    float _767 = _765 * _758;
    float _768 = _765 * _761;
    float _4100 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _769 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4122 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4133 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4144 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4155 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _774 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _788 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    vec4 _853 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _855 = _853.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1027 = sqrt(((_839 * _839) + (_840 * _840)) + (_841 * _841));
        float _1033 = (cbMatDynParam._m0[5u].x * _1027) + cbMatDynParam._m0[5u].y;
        float _4166 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1038 = (cbMatDynParam._m0[5u].z * _1027) + cbMatDynParam._m0[5u].w;
        float _4177 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) - _1034)) + _1034) < ((_855 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_768, cbSceneParam._m0[5u].z, fma(_767, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _766));
    float _888 = fma(_768, cbSceneParam._m0[6u].z, fma(_767, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _766));
    float _891 = fma(_768, cbSceneParam._m0[7u].z, fma(_767, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _766));
    uint _904 = _274 + 9u;
    uint _905 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_905].z;
    float _4188 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _917 = 1.0 - _774;
    float _918 = _914 * _917;
    float _919 = _915 * _917;
    float _920 = _916 * _917;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _774;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _774;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _774;
    float _928 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    vec4 _940 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _944 = ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * TEXCOORD_5.w) * _940.x;
    float _945 = dot(vec3(_766, _767, _768), vec3(_846, _847, _848));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _766) - _846;
    float _953 = (_948 * _767) - _847;
    float _954 = (_948 * _768) - _848;
    float _958 = abs(dot(vec3(_846, _847, _848), vec3(_766, _767, _768)));
    float _4221 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_769);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _979 = (1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _980 = _973 * _960;
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1075 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1079 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1104 = _1008 + _766;
        float _1105 = _1012 + _767;
        float _1106 = _1016 + _768;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_766, _767, _768), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4269 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_766, _767, _768), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4302 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_766, _767, _768), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4335 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1393 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1397 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1420 = _1008 + _766;
        float _1421 = _1012 + _767;
        float _1422 = _1016 + _768;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_766, _767, _768), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4398 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_766, _767, _768), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4431 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_766, _767, _768), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4464 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = _1347;
        _1669 = _1347;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1360)) + _1360;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _952 * 0.5;
    float _1727 = _953 * 0.5;
    float _1728 = _954 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _769);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1843 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1847 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1851 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1854 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1857 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1860 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1888;
        if (_1854 > 0.0)
        {
            _1888 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1888 = frontier_phi_17_15_ladder;
        }
        float _2060;
        if (_1857 > 0.0)
        {
            _2060 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2060 = frontier_phi_26_22_ladder;
        }
        float _2355;
        if (_1860 > 0.0)
        {
            _2355 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2355 = frontier_phi_38_33_ladder;
        }
        float _2357 = isnan(_2060) ? _1888 : (isnan(_1888) ? _2060 : min(_1888, _2060));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1854) + _1843;
        float _2363 = (_2358 * _1857) + _1847;
        float _2364 = (_2358 * _1860) + _1851;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_16_38_ladder = _2509.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2509.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2509.x * cbModelParam._m0[1u].y;
        }
        _1876 = frontier_phi_16_38_ladder_2;
        _1878 = frontier_phi_16_38_ladder_1;
        _1880 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1795);
        _1876 = _1864.x * cbModelParam._m0[1u].y;
        _1878 = _1864.y * cbModelParam._m0[1u].y;
        _1880 = _1864.z * cbModelParam._m0[1u].y;
    }
    float _1884 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _769);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1884 : min(cbModelParam._m0[25u].w, _1884));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1939 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1943 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1947 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1950 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1953 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1956 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2065;
        if (_1950 > 0.0)
        {
            _2065 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2065 = frontier_phi_28_24_ladder;
        }
        float _2382;
        if (_1953 > 0.0)
        {
            _2382 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2382 = frontier_phi_40_35_ladder;
        }
        float _2720;
        if (_1956 > 0.0)
        {
            _2720 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2720 = frontier_phi_50_47_ladder;
        }
        float _2722 = isnan(_2382) ? _2065 : (isnan(_2065) ? _2382 : min(_2065, _2382));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _1950) + _1939;
        float _2728 = (_2723 * _1953) + _1943;
        float _2729 = (_2723 * _1956) + _1947;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _1885);
            frontier_phi_25_50_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1975 = frontier_phi_25_50_ladder_2;
        _1977 = frontier_phi_25_50_ladder_1;
        _1979 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1885);
        _1975 = _1959.x * cbModelParam._m0[1u].z;
        _1977 = _1959.y * cbModelParam._m0[1u].z;
        _1979 = _1959.z * cbModelParam._m0[1u].z;
    }
    float _1992 = (((_979 * _928) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1994 = (((_979 * _930) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1996 = (((_979 * _931) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1979 - _1880)) + _1880);
    float _1999 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1992 * cbSceneParam._m0[89u].x));
    float _2002 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1992 * cbSceneParam._m0[90u].x));
    float _2005 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, _1992 * cbSceneParam._m0[91u].x));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2052 = _2039 / _2051;
    float _2053 = _2043 / _2051;
    float _2054 = _2047 / _2051;
    float _2201;
    float _2202;
    float _2203;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2081 = ((uint(_2054 > cbSceneParam._m0[59u].y) + uint(_2054 > cbSceneParam._m0[59u].x)) + uint(_2054 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2082 = _2081 + 43u;
        uint _2090 = _2081 + 44u;
        uint _2098 = _2081 + 45u;
        uint _2106 = _2081 + 46u;
        float _2117 = fma(_2051, cbSceneParam._m0[_2082].w, fma(_2047, cbSceneParam._m0[_2082].z, fma(_2043, cbSceneParam._m0[_2082].y, _2039 * cbSceneParam._m0[_2082].x)));
        float _2121 = fma(_2051, cbSceneParam._m0[_2090].w, fma(_2047, cbSceneParam._m0[_2090].z, fma(_2043, cbSceneParam._m0[_2090].y, _2039 * cbSceneParam._m0[_2090].x)));
        float _2129 = fma(_2051, cbSceneParam._m0[_2106].w, fma(_2047, cbSceneParam._m0[_2106].z, fma(_2043, cbSceneParam._m0[_2106].y, _2039 * cbSceneParam._m0[_2106].x)));
        float _2134 = cbSceneParam._m0[33u].z * _2129;
        float _2136 = cbSceneParam._m0[33u].w * _2129;
        float _2139 = fma(_2051, cbSceneParam._m0[_2098].w, fma(_2047, cbSceneParam._m0[_2098].z, fma(_2043, cbSceneParam._m0[_2098].y, _2039 * cbSceneParam._m0[_2098].x))) / _2129;
        float _2187 = (cbSceneParam._m0[33u].x - sqrt(((_2053 * _2053) + (_2052 * _2052)) + (_2054 * _2054))) * cbSceneParam._m0[33u].y;
        float _4590 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2194 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 + _2117) / _2129, (_2136 + _2121) / _2129), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 + _2117) / _2129, (_2121 - _2134) / _2129), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 - _2134) / _2129, (_2121 - _2136) / _2129), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 - _2136) / _2129, (_2134 + _2121) / _2129), _2139), 0.0)).x), vec4(0.25)));
        _2201 = 1.0 - (_2194 * cbSceneParam._m0[34u].x);
        _2202 = 1.0 - (_2194 * cbSceneParam._m0[34u].y);
        _2203 = 1.0 - (_2194 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2201 = 1.0;
        _2202 = 1.0;
        _2203 = 1.0;
    }
    float _2267;
    float _2269;
    float _2271;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2255 = fma(_2051, cbSceneParam._m0[63u].w, fma(_2047, cbSceneParam._m0[63u].z, fma(_2043, cbSceneParam._m0[63u].y, _2039 * cbSceneParam._m0[63u].x)));
        float _2256 = fma(_2051, cbSceneParam._m0[60u].w, fma(_2047, cbSceneParam._m0[60u].z, fma(_2043, cbSceneParam._m0[60u].y, _2039 * cbSceneParam._m0[60u].x))) / _2255;
        float _2257 = fma(_2051, cbSceneParam._m0[61u].w, fma(_2047, cbSceneParam._m0[61u].z, fma(_2043, cbSceneParam._m0[61u].y, _2039 * cbSceneParam._m0[61u].x))) / _2255;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2256 >= cbSceneParam._m0[64u].x) && (_2257 >= cbSceneParam._m0[64u].y)) && (_2256 <= cbSceneParam._m0[64u].z)) && (_2257 <= cbSceneParam._m0[64u].w))
        {
            float _2395 = fma(_2051, cbSceneParam._m0[62u].w, fma(_2047, cbSceneParam._m0[62u].z, fma(_2043, cbSceneParam._m0[62u].y, _2039 * cbSceneParam._m0[62u].x))) / _2255;
            float _2399 = isnan(cbSceneParam._m0[41u].w) ? _2395 : (isnan(_2395) ? cbSceneParam._m0[41u].w : max(_2395, cbSceneParam._m0[41u].w));
            float _2442 = (cbSceneParam._m0[33u].x - sqrt(((_2053 * _2053) + (_2052 * _2052)) + (_2054 * _2054))) * cbSceneParam._m0[33u].y;
            float _4606 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
            float _2449 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2256, cbSceneParam._m0[33u].w + _2257), _2399), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2256, _2257 - cbSceneParam._m0[33u].z), _2399), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2256 - cbSceneParam._m0[33u].z, _2257 - cbSceneParam._m0[33u].w), _2399), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2256 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2257), _2399), 0.0)).x), vec4(0.25)));
            float _2453 = 1.0 - (_2449 * cbSceneParam._m0[34u].x);
            float _2454 = 1.0 - (_2449 * cbSceneParam._m0[34u].y);
            float _2455 = 1.0 - (_2449 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
            frontier_phi_37_36_ladder_1 = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
            frontier_phi_37_36_ladder_2 = isnan(_2453) ? _2201 : (isnan(_2201) ? _2453 : min(_2201, _2453));
        }
        else
        {
            frontier_phi_37_36_ladder = _2203;
            frontier_phi_37_36_ladder_1 = _2202;
            frontier_phi_37_36_ladder_2 = _2201;
        }
        _2267 = frontier_phi_37_36_ladder_2;
        _2269 = frontier_phi_37_36_ladder_1;
        _2271 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2267 = _2201;
        _2269 = _2202;
        _2271 = _2203;
    }
    uvec4 _2276 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2278 = _2276.x * 14u;
    uint _2279 = _2278 + 13u;
    float _2286 = _944 + (-1.0);
    float _2291 = (cbLight._m0[_2279].x * _2286) + 1.0;
    float _2292 = (cbLight._m0[_2279].y * _2286) + 1.0;
    float _2293 = (cbLight._m0[_2279].z * _2286) + 1.0;
    float _2294 = (cbLight._m0[_2279].w * _2286) + 1.0;
    uint _2295 = _2278 + 5u;
    float _2301 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2305 = _2278 + 4u;
    float _2314 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
    uint _2318 = _2278 | 1u;
    float _2329 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_766, _767, _768));
    float _2332 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_766, _767, _768));
    float _4642 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _4653 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2337 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2339 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2346 = ((cbLight._m0[_2295].x * _2301) * _2339) + (((cbLight._m0[_2305].x * _2267) * _2314) * _2337);
    float _2347 = ((_2301 * cbLight._m0[_2295].y) * _2339) + (((cbLight._m0[_2305].y * _2269) * _2314) * _2337);
    float _2348 = ((_2301 * cbLight._m0[_2295].z) * _2339) + (((cbLight._m0[_2305].z * _2271) * _2314) * _2337);
    uvec4 _2352 = floatBitsToUint(cbLight._m0[_2278 + 12u]);
    bool _2354 = _2352.x == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2354)
    {
        _2456 = _2346;
        _2458 = _2347;
        _2460 = _2348;
    }
    else
    {
        uint _2464 = _2278 + 6u;
        float _2480 = (dot(vec3(cbLight._m0[_2278 + 2u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2481 = _2480 * _2480;
        float _4664 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2482 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2483 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2456 = (((cbLight._m0[_2464].x * 0.3183098733425140380859375) * _2482) * _2483) + _2346;
        _2458 = (((cbLight._m0[_2464].y * 0.3183098733425140380859375) * _2482) * _2483) + _2347;
        _2460 = (((cbLight._m0[_2464].z * 0.3183098733425140380859375) * _2482) * _2483) + _2348;
    }
    bool _2463 = _2352.y == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2463)
    {
        _2518 = _2456;
        _2520 = _2458;
        _2522 = _2460;
    }
    else
    {
        uint _2691 = _2278 + 7u;
        float _2707 = (dot(vec3(cbLight._m0[_2278 + 3u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2708 = _2707 * _2707;
        float _4680 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2709 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2710 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2518 = (((cbLight._m0[_2691].x * 0.3183098733425140380859375) * _2709) * _2710) + _2456;
        _2520 = (((cbLight._m0[_2691].y * 0.3183098733425140380859375) * _2709) * _2710) + _2458;
        _2522 = (((cbLight._m0[_2691].z * 0.3183098733425140380859375) * _2709) * _2710) + _2460;
    }
    uint _2525 = _2278 + 8u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _769) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2278].x + _846;
    float _2541 = cbLight._m0[_2278].y + _847;
    float _2542 = cbLight._m0[_2278].z + _848;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2278].xyz));
    float _4696 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _4707 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2554 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2555 = dot(vec3(_766, _767, _768), vec3(_2547, _2548, _2549));
    float _4718 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2559 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2547, _2548, _2549));
    float _4729 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2563 = _2539 * _2539;
    float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
    float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2576 = 0.959999978542327880859375 - _925;
    float _2578 = 0.959999978542327880859375 - _926;
    float _2579 = 0.959999978542327880859375 - _927;
    float _2586 = 1.0 - _2539;
    float _2597 = (0.5 / (((_2554 * ((_2553 * _2586) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2586) + _2539) * _2553))) * _2553;
    float _4740 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
    uint _2613 = _2278 + 9u;
    float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _769) * 0.949999988079071044921875);
    float _2625 = _2624 * _2624;
    float _2626 = cbLight._m0[_2318].x + _846;
    float _2627 = cbLight._m0[_2318].y + _847;
    float _2628 = cbLight._m0[_2318].z + _848;
    float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
    float _2633 = _2632 * _2626;
    float _2634 = _2632 * _2627;
    float _2635 = _2632 * _2628;
    float _2636 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2318].xyz));
    float _4751 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2640 = dot(vec3(_766, _767, _768), vec3(_2633, _2634, _2635));
    float _4762 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2644 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2633, _2634, _2635));
    float _4773 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2648 = _2625 * _2625;
    float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
    float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
    float _2666 = 1.0 - _2625;
    float _2676 = (0.5 / (((_2554 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2666) + _2625) * _2639))) * _2639;
    float _4784 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
    float _2688 = (((((_2659 * _2576) + _928) * cbLight._m0[_2613].x) * _2678) * _2301) + ((((cbLight._m0[_2525].x * _2267) * ((_2575 * _2576) + _928)) * _2599) * _2314);
    float _2689 = (((((_2659 * _2578) + _930) * cbLight._m0[_2613].y) * _2678) * _2301) + ((((cbLight._m0[_2525].y * _2269) * ((_2575 * _2578) + _930)) * _2599) * _2314);
    float _2690 = (((((_2659 * _2579) + _931) * cbLight._m0[_2613].z) * _2678) * _2301) + ((((cbLight._m0[_2525].z * _2271) * ((_2575 * _2579) + _931)) * _2599) * _2314);
    float _2746;
    float _2748;
    float _2750;
    if (_2354)
    {
        _2746 = _2688;
        _2748 = _2689;
        _2750 = _2690;
    }
    else
    {
        uint _2752 = _2278 + 2u;
        uint _2756 = _2278 + 10u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _769) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _846;
        float _2773 = cbLight._m0[_2752].y + _847;
        float _2774 = cbLight._m0[_2752].z + _848;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2752].xyz));
        float _4795 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2786 = dot(vec3(_766, _767, _768), vec3(_2779, _2780, _2781));
        float _4806 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4817 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
        float _2812 = 1.0 - _2771;
        float _2822 = (0.5 / (((_2554 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2812) + _2771) * _2785))) * _2785;
        float _4828 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2746 = (((((_2805 * _2576) + _928) * cbLight._m0[_2756].x) * _2824) * _2825) + _2688;
        _2748 = (((((_2805 * _2578) + _930) * cbLight._m0[_2756].y) * _2824) * _2825) + _2689;
        _2750 = (((((_2805 * _2579) + _931) * cbLight._m0[_2756].z) * _2824) * _2825) + _2690;
    }
    float _2856;
    float _2858;
    float _2860;
    if (_2463)
    {
        _2856 = _2746;
        _2858 = _2748;
        _2860 = _2750;
    }
    else
    {
        uint _2867 = _2278 + 3u;
        uint _2871 = _2278 + 11u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _769) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _846;
        float _2888 = cbLight._m0[_2867].y + _847;
        float _2889 = cbLight._m0[_2867].z + _848;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2867].xyz));
        float _4844 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2901 = dot(vec3(_766, _767, _768), vec3(_2894, _2895, _2896));
        float _4855 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4866 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2920 = exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0);
        float _2927 = 1.0 - _2886;
        float _2937 = (0.5 / (((_2554 * ((_2900 * _2927) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2927) + _2886) * _2900))) * _2900;
        float _4877 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2856 = (((((_2920 * _2576) + _928) * cbLight._m0[_2871].x) * _2939) * _2940) + _2746;
        _2858 = (((((_2920 * _2578) + _930) * cbLight._m0[_2871].y) * _2939) * _2940) + _2748;
        _2860 = (((((_2920 * _2579) + _931) * cbLight._m0[_2871].z) * _2939) * _2940) + _2750;
    }
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_2276.y == 0u)
    {
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.x;
        uint _2973 = uint((float(_2961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2962))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2962)));
        float _2983 = (log2(_2054 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2984 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        uint _2987 = uint(isnan(14.0) ? _2984 : (isnan(_2984) ? 14.0 : min(_2984, 14.0)));
        uvec4 _2992 = texelFetch(g_lightClusterGridBuffer, int(((_2987 << 2u) + (_2973 << 6u)) >> 2u));
        uint _2993 = _2992.x;
        uint _2994 = _2961.z;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((((1u << ((_2994 >> 4u) & 15u)) + 4294967295u) & _2993) == 0u) || ((_2994 & 240u) == 0u))
        {
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
        }
        else
        {
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            uint _3232 = 0u;
            uint _3241;
            bool _3242;
            for (;;)
            {
                _3241 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                _3242 = _3241 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3242)
                {
                    frontier_phi_71_pred = _3231;
                    frontier_phi_71_pred_1 = _3230;
                    frontier_phi_71_pred_2 = _3229;
                    frontier_phi_71_pred_3 = _3228;
                    frontier_phi_71_pred_4 = _3227;
                    frontier_phi_71_pred_5 = _3226;
                }
                else
                {
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    uint _3377;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3241;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    for (;;)
                    {
                        uint _3381 = uint(findLSB(_3377)) + (_3232 << 5u);
                        uint _3378 = (_3377 + 4294967295u) & _3377;
                        uint _3383 = _3381 * 48u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 3u)).x));
                        uint _3403 = (_3381 * 48u) + 4u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3422 = (_3381 * 48u) + 8u;
                        vec3 _3433 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x));
                        float _3437 = _3397.x - _2052;
                        float _3438 = _3397.y - _2053;
                        float _3439 = _3397.z - _2054;
                        float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                        float _3443 = inversesqrt(_3440);
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3447 = dot(vec3(_885, _888, _891), vec3(_3444, _3445, _3446));
                        float _3452 = 1.0 - (_3440 * _3397.w);
                        float _4903 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3454 = sqrt(_3440) * _3416.w;
                        float _3457 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3447) + _3458;
                        float _3464 = _3454 * _3454;
                        float _3468 = ((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3453) / ((_3464 * 0.699999988079071044921875) + 1.0);
                        float _3472 = (-0.0) - _2052;
                        float _3473 = (-0.0) - _2053;
                        float _3474 = (-0.0) - _2054;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3488 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                        float _3489 = 1.0 - _960;
                        float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                        float _3497 = _3496 * _3496;
                        float _3498 = _3497 * _3497;
                        float _3499 = _3479 + _3444;
                        float _3500 = _3480 + _3445;
                        float _3501 = _3481 + _3446;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3509 = dot(vec3(_885, _888, _891), vec3(_3479, _3480, _3481));
                        float _4919 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3513 = dot(vec3(_885, _888, _891), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                        float _4930 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                        float _3521 = _3457 * _3497;
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3447) + _3522;
                        float _4941 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3527 = 1.0 - _3497;
                        float _3537 = (0.5 / (((_3526 * ((_3512 * _3527) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3497) * _3512))) * _3526;
                        float _4952 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3548 = (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3520 * _3520) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125))) * _3453;
                        _3301 = (_3468 * _3416.x) + _3374;
                        _3302 = (_3468 * _3416.y) + _3375;
                        _3303 = (_3468 * _3416.z) + _3376;
                        _3298 = (_3548 * _3433.x) + _3371;
                        _3299 = (_3548 * _3433.y) + _3372;
                        _3300 = (_3548 * _3433.z) + _3373;
                        if (_3378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3378;
                        }
                    }
                    frontier_phi_71_pred = _3303;
                    frontier_phi_71_pred_1 = _3302;
                    frontier_phi_71_pred_2 = _3301;
                    frontier_phi_71_pred_3 = _3300;
                    frontier_phi_71_pred_4 = _3299;
                    frontier_phi_71_pred_5 = _3298;
                }
                _3084 = frontier_phi_71_pred;
                _3082 = frontier_phi_71_pred_1;
                _3080 = frontier_phi_71_pred_2;
                _3078 = frontier_phi_71_pred_3;
                _3076 = frontier_phi_71_pred_4;
                _3074 = frontier_phi_71_pred_5;
                uint _3233 = _3232 + 1u;
                if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3226 = _3074;
                    _3227 = _3076;
                    _3228 = _3078;
                    _3229 = _3080;
                    _3230 = _3082;
                    _3231 = _3084;
                    _3232 = _3233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
        }
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.z;
        uint _3090 = (_3088 >> 8u) & 15u;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((4294967295u << _3090) & _2993) == 0u)
        {
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
        }
        else
        {
            float _3219 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
            float _3220 = _3219 * _2052;
            float _3221 = _3219 * _2053;
            float _3222 = _3219 * _2054;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3090 < ((_3088 >> 12u) & 15u))
            {
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3354 = _3073;
                float _3355 = _3075;
                float _3356 = _3077;
                float _3357 = _3079;
                float _3358 = _3081;
                float _3359 = _3083;
                uint _3360 = _3090;
                uint _3369;
                bool _3370;
                for (;;)
                {
                    _3369 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                    _3370 = _3369 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3370)
                    {
                        frontier_phi_82_pred = _3359;
                        frontier_phi_82_pred_1 = _3358;
                        frontier_phi_82_pred_2 = _3357;
                        frontier_phi_82_pred_3 = _3356;
                        frontier_phi_82_pred_4 = _3355;
                        frontier_phi_82_pred_5 = _3354;
                    }
                    else
                    {
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        float _3577 = _3356;
                        float _3578 = _3357;
                        float _3579 = _3358;
                        float _3580 = _3359;
                        uint _3581 = _3369;
                        uint _3582;
                        vec4 _3607;
                        float _3608;
                        vec4 _3623;
                        vec3 _3635;
                        vec4 _3650;
                        vec4 _3665;
                        float _3711;
                        bool _3712;
                        for (;;)
                        {
                            uint _3592 = ((_3360 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3581));
                            _3582 = (_3581 + 4294967295u) & _3581;
                            uint _3594 = _3592 * 40u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3608 = _3607.w;
                            uint _3610 = (_3592 * 40u) + 4u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3592 * 40u) + 8u;
                            _3635 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x));
                            uint _3637 = (_3592 * 40u) + 16u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3592 * 40u) + 20u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3667 = (_3592 * 40u) + 24u;
                            vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3686 = (_3592 * 40u) + 28u;
                            vec4 _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            _3711 = fma(_2054, _3699.z, fma(_2053, _3699.y, _3699.x * _2052)) + _3699.w;
                            _3712 = !((fma(_2054, _3680.z, fma(_2053, _3680.y, _3680.x * _2052)) + _3680.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3712)
                            {
                                float _3739 = _3607.x - _2052;
                                float _3740 = _3607.y - _2053;
                                float _3741 = _3607.z - _2054;
                                float _3742 = dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741));
                                float _3745 = inversesqrt(_3742);
                                float _3746 = _3745 * _3739;
                                float _3747 = _3745 * _3740;
                                float _3748 = _3745 * _3741;
                                float _3752 = 1.0 - (_3742 / (_3608 * _3608));
                                float _4963 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3757 = sqrt(_3742) * _3623.w;
                                float _3759 = 1.39999997615814208984375 / (_3757 + 1.39999997615814208984375);
                                float _3760 = _3759 * _3759;
                                float _3763 = ((1.0 - _3760) * dot(vec3(_3746, _3747, _3748), vec3(_885, _888, _891))) + _3760;
                                float _3766 = _3757 * _3757;
                                float _3770 = (fma(_2054, _3650.z, fma(_2053, _3650.y, _3650.x * _2052)) + _3650.w) / _3711;
                                float _3771 = (fma(_2054, _3665.z, fma(_2053, _3665.y, _3665.x * _2052)) + _3665.w) / _3711;
                                float _3775 = 1.0 - dot(vec2(_3770, _3771), vec2(_3770, _3771));
                                float _4979 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3777 = _3776 * (((isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0))) * _3753) / ((_3766 * 0.699999988079071044921875) + 1.0));
                                float _3789 = exp2(log2(1.0 / ((_3766 * 3.5) + 5.0)) * 0.25);
                                float _3790 = 1.0 - _960;
                                float _3797 = sqrt(1.0 - ((1.0 - (_3790 * _3790)) * (1.0 - (_3789 * _3789))));
                                float _3798 = _3797 * _3797;
                                float _3799 = _3798 * _3798;
                                float _3800 = _3746 - _3220;
                                float _3801 = _3747 - _3221;
                                float _3802 = _3748 - _3222;
                                float _3806 = inversesqrt(dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802)));
                                float _3810 = dot(vec3(_885, _888, _891), vec3((-0.0) - _3220, (-0.0) - _3221, (-0.0) - _3222));
                                float _4990 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3814 = dot(vec3(_885, _888, _891), vec3(_3806 * _3800, _3806 * _3801, _3806 * _3802));
                                float _5001 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3817 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3821 = ((_3817 * _3817) * (_3799 + (-1.0))) + 1.0;
                                float _3822 = _3759 * _3798;
                                float _3823 = _3822 * _3822;
                                float _3829 = ((1.0 - _3823) * dot(vec3(_885, _888, _891), vec3(_3746, _3747, _3748))) + _3823;
                                float _5012 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3830 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3831 = 1.0 - _3798;
                                float _3841 = (0.5 / (((_3830 * ((_3813 * _3831) + _3798)) + 9.9999999392252902907785028219223e-09) + (((_3830 * _3831) + _3798) * _3813))) * _3830;
                                float _5023 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3851 = (_3776 * _3753) * (((_3799 * 3.1415927410125732421875) * (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) / ((_3821 * _3821) * ((_3766 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3777 * _3623.z;
                                frontier_phi_88_pred_1 = _3777 * _3623.y;
                                frontier_phi_88_pred_2 = _3777 * _3623.x;
                                frontier_phi_88_pred_3 = _3851 * _3635.z;
                                frontier_phi_88_pred_4 = _3851 * _3635.y;
                                frontier_phi_88_pred_5 = _3851 * _3635.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3860 = frontier_phi_88_pred;
                            _3859 = frontier_phi_88_pred_1;
                            _3858 = frontier_phi_88_pred_2;
                            _3857 = frontier_phi_88_pred_3;
                            _3856 = frontier_phi_88_pred_4;
                            _3855 = frontier_phi_88_pred_5;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            if (_3582 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3582;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3567;
                        frontier_phi_82_pred_1 = _3566;
                        frontier_phi_82_pred_2 = _3565;
                        frontier_phi_82_pred_3 = _3564;
                        frontier_phi_82_pred_4 = _3563;
                        frontier_phi_82_pred_5 = _3562;
                    }
                    _3205 = frontier_phi_82_pred;
                    _3203 = frontier_phi_82_pred_1;
                    _3201 = frontier_phi_82_pred_2;
                    _3199 = frontier_phi_82_pred_3;
                    _3197 = frontier_phi_82_pred_4;
                    _3195 = frontier_phi_82_pred_5;
                    uint _3361 = _3360 + 1u;
                    if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3354 = _3195;
                        _3355 = _3197;
                        _3356 = _3199;
                        _3357 = _3201;
                        _3358 = _3203;
                        _3359 = _3205;
                        _3360 = _3361;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3201;
                frontier_phi_63_64_ladder_1 = _3205;
                frontier_phi_63_64_ladder_2 = _3203;
                frontier_phi_63_64_ladder_3 = _3199;
                frontier_phi_63_64_ladder_4 = _3197;
                frontier_phi_63_64_ladder_5 = _3195;
            }
            else
            {
                frontier_phi_63_64_ladder = _3079;
                frontier_phi_63_64_ladder_1 = _3083;
                frontier_phi_63_64_ladder_2 = _3081;
                frontier_phi_63_64_ladder_3 = _3077;
                frontier_phi_63_64_ladder_4 = _3075;
                frontier_phi_63_64_ladder_5 = _3073;
            }
            _3194 = frontier_phi_63_64_ladder_5;
            _3196 = frontier_phi_63_64_ladder_4;
            _3198 = frontier_phi_63_64_ladder_3;
            _3200 = frontier_phi_63_64_ladder;
            _3202 = frontier_phi_63_64_ladder_2;
            _3204 = frontier_phi_63_64_ladder_1;
        }
        float _3209 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _3006 = (_3209 * _3200) + _2518;
        _3008 = (_3209 * _3202) + _2520;
        _3010 = (_3209 * _3204) + _2522;
        _3012 = ((_3194 * _928) * _3209) + _2856;
        _3014 = ((_3196 * _930) * _3209) + _2858;
        _3016 = ((_3198 * _931) * _3209) + _2860;
    }
    else
    {
        _3006 = _2518;
        _3008 = _2520;
        _3010 = _2522;
        _3012 = _2856;
        _3014 = _2858;
        _3016 = _2860;
    }
    float _5039 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _5050 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _5061 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _3033 = ((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3006 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _944))) + ((_3012 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _3034 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3008 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _944))) + ((_3014 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _3035 = ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3010 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _944))) + ((_3016 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    uint _3036 = _274 + 6u;
    float _3044 = _866 / cbSceneParam._m0[86u].x;
    float _3045 = _867 / cbSceneParam._m0[86u].y;
    vec4 _3059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, (log2((isnan(cbSceneParam._m0[77u].w) ? _788 : (isnan(_788) ? cbSceneParam._m0[77u].w : min(_788, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3061 = _3059.x;
    float _3062 = _3059.y;
    float _3063 = _3059.z;
    float _3064 = _3059.w;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_788 > cbSceneParam._m0[78u].w)
    {
        float _3098 = isnan(_788) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _788 : min(cbSceneParam._m0[80u].w, _788));
        float _3099 = _3098 / _788;
        float _3110 = _3099 * _839;
        float _3111 = _840 * _3099;
        float _3112 = (-0.0) - _3111;
        float _3114 = _3099 * _841;
        float _3116 = (cbSceneParam._m0[77u].w * _3112) / _3098;
        float _3117 = _3116 + cbSceneParam._m0[79u].w;
        float _3118 = cbSceneParam._m0[79u].w - _3111;
        float _3124 = sqrt(((_3110 * _3110) + (_3111 * _3111)) + (_3114 * _3114));
        float _3127 = (1.0 - (cbSceneParam._m0[77u].w / _3098)) * _3124;
        float _3132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3311;
        if (abs((_3112 - _3116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3311 = ((((_3117 > 0.0) ? exp2(_3132 * _3117) : (2.0 - exp2(_3134 * _3117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3127;
        }
        else
        {
            float _3255 = 1.0 / cbSceneParam._m0[80u].x;
            float _3256 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : max(_3117, _3118));
            float _3257 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : min(_3117, _3118));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            _3311 = ((abs(_3124 / _3112) * cbSceneParam._m0[80u].y) * ((((_3266 - _3267) * 2.0) - ((exp2(_3132 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0)))) - exp2(_3132 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))))) * _3255)) - ((exp2(_3134 * _3266) - exp2(_3134 * _3267)) * _3255))) + (_3127 * cbSceneParam._m0[80u].z);
        }
        vec4 _3313 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, 1.0), 0.0);
        float _3322 = exp2((_3311 * (-1.44269502162933349609375)) * (1.0 - _3313.w));
        float _3323 = log2(_3322);
        float _3339 = log2(_3064);
        _3136 = (exp2(_3339 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].x)) * _3313.x) / cbSceneParam._m0[78u].x)) + _3061;
        _3138 = (exp2(_3339 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].y)) * _3313.y) / cbSceneParam._m0[78u].y)) + _3062;
        _3140 = (exp2(_3339 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].z)) * _3313.z) / cbSceneParam._m0[78u].z)) + _3063;
        _3142 = _3322 * _3064;
    }
    else
    {
        _3136 = _3061;
        _3138 = _3062;
        _3140 = _3063;
        _3142 = _3064;
    }
    bool _3349;
    vec4 _3152;
    vec4 _3174;
    float _3176;
    float _3180;
    float _3181;
    float _3182;
    float _3183;
    bool _3193;
    for (;;)
    {
        _3152 = cbMatDynParam._m0[0u];
        float _3154 = roundEven(_3152.y);
        bool _3155 = _3154 == 3.0;
        float _3156 = log2(_3142);
        float _3163 = exp2(_3156 * cbSceneParam._m0[78u].x) * _3033;
        float _3164 = exp2(_3156 * cbSceneParam._m0[78u].y) * _3034;
        float _3165 = exp2(_3156 * cbSceneParam._m0[78u].z) * _3035;
        float _3172 = _855 + (-0.5);
        _3174 = cbMtdParam._m0[1u];
        _3176 = _3174.y * _3172;
        float _3179 = (_3154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3180 = _3179 * (_3155 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3136)));
        _3181 = _3179 * (_3155 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3138)));
        _3182 = _3179 * (_3155 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3140)));
        _3183 = _3172 * 0.999000012874603271484375;
        _3193 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3193)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3183) < 0.5)
            {
                _3349 = true;
                break;
            }
        }
        uint _3290 = _904 + uint(_3152.w);
        if ((cbInstanceData._m0[_3290].w < 1.0) && ((cbInstanceData._m0[_3290].w + _3183) < 0.5))
        {
            _3349 = true;
            break;
        }
        if ((_3176 + 1.0) < _3174.x)
        {
            _3349 = true;
            break;
        }
        _3349 = false;
        break;
    }
    float _3553;
    if (_3349)
    {
        discard_state = true;
        _3553 = 0.0;
    }
    else
    {
        _3553 = cbInstanceData._m0[_3036].w;
    }
    SV_Target.x = _3180;
    SV_Target.y = _3181;
    SV_Target.z = _3182;
    SV_Target.w = _3553;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3036].w;
    discard_exit();
}


