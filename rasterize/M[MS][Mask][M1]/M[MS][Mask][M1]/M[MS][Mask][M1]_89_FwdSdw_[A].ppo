#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1628;
float _4289;
float _4290;
float _4291;
float _4292;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4301 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4312 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4323 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = _383.x * cbMtdParam._m0[11u].x;
    float _389 = _383.y * cbMtdParam._m0[11u].y;
    float _390 = _383.z * cbMtdParam._m0[11u].z;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _474 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _491 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _428.x) * 2.0) - ((((_462 - _474) * cbMtdParam._m0[23u].w) + _474) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4334 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _499 = (_492 * ((_409.x * cbMtdParam._m0[12u].x) - _388)) + _388;
    float _500 = (_492 * ((_409.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _501 = (_492 * ((_409.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _564 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _428.y) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[23u].w) + _550) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4345 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _575 = (_357.x * cbMtdParam._m0[9u].x) * ((_565 * ((_518.x * cbMtdParam._m0[13u].x) - _499)) + _499);
    float _576 = (_357.y * cbMtdParam._m0[9u].y) * ((_565 * ((_518.y * cbMtdParam._m0[13u].y) - _500)) + _500);
    float _577 = (_357.z * cbMtdParam._m0[9u].z) * ((_565 * ((_518.z * cbMtdParam._m0[13u].z) - _501)) + _501);
    float _581 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _575;
    float _584 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _576;
    float _587 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _577;
    float _595 = (((_575 - _581) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) + _581) * 4.55000019073486328125;
    float _597 = (((_576 - _584) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) + _584) * 4.55000019073486328125;
    float _599 = (((_577 - _587) * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) + _587) * 4.55000019073486328125;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _320) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _321) + cbTextureTilingScale._m0[14u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _679 = _677.x;
    float _680 = _677.y;
    float _681 = _677.z;
    float _688 = ((_660.x - _679) * _492) + _679;
    float _689 = ((_660.y - _680) * _492) + _680;
    float _690 = ((_660.z - _681) * _492) + _681;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _715 = ((_702.z - _690) * _565) + _690;
    float _718 = ((((_702.x - _688) * _565) + _688) * 2.0) + (-1.0);
    float _719 = ((((_702.y - _689) * _565) + _689) * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _4356 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _725 = sqrt(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _766 = _764.x;
    float _767 = 1.0 - _766;
    float _776 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _779 = ((isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : min(_776, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _788 = (_779 - ((((((_766 - _767) * cbMtdParam._m0[24u].z) + _767) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _779))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4377 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _789 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _796 = (_789 * ((_618.x * cbMtdParam._m0[18u].x) - _595)) + _595;
    float _797 = (_789 * ((_618.y * cbMtdParam._m0[18u].y) - _597)) + _597;
    float _798 = (_789 * ((_618.z * cbMtdParam._m0[18u].z) - _599)) + _599;
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _320) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _321) + cbTextureTilingScale._m0[19u].w));
    float _812 = _810.x;
    float _813 = 1.0 - _812;
    float _838 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_812 - _813) * cbMtdParam._m0[24u].w) + _813) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4388 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _847 = ((((cbMtdParam._m0[10u].x - _796) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _839) + _796;
    float _848 = ((((cbMtdParam._m0[10u].y - _797) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _839) + _797;
    float _849 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _798)) * _839) + _798;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _877 = _875.x;
    float _894 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _877) * _492) + _877;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _894) * _565) + _894;
    float _915 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _911) * cbMtdParam._m0[19u].z) + _911;
    float _917 = _915 - (_915 * _789);
    float _919 = _917 - (_917 * _839);
    float _924 = (((_637.z - _715) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _715;
    float _928 = ((_739.z - _924) * cbMtdParam._m0[19u].w) + _924;
    vec4 _942 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _949 = (_942.x * 2.0) + (-1.0);
    float _950 = (_942.y * 2.0) + (-1.0);
    float _951 = dot(vec2(_949, _950), vec2(_949, _950));
    float _4399 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _959 = (_789 * (_942.z - _928)) + _928;
    float _962 = ((cbMtdParam._m0[23u].x - _959) * _839) + _959;
    vec4 _983 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _320) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _321) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _989 = (_983.x * 2.0) + (-1.0);
    float _990 = (_983.y * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4410 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1005 = (_718 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_637.x * 2.0) + (-1.0)))) + (((_739.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1006 = (_719 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_637.y * 2.0) + (-1.0)))) + (((_739.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1018 = (((_949 - _1005) + (cbMtdParam._m0[21u].x * _1005)) * _789) + _1005;
    float _1019 = (((_950 - _1006) + (cbMtdParam._m0[21u].x * _1006)) * _789) + _1006;
    float _1020 = (_789 * (sqrt(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) - _725)) + _725;
    float _1031 = (((_989 - _1018) + (_1018 * cbMtdParam._m0[22u].z)) * _839) + _1018;
    float _1032 = (((_990 - _1019) + (_1019 * cbMtdParam._m0[22u].z)) * _839) + _1019;
    float _1033 = ((sqrt(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) - _1020) * _839) + _1020;
    float _1035 = cbMtdParam._m0[22u].x + _739.w;
    float _1038 = fma(_1033, _269 * NORMAL.x, fma(_1032, _276 * TANGENT.x, (_262 * _254) * _1031));
    float _1041 = fma(_1033, _269 * NORMAL.y, fma(_1032, _276 * TANGENT.y, (_262 * _255) * _1031));
    float _1044 = fma(_1033, _269 * NORMAL.z, fma(_1032, _276 * TANGENT.z, (_262 * _256) * _1031));
    float _1048 = inversesqrt(dot(vec3(_1038, _1041, _1044), vec3(_1038, _1041, _1044)));
    float _1049 = _1048 * _1038;
    float _1050 = _1048 * _1041;
    float _1051 = _1048 * _1044;
    float _4421 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1052 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4443 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4454 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4465 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4476 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _1057 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _1071 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1121 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1111);
    float _1122 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1111);
    float _1123 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1111);
    float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
    float _1128 = _1121 * _1127;
    float _1129 = _1122 * _1127;
    float _1130 = _1123 * _1127;
    vec4 _1135 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1137 = _1135.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1309 = sqrt(((_1121 * _1121) + (_1122 * _1122)) + (_1123 * _1123));
        float _1315 = (cbMatDynParam._m0[5u].x * _1309) + cbMatDynParam._m0[5u].y;
        float _4487 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1320 = (cbMatDynParam._m0[5u].z * _1309) + cbMatDynParam._m0[5u].w;
        float _4498 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) - _1316)) + _1316) < ((_1137 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1148 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1149 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1167 = fma(_1051, cbSceneParam._m0[5u].z, fma(_1050, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1049));
    float _1170 = fma(_1051, cbSceneParam._m0[6u].z, fma(_1050, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1049));
    float _1173 = fma(_1051, cbSceneParam._m0[7u].z, fma(_1050, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1049));
    uint _1186 = _301 + 9u;
    uint _1187 = _1186 + uint(cbMatDynParam._m0[0u].w);
    float _1193 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * cbInstanceData._m0[_1187].x;
    float _1194 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * cbInstanceData._m0[_1187].y;
    float _1195 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * cbInstanceData._m0[_1187].z;
    float _4509 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _4520 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _4531 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _1199 = 1.0 - _1057;
    float _1200 = _1196 * _1199;
    float _1201 = _1197 * _1199;
    float _1202 = _1198 * _1199;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1057;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1057;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1057;
    float _1210 = _1207 + 0.039999999105930328369140625;
    float _1212 = _1208 + 0.039999999105930328369140625;
    float _1213 = _1209 + 0.039999999105930328369140625;
    vec4 _1222 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1148, cbSceneParam._m0[86u].y * _1149));
    float _1226 = ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * TEXCOORD_5.w) * _1222.x;
    float _1227 = dot(vec3(_1049, _1050, _1051), vec3(_1128, _1129, _1130));
    float _1230 = _1227 * 2.0;
    float _1234 = (_1230 * _1049) - _1128;
    float _1235 = (_1230 * _1050) - _1129;
    float _1236 = (_1230 * _1051) - _1130;
    float _1240 = abs(dot(vec3(_1128, _1129, _1130), vec3(_1049, _1050, _1051)));
    float _4542 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1242 = sqrt(_1052);
    float _1255 = exp2((_1242 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1242 * 3.0));
    float _1261 = (1.0 - _1255) * ((_1242 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1262 = _1255 * _1242;
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1627;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1352 = fma(_1298, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290));
        float _1356 = fma(_1298, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290));
        float _1360 = fma(_1298, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290));
        float _1385 = _1290 + _1049;
        float _1386 = _1294 + _1050;
        float _1387 = _1298 + _1051;
        float _1397 = fma(_1387, cbModelParam._m0[26u].z, fma(_1386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1385)) - _1352;
        float _1398 = fma(_1387, cbModelParam._m0[27u].z, fma(_1386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1385)) - _1356;
        float _1399 = fma(_1387, cbModelParam._m0[28u].z, fma(_1386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1385)) - _1360;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1352 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1356 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[34u].z) + ((((((_1360 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1455 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1421.x + (-0.5));
        float _1457 = _1455 * (_1421.y + (-0.5));
        float _1458 = _1455 * (_1421.z + (-0.5));
        float _1465 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1428.x + (-0.5));
        float _1467 = _1465 * (_1428.y + (-0.5));
        float _1468 = _1465 * (_1428.z + (-0.5));
        float _1475 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1435.x + (-0.5));
        float _1477 = _1475 * (_1435.y + (-0.5));
        float _1478 = _1475 * (_1435.z + (-0.5));
        float _1485 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1442.x + (-0.5));
        float _1487 = _1485 * (_1442.y + (-0.5));
        float _1488 = _1485 * (_1442.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1509 = (dot(vec3(_1049, _1050, _1051), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1519 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4590 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1521 + 1.0))) + _1526) * _1489;
        float _1536 = _1457 * 0.5;
        float _1537 = _1467 * 0.5;
        float _1538 = _1477 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_1049, _1050, _1051), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4623 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_1563 + 1.0))) + _1568) * _1490;
        float _1578 = _1458 * 0.5;
        float _1579 = _1468 * 0.5;
        float _1580 = _1478 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_1049, _1050, _1051), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4634 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4645 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4656 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_1605 + 1.0))) + _1610) * _1491;
        _1627 = _1458;
        _1629 = _1457;
        _1630 = _1456;
        _1631 = _1468;
        _1632 = _1467;
        _1633 = _1466;
        _1634 = _1478;
        _1635 = _1477;
        _1636 = _1476;
        _1637 = _1491;
        _1638 = _1490;
        _1639 = _1489;
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1641 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1628;
        _1629 = _1628;
        _1630 = _1628;
        _1631 = _1628;
        _1632 = _1628;
        _1633 = _1628;
        _1634 = _1628;
        _1635 = _1628;
        _1636 = _1628;
        _1637 = _1628;
        _1638 = _1628;
        _1639 = _1628;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1669 = fma(_1298, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290));
        float _1673 = fma(_1298, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290));
        float _1677 = fma(_1298, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290));
        float _1700 = _1290 + _1049;
        float _1701 = _1294 + _1050;
        float _1702 = _1298 + _1051;
        float _1712 = fma(_1702, cbModelParam._m0[30u].z, fma(_1701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1700)) - _1669;
        float _1713 = fma(_1702, cbModelParam._m0[31u].z, fma(_1701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1700)) - _1673;
        float _1714 = fma(_1702, cbModelParam._m0[32u].z, fma(_1701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1700)) - _1677;
        float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
        float _1731 = ((_1718 * _1712) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1669 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1732 = ((_1718 * _1713) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1673 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1733 = ((_1718 * _1714) / cbModelParam._m0[35u].z) + ((((((_1677 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        float _1768 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1735.x + (-0.5));
        float _1770 = _1768 * (_1735.y + (-0.5));
        float _1771 = _1768 * (_1735.z + (-0.5));
        float _1778 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1742.x + (-0.5));
        float _1780 = _1778 * (_1742.y + (-0.5));
        float _1781 = _1778 * (_1742.z + (-0.5));
        float _1788 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1789 = _1788 * (_1749.x + (-0.5));
        float _1790 = _1788 * (_1749.y + (-0.5));
        float _1791 = _1788 * (_1749.z + (-0.5));
        float _1798 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1799 = _1798 * (_1756.x + (-0.5));
        float _1800 = _1798 * (_1756.y + (-0.5));
        float _1801 = _1798 * (_1756.z + (-0.5));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1805 = _1769 * 0.5;
        float _1806 = _1779 * 0.5;
        float _1807 = _1789 * 0.5;
        float _1808 = dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807));
        float _1813 = (_1808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1808);
        float _1821 = (dot(vec3(_1049, _1050, _1051), vec3(_1813 * _1805, _1813 * _1806, _1813 * _1807)) + 1.0) * 0.5;
        float _4697 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1830 = sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4708 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _1832 = _1831 * 2.0;
        float _1836 = (1.0 - _1831) / (_1831 + 1.0);
        float _4719 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _1846 = ((((1.0 - _1837) * (_1832 + 2.0)) * exp2(log2(isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_1832 + 1.0))) + _1837) * _1802;
        float _1847 = _1770 * 0.5;
        float _1848 = _1780 * 0.5;
        float _1849 = _1790 * 0.5;
        float _1850 = dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849));
        float _1855 = (_1850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1850);
        float _1863 = (dot(vec3(_1049, _1050, _1051), vec3(_1855 * _1847, _1855 * _1848, _1855 * _1849)) + 1.0) * 0.5;
        float _4730 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1872 = sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4741 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _1874 = _1873 * 2.0;
        float _1878 = (1.0 - _1873) / (_1873 + 1.0);
        float _4752 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _1888 = ((((1.0 - _1879) * (_1874 + 2.0)) * exp2(log2(isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_1874 + 1.0))) + _1879) * _1803;
        float _1889 = _1771 * 0.5;
        float _1890 = _1781 * 0.5;
        float _1891 = _1791 * 0.5;
        float _1892 = dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891));
        float _1897 = (_1892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1892);
        float _1905 = (dot(vec3(_1049, _1050, _1051), vec3(_1897 * _1889, _1897 * _1890, _1897 * _1891)) + 1.0) * 0.5;
        float _4763 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1914 = sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891)) / (_1804 + 9.9999997473787516355514526367188e-06);
        float _4774 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _1916 = _1915 * 2.0;
        float _1920 = (1.0 - _1915) / (_1915 + 1.0);
        float _4785 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _1930 = ((((1.0 - _1921) * (_1916 + 2.0)) * exp2(log2(isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_1916 + 1.0))) + _1921) * _1804;
        _1938 = _1771;
        _1939 = _1770;
        _1940 = _1769;
        _1941 = _1781;
        _1942 = _1780;
        _1943 = _1779;
        _1944 = _1791;
        _1945 = _1790;
        _1946 = _1789;
        _1947 = _1804;
        _1948 = _1803;
        _1949 = _1802;
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)));
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)));
        _1952 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)));
    }
    else
    {
        _1938 = _1628;
        _1939 = _1628;
        _1940 = _1628;
        _1941 = _1628;
        _1942 = _1628;
        _1943 = _1628;
        _1944 = _1628;
        _1945 = _1628;
        _1946 = _1628;
        _1947 = _1628;
        _1948 = _1628;
        _1949 = _1628;
        _1950 = 0.0;
        _1951 = 0.0;
        _1952 = 0.0;
    }
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1640)) + _1640;
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1641)) + _1641;
    float _1964 = (cbModelParam._m0[1u].x * (_1952 - _1642)) + _1642;
    float _1985 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1962));
    float _2006 = _1234 * 0.5;
    float _2007 = _1235 * 0.5;
    float _2008 = _1236 * 0.5;
    float _2009 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1940, _1943, _1946, _1949));
    float _2012 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2015 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2049;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2022 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1627, _1631, _1634, _1637));
        float _2026 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1629, _1632, _1635, _1638));
        float _2030 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1630, _1633, _1636, _1639));
        float _2037 = dot(vec4(cbModelParam._m0[39u]), vec4(_2006, _2007, _2008, 1.0));
        _2049 = dot(vec3(isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)), isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2037) ? 0.0 : (isnan(0.0) ? _2037 : max(0.0, _2037))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2049 = 1.0;
    }
    float _2060;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2051 = dot(vec4(cbModelParam._m0[40u]), vec4(_2006, _2007, _2008, 1.0));
        _2060 = dot(vec3(isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2051) ? 0.0 : (isnan(0.0) ? _2051 : max(0.0, _2051))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2060 = 1.0;
    }
    float _2064 = (_2060 * cbModelParam._m0[1u].x) + (_2049 * (1.0 - cbModelParam._m0[1u].x));
    float _2074 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1052);
    float _2075 = isnan(_2074) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2074 : min(cbModelParam._m0[25u].z, _2074));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2122 = fma(_1298, cbModelParam._m0[13u].z, fma(_1294, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1290)) + cbModelParam._m0[13u].w;
        float _2126 = fma(_1298, cbModelParam._m0[14u].z, fma(_1294, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1290)) + cbModelParam._m0[14u].w;
        float _2130 = fma(_1298, cbModelParam._m0[15u].z, fma(_1294, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1290)) + cbModelParam._m0[15u].w;
        float _2133 = fma(_1236, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1234));
        float _2136 = fma(_1236, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1234));
        float _2139 = fma(_1236, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1234));
        float _2167;
        if (_2133 > 0.0)
        {
            _2167 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2167 = frontier_phi_17_15_ladder;
        }
        float _2338;
        if (_2136 > 0.0)
        {
            _2338 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2338 = frontier_phi_26_22_ladder;
        }
        float _2633;
        if (_2139 > 0.0)
        {
            _2633 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2633 = frontier_phi_38_33_ladder;
        }
        float _2635 = isnan(_2338) ? _2167 : (isnan(_2167) ? _2338 : min(_2167, _2338));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _2133) + _2122;
        float _2641 = (_2636 * _2136) + _2126;
        float _2642 = (_2636 * _2139) + _2130;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2643;
        float _2647 = _2643 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 > _2647) || ((_2641 < _2645) || ((_2640 < _2645) || (_2640 > _2647))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2642, cbModelParam._m0[9u].z, fma(_2641, cbModelParam._m0[9u].y, _2640 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2642, cbModelParam._m0[10u].z, fma(_2641, cbModelParam._m0[10u].y, _2640 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2642, cbModelParam._m0[11u].z, fma(_2641, cbModelParam._m0[11u].y, _2640 * cbModelParam._m0[11u].x))), _2075);
            frontier_phi_16_38_ladder = _2787.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2787.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2787.x * cbModelParam._m0[1u].y;
        }
        _2155 = frontier_phi_16_38_ladder_2;
        _2157 = frontier_phi_16_38_ladder_1;
        _2159 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2143 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1234, _1235, _1236), _2075);
        _2155 = _2143.x * cbModelParam._m0[1u].y;
        _2157 = _2143.y * cbModelParam._m0[1u].y;
        _2159 = _2143.z * cbModelParam._m0[1u].y;
    }
    float _2163 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1052);
    float _2164 = isnan(_2163) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2163 : min(cbModelParam._m0[25u].w, _2163));
    float _2253;
    float _2255;
    float _2257;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2217 = fma(_1298, cbModelParam._m0[21u].z, fma(_1294, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1290)) + cbModelParam._m0[21u].w;
        float _2221 = fma(_1298, cbModelParam._m0[22u].z, fma(_1294, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1290)) + cbModelParam._m0[22u].w;
        float _2225 = fma(_1298, cbModelParam._m0[23u].z, fma(_1294, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1290)) + cbModelParam._m0[23u].w;
        float _2228 = fma(_1236, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1234));
        float _2231 = fma(_1236, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1234));
        float _2234 = fma(_1236, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1234));
        float _2343;
        if (_2228 > 0.0)
        {
            _2343 = abs((1.0 - _2217) / _2228);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2217 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2343 = frontier_phi_28_24_ladder;
        }
        float _2660;
        if (_2231 > 0.0)
        {
            _2660 = abs((1.0 - _2221) / _2231);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2221 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2660 = frontier_phi_40_35_ladder;
        }
        float _2998;
        if (_2234 > 0.0)
        {
            _2998 = abs((1.0 - _2225) / _2234);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2234 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2225 + 1.0) / _2234);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2998 = frontier_phi_50_47_ladder;
        }
        float _3000 = isnan(_2660) ? _2343 : (isnan(_2343) ? _2660 : min(_2343, _2660));
        float _3001 = isnan(_2998) ? _3000 : (isnan(_3000) ? _2998 : min(_3000, _2998));
        float _3005 = (_3001 * _2228) + _2217;
        float _3006 = (_3001 * _2231) + _2221;
        float _3007 = (_3001 * _2234) + _2225;
        float _3008 = _3001 * 9.9999997473787516355514526367188e-05;
        float _3009 = (-1.0) - _3008;
        float _3011 = _3008 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3007 > _3011) || ((_3007 < _3009) || ((_3006 > _3011) || ((_3006 < _3009) || ((_3005 < _3009) || (_3005 > _3011))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3007, cbModelParam._m0[17u].z, fma(_3006, cbModelParam._m0[17u].y, _3005 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3007, cbModelParam._m0[18u].z, fma(_3006, cbModelParam._m0[18u].y, _3005 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3007, cbModelParam._m0[19u].z, fma(_3006, cbModelParam._m0[19u].y, _3005 * cbModelParam._m0[19u].x))), _2164);
            frontier_phi_25_50_ladder = _3129.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3129.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3129.x * cbModelParam._m0[1u].z;
        }
        _2253 = frontier_phi_25_50_ladder_2;
        _2255 = frontier_phi_25_50_ladder_1;
        _2257 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1234, _1235, _1236), _2164);
        _2253 = _2237.x * cbModelParam._m0[1u].z;
        _2255 = _2237.y * cbModelParam._m0[1u].z;
        _2257 = _2237.z * cbModelParam._m0[1u].z;
    }
    float _2270 = (((_1261 * _1210) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2253 - _2155)) + _2155);
    float _2272 = (((_1261 * _1212) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2255 - _2157)) + _2157);
    float _2274 = (((_1261 * _1213) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2257 - _2159)) + _2159);
    float _2277 = fma(_2274, cbSceneParam._m0[89u].z, fma(_2272, cbSceneParam._m0[89u].y, _2270 * cbSceneParam._m0[89u].x));
    float _2280 = fma(_2274, cbSceneParam._m0[90u].z, fma(_2272, cbSceneParam._m0[90u].y, _2270 * cbSceneParam._m0[90u].x));
    float _2283 = fma(_2274, cbSceneParam._m0[91u].z, fma(_2272, cbSceneParam._m0[91u].y, _2270 * cbSceneParam._m0[91u].x));
    float _2317 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2321 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2325 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2329 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2330 = _2317 / _2329;
    float _2331 = _2321 / _2329;
    float _2332 = _2325 / _2329;
    float _2479;
    float _2480;
    float _2481;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2359 = ((uint(_2332 > cbSceneParam._m0[59u].y) + uint(_2332 > cbSceneParam._m0[59u].x)) + uint(_2332 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2360 = _2359 + 43u;
        uint _2368 = _2359 + 44u;
        uint _2376 = _2359 + 45u;
        uint _2384 = _2359 + 46u;
        float _2395 = fma(_2329, cbSceneParam._m0[_2360].w, fma(_2325, cbSceneParam._m0[_2360].z, fma(_2321, cbSceneParam._m0[_2360].y, _2317 * cbSceneParam._m0[_2360].x)));
        float _2399 = fma(_2329, cbSceneParam._m0[_2368].w, fma(_2325, cbSceneParam._m0[_2368].z, fma(_2321, cbSceneParam._m0[_2368].y, _2317 * cbSceneParam._m0[_2368].x)));
        float _2407 = fma(_2329, cbSceneParam._m0[_2384].w, fma(_2325, cbSceneParam._m0[_2384].z, fma(_2321, cbSceneParam._m0[_2384].y, _2317 * cbSceneParam._m0[_2384].x)));
        float _2412 = cbSceneParam._m0[33u].z * _2407;
        float _2414 = cbSceneParam._m0[33u].w * _2407;
        float _2417 = fma(_2329, cbSceneParam._m0[_2376].w, fma(_2325, cbSceneParam._m0[_2376].z, fma(_2321, cbSceneParam._m0[_2376].y, _2317 * cbSceneParam._m0[_2376].x))) / _2407;
        float _2465 = (cbSceneParam._m0[33u].x - sqrt(((_2331 * _2331) + (_2330 * _2330)) + (_2332 * _2332))) * cbSceneParam._m0[33u].y;
        float _4911 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2472 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2412 + _2395) / _2407, (_2414 + _2399) / _2407), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2414 + _2395) / _2407, (_2399 - _2412) / _2407), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2395 - _2412) / _2407, (_2399 - _2414) / _2407), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2395 - _2414) / _2407, (_2412 + _2399) / _2407), _2417), 0.0)).x), vec4(0.25)));
        _2479 = 1.0 - (_2472 * cbSceneParam._m0[34u].x);
        _2480 = 1.0 - (_2472 * cbSceneParam._m0[34u].y);
        _2481 = 1.0 - (_2472 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2479 = 1.0;
        _2480 = 1.0;
        _2481 = 1.0;
    }
    float _2545;
    float _2547;
    float _2549;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2533 = fma(_2329, cbSceneParam._m0[63u].w, fma(_2325, cbSceneParam._m0[63u].z, fma(_2321, cbSceneParam._m0[63u].y, _2317 * cbSceneParam._m0[63u].x)));
        float _2534 = fma(_2329, cbSceneParam._m0[60u].w, fma(_2325, cbSceneParam._m0[60u].z, fma(_2321, cbSceneParam._m0[60u].y, _2317 * cbSceneParam._m0[60u].x))) / _2533;
        float _2535 = fma(_2329, cbSceneParam._m0[61u].w, fma(_2325, cbSceneParam._m0[61u].z, fma(_2321, cbSceneParam._m0[61u].y, _2317 * cbSceneParam._m0[61u].x))) / _2533;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2534 >= cbSceneParam._m0[64u].x) && (_2535 >= cbSceneParam._m0[64u].y)) && (_2534 <= cbSceneParam._m0[64u].z)) && (_2535 <= cbSceneParam._m0[64u].w))
        {
            float _2673 = fma(_2329, cbSceneParam._m0[62u].w, fma(_2325, cbSceneParam._m0[62u].z, fma(_2321, cbSceneParam._m0[62u].y, _2317 * cbSceneParam._m0[62u].x))) / _2533;
            float _2677 = isnan(cbSceneParam._m0[41u].w) ? _2673 : (isnan(_2673) ? cbSceneParam._m0[41u].w : max(_2673, cbSceneParam._m0[41u].w));
            float _2720 = (cbSceneParam._m0[33u].x - sqrt(((_2331 * _2331) + (_2330 * _2330)) + (_2332 * _2332))) * cbSceneParam._m0[33u].y;
            float _4927 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
            float _2727 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2534, cbSceneParam._m0[33u].w + _2535), _2677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2534, _2535 - cbSceneParam._m0[33u].z), _2677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2534 - cbSceneParam._m0[33u].z, _2535 - cbSceneParam._m0[33u].w), _2677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2534 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2535), _2677), 0.0)).x), vec4(0.25)));
            float _2731 = 1.0 - (_2727 * cbSceneParam._m0[34u].x);
            float _2732 = 1.0 - (_2727 * cbSceneParam._m0[34u].y);
            float _2733 = 1.0 - (_2727 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2733) ? _2481 : (isnan(_2481) ? _2733 : min(_2481, _2733));
            frontier_phi_37_36_ladder_1 = isnan(_2732) ? _2480 : (isnan(_2480) ? _2732 : min(_2480, _2732));
            frontier_phi_37_36_ladder_2 = isnan(_2731) ? _2479 : (isnan(_2479) ? _2731 : min(_2479, _2731));
        }
        else
        {
            frontier_phi_37_36_ladder = _2481;
            frontier_phi_37_36_ladder_1 = _2480;
            frontier_phi_37_36_ladder_2 = _2479;
        }
        _2545 = frontier_phi_37_36_ladder_2;
        _2547 = frontier_phi_37_36_ladder_1;
        _2549 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2545 = _2479;
        _2547 = _2480;
        _2549 = _2481;
    }
    uvec4 _2554 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2556 = _2554.x * 14u;
    uint _2557 = _2556 + 13u;
    float _2564 = _1226 + (-1.0);
    float _2569 = (cbLight._m0[_2557].x * _2564) + 1.0;
    float _2570 = (cbLight._m0[_2557].y * _2564) + 1.0;
    float _2571 = (cbLight._m0[_2557].z * _2564) + 1.0;
    float _2572 = (cbLight._m0[_2557].w * _2564) + 1.0;
    uint _2573 = _2556 + 5u;
    float _2579 = isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0));
    uint _2583 = _2556 + 4u;
    float _2592 = isnan(1.0) ? _2569 : (isnan(_2569) ? 1.0 : min(_2569, 1.0));
    uint _2596 = _2556 | 1u;
    float _2607 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_1049, _1050, _1051));
    float _2610 = dot(vec3(cbLight._m0[_2596].xyz), vec3(_1049, _1050, _1051));
    float _4963 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _4974 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2615 = (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * 0.3183098733425140380859375;
    float _2617 = (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0))) * 0.3183098733425140380859375;
    float _2624 = ((cbLight._m0[_2573].x * _2579) * _2617) + (((cbLight._m0[_2583].x * _2545) * _2592) * _2615);
    float _2625 = ((_2579 * cbLight._m0[_2573].y) * _2617) + (((cbLight._m0[_2583].y * _2547) * _2592) * _2615);
    float _2626 = ((_2579 * cbLight._m0[_2573].z) * _2617) + (((cbLight._m0[_2583].z * _2549) * _2592) * _2615);
    uvec4 _2630 = floatBitsToUint(cbLight._m0[_2556 + 12u]);
    bool _2632 = _2630.x == 0u;
    float _2734;
    float _2736;
    float _2738;
    if (_2632)
    {
        _2734 = _2624;
        _2736 = _2625;
        _2738 = _2626;
    }
    else
    {
        uint _2742 = _2556 + 6u;
        float _2758 = (dot(vec3(cbLight._m0[_2556 + 2u].xyz), vec3(_1049, _1050, _1051)) * 0.5) + 0.5;
        float _2759 = _2758 * _2758;
        float _4985 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2760 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
        float _2761 = isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0));
        _2734 = (((cbLight._m0[_2742].x * 0.3183098733425140380859375) * _2760) * _2761) + _2624;
        _2736 = (((cbLight._m0[_2742].y * 0.3183098733425140380859375) * _2760) * _2761) + _2625;
        _2738 = (((cbLight._m0[_2742].z * 0.3183098733425140380859375) * _2760) * _2761) + _2626;
    }
    bool _2741 = _2630.y == 0u;
    float _2796;
    float _2798;
    float _2800;
    if (_2741)
    {
        _2796 = _2734;
        _2798 = _2736;
        _2800 = _2738;
    }
    else
    {
        uint _2969 = _2556 + 7u;
        float _2985 = (dot(vec3(cbLight._m0[_2556 + 3u].xyz), vec3(_1049, _1050, _1051)) * 0.5) + 0.5;
        float _2986 = _2985 * _2985;
        float _5001 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2987 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
        float _2988 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
        _2796 = (((cbLight._m0[_2969].x * 0.3183098733425140380859375) * _2987) * _2988) + _2734;
        _2798 = (((cbLight._m0[_2969].y * 0.3183098733425140380859375) * _2987) * _2988) + _2736;
        _2800 = (((cbLight._m0[_2969].z * 0.3183098733425140380859375) * _2987) * _2988) + _2738;
    }
    uint _2803 = _2556 + 8u;
    float _2816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _1052) * 0.949999988079071044921875);
    float _2817 = _2816 * _2816;
    float _2818 = cbLight._m0[_2556].x + _1128;
    float _2819 = cbLight._m0[_2556].y + _1129;
    float _2820 = cbLight._m0[_2556].z + _1130;
    float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
    float _2825 = _2824 * _2818;
    float _2826 = _2824 * _2819;
    float _2827 = _2824 * _2820;
    float _2828 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2556].xyz));
    float _5017 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2831 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
    float _5028 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _2832 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
    float _2833 = dot(vec3(_1049, _1050, _1051), vec3(_2825, _2826, _2827));
    float _5039 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2836 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
    float _2837 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2825, _2826, _2827));
    float _5050 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2841 = _2817 * _2817;
    float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
    float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) * 5.0);
    float _2854 = 0.959999978542327880859375 - _1207;
    float _2856 = 0.959999978542327880859375 - _1208;
    float _2857 = 0.959999978542327880859375 - _1209;
    float _2864 = 1.0 - _2817;
    float _2875 = (0.5 / (((_2832 * ((_2831 * _2864) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2832 * _2864) + _2817) * _2831))) * _2831;
    float _5061 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
    float _2877 = (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
    uint _2891 = _2556 + 9u;
    float _2902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2596].w)) * _1052) * 0.949999988079071044921875);
    float _2903 = _2902 * _2902;
    float _2904 = cbLight._m0[_2596].x + _1128;
    float _2905 = cbLight._m0[_2596].y + _1129;
    float _2906 = cbLight._m0[_2596].z + _1130;
    float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
    float _2911 = _2910 * _2904;
    float _2912 = _2910 * _2905;
    float _2913 = _2910 * _2906;
    float _2914 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2596].xyz));
    float _5072 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
    float _2917 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
    float _2918 = dot(vec3(_1049, _1050, _1051), vec3(_2911, _2912, _2913));
    float _5083 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
    float _2921 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
    float _2922 = dot(vec3(cbLight._m0[_2596].xyz), vec3(_2911, _2912, _2913));
    float _5094 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    float _2926 = _2903 * _2903;
    float _2930 = ((_2921 * _2921) * (_2926 + (-1.0))) + 1.0;
    float _2937 = exp2(log2(1.0 - (isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0)))) * 5.0);
    float _2944 = 1.0 - _2903;
    float _2954 = (0.5 / (((_2832 * ((_2917 * _2944) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2832 * _2944) + _2903) * _2917))) * _2917;
    float _5105 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
    float _2956 = (isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_2926 / ((_2930 * _2930) * 3.141590118408203125));
    float _2966 = (((((_2937 * _2854) + _1210) * cbLight._m0[_2891].x) * _2956) * _2579) + ((((cbLight._m0[_2803].x * _2545) * ((_2853 * _2854) + _1210)) * _2877) * _2592);
    float _2967 = (((((_2937 * _2856) + _1212) * cbLight._m0[_2891].y) * _2956) * _2579) + ((((cbLight._m0[_2803].y * _2547) * ((_2853 * _2856) + _1212)) * _2877) * _2592);
    float _2968 = (((((_2937 * _2857) + _1213) * cbLight._m0[_2891].z) * _2956) * _2579) + ((((cbLight._m0[_2803].z * _2549) * ((_2853 * _2857) + _1213)) * _2877) * _2592);
    float _3024;
    float _3026;
    float _3028;
    if (_2632)
    {
        _3024 = _2966;
        _3026 = _2967;
        _3028 = _2968;
    }
    else
    {
        uint _3030 = _2556 + 2u;
        uint _3034 = _2556 + 10u;
        float _3048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3030].w)) * _1052) * 0.949999988079071044921875);
        float _3049 = _3048 * _3048;
        float _3050 = cbLight._m0[_3030].x + _1128;
        float _3051 = cbLight._m0[_3030].y + _1129;
        float _3052 = cbLight._m0[_3030].z + _1130;
        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
        float _3057 = _3056 * _3050;
        float _3058 = _3056 * _3051;
        float _3059 = _3056 * _3052;
        float _3060 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_3030].xyz));
        float _5116 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3063 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
        float _3064 = dot(vec3(_1049, _1050, _1051), vec3(_3057, _3058, _3059));
        float _5127 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3067 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
        float _3068 = dot(vec3(cbLight._m0[_3030].xyz), vec3(_3057, _3058, _3059));
        float _5138 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3072 = _3049 * _3049;
        float _3076 = ((_3067 * _3067) * (_3072 + (-1.0))) + 1.0;
        float _3083 = exp2(log2(1.0 - (isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0)))) * 5.0);
        float _3090 = 1.0 - _3049;
        float _3100 = (0.5 / (((_2832 * ((_3063 * _3090) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_2832 * _3090) + _3049) * _3063))) * _3063;
        float _5149 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3102 = (isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0))) * (_3072 / ((_3076 * _3076) * 3.141590118408203125));
        float _3103 = isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0));
        _3024 = (((((_3083 * _2854) + _1210) * cbLight._m0[_3034].x) * _3102) * _3103) + _2966;
        _3026 = (((((_3083 * _2856) + _1212) * cbLight._m0[_3034].y) * _3102) * _3103) + _2967;
        _3028 = (((((_3083 * _2857) + _1213) * cbLight._m0[_3034].z) * _3102) * _3103) + _2968;
    }
    float _3134;
    float _3136;
    float _3138;
    if (_2741)
    {
        _3134 = _3024;
        _3136 = _3026;
        _3138 = _3028;
    }
    else
    {
        uint _3145 = _2556 + 3u;
        uint _3149 = _2556 + 11u;
        float _3163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3145].w)) * _1052) * 0.949999988079071044921875);
        float _3164 = _3163 * _3163;
        float _3165 = cbLight._m0[_3145].x + _1128;
        float _3166 = cbLight._m0[_3145].y + _1129;
        float _3167 = cbLight._m0[_3145].z + _1130;
        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
        float _3172 = _3171 * _3165;
        float _3173 = _3171 * _3166;
        float _3174 = _3171 * _3167;
        float _3175 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_3145].xyz));
        float _5165 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
        float _3178 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
        float _3179 = dot(vec3(_1049, _1050, _1051), vec3(_3172, _3173, _3174));
        float _5176 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
        float _3182 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
        float _3183 = dot(vec3(cbLight._m0[_3145].xyz), vec3(_3172, _3173, _3174));
        float _5187 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
        float _3187 = _3164 * _3164;
        float _3191 = ((_3182 * _3182) * (_3187 + (-1.0))) + 1.0;
        float _3198 = exp2(log2(1.0 - (isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0)))) * 5.0);
        float _3205 = 1.0 - _3164;
        float _3215 = (0.5 / (((_2832 * ((_3178 * _3205) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_2832 * _3205) + _3164) * _3178))) * _3178;
        float _5198 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        float _3217 = (isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3187 / ((_3191 * _3191) * 3.141590118408203125));
        float _3218 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
        _3134 = (((((_3198 * _2854) + _1210) * cbLight._m0[_3149].x) * _3217) * _3218) + _3024;
        _3136 = (((((_3198 * _2856) + _1212) * cbLight._m0[_3149].y) * _3217) * _3218) + _3026;
        _3138 = (((((_3198 * _2857) + _1213) * cbLight._m0[_3149].z) * _3217) * _3218) + _3028;
    }
    float _3284;
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    float _3294;
    if (_2554.y == 0u)
    {
        uvec4 _3239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3240 = _3239.x;
        uint _3251 = uint((float(_3239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1149) / _3240))) + floor(float(uint(cbSceneParam._m0[85u].x * _1148) / _3240)));
        float _3261 = (log2(_2332 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3262 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
        uint _3265 = uint(isnan(14.0) ? _3262 : (isnan(_3262) ? 14.0 : min(_3262, 14.0)));
        uvec4 _3270 = texelFetch(g_lightClusterGridBuffer, int(((_3265 << 2u) + (_3251 << 6u)) >> 2u));
        uint _3271 = _3270.x;
        uint _3272 = _3239.z;
        float _3351;
        float _3353;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        if (((((1u << ((_3272 >> 4u) & 15u)) + 4294967295u) & _3271) == 0u) || ((_3272 & 240u) == 0u))
        {
            _3351 = 0.0;
            _3353 = 0.0;
            _3355 = 0.0;
            _3357 = 0.0;
            _3359 = 0.0;
            _3361 = 0.0;
        }
        else
        {
            float _3352;
            float _3354;
            float _3356;
            float _3358;
            float _3360;
            float _3362;
            float _3504 = 0.0;
            float _3505 = 0.0;
            float _3506 = 0.0;
            float _3507 = 0.0;
            float _3508 = 0.0;
            float _3509 = 0.0;
            uint _3510 = 0u;
            uint _3519;
            bool _3520;
            for (;;)
            {
                _3519 = texelFetch(g_lightClassification, int((((_3265 << 5u) + (_3251 << 9u)) + (_3510 << 2u)) >> 2u)).x;
                _3520 = _3519 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3520)
                {
                    frontier_phi_71_pred = _3509;
                    frontier_phi_71_pred_1 = _3508;
                    frontier_phi_71_pred_2 = _3507;
                    frontier_phi_71_pred_3 = _3506;
                    frontier_phi_71_pred_4 = _3505;
                    frontier_phi_71_pred_5 = _3504;
                }
                else
                {
                    float _3649;
                    float _3650;
                    float _3651;
                    float _3652;
                    float _3653;
                    float _3654;
                    uint _3655;
                    _3649 = _3504;
                    _3650 = _3505;
                    _3651 = _3506;
                    _3652 = _3507;
                    _3653 = _3508;
                    _3654 = _3509;
                    _3655 = _3519;
                    float _3576;
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    float _3581;
                    for (;;)
                    {
                        uint _3659 = uint(findLSB(_3655)) + (_3510 << 5u);
                        uint _3656 = (_3655 + 4294967295u) & _3655;
                        uint _3661 = _3659 * 48u;
                        vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3661)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 3u)).x));
                        uint _3681 = (_3659 * 48u) + 4u;
                        vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3681)).x, texelFetch(g_PointLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3681 + 3u)).x));
                        uint _3700 = (_3659 * 48u) + 8u;
                        vec3 _3711 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3700)).x, texelFetch(g_PointLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3700 + 2u)).x));
                        float _3715 = _3675.x - _2330;
                        float _3716 = _3675.y - _2331;
                        float _3717 = _3675.z - _2332;
                        float _3718 = dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717));
                        float _3721 = inversesqrt(_3718);
                        float _3722 = _3721 * _3715;
                        float _3723 = _3721 * _3716;
                        float _3724 = _3721 * _3717;
                        float _3725 = dot(vec3(_1167, _1170, _1173), vec3(_3722, _3723, _3724));
                        float _3730 = 1.0 - (_3718 * _3675.w);
                        float _5224 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                        float _3731 = isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0));
                        float _3732 = sqrt(_3718) * _3694.w;
                        float _3735 = 1.39999997615814208984375 / (_3732 + 1.39999997615814208984375);
                        float _3736 = _3735 * _3735;
                        float _3739 = ((1.0 - _3736) * _3725) + _3736;
                        float _3742 = _3732 * _3732;
                        float _3746 = ((isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0))) * _3731) / ((_3742 * 0.699999988079071044921875) + 1.0);
                        float _3750 = (-0.0) - _2330;
                        float _3751 = (-0.0) - _2331;
                        float _3752 = (-0.0) - _2332;
                        float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                        float _3757 = _3756 * _3750;
                        float _3758 = _3756 * _3751;
                        float _3759 = _3756 * _3752;
                        float _3766 = exp2(log2(1.0 / ((_3742 * 3.5) + 5.0)) * 0.25);
                        float _3767 = 1.0 - _1242;
                        float _3774 = sqrt(1.0 - ((1.0 - (_3767 * _3767)) * (1.0 - (_3766 * _3766))));
                        float _3775 = _3774 * _3774;
                        float _3776 = _3775 * _3775;
                        float _3777 = _3757 + _3722;
                        float _3778 = _3758 + _3723;
                        float _3779 = _3759 + _3724;
                        float _3783 = inversesqrt(dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779)));
                        float _3787 = dot(vec3(_1167, _1170, _1173), vec3(_3757, _3758, _3759));
                        float _5240 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                        float _3790 = isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0));
                        float _3791 = dot(vec3(_1167, _1170, _1173), vec3(_3783 * _3777, _3783 * _3778, _3783 * _3779));
                        float _5251 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                        float _3794 = isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0));
                        float _3798 = ((_3794 * _3794) * (_3776 + (-1.0))) + 1.0;
                        float _3799 = _3735 * _3775;
                        float _3800 = _3799 * _3799;
                        float _3803 = ((1.0 - _3800) * _3725) + _3800;
                        float _5262 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                        float _3804 = isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0));
                        float _3805 = 1.0 - _3775;
                        float _3815 = (0.5 / (((_3804 * ((_3790 * _3805) + _3775)) + 9.9999999392252902907785028219223e-09) + (((_3804 * _3805) + _3775) * _3790))) * _3804;
                        float _5273 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                        float _3826 = (((_3776 * 3.1415927410125732421875) * (isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0)))) / ((_3798 * _3798) * ((_3742 * 2.1991131305694580078125) + 3.141590118408203125))) * _3731;
                        _3579 = (_3746 * _3694.x) + _3652;
                        _3580 = (_3746 * _3694.y) + _3653;
                        _3581 = (_3746 * _3694.z) + _3654;
                        _3576 = (_3826 * _3711.x) + _3649;
                        _3577 = (_3826 * _3711.y) + _3650;
                        _3578 = (_3826 * _3711.z) + _3651;
                        if (_3656 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3649 = _3576;
                            _3650 = _3577;
                            _3651 = _3578;
                            _3652 = _3579;
                            _3653 = _3580;
                            _3654 = _3581;
                            _3655 = _3656;
                        }
                    }
                    frontier_phi_71_pred = _3581;
                    frontier_phi_71_pred_1 = _3580;
                    frontier_phi_71_pred_2 = _3579;
                    frontier_phi_71_pred_3 = _3578;
                    frontier_phi_71_pred_4 = _3577;
                    frontier_phi_71_pred_5 = _3576;
                }
                _3362 = frontier_phi_71_pred;
                _3360 = frontier_phi_71_pred_1;
                _3358 = frontier_phi_71_pred_2;
                _3356 = frontier_phi_71_pred_3;
                _3354 = frontier_phi_71_pred_4;
                _3352 = frontier_phi_71_pred_5;
                uint _3511 = _3510 + 1u;
                if (_3511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3504 = _3352;
                    _3505 = _3354;
                    _3506 = _3356;
                    _3507 = _3358;
                    _3508 = _3360;
                    _3509 = _3362;
                    _3510 = _3511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3351 = _3352;
            _3353 = _3354;
            _3355 = _3356;
            _3357 = _3358;
            _3359 = _3360;
            _3361 = _3362;
        }
        uvec4 _3365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3366 = _3365.z;
        uint _3368 = (_3366 >> 8u) & 15u;
        float _3472;
        float _3474;
        float _3476;
        float _3478;
        float _3480;
        float _3482;
        if (((4294967295u << _3368) & _3271) == 0u)
        {
            _3472 = _3351;
            _3474 = _3353;
            _3476 = _3355;
            _3478 = _3357;
            _3480 = _3359;
            _3482 = _3361;
        }
        else
        {
            float _3497 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
            float _3498 = _3497 * _2330;
            float _3499 = _3497 * _2331;
            float _3500 = _3497 * _2332;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3368 < ((_3366 >> 12u) & 15u))
            {
                float _3473;
                float _3475;
                float _3477;
                float _3479;
                float _3481;
                float _3483;
                float _3632 = _3351;
                float _3633 = _3353;
                float _3634 = _3355;
                float _3635 = _3357;
                float _3636 = _3359;
                float _3637 = _3361;
                uint _3638 = _3368;
                uint _3647;
                bool _3648;
                for (;;)
                {
                    _3647 = texelFetch(g_lightClassification, int((((_3265 << 5u) + (_3251 << 9u)) + (_3638 << 2u)) >> 2u)).x;
                    _3648 = _3647 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3648)
                    {
                        frontier_phi_82_pred = _3637;
                        frontier_phi_82_pred_1 = _3636;
                        frontier_phi_82_pred_2 = _3635;
                        frontier_phi_82_pred_3 = _3634;
                        frontier_phi_82_pred_4 = _3633;
                        frontier_phi_82_pred_5 = _3632;
                    }
                    else
                    {
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _4133;
                        float _4134;
                        float _4135;
                        float _4136;
                        float _4137;
                        float _4138;
                        float _3853 = _3632;
                        float _3854 = _3633;
                        float _3855 = _3634;
                        float _3856 = _3635;
                        float _3857 = _3636;
                        float _3858 = _3637;
                        uint _3859 = _3647;
                        uint _3860;
                        vec4 _3885;
                        float _3886;
                        vec4 _3901;
                        vec3 _3913;
                        vec4 _3928;
                        vec4 _3943;
                        float _3989;
                        bool _3990;
                        for (;;)
                        {
                            uint _3870 = ((_3638 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3859));
                            _3860 = (_3859 + 4294967295u) & _3859;
                            uint _3872 = _3870 * 40u;
                            _3885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 3u)).x));
                            _3886 = _3885.w;
                            uint _3888 = (_3870 * 40u) + 4u;
                            _3901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 3u)).x));
                            uint _3903 = (_3870 * 40u) + 8u;
                            _3913 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3903 + 2u)).x));
                            uint _3915 = (_3870 * 40u) + 16u;
                            _3928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 3u)).x));
                            uint _3930 = (_3870 * 40u) + 20u;
                            _3943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 3u)).x));
                            uint _3945 = (_3870 * 40u) + 24u;
                            vec4 _3958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3945 + 3u)).x));
                            uint _3964 = (_3870 * 40u) + 28u;
                            vec4 _3977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 3u)).x));
                            _3989 = fma(_2332, _3977.z, fma(_2331, _3977.y, _3977.x * _2330)) + _3977.w;
                            _3990 = !((fma(_2332, _3958.z, fma(_2331, _3958.y, _3958.x * _2330)) + _3958.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3990)
                            {
                                float _4017 = _3885.x - _2330;
                                float _4018 = _3885.y - _2331;
                                float _4019 = _3885.z - _2332;
                                float _4020 = dot(vec3(_4017, _4018, _4019), vec3(_4017, _4018, _4019));
                                float _4023 = inversesqrt(_4020);
                                float _4024 = _4023 * _4017;
                                float _4025 = _4023 * _4018;
                                float _4026 = _4023 * _4019;
                                float _4030 = 1.0 - (_4020 / (_3886 * _3886));
                                float _5284 = isnan(0.0) ? _4030 : (isnan(_4030) ? 0.0 : max(_4030, 0.0));
                                float _4031 = isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0));
                                float _4035 = sqrt(_4020) * _3901.w;
                                float _4037 = 1.39999997615814208984375 / (_4035 + 1.39999997615814208984375);
                                float _4038 = _4037 * _4037;
                                float _4041 = ((1.0 - _4038) * dot(vec3(_4024, _4025, _4026), vec3(_1167, _1170, _1173))) + _4038;
                                float _4044 = _4035 * _4035;
                                float _4048 = (fma(_2332, _3928.z, fma(_2331, _3928.y, _3928.x * _2330)) + _3928.w) / _3989;
                                float _4049 = (fma(_2332, _3943.z, fma(_2331, _3943.y, _3943.x * _2330)) + _3943.w) / _3989;
                                float _4053 = 1.0 - dot(vec2(_4048, _4049), vec2(_4048, _4049));
                                float _5300 = isnan(0.0) ? _4053 : (isnan(_4053) ? 0.0 : max(_4053, 0.0));
                                float _4054 = isnan(1.0) ? _5300 : (isnan(_5300) ? 1.0 : min(_5300, 1.0));
                                float _4055 = _4054 * (((isnan(0.0) ? _4041 : (isnan(_4041) ? 0.0 : max(_4041, 0.0))) * _4031) / ((_4044 * 0.699999988079071044921875) + 1.0));
                                float _4067 = exp2(log2(1.0 / ((_4044 * 3.5) + 5.0)) * 0.25);
                                float _4068 = 1.0 - _1242;
                                float _4075 = sqrt(1.0 - ((1.0 - (_4068 * _4068)) * (1.0 - (_4067 * _4067))));
                                float _4076 = _4075 * _4075;
                                float _4077 = _4076 * _4076;
                                float _4078 = _4024 - _3498;
                                float _4079 = _4025 - _3499;
                                float _4080 = _4026 - _3500;
                                float _4084 = inversesqrt(dot(vec3(_4078, _4079, _4080), vec3(_4078, _4079, _4080)));
                                float _4088 = dot(vec3(_1167, _1170, _1173), vec3((-0.0) - _3498, (-0.0) - _3499, (-0.0) - _3500));
                                float _5311 = isnan(0.0) ? _4088 : (isnan(_4088) ? 0.0 : max(_4088, 0.0));
                                float _4091 = isnan(1.0) ? _5311 : (isnan(_5311) ? 1.0 : min(_5311, 1.0));
                                float _4092 = dot(vec3(_1167, _1170, _1173), vec3(_4084 * _4078, _4084 * _4079, _4084 * _4080));
                                float _5322 = isnan(0.0) ? _4092 : (isnan(_4092) ? 0.0 : max(_4092, 0.0));
                                float _4095 = isnan(1.0) ? _5322 : (isnan(_5322) ? 1.0 : min(_5322, 1.0));
                                float _4099 = ((_4095 * _4095) * (_4077 + (-1.0))) + 1.0;
                                float _4100 = _4037 * _4076;
                                float _4101 = _4100 * _4100;
                                float _4107 = ((1.0 - _4101) * dot(vec3(_1167, _1170, _1173), vec3(_4024, _4025, _4026))) + _4101;
                                float _5333 = isnan(0.0) ? _4107 : (isnan(_4107) ? 0.0 : max(_4107, 0.0));
                                float _4108 = isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0));
                                float _4109 = 1.0 - _4076;
                                float _4119 = (0.5 / (((_4108 * ((_4091 * _4109) + _4076)) + 9.9999999392252902907785028219223e-09) + (((_4108 * _4109) + _4076) * _4091))) * _4108;
                                float _5344 = isnan(0.0) ? _4119 : (isnan(_4119) ? 0.0 : max(_4119, 0.0));
                                float _4129 = (_4054 * _4031) * (((_4077 * 3.1415927410125732421875) * (isnan(1.0) ? _5344 : (isnan(_5344) ? 1.0 : min(_5344, 1.0)))) / ((_4099 * _4099) * ((_4044 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4055 * _3901.z;
                                frontier_phi_88_pred_1 = _4055 * _3901.y;
                                frontier_phi_88_pred_2 = _4055 * _3901.x;
                                frontier_phi_88_pred_3 = _4129 * _3913.z;
                                frontier_phi_88_pred_4 = _4129 * _3913.y;
                                frontier_phi_88_pred_5 = _4129 * _3913.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4138 = frontier_phi_88_pred;
                            _4137 = frontier_phi_88_pred_1;
                            _4136 = frontier_phi_88_pred_2;
                            _4135 = frontier_phi_88_pred_3;
                            _4134 = frontier_phi_88_pred_4;
                            _4133 = frontier_phi_88_pred_5;
                            _3843 = _4136 + _3856;
                            _3844 = _4137 + _3857;
                            _3845 = _4138 + _3858;
                            _3840 = _4133 + _3853;
                            _3841 = _4134 + _3854;
                            _3842 = _4135 + _3855;
                            if (_3860 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3853 = _3840;
                                _3854 = _3841;
                                _3855 = _3842;
                                _3856 = _3843;
                                _3857 = _3844;
                                _3858 = _3845;
                                _3859 = _3860;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3845;
                        frontier_phi_82_pred_1 = _3844;
                        frontier_phi_82_pred_2 = _3843;
                        frontier_phi_82_pred_3 = _3842;
                        frontier_phi_82_pred_4 = _3841;
                        frontier_phi_82_pred_5 = _3840;
                    }
                    _3483 = frontier_phi_82_pred;
                    _3481 = frontier_phi_82_pred_1;
                    _3479 = frontier_phi_82_pred_2;
                    _3477 = frontier_phi_82_pred_3;
                    _3475 = frontier_phi_82_pred_4;
                    _3473 = frontier_phi_82_pred_5;
                    uint _3639 = _3638 + 1u;
                    if (_3639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3632 = _3473;
                        _3633 = _3475;
                        _3634 = _3477;
                        _3635 = _3479;
                        _3636 = _3481;
                        _3637 = _3483;
                        _3638 = _3639;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3479;
                frontier_phi_63_64_ladder_1 = _3483;
                frontier_phi_63_64_ladder_2 = _3481;
                frontier_phi_63_64_ladder_3 = _3477;
                frontier_phi_63_64_ladder_4 = _3475;
                frontier_phi_63_64_ladder_5 = _3473;
            }
            else
            {
                frontier_phi_63_64_ladder = _3357;
                frontier_phi_63_64_ladder_1 = _3361;
                frontier_phi_63_64_ladder_2 = _3359;
                frontier_phi_63_64_ladder_3 = _3355;
                frontier_phi_63_64_ladder_4 = _3353;
                frontier_phi_63_64_ladder_5 = _3351;
            }
            _3472 = frontier_phi_63_64_ladder_5;
            _3474 = frontier_phi_63_64_ladder_4;
            _3476 = frontier_phi_63_64_ladder_3;
            _3478 = frontier_phi_63_64_ladder;
            _3480 = frontier_phi_63_64_ladder_2;
            _3482 = frontier_phi_63_64_ladder_1;
        }
        float _3487 = isnan(1.0) ? _1226 : (isnan(_1226) ? 1.0 : min(_1226, 1.0));
        _3284 = (_3487 * _3478) + _2796;
        _3286 = (_3487 * _3480) + _2798;
        _3288 = (_3487 * _3482) + _2800;
        _3290 = ((_3472 * _1210) * _3487) + _3134;
        _3292 = ((_3474 * _1212) * _3487) + _3136;
        _3294 = ((_3476 * _1213) * _3487) + _3138;
    }
    else
    {
        _3284 = _2796;
        _3286 = _2798;
        _3288 = _2800;
        _3290 = _3134;
        _3292 = _3136;
        _3294 = _3138;
    }
    float _5360 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _5371 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _5382 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _3311 = ((isnan(1.0) ? _5360 : (isnan(_5360) ? 1.0 : min(_5360, 1.0))) * (_3284 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1226))) + ((_3290 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    float _3312 = ((isnan(1.0) ? _5371 : (isnan(_5371) ? 1.0 : min(_5371, 1.0))) * (_3286 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1226))) + ((_3292 + ((isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    float _3313 = ((isnan(1.0) ? _5382 : (isnan(_5382) ? 1.0 : min(_5382, 1.0))) * (_3288 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1226))) + ((_3294 + ((isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    uint _3314 = _301 + 6u;
    float _3322 = _1148 / cbSceneParam._m0[86u].x;
    float _3323 = _1149 / cbSceneParam._m0[86u].y;
    vec4 _3337 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3322, _3323, (log2((isnan(cbSceneParam._m0[77u].w) ? _1071 : (isnan(_1071) ? cbSceneParam._m0[77u].w : min(_1071, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3339 = _3337.x;
    float _3340 = _3337.y;
    float _3341 = _3337.z;
    float _3342 = _3337.w;
    float _3414;
    float _3416;
    float _3418;
    float _3420;
    if (_1071 > cbSceneParam._m0[78u].w)
    {
        float _3376 = isnan(_1071) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1071 : min(cbSceneParam._m0[80u].w, _1071));
        float _3377 = _3376 / _1071;
        float _3388 = _3377 * _1121;
        float _3389 = _1122 * _3377;
        float _3390 = (-0.0) - _3389;
        float _3392 = _3377 * _1123;
        float _3394 = (cbSceneParam._m0[77u].w * _3390) / _3376;
        float _3395 = _3394 + cbSceneParam._m0[79u].w;
        float _3396 = cbSceneParam._m0[79u].w - _3389;
        float _3402 = sqrt(((_3388 * _3388) + (_3389 * _3389)) + (_3392 * _3392));
        float _3405 = (1.0 - (cbSceneParam._m0[77u].w / _3376)) * _3402;
        float _3410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3589;
        if (abs((_3390 - _3394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3589 = ((((_3395 > 0.0) ? exp2(_3410 * _3395) : (2.0 - exp2(_3412 * _3395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3405;
        }
        else
        {
            float _3533 = 1.0 / cbSceneParam._m0[80u].x;
            float _3534 = isnan(_3396) ? _3395 : (isnan(_3395) ? _3396 : max(_3395, _3396));
            float _3535 = isnan(_3396) ? _3395 : (isnan(_3395) ? _3396 : min(_3395, _3396));
            float _3544 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : min(_3534, 0.0));
            float _3545 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : min(_3535, 0.0));
            _3589 = ((abs(_3402 / _3390) * cbSceneParam._m0[80u].y) * ((((_3544 - _3545) * 2.0) - ((exp2(_3410 * (isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0)))) - exp2(_3410 * (isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))))) * _3533)) - ((exp2(_3412 * _3544) - exp2(_3412 * _3545)) * _3533))) + (_3405 * cbSceneParam._m0[80u].z);
        }
        vec4 _3591 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3322, _3323, 1.0), 0.0);
        float _3600 = exp2((_3589 * (-1.44269502162933349609375)) * (1.0 - _3591.w));
        float _3601 = log2(_3600);
        float _3617 = log2(_3342);
        _3414 = (exp2(_3617 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3601 * cbSceneParam._m0[78u].x)) * _3591.x) / cbSceneParam._m0[78u].x)) + _3339;
        _3416 = (exp2(_3617 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3601 * cbSceneParam._m0[78u].y)) * _3591.y) / cbSceneParam._m0[78u].y)) + _3340;
        _3418 = (exp2(_3617 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3601 * cbSceneParam._m0[78u].z)) * _3591.z) / cbSceneParam._m0[78u].z)) + _3341;
        _3420 = _3600 * _3342;
    }
    else
    {
        _3414 = _3339;
        _3416 = _3340;
        _3418 = _3341;
        _3420 = _3342;
    }
    bool _3627;
    vec4 _3430;
    vec4 _3452;
    float _3454;
    float _3458;
    float _3459;
    float _3460;
    float _3461;
    bool _3471;
    for (;;)
    {
        _3430 = cbMatDynParam._m0[0u];
        float _3432 = roundEven(_3430.y);
        bool _3433 = _3432 == 3.0;
        float _3434 = log2(_3420);
        float _3441 = exp2(_3434 * cbSceneParam._m0[78u].x) * _3311;
        float _3442 = exp2(_3434 * cbSceneParam._m0[78u].y) * _3312;
        float _3443 = exp2(_3434 * cbSceneParam._m0[78u].z) * _3313;
        float _3450 = _1137 + (-0.5);
        _3452 = cbMtdParam._m0[1u];
        _3454 = _3452.y * _3450;
        float _3457 = (_3432 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3458 = _3457 * (_3433 ? _3441 : (_3441 + (cbSceneParam._m0[72u].w * _3414)));
        _3459 = _3457 * (_3433 ? _3442 : (_3442 + (cbSceneParam._m0[72u].w * _3416)));
        _3460 = _3457 * (_3433 ? _3443 : (_3443 + (cbSceneParam._m0[72u].w * _3418)));
        _3461 = _3450 * 0.999000012874603271484375;
        _3471 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3471)
        {
            if ((cbInstanceData._m0[_301 + 7u].x + _3461) < 0.5)
            {
                _3627 = true;
                break;
            }
        }
        uint _3568 = _1186 + uint(_3430.w);
        if ((cbInstanceData._m0[_3568].w < 1.0) && ((cbInstanceData._m0[_3568].w + _3461) < 0.5))
        {
            _3627 = true;
            break;
        }
        if ((_3454 + 1.0) < _3452.x)
        {
            _3627 = true;
            break;
        }
        _3627 = false;
        break;
    }
    float _3831;
    if (_3627)
    {
        discard_state = true;
        _3831 = 0.0;
    }
    else
    {
        _3831 = cbInstanceData._m0[_3314].w;
    }
    SV_Target.x = _3458;
    SV_Target.y = _3459;
    SV_Target.z = _3460;
    SV_Target.w = _3831;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3314].w;
    discard_exit();
}


