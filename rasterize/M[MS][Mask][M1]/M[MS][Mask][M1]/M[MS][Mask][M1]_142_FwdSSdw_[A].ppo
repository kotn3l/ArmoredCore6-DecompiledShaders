#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1552;
float _3953;
float _3954;
float _3955;
float _3956;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3965 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3976 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _561 = _559.x;
    float _571 = dot(vec4(_561, _559.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _583 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _370.z) * 2.0) - ((((_561 - _571) * cbMtdParam._m0[23u].w) + _571) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3987 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _597 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_584 * ((_542.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _600 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_584 * ((_542.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _603 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_584 * ((_542.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _662 = _658.z;
    float _669 = ((_641.x - _660) * _441) + _660;
    float _670 = ((_641.y - _661) * _441) + _661;
    float _671 = ((_641.z - _662) * _441) + _662;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _694 = ((_683.x - _669) * _514) + _669;
    float _695 = ((_683.y - _670) * _514) + _670;
    float _696 = ((_683.z - _671) * _514) + _671;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _721 = ((_708.z - _696) * _584) + _696;
    float _724 = ((((_708.x - _694) * _584) + _694) * 2.0) + (-1.0);
    float _726 = ((((_708.y - _695) * _584) + _695) * 2.0) + (-1.0);
    float _727 = dot(vec2(_724, _726), vec2(_724, _726));
    float _3998 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _732 = sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _758 = (((_746.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _724;
    float _759 = (((_746.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _726;
    float _762 = fma(_732, _248, fma(_759, _255, _758 * _241));
    float _765 = fma(_732, _249, fma(_759, _256, _758 * _242));
    float _768 = fma(_732, _250, fma(_759, _257, _758 * _243));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _810 = (cbMtdParam._m0[19u].x + dot(vec4(_772 * _762, _772 * _765, _772 * _768, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_801 - _802) * cbMtdParam._m0[24u].z) + _802) * cbMtdParam._m0[21u].z);
    float _4009 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _811 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _818 = (_811 * ((_621.x * cbMtdParam._m0[18u].x) - _597)) + _597;
    float _819 = (_811 * ((_621.y * cbMtdParam._m0[18u].y) - _600)) + _600;
    float _820 = (_811 * ((_621.z * cbMtdParam._m0[18u].z) - _603)) + _603;
    vec4 _846 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _848 = _846.x;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _848) * _441) + _848;
    float _882 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _865) * _514) + _865;
    float _900 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _882) * _584) + _882;
    float _904 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _900) * cbMtdParam._m0[19u].z) + _900;
    float _906 = _904 - (_904 * _811);
    float _910 = (cbMtdParam._m0[19u].w * (_746.z - _721)) + _721;
    vec4 _923 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _930 = (_923.x * 2.0) + (-1.0);
    float _931 = (_923.y * 2.0) + (-1.0);
    float _932 = dot(vec2(_930, _931), vec2(_930, _931));
    float _4020 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _940 = ((_923.z - _910) * _811) + _910;
    float _950 = ((sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) - _732) * _811) + _732;
    float _953 = (((_930 - _758) * _811) + _758) + (cbMtdParam._m0[21u].x * _758);
    float _954 = (((_931 - _759) * _811) + _759) + (cbMtdParam._m0[21u].x * _759);
    float _958 = cbMtdParam._m0[22u].x + _746.w;
    float _961 = fma(_950, _248, fma(_954, _255, _953 * _241));
    float _964 = fma(_950, _249, fma(_954, _256, _953 * _242));
    float _967 = fma(_950, _250, fma(_954, _257, _953 * _243));
    float _971 = inversesqrt(dot(vec3(_961, _964, _967), vec3(_961, _964, _967)));
    float _972 = _971 * _961;
    float _973 = _971 * _964;
    float _974 = _971 * _967;
    float _4031 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _975 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4053 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4064 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4075 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4086 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _980 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _994 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1044 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1034);
    float _1045 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1034);
    float _1046 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1034);
    float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
    float _1051 = _1044 * _1050;
    float _1052 = _1045 * _1050;
    float _1053 = _1046 * _1050;
    vec4 _1058 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1060 = _1058.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1232 = sqrt(((_1044 * _1044) + (_1045 * _1045)) + (_1046 * _1046));
        float _1238 = (cbMatDynParam._m0[5u].x * _1232) + cbMatDynParam._m0[5u].y;
        float _4097 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1243 = (cbMatDynParam._m0[5u].z * _1232) + cbMatDynParam._m0[5u].w;
        float _4108 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) - _1239)) + _1239) < ((_1060 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1071 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1072 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1090 = fma(_974, cbSceneParam._m0[5u].z, fma(_973, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _972));
    float _1093 = fma(_974, cbSceneParam._m0[6u].z, fma(_973, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _972));
    float _1096 = fma(_974, cbSceneParam._m0[7u].z, fma(_973, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _972));
    uint _1109 = _260 + 9u;
    uint _1110 = _1109 + uint(cbMatDynParam._m0[0u].w);
    float _1116 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_1110].x;
    float _1117 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_1110].y;
    float _1118 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_1110].z;
    float _4119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1120 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1122 = 1.0 - _980;
    float _1123 = _1119 * _1122;
    float _1124 = _1120 * _1122;
    float _1125 = _1121 * _1122;
    float _1130 = (_1119 + (-0.039999999105930328369140625)) * _980;
    float _1131 = (_1120 + (-0.039999999105930328369140625)) * _980;
    float _1132 = (_1121 + (-0.039999999105930328369140625)) * _980;
    float _1133 = _1130 + 0.039999999105930328369140625;
    float _1135 = _1131 + 0.039999999105930328369140625;
    float _1136 = _1132 + 0.039999999105930328369140625;
    vec4 _1145 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1071, cbSceneParam._m0[86u].y * _1072));
    float _1149 = ((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * TEXCOORD_5.w) * _1145.x;
    float _1150 = dot(vec3(_972, _973, _974), vec3(_1051, _1052, _1053));
    float _1153 = _1150 * 2.0;
    float _1157 = (_1153 * _972) - _1051;
    float _1158 = (_1153 * _973) - _1052;
    float _1159 = (_1153 * _974) - _1053;
    float _1163 = abs(dot(vec3(_1051, _1052, _1053), vec3(_972, _973, _974)));
    float _4152 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1165 = sqrt(_975);
    float _1178 = exp2((_1165 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1165 * 3.0));
    float _1184 = (1.0 - _1178) * ((_1165 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1185 = _1178 * _1165;
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1276 = fma(_1221, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213));
        float _1280 = fma(_1221, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213));
        float _1284 = fma(_1221, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213));
        float _1309 = _1213 + _972;
        float _1310 = _1217 + _973;
        float _1311 = _1221 + _974;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1276;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1280;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1284;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1276 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1280 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1284 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_972, _973, _974), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4200 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_972, _973, _974), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4233 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_972, _973, _974), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4266 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1592 = fma(_1221, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213));
        float _1596 = fma(_1221, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213));
        float _1600 = fma(_1221, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213));
        float _1623 = _1213 + _972;
        float _1624 = _1217 + _973;
        float _1625 = _1221 + _974;
        float _1635 = fma(_1625, cbModelParam._m0[30u].z, fma(_1624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1623)) - _1592;
        float _1636 = fma(_1625, cbModelParam._m0[31u].z, fma(_1624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1623)) - _1596;
        float _1637 = fma(_1625, cbModelParam._m0[32u].z, fma(_1624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1623)) - _1600;
        float _1641 = inversesqrt(dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637)));
        float _1654 = ((_1641 * _1635) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1592 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1655 = ((_1641 * _1636) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1596 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1641 * _1637) / cbModelParam._m0[35u].z) + ((((((_1600 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        float _1691 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1658.x + (-0.5));
        float _1693 = _1691 * (_1658.y + (-0.5));
        float _1694 = _1691 * (_1658.z + (-0.5));
        float _1701 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1665.x + (-0.5));
        float _1703 = _1701 * (_1665.y + (-0.5));
        float _1704 = _1701 * (_1665.z + (-0.5));
        float _1711 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1672.x + (-0.5));
        float _1713 = _1711 * (_1672.y + (-0.5));
        float _1714 = _1711 * (_1672.z + (-0.5));
        float _1721 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1679.x + (-0.5));
        float _1723 = _1721 * (_1679.y + (-0.5));
        float _1724 = _1721 * (_1679.z + (-0.5));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = _1692 * 0.5;
        float _1729 = _1702 * 0.5;
        float _1730 = _1712 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_972, _973, _974), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4329 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1755 + 1.0))) + _1760) * _1725;
        float _1770 = _1693 * 0.5;
        float _1771 = _1703 * 0.5;
        float _1772 = _1713 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_972, _973, _974), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4362 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1797 + 1.0))) + _1802) * _1726;
        float _1812 = _1694 * 0.5;
        float _1813 = _1704 * 0.5;
        float _1814 = _1714 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_972, _973, _974), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4395 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1839 + 1.0))) + _1844) * _1727;
        _1861 = _1694;
        _1862 = _1693;
        _1863 = _1692;
        _1864 = _1704;
        _1865 = _1703;
        _1866 = _1702;
        _1867 = _1714;
        _1868 = _1713;
        _1869 = _1712;
        _1870 = _1727;
        _1871 = _1726;
        _1872 = _1725;
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
    }
    else
    {
        _1861 = _1552;
        _1862 = _1552;
        _1863 = _1552;
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = _1552;
        _1872 = _1552;
        _1873 = 0.0;
        _1874 = 0.0;
        _1875 = 0.0;
    }
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1564)) + _1564;
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1565)) + _1565;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1566)) + _1566;
    float _1908 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1885));
    float _1929 = _1157 * 0.5;
    float _1930 = _1158 * 0.5;
    float _1931 = _1159 * 0.5;
    float _1932 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1935 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1938 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1972;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1945 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1949 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1953 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1960 = dot(vec4(cbModelParam._m0[39u]), vec4(_1929, _1930, _1931, 1.0));
        _1972 = dot(vec3(isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1960) ? 0.0 : (isnan(0.0) ? _1960 : max(0.0, _1960))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1972 = 1.0;
    }
    float _1983;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1974 = dot(vec4(cbModelParam._m0[40u]), vec4(_1929, _1930, _1931, 1.0));
        _1983 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1974) ? 0.0 : (isnan(0.0) ? _1974 : max(0.0, _1974))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1983 = 1.0;
    }
    float _1987 = (_1983 * cbModelParam._m0[1u].x) + (_1972 * (1.0 - cbModelParam._m0[1u].x));
    float _1997 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _975);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1997 : min(cbModelParam._m0[25u].z, _1997));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2045 = fma(_1221, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213)) + cbModelParam._m0[13u].w;
        float _2049 = fma(_1221, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213)) + cbModelParam._m0[14u].w;
        float _2053 = fma(_1221, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213)) + cbModelParam._m0[15u].w;
        float _2056 = fma(_1159, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157));
        float _2059 = fma(_1159, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157));
        float _2062 = fma(_1159, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157));
        float _2090;
        if (_2056 > 0.0)
        {
            _2090 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2090 = frontier_phi_17_15_ladder;
        }
        float _2313;
        if (_2059 > 0.0)
        {
            _2313 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2313 = frontier_phi_26_22_ladder;
        }
        float _2570;
        if (_2062 > 0.0)
        {
            _2570 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2570 = frontier_phi_38_33_ladder;
        }
        float _2572 = isnan(_2313) ? _2090 : (isnan(_2090) ? _2313 : min(_2090, _2313));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _2056) + _2045;
        float _2578 = (_2573 * _2059) + _2049;
        float _2579 = (_2573 * _2062) + _2053;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2582 = (-1.0) - _2580;
        float _2584 = _2580 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2579 > _2584) || ((_2579 < _2582) || ((_2578 > _2584) || ((_2578 < _2582) || ((_2577 < _2582) || (_2577 > _2584))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2579, cbModelParam._m0[9u].z, fma(_2578, cbModelParam._m0[9u].y, _2577 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2579, cbModelParam._m0[10u].z, fma(_2578, cbModelParam._m0[10u].y, _2577 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2579, cbModelParam._m0[11u].z, fma(_2578, cbModelParam._m0[11u].y, _2577 * cbModelParam._m0[11u].x))), _1998);
            frontier_phi_16_38_ladder = _2707.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2707.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2707.x * cbModelParam._m0[1u].y;
        }
        _2078 = frontier_phi_16_38_ladder_2;
        _2080 = frontier_phi_16_38_ladder_1;
        _2082 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1157, _1158, _1159), _1998);
        _2078 = _2066.x * cbModelParam._m0[1u].y;
        _2080 = _2066.y * cbModelParam._m0[1u].y;
        _2082 = _2066.z * cbModelParam._m0[1u].y;
    }
    float _2086 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _975);
    float _2087 = isnan(_2086) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2086 : min(cbModelParam._m0[25u].w, _2086));
    float _2176;
    float _2178;
    float _2180;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2140 = fma(_1221, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213)) + cbModelParam._m0[21u].w;
        float _2144 = fma(_1221, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213)) + cbModelParam._m0[22u].w;
        float _2148 = fma(_1221, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213)) + cbModelParam._m0[23u].w;
        float _2151 = fma(_1159, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157));
        float _2154 = fma(_1159, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157));
        float _2157 = fma(_1159, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157));
        float _2318;
        if (_2151 > 0.0)
        {
            _2318 = abs((1.0 - _2140) / _2151);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2140 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2318 = frontier_phi_28_24_ladder;
        }
        float _2597;
        if (_2154 > 0.0)
        {
            _2597 = abs((1.0 - _2144) / _2154);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2144 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2597 = frontier_phi_40_35_ladder;
        }
        float _2810;
        if (_2157 > 0.0)
        {
            _2810 = abs((1.0 - _2148) / _2157);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2148 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2810 = frontier_phi_49_46_ladder;
        }
        float _2812 = isnan(_2597) ? _2318 : (isnan(_2318) ? _2597 : min(_2318, _2597));
        float _2813 = isnan(_2810) ? _2812 : (isnan(_2812) ? _2810 : min(_2812, _2810));
        float _2817 = (_2813 * _2151) + _2140;
        float _2818 = (_2813 * _2154) + _2144;
        float _2819 = (_2813 * _2157) + _2148;
        float _2820 = _2813 * 9.9999997473787516355514526367188e-05;
        float _2821 = (-1.0) - _2820;
        float _2823 = _2820 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2819 > _2823) || ((_2819 < _2821) || ((_2818 > _2823) || ((_2818 < _2821) || ((_2817 < _2821) || (_2817 > _2823))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2819, cbModelParam._m0[17u].z, fma(_2818, cbModelParam._m0[17u].y, _2817 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2819, cbModelParam._m0[18u].z, fma(_2818, cbModelParam._m0[18u].y, _2817 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2819, cbModelParam._m0[19u].z, fma(_2818, cbModelParam._m0[19u].y, _2817 * cbModelParam._m0[19u].x))), _2087);
            frontier_phi_25_49_ladder = _3018.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3018.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3018.x * cbModelParam._m0[1u].z;
        }
        _2176 = frontier_phi_25_49_ladder_2;
        _2178 = frontier_phi_25_49_ladder_1;
        _2180 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1157, _1158, _1159), _2087);
        _2176 = _2160.x * cbModelParam._m0[1u].z;
        _2178 = _2160.y * cbModelParam._m0[1u].z;
        _2180 = _2160.z * cbModelParam._m0[1u].z;
    }
    float _2193 = (((_1184 * _1133) + _1185) * _1149) * ((cbModelParam._m0[1u].w * (_2176 - _2078)) + _2078);
    float _2195 = (((_1184 * _1135) + _1185) * _1149) * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2197 = (((_1184 * _1136) + _1185) * _1149) * ((cbModelParam._m0[1u].w * (_2180 - _2082)) + _2082);
    float _2200 = fma(_2197, cbSceneParam._m0[89u].z, fma(_2195, cbSceneParam._m0[89u].y, _2193 * cbSceneParam._m0[89u].x));
    float _2203 = fma(_2197, cbSceneParam._m0[90u].z, fma(_2195, cbSceneParam._m0[90u].y, _2193 * cbSceneParam._m0[90u].x));
    float _2206 = fma(_2197, cbSceneParam._m0[91u].z, fma(_2195, cbSceneParam._m0[91u].y, _2193 * cbSceneParam._m0[91u].x));
    vec4 _2214 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1071, _1072));
    float _2216 = _2214.w;
    float _2228 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2216);
    float _2229 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2216);
    float _2230 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2216);
    uvec4 _2234 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2236 = _2234.x * 14u;
    uint _2237 = _2236 + 13u;
    float _2244 = _1149 + (-1.0);
    float _2249 = (cbLight._m0[_2237].x * _2244) + 1.0;
    float _2250 = (cbLight._m0[_2237].y * _2244) + 1.0;
    float _2251 = (cbLight._m0[_2237].z * _2244) + 1.0;
    float _2252 = (cbLight._m0[_2237].w * _2244) + 1.0;
    uint _2253 = _2236 + 5u;
    float _2259 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2263 = _2236 + 4u;
    float _2272 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2276 = _2236 | 1u;
    float _2287 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_972, _973, _974));
    float _2290 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_972, _973, _974));
    float _4531 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _4542 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2295 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2297 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2304 = ((cbLight._m0[_2253].x * _2259) * _2297) + (((cbLight._m0[_2263].x * _2228) * _2272) * _2295);
    float _2305 = ((_2259 * cbLight._m0[_2253].y) * _2297) + (((cbLight._m0[_2263].y * _2229) * _2272) * _2295);
    float _2306 = ((_2259 * cbLight._m0[_2253].z) * _2297) + (((cbLight._m0[_2263].z * _2230) * _2272) * _2295);
    uvec4 _2310 = floatBitsToUint(cbLight._m0[_2236 + 12u]);
    bool _2312 = _2310.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2312)
    {
        _2323 = _2304;
        _2325 = _2305;
        _2327 = _2306;
    }
    else
    {
        uint _2331 = _2236 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2236 + 2u].xyz), vec3(_972, _973, _974)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4553 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2350 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2304;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2305;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2306;
    }
    bool _2330 = _2310.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2330)
    {
        _2368 = _2323;
        _2370 = _2325;
        _2372 = _2327;
    }
    else
    {
        uint _2541 = _2236 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2236 + 3u].xyz), vec3(_972, _973, _974)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4569 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2560 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2368 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2323;
        _2370 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2325;
        _2372 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2327;
    }
    uint _2375 = _2236 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _975) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2236].x + _1051;
    float _2391 = cbLight._m0[_2236].y + _1052;
    float _2392 = cbLight._m0[_2236].z + _1053;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_972, _973, _974), vec3(cbLight._m0[_2236].xyz));
    float _4585 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _4596 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _2404 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2405 = dot(vec3(_972, _973, _974), vec3(_2397, _2398, _2399));
    float _4607 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2397, _2398, _2399));
    float _4618 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2426 = 0.959999978542327880859375 - _1130;
    float _2428 = 0.959999978542327880859375 - _1131;
    float _2429 = 0.959999978542327880859375 - _1132;
    float _2436 = 1.0 - _2389;
    float _2447 = (0.5 / (((_2404 * ((_2403 * _2436) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2436) + _2389) * _2403))) * _2403;
    float _4629 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2463 = _2236 + 9u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _975) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2276].x + _1051;
    float _2477 = cbLight._m0[_2276].y + _1052;
    float _2478 = cbLight._m0[_2276].z + _1053;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_972, _973, _974), vec3(cbLight._m0[_2276].xyz));
    float _4640 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2490 = dot(vec3(_972, _973, _974), vec3(_2483, _2484, _2485));
    float _4651 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2483, _2484, _2485));
    float _4662 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2475 * _2475;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
    float _2516 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2404 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2516) + _2475) * _2489))) * _2489;
    float _4673 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    float _2538 = (((((_2509 * _2426) + _1133) * cbLight._m0[_2463].x) * _2528) * _2259) + ((((cbLight._m0[_2375].x * _2228) * ((_2425 * _2426) + _1133)) * _2449) * _2272);
    float _2539 = (((((_2509 * _2428) + _1135) * cbLight._m0[_2463].y) * _2528) * _2259) + ((((cbLight._m0[_2375].y * _2229) * ((_2425 * _2428) + _1135)) * _2449) * _2272);
    float _2540 = (((((_2509 * _2429) + _1136) * cbLight._m0[_2463].z) * _2528) * _2259) + ((((cbLight._m0[_2375].z * _2230) * ((_2425 * _2429) + _1136)) * _2449) * _2272);
    float _2602;
    float _2604;
    float _2606;
    if (_2312)
    {
        _2602 = _2538;
        _2604 = _2539;
        _2606 = _2540;
    }
    else
    {
        uint _2608 = _2236 + 2u;
        uint _2612 = _2236 + 10u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _975) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _1051;
        float _2629 = cbLight._m0[_2608].y + _1052;
        float _2630 = cbLight._m0[_2608].z + _1053;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_972, _973, _974), vec3(cbLight._m0[_2608].xyz));
        float _4684 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2642 = dot(vec3(_972, _973, _974), vec3(_2635, _2636, _2637));
        float _4695 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4706 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2404 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2668) + _2627) * _2641))) * _2641;
        float _4717 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2602 = (((((_2661 * _2426) + _1133) * cbLight._m0[_2612].x) * _2680) * _2681) + _2538;
        _2604 = (((((_2661 * _2428) + _1135) * cbLight._m0[_2612].y) * _2680) * _2681) + _2539;
        _2606 = (((((_2661 * _2429) + _1136) * cbLight._m0[_2612].z) * _2680) * _2681) + _2540;
    }
    float _2716;
    float _2718;
    float _2720;
    if (_2330)
    {
        _2716 = _2602;
        _2718 = _2604;
        _2720 = _2606;
    }
    else
    {
        uint _2727 = _2236 + 3u;
        uint _2731 = _2236 + 11u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _975) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _1051;
        float _2748 = cbLight._m0[_2727].y + _1052;
        float _2749 = cbLight._m0[_2727].z + _1053;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_972, _973, _974), vec3(cbLight._m0[_2727].xyz));
        float _4733 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2761 = dot(vec3(_972, _973, _974), vec3(_2754, _2755, _2756));
        float _4744 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4755 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
        float _2787 = 1.0 - _2746;
        float _2797 = (0.5 / (((_2404 * ((_2760 * _2787) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2787) + _2746) * _2760))) * _2760;
        float _4766 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2716 = (((((_2780 * _2426) + _1133) * cbLight._m0[_2731].x) * _2799) * _2800) + _2602;
        _2718 = (((((_2780 * _2428) + _1135) * cbLight._m0[_2731].y) * _2799) * _2800) + _2604;
        _2720 = (((((_2780 * _2429) + _1136) * cbLight._m0[_2731].z) * _2799) * _2800) + _2606;
    }
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_2234.y == 0u)
    {
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2875;
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2875;
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2875;
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.x;
        uint _2902 = uint((float(_2890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1072) / _2891))) + floor(float(uint(cbSceneParam._m0[85u].x * _1071) / _2891)));
        float _2912 = (log2(_2878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2913 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        uint _2916 = uint(isnan(14.0) ? _2913 : (isnan(_2913) ? 14.0 : min(_2913, 14.0)));
        uvec4 _2921 = texelFetch(g_lightClusterGridBuffer, int(((_2916 << 2u) + (_2902 << 6u)) >> 2u));
        uint _2922 = _2921.x;
        uint _2923 = _2890.z;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((((1u << ((_2923 >> 4u) & 15u)) + 4294967295u) & _2922) == 0u) || ((_2923 & 240u) == 0u))
        {
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
        }
        else
        {
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            uint _3182 = 0u;
            uint _3191;
            bool _3192;
            for (;;)
            {
                _3191 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                _3192 = _3191 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3192)
                {
                    frontier_phi_66_pred = _3176;
                    frontier_phi_66_pred_1 = _3181;
                    frontier_phi_66_pred_2 = _3180;
                    frontier_phi_66_pred_3 = _3179;
                    frontier_phi_66_pred_4 = _3178;
                    frontier_phi_66_pred_5 = _3177;
                }
                else
                {
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    uint _3327;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3191;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    for (;;)
                    {
                        uint _3331 = uint(findLSB(_3327)) + (_3182 << 5u);
                        uint _3328 = (_3327 + 4294967295u) & _3327;
                        uint _3333 = _3331 * 48u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3353 = (_3331 * 48u) + 4u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 3u)).x));
                        uint _3372 = (_3331 * 48u) + 8u;
                        vec3 _3383 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x));
                        float _3387 = _3347.x - _2876;
                        float _3388 = _3347.y - _2877;
                        float _3389 = _3347.z - _2878;
                        float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                        float _3393 = inversesqrt(_3390);
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3397 = dot(vec3(_1090, _1093, _1096), vec3(_3394, _3395, _3396));
                        float _3402 = 1.0 - (_3390 * _3347.w);
                        float _4792 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3404 = sqrt(_3390) * _3366.w;
                        float _3407 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3397) + _3408;
                        float _3414 = _3404 * _3404;
                        float _3418 = ((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3403) / ((_3414 * 0.699999988079071044921875) + 1.0);
                        float _3422 = (-0.0) - _2876;
                        float _3423 = (-0.0) - _2877;
                        float _3424 = (-0.0) - _2878;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3439 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                        float _3440 = 1.0 - _1165;
                        float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                        float _3448 = _3447 * _3447;
                        float _3449 = _3448 * _3448;
                        float _3450 = _3429 + _3394;
                        float _3451 = _3430 + _3395;
                        float _3452 = _3431 + _3396;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3460 = dot(vec3(_1090, _1093, _1096), vec3(_3429, _3430, _3431));
                        float _4808 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3464 = dot(vec3(_1090, _1093, _1096), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                        float _4819 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3467 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                        float _3472 = _3407 * _3448;
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3397) + _3473;
                        float _4830 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3477 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3478 = 1.0 - _3448;
                        float _3488 = (0.5 / (((_3477 * ((_3463 * _3478) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3448) * _3463))) * _3477;
                        float _4841 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3499 = (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3471 * _3471) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125))) * _3403;
                        _3251 = (_3418 * _3366.x) + _3324;
                        _3252 = (_3418 * _3366.y) + _3325;
                        _3253 = (_3418 * _3366.z) + _3326;
                        _3248 = (_3499 * _3383.x) + _3321;
                        _3249 = (_3499 * _3383.y) + _3322;
                        _3250 = (_3499 * _3383.z) + _3323;
                        if (_3328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3328;
                        }
                    }
                    frontier_phi_66_pred = _3248;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                _3024 = frontier_phi_66_pred;
                _3034 = frontier_phi_66_pred_1;
                _3032 = frontier_phi_66_pred_2;
                _3030 = frontier_phi_66_pred_3;
                _3028 = frontier_phi_66_pred_4;
                _3026 = frontier_phi_66_pred_5;
                uint _3183 = _3182 + 1u;
                if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3176 = _3024;
                    _3177 = _3026;
                    _3178 = _3028;
                    _3179 = _3030;
                    _3180 = _3032;
                    _3181 = _3034;
                    _3182 = _3183;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
        }
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.z;
        uint _3040 = (_3038 >> 8u) & 15u;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        if (((4294967295u << _3040) & _2922) == 0u)
        {
            _3144 = _3023;
            _3146 = _3025;
            _3148 = _3027;
            _3150 = _3029;
            _3152 = _3031;
            _3154 = _3033;
        }
        else
        {
            float _3169 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
            float _3170 = _3169 * _2876;
            float _3171 = _3169 * _2877;
            float _3172 = _3169 * _2878;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3040 < ((_3038 >> 12u) & 15u))
            {
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3304 = _3023;
                float _3305 = _3025;
                float _3306 = _3027;
                float _3307 = _3029;
                float _3308 = _3031;
                float _3309 = _3033;
                uint _3310 = _3040;
                uint _3319;
                bool _3320;
                for (;;)
                {
                    _3319 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                    _3320 = _3319 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3320)
                    {
                        frontier_phi_77_pred = _3309;
                        frontier_phi_77_pred_1 = _3308;
                        frontier_phi_77_pred_2 = _3307;
                        frontier_phi_77_pred_3 = _3306;
                        frontier_phi_77_pred_4 = _3305;
                        frontier_phi_77_pred_5 = _3304;
                    }
                    else
                    {
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3526 = _3304;
                        float _3527 = _3305;
                        float _3528 = _3306;
                        float _3529 = _3307;
                        float _3530 = _3308;
                        float _3531 = _3309;
                        uint _3532 = _3319;
                        uint _3533;
                        vec4 _3558;
                        float _3559;
                        vec4 _3574;
                        vec3 _3586;
                        vec4 _3601;
                        vec4 _3616;
                        float _3662;
                        bool _3663;
                        for (;;)
                        {
                            uint _3543 = ((_3310 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3532));
                            _3533 = (_3532 + 4294967295u) & _3532;
                            uint _3545 = _3543 * 40u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3559 = _3558.w;
                            uint _3561 = (_3543 * 40u) + 4u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3543 * 40u) + 8u;
                            _3586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x));
                            uint _3588 = (_3543 * 40u) + 16u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3543 * 40u) + 20u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3543 * 40u) + 24u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3637 = (_3543 * 40u) + 28u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3662 = fma(_2878, _3650.z, fma(_2877, _3650.y, _3650.x * _2876)) + _3650.w;
                            _3663 = !((fma(_2878, _3631.z, fma(_2877, _3631.y, _3631.x * _2876)) + _3631.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3663)
                            {
                                float _3690 = _3558.x - _2876;
                                float _3691 = _3558.y - _2877;
                                float _3692 = _3558.z - _2878;
                                float _3693 = dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692));
                                float _3696 = inversesqrt(_3693);
                                float _3697 = _3696 * _3690;
                                float _3698 = _3696 * _3691;
                                float _3699 = _3696 * _3692;
                                float _3703 = 1.0 - (_3693 / (_3559 * _3559));
                                float _4852 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3708 = sqrt(_3693) * _3574.w;
                                float _3710 = 1.39999997615814208984375 / (_3708 + 1.39999997615814208984375);
                                float _3711 = _3710 * _3710;
                                float _3714 = ((1.0 - _3711) * dot(vec3(_3697, _3698, _3699), vec3(_1090, _1093, _1096))) + _3711;
                                float _3717 = _3708 * _3708;
                                float _3721 = (fma(_2878, _3601.z, fma(_2877, _3601.y, _3601.x * _2876)) + _3601.w) / _3662;
                                float _3722 = (fma(_2878, _3616.z, fma(_2877, _3616.y, _3616.x * _2876)) + _3616.w) / _3662;
                                float _3726 = 1.0 - dot(vec2(_3721, _3722), vec2(_3721, _3722));
                                float _4868 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3728 = _3727 * (((isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0))) * _3704) / ((_3717 * 0.699999988079071044921875) + 1.0));
                                float _3740 = exp2(log2(1.0 / ((_3717 * 3.5) + 5.0)) * 0.25);
                                float _3741 = 1.0 - _1165;
                                float _3748 = sqrt(1.0 - ((1.0 - (_3741 * _3741)) * (1.0 - (_3740 * _3740))));
                                float _3749 = _3748 * _3748;
                                float _3750 = _3749 * _3749;
                                float _3751 = _3697 - _3170;
                                float _3752 = _3698 - _3171;
                                float _3753 = _3699 - _3172;
                                float _3757 = inversesqrt(dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753)));
                                float _3761 = dot(vec3(_1090, _1093, _1096), vec3((-0.0) - _3170, (-0.0) - _3171, (-0.0) - _3172));
                                float _4879 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3765 = dot(vec3(_1090, _1093, _1096), vec3(_3757 * _3751, _3757 * _3752, _3757 * _3753));
                                float _4890 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3772 = ((_3768 * _3768) * (_3750 + (-1.0))) + 1.0;
                                float _3773 = _3710 * _3749;
                                float _3774 = _3773 * _3773;
                                float _3780 = ((1.0 - _3774) * dot(vec3(_1090, _1093, _1096), vec3(_3697, _3698, _3699))) + _3774;
                                float _4901 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3782 = 1.0 - _3749;
                                float _3792 = (0.5 / (((_3781 * ((_3764 * _3782) + _3749)) + 9.9999999392252902907785028219223e-09) + (((_3781 * _3782) + _3749) * _3764))) * _3781;
                                float _4912 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3802 = (_3727 * _3704) * (((_3750 * 3.1415927410125732421875) * (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) / ((_3772 * _3772) * ((_3717 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3728 * _3574.y;
                                frontier_phi_83_pred_1 = _3728 * _3574.x;
                                frontier_phi_83_pred_2 = _3802 * _3586.z;
                                frontier_phi_83_pred_3 = _3802 * _3586.y;
                                frontier_phi_83_pred_4 = _3802 * _3586.x;
                                frontier_phi_83_pred_5 = _3728 * _3574.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3810 = frontier_phi_83_pred;
                            _3809 = frontier_phi_83_pred_1;
                            _3808 = frontier_phi_83_pred_2;
                            _3807 = frontier_phi_83_pred_3;
                            _3806 = frontier_phi_83_pred_4;
                            _3811 = frontier_phi_83_pred_5;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            if (_3533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3533;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3518;
                        frontier_phi_77_pred_1 = _3517;
                        frontier_phi_77_pred_2 = _3516;
                        frontier_phi_77_pred_3 = _3515;
                        frontier_phi_77_pred_4 = _3514;
                        frontier_phi_77_pred_5 = _3513;
                    }
                    _3155 = frontier_phi_77_pred;
                    _3153 = frontier_phi_77_pred_1;
                    _3151 = frontier_phi_77_pred_2;
                    _3149 = frontier_phi_77_pred_3;
                    _3147 = frontier_phi_77_pred_4;
                    _3145 = frontier_phi_77_pred_5;
                    uint _3311 = _3310 + 1u;
                    if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3304 = _3145;
                        _3305 = _3147;
                        _3306 = _3149;
                        _3307 = _3151;
                        _3308 = _3153;
                        _3309 = _3155;
                        _3310 = _3311;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3149;
                frontier_phi_58_59_ladder_1 = _3155;
                frontier_phi_58_59_ladder_2 = _3153;
                frontier_phi_58_59_ladder_3 = _3151;
                frontier_phi_58_59_ladder_4 = _3147;
                frontier_phi_58_59_ladder_5 = _3145;
            }
            else
            {
                frontier_phi_58_59_ladder = _3027;
                frontier_phi_58_59_ladder_1 = _3033;
                frontier_phi_58_59_ladder_2 = _3031;
                frontier_phi_58_59_ladder_3 = _3029;
                frontier_phi_58_59_ladder_4 = _3025;
                frontier_phi_58_59_ladder_5 = _3023;
            }
            _3144 = frontier_phi_58_59_ladder_5;
            _3146 = frontier_phi_58_59_ladder_4;
            _3148 = frontier_phi_58_59_ladder;
            _3150 = frontier_phi_58_59_ladder_3;
            _3152 = frontier_phi_58_59_ladder_2;
            _3154 = frontier_phi_58_59_ladder_1;
        }
        float _3159 = isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0));
        _2935 = (_3159 * _3150) + _2368;
        _2937 = (_3159 * _3152) + _2370;
        _2939 = (_3159 * _3154) + _2372;
        _2941 = ((_3144 * _1133) * _3159) + _2716;
        _2943 = ((_3146 * _1135) * _3159) + _2718;
        _2945 = ((_3148 * _1136) * _3159) + _2720;
    }
    else
    {
        _2935 = _2368;
        _2937 = _2370;
        _2939 = _2372;
        _2941 = _2716;
        _2943 = _2718;
        _2945 = _2720;
    }
    float _4928 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _4939 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4950 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _2962 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2935 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1149))) + ((_2941 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1987)) * cbPerFrame._m0[3u].x);
    float _2963 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2937 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1149))) + ((_2943 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1987)) * cbPerFrame._m0[3u].x);
    float _2964 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2939 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1149))) + ((_2945 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1987)) * cbPerFrame._m0[3u].x);
    uint _2965 = _260 + 6u;
    float _2973 = _1071 / cbSceneParam._m0[86u].x;
    float _2974 = _1072 / cbSceneParam._m0[86u].y;
    vec4 _2988 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, (log2((isnan(cbSceneParam._m0[77u].w) ? _994 : (isnan(_994) ? cbSceneParam._m0[77u].w : min(_994, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2990 = _2988.x;
    float _2991 = _2988.y;
    float _2992 = _2988.z;
    float _2993 = _2988.w;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    if (_994 > cbSceneParam._m0[78u].w)
    {
        float _3048 = isnan(_994) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _994 : min(cbSceneParam._m0[80u].w, _994));
        float _3049 = _3048 / _994;
        float _3060 = _3049 * _1044;
        float _3061 = _1045 * _3049;
        float _3062 = (-0.0) - _3061;
        float _3064 = _3049 * _1046;
        float _3066 = (cbSceneParam._m0[77u].w * _3062) / _3048;
        float _3067 = _3066 + cbSceneParam._m0[79u].w;
        float _3068 = cbSceneParam._m0[79u].w - _3061;
        float _3074 = sqrt(((_3060 * _3060) + (_3061 * _3061)) + (_3064 * _3064));
        float _3077 = (1.0 - (cbSceneParam._m0[77u].w / _3048)) * _3074;
        float _3082 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3084 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3261;
        if (abs((_3062 - _3066) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3261 = ((((_3067 > 0.0) ? exp2(_3082 * _3067) : (2.0 - exp2(_3084 * _3067))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3077;
        }
        else
        {
            float _3205 = 1.0 / cbSceneParam._m0[80u].x;
            float _3206 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : max(_3067, _3068));
            float _3207 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : min(_3067, _3068));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            _3261 = ((abs(_3074 / _3062) * cbSceneParam._m0[80u].y) * ((((_3216 - _3217) * 2.0) - ((exp2(_3082 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0)))) - exp2(_3082 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))))) * _3205)) - ((exp2(_3084 * _3216) - exp2(_3084 * _3217)) * _3205))) + (_3077 * cbSceneParam._m0[80u].z);
        }
        vec4 _3263 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, 1.0), 0.0);
        float _3272 = exp2((_3261 * (-1.44269502162933349609375)) * (1.0 - _3263.w));
        float _3273 = log2(_3272);
        float _3289 = log2(_2993);
        _3086 = (exp2(_3289 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3273 * cbSceneParam._m0[78u].x)) * _3263.x) / cbSceneParam._m0[78u].x)) + _2990;
        _3088 = (exp2(_3289 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3273 * cbSceneParam._m0[78u].y)) * _3263.y) / cbSceneParam._m0[78u].y)) + _2991;
        _3090 = (exp2(_3289 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3273 * cbSceneParam._m0[78u].z)) * _3263.z) / cbSceneParam._m0[78u].z)) + _2992;
        _3092 = _3272 * _2993;
    }
    else
    {
        _3086 = _2990;
        _3088 = _2991;
        _3090 = _2992;
        _3092 = _2993;
    }
    bool _3299;
    vec4 _3102;
    vec4 _3124;
    float _3126;
    float _3130;
    float _3131;
    float _3132;
    float _3133;
    bool _3143;
    for (;;)
    {
        _3102 = cbMatDynParam._m0[0u];
        float _3104 = roundEven(_3102.y);
        bool _3105 = _3104 == 3.0;
        float _3106 = log2(_3092);
        float _3113 = exp2(_3106 * cbSceneParam._m0[78u].x) * _2962;
        float _3114 = exp2(_3106 * cbSceneParam._m0[78u].y) * _2963;
        float _3115 = exp2(_3106 * cbSceneParam._m0[78u].z) * _2964;
        float _3122 = _1060 + (-0.5);
        _3124 = cbMtdParam._m0[1u];
        _3126 = _3124.y * _3122;
        float _3129 = (_3104 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3130 = _3129 * (_3105 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3086)));
        _3131 = _3129 * (_3105 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3088)));
        _3132 = _3129 * (_3105 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3090)));
        _3133 = _3122 * 0.999000012874603271484375;
        _3143 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3143)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3133) < 0.5)
            {
                _3299 = true;
                break;
            }
        }
        uint _3240 = _1109 + uint(_3102.w);
        if ((cbInstanceData._m0[_3240].w < 1.0) && ((cbInstanceData._m0[_3240].w + _3133) < 0.5))
        {
            _3299 = true;
            break;
        }
        if ((_3126 + 1.0) < _3124.x)
        {
            _3299 = true;
            break;
        }
        _3299 = false;
        break;
    }
    float _3504;
    if (_3299)
    {
        discard_state = true;
        _3504 = 0.0;
    }
    else
    {
        _3504 = cbInstanceData._m0[_2965].w;
    }
    SV_Target.x = _3130;
    SV_Target.y = _3131;
    SV_Target.z = _3132;
    SV_Target.w = _3504;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2965].w;
    discard_exit();
}


