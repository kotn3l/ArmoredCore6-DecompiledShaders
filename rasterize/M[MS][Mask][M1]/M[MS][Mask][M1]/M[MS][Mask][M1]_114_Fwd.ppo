#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1560;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3884 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3895 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3906 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _487 = (_480 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _488 = (_480 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _489 = (_480 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[23u].w) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3928 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _560 = (_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487;
    float _561 = (_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488;
    float _562 = (_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _600 = _598.x;
    float _610 = dot(vec4(_600, _598.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _622 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _413.z) * 2.0) - ((((_600 - _610) * cbMtdParam._m0[23u].w) + _610) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3939 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _633 = (_342.x * cbMtdParam._m0[9u].x) * ((_623 * ((_581.x * cbMtdParam._m0[14u].x) - _560)) + _560);
    float _634 = (_342.y * cbMtdParam._m0[9u].y) * ((_623 * ((_581.y * cbMtdParam._m0[14u].y) - _561)) + _561);
    float _635 = (_342.z * cbMtdParam._m0[9u].z) * ((_623 * ((_581.z * cbMtdParam._m0[14u].z) - _562)) + _562);
    float _639 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _633;
    float _642 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _634;
    float _645 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _635;
    float _653 = (((_633 - _639) * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) + _639) * 4.55000019073486328125;
    float _655 = (((_634 - _642) * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) + _642) * 4.55000019073486328125;
    float _657 = (((_635 - _645) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) + _645) * 4.55000019073486328125;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    float _725 = ((_697.x - _716) * _480) + _716;
    float _726 = ((_697.y - _717) * _480) + _717;
    float _727 = ((_697.z - _718) * _480) + _718;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _750 = ((_739.x - _725) * _553) + _725;
    float _751 = ((_739.y - _726) * _553) + _726;
    float _752 = ((_739.z - _727) * _553) + _727;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _777 = ((_764.z - _752) * _623) + _752;
    float _780 = ((((_764.x - _750) * _623) + _750) * 2.0) + (-1.0);
    float _781 = ((((_764.y - _751) * _623) + _751) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3950 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _826 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _828 = _826.x;
    float _829 = 1.0 - _828;
    float _844 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_828 - _829) * cbMtdParam._m0[24u].z) + _829) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3961 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _845 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _852 = (_845 * (cbMtdParam._m0[17u].x - _653)) + _653;
    float _853 = (_845 * (cbMtdParam._m0[17u].y - _655)) + _655;
    float _854 = (_845 * (cbMtdParam._m0[17u].z - _657)) + _657;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _882 = _880.x;
    float _899 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _882) * _480) + _882;
    float _916 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _899) * _553) + _899;
    float _934 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _916) * _623) + _916;
    float _938 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _934) * cbMtdParam._m0[19u].z) + _934;
    float _940 = _938 - (_938 * _845);
    float _945 = (((_674.z - _777) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _777;
    float _949 = ((_801.z - _945) * cbMtdParam._m0[19u].w) + _945;
    vec4 _962 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _969 = (_962.x * 2.0) + (-1.0);
    float _970 = (_962.y * 2.0) + (-1.0);
    float _971 = dot(vec2(_969, _970), vec2(_969, _970));
    float _3972 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _979 = (_845 * (_962.z - _949)) + _949;
    float _988 = (_780 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_674.x * 2.0) + (-1.0)))) + (((_801.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _989 = (_781 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_674.y * 2.0) + (-1.0)))) + (((_801.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1001 = (((_969 - _988) + (cbMtdParam._m0[21u].x * _988)) * _845) + _988;
    float _1002 = (((_970 - _989) + (cbMtdParam._m0[21u].x * _989)) * _845) + _989;
    float _1003 = (_845 * (sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _787)) + _787;
    float _1007 = cbMtdParam._m0[22u].x + _801.w;
    float _1010 = fma(_1003, _252 * NORMAL.x, fma(_1002, _259 * TANGENT.x, (_245 * _237) * _1001));
    float _1013 = fma(_1003, _252 * NORMAL.y, fma(_1002, _259 * TANGENT.y, (_245 * _238) * _1001));
    float _1016 = fma(_1003, _252 * NORMAL.z, fma(_1002, _259 * TANGENT.z, (_245 * _239) * _1001));
    float _1020 = inversesqrt(dot(vec3(_1010, _1013, _1016), vec3(_1010, _1013, _1016)));
    float _1021 = _1020 * _1010;
    float _1022 = _1020 * _1013;
    float _1023 = _1020 * _1016;
    float _3983 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _1024 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4005 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4016 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4027 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4038 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _1029 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1043 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1093 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1083);
    float _1094 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1083);
    float _1095 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1083);
    float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
    float _1100 = _1093 * _1099;
    float _1101 = _1094 * _1099;
    float _1102 = _1095 * _1099;
    float _1108 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1109 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1127 = fma(_1023, cbSceneParam._m0[5u].z, fma(_1022, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1021));
    float _1130 = fma(_1023, cbSceneParam._m0[6u].z, fma(_1022, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1021));
    float _1133 = fma(_1023, cbSceneParam._m0[7u].z, fma(_1022, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1021));
    uint _1147 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1153 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1147].x;
    float _1154 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1147].y;
    float _1155 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_1147].z;
    float _4049 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1156 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1157 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1159 = 1.0 - _1029;
    float _1160 = _1156 * _1159;
    float _1161 = _1157 * _1159;
    float _1162 = _1158 * _1159;
    float _1167 = (_1156 + (-0.039999999105930328369140625)) * _1029;
    float _1168 = (_1157 + (-0.039999999105930328369140625)) * _1029;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1029;
    float _1170 = _1167 + 0.039999999105930328369140625;
    float _1172 = _1168 + 0.039999999105930328369140625;
    float _1173 = _1169 + 0.039999999105930328369140625;
    vec4 _1182 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1108, cbSceneParam._m0[86u].y * _1109));
    float _1186 = ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * TEXCOORD_5.w) * _1182.x;
    float _1187 = dot(vec3(_1021, _1022, _1023), vec3(_1100, _1101, _1102));
    float _1190 = _1187 * 2.0;
    float _1194 = (_1190 * _1021) - _1100;
    float _1195 = (_1190 * _1022) - _1101;
    float _1196 = (_1190 * _1023) - _1102;
    float _1200 = abs(dot(vec3(_1100, _1101, _1102), vec3(_1021, _1022, _1023)));
    float _4082 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1202 = sqrt(_1024);
    float _1215 = exp2((_1202 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1202 * 3.0));
    float _1221 = (1.0 - _1215) * ((_1202 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1222 = _1215 * _1202;
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1559;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1284 = fma(_1258, cbModelParam._m0[26u].z, fma(_1254, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250));
        float _1288 = fma(_1258, cbModelParam._m0[27u].z, fma(_1254, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250));
        float _1292 = fma(_1258, cbModelParam._m0[28u].z, fma(_1254, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250));
        float _1317 = _1250 + _1021;
        float _1318 = _1254 + _1022;
        float _1319 = _1258 + _1023;
        float _1329 = fma(_1319, cbModelParam._m0[26u].z, fma(_1318, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1317)) - _1284;
        float _1330 = fma(_1319, cbModelParam._m0[27u].z, fma(_1318, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1317)) - _1288;
        float _1331 = fma(_1319, cbModelParam._m0[28u].z, fma(_1318, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1317)) - _1292;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1284 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1288 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[34u].z) + ((((((_1292 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1387 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1353.x + (-0.5));
        float _1389 = _1387 * (_1353.y + (-0.5));
        float _1390 = _1387 * (_1353.z + (-0.5));
        float _1397 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1360.x + (-0.5));
        float _1399 = _1397 * (_1360.y + (-0.5));
        float _1400 = _1397 * (_1360.z + (-0.5));
        float _1407 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1367.x + (-0.5));
        float _1409 = _1407 * (_1367.y + (-0.5));
        float _1410 = _1407 * (_1367.z + (-0.5));
        float _1417 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1374.x + (-0.5));
        float _1419 = _1417 * (_1374.y + (-0.5));
        float _1420 = _1417 * (_1374.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1441 = (dot(vec3(_1021, _1022, _1023), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1451 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4130 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1453 + 1.0))) + _1458) * _1421;
        float _1468 = _1389 * 0.5;
        float _1469 = _1399 * 0.5;
        float _1470 = _1409 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_1021, _1022, _1023), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4163 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1495 + 1.0))) + _1500) * _1422;
        float _1510 = _1390 * 0.5;
        float _1511 = _1400 * 0.5;
        float _1512 = _1410 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_1021, _1022, _1023), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4196 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1537 + 1.0))) + _1542) * _1423;
        _1559 = _1390;
        _1561 = _1389;
        _1562 = _1388;
        _1563 = _1400;
        _1564 = _1399;
        _1565 = _1398;
        _1566 = _1410;
        _1567 = _1409;
        _1568 = _1408;
        _1569 = _1423;
        _1570 = _1422;
        _1571 = _1421;
        _1572 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
    }
    else
    {
        _1559 = _1560;
        _1561 = _1560;
        _1562 = _1560;
        _1563 = _1560;
        _1564 = _1560;
        _1565 = _1560;
        _1566 = _1560;
        _1567 = _1560;
        _1568 = _1560;
        _1569 = _1560;
        _1570 = _1560;
        _1571 = _1560;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1597 = fma(_1258, cbModelParam._m0[30u].z, fma(_1254, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250));
        float _1601 = fma(_1258, cbModelParam._m0[31u].z, fma(_1254, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250));
        float _1605 = fma(_1258, cbModelParam._m0[32u].z, fma(_1254, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250));
        float _1628 = _1250 + _1021;
        float _1629 = _1254 + _1022;
        float _1630 = _1258 + _1023;
        float _1640 = fma(_1630, cbModelParam._m0[30u].z, fma(_1629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1628)) - _1597;
        float _1641 = fma(_1630, cbModelParam._m0[31u].z, fma(_1629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1628)) - _1601;
        float _1642 = fma(_1630, cbModelParam._m0[32u].z, fma(_1629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1628)) - _1605;
        float _1646 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
        float _1659 = ((_1646 * _1640) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1597 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1660 = ((_1646 * _1641) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1601 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1646 * _1642) / cbModelParam._m0[35u].z) + ((((((_1605 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        float _1696 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1663.x + (-0.5));
        float _1698 = _1696 * (_1663.y + (-0.5));
        float _1699 = _1696 * (_1663.z + (-0.5));
        float _1706 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1670.x + (-0.5));
        float _1708 = _1706 * (_1670.y + (-0.5));
        float _1709 = _1706 * (_1670.z + (-0.5));
        float _1716 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1677.x + (-0.5));
        float _1718 = _1716 * (_1677.y + (-0.5));
        float _1719 = _1716 * (_1677.z + (-0.5));
        float _1726 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1684.x + (-0.5));
        float _1728 = _1726 * (_1684.y + (-0.5));
        float _1729 = _1726 * (_1684.z + (-0.5));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = _1697 * 0.5;
        float _1734 = _1707 * 0.5;
        float _1735 = _1717 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_1021, _1022, _1023), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4259 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1760 + 1.0))) + _1765) * _1730;
        float _1775 = _1698 * 0.5;
        float _1776 = _1708 * 0.5;
        float _1777 = _1718 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_1021, _1022, _1023), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4292 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1802 + 1.0))) + _1807) * _1731;
        float _1817 = _1699 * 0.5;
        float _1818 = _1709 * 0.5;
        float _1819 = _1719 * 0.5;
        float _1820 = dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819));
        float _1825 = (_1820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1820);
        float _1833 = (dot(vec3(_1021, _1022, _1023), vec3(_1825 * _1817, _1825 * _1818, _1825 * _1819)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1844 = _1843 * 2.0;
        float _1848 = (1.0 - _1843) / (_1843 + 1.0);
        float _4325 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1858 = ((((1.0 - _1849) * (_1844 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1844 + 1.0))) + _1849) * _1732;
        _1866 = _1699;
        _1867 = _1698;
        _1868 = _1697;
        _1869 = _1709;
        _1870 = _1708;
        _1871 = _1707;
        _1872 = _1719;
        _1873 = _1718;
        _1874 = _1717;
        _1875 = _1732;
        _1876 = _1731;
        _1877 = _1730;
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)));
    }
    else
    {
        _1866 = _1560;
        _1867 = _1560;
        _1868 = _1560;
        _1869 = _1560;
        _1870 = _1560;
        _1871 = _1560;
        _1872 = _1560;
        _1873 = _1560;
        _1874 = _1560;
        _1875 = _1560;
        _1876 = _1560;
        _1877 = _1560;
        _1878 = 0.0;
        _1879 = 0.0;
        _1880 = 0.0;
    }
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1572)) + _1572;
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1573)) + _1573;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1574)) + _1574;
    float _1913 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1890));
    float _1934 = _1194 * 0.5;
    float _1935 = _1195 * 0.5;
    float _1936 = _1196 * 0.5;
    float _1937 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1940 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1943 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1977;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1950 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1559, _1563, _1566, _1569));
        float _1954 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1561, _1564, _1567, _1570));
        float _1958 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1965 = dot(vec4(cbModelParam._m0[39u]), vec4(_1934, _1935, _1936, 1.0));
        _1977 = dot(vec3(isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1965) ? 0.0 : (isnan(0.0) ? _1965 : max(0.0, _1965))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1977 = 1.0;
    }
    float _1988;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1979 = dot(vec4(cbModelParam._m0[40u]), vec4(_1934, _1935, _1936, 1.0));
        _1988 = dot(vec3(isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1979) ? 0.0 : (isnan(0.0) ? _1979 : max(0.0, _1979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1988 = 1.0;
    }
    float _1992 = (_1988 * cbModelParam._m0[1u].x) + (_1977 * (1.0 - cbModelParam._m0[1u].x));
    float _2002 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1024);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2002 : min(cbModelParam._m0[25u].z, _2002));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2050 = fma(_1258, cbModelParam._m0[13u].z, fma(_1254, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1250)) + cbModelParam._m0[13u].w;
        float _2054 = fma(_1258, cbModelParam._m0[14u].z, fma(_1254, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1250)) + cbModelParam._m0[14u].w;
        float _2058 = fma(_1258, cbModelParam._m0[15u].z, fma(_1254, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1250)) + cbModelParam._m0[15u].w;
        float _2061 = fma(_1196, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194));
        float _2064 = fma(_1196, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194));
        float _2067 = fma(_1196, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194));
        float _2095;
        if (_2061 > 0.0)
        {
            _2095 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2095 = frontier_phi_14_12_ladder;
        }
        float _2298;
        if (_2064 > 0.0)
        {
            _2298 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2298 = frontier_phi_23_19_ladder;
        }
        float _2552;
        if (_2067 > 0.0)
        {
            _2552 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2552 = frontier_phi_35_30_ladder;
        }
        float _2554 = isnan(_2298) ? _2095 : (isnan(_2095) ? _2298 : min(_2095, _2298));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _2061) + _2050;
        float _2560 = (_2555 * _2064) + _2054;
        float _2561 = (_2555 * _2067) + _2058;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _2003);
            frontier_phi_13_35_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2083 = frontier_phi_13_35_ladder_2;
        _2085 = frontier_phi_13_35_ladder_1;
        _2087 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1194, _1195, _1196), _2003);
        _2083 = _2071.x * cbModelParam._m0[1u].y;
        _2085 = _2071.y * cbModelParam._m0[1u].y;
        _2087 = _2071.z * cbModelParam._m0[1u].y;
    }
    float _2091 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1024);
    float _2092 = isnan(_2091) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2091 : min(cbModelParam._m0[25u].w, _2091));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2146 = fma(_1258, cbModelParam._m0[21u].z, fma(_1254, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1250)) + cbModelParam._m0[21u].w;
        float _2150 = fma(_1258, cbModelParam._m0[22u].z, fma(_1254, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1250)) + cbModelParam._m0[22u].w;
        float _2154 = fma(_1258, cbModelParam._m0[23u].z, fma(_1254, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1250)) + cbModelParam._m0[23u].w;
        float _2157 = fma(_1196, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194));
        float _2160 = fma(_1196, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194));
        float _2163 = fma(_1196, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194));
        float _2303;
        if (_2157 > 0.0)
        {
            _2303 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2303 = frontier_phi_25_21_ladder;
        }
        float _2579;
        if (_2160 > 0.0)
        {
            _2579 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2579 = frontier_phi_37_32_ladder;
        }
        float _2792;
        if (_2163 > 0.0)
        {
            _2792 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2792 = frontier_phi_46_43_ladder;
        }
        float _2794 = isnan(_2579) ? _2303 : (isnan(_2303) ? _2579 : min(_2303, _2579));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2157) + _2146;
        float _2800 = (_2795 * _2160) + _2150;
        float _2801 = (_2795 * _2163) + _2154;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2092);
            frontier_phi_22_46_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2182 = frontier_phi_22_46_ladder_2;
        _2184 = frontier_phi_22_46_ladder_1;
        _2186 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1194, _1195, _1196), _2092);
        _2182 = _2166.x * cbModelParam._m0[1u].z;
        _2184 = _2166.y * cbModelParam._m0[1u].z;
        _2186 = _2166.z * cbModelParam._m0[1u].z;
    }
    float _2199 = (((_1221 * _1170) + _1222) * _1186) * ((cbModelParam._m0[1u].w * (_2182 - _2083)) + _2083);
    float _2201 = (((_1221 * _1172) + _1222) * _1186) * ((cbModelParam._m0[1u].w * (_2184 - _2085)) + _2085);
    float _2203 = (((_1221 * _1173) + _1222) * _1186) * ((cbModelParam._m0[1u].w * (_2186 - _2087)) + _2087);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2199 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2199 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2199 * cbSceneParam._m0[91u].x));
    uvec4 _2222 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2224 = _2222.x * 14u;
    uint _2225 = _2224 + 13u;
    float _2232 = _1186 + (-1.0);
    float _2237 = (cbLight._m0[_2225].x * _2232) + 1.0;
    float _2238 = (cbLight._m0[_2225].y * _2232) + 1.0;
    float _2239 = (cbLight._m0[_2225].z * _2232) + 1.0;
    float _2240 = (cbLight._m0[_2225].w * _2232) + 1.0;
    uint _2241 = _2224 + 5u;
    float _2247 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2251 = _2224 + 4u;
    float _2257 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2261 = _2224 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_1021, _1022, _1023));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_1021, _1022, _1023));
    float _4461 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4472 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2241].x * _2247) * _2282) + ((cbLight._m0[_2251].x * _2257) * _2280);
    float _2290 = ((_2247 * cbLight._m0[_2241].y) * _2282) + ((_2257 * cbLight._m0[_2251].y) * _2280);
    float _2291 = ((_2247 * cbLight._m0[_2241].z) * _2282) + ((_2257 * cbLight._m0[_2251].z) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2224 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2297)
    {
        _2308 = _2289;
        _2310 = _2290;
        _2312 = _2291;
    }
    else
    {
        uint _2316 = _2224 + 6u;
        float _2332 = (dot(vec3(cbLight._m0[_2224 + 2u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2333 = _2332 * _2332;
        float _4483 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2334 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2335 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2308 = (((cbLight._m0[_2316].x * 0.3183098733425140380859375) * _2334) * _2335) + _2289;
        _2310 = (((cbLight._m0[_2316].y * 0.3183098733425140380859375) * _2334) * _2335) + _2290;
        _2312 = (((cbLight._m0[_2316].z * 0.3183098733425140380859375) * _2334) * _2335) + _2291;
    }
    bool _2315 = _2295.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2315)
    {
        _2353 = _2308;
        _2355 = _2310;
        _2357 = _2312;
    }
    else
    {
        uint _2523 = _2224 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2224 + 3u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4499 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2542 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2353 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2308;
        _2355 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2310;
        _2357 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2312;
    }
    uint _2360 = _2224 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _1024) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2224].x + _1100;
    float _2376 = cbLight._m0[_2224].y + _1101;
    float _2377 = cbLight._m0[_2224].z + _1102;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2224].xyz));
    float _4515 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _4526 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _2389 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2390 = dot(vec3(_1021, _1022, _1023), vec3(_2382, _2383, _2384));
    float _4537 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2382, _2383, _2384));
    float _4548 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
    float _2411 = 0.959999978542327880859375 - _1167;
    float _2413 = 0.959999978542327880859375 - _1168;
    float _2414 = 0.959999978542327880859375 - _1169;
    float _2421 = 1.0 - _2374;
    float _2432 = (0.5 / (((_2389 * ((_2388 * _2421) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2421) + _2374) * _2388))) * _2388;
    float _4559 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2445 = _2224 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _1024) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2261].x + _1100;
    float _2459 = cbLight._m0[_2261].y + _1101;
    float _2460 = cbLight._m0[_2261].z + _1102;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2261].xyz));
    float _4570 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2472 = dot(vec3(_1021, _1022, _1023), vec3(_2465, _2466, _2467));
    float _4581 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2465, _2466, _2467));
    float _4592 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2389 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2498) + _2457) * _2471))) * _2471;
    float _4603 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2411) + _1170) * cbLight._m0[_2445].x) * _2510) * _2247) + (((((_2410 * _2411) + _1170) * cbLight._m0[_2360].x) * _2434) * _2257);
    float _2521 = (((((_2491 * _2413) + _1172) * cbLight._m0[_2445].y) * _2510) * _2247) + (((((_2410 * _2413) + _1172) * cbLight._m0[_2360].y) * _2434) * _2257);
    float _2522 = (((((_2491 * _2414) + _1173) * cbLight._m0[_2445].z) * _2510) * _2247) + (((((_2410 * _2414) + _1173) * cbLight._m0[_2360].z) * _2434) * _2257);
    float _2584;
    float _2586;
    float _2588;
    if (_2297)
    {
        _2584 = _2520;
        _2586 = _2521;
        _2588 = _2522;
    }
    else
    {
        uint _2590 = _2224 + 2u;
        uint _2594 = _2224 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _1024) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _1100;
        float _2611 = cbLight._m0[_2590].y + _1101;
        float _2612 = cbLight._m0[_2590].z + _1102;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2590].xyz));
        float _4614 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2624 = dot(vec3(_1021, _1022, _1023), vec3(_2617, _2618, _2619));
        float _4625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4636 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2389 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2650) + _2609) * _2623))) * _2623;
        float _4647 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2584 = (((((_2643 * _2411) + _1170) * cbLight._m0[_2594].x) * _2662) * _2663) + _2520;
        _2586 = (((((_2643 * _2413) + _1172) * cbLight._m0[_2594].y) * _2662) * _2663) + _2521;
        _2588 = (((((_2643 * _2414) + _1173) * cbLight._m0[_2594].z) * _2662) * _2663) + _2522;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2315)
    {
        _2698 = _2584;
        _2700 = _2586;
        _2702 = _2588;
    }
    else
    {
        uint _2709 = _2224 + 3u;
        uint _2713 = _2224 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _1024) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1100;
        float _2730 = cbLight._m0[_2709].y + _1101;
        float _2731 = cbLight._m0[_2709].z + _1102;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2709].xyz));
        float _4663 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2743 = dot(vec3(_1021, _1022, _1023), vec3(_2736, _2737, _2738));
        float _4674 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4685 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2389 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2769) + _2728) * _2742))) * _2742;
        float _4696 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2698 = (((((_2762 * _2411) + _1170) * cbLight._m0[_2713].x) * _2781) * _2782) + _2584;
        _2700 = (((((_2762 * _2413) + _1172) * cbLight._m0[_2713].y) * _2781) * _2782) + _2586;
        _2702 = (((((_2762 * _2414) + _1173) * cbLight._m0[_2713].z) * _2781) * _2782) + _2588;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2222.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1109) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1108) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            uint _3156 = 0u;
            uint _3165;
            bool _3166;
            for (;;)
            {
                _3165 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                _3166 = _3165 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3166)
                {
                    frontier_phi_61_pred = _3150;
                    frontier_phi_61_pred_1 = _3155;
                    frontier_phi_61_pred_2 = _3154;
                    frontier_phi_61_pred_3 = _3153;
                    frontier_phi_61_pred_4 = _3152;
                    frontier_phi_61_pred_5 = _3151;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3165;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3156 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _2858;
                        float _3341 = _3300.y - _2859;
                        float _3342 = _3300.z - _2860;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_1127, _1130, _1133), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4722 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _2858;
                        float _3376 = (-0.0) - _2859;
                        float _3377 = (-0.0) - _2860;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3392 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3393 = 1.0 - _1202;
                        float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                        float _3401 = _3400 * _3400;
                        float _3402 = _3401 * _3401;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3413 = dot(vec3(_1127, _1130, _1133), vec3(_3382, _3383, _3384));
                        float _4738 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3417 = dot(vec3(_1127, _1130, _1133), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                        float _4749 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                        float _3425 = _3360 * _3401;
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3350) + _3426;
                        float _4760 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3431 = 1.0 - _3401;
                        float _3441 = (0.5 / (((_3430 * ((_3416 * _3431) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3401) * _3416))) * _3430;
                        float _4771 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3452 = (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3424 * _3424) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3209 = (_3371 * _3319.x) + _3277;
                        _3210 = (_3371 * _3319.y) + _3278;
                        _3211 = (_3371 * _3319.z) + _3279;
                        _3206 = (_3452 * _3336.x) + _3274;
                        _3207 = (_3452 * _3336.y) + _3275;
                        _3208 = (_3452 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_61_pred = _3206;
                    frontier_phi_61_pred_1 = _3211;
                    frontier_phi_61_pred_2 = _3210;
                    frontier_phi_61_pred_3 = _3209;
                    frontier_phi_61_pred_4 = _3208;
                    frontier_phi_61_pred_5 = _3207;
                }
                _3006 = frontier_phi_61_pred;
                _3016 = frontier_phi_61_pred_1;
                _3014 = frontier_phi_61_pred_2;
                _3012 = frontier_phi_61_pred_3;
                _3010 = frontier_phi_61_pred_4;
                _3008 = frontier_phi_61_pred_5;
                uint _3157 = _3156 + 1u;
                if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3150 = _3006;
                    _3151 = _3008;
                    _3152 = _3010;
                    _3153 = _3012;
                    _3154 = _3014;
                    _3155 = _3016;
                    _3156 = _3157;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((4294967295u << _3022) & _2904) == 0u)
        {
            _3118 = _3005;
            _3120 = _3007;
            _3122 = _3009;
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
        }
        else
        {
            float _3143 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3144 = _3143 * _2858;
            float _3145 = _3143 * _2859;
            float _3146 = _3143 * _2860;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3257 = _3005;
                float _3258 = _3007;
                float _3259 = _3009;
                float _3260 = _3011;
                float _3261 = _3013;
                float _3262 = _3015;
                uint _3263 = _3022;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3273)
                    {
                        frontier_phi_67_pred = _3260;
                        frontier_phi_67_pred_1 = _3261;
                        frontier_phi_67_pred_2 = _3262;
                        frontier_phi_67_pred_3 = _3259;
                        frontier_phi_67_pred_4 = _3258;
                        frontier_phi_67_pred_5 = _3257;
                    }
                    else
                    {
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        float _3472 = _3259;
                        float _3473 = _3260;
                        float _3474 = _3261;
                        float _3475 = _3262;
                        uint _3476 = _3272;
                        uint _3477;
                        vec4 _3502;
                        float _3503;
                        vec4 _3518;
                        vec3 _3530;
                        vec4 _3545;
                        vec4 _3560;
                        float _3606;
                        bool _3607;
                        for (;;)
                        {
                            uint _3487 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3476));
                            _3477 = (_3476 + 4294967295u) & _3476;
                            uint _3489 = _3487 * 40u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3503 = _3502.w;
                            uint _3505 = (_3487 * 40u) + 4u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3487 * 40u) + 8u;
                            _3530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x));
                            uint _3532 = (_3487 * 40u) + 16u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3487 * 40u) + 20u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3487 * 40u) + 24u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3581 = (_3487 * 40u) + 28u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3606 = fma(_2860, _3594.z, fma(_2859, _3594.y, _3594.x * _2858)) + _3594.w;
                            _3607 = !((fma(_2860, _3575.z, fma(_2859, _3575.y, _3575.x * _2858)) + _3575.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3607)
                            {
                                float _3634 = _3502.x - _2858;
                                float _3635 = _3502.y - _2859;
                                float _3636 = _3502.z - _2860;
                                float _3637 = dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636));
                                float _3640 = inversesqrt(_3637);
                                float _3641 = _3640 * _3634;
                                float _3642 = _3640 * _3635;
                                float _3643 = _3640 * _3636;
                                float _3647 = 1.0 - (_3637 / (_3503 * _3503));
                                float _4782 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3652 = sqrt(_3637) * _3518.w;
                                float _3654 = 1.39999997615814208984375 / (_3652 + 1.39999997615814208984375);
                                float _3655 = _3654 * _3654;
                                float _3658 = ((1.0 - _3655) * dot(vec3(_3641, _3642, _3643), vec3(_1127, _1130, _1133))) + _3655;
                                float _3661 = _3652 * _3652;
                                float _3665 = (fma(_2860, _3545.z, fma(_2859, _3545.y, _3545.x * _2858)) + _3545.w) / _3606;
                                float _3666 = (fma(_2860, _3560.z, fma(_2859, _3560.y, _3560.x * _2858)) + _3560.w) / _3606;
                                float _3670 = 1.0 - dot(vec2(_3665, _3666), vec2(_3665, _3666));
                                float _4798 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3672 = _3671 * (((isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0))) * _3648) / ((_3661 * 0.699999988079071044921875) + 1.0));
                                float _3684 = exp2(log2(1.0 / ((_3661 * 3.5) + 5.0)) * 0.25);
                                float _3685 = 1.0 - _1202;
                                float _3692 = sqrt(1.0 - ((1.0 - (_3685 * _3685)) * (1.0 - (_3684 * _3684))));
                                float _3693 = _3692 * _3692;
                                float _3694 = _3693 * _3693;
                                float _3695 = _3641 - _3144;
                                float _3696 = _3642 - _3145;
                                float _3697 = _3643 - _3146;
                                float _3701 = inversesqrt(dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697)));
                                float _3705 = dot(vec3(_1127, _1130, _1133), vec3((-0.0) - _3144, (-0.0) - _3145, (-0.0) - _3146));
                                float _4809 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3709 = dot(vec3(_1127, _1130, _1133), vec3(_3701 * _3695, _3701 * _3696, _3701 * _3697));
                                float _4820 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3716 = ((_3712 * _3712) * (_3694 + (-1.0))) + 1.0;
                                float _3717 = _3654 * _3693;
                                float _3718 = _3717 * _3717;
                                float _3724 = ((1.0 - _3718) * dot(vec3(_1127, _1130, _1133), vec3(_3641, _3642, _3643))) + _3718;
                                float _4831 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3726 = 1.0 - _3693;
                                float _3736 = (0.5 / (((_3725 * ((_3708 * _3726) + _3693)) + 9.9999999392252902907785028219223e-09) + (((_3725 * _3726) + _3693) * _3708))) * _3725;
                                float _4842 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3746 = (_3671 * _3648) * (((_3694 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3716 * _3716) * ((_3661 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3746 * _3530.x;
                                frontier_phi_73_pred_1 = _3746 * _3530.y;
                                frontier_phi_73_pred_2 = _3672 * _3518.z;
                                frontier_phi_73_pred_3 = _3672 * _3518.y;
                                frontier_phi_73_pred_4 = _3672 * _3518.x;
                                frontier_phi_73_pred_5 = _3746 * _3530.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3750 = frontier_phi_73_pred;
                            _3751 = frontier_phi_73_pred_1;
                            _3755 = frontier_phi_73_pred_2;
                            _3754 = frontier_phi_73_pred_3;
                            _3753 = frontier_phi_73_pred_4;
                            _3752 = frontier_phi_73_pred_5;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            if (_3477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3477;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3460;
                        frontier_phi_67_pred_1 = _3461;
                        frontier_phi_67_pred_2 = _3462;
                        frontier_phi_67_pred_3 = _3459;
                        frontier_phi_67_pred_4 = _3458;
                        frontier_phi_67_pred_5 = _3457;
                    }
                    _3125 = frontier_phi_67_pred;
                    _3127 = frontier_phi_67_pred_1;
                    _3129 = frontier_phi_67_pred_2;
                    _3123 = frontier_phi_67_pred_3;
                    _3121 = frontier_phi_67_pred_4;
                    _3119 = frontier_phi_67_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3119;
                        _3258 = _3121;
                        _3259 = _3123;
                        _3260 = _3125;
                        _3261 = _3127;
                        _3262 = _3129;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3127;
                frontier_phi_55_56_ladder_1 = _3129;
                frontier_phi_55_56_ladder_2 = _3125;
                frontier_phi_55_56_ladder_3 = _3123;
                frontier_phi_55_56_ladder_4 = _3121;
                frontier_phi_55_56_ladder_5 = _3119;
            }
            else
            {
                frontier_phi_55_56_ladder = _3013;
                frontier_phi_55_56_ladder_1 = _3015;
                frontier_phi_55_56_ladder_2 = _3011;
                frontier_phi_55_56_ladder_3 = _3009;
                frontier_phi_55_56_ladder_4 = _3007;
                frontier_phi_55_56_ladder_5 = _3005;
            }
            _3118 = frontier_phi_55_56_ladder_5;
            _3120 = frontier_phi_55_56_ladder_4;
            _3122 = frontier_phi_55_56_ladder_3;
            _3124 = frontier_phi_55_56_ladder_2;
            _3126 = frontier_phi_55_56_ladder;
            _3128 = frontier_phi_55_56_ladder_1;
        }
        float _3133 = isnan(1.0) ? _1186 : (isnan(_1186) ? 1.0 : min(_1186, 1.0));
        _2917 = (_3133 * _3124) + _2353;
        _2919 = (_3133 * _3126) + _2355;
        _2921 = (_3133 * _3128) + _2357;
        _2923 = ((_3118 * _1170) * _3133) + _2698;
        _2925 = ((_3120 * _1172) * _3133) + _2700;
        _2927 = ((_3122 * _1173) * _3133) + _2702;
    }
    else
    {
        _2917 = _2353;
        _2919 = _2355;
        _2921 = _2357;
        _2923 = _2698;
        _2925 = _2700;
        _2927 = _2702;
    }
    float _4858 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _4869 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _4880 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    uint _2947 = _286 + 6u;
    float _2955 = _1108 / cbSceneParam._m0[86u].x;
    float _2956 = _1109 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _1043 : (isnan(_1043) ? cbSceneParam._m0[77u].w : min(_1043, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_1043 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_1043) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1043 : min(cbSceneParam._m0[80u].w, _1043));
        float _3031 = _3030 / _1043;
        float _3042 = _3031 * _1093;
        float _3043 = _1094 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3046 = _3031 * _1095;
        float _3048 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3049 = _3048 + cbSceneParam._m0[79u].w;
        float _3050 = cbSceneParam._m0[79u].w - _3043;
        float _3056 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3046 * _3046));
        float _3059 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3056;
        float _3064 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3066 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3044 - _3048) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3049 > 0.0) ? exp2(_3064 * _3049) : (2.0 - exp2(_3066 * _3049))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3059;
        }
        else
        {
            float _3179 = 1.0 / cbSceneParam._m0[80u].x;
            float _3180 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : max(_3049, _3050));
            float _3181 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : min(_3049, _3050));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            float _3191 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : min(_3181, 0.0));
            _3219 = ((abs(_3056 / _3044) * cbSceneParam._m0[80u].y) * ((((_3190 - _3191) * 2.0) - ((exp2(_3064 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0)))) - exp2(_3064 * (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))))) * _3179)) - ((exp2(_3066 * _3190) - exp2(_3066 * _3191)) * _3179))) + (_3059 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2975);
        _3068 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3070 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3072 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3074 = _3230 * _2975;
    }
    else
    {
        _3068 = _2972;
        _3070 = _2973;
        _3072 = _2974;
        _3074 = _2975;
    }
    float _3086 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3087 = _3086 == 3.0;
    float _3088 = log2(_3074);
    float _3095 = exp2(_3088 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2917 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1186))) + ((_2923 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1992)) * cbPerFrame._m0[3u].x));
    float _3096 = exp2(_3088 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2919 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1186))) + ((_2925 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1992)) * cbPerFrame._m0[3u].x));
    float _3097 = exp2(_3088 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2921 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1186))) + ((_2927 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1992)) * cbPerFrame._m0[3u].x));
    float _3106 = (_3086 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3106 * (_3087 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3068)));
    SV_Target.y = _3106 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.z = _3106 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.w = cbInstanceData._m0[_2947].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
}


