#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1550;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3898 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3909 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3920 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3931 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _466 = (_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _467 = (_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _468 = (_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3942 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    float _545 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _539;
    float _548 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _540;
    float _551 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _541;
    float _558 = ((_539 - _545) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) + _545;
    float _559 = ((_540 - _548) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _548;
    float _560 = ((_541 - _551) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _551;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _459) + _640;
    float _650 = ((_621.y - _641) * _459) + _641;
    float _651 = ((_621.z - _642) * _459) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _676 = ((_663.z - _651) * _532) + _651;
    float _679 = ((((_663.x - _649) * _532) + _649) * 2.0) + (-1.0);
    float _680 = ((((_663.y - _650) * _532) + _650) * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3953 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _686 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _727 = _725.x;
    float _728 = 1.0 - _727;
    float _737 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _740 = ((isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : min(_737, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _749 = (_740 - ((((((_727 - _728) * cbMtdParam._m0[24u].z) + _728) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _740))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3974 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _757 = (_750 * ((_579.x * cbMtdParam._m0[18u].x) - _558)) + _558;
    float _758 = (_750 * ((_579.y * cbMtdParam._m0[18u].y) - _559)) + _559;
    float _759 = (_750 * ((_579.z * cbMtdParam._m0[18u].z) - _560)) + _560;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _773 = _771.x;
    float _774 = 1.0 - _773;
    float _799 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_773 - _774) * cbMtdParam._m0[24u].w) + _774) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3985 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _808 = ((((cbMtdParam._m0[10u].x - _757) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _800) + _757;
    float _809 = ((((cbMtdParam._m0[10u].y - _758) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _800) + _758;
    float _810 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _759)) * _800) + _759;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _838 = _836.x;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _838) * _459) + _838;
    float _873 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _856) * _532) + _856;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _873) * cbMtdParam._m0[19u].z) + _873;
    float _879 = _877 - (_877 * _750);
    float _881 = _879 - (_879 * _800);
    float _886 = (((_598.z - _676) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _676;
    float _890 = ((_700.z - _886) * cbMtdParam._m0[19u].w) + _886;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _911 = (_904.x * 2.0) + (-1.0);
    float _912 = (_904.y * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _3996 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _921 = (_750 * (_904.z - _890)) + _890;
    float _924 = ((cbMtdParam._m0[23u].x - _921) * _800) + _921;
    vec4 _945 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _951 = (_945.x * 2.0) + (-1.0);
    float _952 = (_945.y * 2.0) + (-1.0);
    float _953 = dot(vec2(_951, _952), vec2(_951, _952));
    float _4007 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _967 = (_679 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_598.x * 2.0) + (-1.0)))) + (((_700.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _968 = (_680 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_598.y * 2.0) + (-1.0)))) + (((_700.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _980 = (((_911 - _967) + (cbMtdParam._m0[21u].x * _967)) * _750) + _967;
    float _981 = (((_912 - _968) + (cbMtdParam._m0[21u].x * _968)) * _750) + _968;
    float _982 = (_750 * (sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _686)) + _686;
    float _993 = (((_951 - _980) + (_980 * cbMtdParam._m0[22u].z)) * _800) + _980;
    float _994 = (((_952 - _981) + (_981 * cbMtdParam._m0[22u].z)) * _800) + _981;
    float _995 = ((sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _982) * _800) + _982;
    float _997 = cbMtdParam._m0[22u].x + _700.w;
    float _1000 = fma(_995, _261 * NORMAL.x, fma(_994, _268 * TANGENT.x, (_254 * _246) * _993));
    float _1003 = fma(_995, _261 * NORMAL.y, fma(_994, _268 * TANGENT.y, (_254 * _247) * _993));
    float _1006 = fma(_995, _261 * NORMAL.z, fma(_994, _268 * TANGENT.z, (_254 * _248) * _993));
    float _1010 = inversesqrt(dot(vec3(_1000, _1003, _1006), vec3(_1000, _1003, _1006)));
    float _1011 = _1010 * _1000;
    float _1012 = _1010 * _1003;
    float _1013 = _1010 * _1006;
    float _4018 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _1014 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4040 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4051 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4062 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4073 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _1019 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1033 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1083 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1073);
    float _1084 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1073);
    float _1085 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1073);
    float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
    float _1090 = _1083 * _1089;
    float _1091 = _1084 * _1089;
    float _1092 = _1085 * _1089;
    float _1098 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1099 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1117 = fma(_1013, cbSceneParam._m0[5u].z, fma(_1012, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1011));
    float _1120 = fma(_1013, cbSceneParam._m0[6u].z, fma(_1012, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1011));
    float _1123 = fma(_1013, cbSceneParam._m0[7u].z, fma(_1012, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1011));
    uint _1137 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1143 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_1137].x;
    float _1144 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_1137].y;
    float _1145 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_1137].z;
    float _4084 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1149 = 1.0 - _1019;
    float _1150 = _1146 * _1149;
    float _1151 = _1147 * _1149;
    float _1152 = _1148 * _1149;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1019;
    float _1158 = (_1147 + (-0.039999999105930328369140625)) * _1019;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1019;
    float _1160 = _1157 + 0.039999999105930328369140625;
    float _1162 = _1158 + 0.039999999105930328369140625;
    float _1163 = _1159 + 0.039999999105930328369140625;
    vec4 _1172 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1098, cbSceneParam._m0[86u].y * _1099));
    float _1176 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * TEXCOORD_5.w) * _1172.x;
    float _1177 = dot(vec3(_1011, _1012, _1013), vec3(_1090, _1091, _1092));
    float _1180 = _1177 * 2.0;
    float _1184 = (_1180 * _1011) - _1090;
    float _1185 = (_1180 * _1012) - _1091;
    float _1186 = (_1180 * _1013) - _1092;
    float _1190 = abs(dot(vec3(_1090, _1091, _1092), vec3(_1011, _1012, _1013)));
    float _4117 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1192 = sqrt(_1014);
    float _1205 = exp2((_1192 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1192 * 3.0));
    float _1211 = (1.0 - _1205) * ((_1192 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1212 = _1205 * _1192;
    float _1240 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1549;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1274 = fma(_1248, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240));
        float _1278 = fma(_1248, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240));
        float _1282 = fma(_1248, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240));
        float _1307 = _1240 + _1011;
        float _1308 = _1244 + _1012;
        float _1309 = _1248 + _1013;
        float _1319 = fma(_1309, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307)) - _1274;
        float _1320 = fma(_1309, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307)) - _1278;
        float _1321 = fma(_1309, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307)) - _1282;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1274 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1278 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[34u].z) + ((((((_1282 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1377 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1343.x + (-0.5));
        float _1379 = _1377 * (_1343.y + (-0.5));
        float _1380 = _1377 * (_1343.z + (-0.5));
        float _1387 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1350.x + (-0.5));
        float _1389 = _1387 * (_1350.y + (-0.5));
        float _1390 = _1387 * (_1350.z + (-0.5));
        float _1397 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1357.x + (-0.5));
        float _1399 = _1397 * (_1357.y + (-0.5));
        float _1400 = _1397 * (_1357.z + (-0.5));
        float _1407 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1364.x + (-0.5));
        float _1409 = _1407 * (_1364.y + (-0.5));
        float _1410 = _1407 * (_1364.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1431 = (dot(vec3(_1011, _1012, _1013), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1441 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4165 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1443 + 1.0))) + _1448) * _1411;
        float _1458 = _1379 * 0.5;
        float _1459 = _1389 * 0.5;
        float _1460 = _1399 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_1011, _1012, _1013), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4198 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1485 + 1.0))) + _1490) * _1412;
        float _1500 = _1380 * 0.5;
        float _1501 = _1390 * 0.5;
        float _1502 = _1400 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_1011, _1012, _1013), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4231 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1527 + 1.0))) + _1532) * _1413;
        _1549 = _1380;
        _1551 = _1379;
        _1552 = _1378;
        _1553 = _1390;
        _1554 = _1389;
        _1555 = _1388;
        _1556 = _1400;
        _1557 = _1399;
        _1558 = _1398;
        _1559 = _1413;
        _1560 = _1412;
        _1561 = _1411;
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1563 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1550;
        _1551 = _1550;
        _1552 = _1550;
        _1553 = _1550;
        _1554 = _1550;
        _1555 = _1550;
        _1556 = _1550;
        _1557 = _1550;
        _1558 = _1550;
        _1559 = _1550;
        _1560 = _1550;
        _1561 = _1550;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1588 = fma(_1248, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240));
        float _1592 = fma(_1248, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240));
        float _1596 = fma(_1248, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240));
        float _1619 = _1240 + _1011;
        float _1620 = _1244 + _1012;
        float _1621 = _1248 + _1013;
        float _1631 = fma(_1621, cbModelParam._m0[30u].z, fma(_1620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1619)) - _1588;
        float _1632 = fma(_1621, cbModelParam._m0[31u].z, fma(_1620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1619)) - _1592;
        float _1633 = fma(_1621, cbModelParam._m0[32u].z, fma(_1620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1619)) - _1596;
        float _1637 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
        float _1650 = ((_1637 * _1631) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1588 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1651 = ((_1637 * _1632) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1592 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1652 = ((_1637 * _1633) / cbModelParam._m0[35u].z) + ((((((_1596 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        float _1687 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1688 = _1687 * (_1654.x + (-0.5));
        float _1689 = _1687 * (_1654.y + (-0.5));
        float _1690 = _1687 * (_1654.z + (-0.5));
        float _1697 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1661.x + (-0.5));
        float _1699 = _1697 * (_1661.y + (-0.5));
        float _1700 = _1697 * (_1661.z + (-0.5));
        float _1707 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1668.x + (-0.5));
        float _1709 = _1707 * (_1668.y + (-0.5));
        float _1710 = _1707 * (_1668.z + (-0.5));
        float _1717 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1675.x + (-0.5));
        float _1719 = _1717 * (_1675.y + (-0.5));
        float _1720 = _1717 * (_1675.z + (-0.5));
        float _1721 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1722 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = _1688 * 0.5;
        float _1725 = _1698 * 0.5;
        float _1726 = _1708 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_1011, _1012, _1013), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1721 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4294 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1751 + 1.0))) + _1756) * _1721;
        float _1766 = _1689 * 0.5;
        float _1767 = _1699 * 0.5;
        float _1768 = _1709 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_1011, _1012, _1013), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1722 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4327 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1793 + 1.0))) + _1798) * _1722;
        float _1808 = _1690 * 0.5;
        float _1809 = _1700 * 0.5;
        float _1810 = _1710 * 0.5;
        float _1811 = dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810));
        float _1816 = (_1811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1811);
        float _1824 = (dot(vec3(_1011, _1012, _1013), vec3(_1816 * _1808, _1816 * _1809, _1816 * _1810)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1835 = _1834 * 2.0;
        float _1839 = (1.0 - _1834) / (_1834 + 1.0);
        float _4360 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1849 = ((((1.0 - _1840) * (_1835 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1835 + 1.0))) + _1840) * _1723;
        _1857 = _1690;
        _1858 = _1689;
        _1859 = _1688;
        _1860 = _1700;
        _1861 = _1699;
        _1862 = _1698;
        _1863 = _1710;
        _1864 = _1709;
        _1865 = _1708;
        _1866 = _1723;
        _1867 = _1722;
        _1868 = _1721;
        _1869 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1870 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)));
    }
    else
    {
        _1857 = _1550;
        _1858 = _1550;
        _1859 = _1550;
        _1860 = _1550;
        _1861 = _1550;
        _1862 = _1550;
        _1863 = _1550;
        _1864 = _1550;
        _1865 = _1550;
        _1866 = _1550;
        _1867 = _1550;
        _1868 = _1550;
        _1869 = 0.0;
        _1870 = 0.0;
        _1871 = 0.0;
    }
    float _1881 = (cbModelParam._m0[1u].x * (_1869 - _1562)) + _1562;
    float _1882 = (cbModelParam._m0[1u].x * (_1870 - _1563)) + _1563;
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1564)) + _1564;
    float _1904 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1881));
    float _1925 = _1184 * 0.5;
    float _1926 = _1185 * 0.5;
    float _1927 = _1186 * 0.5;
    float _1928 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1931 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1858, _1861, _1864, _1867));
    float _1934 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1857, _1860, _1863, _1866));
    float _1968;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1941 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1549, _1553, _1556, _1559));
        float _1945 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1551, _1554, _1557, _1560));
        float _1949 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1552, _1555, _1558, _1561));
        float _1956 = dot(vec4(cbModelParam._m0[39u]), vec4(_1925, _1926, _1927, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1956) ? 0.0 : (isnan(0.0) ? _1956 : max(0.0, _1956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1979;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1970 = dot(vec4(cbModelParam._m0[40u]), vec4(_1925, _1926, _1927, 1.0));
        _1979 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1979 = 1.0;
    }
    float _1983 = (_1979 * cbModelParam._m0[1u].x) + (_1968 * (1.0 - cbModelParam._m0[1u].x));
    float _1993 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1014);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1993 : min(cbModelParam._m0[25u].z, _1993));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2041 = fma(_1248, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1240)) + cbModelParam._m0[13u].w;
        float _2045 = fma(_1248, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1240)) + cbModelParam._m0[14u].w;
        float _2049 = fma(_1248, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1240)) + cbModelParam._m0[15u].w;
        float _2052 = fma(_1186, cbModelParam._m0[13u].z, fma(_1185, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184));
        float _2055 = fma(_1186, cbModelParam._m0[14u].z, fma(_1185, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184));
        float _2058 = fma(_1186, cbModelParam._m0[15u].z, fma(_1185, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184));
        float _2086;
        if (_2052 > 0.0)
        {
            _2086 = abs((1.0 - _2041) / _2052);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2041 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2086 = frontier_phi_14_12_ladder;
        }
        float _2309;
        if (_2055 > 0.0)
        {
            _2309 = abs((1.0 - _2045) / _2055);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2045 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2309 = frontier_phi_23_19_ladder;
        }
        float _2566;
        if (_2058 > 0.0)
        {
            _2566 = abs((1.0 - _2049) / _2058);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2049 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2566 = frontier_phi_35_30_ladder;
        }
        float _2568 = isnan(_2309) ? _2086 : (isnan(_2086) ? _2309 : min(_2086, _2309));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _2052) + _2041;
        float _2574 = (_2569 * _2055) + _2045;
        float _2575 = (_2569 * _2058) + _2049;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2576;
        float _2580 = _2576 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 > _2580) || ((_2574 < _2578) || ((_2573 < _2578) || (_2573 > _2580))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2575, cbModelParam._m0[9u].z, fma(_2574, cbModelParam._m0[9u].y, _2573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2575, cbModelParam._m0[10u].z, fma(_2574, cbModelParam._m0[10u].y, _2573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2575, cbModelParam._m0[11u].z, fma(_2574, cbModelParam._m0[11u].y, _2573 * cbModelParam._m0[11u].x))), _1994);
            frontier_phi_13_35_ladder = _2703.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2703.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2703.x * cbModelParam._m0[1u].y;
        }
        _2074 = frontier_phi_13_35_ladder_2;
        _2076 = frontier_phi_13_35_ladder_1;
        _2078 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2062 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1184, _1185, _1186), _1994);
        _2074 = _2062.x * cbModelParam._m0[1u].y;
        _2076 = _2062.y * cbModelParam._m0[1u].y;
        _2078 = _2062.z * cbModelParam._m0[1u].y;
    }
    float _2082 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1014);
    float _2083 = isnan(_2082) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2082 : min(cbModelParam._m0[25u].w, _2082));
    float _2172;
    float _2174;
    float _2176;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2136 = fma(_1248, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1240)) + cbModelParam._m0[21u].w;
        float _2140 = fma(_1248, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1240)) + cbModelParam._m0[22u].w;
        float _2144 = fma(_1248, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1240)) + cbModelParam._m0[23u].w;
        float _2147 = fma(_1186, cbModelParam._m0[21u].z, fma(_1185, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184));
        float _2150 = fma(_1186, cbModelParam._m0[22u].z, fma(_1185, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184));
        float _2153 = fma(_1186, cbModelParam._m0[23u].z, fma(_1185, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184));
        float _2314;
        if (_2147 > 0.0)
        {
            _2314 = abs((1.0 - _2136) / _2147);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2147 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2136 + 1.0) / _2147);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2314 = frontier_phi_25_21_ladder;
        }
        float _2593;
        if (_2150 > 0.0)
        {
            _2593 = abs((1.0 - _2140) / _2150);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2140 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2593 = frontier_phi_37_32_ladder;
        }
        float _2806;
        if (_2153 > 0.0)
        {
            _2806 = abs((1.0 - _2144) / _2153);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2144 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2806 = frontier_phi_46_43_ladder;
        }
        float _2808 = isnan(_2593) ? _2314 : (isnan(_2314) ? _2593 : min(_2314, _2593));
        float _2809 = isnan(_2806) ? _2808 : (isnan(_2808) ? _2806 : min(_2808, _2806));
        float _2813 = (_2809 * _2147) + _2136;
        float _2814 = (_2809 * _2150) + _2140;
        float _2815 = (_2809 * _2153) + _2144;
        float _2816 = _2809 * 9.9999997473787516355514526367188e-05;
        float _2817 = (-1.0) - _2816;
        float _2819 = _2816 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2815 > _2819) || ((_2815 < _2817) || ((_2814 > _2819) || ((_2814 < _2817) || ((_2813 < _2817) || (_2813 > _2819))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2815, cbModelParam._m0[17u].z, fma(_2814, cbModelParam._m0[17u].y, _2813 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2815, cbModelParam._m0[18u].z, fma(_2814, cbModelParam._m0[18u].y, _2813 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2815, cbModelParam._m0[19u].z, fma(_2814, cbModelParam._m0[19u].y, _2813 * cbModelParam._m0[19u].x))), _2083);
            frontier_phi_22_46_ladder = _3014.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3014.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3014.x * cbModelParam._m0[1u].z;
        }
        _2172 = frontier_phi_22_46_ladder_2;
        _2174 = frontier_phi_22_46_ladder_1;
        _2176 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2156 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1184, _1185, _1186), _2083);
        _2172 = _2156.x * cbModelParam._m0[1u].z;
        _2174 = _2156.y * cbModelParam._m0[1u].z;
        _2176 = _2156.z * cbModelParam._m0[1u].z;
    }
    float _2189 = (((_1211 * _1160) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2172 - _2074)) + _2074);
    float _2191 = (((_1211 * _1162) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2174 - _2076)) + _2076);
    float _2193 = (((_1211 * _1163) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2176 - _2078)) + _2078);
    float _2196 = fma(_2193, cbSceneParam._m0[89u].z, fma(_2191, cbSceneParam._m0[89u].y, _2189 * cbSceneParam._m0[89u].x));
    float _2199 = fma(_2193, cbSceneParam._m0[90u].z, fma(_2191, cbSceneParam._m0[90u].y, _2189 * cbSceneParam._m0[90u].x));
    float _2202 = fma(_2193, cbSceneParam._m0[91u].z, fma(_2191, cbSceneParam._m0[91u].y, _2189 * cbSceneParam._m0[91u].x));
    vec4 _2210 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1098, _1099));
    float _2212 = _2210.w;
    float _2224 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2212);
    float _2225 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2212);
    float _2226 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2212);
    uvec4 _2230 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2232 = _2230.x * 14u;
    uint _2233 = _2232 + 13u;
    float _2240 = _1176 + (-1.0);
    float _2245 = (cbLight._m0[_2233].x * _2240) + 1.0;
    float _2246 = (cbLight._m0[_2233].y * _2240) + 1.0;
    float _2247 = (cbLight._m0[_2233].z * _2240) + 1.0;
    float _2248 = (cbLight._m0[_2233].w * _2240) + 1.0;
    uint _2249 = _2232 + 5u;
    float _2255 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2259 = _2232 + 4u;
    float _2268 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
    uint _2272 = _2232 | 1u;
    float _2283 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_1011, _1012, _1013));
    float _2286 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_1011, _1012, _1013));
    float _4496 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _4507 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2291 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.3183098733425140380859375;
    float _2293 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * 0.3183098733425140380859375;
    float _2300 = ((cbLight._m0[_2249].x * _2255) * _2293) + (((cbLight._m0[_2259].x * _2224) * _2268) * _2291);
    float _2301 = ((_2255 * cbLight._m0[_2249].y) * _2293) + (((cbLight._m0[_2259].y * _2225) * _2268) * _2291);
    float _2302 = ((_2255 * cbLight._m0[_2249].z) * _2293) + (((cbLight._m0[_2259].z * _2226) * _2268) * _2291);
    uvec4 _2306 = floatBitsToUint(cbLight._m0[_2232 + 12u]);
    bool _2308 = _2306.x == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2308)
    {
        _2319 = _2300;
        _2321 = _2301;
        _2323 = _2302;
    }
    else
    {
        uint _2327 = _2232 + 6u;
        float _2343 = (dot(vec3(cbLight._m0[_2232 + 2u].xyz), vec3(_1011, _1012, _1013)) * 0.5) + 0.5;
        float _2344 = _2343 * _2343;
        float _4518 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2345 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2346 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2319 = (((cbLight._m0[_2327].x * 0.3183098733425140380859375) * _2345) * _2346) + _2300;
        _2321 = (((cbLight._m0[_2327].y * 0.3183098733425140380859375) * _2345) * _2346) + _2301;
        _2323 = (((cbLight._m0[_2327].z * 0.3183098733425140380859375) * _2345) * _2346) + _2302;
    }
    bool _2326 = _2306.y == 0u;
    float _2364;
    float _2366;
    float _2368;
    if (_2326)
    {
        _2364 = _2319;
        _2366 = _2321;
        _2368 = _2323;
    }
    else
    {
        uint _2537 = _2232 + 7u;
        float _2553 = (dot(vec3(cbLight._m0[_2232 + 3u].xyz), vec3(_1011, _1012, _1013)) * 0.5) + 0.5;
        float _2554 = _2553 * _2553;
        float _4534 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2555 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2556 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2364 = (((cbLight._m0[_2537].x * 0.3183098733425140380859375) * _2555) * _2556) + _2319;
        _2366 = (((cbLight._m0[_2537].y * 0.3183098733425140380859375) * _2555) * _2556) + _2321;
        _2368 = (((cbLight._m0[_2537].z * 0.3183098733425140380859375) * _2555) * _2556) + _2323;
    }
    uint _2371 = _2232 + 8u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _1014) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2232].x + _1090;
    float _2387 = cbLight._m0[_2232].y + _1091;
    float _2388 = cbLight._m0[_2232].z + _1092;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2232].xyz));
    float _4550 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _4561 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _2400 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2401 = dot(vec3(_1011, _1012, _1013), vec3(_2393, _2394, _2395));
    float _4572 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2405 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2393, _2394, _2395));
    float _4583 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2409 = _2385 * _2385;
    float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
    float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0);
    float _2422 = 0.959999978542327880859375 - _1157;
    float _2424 = 0.959999978542327880859375 - _1158;
    float _2425 = 0.959999978542327880859375 - _1159;
    float _2432 = 1.0 - _2385;
    float _2443 = (0.5 / (((_2400 * ((_2399 * _2432) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2432) + _2385) * _2399))) * _2399;
    float _4594 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
    uint _2459 = _2232 + 9u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _1014) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2272].x + _1090;
    float _2473 = cbLight._m0[_2272].y + _1091;
    float _2474 = cbLight._m0[_2272].z + _1092;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2272].xyz));
    float _4605 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2486 = dot(vec3(_1011, _1012, _1013), vec3(_2479, _2480, _2481));
    float _4616 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2479, _2480, _2481));
    float _4627 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2471 * _2471;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
    float _2512 = 1.0 - _2471;
    float _2522 = (0.5 / (((_2400 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2512) + _2471) * _2485))) * _2485;
    float _4638 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    float _2534 = (((((_2505 * _2422) + _1160) * cbLight._m0[_2459].x) * _2524) * _2255) + ((((cbLight._m0[_2371].x * _2224) * ((_2421 * _2422) + _1160)) * _2445) * _2268);
    float _2535 = (((((_2505 * _2424) + _1162) * cbLight._m0[_2459].y) * _2524) * _2255) + ((((cbLight._m0[_2371].y * _2225) * ((_2421 * _2424) + _1162)) * _2445) * _2268);
    float _2536 = (((((_2505 * _2425) + _1163) * cbLight._m0[_2459].z) * _2524) * _2255) + ((((cbLight._m0[_2371].z * _2226) * ((_2421 * _2425) + _1163)) * _2445) * _2268);
    float _2598;
    float _2600;
    float _2602;
    if (_2308)
    {
        _2598 = _2534;
        _2600 = _2535;
        _2602 = _2536;
    }
    else
    {
        uint _2604 = _2232 + 2u;
        uint _2608 = _2232 + 10u;
        float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _1014) * 0.949999988079071044921875);
        float _2623 = _2622 * _2622;
        float _2624 = cbLight._m0[_2604].x + _1090;
        float _2625 = cbLight._m0[_2604].y + _1091;
        float _2626 = cbLight._m0[_2604].z + _1092;
        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
        float _2631 = _2630 * _2624;
        float _2632 = _2630 * _2625;
        float _2633 = _2630 * _2626;
        float _2634 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2604].xyz));
        float _4649 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2638 = dot(vec3(_1011, _1012, _1013), vec3(_2631, _2632, _2633));
        float _4660 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2642 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2631, _2632, _2633));
        float _4671 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2646 = _2623 * _2623;
        float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
        float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
        float _2664 = 1.0 - _2623;
        float _2674 = (0.5 / (((_2400 * ((_2637 * _2664) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2664) + _2623) * _2637))) * _2637;
        float _4682 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2598 = (((((_2657 * _2422) + _1160) * cbLight._m0[_2608].x) * _2676) * _2677) + _2534;
        _2600 = (((((_2657 * _2424) + _1162) * cbLight._m0[_2608].y) * _2676) * _2677) + _2535;
        _2602 = (((((_2657 * _2425) + _1163) * cbLight._m0[_2608].z) * _2676) * _2677) + _2536;
    }
    float _2712;
    float _2714;
    float _2716;
    if (_2326)
    {
        _2712 = _2598;
        _2714 = _2600;
        _2716 = _2602;
    }
    else
    {
        uint _2723 = _2232 + 3u;
        uint _2727 = _2232 + 11u;
        float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2723].w)) * _1014) * 0.949999988079071044921875);
        float _2742 = _2741 * _2741;
        float _2743 = cbLight._m0[_2723].x + _1090;
        float _2744 = cbLight._m0[_2723].y + _1091;
        float _2745 = cbLight._m0[_2723].z + _1092;
        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
        float _2750 = _2749 * _2743;
        float _2751 = _2749 * _2744;
        float _2752 = _2749 * _2745;
        float _2753 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2723].xyz));
        float _4698 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2757 = dot(vec3(_1011, _1012, _1013), vec3(_2750, _2751, _2752));
        float _4709 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2761 = dot(vec3(cbLight._m0[_2723].xyz), vec3(_2750, _2751, _2752));
        float _4720 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2765 = _2742 * _2742;
        float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
        float _2776 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
        float _2783 = 1.0 - _2742;
        float _2793 = (0.5 / (((_2400 * ((_2756 * _2783) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2783) + _2742) * _2756))) * _2756;
        float _4731 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2712 = (((((_2776 * _2422) + _1160) * cbLight._m0[_2727].x) * _2795) * _2796) + _2598;
        _2714 = (((((_2776 * _2424) + _1162) * cbLight._m0[_2727].y) * _2795) * _2796) + _2600;
        _2716 = (((((_2776 * _2425) + _1163) * cbLight._m0[_2727].z) * _2795) * _2796) + _2602;
    }
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_2230.y == 0u)
    {
        float _2871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2871;
        float _2873 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2871;
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2871;
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.x;
        uint _2898 = uint((float(_2886.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1099) / _2887))) + floor(float(uint(cbSceneParam._m0[85u].x * _1098) / _2887)));
        float _2908 = (log2(_2874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2909 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        uint _2912 = uint(isnan(14.0) ? _2909 : (isnan(_2909) ? 14.0 : min(_2909, 14.0)));
        uvec4 _2917 = texelFetch(g_lightClusterGridBuffer, int(((_2912 << 2u) + (_2898 << 6u)) >> 2u));
        uint _2918 = _2917.x;
        uint _2919 = _2886.z;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((((1u << ((_2919 >> 4u) & 15u)) + 4294967295u) & _2918) == 0u) || ((_2919 & 240u) == 0u))
        {
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
        }
        else
        {
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            uint _3170 = 0u;
            uint _3179;
            bool _3180;
            for (;;)
            {
                _3179 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                _3180 = _3179 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3180)
                {
                    frontier_phi_61_pred = _3164;
                    frontier_phi_61_pred_1 = _3169;
                    frontier_phi_61_pred_2 = _3168;
                    frontier_phi_61_pred_3 = _3167;
                    frontier_phi_61_pred_4 = _3166;
                    frontier_phi_61_pred_5 = _3165;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3179;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3170 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _2872;
                        float _3355 = _3314.y - _2873;
                        float _3356 = _3314.z - _2874;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_1117, _1120, _1123), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4757 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _2872;
                        float _3390 = (-0.0) - _2873;
                        float _3391 = (-0.0) - _2874;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3406 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3407 = 1.0 - _1192;
                        float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                        float _3415 = _3414 * _3414;
                        float _3416 = _3415 * _3415;
                        float _3417 = _3396 + _3361;
                        float _3418 = _3397 + _3362;
                        float _3419 = _3398 + _3363;
                        float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                        float _3427 = dot(vec3(_1117, _1120, _1123), vec3(_3396, _3397, _3398));
                        float _4773 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3431 = dot(vec3(_1117, _1120, _1123), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                        float _4784 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                        float _3439 = _3374 * _3415;
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3364) + _3440;
                        float _4795 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3445 = 1.0 - _3415;
                        float _3455 = (0.5 / (((_3444 * ((_3430 * _3445) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3415) * _3430))) * _3444;
                        float _4806 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3466 = (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) / ((_3438 * _3438) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3223 = (_3385 * _3333.x) + _3291;
                        _3224 = (_3385 * _3333.y) + _3292;
                        _3225 = (_3385 * _3333.z) + _3293;
                        _3220 = (_3466 * _3350.x) + _3288;
                        _3221 = (_3466 * _3350.y) + _3289;
                        _3222 = (_3466 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_61_pred = _3220;
                    frontier_phi_61_pred_1 = _3225;
                    frontier_phi_61_pred_2 = _3224;
                    frontier_phi_61_pred_3 = _3223;
                    frontier_phi_61_pred_4 = _3222;
                    frontier_phi_61_pred_5 = _3221;
                }
                _3020 = frontier_phi_61_pred;
                _3030 = frontier_phi_61_pred_1;
                _3028 = frontier_phi_61_pred_2;
                _3026 = frontier_phi_61_pred_3;
                _3024 = frontier_phi_61_pred_4;
                _3022 = frontier_phi_61_pred_5;
                uint _3171 = _3170 + 1u;
                if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3164 = _3020;
                    _3165 = _3022;
                    _3166 = _3024;
                    _3167 = _3026;
                    _3168 = _3028;
                    _3169 = _3030;
                    _3170 = _3171;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
        }
        uvec4 _3033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3034 = _3033.z;
        uint _3036 = (_3034 >> 8u) & 15u;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((4294967295u << _3036) & _2918) == 0u)
        {
            _3132 = _3019;
            _3134 = _3021;
            _3136 = _3023;
            _3138 = _3025;
            _3140 = _3027;
            _3142 = _3029;
        }
        else
        {
            float _3157 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
            float _3158 = _3157 * _2872;
            float _3159 = _3157 * _2873;
            float _3160 = _3157 * _2874;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3036 < ((_3034 >> 12u) & 15u))
            {
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3271 = _3019;
                float _3272 = _3021;
                float _3273 = _3023;
                float _3274 = _3025;
                float _3275 = _3027;
                float _3276 = _3029;
                uint _3277 = _3036;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3287)
                    {
                        frontier_phi_67_pred = _3274;
                        frontier_phi_67_pred_1 = _3275;
                        frontier_phi_67_pred_2 = _3276;
                        frontier_phi_67_pred_3 = _3273;
                        frontier_phi_67_pred_4 = _3272;
                        frontier_phi_67_pred_5 = _3271;
                    }
                    else
                    {
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3484 = _3271;
                        float _3485 = _3272;
                        float _3486 = _3273;
                        float _3487 = _3274;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        uint _3490 = _3286;
                        uint _3491;
                        vec4 _3516;
                        float _3517;
                        vec4 _3532;
                        vec3 _3544;
                        vec4 _3559;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3501 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3490));
                            _3491 = (_3490 + 4294967295u) & _3490;
                            uint _3503 = _3501 * 40u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3517 = _3516.w;
                            uint _3519 = (_3501 * 40u) + 4u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3501 * 40u) + 8u;
                            _3544 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x));
                            uint _3546 = (_3501 * 40u) + 16u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3501 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3501 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3501 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_2874, _3608.z, fma(_2873, _3608.y, _3608.x * _2872)) + _3608.w;
                            _3621 = !((fma(_2874, _3589.z, fma(_2873, _3589.y, _3589.x * _2872)) + _3589.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3516.x - _2872;
                                float _3649 = _3516.y - _2873;
                                float _3650 = _3516.z - _2874;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3517 * _3517));
                                float _4817 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3666 = sqrt(_3651) * _3532.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_1117, _1120, _1123))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_2874, _3559.z, fma(_2873, _3559.y, _3559.x * _2872)) + _3559.w) / _3620;
                                float _3680 = (fma(_2874, _3574.z, fma(_2873, _3574.y, _3574.x * _2872)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4833 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _1192;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3158;
                                float _3710 = _3656 - _3159;
                                float _3711 = _3657 - _3160;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_1117, _1120, _1123), vec3((-0.0) - _3158, (-0.0) - _3159, (-0.0) - _3160));
                                float _4844 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3723 = dot(vec3(_1117, _1120, _1123), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4855 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_1117, _1120, _1123), vec3(_3655, _3656, _3657))) + _3732;
                                float _4866 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4877 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3760 * _3544.x;
                                frontier_phi_73_pred_1 = _3760 * _3544.y;
                                frontier_phi_73_pred_2 = _3686 * _3532.z;
                                frontier_phi_73_pred_3 = _3686 * _3532.y;
                                frontier_phi_73_pred_4 = _3686 * _3532.x;
                                frontier_phi_73_pred_5 = _3760 * _3544.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3764 = frontier_phi_73_pred;
                            _3765 = frontier_phi_73_pred_1;
                            _3769 = frontier_phi_73_pred_2;
                            _3768 = frontier_phi_73_pred_3;
                            _3767 = frontier_phi_73_pred_4;
                            _3766 = frontier_phi_73_pred_5;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            if (_3491 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3491;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3474;
                        frontier_phi_67_pred_1 = _3475;
                        frontier_phi_67_pred_2 = _3476;
                        frontier_phi_67_pred_3 = _3473;
                        frontier_phi_67_pred_4 = _3472;
                        frontier_phi_67_pred_5 = _3471;
                    }
                    _3139 = frontier_phi_67_pred;
                    _3141 = frontier_phi_67_pred_1;
                    _3143 = frontier_phi_67_pred_2;
                    _3137 = frontier_phi_67_pred_3;
                    _3135 = frontier_phi_67_pred_4;
                    _3133 = frontier_phi_67_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3133;
                        _3272 = _3135;
                        _3273 = _3137;
                        _3274 = _3139;
                        _3275 = _3141;
                        _3276 = _3143;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3141;
                frontier_phi_55_56_ladder_1 = _3143;
                frontier_phi_55_56_ladder_2 = _3139;
                frontier_phi_55_56_ladder_3 = _3137;
                frontier_phi_55_56_ladder_4 = _3135;
                frontier_phi_55_56_ladder_5 = _3133;
            }
            else
            {
                frontier_phi_55_56_ladder = _3027;
                frontier_phi_55_56_ladder_1 = _3029;
                frontier_phi_55_56_ladder_2 = _3025;
                frontier_phi_55_56_ladder_3 = _3023;
                frontier_phi_55_56_ladder_4 = _3021;
                frontier_phi_55_56_ladder_5 = _3019;
            }
            _3132 = frontier_phi_55_56_ladder_5;
            _3134 = frontier_phi_55_56_ladder_4;
            _3136 = frontier_phi_55_56_ladder_3;
            _3138 = frontier_phi_55_56_ladder_2;
            _3140 = frontier_phi_55_56_ladder;
            _3142 = frontier_phi_55_56_ladder_1;
        }
        float _3147 = isnan(1.0) ? _1176 : (isnan(_1176) ? 1.0 : min(_1176, 1.0));
        _2931 = (_3147 * _3138) + _2364;
        _2933 = (_3147 * _3140) + _2366;
        _2935 = (_3147 * _3142) + _2368;
        _2937 = ((_3132 * _1160) * _3147) + _2712;
        _2939 = ((_3134 * _1162) * _3147) + _2714;
        _2941 = ((_3136 * _1163) * _3147) + _2716;
    }
    else
    {
        _2931 = _2364;
        _2933 = _2366;
        _2935 = _2368;
        _2937 = _2712;
        _2939 = _2714;
        _2941 = _2716;
    }
    float _4893 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _4904 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _4915 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    uint _2961 = _293 + 6u;
    float _2969 = _1098 / cbSceneParam._m0[86u].x;
    float _2970 = _1099 / cbSceneParam._m0[86u].y;
    vec4 _2984 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, (log2((isnan(cbSceneParam._m0[77u].w) ? _1033 : (isnan(_1033) ? cbSceneParam._m0[77u].w : min(_1033, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2986 = _2984.x;
    float _2987 = _2984.y;
    float _2988 = _2984.z;
    float _2989 = _2984.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_1033 > cbSceneParam._m0[78u].w)
    {
        float _3044 = isnan(_1033) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1033 : min(cbSceneParam._m0[80u].w, _1033));
        float _3045 = _3044 / _1033;
        float _3056 = _3045 * _1083;
        float _3057 = _1084 * _3045;
        float _3058 = (-0.0) - _3057;
        float _3060 = _3045 * _1085;
        float _3062 = (cbSceneParam._m0[77u].w * _3058) / _3044;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3057;
        float _3070 = sqrt(((_3056 * _3056) + (_3057 * _3057)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3044)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3233;
        if (abs((_3058 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3233 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3193 = 1.0 / cbSceneParam._m0[80u].x;
            float _3194 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3195 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            _3233 = ((abs(_3070 / _3058) * cbSceneParam._m0[80u].y) * ((((_3204 - _3205) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))))) * _3193)) - ((exp2(_3080 * _3204) - exp2(_3080 * _3205)) * _3193))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, 1.0), 0.0);
        float _3244 = exp2((_3233 * (-1.44269502162933349609375)) * (1.0 - _3235.w));
        float _3245 = log2(_3244);
        float _3261 = log2(_2989);
        _3082 = (exp2(_3261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].x)) * _3235.x) / cbSceneParam._m0[78u].x)) + _2986;
        _3084 = (exp2(_3261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].y)) * _3235.y) / cbSceneParam._m0[78u].y)) + _2987;
        _3086 = (exp2(_3261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].z)) * _3235.z) / cbSceneParam._m0[78u].z)) + _2988;
        _3088 = _3244 * _2989;
    }
    else
    {
        _3082 = _2986;
        _3084 = _2987;
        _3086 = _2988;
        _3088 = _2989;
    }
    float _3100 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3101 = _3100 == 3.0;
    float _3102 = log2(_3088);
    float _3109 = exp2(_3102 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2931 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1176))) + ((_2937 + ((isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0))) * _1983)) * cbPerFrame._m0[3u].x));
    float _3110 = exp2(_3102 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2933 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1176))) + ((_2939 + ((isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0))) * _1983)) * cbPerFrame._m0[3u].x));
    float _3111 = exp2(_3102 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2935 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1176))) + ((_2941 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1983)) * cbPerFrame._m0[3u].x));
    float _3120 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3120 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.y = _3120 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.z = _3120 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.w = cbInstanceData._m0[_2961].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2961].w;
}


