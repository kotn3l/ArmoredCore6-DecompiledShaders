#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1627;
float _4004;
float _4005;
float _4006;
float _4007;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _355.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4016 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _433 = (_426 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _434 = (_426 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _435 = (_426 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _355.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4027 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _546 = _544.x;
    float _556 = dot(vec4(_546, _544.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _568 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _355.z) * 2.0) - ((((_546 - _556) * cbMtdParam._m0[23u].w) + _556) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4038 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _576 = (_569 * ((_527.x * cbMtdParam._m0[14u].x) - _506)) + _506;
    float _577 = (_569 * ((_527.y * cbMtdParam._m0[14u].y) - _507)) + _507;
    float _578 = (_569 * ((_527.z * cbMtdParam._m0[14u].z) - _508)) + _508;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _426) + _615;
    float _625 = ((_596.y - _616) * _426) + _616;
    float _626 = ((_596.z - _617) * _426) + _617;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_638.x - _624) * _499) + _624;
    float _650 = ((_638.y - _625) * _499) + _625;
    float _651 = ((_638.z - _626) * _499) + _626;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _676 = ((_663.z - _651) * _569) + _651;
    float _679 = ((((_663.x - _649) * _569) + _649) * 2.0) + (-1.0);
    float _681 = ((((_663.y - _650) * _569) + _650) * 2.0) + (-1.0);
    float _682 = dot(vec2(_679, _681), vec2(_679, _681));
    float _4049 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _713 = (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _679;
    float _714 = (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _681;
    float _717 = fma(_687, _257, fma(_714, _264, _713 * _250));
    float _720 = fma(_687, _258, fma(_714, _265, _713 * _251));
    float _723 = fma(_687, _259, fma(_714, _266, _713 * _252));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _765 = (cbMtdParam._m0[19u].x + dot(vec4(_727 * _717, _727 * _720, _727 * _723, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_756 - _757) * cbMtdParam._m0[24u].z) + _757) * cbMtdParam._m0[21u].z);
    float _4060 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _768 = (-0.0) - cbMtdParam._m0[24u].x;
    float _770 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
    float _778 = _766 - ((_766 * TEXCOORD_8.x) * _771);
    float _779 = _766 - ((_766 * TEXCOORD_8.y) * _771);
    float _780 = _766 - ((_766 * TEXCOORD_8.z) * _771);
    float _787 = (_778 * (cbMtdParam._m0[17u].x - _576)) + _576;
    float _788 = (_779 * (cbMtdParam._m0[17u].y - _577)) + _577;
    float _789 = (_780 * (cbMtdParam._m0[17u].z - _578)) + _578;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _830 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_803 - _804) * cbMtdParam._m0[24u].w) + _804) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4081 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _839 = ((((cbMtdParam._m0[10u].x - _787) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _831) + _787;
    float _840 = ((((cbMtdParam._m0[10u].y - _788) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _831) + _788;
    float _841 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _789)) * _831) + _789;
    vec4 _867 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _869 = _867.x;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _869) * _426) + _869;
    float _904 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _887) * _499) + _887;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _904) * _569) + _904;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _921) * cbMtdParam._m0[19u].z) + _921;
    float _927 = _925 - (_925 * _778);
    float _929 = _927 - (_927 * _831);
    float _933 = (cbMtdParam._m0[19u].w * (_701.z - _676)) + _676;
    vec4 _949 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _956 = (_949.x * 2.0) + (-1.0);
    float _957 = (_949.y * 2.0) + (-1.0);
    float _958 = dot(vec2(_956, _957), vec2(_956, _957));
    float _4092 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _966 = ((_949.z - _933) * _778) + _933;
    float _969 = ((cbMtdParam._m0[23u].x - _966) * _831) + _966;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _998 = (_992.x * 2.0) + (-1.0);
    float _999 = (_992.y * 2.0) + (-1.0);
    float _1000 = dot(vec2(_998, _999), vec2(_998, _999));
    float _4103 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1015 = ((sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) - _687) * _780) + _687;
    float _1018 = (((_956 - _713) * _778) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _1019 = (((_957 - _714) * _779) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _1030 = (((_998 - _1018) + (_1018 * cbMtdParam._m0[22u].z)) * _831) + _1018;
    float _1031 = (((_999 - _1019) + (_1019 * cbMtdParam._m0[22u].z)) * _831) + _1019;
    float _1032 = (_831 * (sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) - _1015)) + _1015;
    float _1034 = cbMtdParam._m0[22u].x + _701.w;
    float _1037 = fma(_1032, _257, fma(_1031, _264, _1030 * _250));
    float _1040 = fma(_1032, _258, fma(_1031, _265, _1030 * _251));
    float _1043 = fma(_1032, _259, fma(_1031, _266, _1030 * _252));
    float _1047 = inversesqrt(dot(vec3(_1037, _1040, _1043), vec3(_1037, _1040, _1043)));
    float _1048 = _1047 * _1037;
    float _1049 = _1047 * _1040;
    float _1050 = _1047 * _1043;
    float _4114 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _1051 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4136 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4147 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4158 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4169 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1056 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1070 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1120 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1110);
    float _1121 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1110);
    float _1122 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1110);
    float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
    float _1127 = _1120 * _1126;
    float _1128 = _1121 * _1126;
    float _1129 = _1122 * _1126;
    vec4 _1134 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1136 = _1134.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1308 = sqrt(((_1120 * _1120) + (_1121 * _1121)) + (_1122 * _1122));
        float _1314 = (cbMatDynParam._m0[5u].x * _1308) + cbMatDynParam._m0[5u].y;
        float _4180 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1319 = (cbMatDynParam._m0[5u].z * _1308) + cbMatDynParam._m0[5u].w;
        float _4191 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) - _1315)) + _1315) < ((_1136 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1147 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1148 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1166 = fma(_1050, cbSceneParam._m0[5u].z, fma(_1049, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1048));
    float _1169 = fma(_1050, cbSceneParam._m0[6u].z, fma(_1049, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1048));
    float _1172 = fma(_1050, cbSceneParam._m0[7u].z, fma(_1049, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1048));
    uint _1185 = _269 + 9u;
    uint _1186 = _1185 + uint(cbMatDynParam._m0[0u].w);
    float _1192 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_1186].x;
    float _1193 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1186].y;
    float _1194 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_1186].z;
    float _4202 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _1198 = 1.0 - _1056;
    float _1199 = _1195 * _1198;
    float _1200 = _1196 * _1198;
    float _1201 = _1197 * _1198;
    float _1206 = (_1195 + (-0.039999999105930328369140625)) * _1056;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1056;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1056;
    float _1209 = _1206 + 0.039999999105930328369140625;
    float _1211 = _1207 + 0.039999999105930328369140625;
    float _1212 = _1208 + 0.039999999105930328369140625;
    vec4 _1221 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1147, cbSceneParam._m0[86u].y * _1148));
    float _1225 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * TEXCOORD_5.w) * _1221.x;
    float _1226 = dot(vec3(_1048, _1049, _1050), vec3(_1127, _1128, _1129));
    float _1229 = _1226 * 2.0;
    float _1233 = (_1229 * _1048) - _1127;
    float _1234 = (_1229 * _1049) - _1128;
    float _1235 = (_1229 * _1050) - _1129;
    float _1239 = abs(dot(vec3(_1127, _1128, _1129), vec3(_1048, _1049, _1050)));
    float _4235 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _1241 = sqrt(_1051);
    float _1254 = exp2((_1241 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1241 * 3.0));
    float _1260 = (1.0 - _1254) * ((_1241 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1261 = _1254 * _1241;
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1626;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1351 = fma(_1297, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289));
        float _1355 = fma(_1297, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289));
        float _1359 = fma(_1297, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289));
        float _1384 = _1289 + _1048;
        float _1385 = _1293 + _1049;
        float _1386 = _1297 + _1050;
        float _1396 = fma(_1386, cbModelParam._m0[26u].z, fma(_1385, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1384)) - _1351;
        float _1397 = fma(_1386, cbModelParam._m0[27u].z, fma(_1385, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1384)) - _1355;
        float _1398 = fma(_1386, cbModelParam._m0[28u].z, fma(_1385, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1384)) - _1359;
        float _1402 = inversesqrt(dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398)));
        float _1415 = ((_1402 * _1396) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1351 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1402 * _1397) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1355 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1402 * _1398) / cbModelParam._m0[34u].z) + ((((((_1359 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        float _1454 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1420.x + (-0.5));
        float _1456 = _1454 * (_1420.y + (-0.5));
        float _1457 = _1454 * (_1420.z + (-0.5));
        float _1464 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1427.x + (-0.5));
        float _1466 = _1464 * (_1427.y + (-0.5));
        float _1467 = _1464 * (_1427.z + (-0.5));
        float _1474 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1434.x + (-0.5));
        float _1476 = _1474 * (_1434.y + (-0.5));
        float _1477 = _1474 * (_1434.z + (-0.5));
        float _1484 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1441.x + (-0.5));
        float _1486 = _1484 * (_1441.y + (-0.5));
        float _1487 = _1484 * (_1441.z + (-0.5));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = _1455 * 0.5;
        float _1492 = _1465 * 0.5;
        float _1493 = _1475 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1508 = (dot(vec3(_1048, _1049, _1050), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1518 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4283 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1520 + 1.0))) + _1525) * _1488;
        float _1535 = _1456 * 0.5;
        float _1536 = _1466 * 0.5;
        float _1537 = _1476 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_1048, _1049, _1050), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4316 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1562 + 1.0))) + _1567) * _1489;
        float _1577 = _1457 * 0.5;
        float _1578 = _1467 * 0.5;
        float _1579 = _1477 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_1048, _1049, _1050), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4349 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1604 + 1.0))) + _1609) * _1490;
        _1626 = _1457;
        _1628 = _1456;
        _1629 = _1455;
        _1630 = _1467;
        _1631 = _1466;
        _1632 = _1465;
        _1633 = _1477;
        _1634 = _1476;
        _1635 = _1475;
        _1636 = _1490;
        _1637 = _1489;
        _1638 = _1488;
        _1639 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1641 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1627;
        _1628 = _1627;
        _1629 = _1627;
        _1630 = _1627;
        _1631 = _1627;
        _1632 = _1627;
        _1633 = _1627;
        _1634 = _1627;
        _1635 = _1627;
        _1636 = _1627;
        _1637 = _1627;
        _1638 = _1627;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1667 = fma(_1297, cbModelParam._m0[30u].z, fma(_1293, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289));
        float _1671 = fma(_1297, cbModelParam._m0[31u].z, fma(_1293, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289));
        float _1675 = fma(_1297, cbModelParam._m0[32u].z, fma(_1293, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289));
        float _1698 = _1289 + _1048;
        float _1699 = _1293 + _1049;
        float _1700 = _1297 + _1050;
        float _1710 = fma(_1700, cbModelParam._m0[30u].z, fma(_1699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1698)) - _1667;
        float _1711 = fma(_1700, cbModelParam._m0[31u].z, fma(_1699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1698)) - _1671;
        float _1712 = fma(_1700, cbModelParam._m0[32u].z, fma(_1699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1698)) - _1675;
        float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
        float _1729 = ((_1716 * _1710) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1667 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1730 = ((_1716 * _1711) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1671 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1731 = ((_1716 * _1712) / cbModelParam._m0[35u].z) + ((((((_1675 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1747 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        float _1766 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1733.x + (-0.5));
        float _1768 = _1766 * (_1733.y + (-0.5));
        float _1769 = _1766 * (_1733.z + (-0.5));
        float _1776 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1740.x + (-0.5));
        float _1778 = _1776 * (_1740.y + (-0.5));
        float _1779 = _1776 * (_1740.z + (-0.5));
        float _1786 = exp2((_1747.w + (-0.5)) * 20.0) * 2.0;
        float _1787 = _1786 * (_1747.x + (-0.5));
        float _1788 = _1786 * (_1747.y + (-0.5));
        float _1789 = _1786 * (_1747.z + (-0.5));
        float _1796 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1797 = _1796 * (_1754.x + (-0.5));
        float _1798 = _1796 * (_1754.y + (-0.5));
        float _1799 = _1796 * (_1754.z + (-0.5));
        float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = _1767 * 0.5;
        float _1804 = _1777 * 0.5;
        float _1805 = _1787 * 0.5;
        float _1806 = dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805));
        float _1811 = (_1806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1806);
        float _1819 = (dot(vec3(_1048, _1049, _1050), vec3(_1811 * _1803, _1811 * _1804, _1811 * _1805)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1828 = sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805)) / (_1800 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1830 = _1829 * 2.0;
        float _1834 = (1.0 - _1829) / (_1829 + 1.0);
        float _4412 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1844 = ((((1.0 - _1835) * (_1830 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1830 + 1.0))) + _1835) * _1800;
        float _1845 = _1768 * 0.5;
        float _1846 = _1778 * 0.5;
        float _1847 = _1788 * 0.5;
        float _1848 = dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847));
        float _1853 = (_1848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1848);
        float _1861 = (dot(vec3(_1048, _1049, _1050), vec3(_1853 * _1845, _1853 * _1846, _1853 * _1847)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1870 = sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1872 = _1871 * 2.0;
        float _1876 = (1.0 - _1871) / (_1871 + 1.0);
        float _4445 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1886 = ((((1.0 - _1877) * (_1872 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1872 + 1.0))) + _1877) * _1801;
        float _1887 = _1769 * 0.5;
        float _1888 = _1779 * 0.5;
        float _1889 = _1789 * 0.5;
        float _1890 = dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889));
        float _1895 = (_1890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1890);
        float _1903 = (dot(vec3(_1048, _1049, _1050), vec3(_1895 * _1887, _1895 * _1888, _1895 * _1889)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1912 = sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1914 = _1913 * 2.0;
        float _1918 = (1.0 - _1913) / (_1913 + 1.0);
        float _4478 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1928 = ((((1.0 - _1919) * (_1914 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1914 + 1.0))) + _1919) * _1802;
        _1936 = _1769;
        _1937 = _1768;
        _1938 = _1767;
        _1939 = _1779;
        _1940 = _1778;
        _1941 = _1777;
        _1942 = _1789;
        _1943 = _1788;
        _1944 = _1787;
        _1945 = _1802;
        _1946 = _1801;
        _1947 = _1800;
        _1948 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)));
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)));
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)));
    }
    else
    {
        _1936 = _1627;
        _1937 = _1627;
        _1938 = _1627;
        _1939 = _1627;
        _1940 = _1627;
        _1941 = _1627;
        _1942 = _1627;
        _1943 = _1627;
        _1944 = _1627;
        _1945 = _1627;
        _1946 = _1627;
        _1947 = _1627;
        _1948 = 0.0;
        _1949 = 0.0;
        _1950 = 0.0;
    }
    float _1960 = (cbModelParam._m0[1u].x * (_1948 - _1639)) + _1639;
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1640)) + _1640;
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1641)) + _1641;
    float _1983 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1960));
    float _2004 = _1233 * 0.5;
    float _2005 = _1234 * 0.5;
    float _2006 = _1235 * 0.5;
    float _2007 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2010 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2013 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1936, _1939, _1942, _1945));
    float _2047;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2020 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1626, _1630, _1633, _1636));
        float _2024 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1628, _1631, _1634, _1637));
        float _2028 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1629, _1632, _1635, _1638));
        float _2035 = dot(vec4(cbModelParam._m0[39u]), vec4(_2004, _2005, _2006, 1.0));
        _2047 = dot(vec3(isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2035) ? 0.0 : (isnan(0.0) ? _2035 : max(0.0, _2035))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2047 = 1.0;
    }
    float _2058;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2049 = dot(vec4(cbModelParam._m0[40u]), vec4(_2004, _2005, _2006, 1.0));
        _2058 = dot(vec3(isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2049) ? 0.0 : (isnan(0.0) ? _2049 : max(0.0, _2049))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2058 = 1.0;
    }
    float _2062 = (_2058 * cbModelParam._m0[1u].x) + (_2047 * (1.0 - cbModelParam._m0[1u].x));
    float _2072 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1051);
    float _2073 = isnan(_2072) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2072 : min(cbModelParam._m0[25u].z, _2072));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2120 = fma(_1297, cbModelParam._m0[13u].z, fma(_1293, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1289)) + cbModelParam._m0[13u].w;
        float _2124 = fma(_1297, cbModelParam._m0[14u].z, fma(_1293, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1289)) + cbModelParam._m0[14u].w;
        float _2128 = fma(_1297, cbModelParam._m0[15u].z, fma(_1293, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1289)) + cbModelParam._m0[15u].w;
        float _2131 = fma(_1235, cbModelParam._m0[13u].z, fma(_1234, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233));
        float _2134 = fma(_1235, cbModelParam._m0[14u].z, fma(_1234, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233));
        float _2137 = fma(_1235, cbModelParam._m0[15u].z, fma(_1234, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233));
        float _2165;
        if (_2131 > 0.0)
        {
            _2165 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2165 = frontier_phi_17_15_ladder;
        }
        float _2368;
        if (_2134 > 0.0)
        {
            _2368 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2368 = frontier_phi_26_22_ladder;
        }
        float _2622;
        if (_2137 > 0.0)
        {
            _2622 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2622 = frontier_phi_38_33_ladder;
        }
        float _2624 = isnan(_2368) ? _2165 : (isnan(_2165) ? _2368 : min(_2165, _2368));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _2131) + _2120;
        float _2630 = (_2625 * _2134) + _2124;
        float _2631 = (_2625 * _2137) + _2128;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2632;
        float _2636 = _2632 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 > _2636) || ((_2630 < _2634) || ((_2629 < _2634) || (_2629 > _2636))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2631, cbModelParam._m0[9u].z, fma(_2630, cbModelParam._m0[9u].y, _2629 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2631, cbModelParam._m0[10u].z, fma(_2630, cbModelParam._m0[10u].y, _2629 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2631, cbModelParam._m0[11u].z, fma(_2630, cbModelParam._m0[11u].y, _2629 * cbModelParam._m0[11u].x))), _2073);
            frontier_phi_16_38_ladder = _2759.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2759.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2759.x * cbModelParam._m0[1u].y;
        }
        _2153 = frontier_phi_16_38_ladder_2;
        _2155 = frontier_phi_16_38_ladder_1;
        _2157 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1233, _1234, _1235), _2073);
        _2153 = _2141.x * cbModelParam._m0[1u].y;
        _2155 = _2141.y * cbModelParam._m0[1u].y;
        _2157 = _2141.z * cbModelParam._m0[1u].y;
    }
    float _2161 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1051);
    float _2162 = isnan(_2161) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2161 : min(cbModelParam._m0[25u].w, _2161));
    float _2252;
    float _2254;
    float _2256;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2216 = fma(_1297, cbModelParam._m0[21u].z, fma(_1293, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1289)) + cbModelParam._m0[21u].w;
        float _2220 = fma(_1297, cbModelParam._m0[22u].z, fma(_1293, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1289)) + cbModelParam._m0[22u].w;
        float _2224 = fma(_1297, cbModelParam._m0[23u].z, fma(_1293, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1289)) + cbModelParam._m0[23u].w;
        float _2227 = fma(_1235, cbModelParam._m0[21u].z, fma(_1234, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233));
        float _2230 = fma(_1235, cbModelParam._m0[22u].z, fma(_1234, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233));
        float _2233 = fma(_1235, cbModelParam._m0[23u].z, fma(_1234, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233));
        float _2373;
        if (_2227 > 0.0)
        {
            _2373 = abs((1.0 - _2216) / _2227);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2216 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2373 = frontier_phi_28_24_ladder;
        }
        float _2649;
        if (_2230 > 0.0)
        {
            _2649 = abs((1.0 - _2220) / _2230);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2220 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2649 = frontier_phi_40_35_ladder;
        }
        float _2862;
        if (_2233 > 0.0)
        {
            _2862 = abs((1.0 - _2224) / _2233);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2224 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2862 = frontier_phi_49_46_ladder;
        }
        float _2864 = isnan(_2649) ? _2373 : (isnan(_2373) ? _2649 : min(_2373, _2649));
        float _2865 = isnan(_2862) ? _2864 : (isnan(_2864) ? _2862 : min(_2864, _2862));
        float _2869 = (_2865 * _2227) + _2216;
        float _2870 = (_2865 * _2230) + _2220;
        float _2871 = (_2865 * _2233) + _2224;
        float _2872 = _2865 * 9.9999997473787516355514526367188e-05;
        float _2873 = (-1.0) - _2872;
        float _2875 = _2872 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2871 > _2875) || ((_2871 < _2873) || ((_2870 > _2875) || ((_2870 < _2873) || ((_2869 < _2873) || (_2869 > _2875))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2871, cbModelParam._m0[17u].z, fma(_2870, cbModelParam._m0[17u].y, _2869 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2871, cbModelParam._m0[18u].z, fma(_2870, cbModelParam._m0[18u].y, _2869 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2871, cbModelParam._m0[19u].z, fma(_2870, cbModelParam._m0[19u].y, _2869 * cbModelParam._m0[19u].x))), _2162);
            frontier_phi_25_49_ladder = _3070.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3070.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3070.x * cbModelParam._m0[1u].z;
        }
        _2252 = frontier_phi_25_49_ladder_2;
        _2254 = frontier_phi_25_49_ladder_1;
        _2256 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2236 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1233, _1234, _1235), _2162);
        _2252 = _2236.x * cbModelParam._m0[1u].z;
        _2254 = _2236.y * cbModelParam._m0[1u].z;
        _2256 = _2236.z * cbModelParam._m0[1u].z;
    }
    float _2269 = (((_1260 * _1209) + _1261) * _1225) * ((cbModelParam._m0[1u].w * (_2252 - _2153)) + _2153);
    float _2271 = (((_1260 * _1211) + _1261) * _1225) * ((cbModelParam._m0[1u].w * (_2254 - _2155)) + _2155);
    float _2273 = (((_1260 * _1212) + _1261) * _1225) * ((cbModelParam._m0[1u].w * (_2256 - _2157)) + _2157);
    float _2276 = fma(_2273, cbSceneParam._m0[89u].z, fma(_2271, cbSceneParam._m0[89u].y, _2269 * cbSceneParam._m0[89u].x));
    float _2279 = fma(_2273, cbSceneParam._m0[90u].z, fma(_2271, cbSceneParam._m0[90u].y, _2269 * cbSceneParam._m0[90u].x));
    float _2282 = fma(_2273, cbSceneParam._m0[91u].z, fma(_2271, cbSceneParam._m0[91u].y, _2269 * cbSceneParam._m0[91u].x));
    uvec4 _2292 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2294 = _2292.x * 14u;
    uint _2295 = _2294 + 13u;
    float _2302 = _1225 + (-1.0);
    float _2307 = (cbLight._m0[_2295].x * _2302) + 1.0;
    float _2308 = (cbLight._m0[_2295].y * _2302) + 1.0;
    float _2309 = (cbLight._m0[_2295].z * _2302) + 1.0;
    float _2310 = (cbLight._m0[_2295].w * _2302) + 1.0;
    uint _2311 = _2294 + 5u;
    float _2317 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
    uint _2321 = _2294 + 4u;
    float _2327 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2331 = _2294 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_1048, _1049, _1050));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_1048, _1049, _1050));
    float _4614 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4625 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2311].x * _2317) * _2352) + ((cbLight._m0[_2321].x * _2327) * _2350);
    float _2360 = ((_2317 * cbLight._m0[_2311].y) * _2352) + ((_2327 * cbLight._m0[_2321].y) * _2350);
    float _2361 = ((_2317 * cbLight._m0[_2311].z) * _2352) + ((_2327 * cbLight._m0[_2321].z) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2294 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2367)
    {
        _2378 = _2359;
        _2380 = _2360;
        _2382 = _2361;
    }
    else
    {
        uint _2386 = _2294 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2294 + 2u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4636 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2405 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2359;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2360;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2361;
    }
    bool _2385 = _2365.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2385)
    {
        _2423 = _2378;
        _2425 = _2380;
        _2427 = _2382;
    }
    else
    {
        uint _2593 = _2294 + 7u;
        float _2609 = (dot(vec3(cbLight._m0[_2294 + 3u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2610 = _2609 * _2609;
        float _4652 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2611 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2612 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2423 = (((cbLight._m0[_2593].x * 0.3183098733425140380859375) * _2611) * _2612) + _2378;
        _2425 = (((cbLight._m0[_2593].y * 0.3183098733425140380859375) * _2611) * _2612) + _2380;
        _2427 = (((cbLight._m0[_2593].z * 0.3183098733425140380859375) * _2611) * _2612) + _2382;
    }
    uint _2430 = _2294 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _1051) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2294].x + _1127;
    float _2446 = cbLight._m0[_2294].y + _1128;
    float _2447 = cbLight._m0[_2294].z + _1129;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2294].xyz));
    float _4668 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _2459 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2460 = dot(vec3(_1048, _1049, _1050), vec3(_2452, _2453, _2454));
    float _4690 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2452, _2453, _2454));
    float _4701 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _1206;
    float _2483 = 0.959999978542327880859375 - _1207;
    float _2484 = 0.959999978542327880859375 - _1208;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4712 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2515 = _2294 + 9u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _1051) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2331].x + _1127;
    float _2529 = cbLight._m0[_2331].y + _1128;
    float _2530 = cbLight._m0[_2331].z + _1129;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2331].xyz));
    float _4723 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2542 = dot(vec3(_1048, _1049, _1050), vec3(_2535, _2536, _2537));
    float _4734 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2535, _2536, _2537));
    float _4745 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2527 * _2527;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2568 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2459 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2568) + _2527) * _2541))) * _2541;
    float _4756 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    float _2590 = (((((_2561 * _2481) + _1209) * cbLight._m0[_2515].x) * _2580) * _2317) + (((((_2480 * _2481) + _1209) * cbLight._m0[_2430].x) * _2504) * _2327);
    float _2591 = (((((_2561 * _2483) + _1211) * cbLight._m0[_2515].y) * _2580) * _2317) + (((((_2480 * _2483) + _1211) * cbLight._m0[_2430].y) * _2504) * _2327);
    float _2592 = (((((_2561 * _2484) + _1212) * cbLight._m0[_2515].z) * _2580) * _2317) + (((((_2480 * _2484) + _1212) * cbLight._m0[_2430].z) * _2504) * _2327);
    float _2654;
    float _2656;
    float _2658;
    if (_2367)
    {
        _2654 = _2590;
        _2656 = _2591;
        _2658 = _2592;
    }
    else
    {
        uint _2660 = _2294 + 2u;
        uint _2664 = _2294 + 10u;
        float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2660].w)) * _1051) * 0.949999988079071044921875);
        float _2679 = _2678 * _2678;
        float _2680 = cbLight._m0[_2660].x + _1127;
        float _2681 = cbLight._m0[_2660].y + _1128;
        float _2682 = cbLight._m0[_2660].z + _1129;
        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
        float _2687 = _2686 * _2680;
        float _2688 = _2686 * _2681;
        float _2689 = _2686 * _2682;
        float _2690 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2660].xyz));
        float _4767 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2694 = dot(vec3(_1048, _1049, _1050), vec3(_2687, _2688, _2689));
        float _4778 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2698 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_2687, _2688, _2689));
        float _4789 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2702 = _2679 * _2679;
        float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
        float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2720 = 1.0 - _2679;
        float _2730 = (0.5 / (((_2459 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2720) + _2679) * _2693))) * _2693;
        float _4800 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2654 = (((((_2713 * _2481) + _1209) * cbLight._m0[_2664].x) * _2732) * _2733) + _2590;
        _2656 = (((((_2713 * _2483) + _1211) * cbLight._m0[_2664].y) * _2732) * _2733) + _2591;
        _2658 = (((((_2713 * _2484) + _1212) * cbLight._m0[_2664].z) * _2732) * _2733) + _2592;
    }
    float _2768;
    float _2770;
    float _2772;
    if (_2385)
    {
        _2768 = _2654;
        _2770 = _2656;
        _2772 = _2658;
    }
    else
    {
        uint _2779 = _2294 + 3u;
        uint _2783 = _2294 + 11u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _1051) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _1127;
        float _2800 = cbLight._m0[_2779].y + _1128;
        float _2801 = cbLight._m0[_2779].z + _1129;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2779].xyz));
        float _4816 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2813 = dot(vec3(_1048, _1049, _1050), vec3(_2806, _2807, _2808));
        float _4827 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4838 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2839 = 1.0 - _2798;
        float _2849 = (0.5 / (((_2459 * ((_2812 * _2839) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2839) + _2798) * _2812))) * _2812;
        float _4849 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2768 = (((((_2832 * _2481) + _1209) * cbLight._m0[_2783].x) * _2851) * _2852) + _2654;
        _2770 = (((((_2832 * _2483) + _1211) * cbLight._m0[_2783].y) * _2851) * _2852) + _2656;
        _2772 = (((((_2832 * _2484) + _1212) * cbLight._m0[_2783].z) * _2851) * _2852) + _2658;
    }
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_2292.y == 0u)
    {
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2927;
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2927;
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2927;
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.x;
        uint _2954 = uint((float(_2942.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1148) / _2943))) + floor(float(uint(cbSceneParam._m0[85u].x * _1147) / _2943)));
        float _2964 = (log2(_2930 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2965 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        uint _2968 = uint(isnan(14.0) ? _2965 : (isnan(_2965) ? 14.0 : min(_2965, 14.0)));
        uvec4 _2973 = texelFetch(g_lightClusterGridBuffer, int(((_2968 << 2u) + (_2954 << 6u)) >> 2u));
        uint _2974 = _2973.x;
        uint _2975 = _2942.z;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((((1u << ((_2975 >> 4u) & 15u)) + 4294967295u) & _2974) == 0u) || ((_2975 & 240u) == 0u))
        {
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
        }
        else
        {
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            uint _3233 = 0u;
            uint _3242;
            bool _3243;
            for (;;)
            {
                _3242 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                _3243 = _3242 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3243)
                {
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                else
                {
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    uint _3378;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3242;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    for (;;)
                    {
                        uint _3382 = uint(findLSB(_3378)) + (_3233 << 5u);
                        uint _3379 = (_3378 + 4294967295u) & _3378;
                        uint _3384 = _3382 * 48u;
                        vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3404 = (_3382 * 48u) + 4u;
                        vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 3u)).x));
                        uint _3423 = (_3382 * 48u) + 8u;
                        vec3 _3434 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x));
                        float _3438 = _3398.x - _2928;
                        float _3439 = _3398.y - _2929;
                        float _3440 = _3398.z - _2930;
                        float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                        float _3444 = inversesqrt(_3441);
                        float _3445 = _3444 * _3438;
                        float _3446 = _3444 * _3439;
                        float _3447 = _3444 * _3440;
                        float _3448 = dot(vec3(_1166, _1169, _1172), vec3(_3445, _3446, _3447));
                        float _3453 = 1.0 - (_3441 * _3398.w);
                        float _4875 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3455 = sqrt(_3441) * _3417.w;
                        float _3458 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3448) + _3459;
                        float _3465 = _3455 * _3455;
                        float _3469 = ((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3454) / ((_3465 * 0.699999988079071044921875) + 1.0);
                        float _3473 = (-0.0) - _2928;
                        float _3474 = (-0.0) - _2929;
                        float _3475 = (-0.0) - _2930;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3490 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _1241;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3480 + _3445;
                        float _3502 = _3481 + _3446;
                        float _3503 = _3482 + _3447;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_1166, _1169, _1172), vec3(_3480, _3481, _3482));
                        float _4891 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3515 = dot(vec3(_1166, _1169, _1172), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4902 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3458 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3448) + _3524;
                        float _4913 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4924 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3522 * _3522) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125))) * _3454;
                        _3302 = (_3469 * _3417.x) + _3375;
                        _3303 = (_3469 * _3417.y) + _3376;
                        _3304 = (_3469 * _3417.z) + _3377;
                        _3299 = (_3550 * _3434.x) + _3372;
                        _3300 = (_3550 * _3434.y) + _3373;
                        _3301 = (_3550 * _3434.z) + _3374;
                        if (_3379 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3379;
                        }
                    }
                    frontier_phi_66_pred = _3299;
                    frontier_phi_66_pred_1 = _3304;
                    frontier_phi_66_pred_2 = _3303;
                    frontier_phi_66_pred_3 = _3302;
                    frontier_phi_66_pred_4 = _3301;
                    frontier_phi_66_pred_5 = _3300;
                }
                _3076 = frontier_phi_66_pred;
                _3086 = frontier_phi_66_pred_1;
                _3084 = frontier_phi_66_pred_2;
                _3082 = frontier_phi_66_pred_3;
                _3080 = frontier_phi_66_pred_4;
                _3078 = frontier_phi_66_pred_5;
                uint _3234 = _3233 + 1u;
                if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3227 = _3076;
                    _3228 = _3078;
                    _3229 = _3080;
                    _3230 = _3082;
                    _3231 = _3084;
                    _3232 = _3086;
                    _3233 = _3234;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
        }
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.z;
        uint _3092 = (_3090 >> 8u) & 15u;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        if (((4294967295u << _3092) & _2974) == 0u)
        {
            _3195 = _3075;
            _3197 = _3077;
            _3199 = _3079;
            _3201 = _3081;
            _3203 = _3083;
            _3205 = _3085;
        }
        else
        {
            float _3220 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
            float _3221 = _3220 * _2928;
            float _3222 = _3220 * _2929;
            float _3223 = _3220 * _2930;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3092 < ((_3090 >> 12u) & 15u))
            {
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3355 = _3075;
                float _3356 = _3077;
                float _3357 = _3079;
                float _3358 = _3081;
                float _3359 = _3083;
                float _3360 = _3085;
                uint _3361 = _3092;
                uint _3370;
                bool _3371;
                for (;;)
                {
                    _3370 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3361 << 2u)) >> 2u)).x;
                    _3371 = _3370 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3371)
                    {
                        frontier_phi_77_pred = _3360;
                        frontier_phi_77_pred_1 = _3359;
                        frontier_phi_77_pred_2 = _3358;
                        frontier_phi_77_pred_3 = _3357;
                        frontier_phi_77_pred_4 = _3356;
                        frontier_phi_77_pred_5 = _3355;
                    }
                    else
                    {
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        uint _3583 = _3370;
                        uint _3584;
                        vec4 _3609;
                        float _3610;
                        vec4 _3625;
                        vec3 _3637;
                        vec4 _3652;
                        vec4 _3667;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3594 = ((_3361 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3583));
                            _3584 = (_3583 + 4294967295u) & _3583;
                            uint _3596 = _3594 * 40u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3610 = _3609.w;
                            uint _3612 = (_3594 * 40u) + 4u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3594 * 40u) + 8u;
                            _3637 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x));
                            uint _3639 = (_3594 * 40u) + 16u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3594 * 40u) + 20u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3594 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3594 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2930, _3701.z, fma(_2929, _3701.y, _3701.x * _2928)) + _3701.w;
                            _3714 = !((fma(_2930, _3682.z, fma(_2929, _3682.y, _3682.x * _2928)) + _3682.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3609.x - _2928;
                                float _3742 = _3609.y - _2929;
                                float _3743 = _3609.z - _2930;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3610 * _3610));
                                float _4935 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3759 = sqrt(_3744) * _3625.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_1166, _1169, _1172))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2930, _3652.z, fma(_2929, _3652.y, _3652.x * _2928)) + _3652.w) / _3713;
                                float _3773 = (fma(_2930, _3667.z, fma(_2929, _3667.y, _3667.x * _2928)) + _3667.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4951 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _1241;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3221;
                                float _3803 = _3749 - _3222;
                                float _3804 = _3750 - _3223;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_1166, _1169, _1172), vec3((-0.0) - _3221, (-0.0) - _3222, (-0.0) - _3223));
                                float _4962 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3816 = dot(vec3(_1166, _1169, _1172), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _4973 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_1166, _1169, _1172), vec3(_3748, _3749, _3750))) + _3825;
                                float _4984 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _4995 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3779 * _3625.y;
                                frontier_phi_83_pred_1 = _3779 * _3625.x;
                                frontier_phi_83_pred_2 = _3853 * _3637.z;
                                frontier_phi_83_pred_3 = _3853 * _3637.y;
                                frontier_phi_83_pred_4 = _3853 * _3637.x;
                                frontier_phi_83_pred_5 = _3779 * _3625.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3861 = frontier_phi_83_pred;
                            _3860 = frontier_phi_83_pred_1;
                            _3859 = frontier_phi_83_pred_2;
                            _3858 = frontier_phi_83_pred_3;
                            _3857 = frontier_phi_83_pred_4;
                            _3862 = frontier_phi_83_pred_5;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            if (_3584 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3584;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3569;
                        frontier_phi_77_pred_1 = _3568;
                        frontier_phi_77_pred_2 = _3567;
                        frontier_phi_77_pred_3 = _3566;
                        frontier_phi_77_pred_4 = _3565;
                        frontier_phi_77_pred_5 = _3564;
                    }
                    _3206 = frontier_phi_77_pred;
                    _3204 = frontier_phi_77_pred_1;
                    _3202 = frontier_phi_77_pred_2;
                    _3200 = frontier_phi_77_pred_3;
                    _3198 = frontier_phi_77_pred_4;
                    _3196 = frontier_phi_77_pred_5;
                    uint _3362 = _3361 + 1u;
                    if (_3362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3355 = _3196;
                        _3356 = _3198;
                        _3357 = _3200;
                        _3358 = _3202;
                        _3359 = _3204;
                        _3360 = _3206;
                        _3361 = _3362;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3200;
                frontier_phi_58_59_ladder_1 = _3206;
                frontier_phi_58_59_ladder_2 = _3204;
                frontier_phi_58_59_ladder_3 = _3202;
                frontier_phi_58_59_ladder_4 = _3198;
                frontier_phi_58_59_ladder_5 = _3196;
            }
            else
            {
                frontier_phi_58_59_ladder = _3079;
                frontier_phi_58_59_ladder_1 = _3085;
                frontier_phi_58_59_ladder_2 = _3083;
                frontier_phi_58_59_ladder_3 = _3081;
                frontier_phi_58_59_ladder_4 = _3077;
                frontier_phi_58_59_ladder_5 = _3075;
            }
            _3195 = frontier_phi_58_59_ladder_5;
            _3197 = frontier_phi_58_59_ladder_4;
            _3199 = frontier_phi_58_59_ladder;
            _3201 = frontier_phi_58_59_ladder_3;
            _3203 = frontier_phi_58_59_ladder_2;
            _3205 = frontier_phi_58_59_ladder_1;
        }
        float _3210 = isnan(1.0) ? _1225 : (isnan(_1225) ? 1.0 : min(_1225, 1.0));
        _2987 = (_3210 * _3201) + _2423;
        _2989 = (_3210 * _3203) + _2425;
        _2991 = (_3210 * _3205) + _2427;
        _2993 = ((_3195 * _1209) * _3210) + _2768;
        _2995 = ((_3197 * _1211) * _3210) + _2770;
        _2997 = ((_3199 * _1212) * _3210) + _2772;
    }
    else
    {
        _2987 = _2423;
        _2989 = _2425;
        _2991 = _2427;
        _2993 = _2768;
        _2995 = _2770;
        _2997 = _2772;
    }
    float _5011 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _5022 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _5033 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _3014 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2987 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1225))) + ((_2993 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    float _3015 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2989 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1225))) + ((_2995 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    float _3016 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2991 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1225))) + ((_2997 + ((isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    uint _3017 = _269 + 6u;
    float _3025 = _1147 / cbSceneParam._m0[86u].x;
    float _3026 = _1148 / cbSceneParam._m0[86u].y;
    vec4 _3040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, (log2((isnan(cbSceneParam._m0[77u].w) ? _1070 : (isnan(_1070) ? cbSceneParam._m0[77u].w : min(_1070, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3042 = _3040.x;
    float _3043 = _3040.y;
    float _3044 = _3040.z;
    float _3045 = _3040.w;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_1070 > cbSceneParam._m0[78u].w)
    {
        float _3100 = isnan(_1070) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1070 : min(cbSceneParam._m0[80u].w, _1070));
        float _3101 = _3100 / _1070;
        float _3112 = _3101 * _1120;
        float _3113 = _1121 * _3101;
        float _3114 = (-0.0) - _3113;
        float _3115 = _3101 * _1122;
        float _3117 = (cbSceneParam._m0[77u].w * _3114) / _3100;
        float _3118 = _3117 + cbSceneParam._m0[79u].w;
        float _3119 = cbSceneParam._m0[79u].w - _3113;
        float _3125 = sqrt(((_3112 * _3112) + (_3113 * _3113)) + (_3115 * _3115));
        float _3128 = (1.0 - (cbSceneParam._m0[77u].w / _3100)) * _3125;
        float _3133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3312;
        if (abs((_3114 - _3117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3312 = ((((_3118 > 0.0) ? exp2(_3133 * _3118) : (2.0 - exp2(_3135 * _3118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3128;
        }
        else
        {
            float _3256 = 1.0 / cbSceneParam._m0[80u].x;
            float _3257 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : max(_3118, _3119));
            float _3258 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : min(_3118, _3119));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            _3312 = ((abs(_3125 / _3114) * cbSceneParam._m0[80u].y) * ((((_3267 - _3268) * 2.0) - ((exp2(_3133 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0)))) - exp2(_3133 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))))) * _3256)) - ((exp2(_3135 * _3267) - exp2(_3135 * _3268)) * _3256))) + (_3128 * cbSceneParam._m0[80u].z);
        }
        vec4 _3314 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, 1.0), 0.0);
        float _3323 = exp2((_3312 * (-1.44269502162933349609375)) * (1.0 - _3314.w));
        float _3324 = log2(_3323);
        float _3340 = log2(_3045);
        _3137 = (exp2(_3340 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].x)) * _3314.x) / cbSceneParam._m0[78u].x)) + _3042;
        _3139 = (exp2(_3340 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].y)) * _3314.y) / cbSceneParam._m0[78u].y)) + _3043;
        _3141 = (exp2(_3340 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].z)) * _3314.z) / cbSceneParam._m0[78u].z)) + _3044;
        _3143 = _3323 * _3045;
    }
    else
    {
        _3137 = _3042;
        _3139 = _3043;
        _3141 = _3044;
        _3143 = _3045;
    }
    bool _3350;
    vec4 _3153;
    vec4 _3175;
    float _3177;
    float _3181;
    float _3182;
    float _3183;
    float _3184;
    bool _3194;
    for (;;)
    {
        _3153 = cbMatDynParam._m0[0u];
        float _3155 = roundEven(_3153.y);
        bool _3156 = _3155 == 3.0;
        float _3157 = log2(_3143);
        float _3164 = exp2(_3157 * cbSceneParam._m0[78u].x) * _3014;
        float _3165 = exp2(_3157 * cbSceneParam._m0[78u].y) * _3015;
        float _3166 = exp2(_3157 * cbSceneParam._m0[78u].z) * _3016;
        float _3173 = _1136 + (-0.5);
        _3175 = cbMtdParam._m0[1u];
        _3177 = _3175.y * _3173;
        float _3180 = (_3155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3181 = _3180 * (_3156 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3137)));
        _3182 = _3180 * (_3156 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3139)));
        _3183 = _3180 * (_3156 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3141)));
        _3184 = _3173 * 0.999000012874603271484375;
        _3194 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3194)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3184) < 0.5)
            {
                _3350 = true;
                break;
            }
        }
        uint _3291 = _1185 + uint(_3153.w);
        if ((cbInstanceData._m0[_3291].w < 1.0) && ((cbInstanceData._m0[_3291].w + _3184) < 0.5))
        {
            _3350 = true;
            break;
        }
        if ((_3177 + 1.0) < _3175.x)
        {
            _3350 = true;
            break;
        }
        _3350 = false;
        break;
    }
    float _3555;
    if (_3350)
    {
        discard_state = true;
        _3555 = 0.0;
    }
    else
    {
        _3555 = cbInstanceData._m0[_3017].w;
    }
    SV_Target.x = _3181;
    SV_Target.y = _3182;
    SV_Target.z = _3183;
    SV_Target.w = _3555;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3017].w;
    discard_exit();
}


