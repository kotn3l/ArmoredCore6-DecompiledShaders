#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1772;
float _4432;
float _4433;
float _4434;
float _4435;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _262 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _263 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _264 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _270 = inversesqrt(dot(vec3(_262, _263, _264), vec3(_262, _263, _264)));
    float _277 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _284 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _296 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _298 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _299 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4444 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _4455 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _4466 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    uint _309 = uint(roundEven(NORMAL.w)) * 13u;
    uint _314 = _309 + 1u;
    uint _318 = _309 + 2u;
    float _327 = sqrt(((cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x) + (cbInstanceData._m0[_309].x * cbInstanceData._m0[_309].x)) + (cbInstanceData._m0[_318].x * cbInstanceData._m0[_318].x));
    float _328 = _327 * TEXCOORD.z;
    float _329 = _327 * TEXCOORD.w;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _328) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _329) + cbTextureTilingScale._m0[13u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _396 = _391.x * cbMtdParam._m0[11u].x;
    float _397 = _391.y * cbMtdParam._m0[11u].y;
    float _398 = _391.z * cbMtdParam._m0[11u].z;
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _328) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _329) + cbTextureTilingScale._m0[5u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _473 = _471.x;
    float _485 = dot(vec4(_473, _471.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _502 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _436.x) * 2.0) - ((((_473 - _485) * cbMtdParam._m0[23u].w) + _485) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4477 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _510 = (_503 * ((_417.x * cbMtdParam._m0[12u].x) - _396)) + _396;
    float _511 = (_503 * ((_417.y * cbMtdParam._m0[12u].y) - _397)) + _397;
    float _512 = (_503 * ((_417.z * cbMtdParam._m0[12u].z) - _398)) + _398;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _328) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _329) + cbTextureTilingScale._m0[3u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _551 = _549.x;
    float _561 = dot(vec4(_551, _549.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _575 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _436.y) * 2.0) - ((((_551 - _561) * cbMtdParam._m0[23u].w) + _561) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4488 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _583 = (_576 * ((_529.x * cbMtdParam._m0[13u].x) - _510)) + _510;
    float _584 = (_576 * ((_529.y * cbMtdParam._m0[13u].y) - _511)) + _511;
    float _585 = (_576 * ((_529.z * cbMtdParam._m0[13u].z) - _512)) + _512;
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _328) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _329) + cbTextureTilingScale._m0[24u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _623 = _621.x;
    float _633 = dot(vec4(_623, _621.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _645 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _436.z) * 2.0) - ((((_623 - _633) * cbMtdParam._m0[23u].w) + _633) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4499 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _656 = (_365.x * cbMtdParam._m0[9u].x) * ((_646 * ((_604.x * cbMtdParam._m0[14u].x) - _583)) + _583);
    float _657 = (_365.y * cbMtdParam._m0[9u].y) * ((_646 * ((_604.y * cbMtdParam._m0[14u].y) - _584)) + _584);
    float _658 = (_365.z * cbMtdParam._m0[9u].z) * ((_646 * ((_604.z * cbMtdParam._m0[14u].z) - _585)) + _585);
    float _662 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _342.x) * _656;
    float _665 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _342.y) * _657;
    float _668 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _342.z) * _658;
    float _676 = (((_656 - _662) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) + _662) * 4.55000019073486328125;
    float _678 = (((_657 - _665) * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) + _665) * 4.55000019073486328125;
    float _680 = (((_658 - _668) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) + _668) * 4.55000019073486328125;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _328) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _329) + cbTextureTilingScale._m0[14u].w));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _328) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _329) + cbTextureTilingScale._m0[20u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _328) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _329) + cbTextureTilingScale._m0[4u].w));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _759 = _757.x;
    float _760 = _757.y;
    float _761 = _757.z;
    float _768 = ((_740.x - _759) * _503) + _759;
    float _769 = ((_740.y - _760) * _503) + _760;
    float _770 = ((_740.z - _761) * _503) + _761;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _328) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _329) + cbTextureTilingScale._m0[2u].w));
    float _793 = ((_782.x - _768) * _576) + _768;
    float _794 = ((_782.y - _769) * _576) + _769;
    float _795 = ((_782.z - _770) * _576) + _770;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _328) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _329) + cbTextureTilingScale._m0[23u].w));
    float _820 = ((_807.z - _795) * _646) + _795;
    float _823 = ((((_807.x - _793) * _646) + _793) * 2.0) + (-1.0);
    float _824 = ((((_807.y - _794) * _646) + _794) * 2.0) + (-1.0);
    float _825 = dot(vec2(_823, _824), vec2(_823, _824));
    float _4510 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _830 = sqrt(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))));
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _328) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _329) + cbTextureTilingScale._m0[11u].w));
    float _871 = _869.x;
    float _872 = 1.0 - _871;
    float _880 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _883 = ((isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : min(_880, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _892 = (_883 - ((((((_871 - _872) * cbMtdParam._m0[24u].z) + _872) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _883))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4531 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _893 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _900 = (_893 * ((_698.x * cbMtdParam._m0[18u].x) - _676)) + _676;
    float _901 = (_893 * ((_698.y * cbMtdParam._m0[18u].y) - _678)) + _678;
    float _902 = (_893 * ((_698.z * cbMtdParam._m0[18u].z) - _680)) + _680;
    float _917 = sqrt(((cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x) + (cbInstanceData._m0[_309].x * cbInstanceData._m0[_309].x)) + (cbInstanceData._m0[_318].x * cbInstanceData._m0[_318].x));
    float _918 = _917 * TEXCOORD.z;
    float _919 = _917 * TEXCOORD.w;
    vec4 _931 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _918) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _919) + cbTextureTilingScale._m0[19u].w));
    float _933 = _931.x;
    float _934 = 1.0 - _933;
    float _959 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_933 - _934) * cbMtdParam._m0[24u].w) + _934) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4542 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _960 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _968 = ((((cbMtdParam._m0[10u].x - _900) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _960) + _900;
    float _969 = ((((cbMtdParam._m0[10u].y - _901) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _960) + _901;
    float _970 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _902)) * _960) + _902;
    vec4 _996 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _998 = _996.x;
    float _1015 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _328) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _329) + cbTextureTilingScale._m0[9u].w)).x - _998) * _503) + _998;
    float _1032 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _328) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _329) + cbTextureTilingScale._m0[21u].w)).x - _1015) * _576) + _1015;
    float _1049 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _328) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _329) + cbTextureTilingScale._m0[10u].w)).x - _1032) * _646) + _1032;
    float _1055 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1049) * cbMtdParam._m0[19u].z) + _1049;
    float _1057 = _1055 - (_1055 * _893);
    float _1059 = _1057 - (_1057 * _960);
    float _1064 = (((_717.z - _820) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _820;
    float _1068 = ((_844.z - _1064) * cbMtdParam._m0[19u].w) + _1064;
    vec4 _1084 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _328) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _329) + cbTextureTilingScale._m0[15u].w));
    float _1091 = (_1084.x * 2.0) + (-1.0);
    float _1092 = (_1084.y * 2.0) + (-1.0);
    float _1093 = dot(vec2(_1091, _1092), vec2(_1091, _1092));
    float _4553 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1101 = (_893 * (_1084.z - _1068)) + _1068;
    float _1104 = ((cbMtdParam._m0[23u].x - _1101) * _960) + _1101;
    vec4 _1127 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _918) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _919) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1133 = (_1127.x * 2.0) + (-1.0);
    float _1134 = (_1127.y * 2.0) + (-1.0);
    float _1135 = dot(vec2(_1133, _1134), vec2(_1133, _1134));
    float _4564 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1149 = (_823 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_717.x * 2.0) + (-1.0)))) + (((_844.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1150 = (_824 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_717.y * 2.0) + (-1.0)))) + (((_844.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1162 = (((_1091 - _1149) + (cbMtdParam._m0[21u].x * _1149)) * _893) + _1149;
    float _1163 = (((_1092 - _1150) + (cbMtdParam._m0[21u].x * _1150)) * _893) + _1150;
    float _1164 = (_893 * (sqrt(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) - _830)) + _830;
    float _1175 = (((_1133 - _1162) + (_1162 * cbMtdParam._m0[22u].z)) * _960) + _1162;
    float _1176 = (((_1134 - _1163) + (_1163 * cbMtdParam._m0[22u].z)) * _960) + _1163;
    float _1177 = ((sqrt(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) - _1164) * _960) + _1164;
    float _1179 = cbMtdParam._m0[22u].x + _844.w;
    float _1182 = fma(_1177, _277 * NORMAL.x, fma(_1176, _284 * TANGENT.x, (_270 * _262) * _1175));
    float _1185 = fma(_1177, _277 * NORMAL.y, fma(_1176, _284 * TANGENT.y, (_270 * _263) * _1175));
    float _1188 = fma(_1177, _277 * NORMAL.z, fma(_1176, _284 * TANGENT.z, (_270 * _264) * _1175));
    float _1192 = inversesqrt(dot(vec3(_1182, _1185, _1188), vec3(_1182, _1185, _1188)));
    float _1193 = _1192 * _1182;
    float _1194 = _1192 * _1185;
    float _1195 = _1192 * _1188;
    float _4575 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1196 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _4597 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4608 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4619 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4630 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1201 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _1215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1255);
    float _1266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1255);
    float _1267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1255);
    float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
    float _1272 = _1265 * _1271;
    float _1273 = _1266 * _1271;
    float _1274 = _1267 * _1271;
    vec4 _1279 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1281 = _1279.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1453 = sqrt(((_1265 * _1265) + (_1266 * _1266)) + (_1267 * _1267));
        float _1459 = (cbMatDynParam._m0[5u].x * _1453) + cbMatDynParam._m0[5u].y;
        float _4641 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _1464 = (cbMatDynParam._m0[5u].z * _1453) + cbMatDynParam._m0[5u].w;
        float _4652 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) - _1460)) + _1460) < ((_1281 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1292 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1293 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1311 = fma(_1195, cbSceneParam._m0[5u].z, fma(_1194, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1193));
    float _1314 = fma(_1195, cbSceneParam._m0[6u].z, fma(_1194, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1193));
    float _1317 = fma(_1195, cbSceneParam._m0[7u].z, fma(_1194, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1193));
    uint _1330 = _309 + 9u;
    uint _1331 = _1330 + uint(cbMatDynParam._m0[0u].w);
    float _1337 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * cbInstanceData._m0[_1331].x;
    float _1338 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * cbInstanceData._m0[_1331].y;
    float _1339 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * cbInstanceData._m0[_1331].z;
    float _4663 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1340 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _1341 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _4685 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _1342 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _1343 = 1.0 - _1201;
    float _1344 = _1340 * _1343;
    float _1345 = _1341 * _1343;
    float _1346 = _1342 * _1343;
    float _1351 = (_1340 + (-0.039999999105930328369140625)) * _1201;
    float _1352 = (_1341 + (-0.039999999105930328369140625)) * _1201;
    float _1353 = (_1342 + (-0.039999999105930328369140625)) * _1201;
    float _1354 = _1351 + 0.039999999105930328369140625;
    float _1356 = _1352 + 0.039999999105930328369140625;
    float _1357 = _1353 + 0.039999999105930328369140625;
    vec4 _1366 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1292, cbSceneParam._m0[86u].y * _1293));
    float _1370 = ((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * TEXCOORD_5.w) * _1366.x;
    float _1371 = dot(vec3(_1193, _1194, _1195), vec3(_1272, _1273, _1274));
    float _1374 = _1371 * 2.0;
    float _1378 = (_1374 * _1193) - _1272;
    float _1379 = (_1374 * _1194) - _1273;
    float _1380 = (_1374 * _1195) - _1274;
    float _1384 = abs(dot(vec3(_1272, _1273, _1274), vec3(_1193, _1194, _1195)));
    float _4696 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
    float _1386 = sqrt(_1196);
    float _1399 = exp2((_1386 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1386 * 3.0));
    float _1405 = (1.0 - _1399) * ((_1386 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1406 = _1399 * _1386;
    float _1434 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1438 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1442 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1771;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1496 = fma(_1442, cbModelParam._m0[26u].z, fma(_1438, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1434));
        float _1500 = fma(_1442, cbModelParam._m0[27u].z, fma(_1438, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1434));
        float _1504 = fma(_1442, cbModelParam._m0[28u].z, fma(_1438, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1434));
        float _1529 = _1434 + _1193;
        float _1530 = _1438 + _1194;
        float _1531 = _1442 + _1195;
        float _1541 = fma(_1531, cbModelParam._m0[26u].z, fma(_1530, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1529)) - _1496;
        float _1542 = fma(_1531, cbModelParam._m0[27u].z, fma(_1530, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1529)) - _1500;
        float _1543 = fma(_1531, cbModelParam._m0[28u].z, fma(_1530, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1529)) - _1504;
        float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
        float _1560 = ((_1547 * _1541) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1496 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1547 * _1542) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1500 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1547 * _1543) / cbModelParam._m0[34u].z) + ((((((_1504 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        float _1599 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1565.x + (-0.5));
        float _1601 = _1599 * (_1565.y + (-0.5));
        float _1602 = _1599 * (_1565.z + (-0.5));
        float _1609 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1572.x + (-0.5));
        float _1611 = _1609 * (_1572.y + (-0.5));
        float _1612 = _1609 * (_1572.z + (-0.5));
        float _1619 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1579.x + (-0.5));
        float _1621 = _1619 * (_1579.y + (-0.5));
        float _1622 = _1619 * (_1579.z + (-0.5));
        float _1629 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1586.x + (-0.5));
        float _1631 = _1629 * (_1586.y + (-0.5));
        float _1632 = _1629 * (_1586.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1653 = (dot(vec3(_1193, _1194, _1195), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4722 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1663 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4733 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4744 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_1665 + 1.0))) + _1670) * _1633;
        float _1680 = _1601 * 0.5;
        float _1681 = _1611 * 0.5;
        float _1682 = _1621 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_1193, _1194, _1195), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4755 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4766 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4777 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_1707 + 1.0))) + _1712) * _1634;
        float _1722 = _1602 * 0.5;
        float _1723 = _1612 * 0.5;
        float _1724 = _1622 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_1193, _1194, _1195), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4788 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4799 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4810 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_1749 + 1.0))) + _1754) * _1635;
        _1771 = _1602;
        _1773 = _1601;
        _1774 = _1600;
        _1775 = _1612;
        _1776 = _1611;
        _1777 = _1610;
        _1778 = _1622;
        _1779 = _1621;
        _1780 = _1620;
        _1781 = _1635;
        _1782 = _1634;
        _1783 = _1633;
        _1784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1772;
        _1773 = _1772;
        _1774 = _1772;
        _1775 = _1772;
        _1776 = _1772;
        _1777 = _1772;
        _1778 = _1772;
        _1779 = _1772;
        _1780 = _1772;
        _1781 = _1772;
        _1782 = _1772;
        _1783 = _1772;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    float _2091;
    float _2092;
    float _2093;
    float _2094;
    float _2095;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1812 = fma(_1442, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1434));
        float _1816 = fma(_1442, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1434));
        float _1820 = fma(_1442, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1434));
        float _1843 = _1434 + _1193;
        float _1844 = _1438 + _1194;
        float _1845 = _1442 + _1195;
        float _1855 = fma(_1845, cbModelParam._m0[30u].z, fma(_1844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1843)) - _1812;
        float _1856 = fma(_1845, cbModelParam._m0[31u].z, fma(_1844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1843)) - _1816;
        float _1857 = fma(_1845, cbModelParam._m0[32u].z, fma(_1844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1843)) - _1820;
        float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
        float _1874 = ((_1861 * _1855) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1812 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1875 = ((_1861 * _1856) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1816 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1876 = ((_1861 * _1857) / cbModelParam._m0[35u].z) + ((((((_1820 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1878 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1874, _1875, _1876), 0.0);
        vec4 _1885 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1874, _1875, _1876), 0.0);
        vec4 _1892 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1874, _1875, _1876), 0.0);
        vec4 _1899 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1874, _1875, _1876), 0.0);
        float _1911 = exp2((_1878.w + (-0.5)) * 20.0) * 2.0;
        float _1912 = _1911 * (_1878.x + (-0.5));
        float _1913 = _1911 * (_1878.y + (-0.5));
        float _1914 = _1911 * (_1878.z + (-0.5));
        float _1921 = exp2((_1885.w + (-0.5)) * 20.0) * 2.0;
        float _1922 = _1921 * (_1885.x + (-0.5));
        float _1923 = _1921 * (_1885.y + (-0.5));
        float _1924 = _1921 * (_1885.z + (-0.5));
        float _1931 = exp2((_1892.w + (-0.5)) * 20.0) * 2.0;
        float _1932 = _1931 * (_1892.x + (-0.5));
        float _1933 = _1931 * (_1892.y + (-0.5));
        float _1934 = _1931 * (_1892.z + (-0.5));
        float _1941 = exp2((_1899.w + (-0.5)) * 20.0) * 2.0;
        float _1942 = _1941 * (_1899.x + (-0.5));
        float _1943 = _1941 * (_1899.y + (-0.5));
        float _1944 = _1941 * (_1899.z + (-0.5));
        float _1945 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1946 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1948 = _1912 * 0.5;
        float _1949 = _1922 * 0.5;
        float _1950 = _1932 * 0.5;
        float _1951 = dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950));
        float _1956 = (_1951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1951);
        float _1964 = (dot(vec3(_1193, _1194, _1195), vec3(_1956 * _1948, _1956 * _1949, _1956 * _1950)) + 1.0) * 0.5;
        float _4851 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1973 = sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950)) / (_1945 + 9.9999997473787516355514526367188e-06);
        float _4862 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _1975 = _1974 * 2.0;
        float _1979 = (1.0 - _1974) / (_1974 + 1.0);
        float _4873 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1980 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _1989 = ((((1.0 - _1980) * (_1975 + 2.0)) * exp2(log2(isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_1975 + 1.0))) + _1980) * _1945;
        float _1990 = _1913 * 0.5;
        float _1991 = _1923 * 0.5;
        float _1992 = _1933 * 0.5;
        float _1993 = dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992));
        float _1998 = (_1993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1993);
        float _2006 = (dot(vec3(_1193, _1194, _1195), vec3(_1998 * _1990, _1998 * _1991, _1998 * _1992)) + 1.0) * 0.5;
        float _4884 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2015 = sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992)) / (_1946 + 9.9999997473787516355514526367188e-06);
        float _4895 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2017 = _2016 * 2.0;
        float _2021 = (1.0 - _2016) / (_2016 + 1.0);
        float _4906 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2031 = ((((1.0 - _2022) * (_2017 + 2.0)) * exp2(log2(isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2017 + 1.0))) + _2022) * _1946;
        float _2032 = _1914 * 0.5;
        float _2033 = _1924 * 0.5;
        float _2034 = _1934 * 0.5;
        float _2035 = dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034));
        float _2040 = (_2035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2035);
        float _2048 = (dot(vec3(_1193, _1194, _1195), vec3(_2040 * _2032, _2040 * _2033, _2040 * _2034)) + 1.0) * 0.5;
        float _4917 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2057 = sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034)) / (_1947 + 9.9999997473787516355514526367188e-06);
        float _4928 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _2059 = _2058 * 2.0;
        float _2063 = (1.0 - _2058) / (_2058 + 1.0);
        float _4939 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2073 = ((((1.0 - _2064) * (_2059 + 2.0)) * exp2(log2(isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2059 + 1.0))) + _2064) * _1947;
        _2081 = _1914;
        _2082 = _1913;
        _2083 = _1912;
        _2084 = _1924;
        _2085 = _1923;
        _2086 = _1922;
        _2087 = _1934;
        _2088 = _1933;
        _2089 = _1932;
        _2090 = _1947;
        _2091 = _1946;
        _2092 = _1945;
        _2093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)));
        _2094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)));
        _2095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0)));
    }
    else
    {
        _2081 = _1772;
        _2082 = _1772;
        _2083 = _1772;
        _2084 = _1772;
        _2085 = _1772;
        _2086 = _1772;
        _2087 = _1772;
        _2088 = _1772;
        _2089 = _1772;
        _2090 = _1772;
        _2091 = _1772;
        _2092 = _1772;
        _2093 = 0.0;
        _2094 = 0.0;
        _2095 = 0.0;
    }
    float _2105 = (cbModelParam._m0[1u].x * (_2093 - _1784)) + _1784;
    float _2106 = (cbModelParam._m0[1u].x * (_2094 - _1785)) + _1785;
    float _2107 = (cbModelParam._m0[1u].x * (_2095 - _1786)) + _1786;
    float _2128 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2106, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2131 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2106, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2134 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2106, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2105));
    float _2149 = _1378 * 0.5;
    float _2150 = _1379 * 0.5;
    float _2151 = _1380 * 0.5;
    float _2152 = dot(vec4(_2149, _2150, _2151, 1.0), vec4(_2083, _2086, _2089, _2092));
    float _2155 = dot(vec4(_2149, _2150, _2151, 1.0), vec4(_2082, _2085, _2088, _2091));
    float _2158 = dot(vec4(_2149, _2150, _2151, 1.0), vec4(_2081, _2084, _2087, _2090));
    float _2192;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2165 = dot(vec4(_2149, _2150, _2151, 1.0), vec4(_1771, _1775, _1778, _1781));
        float _2169 = dot(vec4(_2149, _2150, _2151, 1.0), vec4(_1773, _1776, _1779, _1782));
        float _2173 = dot(vec4(_2149, _2150, _2151, 1.0), vec4(_1774, _1777, _1780, _1783));
        float _2180 = dot(vec4(cbModelParam._m0[39u]), vec4(_2149, _2150, _2151, 1.0));
        _2192 = dot(vec3(isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0)), isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0)), isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2180) ? 0.0 : (isnan(0.0) ? _2180 : max(0.0, _2180))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2192 = 1.0;
    }
    float _2203;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2194 = dot(vec4(cbModelParam._m0[40u]), vec4(_2149, _2150, _2151, 1.0));
        _2203 = dot(vec3(isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0)), isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)), isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2194) ? 0.0 : (isnan(0.0) ? _2194 : max(0.0, _2194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2203 = 1.0;
    }
    float _2207 = (_2203 * cbModelParam._m0[1u].x) + (_2192 * (1.0 - cbModelParam._m0[1u].x));
    float _2217 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1196);
    float _2218 = isnan(_2217) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2217 : min(cbModelParam._m0[25u].z, _2217));
    float _2298;
    float _2300;
    float _2302;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2265 = fma(_1442, cbModelParam._m0[13u].z, fma(_1438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1434)) + cbModelParam._m0[13u].w;
        float _2269 = fma(_1442, cbModelParam._m0[14u].z, fma(_1438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1434)) + cbModelParam._m0[14u].w;
        float _2273 = fma(_1442, cbModelParam._m0[15u].z, fma(_1438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1434)) + cbModelParam._m0[15u].w;
        float _2276 = fma(_1380, cbModelParam._m0[13u].z, fma(_1379, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1378));
        float _2279 = fma(_1380, cbModelParam._m0[14u].z, fma(_1379, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1378));
        float _2282 = fma(_1380, cbModelParam._m0[15u].z, fma(_1379, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1378));
        float _2310;
        if (_2276 > 0.0)
        {
            _2310 = abs((1.0 - _2265) / _2276);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2276 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2265 + 1.0) / _2276);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2310 = frontier_phi_17_15_ladder;
        }
        float _2481;
        if (_2279 > 0.0)
        {
            _2481 = abs((1.0 - _2269) / _2279);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2279 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2269 + 1.0) / _2279);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2481 = frontier_phi_26_22_ladder;
        }
        float _2776;
        if (_2282 > 0.0)
        {
            _2776 = abs((1.0 - _2273) / _2282);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2282 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2273 + 1.0) / _2282);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2776 = frontier_phi_38_33_ladder;
        }
        float _2778 = isnan(_2481) ? _2310 : (isnan(_2310) ? _2481 : min(_2310, _2481));
        float _2779 = isnan(_2776) ? _2778 : (isnan(_2778) ? _2776 : min(_2778, _2776));
        float _2783 = (_2779 * _2276) + _2265;
        float _2784 = (_2779 * _2279) + _2269;
        float _2785 = (_2779 * _2282) + _2273;
        float _2786 = _2779 * 9.9999997473787516355514526367188e-05;
        float _2788 = (-1.0) - _2786;
        float _2790 = _2786 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2785 > _2790) || ((_2785 < _2788) || ((_2784 > _2790) || ((_2784 < _2788) || ((_2783 < _2788) || (_2783 > _2790))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2785, cbModelParam._m0[9u].z, fma(_2784, cbModelParam._m0[9u].y, _2783 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2785, cbModelParam._m0[10u].z, fma(_2784, cbModelParam._m0[10u].y, _2783 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2785, cbModelParam._m0[11u].z, fma(_2784, cbModelParam._m0[11u].y, _2783 * cbModelParam._m0[11u].x))), _2218);
            frontier_phi_16_38_ladder = _2930.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2930.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2930.x * cbModelParam._m0[1u].y;
        }
        _2298 = frontier_phi_16_38_ladder_2;
        _2300 = frontier_phi_16_38_ladder_1;
        _2302 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1378, _1379, _1380), _2218);
        _2298 = _2286.x * cbModelParam._m0[1u].y;
        _2300 = _2286.y * cbModelParam._m0[1u].y;
        _2302 = _2286.z * cbModelParam._m0[1u].y;
    }
    float _2306 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1196);
    float _2307 = isnan(_2306) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2306 : min(cbModelParam._m0[25u].w, _2306));
    float _2396;
    float _2398;
    float _2400;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2360 = fma(_1442, cbModelParam._m0[21u].z, fma(_1438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1434)) + cbModelParam._m0[21u].w;
        float _2364 = fma(_1442, cbModelParam._m0[22u].z, fma(_1438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1434)) + cbModelParam._m0[22u].w;
        float _2368 = fma(_1442, cbModelParam._m0[23u].z, fma(_1438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1434)) + cbModelParam._m0[23u].w;
        float _2371 = fma(_1380, cbModelParam._m0[21u].z, fma(_1379, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1378));
        float _2374 = fma(_1380, cbModelParam._m0[22u].z, fma(_1379, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1378));
        float _2377 = fma(_1380, cbModelParam._m0[23u].z, fma(_1379, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1378));
        float _2486;
        if (_2371 > 0.0)
        {
            _2486 = abs((1.0 - _2360) / _2371);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2371 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2360 + 1.0) / _2371);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2486 = frontier_phi_28_24_ladder;
        }
        float _2803;
        if (_2374 > 0.0)
        {
            _2803 = abs((1.0 - _2364) / _2374);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2374 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2364 + 1.0) / _2374);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2803 = frontier_phi_40_35_ladder;
        }
        float _3141;
        if (_2377 > 0.0)
        {
            _3141 = abs((1.0 - _2368) / _2377);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2377 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2368 + 1.0) / _2377);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3141 = frontier_phi_50_47_ladder;
        }
        float _3143 = isnan(_2803) ? _2486 : (isnan(_2486) ? _2803 : min(_2486, _2803));
        float _3144 = isnan(_3141) ? _3143 : (isnan(_3143) ? _3141 : min(_3143, _3141));
        float _3148 = (_3144 * _2371) + _2360;
        float _3149 = (_3144 * _2374) + _2364;
        float _3150 = (_3144 * _2377) + _2368;
        float _3151 = _3144 * 9.9999997473787516355514526367188e-05;
        float _3152 = (-1.0) - _3151;
        float _3154 = _3151 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3150 > _3154) || ((_3150 < _3152) || ((_3149 > _3154) || ((_3149 < _3152) || ((_3148 < _3152) || (_3148 > _3154))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3272 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3150, cbModelParam._m0[17u].z, fma(_3149, cbModelParam._m0[17u].y, _3148 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3150, cbModelParam._m0[18u].z, fma(_3149, cbModelParam._m0[18u].y, _3148 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3150, cbModelParam._m0[19u].z, fma(_3149, cbModelParam._m0[19u].y, _3148 * cbModelParam._m0[19u].x))), _2307);
            frontier_phi_25_50_ladder = _3272.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3272.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3272.x * cbModelParam._m0[1u].z;
        }
        _2396 = frontier_phi_25_50_ladder_2;
        _2398 = frontier_phi_25_50_ladder_1;
        _2400 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1378, _1379, _1380), _2307);
        _2396 = _2380.x * cbModelParam._m0[1u].z;
        _2398 = _2380.y * cbModelParam._m0[1u].z;
        _2400 = _2380.z * cbModelParam._m0[1u].z;
    }
    float _2413 = (((_1405 * _1354) + _1406) * _1370) * ((cbModelParam._m0[1u].w * (_2396 - _2298)) + _2298);
    float _2415 = (((_1405 * _1356) + _1406) * _1370) * ((cbModelParam._m0[1u].w * (_2398 - _2300)) + _2300);
    float _2417 = (((_1405 * _1357) + _1406) * _1370) * ((cbModelParam._m0[1u].w * (_2400 - _2302)) + _2302);
    float _2420 = fma(_2417, cbSceneParam._m0[89u].z, fma(_2415, cbSceneParam._m0[89u].y, _2413 * cbSceneParam._m0[89u].x));
    float _2423 = fma(_2417, cbSceneParam._m0[90u].z, fma(_2415, cbSceneParam._m0[90u].y, _2413 * cbSceneParam._m0[90u].x));
    float _2426 = fma(_2417, cbSceneParam._m0[91u].z, fma(_2415, cbSceneParam._m0[91u].y, _2413 * cbSceneParam._m0[91u].x));
    float _2460 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2464 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2468 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2472 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2473 = _2460 / _2472;
    float _2474 = _2464 / _2472;
    float _2475 = _2468 / _2472;
    float _2622;
    float _2623;
    float _2624;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2502 = ((uint(_2475 > cbSceneParam._m0[59u].y) + uint(_2475 > cbSceneParam._m0[59u].x)) + uint(_2475 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2503 = _2502 + 43u;
        uint _2511 = _2502 + 44u;
        uint _2519 = _2502 + 45u;
        uint _2527 = _2502 + 46u;
        float _2538 = fma(_2472, cbSceneParam._m0[_2503].w, fma(_2468, cbSceneParam._m0[_2503].z, fma(_2464, cbSceneParam._m0[_2503].y, _2460 * cbSceneParam._m0[_2503].x)));
        float _2542 = fma(_2472, cbSceneParam._m0[_2511].w, fma(_2468, cbSceneParam._m0[_2511].z, fma(_2464, cbSceneParam._m0[_2511].y, _2460 * cbSceneParam._m0[_2511].x)));
        float _2550 = fma(_2472, cbSceneParam._m0[_2527].w, fma(_2468, cbSceneParam._m0[_2527].z, fma(_2464, cbSceneParam._m0[_2527].y, _2460 * cbSceneParam._m0[_2527].x)));
        float _2555 = cbSceneParam._m0[33u].z * _2550;
        float _2557 = cbSceneParam._m0[33u].w * _2550;
        float _2560 = fma(_2472, cbSceneParam._m0[_2519].w, fma(_2468, cbSceneParam._m0[_2519].z, fma(_2464, cbSceneParam._m0[_2519].y, _2460 * cbSceneParam._m0[_2519].x))) / _2550;
        float _2608 = (cbSceneParam._m0[33u].x - sqrt(((_2474 * _2474) + (_2473 * _2473)) + (_2475 * _2475))) * cbSceneParam._m0[33u].y;
        float _5065 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2615 = (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2555 + _2538) / _2550, (_2557 + _2542) / _2550), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2557 + _2538) / _2550, (_2542 - _2555) / _2550), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2538 - _2555) / _2550, (_2542 - _2557) / _2550), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2538 - _2557) / _2550, (_2555 + _2542) / _2550), _2560), 0.0)).x), vec4(0.25)));
        _2622 = 1.0 - (_2615 * cbSceneParam._m0[34u].x);
        _2623 = 1.0 - (_2615 * cbSceneParam._m0[34u].y);
        _2624 = 1.0 - (_2615 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2622 = 1.0;
        _2623 = 1.0;
        _2624 = 1.0;
    }
    float _2688;
    float _2690;
    float _2692;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2676 = fma(_2472, cbSceneParam._m0[63u].w, fma(_2468, cbSceneParam._m0[63u].z, fma(_2464, cbSceneParam._m0[63u].y, _2460 * cbSceneParam._m0[63u].x)));
        float _2677 = fma(_2472, cbSceneParam._m0[60u].w, fma(_2468, cbSceneParam._m0[60u].z, fma(_2464, cbSceneParam._m0[60u].y, _2460 * cbSceneParam._m0[60u].x))) / _2676;
        float _2678 = fma(_2472, cbSceneParam._m0[61u].w, fma(_2468, cbSceneParam._m0[61u].z, fma(_2464, cbSceneParam._m0[61u].y, _2460 * cbSceneParam._m0[61u].x))) / _2676;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2677 >= cbSceneParam._m0[64u].x) && (_2678 >= cbSceneParam._m0[64u].y)) && (_2677 <= cbSceneParam._m0[64u].z)) && (_2678 <= cbSceneParam._m0[64u].w))
        {
            float _2816 = fma(_2472, cbSceneParam._m0[62u].w, fma(_2468, cbSceneParam._m0[62u].z, fma(_2464, cbSceneParam._m0[62u].y, _2460 * cbSceneParam._m0[62u].x))) / _2676;
            float _2820 = isnan(cbSceneParam._m0[41u].w) ? _2816 : (isnan(_2816) ? cbSceneParam._m0[41u].w : max(_2816, cbSceneParam._m0[41u].w));
            float _2863 = (cbSceneParam._m0[33u].x - sqrt(((_2474 * _2474) + (_2473 * _2473)) + (_2475 * _2475))) * cbSceneParam._m0[33u].y;
            float _5081 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
            float _2870 = (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2677, cbSceneParam._m0[33u].w + _2678), _2820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2677, _2678 - cbSceneParam._m0[33u].z), _2820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2677 - cbSceneParam._m0[33u].z, _2678 - cbSceneParam._m0[33u].w), _2820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2677 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2678), _2820), 0.0)).x), vec4(0.25)));
            float _2874 = 1.0 - (_2870 * cbSceneParam._m0[34u].x);
            float _2875 = 1.0 - (_2870 * cbSceneParam._m0[34u].y);
            float _2876 = 1.0 - (_2870 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2876) ? _2624 : (isnan(_2624) ? _2876 : min(_2624, _2876));
            frontier_phi_37_36_ladder_1 = isnan(_2875) ? _2623 : (isnan(_2623) ? _2875 : min(_2623, _2875));
            frontier_phi_37_36_ladder_2 = isnan(_2874) ? _2622 : (isnan(_2622) ? _2874 : min(_2622, _2874));
        }
        else
        {
            frontier_phi_37_36_ladder = _2624;
            frontier_phi_37_36_ladder_1 = _2623;
            frontier_phi_37_36_ladder_2 = _2622;
        }
        _2688 = frontier_phi_37_36_ladder_2;
        _2690 = frontier_phi_37_36_ladder_1;
        _2692 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2688 = _2622;
        _2690 = _2623;
        _2692 = _2624;
    }
    uvec4 _2697 = floatBitsToUint(cbInstanceData._m0[_309 + 5u]);
    uint _2699 = _2697.x * 14u;
    uint _2700 = _2699 + 13u;
    float _2707 = _1370 + (-1.0);
    float _2712 = (cbLight._m0[_2700].x * _2707) + 1.0;
    float _2713 = (cbLight._m0[_2700].y * _2707) + 1.0;
    float _2714 = (cbLight._m0[_2700].z * _2707) + 1.0;
    float _2715 = (cbLight._m0[_2700].w * _2707) + 1.0;
    uint _2716 = _2699 + 5u;
    float _2722 = isnan(1.0) ? _2713 : (isnan(_2713) ? 1.0 : min(_2713, 1.0));
    uint _2726 = _2699 + 4u;
    float _2735 = isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0));
    uint _2739 = _2699 | 1u;
    float _2750 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_1193, _1194, _1195));
    float _2753 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_1193, _1194, _1195));
    float _5117 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _5128 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2758 = (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * 0.3183098733425140380859375;
    float _2760 = (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * 0.3183098733425140380859375;
    float _2767 = ((cbLight._m0[_2716].x * _2722) * _2760) + (((cbLight._m0[_2726].x * _2688) * _2735) * _2758);
    float _2768 = ((_2722 * cbLight._m0[_2716].y) * _2760) + (((cbLight._m0[_2726].y * _2690) * _2735) * _2758);
    float _2769 = ((_2722 * cbLight._m0[_2716].z) * _2760) + (((cbLight._m0[_2726].z * _2692) * _2735) * _2758);
    uvec4 _2773 = floatBitsToUint(cbLight._m0[_2699 + 12u]);
    bool _2775 = _2773.x == 0u;
    float _2877;
    float _2879;
    float _2881;
    if (_2775)
    {
        _2877 = _2767;
        _2879 = _2768;
        _2881 = _2769;
    }
    else
    {
        uint _2885 = _2699 + 6u;
        float _2901 = (dot(vec3(cbLight._m0[_2699 + 2u].xyz), vec3(_1193, _1194, _1195)) * 0.5) + 0.5;
        float _2902 = _2901 * _2901;
        float _5139 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2903 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
        float _2904 = isnan(1.0) ? _2714 : (isnan(_2714) ? 1.0 : min(_2714, 1.0));
        _2877 = (((cbLight._m0[_2885].x * 0.3183098733425140380859375) * _2903) * _2904) + _2767;
        _2879 = (((cbLight._m0[_2885].y * 0.3183098733425140380859375) * _2903) * _2904) + _2768;
        _2881 = (((cbLight._m0[_2885].z * 0.3183098733425140380859375) * _2903) * _2904) + _2769;
    }
    bool _2884 = _2773.y == 0u;
    float _2939;
    float _2941;
    float _2943;
    if (_2884)
    {
        _2939 = _2877;
        _2941 = _2879;
        _2943 = _2881;
    }
    else
    {
        uint _3112 = _2699 + 7u;
        float _3128 = (dot(vec3(cbLight._m0[_2699 + 3u].xyz), vec3(_1193, _1194, _1195)) * 0.5) + 0.5;
        float _3129 = _3128 * _3128;
        float _5155 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3130 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
        float _3131 = isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0));
        _2939 = (((cbLight._m0[_3112].x * 0.3183098733425140380859375) * _3130) * _3131) + _2877;
        _2941 = (((cbLight._m0[_3112].y * 0.3183098733425140380859375) * _3130) * _3131) + _2879;
        _2943 = (((cbLight._m0[_3112].z * 0.3183098733425140380859375) * _3130) * _3131) + _2881;
    }
    uint _2946 = _2699 + 8u;
    float _2959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _1196) * 0.949999988079071044921875);
    float _2960 = _2959 * _2959;
    float _2961 = cbLight._m0[_2699].x + _1272;
    float _2962 = cbLight._m0[_2699].y + _1273;
    float _2963 = cbLight._m0[_2699].z + _1274;
    float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
    float _2968 = _2967 * _2961;
    float _2969 = _2967 * _2962;
    float _2970 = _2967 * _2963;
    float _2971 = dot(vec3(_1193, _1194, _1195), vec3(cbLight._m0[_2699].xyz));
    float _5171 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
    float _2974 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
    float _5182 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _2975 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
    float _2976 = dot(vec3(_1193, _1194, _1195), vec3(_2968, _2969, _2970));
    float _5193 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
    float _2979 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
    float _2980 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2968, _2969, _2970));
    float _5204 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
    float _2984 = _2960 * _2960;
    float _2988 = ((_2979 * _2979) * (_2984 + (-1.0))) + 1.0;
    float _2996 = exp2(log2(1.0 - (isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0)))) * 5.0);
    float _2997 = 0.959999978542327880859375 - _1351;
    float _2999 = 0.959999978542327880859375 - _1352;
    float _3000 = 0.959999978542327880859375 - _1353;
    float _3007 = 1.0 - _2960;
    float _3018 = (0.5 / (((_2975 * ((_2974 * _3007) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _3007) + _2960) * _2974))) * _2974;
    float _5215 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
    float _3020 = (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_2984 / ((_2988 * _2988) * 3.141590118408203125));
    uint _3034 = _2699 + 9u;
    float _3045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _1196) * 0.949999988079071044921875);
    float _3046 = _3045 * _3045;
    float _3047 = cbLight._m0[_2739].x + _1272;
    float _3048 = cbLight._m0[_2739].y + _1273;
    float _3049 = cbLight._m0[_2739].z + _1274;
    float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
    float _3054 = _3053 * _3047;
    float _3055 = _3053 * _3048;
    float _3056 = _3053 * _3049;
    float _3057 = dot(vec3(_1193, _1194, _1195), vec3(cbLight._m0[_2739].xyz));
    float _5226 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
    float _3060 = isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0));
    float _3061 = dot(vec3(_1193, _1194, _1195), vec3(_3054, _3055, _3056));
    float _5237 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
    float _3064 = isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0));
    float _3065 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_3054, _3055, _3056));
    float _5248 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
    float _3069 = _3046 * _3046;
    float _3073 = ((_3064 * _3064) * (_3069 + (-1.0))) + 1.0;
    float _3080 = exp2(log2(1.0 - (isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0)))) * 5.0);
    float _3087 = 1.0 - _3046;
    float _3097 = (0.5 / (((_2975 * ((_3060 * _3087) + _3046)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _3087) + _3046) * _3060))) * _3060;
    float _5259 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
    float _3099 = (isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0))) * (_3069 / ((_3073 * _3073) * 3.141590118408203125));
    float _3109 = (((((_3080 * _2997) + _1354) * cbLight._m0[_3034].x) * _3099) * _2722) + ((((cbLight._m0[_2946].x * _2688) * ((_2996 * _2997) + _1354)) * _3020) * _2735);
    float _3110 = (((((_3080 * _2999) + _1356) * cbLight._m0[_3034].y) * _3099) * _2722) + ((((cbLight._m0[_2946].y * _2690) * ((_2996 * _2999) + _1356)) * _3020) * _2735);
    float _3111 = (((((_3080 * _3000) + _1357) * cbLight._m0[_3034].z) * _3099) * _2722) + ((((cbLight._m0[_2946].z * _2692) * ((_2996 * _3000) + _1357)) * _3020) * _2735);
    float _3167;
    float _3169;
    float _3171;
    if (_2775)
    {
        _3167 = _3109;
        _3169 = _3110;
        _3171 = _3111;
    }
    else
    {
        uint _3173 = _2699 + 2u;
        uint _3177 = _2699 + 10u;
        float _3191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3173].w)) * _1196) * 0.949999988079071044921875);
        float _3192 = _3191 * _3191;
        float _3193 = cbLight._m0[_3173].x + _1272;
        float _3194 = cbLight._m0[_3173].y + _1273;
        float _3195 = cbLight._m0[_3173].z + _1274;
        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
        float _3200 = _3199 * _3193;
        float _3201 = _3199 * _3194;
        float _3202 = _3199 * _3195;
        float _3203 = dot(vec3(_1193, _1194, _1195), vec3(cbLight._m0[_3173].xyz));
        float _5270 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
        float _3206 = isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0));
        float _3207 = dot(vec3(_1193, _1194, _1195), vec3(_3200, _3201, _3202));
        float _5281 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
        float _3210 = isnan(1.0) ? _5281 : (isnan(_5281) ? 1.0 : min(_5281, 1.0));
        float _3211 = dot(vec3(cbLight._m0[_3173].xyz), vec3(_3200, _3201, _3202));
        float _5292 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
        float _3215 = _3192 * _3192;
        float _3219 = ((_3210 * _3210) * (_3215 + (-1.0))) + 1.0;
        float _3226 = exp2(log2(1.0 - (isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0)))) * 5.0);
        float _3233 = 1.0 - _3192;
        float _3243 = (0.5 / (((_2975 * ((_3206 * _3233) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _3233) + _3192) * _3206))) * _3206;
        float _5303 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
        float _3245 = (isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0))) * (_3215 / ((_3219 * _3219) * 3.141590118408203125));
        float _3246 = isnan(1.0) ? _2714 : (isnan(_2714) ? 1.0 : min(_2714, 1.0));
        _3167 = (((((_3226 * _2997) + _1354) * cbLight._m0[_3177].x) * _3245) * _3246) + _3109;
        _3169 = (((((_3226 * _2999) + _1356) * cbLight._m0[_3177].y) * _3245) * _3246) + _3110;
        _3171 = (((((_3226 * _3000) + _1357) * cbLight._m0[_3177].z) * _3245) * _3246) + _3111;
    }
    float _3277;
    float _3279;
    float _3281;
    if (_2884)
    {
        _3277 = _3167;
        _3279 = _3169;
        _3281 = _3171;
    }
    else
    {
        uint _3288 = _2699 + 3u;
        uint _3292 = _2699 + 11u;
        float _3306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3288].w)) * _1196) * 0.949999988079071044921875);
        float _3307 = _3306 * _3306;
        float _3308 = cbLight._m0[_3288].x + _1272;
        float _3309 = cbLight._m0[_3288].y + _1273;
        float _3310 = cbLight._m0[_3288].z + _1274;
        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
        float _3315 = _3314 * _3308;
        float _3316 = _3314 * _3309;
        float _3317 = _3314 * _3310;
        float _3318 = dot(vec3(_1193, _1194, _1195), vec3(cbLight._m0[_3288].xyz));
        float _5319 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
        float _3321 = isnan(1.0) ? _5319 : (isnan(_5319) ? 1.0 : min(_5319, 1.0));
        float _3322 = dot(vec3(_1193, _1194, _1195), vec3(_3315, _3316, _3317));
        float _5330 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
        float _3325 = isnan(1.0) ? _5330 : (isnan(_5330) ? 1.0 : min(_5330, 1.0));
        float _3326 = dot(vec3(cbLight._m0[_3288].xyz), vec3(_3315, _3316, _3317));
        float _5341 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
        float _3330 = _3307 * _3307;
        float _3334 = ((_3325 * _3325) * (_3330 + (-1.0))) + 1.0;
        float _3341 = exp2(log2(1.0 - (isnan(1.0) ? _5341 : (isnan(_5341) ? 1.0 : min(_5341, 1.0)))) * 5.0);
        float _3348 = 1.0 - _3307;
        float _3358 = (0.5 / (((_2975 * ((_3321 * _3348) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _3348) + _3307) * _3321))) * _3321;
        float _5352 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
        float _3360 = (isnan(1.0) ? _5352 : (isnan(_5352) ? 1.0 : min(_5352, 1.0))) * (_3330 / ((_3334 * _3334) * 3.141590118408203125));
        float _3361 = isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0));
        _3277 = (((((_3341 * _2997) + _1354) * cbLight._m0[_3292].x) * _3360) * _3361) + _3167;
        _3279 = (((((_3341 * _2999) + _1356) * cbLight._m0[_3292].y) * _3360) * _3361) + _3169;
        _3281 = (((((_3341 * _3000) + _1357) * cbLight._m0[_3292].z) * _3360) * _3361) + _3171;
    }
    float _3427;
    float _3429;
    float _3431;
    float _3433;
    float _3435;
    float _3437;
    if (_2697.y == 0u)
    {
        uvec4 _3382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3383 = _3382.x;
        uint _3394 = uint((float(_3382.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1293) / _3383))) + floor(float(uint(cbSceneParam._m0[85u].x * _1292) / _3383)));
        float _3404 = (log2(_2475 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3405 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
        uint _3408 = uint(isnan(14.0) ? _3405 : (isnan(_3405) ? 14.0 : min(_3405, 14.0)));
        uvec4 _3413 = texelFetch(g_lightClusterGridBuffer, int(((_3408 << 2u) + (_3394 << 6u)) >> 2u));
        uint _3414 = _3413.x;
        uint _3415 = _3382.z;
        float _3494;
        float _3496;
        float _3498;
        float _3500;
        float _3502;
        float _3504;
        if (((((1u << ((_3415 >> 4u) & 15u)) + 4294967295u) & _3414) == 0u) || ((_3415 & 240u) == 0u))
        {
            _3494 = 0.0;
            _3496 = 0.0;
            _3498 = 0.0;
            _3500 = 0.0;
            _3502 = 0.0;
            _3504 = 0.0;
        }
        else
        {
            float _3495;
            float _3497;
            float _3499;
            float _3501;
            float _3503;
            float _3505;
            float _3647 = 0.0;
            float _3648 = 0.0;
            float _3649 = 0.0;
            float _3650 = 0.0;
            float _3651 = 0.0;
            float _3652 = 0.0;
            uint _3653 = 0u;
            uint _3662;
            bool _3663;
            for (;;)
            {
                _3662 = texelFetch(g_lightClassification, int((((_3408 << 5u) + (_3394 << 9u)) + (_3653 << 2u)) >> 2u)).x;
                _3663 = _3662 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3663)
                {
                    frontier_phi_71_pred = _3652;
                    frontier_phi_71_pred_1 = _3651;
                    frontier_phi_71_pred_2 = _3650;
                    frontier_phi_71_pred_3 = _3649;
                    frontier_phi_71_pred_4 = _3648;
                    frontier_phi_71_pred_5 = _3647;
                }
                else
                {
                    float _3792;
                    float _3793;
                    float _3794;
                    float _3795;
                    float _3796;
                    float _3797;
                    uint _3798;
                    _3792 = _3647;
                    _3793 = _3648;
                    _3794 = _3649;
                    _3795 = _3650;
                    _3796 = _3651;
                    _3797 = _3652;
                    _3798 = _3662;
                    float _3719;
                    float _3720;
                    float _3721;
                    float _3722;
                    float _3723;
                    float _3724;
                    for (;;)
                    {
                        uint _3802 = uint(findLSB(_3798)) + (_3653 << 5u);
                        uint _3799 = (_3798 + 4294967295u) & _3798;
                        uint _3804 = _3802 * 48u;
                        vec4 _3818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3804)).x, texelFetch(g_PointLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3804 + 3u)).x));
                        uint _3824 = (_3802 * 48u) + 4u;
                        vec4 _3837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3824)).x, texelFetch(g_PointLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3824 + 3u)).x));
                        uint _3843 = (_3802 * 48u) + 8u;
                        vec3 _3854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3843)).x, texelFetch(g_PointLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3843 + 2u)).x));
                        float _3858 = _3818.x - _2473;
                        float _3859 = _3818.y - _2474;
                        float _3860 = _3818.z - _2475;
                        float _3861 = dot(vec3(_3858, _3859, _3860), vec3(_3858, _3859, _3860));
                        float _3864 = inversesqrt(_3861);
                        float _3865 = _3864 * _3858;
                        float _3866 = _3864 * _3859;
                        float _3867 = _3864 * _3860;
                        float _3868 = dot(vec3(_1311, _1314, _1317), vec3(_3865, _3866, _3867));
                        float _3873 = 1.0 - (_3861 * _3818.w);
                        float _5378 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                        float _3874 = isnan(1.0) ? _5378 : (isnan(_5378) ? 1.0 : min(_5378, 1.0));
                        float _3875 = sqrt(_3861) * _3837.w;
                        float _3878 = 1.39999997615814208984375 / (_3875 + 1.39999997615814208984375);
                        float _3879 = _3878 * _3878;
                        float _3882 = ((1.0 - _3879) * _3868) + _3879;
                        float _3885 = _3875 * _3875;
                        float _3889 = ((isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0))) * _3874) / ((_3885 * 0.699999988079071044921875) + 1.0);
                        float _3893 = (-0.0) - _2473;
                        float _3894 = (-0.0) - _2474;
                        float _3895 = (-0.0) - _2475;
                        float _3899 = inversesqrt(dot(vec3(_3893, _3894, _3895), vec3(_3893, _3894, _3895)));
                        float _3900 = _3899 * _3893;
                        float _3901 = _3899 * _3894;
                        float _3902 = _3899 * _3895;
                        float _3909 = exp2(log2(1.0 / ((_3885 * 3.5) + 5.0)) * 0.25);
                        float _3910 = 1.0 - _1386;
                        float _3917 = sqrt(1.0 - ((1.0 - (_3910 * _3910)) * (1.0 - (_3909 * _3909))));
                        float _3918 = _3917 * _3917;
                        float _3919 = _3918 * _3918;
                        float _3920 = _3900 + _3865;
                        float _3921 = _3901 + _3866;
                        float _3922 = _3902 + _3867;
                        float _3926 = inversesqrt(dot(vec3(_3920, _3921, _3922), vec3(_3920, _3921, _3922)));
                        float _3930 = dot(vec3(_1311, _1314, _1317), vec3(_3900, _3901, _3902));
                        float _5394 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                        float _3933 = isnan(1.0) ? _5394 : (isnan(_5394) ? 1.0 : min(_5394, 1.0));
                        float _3934 = dot(vec3(_1311, _1314, _1317), vec3(_3926 * _3920, _3926 * _3921, _3926 * _3922));
                        float _5405 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                        float _3937 = isnan(1.0) ? _5405 : (isnan(_5405) ? 1.0 : min(_5405, 1.0));
                        float _3941 = ((_3937 * _3937) * (_3919 + (-1.0))) + 1.0;
                        float _3942 = _3878 * _3918;
                        float _3943 = _3942 * _3942;
                        float _3946 = ((1.0 - _3943) * _3868) + _3943;
                        float _5416 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                        float _3947 = isnan(1.0) ? _5416 : (isnan(_5416) ? 1.0 : min(_5416, 1.0));
                        float _3948 = 1.0 - _3918;
                        float _3958 = (0.5 / (((_3947 * ((_3933 * _3948) + _3918)) + 9.9999999392252902907785028219223e-09) + (((_3947 * _3948) + _3918) * _3933))) * _3947;
                        float _5427 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                        float _3969 = (((_3919 * 3.1415927410125732421875) * (isnan(1.0) ? _5427 : (isnan(_5427) ? 1.0 : min(_5427, 1.0)))) / ((_3941 * _3941) * ((_3885 * 2.1991131305694580078125) + 3.141590118408203125))) * _3874;
                        _3722 = (_3889 * _3837.x) + _3795;
                        _3723 = (_3889 * _3837.y) + _3796;
                        _3724 = (_3889 * _3837.z) + _3797;
                        _3719 = (_3969 * _3854.x) + _3792;
                        _3720 = (_3969 * _3854.y) + _3793;
                        _3721 = (_3969 * _3854.z) + _3794;
                        if (_3799 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3792 = _3719;
                            _3793 = _3720;
                            _3794 = _3721;
                            _3795 = _3722;
                            _3796 = _3723;
                            _3797 = _3724;
                            _3798 = _3799;
                        }
                    }
                    frontier_phi_71_pred = _3724;
                    frontier_phi_71_pred_1 = _3723;
                    frontier_phi_71_pred_2 = _3722;
                    frontier_phi_71_pred_3 = _3721;
                    frontier_phi_71_pred_4 = _3720;
                    frontier_phi_71_pred_5 = _3719;
                }
                _3505 = frontier_phi_71_pred;
                _3503 = frontier_phi_71_pred_1;
                _3501 = frontier_phi_71_pred_2;
                _3499 = frontier_phi_71_pred_3;
                _3497 = frontier_phi_71_pred_4;
                _3495 = frontier_phi_71_pred_5;
                uint _3654 = _3653 + 1u;
                if (_3654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3647 = _3495;
                    _3648 = _3497;
                    _3649 = _3499;
                    _3650 = _3501;
                    _3651 = _3503;
                    _3652 = _3505;
                    _3653 = _3654;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3494 = _3495;
            _3496 = _3497;
            _3498 = _3499;
            _3500 = _3501;
            _3502 = _3503;
            _3504 = _3505;
        }
        uvec4 _3508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3509 = _3508.z;
        uint _3511 = (_3509 >> 8u) & 15u;
        float _3615;
        float _3617;
        float _3619;
        float _3621;
        float _3623;
        float _3625;
        if (((4294967295u << _3511) & _3414) == 0u)
        {
            _3615 = _3494;
            _3617 = _3496;
            _3619 = _3498;
            _3621 = _3500;
            _3623 = _3502;
            _3625 = _3504;
        }
        else
        {
            float _3640 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
            float _3641 = _3640 * _2473;
            float _3642 = _3640 * _2474;
            float _3643 = _3640 * _2475;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3511 < ((_3509 >> 12u) & 15u))
            {
                float _3616;
                float _3618;
                float _3620;
                float _3622;
                float _3624;
                float _3626;
                float _3775 = _3494;
                float _3776 = _3496;
                float _3777 = _3498;
                float _3778 = _3500;
                float _3779 = _3502;
                float _3780 = _3504;
                uint _3781 = _3511;
                uint _3790;
                bool _3791;
                for (;;)
                {
                    _3790 = texelFetch(g_lightClassification, int((((_3408 << 5u) + (_3394 << 9u)) + (_3781 << 2u)) >> 2u)).x;
                    _3791 = _3790 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3791)
                    {
                        frontier_phi_82_pred = _3780;
                        frontier_phi_82_pred_1 = _3779;
                        frontier_phi_82_pred_2 = _3778;
                        frontier_phi_82_pred_3 = _3777;
                        frontier_phi_82_pred_4 = _3776;
                        frontier_phi_82_pred_5 = _3775;
                    }
                    else
                    {
                        float _3983;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _4276;
                        float _4277;
                        float _4278;
                        float _4279;
                        float _4280;
                        float _4281;
                        float _3996 = _3775;
                        float _3997 = _3776;
                        float _3998 = _3777;
                        float _3999 = _3778;
                        float _4000 = _3779;
                        float _4001 = _3780;
                        uint _4002 = _3790;
                        uint _4003;
                        vec4 _4028;
                        float _4029;
                        vec4 _4044;
                        vec3 _4056;
                        vec4 _4071;
                        vec4 _4086;
                        float _4132;
                        bool _4133;
                        for (;;)
                        {
                            uint _4013 = ((_3781 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4002));
                            _4003 = (_4002 + 4294967295u) & _4002;
                            uint _4015 = _4013 * 40u;
                            _4028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4015 + 3u)).x));
                            _4029 = _4028.w;
                            uint _4031 = (_4013 * 40u) + 4u;
                            _4044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4031 + 3u)).x));
                            uint _4046 = (_4013 * 40u) + 8u;
                            _4056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4046 + 2u)).x));
                            uint _4058 = (_4013 * 40u) + 16u;
                            _4071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4058 + 3u)).x));
                            uint _4073 = (_4013 * 40u) + 20u;
                            _4086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4073 + 3u)).x));
                            uint _4088 = (_4013 * 40u) + 24u;
                            vec4 _4101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4088 + 3u)).x));
                            uint _4107 = (_4013 * 40u) + 28u;
                            vec4 _4120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4107 + 3u)).x));
                            _4132 = fma(_2475, _4120.z, fma(_2474, _4120.y, _4120.x * _2473)) + _4120.w;
                            _4133 = !((fma(_2475, _4101.z, fma(_2474, _4101.y, _4101.x * _2473)) + _4101.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4133)
                            {
                                float _4160 = _4028.x - _2473;
                                float _4161 = _4028.y - _2474;
                                float _4162 = _4028.z - _2475;
                                float _4163 = dot(vec3(_4160, _4161, _4162), vec3(_4160, _4161, _4162));
                                float _4166 = inversesqrt(_4163);
                                float _4167 = _4166 * _4160;
                                float _4168 = _4166 * _4161;
                                float _4169 = _4166 * _4162;
                                float _4173 = 1.0 - (_4163 / (_4029 * _4029));
                                float _5438 = isnan(0.0) ? _4173 : (isnan(_4173) ? 0.0 : max(_4173, 0.0));
                                float _4174 = isnan(1.0) ? _5438 : (isnan(_5438) ? 1.0 : min(_5438, 1.0));
                                float _4178 = sqrt(_4163) * _4044.w;
                                float _4180 = 1.39999997615814208984375 / (_4178 + 1.39999997615814208984375);
                                float _4181 = _4180 * _4180;
                                float _4184 = ((1.0 - _4181) * dot(vec3(_4167, _4168, _4169), vec3(_1311, _1314, _1317))) + _4181;
                                float _4187 = _4178 * _4178;
                                float _4191 = (fma(_2475, _4071.z, fma(_2474, _4071.y, _4071.x * _2473)) + _4071.w) / _4132;
                                float _4192 = (fma(_2475, _4086.z, fma(_2474, _4086.y, _4086.x * _2473)) + _4086.w) / _4132;
                                float _4196 = 1.0 - dot(vec2(_4191, _4192), vec2(_4191, _4192));
                                float _5454 = isnan(0.0) ? _4196 : (isnan(_4196) ? 0.0 : max(_4196, 0.0));
                                float _4197 = isnan(1.0) ? _5454 : (isnan(_5454) ? 1.0 : min(_5454, 1.0));
                                float _4198 = _4197 * (((isnan(0.0) ? _4184 : (isnan(_4184) ? 0.0 : max(_4184, 0.0))) * _4174) / ((_4187 * 0.699999988079071044921875) + 1.0));
                                float _4210 = exp2(log2(1.0 / ((_4187 * 3.5) + 5.0)) * 0.25);
                                float _4211 = 1.0 - _1386;
                                float _4218 = sqrt(1.0 - ((1.0 - (_4211 * _4211)) * (1.0 - (_4210 * _4210))));
                                float _4219 = _4218 * _4218;
                                float _4220 = _4219 * _4219;
                                float _4221 = _4167 - _3641;
                                float _4222 = _4168 - _3642;
                                float _4223 = _4169 - _3643;
                                float _4227 = inversesqrt(dot(vec3(_4221, _4222, _4223), vec3(_4221, _4222, _4223)));
                                float _4231 = dot(vec3(_1311, _1314, _1317), vec3((-0.0) - _3641, (-0.0) - _3642, (-0.0) - _3643));
                                float _5465 = isnan(0.0) ? _4231 : (isnan(_4231) ? 0.0 : max(_4231, 0.0));
                                float _4234 = isnan(1.0) ? _5465 : (isnan(_5465) ? 1.0 : min(_5465, 1.0));
                                float _4235 = dot(vec3(_1311, _1314, _1317), vec3(_4227 * _4221, _4227 * _4222, _4227 * _4223));
                                float _5476 = isnan(0.0) ? _4235 : (isnan(_4235) ? 0.0 : max(_4235, 0.0));
                                float _4238 = isnan(1.0) ? _5476 : (isnan(_5476) ? 1.0 : min(_5476, 1.0));
                                float _4242 = ((_4238 * _4238) * (_4220 + (-1.0))) + 1.0;
                                float _4243 = _4180 * _4219;
                                float _4244 = _4243 * _4243;
                                float _4250 = ((1.0 - _4244) * dot(vec3(_1311, _1314, _1317), vec3(_4167, _4168, _4169))) + _4244;
                                float _5487 = isnan(0.0) ? _4250 : (isnan(_4250) ? 0.0 : max(_4250, 0.0));
                                float _4251 = isnan(1.0) ? _5487 : (isnan(_5487) ? 1.0 : min(_5487, 1.0));
                                float _4252 = 1.0 - _4219;
                                float _4262 = (0.5 / (((_4251 * ((_4234 * _4252) + _4219)) + 9.9999999392252902907785028219223e-09) + (((_4251 * _4252) + _4219) * _4234))) * _4251;
                                float _5498 = isnan(0.0) ? _4262 : (isnan(_4262) ? 0.0 : max(_4262, 0.0));
                                float _4272 = (_4197 * _4174) * (((_4220 * 3.1415927410125732421875) * (isnan(1.0) ? _5498 : (isnan(_5498) ? 1.0 : min(_5498, 1.0)))) / ((_4242 * _4242) * ((_4187 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4198 * _4044.z;
                                frontier_phi_88_pred_1 = _4198 * _4044.y;
                                frontier_phi_88_pred_2 = _4198 * _4044.x;
                                frontier_phi_88_pred_3 = _4272 * _4056.z;
                                frontier_phi_88_pred_4 = _4272 * _4056.y;
                                frontier_phi_88_pred_5 = _4272 * _4056.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4281 = frontier_phi_88_pred;
                            _4280 = frontier_phi_88_pred_1;
                            _4279 = frontier_phi_88_pred_2;
                            _4278 = frontier_phi_88_pred_3;
                            _4277 = frontier_phi_88_pred_4;
                            _4276 = frontier_phi_88_pred_5;
                            _3986 = _4279 + _3999;
                            _3987 = _4280 + _4000;
                            _3988 = _4281 + _4001;
                            _3983 = _4276 + _3996;
                            _3984 = _4277 + _3997;
                            _3985 = _4278 + _3998;
                            if (_4003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3996 = _3983;
                                _3997 = _3984;
                                _3998 = _3985;
                                _3999 = _3986;
                                _4000 = _3987;
                                _4001 = _3988;
                                _4002 = _4003;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3988;
                        frontier_phi_82_pred_1 = _3987;
                        frontier_phi_82_pred_2 = _3986;
                        frontier_phi_82_pred_3 = _3985;
                        frontier_phi_82_pred_4 = _3984;
                        frontier_phi_82_pred_5 = _3983;
                    }
                    _3626 = frontier_phi_82_pred;
                    _3624 = frontier_phi_82_pred_1;
                    _3622 = frontier_phi_82_pred_2;
                    _3620 = frontier_phi_82_pred_3;
                    _3618 = frontier_phi_82_pred_4;
                    _3616 = frontier_phi_82_pred_5;
                    uint _3782 = _3781 + 1u;
                    if (_3782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3775 = _3616;
                        _3776 = _3618;
                        _3777 = _3620;
                        _3778 = _3622;
                        _3779 = _3624;
                        _3780 = _3626;
                        _3781 = _3782;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3622;
                frontier_phi_63_64_ladder_1 = _3626;
                frontier_phi_63_64_ladder_2 = _3624;
                frontier_phi_63_64_ladder_3 = _3620;
                frontier_phi_63_64_ladder_4 = _3618;
                frontier_phi_63_64_ladder_5 = _3616;
            }
            else
            {
                frontier_phi_63_64_ladder = _3500;
                frontier_phi_63_64_ladder_1 = _3504;
                frontier_phi_63_64_ladder_2 = _3502;
                frontier_phi_63_64_ladder_3 = _3498;
                frontier_phi_63_64_ladder_4 = _3496;
                frontier_phi_63_64_ladder_5 = _3494;
            }
            _3615 = frontier_phi_63_64_ladder_5;
            _3617 = frontier_phi_63_64_ladder_4;
            _3619 = frontier_phi_63_64_ladder_3;
            _3621 = frontier_phi_63_64_ladder;
            _3623 = frontier_phi_63_64_ladder_2;
            _3625 = frontier_phi_63_64_ladder_1;
        }
        float _3630 = isnan(1.0) ? _1370 : (isnan(_1370) ? 1.0 : min(_1370, 1.0));
        _3427 = (_3630 * _3621) + _2939;
        _3429 = (_3630 * _3623) + _2941;
        _3431 = (_3630 * _3625) + _2943;
        _3433 = ((_3615 * _1354) * _3630) + _3277;
        _3435 = ((_3617 * _1356) * _3630) + _3279;
        _3437 = ((_3619 * _1357) * _3630) + _3281;
    }
    else
    {
        _3427 = _2939;
        _3429 = _2941;
        _3431 = _2943;
        _3433 = _3277;
        _3435 = _3279;
        _3437 = _3281;
    }
    float _5514 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _5525 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _5536 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _3454 = ((isnan(1.0) ? _5514 : (isnan(_5514) ? 1.0 : min(_5514, 1.0))) * (_3427 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1370))) + ((_3433 + ((isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0))) * _2207)) * cbPerFrame._m0[3u].x);
    float _3455 = ((isnan(1.0) ? _5525 : (isnan(_5525) ? 1.0 : min(_5525, 1.0))) * (_3429 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1370))) + ((_3435 + ((isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0))) * _2207)) * cbPerFrame._m0[3u].x);
    float _3456 = ((isnan(1.0) ? _5536 : (isnan(_5536) ? 1.0 : min(_5536, 1.0))) * (_3431 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1370))) + ((_3437 + ((isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0))) * _2207)) * cbPerFrame._m0[3u].x);
    uint _3457 = _309 + 6u;
    float _3465 = _1292 / cbSceneParam._m0[86u].x;
    float _3466 = _1293 / cbSceneParam._m0[86u].y;
    vec4 _3480 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3465, _3466, (log2((isnan(cbSceneParam._m0[77u].w) ? _1215 : (isnan(_1215) ? cbSceneParam._m0[77u].w : min(_1215, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3482 = _3480.x;
    float _3483 = _3480.y;
    float _3484 = _3480.z;
    float _3485 = _3480.w;
    float _3557;
    float _3559;
    float _3561;
    float _3563;
    if (_1215 > cbSceneParam._m0[78u].w)
    {
        float _3519 = isnan(_1215) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1215 : min(cbSceneParam._m0[80u].w, _1215));
        float _3520 = _3519 / _1215;
        float _3531 = _3520 * _1265;
        float _3532 = _1266 * _3520;
        float _3533 = (-0.0) - _3532;
        float _3535 = _3520 * _1267;
        float _3537 = (cbSceneParam._m0[77u].w * _3533) / _3519;
        float _3538 = _3537 + cbSceneParam._m0[79u].w;
        float _3539 = cbSceneParam._m0[79u].w - _3532;
        float _3545 = sqrt(((_3531 * _3531) + (_3532 * _3532)) + (_3535 * _3535));
        float _3548 = (1.0 - (cbSceneParam._m0[77u].w / _3519)) * _3545;
        float _3553 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3555 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3732;
        if (abs((_3533 - _3537) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3732 = ((((_3538 > 0.0) ? exp2(_3553 * _3538) : (2.0 - exp2(_3555 * _3538))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3548;
        }
        else
        {
            float _3676 = 1.0 / cbSceneParam._m0[80u].x;
            float _3677 = isnan(_3539) ? _3538 : (isnan(_3538) ? _3539 : max(_3538, _3539));
            float _3678 = isnan(_3539) ? _3538 : (isnan(_3538) ? _3539 : min(_3538, _3539));
            float _3687 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : min(_3677, 0.0));
            float _3688 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : min(_3678, 0.0));
            _3732 = ((abs(_3545 / _3533) * cbSceneParam._m0[80u].y) * ((((_3687 - _3688) * 2.0) - ((exp2(_3553 * (isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0)))) - exp2(_3553 * (isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0))))) * _3676)) - ((exp2(_3555 * _3687) - exp2(_3555 * _3688)) * _3676))) + (_3548 * cbSceneParam._m0[80u].z);
        }
        vec4 _3734 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3465, _3466, 1.0), 0.0);
        float _3743 = exp2((_3732 * (-1.44269502162933349609375)) * (1.0 - _3734.w));
        float _3744 = log2(_3743);
        float _3760 = log2(_3485);
        _3557 = (exp2(_3760 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3744 * cbSceneParam._m0[78u].x)) * _3734.x) / cbSceneParam._m0[78u].x)) + _3482;
        _3559 = (exp2(_3760 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3744 * cbSceneParam._m0[78u].y)) * _3734.y) / cbSceneParam._m0[78u].y)) + _3483;
        _3561 = (exp2(_3760 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3744 * cbSceneParam._m0[78u].z)) * _3734.z) / cbSceneParam._m0[78u].z)) + _3484;
        _3563 = _3743 * _3485;
    }
    else
    {
        _3557 = _3482;
        _3559 = _3483;
        _3561 = _3484;
        _3563 = _3485;
    }
    bool _3770;
    vec4 _3573;
    vec4 _3595;
    float _3597;
    float _3601;
    float _3602;
    float _3603;
    float _3604;
    bool _3614;
    for (;;)
    {
        _3573 = cbMatDynParam._m0[0u];
        float _3575 = roundEven(_3573.y);
        bool _3576 = _3575 == 3.0;
        float _3577 = log2(_3563);
        float _3584 = exp2(_3577 * cbSceneParam._m0[78u].x) * _3454;
        float _3585 = exp2(_3577 * cbSceneParam._m0[78u].y) * _3455;
        float _3586 = exp2(_3577 * cbSceneParam._m0[78u].z) * _3456;
        float _3593 = _1281 + (-0.5);
        _3595 = cbMtdParam._m0[1u];
        _3597 = _3595.y * _3593;
        float _3600 = (_3575 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3601 = _3600 * (_3576 ? _3584 : (_3584 + (cbSceneParam._m0[72u].w * _3557)));
        _3602 = _3600 * (_3576 ? _3585 : (_3585 + (cbSceneParam._m0[72u].w * _3559)));
        _3603 = _3600 * (_3576 ? _3586 : (_3586 + (cbSceneParam._m0[72u].w * _3561)));
        _3604 = _3593 * 0.999000012874603271484375;
        _3614 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3614)
        {
            if ((cbInstanceData._m0[_309 + 7u].x + _3604) < 0.5)
            {
                _3770 = true;
                break;
            }
        }
        uint _3711 = _1330 + uint(_3573.w);
        if ((cbInstanceData._m0[_3711].w < 1.0) && ((cbInstanceData._m0[_3711].w + _3604) < 0.5))
        {
            _3770 = true;
            break;
        }
        if ((_3597 + 1.0) < _3595.x)
        {
            _3770 = true;
            break;
        }
        _3770 = false;
        break;
    }
    float _3974;
    if (_3770)
    {
        discard_state = true;
        _3974 = 0.0;
    }
    else
    {
        _3974 = cbInstanceData._m0[_3457].w;
    }
    SV_Target.x = _3601;
    SV_Target.y = _3602;
    SV_Target.z = _3603;
    SV_Target.w = _3974;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3457].w;
    discard_exit();
}


