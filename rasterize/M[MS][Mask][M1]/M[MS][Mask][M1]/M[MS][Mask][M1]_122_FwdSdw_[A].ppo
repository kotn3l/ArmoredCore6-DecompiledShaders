#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1530;
float _4191;
float _4192;
float _4193;
float _4194;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4203 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4214 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _561 = _559.x;
    float _571 = dot(vec4(_561, _559.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _583 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _370.z) * 2.0) - ((((_561 - _571) * cbMtdParam._m0[23u].w) + _571) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4225 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _597 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_584 * ((_542.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _600 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_584 * ((_542.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _603 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_584 * ((_542.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _441) + _640;
    float _650 = ((_621.y - _641) * _441) + _641;
    float _651 = ((_621.z - _642) * _441) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_663.x - _649) * _514) + _649;
    float _675 = ((_663.y - _650) * _514) + _650;
    float _676 = ((_663.z - _651) * _514) + _651;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _701 = ((_688.z - _676) * _584) + _676;
    float _704 = ((((_688.x - _674) * _584) + _674) * 2.0) + (-1.0);
    float _706 = ((((_688.y - _675) * _584) + _675) * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _4236 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _738 = (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    float _739 = (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _706;
    float _742 = fma(_712, _248, fma(_739, _255, _738 * _241));
    float _745 = fma(_712, _249, fma(_739, _256, _738 * _242));
    float _748 = fma(_712, _250, fma(_739, _257, _738 * _243));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _781 = _779.x;
    float _782 = 1.0 - _781;
    float _790 = (cbMtdParam._m0[19u].x + dot(vec4(_752 * _742, _752 * _745, _752 * _748, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_781 - _782) * cbMtdParam._m0[24u].z) + _782) * cbMtdParam._m0[21u].z);
    float _4247 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _791 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _798 = (_791 * (cbMtdParam._m0[17u].x - _597)) + _597;
    float _799 = (_791 * (cbMtdParam._m0[17u].y - _600)) + _600;
    float _800 = (_791 * (cbMtdParam._m0[17u].z - _603)) + _603;
    vec4 _826 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _828 = _826.x;
    float _845 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _828) * _441) + _828;
    float _862 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _845) * _514) + _845;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _862) * _584) + _862;
    float _884 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _880) * cbMtdParam._m0[19u].z) + _880;
    float _886 = _884 - (_884 * _791);
    float _890 = (cbMtdParam._m0[19u].w * (_726.z - _701)) + _701;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _910 = (_903.x * 2.0) + (-1.0);
    float _911 = (_903.y * 2.0) + (-1.0);
    float _912 = dot(vec2(_910, _911), vec2(_910, _911));
    float _4258 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _920 = ((_903.z - _890) * _791) + _890;
    float _930 = ((sqrt(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) - _712) * _791) + _712;
    float _933 = (((_910 - _738) * _791) + _738) + (cbMtdParam._m0[21u].x * _738);
    float _934 = (((_911 - _739) * _791) + _739) + (cbMtdParam._m0[21u].x * _739);
    float _936 = cbMtdParam._m0[22u].x + _726.w;
    float _939 = fma(_930, _248, fma(_934, _255, _933 * _241));
    float _942 = fma(_930, _249, fma(_934, _256, _933 * _242));
    float _945 = fma(_930, _250, fma(_934, _257, _933 * _243));
    float _949 = inversesqrt(dot(vec3(_939, _942, _945), vec3(_939, _942, _945)));
    float _950 = _949 * _939;
    float _951 = _949 * _942;
    float _952 = _949 * _945;
    float _4269 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _953 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4291 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4302 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4313 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4324 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _958 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _972 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1022 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1012);
    float _1023 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1012);
    float _1024 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1012);
    float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
    float _1029 = _1022 * _1028;
    float _1030 = _1023 * _1028;
    float _1031 = _1024 * _1028;
    vec4 _1036 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1038 = _1036.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1210 = sqrt(((_1022 * _1022) + (_1023 * _1023)) + (_1024 * _1024));
        float _1216 = (cbMatDynParam._m0[5u].x * _1210) + cbMatDynParam._m0[5u].y;
        float _4335 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1221 = (cbMatDynParam._m0[5u].z * _1210) + cbMatDynParam._m0[5u].w;
        float _4346 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) - _1217)) + _1217) < ((_1038 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1049 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1050 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1068 = fma(_952, cbSceneParam._m0[5u].z, fma(_951, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _950));
    float _1071 = fma(_952, cbSceneParam._m0[6u].z, fma(_951, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _950));
    float _1074 = fma(_952, cbSceneParam._m0[7u].z, fma(_951, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _950));
    uint _1087 = _260 + 9u;
    uint _1088 = _1087 + uint(cbMatDynParam._m0[0u].w);
    float _1094 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * cbInstanceData._m0[_1088].x;
    float _1095 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * cbInstanceData._m0[_1088].y;
    float _1096 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1088].z;
    float _4357 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _1100 = 1.0 - _958;
    float _1101 = _1097 * _1100;
    float _1102 = _1098 * _1100;
    float _1103 = _1099 * _1100;
    float _1108 = (_1097 + (-0.039999999105930328369140625)) * _958;
    float _1109 = (_1098 + (-0.039999999105930328369140625)) * _958;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _958;
    float _1111 = _1108 + 0.039999999105930328369140625;
    float _1113 = _1109 + 0.039999999105930328369140625;
    float _1114 = _1110 + 0.039999999105930328369140625;
    vec4 _1123 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1049, cbSceneParam._m0[86u].y * _1050));
    float _1127 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * TEXCOORD_5.w) * _1123.x;
    float _1128 = dot(vec3(_950, _951, _952), vec3(_1029, _1030, _1031));
    float _1131 = _1128 * 2.0;
    float _1135 = (_1131 * _950) - _1029;
    float _1136 = (_1131 * _951) - _1030;
    float _1137 = (_1131 * _952) - _1031;
    float _1141 = abs(dot(vec3(_1029, _1030, _1031), vec3(_950, _951, _952)));
    float _4390 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1143 = sqrt(_953);
    float _1156 = exp2((_1143 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1143 * 3.0));
    float _1162 = (1.0 - _1156) * ((_1143 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1163 = _1156 * _1143;
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1529;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1254 = fma(_1199, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191));
        float _1258 = fma(_1199, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191));
        float _1262 = fma(_1199, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191));
        float _1287 = _1191 + _950;
        float _1288 = _1195 + _951;
        float _1289 = _1199 + _952;
        float _1299 = fma(_1289, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287)) - _1254;
        float _1300 = fma(_1289, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287)) - _1258;
        float _1301 = fma(_1289, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287)) - _1262;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1254 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1258 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[34u].z) + ((((((_1262 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1357 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1323.x + (-0.5));
        float _1359 = _1357 * (_1323.y + (-0.5));
        float _1360 = _1357 * (_1323.z + (-0.5));
        float _1367 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1330.x + (-0.5));
        float _1369 = _1367 * (_1330.y + (-0.5));
        float _1370 = _1367 * (_1330.z + (-0.5));
        float _1377 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1337.x + (-0.5));
        float _1379 = _1377 * (_1337.y + (-0.5));
        float _1380 = _1377 * (_1337.z + (-0.5));
        float _1387 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1344.x + (-0.5));
        float _1389 = _1387 * (_1344.y + (-0.5));
        float _1390 = _1387 * (_1344.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1411 = (dot(vec3(_950, _951, _952), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1421 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4438 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1423 + 1.0))) + _1428) * _1391;
        float _1438 = _1359 * 0.5;
        float _1439 = _1369 * 0.5;
        float _1440 = _1379 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_950, _951, _952), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4471 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1465 + 1.0))) + _1470) * _1392;
        float _1480 = _1360 * 0.5;
        float _1481 = _1370 * 0.5;
        float _1482 = _1380 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_950, _951, _952), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4504 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1507 + 1.0))) + _1512) * _1393;
        _1529 = _1360;
        _1531 = _1359;
        _1532 = _1358;
        _1533 = _1370;
        _1534 = _1369;
        _1535 = _1368;
        _1536 = _1380;
        _1537 = _1379;
        _1538 = _1378;
        _1539 = _1393;
        _1540 = _1392;
        _1541 = _1391;
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1530;
        _1531 = _1530;
        _1532 = _1530;
        _1533 = _1530;
        _1534 = _1530;
        _1535 = _1530;
        _1536 = _1530;
        _1537 = _1530;
        _1538 = _1530;
        _1539 = _1530;
        _1540 = _1530;
        _1541 = _1530;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1570 = fma(_1199, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191));
        float _1574 = fma(_1199, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191));
        float _1578 = fma(_1199, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191));
        float _1601 = _1191 + _950;
        float _1602 = _1195 + _951;
        float _1603 = _1199 + _952;
        float _1613 = fma(_1603, cbModelParam._m0[30u].z, fma(_1602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1601)) - _1570;
        float _1614 = fma(_1603, cbModelParam._m0[31u].z, fma(_1602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1601)) - _1574;
        float _1615 = fma(_1603, cbModelParam._m0[32u].z, fma(_1602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1601)) - _1578;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1570 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1574 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[35u].z) + ((((((_1578 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1669 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1636.x + (-0.5));
        float _1671 = _1669 * (_1636.y + (-0.5));
        float _1672 = _1669 * (_1636.z + (-0.5));
        float _1679 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1643.x + (-0.5));
        float _1681 = _1679 * (_1643.y + (-0.5));
        float _1682 = _1679 * (_1643.z + (-0.5));
        float _1689 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1650.x + (-0.5));
        float _1691 = _1689 * (_1650.y + (-0.5));
        float _1692 = _1689 * (_1650.z + (-0.5));
        float _1699 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1657.x + (-0.5));
        float _1701 = _1699 * (_1657.y + (-0.5));
        float _1702 = _1699 * (_1657.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_950, _951, _952), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4567 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1733 + 1.0))) + _1738) * _1703;
        float _1748 = _1671 * 0.5;
        float _1749 = _1681 * 0.5;
        float _1750 = _1691 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_950, _951, _952), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4600 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1775 + 1.0))) + _1780) * _1704;
        float _1790 = _1672 * 0.5;
        float _1791 = _1682 * 0.5;
        float _1792 = _1692 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_950, _951, _952), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4633 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1817 + 1.0))) + _1822) * _1705;
        _1839 = _1672;
        _1840 = _1671;
        _1841 = _1670;
        _1842 = _1682;
        _1843 = _1681;
        _1844 = _1680;
        _1845 = _1692;
        _1846 = _1691;
        _1847 = _1690;
        _1848 = _1705;
        _1849 = _1704;
        _1850 = _1703;
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
    }
    else
    {
        _1839 = _1530;
        _1840 = _1530;
        _1841 = _1530;
        _1842 = _1530;
        _1843 = _1530;
        _1844 = _1530;
        _1845 = _1530;
        _1846 = _1530;
        _1847 = _1530;
        _1848 = _1530;
        _1849 = _1530;
        _1850 = _1530;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
    }
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1542)) + _1542;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1886 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1863));
    float _1907 = _1135 * 0.5;
    float _1908 = _1136 * 0.5;
    float _1909 = _1137 * 0.5;
    float _1910 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1913 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1916 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1950;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1923 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1529, _1533, _1536, _1539));
        float _1927 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1931 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1938 = dot(vec4(cbModelParam._m0[39u]), vec4(_1907, _1908, _1909, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1961;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1952 = dot(vec4(cbModelParam._m0[40u]), vec4(_1907, _1908, _1909, 1.0));
        _1961 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1961 = 1.0;
    }
    float _1965 = (_1961 * cbModelParam._m0[1u].x) + (_1950 * (1.0 - cbModelParam._m0[1u].x));
    float _1975 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1975 : min(cbModelParam._m0[25u].z, _1975));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2023 = fma(_1199, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1191)) + cbModelParam._m0[13u].w;
        float _2027 = fma(_1199, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1191)) + cbModelParam._m0[14u].w;
        float _2031 = fma(_1199, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1191)) + cbModelParam._m0[15u].w;
        float _2034 = fma(_1137, cbModelParam._m0[13u].z, fma(_1136, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135));
        float _2037 = fma(_1137, cbModelParam._m0[14u].z, fma(_1136, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135));
        float _2040 = fma(_1137, cbModelParam._m0[15u].z, fma(_1136, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135));
        float _2068;
        if (_2034 > 0.0)
        {
            _2068 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2068 = frontier_phi_17_15_ladder;
        }
        float _2240;
        if (_2037 > 0.0)
        {
            _2240 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2240 = frontier_phi_26_22_ladder;
        }
        float _2535;
        if (_2040 > 0.0)
        {
            _2535 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2535 = frontier_phi_38_33_ladder;
        }
        float _2537 = isnan(_2240) ? _2068 : (isnan(_2068) ? _2240 : min(_2068, _2240));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _2034) + _2023;
        float _2543 = (_2538 * _2037) + _2027;
        float _2544 = (_2538 * _2040) + _2031;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2545;
        float _2549 = _2545 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 > _2549) || ((_2543 < _2547) || ((_2542 < _2547) || (_2542 > _2549))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2544, cbModelParam._m0[9u].z, fma(_2543, cbModelParam._m0[9u].y, _2542 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2544, cbModelParam._m0[10u].z, fma(_2543, cbModelParam._m0[10u].y, _2542 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2544, cbModelParam._m0[11u].z, fma(_2543, cbModelParam._m0[11u].y, _2542 * cbModelParam._m0[11u].x))), _1976);
            frontier_phi_16_38_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2056 = frontier_phi_16_38_ladder_2;
        _2058 = frontier_phi_16_38_ladder_1;
        _2060 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1135, _1136, _1137), _1976);
        _2056 = _2044.x * cbModelParam._m0[1u].y;
        _2058 = _2044.y * cbModelParam._m0[1u].y;
        _2060 = _2044.z * cbModelParam._m0[1u].y;
    }
    float _2064 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2064 : min(cbModelParam._m0[25u].w, _2064));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2119 = fma(_1199, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1191)) + cbModelParam._m0[21u].w;
        float _2123 = fma(_1199, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1191)) + cbModelParam._m0[22u].w;
        float _2127 = fma(_1199, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1191)) + cbModelParam._m0[23u].w;
        float _2130 = fma(_1137, cbModelParam._m0[21u].z, fma(_1136, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135));
        float _2133 = fma(_1137, cbModelParam._m0[22u].z, fma(_1136, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135));
        float _2136 = fma(_1137, cbModelParam._m0[23u].z, fma(_1136, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135));
        float _2245;
        if (_2130 > 0.0)
        {
            _2245 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2245 = frontier_phi_28_24_ladder;
        }
        float _2562;
        if (_2133 > 0.0)
        {
            _2562 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2562 = frontier_phi_40_35_ladder;
        }
        float _2900;
        if (_2136 > 0.0)
        {
            _2900 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2900 = frontier_phi_50_47_ladder;
        }
        float _2902 = isnan(_2562) ? _2245 : (isnan(_2245) ? _2562 : min(_2245, _2562));
        float _2903 = isnan(_2900) ? _2902 : (isnan(_2902) ? _2900 : min(_2902, _2900));
        float _2907 = (_2903 * _2130) + _2119;
        float _2908 = (_2903 * _2133) + _2123;
        float _2909 = (_2903 * _2136) + _2127;
        float _2910 = _2903 * 9.9999997473787516355514526367188e-05;
        float _2911 = (-1.0) - _2910;
        float _2913 = _2910 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2909 > _2913) || ((_2909 < _2911) || ((_2908 > _2913) || ((_2908 < _2911) || ((_2907 < _2911) || (_2907 > _2913))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2909, cbModelParam._m0[17u].z, fma(_2908, cbModelParam._m0[17u].y, _2907 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2909, cbModelParam._m0[18u].z, fma(_2908, cbModelParam._m0[18u].y, _2907 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2909, cbModelParam._m0[19u].z, fma(_2908, cbModelParam._m0[19u].y, _2907 * cbModelParam._m0[19u].x))), _2065);
            frontier_phi_25_50_ladder = _3031.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3031.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3031.x * cbModelParam._m0[1u].z;
        }
        _2155 = frontier_phi_25_50_ladder_2;
        _2157 = frontier_phi_25_50_ladder_1;
        _2159 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1135, _1136, _1137), _2065);
        _2155 = _2139.x * cbModelParam._m0[1u].z;
        _2157 = _2139.y * cbModelParam._m0[1u].z;
        _2159 = _2139.z * cbModelParam._m0[1u].z;
    }
    float _2172 = (((_1162 * _1111) + _1163) * _1127) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2174 = (((_1162 * _1113) + _1163) * _1127) * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2176 = (((_1162 * _1114) + _1163) * _1127) * ((cbModelParam._m0[1u].w * (_2159 - _2060)) + _2060);
    float _2179 = fma(_2176, cbSceneParam._m0[89u].z, fma(_2174, cbSceneParam._m0[89u].y, _2172 * cbSceneParam._m0[89u].x));
    float _2182 = fma(_2176, cbSceneParam._m0[90u].z, fma(_2174, cbSceneParam._m0[90u].y, _2172 * cbSceneParam._m0[90u].x));
    float _2185 = fma(_2176, cbSceneParam._m0[91u].z, fma(_2174, cbSceneParam._m0[91u].y, _2172 * cbSceneParam._m0[91u].x));
    float _2219 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2223 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2232 = _2219 / _2231;
    float _2233 = _2223 / _2231;
    float _2234 = _2227 / _2231;
    float _2381;
    float _2382;
    float _2383;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2261 = ((uint(_2234 > cbSceneParam._m0[59u].y) + uint(_2234 > cbSceneParam._m0[59u].x)) + uint(_2234 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2262 = _2261 + 43u;
        uint _2270 = _2261 + 44u;
        uint _2278 = _2261 + 45u;
        uint _2286 = _2261 + 46u;
        float _2297 = fma(_2231, cbSceneParam._m0[_2262].w, fma(_2227, cbSceneParam._m0[_2262].z, fma(_2223, cbSceneParam._m0[_2262].y, _2219 * cbSceneParam._m0[_2262].x)));
        float _2301 = fma(_2231, cbSceneParam._m0[_2270].w, fma(_2227, cbSceneParam._m0[_2270].z, fma(_2223, cbSceneParam._m0[_2270].y, _2219 * cbSceneParam._m0[_2270].x)));
        float _2309 = fma(_2231, cbSceneParam._m0[_2286].w, fma(_2227, cbSceneParam._m0[_2286].z, fma(_2223, cbSceneParam._m0[_2286].y, _2219 * cbSceneParam._m0[_2286].x)));
        float _2314 = cbSceneParam._m0[33u].z * _2309;
        float _2316 = cbSceneParam._m0[33u].w * _2309;
        float _2319 = fma(_2231, cbSceneParam._m0[_2278].w, fma(_2227, cbSceneParam._m0[_2278].z, fma(_2223, cbSceneParam._m0[_2278].y, _2219 * cbSceneParam._m0[_2278].x))) / _2309;
        float _2367 = (cbSceneParam._m0[33u].x - sqrt(((_2233 * _2233) + (_2232 * _2232)) + (_2234 * _2234))) * cbSceneParam._m0[33u].y;
        float _4759 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2374 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2314 + _2297) / _2309, (_2316 + _2301) / _2309), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2316 + _2297) / _2309, (_2301 - _2314) / _2309), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 - _2314) / _2309, (_2301 - _2316) / _2309), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 - _2316) / _2309, (_2314 + _2301) / _2309), _2319), 0.0)).x), vec4(0.25)));
        _2381 = 1.0 - (_2374 * cbSceneParam._m0[34u].x);
        _2382 = 1.0 - (_2374 * cbSceneParam._m0[34u].y);
        _2383 = 1.0 - (_2374 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2381 = 1.0;
        _2382 = 1.0;
        _2383 = 1.0;
    }
    float _2447;
    float _2449;
    float _2451;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2435 = fma(_2231, cbSceneParam._m0[63u].w, fma(_2227, cbSceneParam._m0[63u].z, fma(_2223, cbSceneParam._m0[63u].y, _2219 * cbSceneParam._m0[63u].x)));
        float _2436 = fma(_2231, cbSceneParam._m0[60u].w, fma(_2227, cbSceneParam._m0[60u].z, fma(_2223, cbSceneParam._m0[60u].y, _2219 * cbSceneParam._m0[60u].x))) / _2435;
        float _2437 = fma(_2231, cbSceneParam._m0[61u].w, fma(_2227, cbSceneParam._m0[61u].z, fma(_2223, cbSceneParam._m0[61u].y, _2219 * cbSceneParam._m0[61u].x))) / _2435;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2436 >= cbSceneParam._m0[64u].x) && (_2437 >= cbSceneParam._m0[64u].y)) && (_2436 <= cbSceneParam._m0[64u].z)) && (_2437 <= cbSceneParam._m0[64u].w))
        {
            float _2575 = fma(_2231, cbSceneParam._m0[62u].w, fma(_2227, cbSceneParam._m0[62u].z, fma(_2223, cbSceneParam._m0[62u].y, _2219 * cbSceneParam._m0[62u].x))) / _2435;
            float _2579 = isnan(cbSceneParam._m0[41u].w) ? _2575 : (isnan(_2575) ? cbSceneParam._m0[41u].w : max(_2575, cbSceneParam._m0[41u].w));
            float _2622 = (cbSceneParam._m0[33u].x - sqrt(((_2233 * _2233) + (_2232 * _2232)) + (_2234 * _2234))) * cbSceneParam._m0[33u].y;
            float _4775 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
            float _2629 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2436, cbSceneParam._m0[33u].w + _2437), _2579), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2436, _2437 - cbSceneParam._m0[33u].z), _2579), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2436 - cbSceneParam._m0[33u].z, _2437 - cbSceneParam._m0[33u].w), _2579), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2436 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2437), _2579), 0.0)).x), vec4(0.25)));
            float _2633 = 1.0 - (_2629 * cbSceneParam._m0[34u].x);
            float _2634 = 1.0 - (_2629 * cbSceneParam._m0[34u].y);
            float _2635 = 1.0 - (_2629 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2635) ? _2383 : (isnan(_2383) ? _2635 : min(_2383, _2635));
            frontier_phi_37_36_ladder_1 = isnan(_2634) ? _2382 : (isnan(_2382) ? _2634 : min(_2382, _2634));
            frontier_phi_37_36_ladder_2 = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
        }
        else
        {
            frontier_phi_37_36_ladder = _2383;
            frontier_phi_37_36_ladder_1 = _2382;
            frontier_phi_37_36_ladder_2 = _2381;
        }
        _2447 = frontier_phi_37_36_ladder_2;
        _2449 = frontier_phi_37_36_ladder_1;
        _2451 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2447 = _2381;
        _2449 = _2382;
        _2451 = _2383;
    }
    uvec4 _2456 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2458 = _2456.x * 14u;
    uint _2459 = _2458 + 13u;
    float _2466 = _1127 + (-1.0);
    float _2471 = (cbLight._m0[_2459].x * _2466) + 1.0;
    float _2472 = (cbLight._m0[_2459].y * _2466) + 1.0;
    float _2473 = (cbLight._m0[_2459].z * _2466) + 1.0;
    float _2474 = (cbLight._m0[_2459].w * _2466) + 1.0;
    uint _2475 = _2458 + 5u;
    float _2481 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
    uint _2485 = _2458 + 4u;
    float _2494 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    uint _2498 = _2458 | 1u;
    float _2509 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_950, _951, _952));
    float _2512 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_950, _951, _952));
    float _4811 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _4822 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2517 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * 0.3183098733425140380859375;
    float _2519 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * 0.3183098733425140380859375;
    float _2526 = ((cbLight._m0[_2475].x * _2481) * _2519) + (((cbLight._m0[_2485].x * _2447) * _2494) * _2517);
    float _2527 = ((_2481 * cbLight._m0[_2475].y) * _2519) + (((cbLight._m0[_2485].y * _2449) * _2494) * _2517);
    float _2528 = ((_2481 * cbLight._m0[_2475].z) * _2519) + (((cbLight._m0[_2485].z * _2451) * _2494) * _2517);
    uvec4 _2532 = floatBitsToUint(cbLight._m0[_2458 + 12u]);
    bool _2534 = _2532.x == 0u;
    float _2636;
    float _2638;
    float _2640;
    if (_2534)
    {
        _2636 = _2526;
        _2638 = _2527;
        _2640 = _2528;
    }
    else
    {
        uint _2644 = _2458 + 6u;
        float _2660 = (dot(vec3(cbLight._m0[_2458 + 2u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2661 = _2660 * _2660;
        float _4833 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2662 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2663 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2636 = (((cbLight._m0[_2644].x * 0.3183098733425140380859375) * _2662) * _2663) + _2526;
        _2638 = (((cbLight._m0[_2644].y * 0.3183098733425140380859375) * _2662) * _2663) + _2527;
        _2640 = (((cbLight._m0[_2644].z * 0.3183098733425140380859375) * _2662) * _2663) + _2528;
    }
    bool _2643 = _2532.y == 0u;
    float _2698;
    float _2700;
    float _2702;
    if (_2643)
    {
        _2698 = _2636;
        _2700 = _2638;
        _2702 = _2640;
    }
    else
    {
        uint _2871 = _2458 + 7u;
        float _2887 = (dot(vec3(cbLight._m0[_2458 + 3u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2888 = _2887 * _2887;
        float _4849 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2889 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2890 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _2698 = (((cbLight._m0[_2871].x * 0.3183098733425140380859375) * _2889) * _2890) + _2636;
        _2700 = (((cbLight._m0[_2871].y * 0.3183098733425140380859375) * _2889) * _2890) + _2638;
        _2702 = (((cbLight._m0[_2871].z * 0.3183098733425140380859375) * _2889) * _2890) + _2640;
    }
    uint _2705 = _2458 + 8u;
    float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _953) * 0.949999988079071044921875);
    float _2719 = _2718 * _2718;
    float _2720 = cbLight._m0[_2458].x + _1029;
    float _2721 = cbLight._m0[_2458].y + _1030;
    float _2722 = cbLight._m0[_2458].z + _1031;
    float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
    float _2727 = _2726 * _2720;
    float _2728 = _2726 * _2721;
    float _2729 = _2726 * _2722;
    float _2730 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2458].xyz));
    float _4865 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2733 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _4876 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _2734 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2735 = dot(vec3(_950, _951, _952), vec3(_2727, _2728, _2729));
    float _4887 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2739 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2727, _2728, _2729));
    float _4898 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = _2719 * _2719;
    float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
    float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
    float _2756 = 0.959999978542327880859375 - _1108;
    float _2758 = 0.959999978542327880859375 - _1109;
    float _2759 = 0.959999978542327880859375 - _1110;
    float _2766 = 1.0 - _2719;
    float _2777 = (0.5 / (((_2734 * ((_2733 * _2766) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2766) + _2719) * _2733))) * _2733;
    float _4909 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2779 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
    uint _2793 = _2458 + 9u;
    float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _953) * 0.949999988079071044921875);
    float _2805 = _2804 * _2804;
    float _2806 = cbLight._m0[_2498].x + _1029;
    float _2807 = cbLight._m0[_2498].y + _1030;
    float _2808 = cbLight._m0[_2498].z + _1031;
    float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
    float _2813 = _2812 * _2806;
    float _2814 = _2812 * _2807;
    float _2815 = _2812 * _2808;
    float _2816 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2498].xyz));
    float _4920 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2819 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2820 = dot(vec3(_950, _951, _952), vec3(_2813, _2814, _2815));
    float _4931 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2823 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2824 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2813, _2814, _2815));
    float _4942 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
    float _2828 = _2805 * _2805;
    float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
    float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0);
    float _2846 = 1.0 - _2805;
    float _2856 = (0.5 / (((_2734 * ((_2819 * _2846) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2846) + _2805) * _2819))) * _2819;
    float _4953 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
    float _2858 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
    float _2868 = (((((_2839 * _2756) + _1111) * cbLight._m0[_2793].x) * _2858) * _2481) + ((((cbLight._m0[_2705].x * _2447) * ((_2755 * _2756) + _1111)) * _2779) * _2494);
    float _2869 = (((((_2839 * _2758) + _1113) * cbLight._m0[_2793].y) * _2858) * _2481) + ((((cbLight._m0[_2705].y * _2449) * ((_2755 * _2758) + _1113)) * _2779) * _2494);
    float _2870 = (((((_2839 * _2759) + _1114) * cbLight._m0[_2793].z) * _2858) * _2481) + ((((cbLight._m0[_2705].z * _2451) * ((_2755 * _2759) + _1114)) * _2779) * _2494);
    float _2926;
    float _2928;
    float _2930;
    if (_2534)
    {
        _2926 = _2868;
        _2928 = _2869;
        _2930 = _2870;
    }
    else
    {
        uint _2932 = _2458 + 2u;
        uint _2936 = _2458 + 10u;
        float _2950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2932].w)) * _953) * 0.949999988079071044921875);
        float _2951 = _2950 * _2950;
        float _2952 = cbLight._m0[_2932].x + _1029;
        float _2953 = cbLight._m0[_2932].y + _1030;
        float _2954 = cbLight._m0[_2932].z + _1031;
        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
        float _2959 = _2958 * _2952;
        float _2960 = _2958 * _2953;
        float _2961 = _2958 * _2954;
        float _2962 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2932].xyz));
        float _4964 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2966 = dot(vec3(_950, _951, _952), vec3(_2959, _2960, _2961));
        float _4975 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _2970 = dot(vec3(cbLight._m0[_2932].xyz), vec3(_2959, _2960, _2961));
        float _4986 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2974 = _2951 * _2951;
        float _2978 = ((_2969 * _2969) * (_2974 + (-1.0))) + 1.0;
        float _2985 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
        float _2992 = 1.0 - _2951;
        float _3002 = (0.5 / (((_2734 * ((_2965 * _2992) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2992) + _2951) * _2965))) * _2965;
        float _4997 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3004 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2974 / ((_2978 * _2978) * 3.141590118408203125));
        float _3005 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2926 = (((((_2985 * _2756) + _1111) * cbLight._m0[_2936].x) * _3004) * _3005) + _2868;
        _2928 = (((((_2985 * _2758) + _1113) * cbLight._m0[_2936].y) * _3004) * _3005) + _2869;
        _2930 = (((((_2985 * _2759) + _1114) * cbLight._m0[_2936].z) * _3004) * _3005) + _2870;
    }
    float _3036;
    float _3038;
    float _3040;
    if (_2643)
    {
        _3036 = _2926;
        _3038 = _2928;
        _3040 = _2930;
    }
    else
    {
        uint _3047 = _2458 + 3u;
        uint _3051 = _2458 + 11u;
        float _3065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3047].w)) * _953) * 0.949999988079071044921875);
        float _3066 = _3065 * _3065;
        float _3067 = cbLight._m0[_3047].x + _1029;
        float _3068 = cbLight._m0[_3047].y + _1030;
        float _3069 = cbLight._m0[_3047].z + _1031;
        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
        float _3074 = _3073 * _3067;
        float _3075 = _3073 * _3068;
        float _3076 = _3073 * _3069;
        float _3077 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_3047].xyz));
        float _5013 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
        float _3080 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _3081 = dot(vec3(_950, _951, _952), vec3(_3074, _3075, _3076));
        float _5024 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
        float _3084 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
        float _3085 = dot(vec3(cbLight._m0[_3047].xyz), vec3(_3074, _3075, _3076));
        float _5035 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        float _3089 = _3066 * _3066;
        float _3093 = ((_3084 * _3084) * (_3089 + (-1.0))) + 1.0;
        float _3100 = exp2(log2(1.0 - (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) * 5.0);
        float _3107 = 1.0 - _3066;
        float _3117 = (0.5 / (((_2734 * ((_3080 * _3107) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _3107) + _3066) * _3080))) * _3080;
        float _5046 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        float _3119 = (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3089 / ((_3093 * _3093) * 3.141590118408203125));
        float _3120 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _3036 = (((((_3100 * _2756) + _1111) * cbLight._m0[_3051].x) * _3119) * _3120) + _2926;
        _3038 = (((((_3100 * _2758) + _1113) * cbLight._m0[_3051].y) * _3119) * _3120) + _2928;
        _3040 = (((((_3100 * _2759) + _1114) * cbLight._m0[_3051].z) * _3119) * _3120) + _2930;
    }
    float _3186;
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    float _3196;
    if (_2456.y == 0u)
    {
        uvec4 _3141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3142 = _3141.x;
        uint _3153 = uint((float(_3141.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1050) / _3142))) + floor(float(uint(cbSceneParam._m0[85u].x * _1049) / _3142)));
        float _3163 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3164 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
        uint _3167 = uint(isnan(14.0) ? _3164 : (isnan(_3164) ? 14.0 : min(_3164, 14.0)));
        uvec4 _3172 = texelFetch(g_lightClusterGridBuffer, int(((_3167 << 2u) + (_3153 << 6u)) >> 2u));
        uint _3173 = _3172.x;
        uint _3174 = _3141.z;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        if (((((1u << ((_3174 >> 4u) & 15u)) + 4294967295u) & _3173) == 0u) || ((_3174 & 240u) == 0u))
        {
            _3253 = 0.0;
            _3255 = 0.0;
            _3257 = 0.0;
            _3259 = 0.0;
            _3261 = 0.0;
            _3263 = 0.0;
        }
        else
        {
            float _3254;
            float _3256;
            float _3258;
            float _3260;
            float _3262;
            float _3264;
            float _3406 = 0.0;
            float _3407 = 0.0;
            float _3408 = 0.0;
            float _3409 = 0.0;
            float _3410 = 0.0;
            float _3411 = 0.0;
            uint _3412 = 0u;
            uint _3421;
            bool _3422;
            for (;;)
            {
                _3421 = texelFetch(g_lightClassification, int((((_3167 << 5u) + (_3153 << 9u)) + (_3412 << 2u)) >> 2u)).x;
                _3422 = _3421 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3422)
                {
                    frontier_phi_71_pred = _3411;
                    frontier_phi_71_pred_1 = _3410;
                    frontier_phi_71_pred_2 = _3409;
                    frontier_phi_71_pred_3 = _3408;
                    frontier_phi_71_pred_4 = _3407;
                    frontier_phi_71_pred_5 = _3406;
                }
                else
                {
                    float _3551;
                    float _3552;
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    uint _3557;
                    _3551 = _3406;
                    _3552 = _3407;
                    _3553 = _3408;
                    _3554 = _3409;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3421;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    for (;;)
                    {
                        uint _3561 = uint(findLSB(_3557)) + (_3412 << 5u);
                        uint _3558 = (_3557 + 4294967295u) & _3557;
                        uint _3563 = _3561 * 48u;
                        vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3563)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 3u)).x));
                        uint _3583 = (_3561 * 48u) + 4u;
                        vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3583)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 3u)).x));
                        uint _3602 = (_3561 * 48u) + 8u;
                        vec3 _3613 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3602)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 2u)).x));
                        float _3617 = _3577.x - _2232;
                        float _3618 = _3577.y - _2233;
                        float _3619 = _3577.z - _2234;
                        float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                        float _3623 = inversesqrt(_3620);
                        float _3624 = _3623 * _3617;
                        float _3625 = _3623 * _3618;
                        float _3626 = _3623 * _3619;
                        float _3627 = dot(vec3(_1068, _1071, _1074), vec3(_3624, _3625, _3626));
                        float _3632 = 1.0 - (_3620 * _3577.w);
                        float _5072 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3633 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3634 = sqrt(_3620) * _3596.w;
                        float _3637 = 1.39999997615814208984375 / (_3634 + 1.39999997615814208984375);
                        float _3638 = _3637 * _3637;
                        float _3641 = ((1.0 - _3638) * _3627) + _3638;
                        float _3644 = _3634 * _3634;
                        float _3648 = ((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3633) / ((_3644 * 0.699999988079071044921875) + 1.0);
                        float _3652 = (-0.0) - _2232;
                        float _3653 = (-0.0) - _2233;
                        float _3654 = (-0.0) - _2234;
                        float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                        float _3659 = _3658 * _3652;
                        float _3660 = _3658 * _3653;
                        float _3661 = _3658 * _3654;
                        float _3668 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                        float _3669 = 1.0 - _1143;
                        float _3676 = sqrt(1.0 - ((1.0 - (_3669 * _3669)) * (1.0 - (_3668 * _3668))));
                        float _3677 = _3676 * _3676;
                        float _3678 = _3677 * _3677;
                        float _3679 = _3659 + _3624;
                        float _3680 = _3660 + _3625;
                        float _3681 = _3661 + _3626;
                        float _3685 = inversesqrt(dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681)));
                        float _3689 = dot(vec3(_1068, _1071, _1074), vec3(_3659, _3660, _3661));
                        float _5088 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                        float _3692 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3693 = dot(vec3(_1068, _1071, _1074), vec3(_3685 * _3679, _3685 * _3680, _3685 * _3681));
                        float _5099 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                        float _3696 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3700 = ((_3696 * _3696) * (_3678 + (-1.0))) + 1.0;
                        float _3701 = _3637 * _3677;
                        float _3702 = _3701 * _3701;
                        float _3705 = ((1.0 - _3702) * _3627) + _3702;
                        float _5110 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                        float _3706 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3707 = 1.0 - _3677;
                        float _3717 = (0.5 / (((_3706 * ((_3692 * _3707) + _3677)) + 9.9999999392252902907785028219223e-09) + (((_3706 * _3707) + _3677) * _3692))) * _3706;
                        float _5121 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                        float _3728 = (((_3678 * 3.1415927410125732421875) * (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0)))) / ((_3700 * _3700) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125))) * _3633;
                        _3481 = (_3648 * _3596.x) + _3554;
                        _3482 = (_3648 * _3596.y) + _3555;
                        _3483 = (_3648 * _3596.z) + _3556;
                        _3478 = (_3728 * _3613.x) + _3551;
                        _3479 = (_3728 * _3613.y) + _3552;
                        _3480 = (_3728 * _3613.z) + _3553;
                        if (_3558 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3551 = _3478;
                            _3552 = _3479;
                            _3553 = _3480;
                            _3554 = _3481;
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3558;
                        }
                    }
                    frontier_phi_71_pred = _3483;
                    frontier_phi_71_pred_1 = _3482;
                    frontier_phi_71_pred_2 = _3481;
                    frontier_phi_71_pred_3 = _3480;
                    frontier_phi_71_pred_4 = _3479;
                    frontier_phi_71_pred_5 = _3478;
                }
                _3264 = frontier_phi_71_pred;
                _3262 = frontier_phi_71_pred_1;
                _3260 = frontier_phi_71_pred_2;
                _3258 = frontier_phi_71_pred_3;
                _3256 = frontier_phi_71_pred_4;
                _3254 = frontier_phi_71_pred_5;
                uint _3413 = _3412 + 1u;
                if (_3413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3406 = _3254;
                    _3407 = _3256;
                    _3408 = _3258;
                    _3409 = _3260;
                    _3410 = _3262;
                    _3411 = _3264;
                    _3412 = _3413;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3253 = _3254;
            _3255 = _3256;
            _3257 = _3258;
            _3259 = _3260;
            _3261 = _3262;
            _3263 = _3264;
        }
        uvec4 _3267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3268 = _3267.z;
        uint _3270 = (_3268 >> 8u) & 15u;
        float _3374;
        float _3376;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        if (((4294967295u << _3270) & _3173) == 0u)
        {
            _3374 = _3253;
            _3376 = _3255;
            _3378 = _3257;
            _3380 = _3259;
            _3382 = _3261;
            _3384 = _3263;
        }
        else
        {
            float _3399 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _3400 = _3399 * _2232;
            float _3401 = _3399 * _2233;
            float _3402 = _3399 * _2234;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3270 < ((_3268 >> 12u) & 15u))
            {
                float _3375;
                float _3377;
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3534 = _3253;
                float _3535 = _3255;
                float _3536 = _3257;
                float _3537 = _3259;
                float _3538 = _3261;
                float _3539 = _3263;
                uint _3540 = _3270;
                uint _3549;
                bool _3550;
                for (;;)
                {
                    _3549 = texelFetch(g_lightClassification, int((((_3167 << 5u) + (_3153 << 9u)) + (_3540 << 2u)) >> 2u)).x;
                    _3550 = _3549 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3550)
                    {
                        frontier_phi_82_pred = _3539;
                        frontier_phi_82_pred_1 = _3538;
                        frontier_phi_82_pred_2 = _3537;
                        frontier_phi_82_pred_3 = _3536;
                        frontier_phi_82_pred_4 = _3535;
                        frontier_phi_82_pred_5 = _3534;
                    }
                    else
                    {
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _4035;
                        float _4036;
                        float _4037;
                        float _4038;
                        float _4039;
                        float _4040;
                        float _3755 = _3534;
                        float _3756 = _3535;
                        float _3757 = _3536;
                        float _3758 = _3537;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        uint _3761 = _3549;
                        uint _3762;
                        vec4 _3787;
                        float _3788;
                        vec4 _3803;
                        vec3 _3815;
                        vec4 _3830;
                        vec4 _3845;
                        float _3891;
                        bool _3892;
                        for (;;)
                        {
                            uint _3772 = ((_3540 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3761));
                            _3762 = (_3761 + 4294967295u) & _3761;
                            uint _3774 = _3772 * 40u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            _3788 = _3787.w;
                            uint _3790 = (_3772 * 40u) + 4u;
                            _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3805 = (_3772 * 40u) + 8u;
                            _3815 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x));
                            uint _3817 = (_3772 * 40u) + 16u;
                            _3830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 3u)).x));
                            uint _3832 = (_3772 * 40u) + 20u;
                            _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            uint _3847 = (_3772 * 40u) + 24u;
                            vec4 _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            uint _3866 = (_3772 * 40u) + 28u;
                            vec4 _3879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 3u)).x));
                            _3891 = fma(_2234, _3879.z, fma(_2233, _3879.y, _3879.x * _2232)) + _3879.w;
                            _3892 = !((fma(_2234, _3860.z, fma(_2233, _3860.y, _3860.x * _2232)) + _3860.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3892)
                            {
                                float _3919 = _3787.x - _2232;
                                float _3920 = _3787.y - _2233;
                                float _3921 = _3787.z - _2234;
                                float _3922 = dot(vec3(_3919, _3920, _3921), vec3(_3919, _3920, _3921));
                                float _3925 = inversesqrt(_3922);
                                float _3926 = _3925 * _3919;
                                float _3927 = _3925 * _3920;
                                float _3928 = _3925 * _3921;
                                float _3932 = 1.0 - (_3922 / (_3788 * _3788));
                                float _5132 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3933 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3937 = sqrt(_3922) * _3803.w;
                                float _3939 = 1.39999997615814208984375 / (_3937 + 1.39999997615814208984375);
                                float _3940 = _3939 * _3939;
                                float _3943 = ((1.0 - _3940) * dot(vec3(_3926, _3927, _3928), vec3(_1068, _1071, _1074))) + _3940;
                                float _3946 = _3937 * _3937;
                                float _3950 = (fma(_2234, _3830.z, fma(_2233, _3830.y, _3830.x * _2232)) + _3830.w) / _3891;
                                float _3951 = (fma(_2234, _3845.z, fma(_2233, _3845.y, _3845.x * _2232)) + _3845.w) / _3891;
                                float _3955 = 1.0 - dot(vec2(_3950, _3951), vec2(_3950, _3951));
                                float _5148 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3956 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3957 = _3956 * (((isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0))) * _3933) / ((_3946 * 0.699999988079071044921875) + 1.0));
                                float _3969 = exp2(log2(1.0 / ((_3946 * 3.5) + 5.0)) * 0.25);
                                float _3970 = 1.0 - _1143;
                                float _3977 = sqrt(1.0 - ((1.0 - (_3970 * _3970)) * (1.0 - (_3969 * _3969))));
                                float _3978 = _3977 * _3977;
                                float _3979 = _3978 * _3978;
                                float _3980 = _3926 - _3400;
                                float _3981 = _3927 - _3401;
                                float _3982 = _3928 - _3402;
                                float _3986 = inversesqrt(dot(vec3(_3980, _3981, _3982), vec3(_3980, _3981, _3982)));
                                float _3990 = dot(vec3(_1068, _1071, _1074), vec3((-0.0) - _3400, (-0.0) - _3401, (-0.0) - _3402));
                                float _5159 = isnan(0.0) ? _3990 : (isnan(_3990) ? 0.0 : max(_3990, 0.0));
                                float _3993 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3994 = dot(vec3(_1068, _1071, _1074), vec3(_3986 * _3980, _3986 * _3981, _3986 * _3982));
                                float _5170 = isnan(0.0) ? _3994 : (isnan(_3994) ? 0.0 : max(_3994, 0.0));
                                float _3997 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _4001 = ((_3997 * _3997) * (_3979 + (-1.0))) + 1.0;
                                float _4002 = _3939 * _3978;
                                float _4003 = _4002 * _4002;
                                float _4009 = ((1.0 - _4003) * dot(vec3(_1068, _1071, _1074), vec3(_3926, _3927, _3928))) + _4003;
                                float _5181 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4010 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _4011 = 1.0 - _3978;
                                float _4021 = (0.5 / (((_4010 * ((_3993 * _4011) + _3978)) + 9.9999999392252902907785028219223e-09) + (((_4010 * _4011) + _3978) * _3993))) * _4010;
                                float _5192 = isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0));
                                float _4031 = (_3956 * _3933) * (((_3979 * 3.1415927410125732421875) * (isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0)))) / ((_4001 * _4001) * ((_3946 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3957 * _3803.z;
                                frontier_phi_88_pred_1 = _3957 * _3803.y;
                                frontier_phi_88_pred_2 = _3957 * _3803.x;
                                frontier_phi_88_pred_3 = _4031 * _3815.z;
                                frontier_phi_88_pred_4 = _4031 * _3815.y;
                                frontier_phi_88_pred_5 = _4031 * _3815.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4040 = frontier_phi_88_pred;
                            _4039 = frontier_phi_88_pred_1;
                            _4038 = frontier_phi_88_pred_2;
                            _4037 = frontier_phi_88_pred_3;
                            _4036 = frontier_phi_88_pred_4;
                            _4035 = frontier_phi_88_pred_5;
                            _3745 = _4038 + _3758;
                            _3746 = _4039 + _3759;
                            _3747 = _4040 + _3760;
                            _3742 = _4035 + _3755;
                            _3743 = _4036 + _3756;
                            _3744 = _4037 + _3757;
                            if (_3762 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3755 = _3742;
                                _3756 = _3743;
                                _3757 = _3744;
                                _3758 = _3745;
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3762;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3747;
                        frontier_phi_82_pred_1 = _3746;
                        frontier_phi_82_pred_2 = _3745;
                        frontier_phi_82_pred_3 = _3744;
                        frontier_phi_82_pred_4 = _3743;
                        frontier_phi_82_pred_5 = _3742;
                    }
                    _3385 = frontier_phi_82_pred;
                    _3383 = frontier_phi_82_pred_1;
                    _3381 = frontier_phi_82_pred_2;
                    _3379 = frontier_phi_82_pred_3;
                    _3377 = frontier_phi_82_pred_4;
                    _3375 = frontier_phi_82_pred_5;
                    uint _3541 = _3540 + 1u;
                    if (_3541 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3534 = _3375;
                        _3535 = _3377;
                        _3536 = _3379;
                        _3537 = _3381;
                        _3538 = _3383;
                        _3539 = _3385;
                        _3540 = _3541;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3381;
                frontier_phi_63_64_ladder_1 = _3385;
                frontier_phi_63_64_ladder_2 = _3383;
                frontier_phi_63_64_ladder_3 = _3379;
                frontier_phi_63_64_ladder_4 = _3377;
                frontier_phi_63_64_ladder_5 = _3375;
            }
            else
            {
                frontier_phi_63_64_ladder = _3259;
                frontier_phi_63_64_ladder_1 = _3263;
                frontier_phi_63_64_ladder_2 = _3261;
                frontier_phi_63_64_ladder_3 = _3257;
                frontier_phi_63_64_ladder_4 = _3255;
                frontier_phi_63_64_ladder_5 = _3253;
            }
            _3374 = frontier_phi_63_64_ladder_5;
            _3376 = frontier_phi_63_64_ladder_4;
            _3378 = frontier_phi_63_64_ladder_3;
            _3380 = frontier_phi_63_64_ladder;
            _3382 = frontier_phi_63_64_ladder_2;
            _3384 = frontier_phi_63_64_ladder_1;
        }
        float _3389 = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
        _3186 = (_3389 * _3380) + _2698;
        _3188 = (_3389 * _3382) + _2700;
        _3190 = (_3389 * _3384) + _2702;
        _3192 = ((_3374 * _1111) * _3389) + _3036;
        _3194 = ((_3376 * _1113) * _3389) + _3038;
        _3196 = ((_3378 * _1114) * _3389) + _3040;
    }
    else
    {
        _3186 = _2698;
        _3188 = _2700;
        _3190 = _2702;
        _3192 = _3036;
        _3194 = _3038;
        _3196 = _3040;
    }
    float _5208 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _5219 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _5230 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _3213 = ((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3186 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1127))) + ((_3192 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _3214 = ((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_3188 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1127))) + ((_3194 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _3215 = ((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3190 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1127))) + ((_3196 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    uint _3216 = _260 + 6u;
    float _3224 = _1049 / cbSceneParam._m0[86u].x;
    float _3225 = _1050 / cbSceneParam._m0[86u].y;
    vec4 _3239 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3224, _3225, (log2((isnan(cbSceneParam._m0[77u].w) ? _972 : (isnan(_972) ? cbSceneParam._m0[77u].w : min(_972, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3241 = _3239.x;
    float _3242 = _3239.y;
    float _3243 = _3239.z;
    float _3244 = _3239.w;
    float _3316;
    float _3318;
    float _3320;
    float _3322;
    if (_972 > cbSceneParam._m0[78u].w)
    {
        float _3278 = isnan(_972) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _972 : min(cbSceneParam._m0[80u].w, _972));
        float _3279 = _3278 / _972;
        float _3290 = _3279 * _1022;
        float _3291 = _1023 * _3279;
        float _3292 = (-0.0) - _3291;
        float _3294 = _3279 * _1024;
        float _3296 = (cbSceneParam._m0[77u].w * _3292) / _3278;
        float _3297 = _3296 + cbSceneParam._m0[79u].w;
        float _3298 = cbSceneParam._m0[79u].w - _3291;
        float _3304 = sqrt(((_3290 * _3290) + (_3291 * _3291)) + (_3294 * _3294));
        float _3307 = (1.0 - (cbSceneParam._m0[77u].w / _3278)) * _3304;
        float _3312 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3314 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3491;
        if (abs((_3292 - _3296) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3491 = ((((_3297 > 0.0) ? exp2(_3312 * _3297) : (2.0 - exp2(_3314 * _3297))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3307;
        }
        else
        {
            float _3435 = 1.0 / cbSceneParam._m0[80u].x;
            float _3436 = isnan(_3298) ? _3297 : (isnan(_3297) ? _3298 : max(_3297, _3298));
            float _3437 = isnan(_3298) ? _3297 : (isnan(_3297) ? _3298 : min(_3297, _3298));
            float _3446 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : min(_3436, 0.0));
            float _3447 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : min(_3437, 0.0));
            _3491 = ((abs(_3304 / _3292) * cbSceneParam._m0[80u].y) * ((((_3446 - _3447) * 2.0) - ((exp2(_3312 * (isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0)))) - exp2(_3312 * (isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))))) * _3435)) - ((exp2(_3314 * _3446) - exp2(_3314 * _3447)) * _3435))) + (_3307 * cbSceneParam._m0[80u].z);
        }
        vec4 _3493 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3224, _3225, 1.0), 0.0);
        float _3502 = exp2((_3491 * (-1.44269502162933349609375)) * (1.0 - _3493.w));
        float _3503 = log2(_3502);
        float _3519 = log2(_3244);
        _3316 = (exp2(_3519 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].x)) * _3493.x) / cbSceneParam._m0[78u].x)) + _3241;
        _3318 = (exp2(_3519 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].y)) * _3493.y) / cbSceneParam._m0[78u].y)) + _3242;
        _3320 = (exp2(_3519 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].z)) * _3493.z) / cbSceneParam._m0[78u].z)) + _3243;
        _3322 = _3502 * _3244;
    }
    else
    {
        _3316 = _3241;
        _3318 = _3242;
        _3320 = _3243;
        _3322 = _3244;
    }
    bool _3529;
    vec4 _3332;
    vec4 _3354;
    float _3356;
    float _3360;
    float _3361;
    float _3362;
    float _3363;
    bool _3373;
    for (;;)
    {
        _3332 = cbMatDynParam._m0[0u];
        float _3334 = roundEven(_3332.y);
        bool _3335 = _3334 == 3.0;
        float _3336 = log2(_3322);
        float _3343 = exp2(_3336 * cbSceneParam._m0[78u].x) * _3213;
        float _3344 = exp2(_3336 * cbSceneParam._m0[78u].y) * _3214;
        float _3345 = exp2(_3336 * cbSceneParam._m0[78u].z) * _3215;
        float _3352 = _1038 + (-0.5);
        _3354 = cbMtdParam._m0[1u];
        _3356 = _3354.y * _3352;
        float _3359 = (_3334 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3360 = _3359 * (_3335 ? _3343 : (_3343 + (cbSceneParam._m0[72u].w * _3316)));
        _3361 = _3359 * (_3335 ? _3344 : (_3344 + (cbSceneParam._m0[72u].w * _3318)));
        _3362 = _3359 * (_3335 ? _3345 : (_3345 + (cbSceneParam._m0[72u].w * _3320)));
        _3363 = _3352 * 0.999000012874603271484375;
        _3373 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3373)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3363) < 0.5)
            {
                _3529 = true;
                break;
            }
        }
        uint _3470 = _1087 + uint(_3332.w);
        if ((cbInstanceData._m0[_3470].w < 1.0) && ((cbInstanceData._m0[_3470].w + _3363) < 0.5))
        {
            _3529 = true;
            break;
        }
        if ((_3356 + 1.0) < _3354.x)
        {
            _3529 = true;
            break;
        }
        _3529 = false;
        break;
    }
    float _3733;
    if (_3529)
    {
        discard_state = true;
        _3733 = 0.0;
    }
    else
    {
        _3733 = cbInstanceData._m0[_3216].w;
    }
    SV_Target.x = _3360;
    SV_Target.y = _3361;
    SV_Target.z = _3362;
    SV_Target.w = _3733;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3216].w;
    discard_exit();
}


