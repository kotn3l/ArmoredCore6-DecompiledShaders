#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1624;
float _4002;
float _4003;
float _4004;
float _4005;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4014 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4025 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4036 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4047 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _495 = (_488 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _496 = (_488 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _497 = (_488 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4058 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _571 = (_353.x * cbMtdParam._m0[9u].x) * ((_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495);
    float _572 = (_353.y * cbMtdParam._m0[9u].y) * ((_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496);
    float _573 = (_353.z * cbMtdParam._m0[9u].z) * ((_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497);
    float _577 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _571;
    float _580 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _572;
    float _583 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _573;
    float _591 = (((_571 - _577) * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) + _577) * 4.55000019073486328125;
    float _593 = (((_572 - _580) * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) + _580) * 4.55000019073486328125;
    float _595 = (((_573 - _583) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _583) * 4.55000019073486328125;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _488) + _675;
    float _685 = ((_656.y - _676) * _488) + _676;
    float _686 = ((_656.z - _677) * _488) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _711 = ((_698.z - _686) * _561) + _686;
    float _714 = ((((_698.x - _684) * _561) + _684) * 2.0) + (-1.0);
    float _715 = ((((_698.y - _685) * _561) + _685) * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4069 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _762 = _760.x;
    float _763 = 1.0 - _762;
    float _772 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _775 = ((isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : min(_772, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _784 = (_775 - ((((((_762 - _763) * cbMtdParam._m0[24u].z) + _763) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _775))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4090 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _785 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _792 = (_785 * ((_614.x * cbMtdParam._m0[18u].x) - _591)) + _591;
    float _793 = (_785 * ((_614.y * cbMtdParam._m0[18u].y) - _593)) + _593;
    float _794 = (_785 * ((_614.z * cbMtdParam._m0[18u].z) - _595)) + _595;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _808 = _806.x;
    float _809 = 1.0 - _808;
    float _834 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_808 - _809) * cbMtdParam._m0[24u].w) + _809) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4101 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _843 = ((((cbMtdParam._m0[10u].x - _792) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _835) + _792;
    float _844 = ((((cbMtdParam._m0[10u].y - _793) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _835) + _793;
    float _845 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _794)) * _835) + _794;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _873 = _871.x;
    float _890 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _873) * _488) + _873;
    float _907 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _890) * _561) + _890;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _907) * cbMtdParam._m0[19u].z) + _907;
    float _913 = _911 - (_911 * _785);
    float _915 = _913 - (_913 * _835);
    float _920 = (((_633.z - _711) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _711;
    float _924 = ((_735.z - _920) * cbMtdParam._m0[19u].w) + _920;
    vec4 _938 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _945 = (_938.x * 2.0) + (-1.0);
    float _946 = (_938.y * 2.0) + (-1.0);
    float _947 = dot(vec2(_945, _946), vec2(_945, _946));
    float _4112 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _955 = (_785 * (_938.z - _924)) + _924;
    float _958 = ((cbMtdParam._m0[23u].x - _955) * _835) + _955;
    vec4 _979 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _985 = (_979.x * 2.0) + (-1.0);
    float _986 = (_979.y * 2.0) + (-1.0);
    float _987 = dot(vec2(_985, _986), vec2(_985, _986));
    float _4123 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _1001 = (_714 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_633.x * 2.0) + (-1.0)))) + (((_735.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1002 = (_715 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_633.y * 2.0) + (-1.0)))) + (((_735.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1014 = (((_945 - _1001) + (cbMtdParam._m0[21u].x * _1001)) * _785) + _1001;
    float _1015 = (((_946 - _1002) + (cbMtdParam._m0[21u].x * _1002)) * _785) + _1002;
    float _1016 = (_785 * (sqrt(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) - _721)) + _721;
    float _1027 = (((_985 - _1014) + (_1014 * cbMtdParam._m0[22u].z)) * _835) + _1014;
    float _1028 = (((_986 - _1015) + (_1015 * cbMtdParam._m0[22u].z)) * _835) + _1015;
    float _1029 = ((sqrt(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) - _1016) * _835) + _1016;
    float _1031 = cbMtdParam._m0[22u].x + _735.w;
    float _1034 = fma(_1029, _265 * NORMAL.x, fma(_1028, _272 * TANGENT.x, (_258 * _250) * _1027));
    float _1037 = fma(_1029, _265 * NORMAL.y, fma(_1028, _272 * TANGENT.y, (_258 * _251) * _1027));
    float _1040 = fma(_1029, _265 * NORMAL.z, fma(_1028, _272 * TANGENT.z, (_258 * _252) * _1027));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _4134 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1048 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4156 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4167 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4178 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4189 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _1053 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _1067 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1117 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1107);
    float _1118 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1107);
    float _1119 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1107);
    float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
    float _1124 = _1117 * _1123;
    float _1125 = _1118 * _1123;
    float _1126 = _1119 * _1123;
    vec4 _1131 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1133 = _1131.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1305 = sqrt(((_1117 * _1117) + (_1118 * _1118)) + (_1119 * _1119));
        float _1311 = (cbMatDynParam._m0[5u].x * _1305) + cbMatDynParam._m0[5u].y;
        float _4200 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1316 = (cbMatDynParam._m0[5u].z * _1305) + cbMatDynParam._m0[5u].w;
        float _4211 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) - _1312)) + _1312) < ((_1133 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1144 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1145 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1163 = fma(_1047, cbSceneParam._m0[5u].z, fma(_1046, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1045));
    float _1166 = fma(_1047, cbSceneParam._m0[6u].z, fma(_1046, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1045));
    float _1169 = fma(_1047, cbSceneParam._m0[7u].z, fma(_1046, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1045));
    uint _1182 = _297 + 9u;
    uint _1183 = _1182 + uint(cbMatDynParam._m0[0u].w);
    float _1189 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * cbInstanceData._m0[_1183].x;
    float _1190 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * cbInstanceData._m0[_1183].y;
    float _1191 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * cbInstanceData._m0[_1183].z;
    float _4222 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _1195 = 1.0 - _1053;
    float _1196 = _1192 * _1195;
    float _1197 = _1193 * _1195;
    float _1198 = _1194 * _1195;
    float _1203 = (_1192 + (-0.039999999105930328369140625)) * _1053;
    float _1204 = (_1193 + (-0.039999999105930328369140625)) * _1053;
    float _1205 = (_1194 + (-0.039999999105930328369140625)) * _1053;
    float _1206 = _1203 + 0.039999999105930328369140625;
    float _1208 = _1204 + 0.039999999105930328369140625;
    float _1209 = _1205 + 0.039999999105930328369140625;
    vec4 _1218 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1144, cbSceneParam._m0[86u].y * _1145));
    float _1222 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * TEXCOORD_5.w) * _1218.x;
    float _1223 = dot(vec3(_1045, _1046, _1047), vec3(_1124, _1125, _1126));
    float _1226 = _1223 * 2.0;
    float _1230 = (_1226 * _1045) - _1124;
    float _1231 = (_1226 * _1046) - _1125;
    float _1232 = (_1226 * _1047) - _1126;
    float _1236 = abs(dot(vec3(_1124, _1125, _1126), vec3(_1045, _1046, _1047)));
    float _4255 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1238 = sqrt(_1048);
    float _1251 = exp2((_1238 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1238 * 3.0));
    float _1257 = (1.0 - _1251) * ((_1238 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1258 = _1251 * _1238;
    float _1286 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1623;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1348 = fma(_1294, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286));
        float _1352 = fma(_1294, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286));
        float _1356 = fma(_1294, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286));
        float _1381 = _1286 + _1045;
        float _1382 = _1290 + _1046;
        float _1383 = _1294 + _1047;
        float _1393 = fma(_1383, cbModelParam._m0[26u].z, fma(_1382, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1381)) - _1348;
        float _1394 = fma(_1383, cbModelParam._m0[27u].z, fma(_1382, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1381)) - _1352;
        float _1395 = fma(_1383, cbModelParam._m0[28u].z, fma(_1382, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1381)) - _1356;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1348 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1352 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[34u].z) + ((((((_1356 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1451 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1417.x + (-0.5));
        float _1453 = _1451 * (_1417.y + (-0.5));
        float _1454 = _1451 * (_1417.z + (-0.5));
        float _1461 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1424.x + (-0.5));
        float _1463 = _1461 * (_1424.y + (-0.5));
        float _1464 = _1461 * (_1424.z + (-0.5));
        float _1471 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1431.x + (-0.5));
        float _1473 = _1471 * (_1431.y + (-0.5));
        float _1474 = _1471 * (_1431.z + (-0.5));
        float _1481 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1438.x + (-0.5));
        float _1483 = _1481 * (_1438.y + (-0.5));
        float _1484 = _1481 * (_1438.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1505 = (dot(vec3(_1045, _1046, _1047), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1515 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4303 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1517 + 1.0))) + _1522) * _1485;
        float _1532 = _1453 * 0.5;
        float _1533 = _1463 * 0.5;
        float _1534 = _1473 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1045, _1046, _1047), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4336 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1559 + 1.0))) + _1564) * _1486;
        float _1574 = _1454 * 0.5;
        float _1575 = _1464 * 0.5;
        float _1576 = _1474 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_1045, _1046, _1047), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4369 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1601 + 1.0))) + _1606) * _1487;
        _1623 = _1454;
        _1625 = _1453;
        _1626 = _1452;
        _1627 = _1464;
        _1628 = _1463;
        _1629 = _1462;
        _1630 = _1474;
        _1631 = _1473;
        _1632 = _1472;
        _1633 = _1487;
        _1634 = _1486;
        _1635 = _1485;
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1637 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1624;
        _1625 = _1624;
        _1626 = _1624;
        _1627 = _1624;
        _1628 = _1624;
        _1629 = _1624;
        _1630 = _1624;
        _1631 = _1624;
        _1632 = _1624;
        _1633 = _1624;
        _1634 = _1624;
        _1635 = _1624;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1665 = fma(_1294, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286));
        float _1669 = fma(_1294, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286));
        float _1673 = fma(_1294, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286));
        float _1696 = _1286 + _1045;
        float _1697 = _1290 + _1046;
        float _1698 = _1294 + _1047;
        float _1708 = fma(_1698, cbModelParam._m0[30u].z, fma(_1697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1696)) - _1665;
        float _1709 = fma(_1698, cbModelParam._m0[31u].z, fma(_1697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1696)) - _1669;
        float _1710 = fma(_1698, cbModelParam._m0[32u].z, fma(_1697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1696)) - _1673;
        float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
        float _1727 = ((_1714 * _1708) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1665 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1728 = ((_1714 * _1709) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1669 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1729 = ((_1714 * _1710) / cbModelParam._m0[35u].z) + ((((((_1673 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1727, _1728, _1729), 0.0);
        vec4 _1738 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1727, _1728, _1729), 0.0);
        vec4 _1745 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1727, _1728, _1729), 0.0);
        vec4 _1752 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1727, _1728, _1729), 0.0);
        float _1764 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1731.x + (-0.5));
        float _1766 = _1764 * (_1731.y + (-0.5));
        float _1767 = _1764 * (_1731.z + (-0.5));
        float _1774 = exp2((_1738.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1738.x + (-0.5));
        float _1776 = _1774 * (_1738.y + (-0.5));
        float _1777 = _1774 * (_1738.z + (-0.5));
        float _1784 = exp2((_1745.w + (-0.5)) * 20.0) * 2.0;
        float _1785 = _1784 * (_1745.x + (-0.5));
        float _1786 = _1784 * (_1745.y + (-0.5));
        float _1787 = _1784 * (_1745.z + (-0.5));
        float _1794 = exp2((_1752.w + (-0.5)) * 20.0) * 2.0;
        float _1795 = _1794 * (_1752.x + (-0.5));
        float _1796 = _1794 * (_1752.y + (-0.5));
        float _1797 = _1794 * (_1752.z + (-0.5));
        float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1801 = _1765 * 0.5;
        float _1802 = _1775 * 0.5;
        float _1803 = _1785 * 0.5;
        float _1804 = dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803));
        float _1809 = (_1804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1804);
        float _1817 = (dot(vec3(_1045, _1046, _1047), vec3(_1809 * _1801, _1809 * _1802, _1809 * _1803)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1826 = sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803)) / (_1798 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1828 = _1827 * 2.0;
        float _1832 = (1.0 - _1827) / (_1827 + 1.0);
        float _4432 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1842 = ((((1.0 - _1833) * (_1828 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1828 + 1.0))) + _1833) * _1798;
        float _1843 = _1766 * 0.5;
        float _1844 = _1776 * 0.5;
        float _1845 = _1786 * 0.5;
        float _1846 = dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845));
        float _1851 = (_1846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1846);
        float _1859 = (dot(vec3(_1045, _1046, _1047), vec3(_1851 * _1843, _1851 * _1844, _1851 * _1845)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1868 = sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845)) / (_1799 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1870 = _1869 * 2.0;
        float _1874 = (1.0 - _1869) / (_1869 + 1.0);
        float _4465 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1884 = ((((1.0 - _1875) * (_1870 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1870 + 1.0))) + _1875) * _1799;
        float _1885 = _1767 * 0.5;
        float _1886 = _1777 * 0.5;
        float _1887 = _1787 * 0.5;
        float _1888 = dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887));
        float _1893 = (_1888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1888);
        float _1901 = (dot(vec3(_1045, _1046, _1047), vec3(_1893 * _1885, _1893 * _1886, _1893 * _1887)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1910 = sqrt(((_1886 * _1886) + (_1885 * _1885)) + (_1887 * _1887)) / (_1800 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1912 = _1911 * 2.0;
        float _1916 = (1.0 - _1911) / (_1911 + 1.0);
        float _4498 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1926 = ((((1.0 - _1917) * (_1912 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1912 + 1.0))) + _1917) * _1800;
        _1934 = _1767;
        _1935 = _1766;
        _1936 = _1765;
        _1937 = _1777;
        _1938 = _1776;
        _1939 = _1775;
        _1940 = _1787;
        _1941 = _1786;
        _1942 = _1785;
        _1943 = _1800;
        _1944 = _1799;
        _1945 = _1798;
        _1946 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)));
        _1947 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)));
        _1948 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)));
    }
    else
    {
        _1934 = _1624;
        _1935 = _1624;
        _1936 = _1624;
        _1937 = _1624;
        _1938 = _1624;
        _1939 = _1624;
        _1940 = _1624;
        _1941 = _1624;
        _1942 = _1624;
        _1943 = _1624;
        _1944 = _1624;
        _1945 = _1624;
        _1946 = 0.0;
        _1947 = 0.0;
        _1948 = 0.0;
    }
    float _1958 = (cbModelParam._m0[1u].x * (_1946 - _1636)) + _1636;
    float _1959 = (cbModelParam._m0[1u].x * (_1947 - _1637)) + _1637;
    float _1960 = (cbModelParam._m0[1u].x * (_1948 - _1638)) + _1638;
    float _1981 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1958));
    float _2002 = _1230 * 0.5;
    float _2003 = _1231 * 0.5;
    float _2004 = _1232 * 0.5;
    float _2005 = dot(vec4(_2002, _2003, _2004, 1.0), vec4(_1936, _1939, _1942, _1945));
    float _2008 = dot(vec4(_2002, _2003, _2004, 1.0), vec4(_1935, _1938, _1941, _1944));
    float _2011 = dot(vec4(_2002, _2003, _2004, 1.0), vec4(_1934, _1937, _1940, _1943));
    float _2045;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2018 = dot(vec4(_2002, _2003, _2004, 1.0), vec4(_1623, _1627, _1630, _1633));
        float _2022 = dot(vec4(_2002, _2003, _2004, 1.0), vec4(_1625, _1628, _1631, _1634));
        float _2026 = dot(vec4(_2002, _2003, _2004, 1.0), vec4(_1626, _1629, _1632, _1635));
        float _2033 = dot(vec4(cbModelParam._m0[39u]), vec4(_2002, _2003, _2004, 1.0));
        _2045 = dot(vec3(isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)), isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2033) ? 0.0 : (isnan(0.0) ? _2033 : max(0.0, _2033))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2045 = 1.0;
    }
    float _2056;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2047 = dot(vec4(cbModelParam._m0[40u]), vec4(_2002, _2003, _2004, 1.0));
        _2056 = dot(vec3(isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2047) ? 0.0 : (isnan(0.0) ? _2047 : max(0.0, _2047))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2056 = 1.0;
    }
    float _2060 = (_2056 * cbModelParam._m0[1u].x) + (_2045 * (1.0 - cbModelParam._m0[1u].x));
    float _2070 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1048);
    float _2071 = isnan(_2070) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2070 : min(cbModelParam._m0[25u].z, _2070));
    float _2151;
    float _2153;
    float _2155;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2118 = fma(_1294, cbModelParam._m0[13u].z, fma(_1290, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1286)) + cbModelParam._m0[13u].w;
        float _2122 = fma(_1294, cbModelParam._m0[14u].z, fma(_1290, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1286)) + cbModelParam._m0[14u].w;
        float _2126 = fma(_1294, cbModelParam._m0[15u].z, fma(_1290, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1286)) + cbModelParam._m0[15u].w;
        float _2129 = fma(_1232, cbModelParam._m0[13u].z, fma(_1231, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1230));
        float _2132 = fma(_1232, cbModelParam._m0[14u].z, fma(_1231, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1230));
        float _2135 = fma(_1232, cbModelParam._m0[15u].z, fma(_1231, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1230));
        float _2163;
        if (_2129 > 0.0)
        {
            _2163 = abs((1.0 - _2118) / _2129);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2118 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2163 = frontier_phi_17_15_ladder;
        }
        float _2365;
        if (_2132 > 0.0)
        {
            _2365 = abs((1.0 - _2122) / _2132);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2122 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2365 = frontier_phi_26_22_ladder;
        }
        float _2619;
        if (_2135 > 0.0)
        {
            _2619 = abs((1.0 - _2126) / _2135);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2126 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2619 = frontier_phi_38_33_ladder;
        }
        float _2621 = isnan(_2365) ? _2163 : (isnan(_2163) ? _2365 : min(_2163, _2365));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _2129) + _2118;
        float _2627 = (_2622 * _2132) + _2122;
        float _2628 = (_2622 * _2135) + _2126;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2629;
        float _2633 = _2629 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 > _2633) || ((_2627 < _2631) || ((_2626 < _2631) || (_2626 > _2633))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2628, cbModelParam._m0[9u].z, fma(_2627, cbModelParam._m0[9u].y, _2626 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2628, cbModelParam._m0[10u].z, fma(_2627, cbModelParam._m0[10u].y, _2626 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2628, cbModelParam._m0[11u].z, fma(_2627, cbModelParam._m0[11u].y, _2626 * cbModelParam._m0[11u].x))), _2071);
            frontier_phi_16_38_ladder = _2756.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2756.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2756.x * cbModelParam._m0[1u].y;
        }
        _2151 = frontier_phi_16_38_ladder_2;
        _2153 = frontier_phi_16_38_ladder_1;
        _2155 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1230, _1231, _1232), _2071);
        _2151 = _2139.x * cbModelParam._m0[1u].y;
        _2153 = _2139.y * cbModelParam._m0[1u].y;
        _2155 = _2139.z * cbModelParam._m0[1u].y;
    }
    float _2159 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1048);
    float _2160 = isnan(_2159) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2159 : min(cbModelParam._m0[25u].w, _2159));
    float _2249;
    float _2251;
    float _2253;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2213 = fma(_1294, cbModelParam._m0[21u].z, fma(_1290, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1286)) + cbModelParam._m0[21u].w;
        float _2217 = fma(_1294, cbModelParam._m0[22u].z, fma(_1290, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1286)) + cbModelParam._m0[22u].w;
        float _2221 = fma(_1294, cbModelParam._m0[23u].z, fma(_1290, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1286)) + cbModelParam._m0[23u].w;
        float _2224 = fma(_1232, cbModelParam._m0[21u].z, fma(_1231, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1230));
        float _2227 = fma(_1232, cbModelParam._m0[22u].z, fma(_1231, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1230));
        float _2230 = fma(_1232, cbModelParam._m0[23u].z, fma(_1231, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1230));
        float _2370;
        if (_2224 > 0.0)
        {
            _2370 = abs((1.0 - _2213) / _2224);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2213 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2370 = frontier_phi_28_24_ladder;
        }
        float _2646;
        if (_2227 > 0.0)
        {
            _2646 = abs((1.0 - _2217) / _2227);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2217 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2646 = frontier_phi_40_35_ladder;
        }
        float _2859;
        if (_2230 > 0.0)
        {
            _2859 = abs((1.0 - _2221) / _2230);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2221 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2859 = frontier_phi_49_46_ladder;
        }
        float _2861 = isnan(_2646) ? _2370 : (isnan(_2370) ? _2646 : min(_2370, _2646));
        float _2862 = isnan(_2859) ? _2861 : (isnan(_2861) ? _2859 : min(_2861, _2859));
        float _2866 = (_2862 * _2224) + _2213;
        float _2867 = (_2862 * _2227) + _2217;
        float _2868 = (_2862 * _2230) + _2221;
        float _2869 = _2862 * 9.9999997473787516355514526367188e-05;
        float _2870 = (-1.0) - _2869;
        float _2872 = _2869 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2868 > _2872) || ((_2868 < _2870) || ((_2867 > _2872) || ((_2867 < _2870) || ((_2866 < _2870) || (_2866 > _2872))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2868, cbModelParam._m0[17u].z, fma(_2867, cbModelParam._m0[17u].y, _2866 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2868, cbModelParam._m0[18u].z, fma(_2867, cbModelParam._m0[18u].y, _2866 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2868, cbModelParam._m0[19u].z, fma(_2867, cbModelParam._m0[19u].y, _2866 * cbModelParam._m0[19u].x))), _2160);
            frontier_phi_25_49_ladder = _3067.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3067.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3067.x * cbModelParam._m0[1u].z;
        }
        _2249 = frontier_phi_25_49_ladder_2;
        _2251 = frontier_phi_25_49_ladder_1;
        _2253 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2233 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1230, _1231, _1232), _2160);
        _2249 = _2233.x * cbModelParam._m0[1u].z;
        _2251 = _2233.y * cbModelParam._m0[1u].z;
        _2253 = _2233.z * cbModelParam._m0[1u].z;
    }
    float _2266 = (((_1257 * _1206) + _1258) * _1222) * ((cbModelParam._m0[1u].w * (_2249 - _2151)) + _2151);
    float _2268 = (((_1257 * _1208) + _1258) * _1222) * ((cbModelParam._m0[1u].w * (_2251 - _2153)) + _2153);
    float _2270 = (((_1257 * _1209) + _1258) * _1222) * ((cbModelParam._m0[1u].w * (_2253 - _2155)) + _2155);
    float _2273 = fma(_2270, cbSceneParam._m0[89u].z, fma(_2268, cbSceneParam._m0[89u].y, _2266 * cbSceneParam._m0[89u].x));
    float _2276 = fma(_2270, cbSceneParam._m0[90u].z, fma(_2268, cbSceneParam._m0[90u].y, _2266 * cbSceneParam._m0[90u].x));
    float _2279 = fma(_2270, cbSceneParam._m0[91u].z, fma(_2268, cbSceneParam._m0[91u].y, _2266 * cbSceneParam._m0[91u].x));
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _1222 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2324 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2328 = _2291 | 1u;
    float _2339 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_1045, _1046, _1047));
    float _2342 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_1045, _1046, _1047));
    float _4634 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _4645 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2347 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * 0.3183098733425140380859375;
    float _2349 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2356 = ((cbLight._m0[_2308].x * _2314) * _2349) + ((cbLight._m0[_2318].x * _2324) * _2347);
    float _2357 = ((_2314 * cbLight._m0[_2308].y) * _2349) + ((_2324 * cbLight._m0[_2318].y) * _2347);
    float _2358 = ((_2314 * cbLight._m0[_2308].z) * _2349) + ((_2324 * cbLight._m0[_2318].z) * _2347);
    uvec4 _2362 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2364 = _2362.x == 0u;
    float _2375;
    float _2377;
    float _2379;
    if (_2364)
    {
        _2375 = _2356;
        _2377 = _2357;
        _2379 = _2358;
    }
    else
    {
        uint _2383 = _2291 + 6u;
        float _2399 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4656 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2402 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2375 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2356;
        _2377 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2357;
        _2379 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2358;
    }
    bool _2382 = _2362.y == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2382)
    {
        _2420 = _2375;
        _2422 = _2377;
        _2424 = _2379;
    }
    else
    {
        uint _2590 = _2291 + 7u;
        float _2606 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2607 = _2606 * _2606;
        float _4672 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2608 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2609 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2420 = (((cbLight._m0[_2590].x * 0.3183098733425140380859375) * _2608) * _2609) + _2375;
        _2422 = (((cbLight._m0[_2590].y * 0.3183098733425140380859375) * _2608) * _2609) + _2377;
        _2424 = (((cbLight._m0[_2590].z * 0.3183098733425140380859375) * _2608) * _2609) + _2379;
    }
    uint _2427 = _2291 + 8u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _1048) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2291].x + _1124;
    float _2443 = cbLight._m0[_2291].y + _1125;
    float _2444 = cbLight._m0[_2291].z + _1126;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2291].xyz));
    float _4688 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _4699 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _2456 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2457 = dot(vec3(_1045, _1046, _1047), vec3(_2449, _2450, _2451));
    float _4710 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2449, _2450, _2451));
    float _4721 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2441 * _2441;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
    float _2478 = 0.959999978542327880859375 - _1203;
    float _2480 = 0.959999978542327880859375 - _1204;
    float _2481 = 0.959999978542327880859375 - _1205;
    float _2488 = 1.0 - _2441;
    float _2499 = (0.5 / (((_2456 * ((_2455 * _2488) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2488) + _2441) * _2455))) * _2455;
    float _4732 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    uint _2512 = _2291 + 9u;
    float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _1048) * 0.949999988079071044921875);
    float _2524 = _2523 * _2523;
    float _2525 = cbLight._m0[_2328].x + _1124;
    float _2526 = cbLight._m0[_2328].y + _1125;
    float _2527 = cbLight._m0[_2328].z + _1126;
    float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
    float _2532 = _2531 * _2525;
    float _2533 = _2531 * _2526;
    float _2534 = _2531 * _2527;
    float _2535 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2328].xyz));
    float _4743 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2539 = dot(vec3(_1045, _1046, _1047), vec3(_2532, _2533, _2534));
    float _4754 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2543 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2532, _2533, _2534));
    float _4765 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2547 = _2524 * _2524;
    float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
    float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
    float _2565 = 1.0 - _2524;
    float _2575 = (0.5 / (((_2456 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2565) + _2524) * _2538))) * _2538;
    float _4776 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2577 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
    float _2587 = (((((_2558 * _2478) + _1206) * cbLight._m0[_2512].x) * _2577) * _2314) + (((((_2477 * _2478) + _1206) * cbLight._m0[_2427].x) * _2501) * _2324);
    float _2588 = (((((_2558 * _2480) + _1208) * cbLight._m0[_2512].y) * _2577) * _2314) + (((((_2477 * _2480) + _1208) * cbLight._m0[_2427].y) * _2501) * _2324);
    float _2589 = (((((_2558 * _2481) + _1209) * cbLight._m0[_2512].z) * _2577) * _2314) + (((((_2477 * _2481) + _1209) * cbLight._m0[_2427].z) * _2501) * _2324);
    float _2651;
    float _2653;
    float _2655;
    if (_2364)
    {
        _2651 = _2587;
        _2653 = _2588;
        _2655 = _2589;
    }
    else
    {
        uint _2657 = _2291 + 2u;
        uint _2661 = _2291 + 10u;
        float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2657].w)) * _1048) * 0.949999988079071044921875);
        float _2676 = _2675 * _2675;
        float _2677 = cbLight._m0[_2657].x + _1124;
        float _2678 = cbLight._m0[_2657].y + _1125;
        float _2679 = cbLight._m0[_2657].z + _1126;
        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
        float _2684 = _2683 * _2677;
        float _2685 = _2683 * _2678;
        float _2686 = _2683 * _2679;
        float _2687 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2657].xyz));
        float _4787 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2691 = dot(vec3(_1045, _1046, _1047), vec3(_2684, _2685, _2686));
        float _4798 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2695 = dot(vec3(cbLight._m0[_2657].xyz), vec3(_2684, _2685, _2686));
        float _4809 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2699 = _2676 * _2676;
        float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
        float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
        float _2717 = 1.0 - _2676;
        float _2727 = (0.5 / (((_2456 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2717) + _2676) * _2690))) * _2690;
        float _4820 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2651 = (((((_2710 * _2478) + _1206) * cbLight._m0[_2661].x) * _2729) * _2730) + _2587;
        _2653 = (((((_2710 * _2480) + _1208) * cbLight._m0[_2661].y) * _2729) * _2730) + _2588;
        _2655 = (((((_2710 * _2481) + _1209) * cbLight._m0[_2661].z) * _2729) * _2730) + _2589;
    }
    float _2765;
    float _2767;
    float _2769;
    if (_2382)
    {
        _2765 = _2651;
        _2767 = _2653;
        _2769 = _2655;
    }
    else
    {
        uint _2776 = _2291 + 3u;
        uint _2780 = _2291 + 11u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _1048) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _1124;
        float _2797 = cbLight._m0[_2776].y + _1125;
        float _2798 = cbLight._m0[_2776].z + _1126;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2776].xyz));
        float _4836 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2810 = dot(vec3(_1045, _1046, _1047), vec3(_2803, _2804, _2805));
        float _4847 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4858 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
        float _2836 = 1.0 - _2795;
        float _2846 = (0.5 / (((_2456 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2836) + _2795) * _2809))) * _2809;
        float _4869 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2765 = (((((_2829 * _2478) + _1206) * cbLight._m0[_2780].x) * _2848) * _2849) + _2651;
        _2767 = (((((_2829 * _2480) + _1208) * cbLight._m0[_2780].y) * _2848) * _2849) + _2653;
        _2769 = (((((_2829 * _2481) + _1209) * cbLight._m0[_2780].z) * _2848) * _2849) + _2655;
    }
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_2289.y == 0u)
    {
        float _2924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2924;
        float _2926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2924;
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2924;
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.x;
        uint _2951 = uint((float(_2939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1145) / _2940))) + floor(float(uint(cbSceneParam._m0[85u].x * _1144) / _2940)));
        float _2961 = (log2(_2927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2962 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        uint _2965 = uint(isnan(14.0) ? _2962 : (isnan(_2962) ? 14.0 : min(_2962, 14.0)));
        uvec4 _2970 = texelFetch(g_lightClusterGridBuffer, int(((_2965 << 2u) + (_2951 << 6u)) >> 2u));
        uint _2971 = _2970.x;
        uint _2972 = _2939.z;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((((1u << ((_2972 >> 4u) & 15u)) + 4294967295u) & _2971) == 0u) || ((_2972 & 240u) == 0u))
        {
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
        }
        else
        {
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            uint _3231 = 0u;
            uint _3240;
            bool _3241;
            for (;;)
            {
                _3240 = texelFetch(g_lightClassification, int((((_2965 << 5u) + (_2951 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                _3241 = _3240 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3241)
                {
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                else
                {
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    uint _3376;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3240;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3380 = uint(findLSB(_3376)) + (_3231 << 5u);
                        uint _3377 = (_3376 + 4294967295u) & _3376;
                        uint _3382 = _3380 * 48u;
                        vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3402 = (_3380 * 48u) + 4u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3421 = (_3380 * 48u) + 8u;
                        vec3 _3432 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x));
                        float _3436 = _3396.x - _2925;
                        float _3437 = _3396.y - _2926;
                        float _3438 = _3396.z - _2927;
                        float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                        float _3442 = inversesqrt(_3439);
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3446 = dot(vec3(_1163, _1166, _1169), vec3(_3443, _3444, _3445));
                        float _3451 = 1.0 - (_3439 * _3396.w);
                        float _4895 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3453 = sqrt(_3439) * _3415.w;
                        float _3456 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3446) + _3457;
                        float _3463 = _3453 * _3453;
                        float _3467 = ((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3452) / ((_3463 * 0.699999988079071044921875) + 1.0);
                        float _3471 = (-0.0) - _2925;
                        float _3472 = (-0.0) - _2926;
                        float _3473 = (-0.0) - _2927;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3488 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                        float _3489 = 1.0 - _1238;
                        float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                        float _3497 = _3496 * _3496;
                        float _3498 = _3497 * _3497;
                        float _3499 = _3478 + _3443;
                        float _3500 = _3479 + _3444;
                        float _3501 = _3480 + _3445;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3509 = dot(vec3(_1163, _1166, _1169), vec3(_3478, _3479, _3480));
                        float _4911 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3513 = dot(vec3(_1163, _1166, _1169), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                        float _4922 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                        float _3521 = _3456 * _3497;
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3446) + _3522;
                        float _4933 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3527 = 1.0 - _3497;
                        float _3537 = (0.5 / (((_3526 * ((_3512 * _3527) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3497) * _3512))) * _3526;
                        float _4944 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3548 = (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) / ((_3520 * _3520) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125))) * _3452;
                        _3300 = (_3467 * _3415.x) + _3373;
                        _3301 = (_3467 * _3415.y) + _3374;
                        _3302 = (_3467 * _3415.z) + _3375;
                        _3297 = (_3548 * _3432.x) + _3370;
                        _3298 = (_3548 * _3432.y) + _3371;
                        _3299 = (_3548 * _3432.z) + _3372;
                        if (_3377 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3377;
                        }
                    }
                    frontier_phi_66_pred = _3297;
                    frontier_phi_66_pred_1 = _3302;
                    frontier_phi_66_pred_2 = _3301;
                    frontier_phi_66_pred_3 = _3300;
                    frontier_phi_66_pred_4 = _3299;
                    frontier_phi_66_pred_5 = _3298;
                }
                _3073 = frontier_phi_66_pred;
                _3083 = frontier_phi_66_pred_1;
                _3081 = frontier_phi_66_pred_2;
                _3079 = frontier_phi_66_pred_3;
                _3077 = frontier_phi_66_pred_4;
                _3075 = frontier_phi_66_pred_5;
                uint _3232 = _3231 + 1u;
                if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3225 = _3073;
                    _3226 = _3075;
                    _3227 = _3077;
                    _3228 = _3079;
                    _3229 = _3081;
                    _3230 = _3083;
                    _3231 = _3232;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
        }
        uvec4 _3086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3087 = _3086.z;
        uint _3089 = (_3087 >> 8u) & 15u;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        if (((4294967295u << _3089) & _2971) == 0u)
        {
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
        }
        else
        {
            float _3218 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
            float _3219 = _3218 * _2925;
            float _3220 = _3218 * _2926;
            float _3221 = _3218 * _2927;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3089 < ((_3087 >> 12u) & 15u))
            {
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3353 = _3072;
                float _3354 = _3074;
                float _3355 = _3076;
                float _3356 = _3078;
                float _3357 = _3080;
                float _3358 = _3082;
                uint _3359 = _3089;
                uint _3368;
                bool _3369;
                for (;;)
                {
                    _3368 = texelFetch(g_lightClassification, int((((_2965 << 5u) + (_2951 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                    _3369 = _3368 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3369)
                    {
                        frontier_phi_77_pred = _3358;
                        frontier_phi_77_pred_1 = _3357;
                        frontier_phi_77_pred_2 = _3356;
                        frontier_phi_77_pred_3 = _3355;
                        frontier_phi_77_pred_4 = _3354;
                        frontier_phi_77_pred_5 = _3353;
                    }
                    else
                    {
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        uint _3581 = _3368;
                        uint _3582;
                        vec4 _3607;
                        float _3608;
                        vec4 _3623;
                        vec3 _3635;
                        vec4 _3650;
                        vec4 _3665;
                        float _3711;
                        bool _3712;
                        for (;;)
                        {
                            uint _3592 = ((_3359 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3581));
                            _3582 = (_3581 + 4294967295u) & _3581;
                            uint _3594 = _3592 * 40u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3608 = _3607.w;
                            uint _3610 = (_3592 * 40u) + 4u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3592 * 40u) + 8u;
                            _3635 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x));
                            uint _3637 = (_3592 * 40u) + 16u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3592 * 40u) + 20u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3667 = (_3592 * 40u) + 24u;
                            vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3686 = (_3592 * 40u) + 28u;
                            vec4 _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            _3711 = fma(_2927, _3699.z, fma(_2926, _3699.y, _3699.x * _2925)) + _3699.w;
                            _3712 = !((fma(_2927, _3680.z, fma(_2926, _3680.y, _3680.x * _2925)) + _3680.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3712)
                            {
                                float _3739 = _3607.x - _2925;
                                float _3740 = _3607.y - _2926;
                                float _3741 = _3607.z - _2927;
                                float _3742 = dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741));
                                float _3745 = inversesqrt(_3742);
                                float _3746 = _3745 * _3739;
                                float _3747 = _3745 * _3740;
                                float _3748 = _3745 * _3741;
                                float _3752 = 1.0 - (_3742 / (_3608 * _3608));
                                float _4955 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3757 = sqrt(_3742) * _3623.w;
                                float _3759 = 1.39999997615814208984375 / (_3757 + 1.39999997615814208984375);
                                float _3760 = _3759 * _3759;
                                float _3763 = ((1.0 - _3760) * dot(vec3(_3746, _3747, _3748), vec3(_1163, _1166, _1169))) + _3760;
                                float _3766 = _3757 * _3757;
                                float _3770 = (fma(_2927, _3650.z, fma(_2926, _3650.y, _3650.x * _2925)) + _3650.w) / _3711;
                                float _3771 = (fma(_2927, _3665.z, fma(_2926, _3665.y, _3665.x * _2925)) + _3665.w) / _3711;
                                float _3775 = 1.0 - dot(vec2(_3770, _3771), vec2(_3770, _3771));
                                float _4971 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3777 = _3776 * (((isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0))) * _3753) / ((_3766 * 0.699999988079071044921875) + 1.0));
                                float _3789 = exp2(log2(1.0 / ((_3766 * 3.5) + 5.0)) * 0.25);
                                float _3790 = 1.0 - _1238;
                                float _3797 = sqrt(1.0 - ((1.0 - (_3790 * _3790)) * (1.0 - (_3789 * _3789))));
                                float _3798 = _3797 * _3797;
                                float _3799 = _3798 * _3798;
                                float _3800 = _3746 - _3219;
                                float _3801 = _3747 - _3220;
                                float _3802 = _3748 - _3221;
                                float _3806 = inversesqrt(dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802)));
                                float _3810 = dot(vec3(_1163, _1166, _1169), vec3((-0.0) - _3219, (-0.0) - _3220, (-0.0) - _3221));
                                float _4982 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3814 = dot(vec3(_1163, _1166, _1169), vec3(_3806 * _3800, _3806 * _3801, _3806 * _3802));
                                float _4993 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3817 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3821 = ((_3817 * _3817) * (_3799 + (-1.0))) + 1.0;
                                float _3822 = _3759 * _3798;
                                float _3823 = _3822 * _3822;
                                float _3829 = ((1.0 - _3823) * dot(vec3(_1163, _1166, _1169), vec3(_3746, _3747, _3748))) + _3823;
                                float _5004 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3830 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3831 = 1.0 - _3798;
                                float _3841 = (0.5 / (((_3830 * ((_3813 * _3831) + _3798)) + 9.9999999392252902907785028219223e-09) + (((_3830 * _3831) + _3798) * _3813))) * _3830;
                                float _5015 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3851 = (_3776 * _3753) * (((_3799 * 3.1415927410125732421875) * (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) / ((_3821 * _3821) * ((_3766 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3777 * _3623.y;
                                frontier_phi_83_pred_1 = _3777 * _3623.x;
                                frontier_phi_83_pred_2 = _3851 * _3635.z;
                                frontier_phi_83_pred_3 = _3851 * _3635.y;
                                frontier_phi_83_pred_4 = _3851 * _3635.x;
                                frontier_phi_83_pred_5 = _3777 * _3623.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3859 = frontier_phi_83_pred;
                            _3858 = frontier_phi_83_pred_1;
                            _3857 = frontier_phi_83_pred_2;
                            _3856 = frontier_phi_83_pred_3;
                            _3855 = frontier_phi_83_pred_4;
                            _3860 = frontier_phi_83_pred_5;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            if (_3582 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3582;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3567;
                        frontier_phi_77_pred_1 = _3566;
                        frontier_phi_77_pred_2 = _3565;
                        frontier_phi_77_pred_3 = _3564;
                        frontier_phi_77_pred_4 = _3563;
                        frontier_phi_77_pred_5 = _3562;
                    }
                    _3204 = frontier_phi_77_pred;
                    _3202 = frontier_phi_77_pred_1;
                    _3200 = frontier_phi_77_pred_2;
                    _3198 = frontier_phi_77_pred_3;
                    _3196 = frontier_phi_77_pred_4;
                    _3194 = frontier_phi_77_pred_5;
                    uint _3360 = _3359 + 1u;
                    if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3353 = _3194;
                        _3354 = _3196;
                        _3355 = _3198;
                        _3356 = _3200;
                        _3357 = _3202;
                        _3358 = _3204;
                        _3359 = _3360;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3198;
                frontier_phi_58_59_ladder_1 = _3204;
                frontier_phi_58_59_ladder_2 = _3202;
                frontier_phi_58_59_ladder_3 = _3200;
                frontier_phi_58_59_ladder_4 = _3196;
                frontier_phi_58_59_ladder_5 = _3194;
            }
            else
            {
                frontier_phi_58_59_ladder = _3076;
                frontier_phi_58_59_ladder_1 = _3082;
                frontier_phi_58_59_ladder_2 = _3080;
                frontier_phi_58_59_ladder_3 = _3078;
                frontier_phi_58_59_ladder_4 = _3074;
                frontier_phi_58_59_ladder_5 = _3072;
            }
            _3193 = frontier_phi_58_59_ladder_5;
            _3195 = frontier_phi_58_59_ladder_4;
            _3197 = frontier_phi_58_59_ladder;
            _3199 = frontier_phi_58_59_ladder_3;
            _3201 = frontier_phi_58_59_ladder_2;
            _3203 = frontier_phi_58_59_ladder_1;
        }
        float _3208 = isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0));
        _2984 = (_3208 * _3199) + _2420;
        _2986 = (_3208 * _3201) + _2422;
        _2988 = (_3208 * _3203) + _2424;
        _2990 = ((_3193 * _1206) * _3208) + _2765;
        _2992 = ((_3195 * _1208) * _3208) + _2767;
        _2994 = ((_3197 * _1209) * _3208) + _2769;
    }
    else
    {
        _2984 = _2420;
        _2986 = _2422;
        _2988 = _2424;
        _2990 = _2765;
        _2992 = _2767;
        _2994 = _2769;
    }
    float _5031 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _5042 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _5053 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _3011 = ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_2984 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1222))) + ((_2990 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2060)) * cbPerFrame._m0[3u].x);
    float _3012 = ((isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_2986 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1222))) + ((_2992 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2060)) * cbPerFrame._m0[3u].x);
    float _3013 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_2988 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1222))) + ((_2994 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2060)) * cbPerFrame._m0[3u].x);
    uint _3014 = _297 + 6u;
    float _3022 = _1144 / cbSceneParam._m0[86u].x;
    float _3023 = _1145 / cbSceneParam._m0[86u].y;
    vec4 _3037 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, (log2((isnan(cbSceneParam._m0[77u].w) ? _1067 : (isnan(_1067) ? cbSceneParam._m0[77u].w : min(_1067, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3039 = _3037.x;
    float _3040 = _3037.y;
    float _3041 = _3037.z;
    float _3042 = _3037.w;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    if (_1067 > cbSceneParam._m0[78u].w)
    {
        float _3097 = isnan(_1067) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1067 : min(cbSceneParam._m0[80u].w, _1067));
        float _3098 = _3097 / _1067;
        float _3109 = _3098 * _1117;
        float _3110 = _1118 * _3098;
        float _3111 = (-0.0) - _3110;
        float _3113 = _3098 * _1119;
        float _3115 = (cbSceneParam._m0[77u].w * _3111) / _3097;
        float _3116 = _3115 + cbSceneParam._m0[79u].w;
        float _3117 = cbSceneParam._m0[79u].w - _3110;
        float _3123 = sqrt(((_3109 * _3109) + (_3110 * _3110)) + (_3113 * _3113));
        float _3126 = (1.0 - (cbSceneParam._m0[77u].w / _3097)) * _3123;
        float _3131 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3133 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3111 - _3115) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3116 > 0.0) ? exp2(_3131 * _3116) : (2.0 - exp2(_3133 * _3116))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3126;
        }
        else
        {
            float _3254 = 1.0 / cbSceneParam._m0[80u].x;
            float _3255 = isnan(_3117) ? _3116 : (isnan(_3116) ? _3117 : max(_3116, _3117));
            float _3256 = isnan(_3117) ? _3116 : (isnan(_3116) ? _3117 : min(_3116, _3117));
            float _3265 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : min(_3255, 0.0));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            _3310 = ((abs(_3123 / _3111) * cbSceneParam._m0[80u].y) * ((((_3265 - _3266) * 2.0) - ((exp2(_3131 * (isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0)))) - exp2(_3131 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))))) * _3254)) - ((exp2(_3133 * _3265) - exp2(_3133 * _3266)) * _3254))) + (_3126 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3042);
        _3135 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3039;
        _3137 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3040;
        _3139 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3041;
        _3141 = _3321 * _3042;
    }
    else
    {
        _3135 = _3039;
        _3137 = _3040;
        _3139 = _3041;
        _3141 = _3042;
    }
    bool _3348;
    vec4 _3151;
    vec4 _3173;
    float _3175;
    float _3179;
    float _3180;
    float _3181;
    float _3182;
    bool _3192;
    for (;;)
    {
        _3151 = cbMatDynParam._m0[0u];
        float _3153 = roundEven(_3151.y);
        bool _3154 = _3153 == 3.0;
        float _3155 = log2(_3141);
        float _3162 = exp2(_3155 * cbSceneParam._m0[78u].x) * _3011;
        float _3163 = exp2(_3155 * cbSceneParam._m0[78u].y) * _3012;
        float _3164 = exp2(_3155 * cbSceneParam._m0[78u].z) * _3013;
        float _3171 = _1133 + (-0.5);
        _3173 = cbMtdParam._m0[1u];
        _3175 = _3173.y * _3171;
        float _3178 = (_3153 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3179 = _3178 * (_3154 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3135)));
        _3180 = _3178 * (_3154 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3137)));
        _3181 = _3178 * (_3154 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3139)));
        _3182 = _3171 * 0.999000012874603271484375;
        _3192 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3192)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3182) < 0.5)
            {
                _3348 = true;
                break;
            }
        }
        uint _3289 = _1182 + uint(_3151.w);
        if ((cbInstanceData._m0[_3289].w < 1.0) && ((cbInstanceData._m0[_3289].w + _3182) < 0.5))
        {
            _3348 = true;
            break;
        }
        if ((_3175 + 1.0) < _3173.x)
        {
            _3348 = true;
            break;
        }
        _3348 = false;
        break;
    }
    float _3553;
    if (_3348)
    {
        discard_state = true;
        _3553 = 0.0;
    }
    else
    {
        _3553 = cbInstanceData._m0[_3014].w;
    }
    SV_Target.x = _3179;
    SV_Target.y = _3180;
    SV_Target.z = _3181;
    SV_Target.w = _3553;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3014].w;
    discard_exit();
}


