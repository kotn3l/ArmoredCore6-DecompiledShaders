#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1651;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3975 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _3986 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _3997 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4008 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[23u].w) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4019 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _546 = (_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473;
    float _547 = (_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474;
    float _548 = (_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _586 = _584.x;
    float _596 = dot(vec4(_586, _584.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _608 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _399.z) * 2.0) - ((((_586 - _596) * cbMtdParam._m0[23u].w) + _596) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4030 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _616 = (_609 * ((_567.x * cbMtdParam._m0[14u].x) - _546)) + _546;
    float _617 = (_609 * ((_567.y * cbMtdParam._m0[14u].y) - _547)) + _547;
    float _618 = (_609 * ((_567.z * cbMtdParam._m0[14u].z) - _548)) + _548;
    float _622 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _616;
    float _625 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _617;
    float _628 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _618;
    float _635 = ((_616 - _622) * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) + _622;
    float _636 = ((_617 - _625) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) + _625;
    float _637 = ((_618 - _628) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) + _628;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _696 = _694.x;
    float _697 = _694.y;
    float _698 = _694.z;
    float _705 = ((_677.x - _696) * _466) + _696;
    float _706 = ((_677.y - _697) * _466) + _697;
    float _707 = ((_677.z - _698) * _466) + _698;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _730 = ((_719.x - _705) * _539) + _705;
    float _731 = ((_719.y - _706) * _539) + _706;
    float _732 = ((_719.z - _707) * _539) + _707;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _757 = ((_744.z - _732) * _609) + _732;
    float _760 = ((((_744.x - _730) * _609) + _730) * 2.0) + (-1.0);
    float _761 = ((((_744.y - _731) * _609) + _731) * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _4041 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _767 = sqrt(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))));
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _808 = _806.x;
    float _809 = 1.0 - _808;
    float _817 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _820 = ((isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : min(_817, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _829 = (_820 - ((((((_808 - _809) * cbMtdParam._m0[24u].z) + _809) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _820))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4062 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _830 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _837 = (_830 * (cbMtdParam._m0[17u].x - _635)) + _635;
    float _838 = (_830 * (cbMtdParam._m0[17u].y - _636)) + _636;
    float _839 = (_830 * (cbMtdParam._m0[17u].z - _637)) + _637;
    vec4 _851 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _853 = _851.x;
    float _854 = 1.0 - _853;
    float _879 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_853 - _854) * cbMtdParam._m0[24u].w) + _854) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4073 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _880 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _888 = ((((cbMtdParam._m0[10u].x - _837) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _880) + _837;
    float _889 = ((((cbMtdParam._m0[10u].y - _838) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _880) + _838;
    float _890 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _839)) * _880) + _839;
    vec4 _916 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _918 = _916.x;
    float _936 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _918) * _466) + _918;
    float _953 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _936) * _539) + _936;
    float _970 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _953) * _609) + _953;
    float _974 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _970) * cbMtdParam._m0[19u].z) + _970;
    float _976 = _974 - (_974 * _830);
    float _978 = _976 - (_976 * _880);
    float _983 = (((_654.z - _757) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _757;
    float _987 = ((_781.z - _983) * cbMtdParam._m0[19u].w) + _983;
    vec4 _1003 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _1010 = (_1003.x * 2.0) + (-1.0);
    float _1011 = (_1003.y * 2.0) + (-1.0);
    float _1012 = dot(vec2(_1010, _1011), vec2(_1010, _1011));
    float _4084 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1020 = (_830 * (_1003.z - _987)) + _987;
    float _1023 = ((cbMtdParam._m0[23u].x - _1020) * _880) + _1020;
    vec4 _1046 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1052 = (_1046.x * 2.0) + (-1.0);
    float _1053 = (_1046.y * 2.0) + (-1.0);
    float _1054 = dot(vec2(_1052, _1053), vec2(_1052, _1053));
    float _4095 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1068 = (_760 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_654.x * 2.0) + (-1.0)))) + (((_781.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1069 = (_761 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_654.y * 2.0) + (-1.0)))) + (((_781.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1081 = (((_1010 - _1068) + (cbMtdParam._m0[21u].x * _1068)) * _830) + _1068;
    float _1082 = (((_1011 - _1069) + (cbMtdParam._m0[21u].x * _1069)) * _830) + _1069;
    float _1083 = (_830 * (sqrt(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) - _767)) + _767;
    float _1094 = (((_1052 - _1081) + (_1081 * cbMtdParam._m0[22u].z)) * _880) + _1081;
    float _1095 = (((_1053 - _1082) + (_1082 * cbMtdParam._m0[22u].z)) * _880) + _1082;
    float _1096 = ((sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) - _1083) * _880) + _1083;
    float _1098 = cbMtdParam._m0[22u].x + _781.w;
    float _1101 = fma(_1096, _265 * NORMAL.x, fma(_1095, _272 * TANGENT.x, (_258 * _250) * _1094));
    float _1104 = fma(_1096, _265 * NORMAL.y, fma(_1095, _272 * TANGENT.y, (_258 * _251) * _1094));
    float _1107 = fma(_1096, _265 * NORMAL.z, fma(_1095, _272 * TANGENT.z, (_258 * _252) * _1094));
    float _1111 = inversesqrt(dot(vec3(_1101, _1104, _1107), vec3(_1101, _1104, _1107)));
    float _1112 = _1111 * _1101;
    float _1113 = _1111 * _1104;
    float _1114 = _1111 * _1107;
    float _4106 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1115 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4128 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4139 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4150 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4161 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _1120 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _1134 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1184 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1174);
    float _1185 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1174);
    float _1186 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1174);
    float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
    float _1191 = _1184 * _1190;
    float _1192 = _1185 * _1190;
    float _1193 = _1186 * _1190;
    float _1199 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1200 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1218 = fma(_1114, cbSceneParam._m0[5u].z, fma(_1113, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1112));
    float _1221 = fma(_1114, cbSceneParam._m0[6u].z, fma(_1113, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1112));
    float _1224 = fma(_1114, cbSceneParam._m0[7u].z, fma(_1113, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1112));
    uint _1238 = (_297 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1244 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_1238].x;
    float _1245 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_1238].y;
    float _1246 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_1238].z;
    float _4172 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1247 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1248 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _1249 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _1250 = 1.0 - _1120;
    float _1251 = _1247 * _1250;
    float _1252 = _1248 * _1250;
    float _1253 = _1249 * _1250;
    float _1258 = (_1247 + (-0.039999999105930328369140625)) * _1120;
    float _1259 = (_1248 + (-0.039999999105930328369140625)) * _1120;
    float _1260 = (_1249 + (-0.039999999105930328369140625)) * _1120;
    float _1261 = _1258 + 0.039999999105930328369140625;
    float _1263 = _1259 + 0.039999999105930328369140625;
    float _1264 = _1260 + 0.039999999105930328369140625;
    vec4 _1273 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1199, cbSceneParam._m0[86u].y * _1200));
    float _1277 = ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * TEXCOORD_5.w) * _1273.x;
    float _1278 = dot(vec3(_1112, _1113, _1114), vec3(_1191, _1192, _1193));
    float _1281 = _1278 * 2.0;
    float _1285 = (_1281 * _1112) - _1191;
    float _1286 = (_1281 * _1113) - _1192;
    float _1287 = (_1281 * _1114) - _1193;
    float _1291 = abs(dot(vec3(_1191, _1192, _1193), vec3(_1112, _1113, _1114)));
    float _4205 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1293 = sqrt(_1115);
    float _1306 = exp2((_1293 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1293 * 3.0));
    float _1312 = (1.0 - _1306) * ((_1293 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1313 = _1306 * _1293;
    float _1341 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1345 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1349 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1650;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1375 = fma(_1349, cbModelParam._m0[26u].z, fma(_1345, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1341));
        float _1379 = fma(_1349, cbModelParam._m0[27u].z, fma(_1345, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1341));
        float _1383 = fma(_1349, cbModelParam._m0[28u].z, fma(_1345, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1341));
        float _1408 = _1341 + _1112;
        float _1409 = _1345 + _1113;
        float _1410 = _1349 + _1114;
        float _1420 = fma(_1410, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1408)) - _1375;
        float _1421 = fma(_1410, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1408)) - _1379;
        float _1422 = fma(_1410, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1408)) - _1383;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1375 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1379 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[34u].z) + ((((((_1383 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1478 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1444.x + (-0.5));
        float _1480 = _1478 * (_1444.y + (-0.5));
        float _1481 = _1478 * (_1444.z + (-0.5));
        float _1488 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1451.x + (-0.5));
        float _1490 = _1488 * (_1451.y + (-0.5));
        float _1491 = _1488 * (_1451.z + (-0.5));
        float _1498 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1458.x + (-0.5));
        float _1500 = _1498 * (_1458.y + (-0.5));
        float _1501 = _1498 * (_1458.z + (-0.5));
        float _1508 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1465.x + (-0.5));
        float _1510 = _1508 * (_1465.y + (-0.5));
        float _1511 = _1508 * (_1465.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1532 = (dot(vec3(_1112, _1113, _1114), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1542 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4253 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1544 + 1.0))) + _1549) * _1512;
        float _1559 = _1480 * 0.5;
        float _1560 = _1490 * 0.5;
        float _1561 = _1500 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1112, _1113, _1114), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4286 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1586 + 1.0))) + _1591) * _1513;
        float _1601 = _1481 * 0.5;
        float _1602 = _1491 * 0.5;
        float _1603 = _1501 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1112, _1113, _1114), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4319 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1628 + 1.0))) + _1633) * _1514;
        _1650 = _1481;
        _1652 = _1480;
        _1653 = _1479;
        _1654 = _1491;
        _1655 = _1490;
        _1656 = _1489;
        _1657 = _1501;
        _1658 = _1500;
        _1659 = _1499;
        _1660 = _1514;
        _1661 = _1513;
        _1662 = _1512;
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1664 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1651;
        _1652 = _1651;
        _1653 = _1651;
        _1654 = _1651;
        _1655 = _1651;
        _1656 = _1651;
        _1657 = _1651;
        _1658 = _1651;
        _1659 = _1651;
        _1660 = _1651;
        _1661 = _1651;
        _1662 = _1651;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1688 = fma(_1349, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341));
        float _1692 = fma(_1349, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341));
        float _1696 = fma(_1349, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341));
        float _1719 = _1341 + _1112;
        float _1720 = _1345 + _1113;
        float _1721 = _1349 + _1114;
        float _1731 = fma(_1721, cbModelParam._m0[30u].z, fma(_1720, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1719)) - _1688;
        float _1732 = fma(_1721, cbModelParam._m0[31u].z, fma(_1720, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1719)) - _1692;
        float _1733 = fma(_1721, cbModelParam._m0[32u].z, fma(_1720, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1719)) - _1696;
        float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
        float _1750 = ((_1737 * _1731) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1688 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1751 = ((_1737 * _1732) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1692 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1752 = ((_1737 * _1733) / cbModelParam._m0[35u].z) + ((((((_1696 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        float _1787 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1754.x + (-0.5));
        float _1789 = _1787 * (_1754.y + (-0.5));
        float _1790 = _1787 * (_1754.z + (-0.5));
        float _1797 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1761.x + (-0.5));
        float _1799 = _1797 * (_1761.y + (-0.5));
        float _1800 = _1797 * (_1761.z + (-0.5));
        float _1807 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1808 = _1807 * (_1768.x + (-0.5));
        float _1809 = _1807 * (_1768.y + (-0.5));
        float _1810 = _1807 * (_1768.z + (-0.5));
        float _1817 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1818 = _1817 * (_1775.x + (-0.5));
        float _1819 = _1817 * (_1775.y + (-0.5));
        float _1820 = _1817 * (_1775.z + (-0.5));
        float _1821 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1822 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = _1788 * 0.5;
        float _1825 = _1798 * 0.5;
        float _1826 = _1808 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1112, _1113, _1114), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1821 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4382 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1851 + 1.0))) + _1856) * _1821;
        float _1866 = _1789 * 0.5;
        float _1867 = _1799 * 0.5;
        float _1868 = _1809 * 0.5;
        float _1869 = dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868));
        float _1874 = (_1869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1869);
        float _1882 = (dot(vec3(_1112, _1113, _1114), vec3(_1874 * _1866, _1874 * _1867, _1874 * _1868)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868)) / (_1822 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1893 = _1892 * 2.0;
        float _1897 = (1.0 - _1892) / (_1892 + 1.0);
        float _4415 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1907 = ((((1.0 - _1898) * (_1893 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1893 + 1.0))) + _1898) * _1822;
        float _1908 = _1790 * 0.5;
        float _1909 = _1800 * 0.5;
        float _1910 = _1810 * 0.5;
        float _1911 = dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910));
        float _1916 = (_1911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1911);
        float _1924 = (dot(vec3(_1112, _1113, _1114), vec3(_1916 * _1908, _1916 * _1909, _1916 * _1910)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1933 = sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1935 = _1934 * 2.0;
        float _1939 = (1.0 - _1934) / (_1934 + 1.0);
        float _4448 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1949 = ((((1.0 - _1940) * (_1935 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1935 + 1.0))) + _1940) * _1823;
        _1957 = _1790;
        _1958 = _1789;
        _1959 = _1788;
        _1960 = _1800;
        _1961 = _1799;
        _1962 = _1798;
        _1963 = _1810;
        _1964 = _1809;
        _1965 = _1808;
        _1966 = _1823;
        _1967 = _1822;
        _1968 = _1821;
        _1969 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
        _1970 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)));
        _1971 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)));
    }
    else
    {
        _1957 = _1651;
        _1958 = _1651;
        _1959 = _1651;
        _1960 = _1651;
        _1961 = _1651;
        _1962 = _1651;
        _1963 = _1651;
        _1964 = _1651;
        _1965 = _1651;
        _1966 = _1651;
        _1967 = _1651;
        _1968 = _1651;
        _1969 = 0.0;
        _1970 = 0.0;
        _1971 = 0.0;
    }
    float _1981 = (cbModelParam._m0[1u].x * (_1969 - _1663)) + _1663;
    float _1982 = (cbModelParam._m0[1u].x * (_1970 - _1664)) + _1664;
    float _1983 = (cbModelParam._m0[1u].x * (_1971 - _1665)) + _1665;
    float _2004 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1981));
    float _2025 = _1285 * 0.5;
    float _2026 = _1286 * 0.5;
    float _2027 = _1287 * 0.5;
    float _2028 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1959, _1962, _1965, _1968));
    float _2031 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1958, _1961, _1964, _1967));
    float _2034 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1957, _1960, _1963, _1966));
    float _2068;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2041 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1650, _1654, _1657, _1660));
        float _2045 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1652, _1655, _1658, _1661));
        float _2049 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1653, _1656, _1659, _1662));
        float _2056 = dot(vec4(cbModelParam._m0[39u]), vec4(_2025, _2026, _2027, 1.0));
        _2068 = dot(vec3(isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2056) ? 0.0 : (isnan(0.0) ? _2056 : max(0.0, _2056))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2068 = 1.0;
    }
    float _2079;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2070 = dot(vec4(cbModelParam._m0[40u]), vec4(_2025, _2026, _2027, 1.0));
        _2079 = dot(vec3(isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2070) ? 0.0 : (isnan(0.0) ? _2070 : max(0.0, _2070))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2079 = 1.0;
    }
    float _2083 = (_2079 * cbModelParam._m0[1u].x) + (_2068 * (1.0 - cbModelParam._m0[1u].x));
    float _2093 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1115);
    float _2094 = isnan(_2093) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2093 : min(cbModelParam._m0[25u].z, _2093));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2141 = fma(_1349, cbModelParam._m0[13u].z, fma(_1345, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1341)) + cbModelParam._m0[13u].w;
        float _2145 = fma(_1349, cbModelParam._m0[14u].z, fma(_1345, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1341)) + cbModelParam._m0[14u].w;
        float _2149 = fma(_1349, cbModelParam._m0[15u].z, fma(_1345, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1341)) + cbModelParam._m0[15u].w;
        float _2152 = fma(_1287, cbModelParam._m0[13u].z, fma(_1286, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1285));
        float _2155 = fma(_1287, cbModelParam._m0[14u].z, fma(_1286, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1285));
        float _2158 = fma(_1287, cbModelParam._m0[15u].z, fma(_1286, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1285));
        float _2186;
        if (_2152 > 0.0)
        {
            _2186 = abs((1.0 - _2141) / _2152);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2141 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2186 = frontier_phi_14_12_ladder;
        }
        float _2389;
        if (_2155 > 0.0)
        {
            _2389 = abs((1.0 - _2145) / _2155);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2145 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2389 = frontier_phi_23_19_ladder;
        }
        float _2643;
        if (_2158 > 0.0)
        {
            _2643 = abs((1.0 - _2149) / _2158);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2149 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2643 = frontier_phi_35_30_ladder;
        }
        float _2645 = isnan(_2389) ? _2186 : (isnan(_2186) ? _2389 : min(_2186, _2389));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _2152) + _2141;
        float _2651 = (_2646 * _2155) + _2145;
        float _2652 = (_2646 * _2158) + _2149;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2653;
        float _2657 = _2653 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 > _2657) || ((_2651 < _2655) || ((_2650 < _2655) || (_2650 > _2657))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2652, cbModelParam._m0[9u].z, fma(_2651, cbModelParam._m0[9u].y, _2650 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2652, cbModelParam._m0[10u].z, fma(_2651, cbModelParam._m0[10u].y, _2650 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2652, cbModelParam._m0[11u].z, fma(_2651, cbModelParam._m0[11u].y, _2650 * cbModelParam._m0[11u].x))), _2094);
            frontier_phi_13_35_ladder = _2780.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2780.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2780.x * cbModelParam._m0[1u].y;
        }
        _2174 = frontier_phi_13_35_ladder_2;
        _2176 = frontier_phi_13_35_ladder_1;
        _2178 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1285, _1286, _1287), _2094);
        _2174 = _2162.x * cbModelParam._m0[1u].y;
        _2176 = _2162.y * cbModelParam._m0[1u].y;
        _2178 = _2162.z * cbModelParam._m0[1u].y;
    }
    float _2182 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1115);
    float _2183 = isnan(_2182) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2182 : min(cbModelParam._m0[25u].w, _2182));
    float _2273;
    float _2275;
    float _2277;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2237 = fma(_1349, cbModelParam._m0[21u].z, fma(_1345, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1341)) + cbModelParam._m0[21u].w;
        float _2241 = fma(_1349, cbModelParam._m0[22u].z, fma(_1345, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1341)) + cbModelParam._m0[22u].w;
        float _2245 = fma(_1349, cbModelParam._m0[23u].z, fma(_1345, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1341)) + cbModelParam._m0[23u].w;
        float _2248 = fma(_1287, cbModelParam._m0[21u].z, fma(_1286, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1285));
        float _2251 = fma(_1287, cbModelParam._m0[22u].z, fma(_1286, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1285));
        float _2254 = fma(_1287, cbModelParam._m0[23u].z, fma(_1286, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1285));
        float _2394;
        if (_2248 > 0.0)
        {
            _2394 = abs((1.0 - _2237) / _2248);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2237 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2394 = frontier_phi_25_21_ladder;
        }
        float _2670;
        if (_2251 > 0.0)
        {
            _2670 = abs((1.0 - _2241) / _2251);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2241 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2670 = frontier_phi_37_32_ladder;
        }
        float _2883;
        if (_2254 > 0.0)
        {
            _2883 = abs((1.0 - _2245) / _2254);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2245 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2883 = frontier_phi_46_43_ladder;
        }
        float _2885 = isnan(_2670) ? _2394 : (isnan(_2394) ? _2670 : min(_2394, _2670));
        float _2886 = isnan(_2883) ? _2885 : (isnan(_2885) ? _2883 : min(_2885, _2883));
        float _2890 = (_2886 * _2248) + _2237;
        float _2891 = (_2886 * _2251) + _2241;
        float _2892 = (_2886 * _2254) + _2245;
        float _2893 = _2886 * 9.9999997473787516355514526367188e-05;
        float _2894 = (-1.0) - _2893;
        float _2896 = _2893 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2892 > _2896) || ((_2892 < _2894) || ((_2891 > _2896) || ((_2891 < _2894) || ((_2890 < _2894) || (_2890 > _2896))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2892, cbModelParam._m0[17u].z, fma(_2891, cbModelParam._m0[17u].y, _2890 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2892, cbModelParam._m0[18u].z, fma(_2891, cbModelParam._m0[18u].y, _2890 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2892, cbModelParam._m0[19u].z, fma(_2891, cbModelParam._m0[19u].y, _2890 * cbModelParam._m0[19u].x))), _2183);
            frontier_phi_22_46_ladder = _3091.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3091.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3091.x * cbModelParam._m0[1u].z;
        }
        _2273 = frontier_phi_22_46_ladder_2;
        _2275 = frontier_phi_22_46_ladder_1;
        _2277 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2257 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1285, _1286, _1287), _2183);
        _2273 = _2257.x * cbModelParam._m0[1u].z;
        _2275 = _2257.y * cbModelParam._m0[1u].z;
        _2277 = _2257.z * cbModelParam._m0[1u].z;
    }
    float _2290 = (((_1312 * _1261) + _1313) * _1277) * ((cbModelParam._m0[1u].w * (_2273 - _2174)) + _2174);
    float _2292 = (((_1312 * _1263) + _1313) * _1277) * ((cbModelParam._m0[1u].w * (_2275 - _2176)) + _2176);
    float _2294 = (((_1312 * _1264) + _1313) * _1277) * ((cbModelParam._m0[1u].w * (_2277 - _2178)) + _2178);
    float _2297 = fma(_2294, cbSceneParam._m0[89u].z, fma(_2292, cbSceneParam._m0[89u].y, _2290 * cbSceneParam._m0[89u].x));
    float _2300 = fma(_2294, cbSceneParam._m0[90u].z, fma(_2292, cbSceneParam._m0[90u].y, _2290 * cbSceneParam._m0[90u].x));
    float _2303 = fma(_2294, cbSceneParam._m0[91u].z, fma(_2292, cbSceneParam._m0[91u].y, _2290 * cbSceneParam._m0[91u].x));
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2323 = _1277 + (-1.0);
    float _2328 = (cbLight._m0[_2316].x * _2323) + 1.0;
    float _2329 = (cbLight._m0[_2316].y * _2323) + 1.0;
    float _2330 = (cbLight._m0[_2316].z * _2323) + 1.0;
    float _2331 = (cbLight._m0[_2316].w * _2323) + 1.0;
    uint _2332 = _2315 + 5u;
    float _2338 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2342 = _2315 + 4u;
    float _2348 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2352 = _2315 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_1112, _1113, _1114));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_1112, _1113, _1114));
    float _4584 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4595 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2332].x * _2338) * _2373) + ((cbLight._m0[_2342].x * _2348) * _2371);
    float _2381 = ((_2338 * cbLight._m0[_2332].y) * _2373) + ((_2348 * cbLight._m0[_2342].y) * _2371);
    float _2382 = ((_2338 * cbLight._m0[_2332].z) * _2373) + ((_2348 * cbLight._m0[_2342].z) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2315 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2388)
    {
        _2399 = _2380;
        _2401 = _2381;
        _2403 = _2382;
    }
    else
    {
        uint _2407 = _2315 + 6u;
        float _2423 = (dot(vec3(cbLight._m0[_2315 + 2u].xyz), vec3(_1112, _1113, _1114)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4606 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2426 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2399 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2380;
        _2401 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2381;
        _2403 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2382;
    }
    bool _2406 = _2386.y == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2406)
    {
        _2444 = _2399;
        _2446 = _2401;
        _2448 = _2403;
    }
    else
    {
        uint _2614 = _2315 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2315 + 3u].xyz), vec3(_1112, _1113, _1114)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4622 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2633 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2444 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2399;
        _2446 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2401;
        _2448 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2403;
    }
    uint _2451 = _2315 + 8u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _1115) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2315].x + _1191;
    float _2467 = cbLight._m0[_2315].y + _1192;
    float _2468 = cbLight._m0[_2315].z + _1193;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2315].xyz));
    float _4638 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _4649 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
    float _2480 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2481 = dot(vec3(_1112, _1113, _1114), vec3(_2473, _2474, _2475));
    float _4660 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2473, _2474, _2475));
    float _4671 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2465 * _2465;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
    float _2502 = 0.959999978542327880859375 - _1258;
    float _2504 = 0.959999978542327880859375 - _1259;
    float _2505 = 0.959999978542327880859375 - _1260;
    float _2512 = 1.0 - _2465;
    float _2523 = (0.5 / (((_2480 * ((_2479 * _2512) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2512) + _2465) * _2479))) * _2479;
    float _4682 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    uint _2536 = _2315 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _1115) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2352].x + _1191;
    float _2550 = cbLight._m0[_2352].y + _1192;
    float _2551 = cbLight._m0[_2352].z + _1193;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2352].xyz));
    float _4693 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2563 = dot(vec3(_1112, _1113, _1114), vec3(_2556, _2557, _2558));
    float _4704 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2556, _2557, _2558));
    float _4715 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2480 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2589) + _2548) * _2562))) * _2562;
    float _4726 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2502) + _1261) * cbLight._m0[_2536].x) * _2601) * _2338) + (((((_2501 * _2502) + _1261) * cbLight._m0[_2451].x) * _2525) * _2348);
    float _2612 = (((((_2582 * _2504) + _1263) * cbLight._m0[_2536].y) * _2601) * _2338) + (((((_2501 * _2504) + _1263) * cbLight._m0[_2451].y) * _2525) * _2348);
    float _2613 = (((((_2582 * _2505) + _1264) * cbLight._m0[_2536].z) * _2601) * _2338) + (((((_2501 * _2505) + _1264) * cbLight._m0[_2451].z) * _2525) * _2348);
    float _2675;
    float _2677;
    float _2679;
    if (_2388)
    {
        _2675 = _2611;
        _2677 = _2612;
        _2679 = _2613;
    }
    else
    {
        uint _2681 = _2315 + 2u;
        uint _2685 = _2315 + 10u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _1115) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1191;
        float _2702 = cbLight._m0[_2681].y + _1192;
        float _2703 = cbLight._m0[_2681].z + _1193;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2681].xyz));
        float _4737 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2715 = dot(vec3(_1112, _1113, _1114), vec3(_2708, _2709, _2710));
        float _4748 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4759 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2480 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2741) + _2700) * _2714))) * _2714;
        float _4770 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2675 = (((((_2734 * _2502) + _1261) * cbLight._m0[_2685].x) * _2753) * _2754) + _2611;
        _2677 = (((((_2734 * _2504) + _1263) * cbLight._m0[_2685].y) * _2753) * _2754) + _2612;
        _2679 = (((((_2734 * _2505) + _1264) * cbLight._m0[_2685].z) * _2753) * _2754) + _2613;
    }
    float _2789;
    float _2791;
    float _2793;
    if (_2406)
    {
        _2789 = _2675;
        _2791 = _2677;
        _2793 = _2679;
    }
    else
    {
        uint _2800 = _2315 + 3u;
        uint _2804 = _2315 + 11u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _1115) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _1191;
        float _2821 = cbLight._m0[_2800].y + _1192;
        float _2822 = cbLight._m0[_2800].z + _1193;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2800].xyz));
        float _4786 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2834 = dot(vec3(_1112, _1113, _1114), vec3(_2827, _2828, _2829));
        float _4797 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4808 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2480 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2860) + _2819) * _2833))) * _2833;
        float _4819 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2789 = (((((_2853 * _2502) + _1261) * cbLight._m0[_2804].x) * _2872) * _2873) + _2675;
        _2791 = (((((_2853 * _2504) + _1263) * cbLight._m0[_2804].y) * _2872) * _2873) + _2677;
        _2793 = (((((_2853 * _2505) + _1264) * cbLight._m0[_2804].z) * _2872) * _2873) + _2679;
    }
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_2313.y == 0u)
    {
        float _2948 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2948;
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2948;
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2948;
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.x;
        uint _2975 = uint((float(_2963.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1200) / _2964))) + floor(float(uint(cbSceneParam._m0[85u].x * _1199) / _2964)));
        float _2985 = (log2(_2951 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2986 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        uint _2989 = uint(isnan(14.0) ? _2986 : (isnan(_2986) ? 14.0 : min(_2986, 14.0)));
        uvec4 _2994 = texelFetch(g_lightClusterGridBuffer, int(((_2989 << 2u) + (_2975 << 6u)) >> 2u));
        uint _2995 = _2994.x;
        uint _2996 = _2963.z;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((((1u << ((_2996 >> 4u) & 15u)) + 4294967295u) & _2995) == 0u) || ((_2996 & 240u) == 0u))
        {
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
        }
        else
        {
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            uint _3247 = 0u;
            uint _3256;
            bool _3257;
            for (;;)
            {
                _3256 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                _3257 = _3256 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3257)
                {
                    frontier_phi_61_pred = _3241;
                    frontier_phi_61_pred_1 = _3246;
                    frontier_phi_61_pred_2 = _3245;
                    frontier_phi_61_pred_3 = _3244;
                    frontier_phi_61_pred_4 = _3243;
                    frontier_phi_61_pred_5 = _3242;
                }
                else
                {
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    uint _3371;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3243;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3246;
                    _3371 = _3256;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3375 = uint(findLSB(_3371)) + (_3247 << 5u);
                        uint _3372 = (_3371 + 4294967295u) & _3371;
                        uint _3377 = _3375 * 48u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3397 = (_3375 * 48u) + 4u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3416 = (_3375 * 48u) + 8u;
                        vec3 _3427 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x));
                        float _3431 = _3391.x - _2949;
                        float _3432 = _3391.y - _2950;
                        float _3433 = _3391.z - _2951;
                        float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                        float _3437 = inversesqrt(_3434);
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3441 = dot(vec3(_1218, _1221, _1224), vec3(_3438, _3439, _3440));
                        float _3446 = 1.0 - (_3434 * _3391.w);
                        float _4845 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3448 = sqrt(_3434) * _3410.w;
                        float _3451 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3441) + _3452;
                        float _3458 = _3448 * _3448;
                        float _3462 = ((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3447) / ((_3458 * 0.699999988079071044921875) + 1.0);
                        float _3466 = (-0.0) - _2949;
                        float _3467 = (-0.0) - _2950;
                        float _3468 = (-0.0) - _2951;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3483 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                        float _3484 = 1.0 - _1293;
                        float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                        float _3492 = _3491 * _3491;
                        float _3493 = _3492 * _3492;
                        float _3494 = _3473 + _3438;
                        float _3495 = _3474 + _3439;
                        float _3496 = _3475 + _3440;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3504 = dot(vec3(_1218, _1221, _1224), vec3(_3473, _3474, _3475));
                        float _4861 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3507 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3508 = dot(vec3(_1218, _1221, _1224), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                        float _4872 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3511 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                        float _3516 = _3451 * _3492;
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3441) + _3517;
                        float _4883 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3521 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3522 = 1.0 - _3492;
                        float _3532 = (0.5 / (((_3521 * ((_3507 * _3522) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3521 * _3522) + _3492) * _3507))) * _3521;
                        float _4894 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3543 = (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) / ((_3515 * _3515) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125))) * _3447;
                        _3300 = (_3462 * _3410.x) + _3368;
                        _3301 = (_3462 * _3410.y) + _3369;
                        _3302 = (_3462 * _3410.z) + _3370;
                        _3297 = (_3543 * _3427.x) + _3365;
                        _3298 = (_3543 * _3427.y) + _3366;
                        _3299 = (_3543 * _3427.z) + _3367;
                        if (_3372 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3299;
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3302;
                            _3371 = _3372;
                        }
                    }
                    frontier_phi_61_pred = _3297;
                    frontier_phi_61_pred_1 = _3302;
                    frontier_phi_61_pred_2 = _3301;
                    frontier_phi_61_pred_3 = _3300;
                    frontier_phi_61_pred_4 = _3299;
                    frontier_phi_61_pred_5 = _3298;
                }
                _3097 = frontier_phi_61_pred;
                _3107 = frontier_phi_61_pred_1;
                _3105 = frontier_phi_61_pred_2;
                _3103 = frontier_phi_61_pred_3;
                _3101 = frontier_phi_61_pred_4;
                _3099 = frontier_phi_61_pred_5;
                uint _3248 = _3247 + 1u;
                if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3241 = _3097;
                    _3242 = _3099;
                    _3243 = _3101;
                    _3244 = _3103;
                    _3245 = _3105;
                    _3246 = _3107;
                    _3247 = _3248;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
        }
        uvec4 _3110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3111 = _3110.z;
        uint _3113 = (_3111 >> 8u) & 15u;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((4294967295u << _3113) & _2995) == 0u)
        {
            _3209 = _3096;
            _3211 = _3098;
            _3213 = _3100;
            _3215 = _3102;
            _3217 = _3104;
            _3219 = _3106;
        }
        else
        {
            float _3234 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
            float _3235 = _3234 * _2949;
            float _3236 = _3234 * _2950;
            float _3237 = _3234 * _2951;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3113 < ((_3111 >> 12u) & 15u))
            {
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3348 = _3096;
                float _3349 = _3098;
                float _3350 = _3100;
                float _3351 = _3102;
                float _3352 = _3104;
                float _3353 = _3106;
                uint _3354 = _3113;
                uint _3363;
                bool _3364;
                for (;;)
                {
                    _3363 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                    _3364 = _3363 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3364)
                    {
                        frontier_phi_67_pred = _3351;
                        frontier_phi_67_pred_1 = _3352;
                        frontier_phi_67_pred_2 = _3353;
                        frontier_phi_67_pred_3 = _3350;
                        frontier_phi_67_pred_4 = _3349;
                        frontier_phi_67_pred_5 = _3348;
                    }
                    else
                    {
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3561 = _3348;
                        float _3562 = _3349;
                        float _3563 = _3350;
                        float _3564 = _3351;
                        float _3565 = _3352;
                        float _3566 = _3353;
                        uint _3567 = _3363;
                        uint _3568;
                        vec4 _3593;
                        float _3594;
                        vec4 _3609;
                        vec3 _3621;
                        vec4 _3636;
                        vec4 _3651;
                        float _3697;
                        bool _3698;
                        for (;;)
                        {
                            uint _3578 = ((_3354 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3567));
                            _3568 = (_3567 + 4294967295u) & _3567;
                            uint _3580 = _3578 * 40u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3594 = _3593.w;
                            uint _3596 = (_3578 * 40u) + 4u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3578 * 40u) + 8u;
                            _3621 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x));
                            uint _3623 = (_3578 * 40u) + 16u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3578 * 40u) + 20u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3578 * 40u) + 24u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3672 = (_3578 * 40u) + 28u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3697 = fma(_2951, _3685.z, fma(_2950, _3685.y, _3685.x * _2949)) + _3685.w;
                            _3698 = !((fma(_2951, _3666.z, fma(_2950, _3666.y, _3666.x * _2949)) + _3666.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3698)
                            {
                                float _3725 = _3593.x - _2949;
                                float _3726 = _3593.y - _2950;
                                float _3727 = _3593.z - _2951;
                                float _3728 = dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727));
                                float _3731 = inversesqrt(_3728);
                                float _3732 = _3731 * _3725;
                                float _3733 = _3731 * _3726;
                                float _3734 = _3731 * _3727;
                                float _3738 = 1.0 - (_3728 / (_3594 * _3594));
                                float _4905 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3743 = sqrt(_3728) * _3609.w;
                                float _3745 = 1.39999997615814208984375 / (_3743 + 1.39999997615814208984375);
                                float _3746 = _3745 * _3745;
                                float _3749 = ((1.0 - _3746) * dot(vec3(_3732, _3733, _3734), vec3(_1218, _1221, _1224))) + _3746;
                                float _3752 = _3743 * _3743;
                                float _3756 = (fma(_2951, _3636.z, fma(_2950, _3636.y, _3636.x * _2949)) + _3636.w) / _3697;
                                float _3757 = (fma(_2951, _3651.z, fma(_2950, _3651.y, _3651.x * _2949)) + _3651.w) / _3697;
                                float _3761 = 1.0 - dot(vec2(_3756, _3757), vec2(_3756, _3757));
                                float _4921 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3763 = _3762 * (((isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0))) * _3739) / ((_3752 * 0.699999988079071044921875) + 1.0));
                                float _3775 = exp2(log2(1.0 / ((_3752 * 3.5) + 5.0)) * 0.25);
                                float _3776 = 1.0 - _1293;
                                float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                                float _3784 = _3783 * _3783;
                                float _3785 = _3784 * _3784;
                                float _3786 = _3732 - _3235;
                                float _3787 = _3733 - _3236;
                                float _3788 = _3734 - _3237;
                                float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                                float _3796 = dot(vec3(_1218, _1221, _1224), vec3((-0.0) - _3235, (-0.0) - _3236, (-0.0) - _3237));
                                float _4932 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3800 = dot(vec3(_1218, _1221, _1224), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                                float _4943 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                                float _3808 = _3745 * _3784;
                                float _3809 = _3808 * _3808;
                                float _3815 = ((1.0 - _3809) * dot(vec3(_1218, _1221, _1224), vec3(_3732, _3733, _3734))) + _3809;
                                float _4954 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3817 = 1.0 - _3784;
                                float _3827 = (0.5 / (((_3816 * ((_3799 * _3817) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3816 * _3817) + _3784) * _3799))) * _3816;
                                float _4965 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3837 = (_3762 * _3739) * (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) / ((_3807 * _3807) * ((_3752 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3837 * _3621.x;
                                frontier_phi_73_pred_1 = _3837 * _3621.y;
                                frontier_phi_73_pred_2 = _3763 * _3609.z;
                                frontier_phi_73_pred_3 = _3763 * _3609.y;
                                frontier_phi_73_pred_4 = _3763 * _3609.x;
                                frontier_phi_73_pred_5 = _3837 * _3621.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3841 = frontier_phi_73_pred;
                            _3842 = frontier_phi_73_pred_1;
                            _3846 = frontier_phi_73_pred_2;
                            _3845 = frontier_phi_73_pred_3;
                            _3844 = frontier_phi_73_pred_4;
                            _3843 = frontier_phi_73_pred_5;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            if (_3568 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3568;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3551;
                        frontier_phi_67_pred_1 = _3552;
                        frontier_phi_67_pred_2 = _3553;
                        frontier_phi_67_pred_3 = _3550;
                        frontier_phi_67_pred_4 = _3549;
                        frontier_phi_67_pred_5 = _3548;
                    }
                    _3216 = frontier_phi_67_pred;
                    _3218 = frontier_phi_67_pred_1;
                    _3220 = frontier_phi_67_pred_2;
                    _3214 = frontier_phi_67_pred_3;
                    _3212 = frontier_phi_67_pred_4;
                    _3210 = frontier_phi_67_pred_5;
                    uint _3355 = _3354 + 1u;
                    if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3348 = _3210;
                        _3349 = _3212;
                        _3350 = _3214;
                        _3351 = _3216;
                        _3352 = _3218;
                        _3353 = _3220;
                        _3354 = _3355;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3218;
                frontier_phi_55_56_ladder_1 = _3220;
                frontier_phi_55_56_ladder_2 = _3216;
                frontier_phi_55_56_ladder_3 = _3214;
                frontier_phi_55_56_ladder_4 = _3212;
                frontier_phi_55_56_ladder_5 = _3210;
            }
            else
            {
                frontier_phi_55_56_ladder = _3104;
                frontier_phi_55_56_ladder_1 = _3106;
                frontier_phi_55_56_ladder_2 = _3102;
                frontier_phi_55_56_ladder_3 = _3100;
                frontier_phi_55_56_ladder_4 = _3098;
                frontier_phi_55_56_ladder_5 = _3096;
            }
            _3209 = frontier_phi_55_56_ladder_5;
            _3211 = frontier_phi_55_56_ladder_4;
            _3213 = frontier_phi_55_56_ladder_3;
            _3215 = frontier_phi_55_56_ladder_2;
            _3217 = frontier_phi_55_56_ladder;
            _3219 = frontier_phi_55_56_ladder_1;
        }
        float _3224 = isnan(1.0) ? _1277 : (isnan(_1277) ? 1.0 : min(_1277, 1.0));
        _3008 = (_3224 * _3215) + _2444;
        _3010 = (_3224 * _3217) + _2446;
        _3012 = (_3224 * _3219) + _2448;
        _3014 = ((_3209 * _1261) * _3224) + _2789;
        _3016 = ((_3211 * _1263) * _3224) + _2791;
        _3018 = ((_3213 * _1264) * _3224) + _2793;
    }
    else
    {
        _3008 = _2444;
        _3010 = _2446;
        _3012 = _2448;
        _3014 = _2789;
        _3016 = _2791;
        _3018 = _2793;
    }
    float _4981 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    float _4992 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _5003 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    uint _3038 = _297 + 6u;
    float _3046 = _1199 / cbSceneParam._m0[86u].x;
    float _3047 = _1200 / cbSceneParam._m0[86u].y;
    vec4 _3061 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, (log2((isnan(cbSceneParam._m0[77u].w) ? _1134 : (isnan(_1134) ? cbSceneParam._m0[77u].w : min(_1134, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3063 = _3061.x;
    float _3064 = _3061.y;
    float _3065 = _3061.z;
    float _3066 = _3061.w;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    if (_1134 > cbSceneParam._m0[78u].w)
    {
        float _3121 = isnan(_1134) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1134 : min(cbSceneParam._m0[80u].w, _1134));
        float _3122 = _3121 / _1134;
        float _3133 = _3122 * _1184;
        float _3134 = _1185 * _3122;
        float _3135 = (-0.0) - _3134;
        float _3137 = _3122 * _1186;
        float _3139 = (cbSceneParam._m0[77u].w * _3135) / _3121;
        float _3140 = _3139 + cbSceneParam._m0[79u].w;
        float _3141 = cbSceneParam._m0[79u].w - _3134;
        float _3147 = sqrt(((_3133 * _3133) + (_3134 * _3134)) + (_3137 * _3137));
        float _3150 = (1.0 - (cbSceneParam._m0[77u].w / _3121)) * _3147;
        float _3155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3135 - _3139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3140 > 0.0) ? exp2(_3155 * _3140) : (2.0 - exp2(_3157 * _3140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3150;
        }
        else
        {
            float _3270 = 1.0 / cbSceneParam._m0[80u].x;
            float _3271 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : max(_3140, _3141));
            float _3272 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : min(_3140, _3141));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            _3310 = ((abs(_3147 / _3135) * cbSceneParam._m0[80u].y) * ((((_3281 - _3282) * 2.0) - ((exp2(_3155 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0)))) - exp2(_3155 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))))) * _3270)) - ((exp2(_3157 * _3281) - exp2(_3157 * _3282)) * _3270))) + (_3150 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3066);
        _3159 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3063;
        _3161 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3064;
        _3163 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3065;
        _3165 = _3321 * _3066;
    }
    else
    {
        _3159 = _3063;
        _3161 = _3064;
        _3163 = _3065;
        _3165 = _3066;
    }
    float _3177 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3178 = _3177 == 3.0;
    float _3179 = log2(_3165);
    float _3186 = exp2(_3179 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_3008 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1277))) + ((_3014 + ((isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))) * _2083)) * cbPerFrame._m0[3u].x));
    float _3187 = exp2(_3179 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_3010 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1277))) + ((_3016 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2083)) * cbPerFrame._m0[3u].x));
    float _3188 = exp2(_3179 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_3012 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1277))) + ((_3018 + ((isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))) * _2083)) * cbPerFrame._m0[3u].x));
    float _3197 = (_3177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3197 * (_3178 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3159)));
    SV_Target.y = _3197 * (_3178 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3161)));
    SV_Target.z = _3197 * (_3178 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3163)));
    SV_Target.w = cbInstanceData._m0[_3038].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3038].w;
}


