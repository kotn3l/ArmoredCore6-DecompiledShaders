#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1582;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3907 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3918 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3929 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3940 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _487 = (_480 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _488 = (_480 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _489 = (_480 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[23u].w) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3951 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _563 = (_345.x * cbMtdParam._m0[9u].x) * ((_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487);
    float _564 = (_345.y * cbMtdParam._m0[9u].y) * ((_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488);
    float _565 = (_345.z * cbMtdParam._m0[9u].z) * ((_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489);
    float _569 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _563;
    float _572 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _564;
    float _575 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _565;
    float _583 = (((_563 - _569) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _569) * 4.55000019073486328125;
    float _585 = (((_564 - _572) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _572) * 4.55000019073486328125;
    float _587 = (((_565 - _575) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _575) * 4.55000019073486328125;
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _648 = _646.x;
    float _649 = _646.y;
    float _650 = _646.z;
    float _657 = ((_629.x - _648) * _480) + _648;
    float _658 = ((_629.y - _649) * _480) + _649;
    float _659 = ((_629.z - _650) * _480) + _650;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _684 = ((_671.z - _659) * _553) + _659;
    float _687 = ((((_671.x - _657) * _553) + _657) * 2.0) + (-1.0);
    float _688 = ((((_671.y - _658) * _553) + _658) * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3962 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _724 = (_687 + ((((_604.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_712.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _725 = (_688 + ((((_604.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_712.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _728 = fma(_694, _258, fma(_725, _265, _724 * _251));
    float _731 = fma(_694, _259, fma(_725, _266, _724 * _252));
    float _734 = fma(_694, _260, fma(_725, _267, _724 * _253));
    float _738 = inversesqrt(dot(vec3(_728, _731, _734), vec3(_728, _731, _734)));
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _767 = _765.x;
    float _768 = 1.0 - _767;
    float _777 = (cbMtdParam._m0[19u].x + dot(vec4(_738 * _728, _738 * _731, _738 * _734, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_767 - _768) * cbMtdParam._m0[24u].z) + _768) * cbMtdParam._m0[21u].z);
    float _3973 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _780 = (-0.0) - cbMtdParam._m0[24u].x;
    float _782 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
    float _790 = _778 - ((_778 * TEXCOORD_8.x) * _783);
    float _791 = _778 - ((_778 * TEXCOORD_8.y) * _783);
    float _792 = _778 - ((_778 * TEXCOORD_8.z) * _783);
    float _799 = (_790 * (cbMtdParam._m0[17u].x - _583)) + _583;
    float _800 = (_791 * (cbMtdParam._m0[17u].y - _585)) + _585;
    float _801 = (_792 * (cbMtdParam._m0[17u].z - _587)) + _587;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _815 = _813.x;
    float _816 = 1.0 - _815;
    float _842 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_815 - _816) * cbMtdParam._m0[24u].w) + _816) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3994 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _843 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _851 = ((((cbMtdParam._m0[10u].x - _799) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _843) + _799;
    float _852 = ((((cbMtdParam._m0[10u].y - _800) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _843) + _800;
    float _853 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _801)) * _843) + _801;
    vec4 _879 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _881 = _879.x;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _881) * _480) + _881;
    float _915 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _898) * _553) + _898;
    float _919 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _915) * cbMtdParam._m0[19u].z) + _915;
    float _921 = _919 - (_919 * _790);
    float _923 = _921 - (_921 * _843);
    float _928 = (((_604.z - _684) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _684;
    float _932 = ((_712.z - _928) * cbMtdParam._m0[19u].w) + _928;
    vec4 _946 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _953 = (_946.x * 2.0) + (-1.0);
    float _954 = (_946.y * 2.0) + (-1.0);
    float _955 = dot(vec2(_953, _954), vec2(_953, _954));
    float _4005 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _963 = ((_946.z - _932) * _790) + _932;
    float _966 = ((cbMtdParam._m0[23u].x - _963) * _843) + _963;
    vec4 _987 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _993 = (_987.x * 2.0) + (-1.0);
    float _994 = (_987.y * 2.0) + (-1.0);
    float _995 = dot(vec2(_993, _994), vec2(_993, _994));
    float _4016 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1010 = ((sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) - _694) * _792) + _694;
    float _1013 = (((_953 - _724) * _790) + _724) + (cbMtdParam._m0[21u].x * _724);
    float _1014 = (((_954 - _725) * _791) + _725) + (cbMtdParam._m0[21u].x * _725);
    float _1025 = (((_993 - _1013) + (_1013 * cbMtdParam._m0[22u].z)) * _843) + _1013;
    float _1026 = (((_994 - _1014) + (_1014 * cbMtdParam._m0[22u].z)) * _843) + _1014;
    float _1027 = (_843 * (sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _1010)) + _1010;
    float _1029 = cbMtdParam._m0[22u].x + _712.w;
    float _1032 = fma(_1027, _258, fma(_1026, _265, _1025 * _251));
    float _1035 = fma(_1027, _259, fma(_1026, _266, _1025 * _252));
    float _1038 = fma(_1027, _260, fma(_1026, _267, _1025 * _253));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _4027 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _1046 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4049 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4060 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4071 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4082 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _1051 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1065 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1115 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1105);
    float _1116 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1105);
    float _1117 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1105);
    float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
    float _1122 = _1115 * _1121;
    float _1123 = _1116 * _1121;
    float _1124 = _1117 * _1121;
    float _1130 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1131 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1149 = fma(_1045, cbSceneParam._m0[5u].z, fma(_1044, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1043));
    float _1152 = fma(_1045, cbSceneParam._m0[6u].z, fma(_1044, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1043));
    float _1155 = fma(_1045, cbSceneParam._m0[7u].z, fma(_1044, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1043));
    uint _1169 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1175 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1169].x;
    float _1176 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1169].y;
    float _1177 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_1169].z;
    float _4093 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1181 = 1.0 - _1051;
    float _1182 = _1178 * _1181;
    float _1183 = _1179 * _1181;
    float _1184 = _1180 * _1181;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1051;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1051;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1051;
    float _1192 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    vec4 _1204 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1130, cbSceneParam._m0[86u].y * _1131));
    float _1208 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _1204.x;
    float _1209 = dot(vec3(_1043, _1044, _1045), vec3(_1122, _1123, _1124));
    float _1212 = _1209 * 2.0;
    float _1216 = (_1212 * _1043) - _1122;
    float _1217 = (_1212 * _1044) - _1123;
    float _1218 = (_1212 * _1045) - _1124;
    float _1222 = abs(dot(vec3(_1122, _1123, _1124), vec3(_1043, _1044, _1045)));
    float _4126 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1224 = sqrt(_1046);
    float _1237 = exp2((_1224 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1224 * 3.0));
    float _1243 = (1.0 - _1237) * ((_1224 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1244 = _1237 * _1224;
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1581;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1306 = fma(_1280, cbModelParam._m0[26u].z, fma(_1276, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272));
        float _1310 = fma(_1280, cbModelParam._m0[27u].z, fma(_1276, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272));
        float _1314 = fma(_1280, cbModelParam._m0[28u].z, fma(_1276, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272));
        float _1339 = _1272 + _1043;
        float _1340 = _1276 + _1044;
        float _1341 = _1280 + _1045;
        float _1351 = fma(_1341, cbModelParam._m0[26u].z, fma(_1340, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1339)) - _1306;
        float _1352 = fma(_1341, cbModelParam._m0[27u].z, fma(_1340, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1339)) - _1310;
        float _1353 = fma(_1341, cbModelParam._m0[28u].z, fma(_1340, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1339)) - _1314;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1306 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1310 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[34u].z) + ((((((_1314 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1409 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1375.x + (-0.5));
        float _1411 = _1409 * (_1375.y + (-0.5));
        float _1412 = _1409 * (_1375.z + (-0.5));
        float _1419 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1382.x + (-0.5));
        float _1421 = _1419 * (_1382.y + (-0.5));
        float _1422 = _1419 * (_1382.z + (-0.5));
        float _1429 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1389.x + (-0.5));
        float _1431 = _1429 * (_1389.y + (-0.5));
        float _1432 = _1429 * (_1389.z + (-0.5));
        float _1439 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1396.x + (-0.5));
        float _1441 = _1439 * (_1396.y + (-0.5));
        float _1442 = _1439 * (_1396.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1463 = (dot(vec3(_1043, _1044, _1045), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1473 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4174 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1475 + 1.0))) + _1480) * _1443;
        float _1490 = _1411 * 0.5;
        float _1491 = _1421 * 0.5;
        float _1492 = _1431 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_1043, _1044, _1045), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4207 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1517 + 1.0))) + _1522) * _1444;
        float _1532 = _1412 * 0.5;
        float _1533 = _1422 * 0.5;
        float _1534 = _1432 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1043, _1044, _1045), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4240 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1559 + 1.0))) + _1564) * _1445;
        _1581 = _1412;
        _1583 = _1411;
        _1584 = _1410;
        _1585 = _1422;
        _1586 = _1421;
        _1587 = _1420;
        _1588 = _1432;
        _1589 = _1431;
        _1590 = _1430;
        _1591 = _1445;
        _1592 = _1444;
        _1593 = _1443;
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1582;
        _1583 = _1582;
        _1584 = _1582;
        _1585 = _1582;
        _1586 = _1582;
        _1587 = _1582;
        _1588 = _1582;
        _1589 = _1582;
        _1590 = _1582;
        _1591 = _1582;
        _1592 = _1582;
        _1593 = _1582;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1620 = fma(_1280, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272));
        float _1624 = fma(_1280, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272));
        float _1628 = fma(_1280, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272));
        float _1651 = _1272 + _1043;
        float _1652 = _1276 + _1044;
        float _1653 = _1280 + _1045;
        float _1663 = fma(_1653, cbModelParam._m0[30u].z, fma(_1652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1651)) - _1620;
        float _1664 = fma(_1653, cbModelParam._m0[31u].z, fma(_1652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1651)) - _1624;
        float _1665 = fma(_1653, cbModelParam._m0[32u].z, fma(_1652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1651)) - _1628;
        float _1669 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
        float _1682 = ((_1669 * _1663) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1620 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1669 * _1664) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1624 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1684 = ((_1669 * _1665) / cbModelParam._m0[35u].z) + ((((((_1628 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        float _1719 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1686.x + (-0.5));
        float _1721 = _1719 * (_1686.y + (-0.5));
        float _1722 = _1719 * (_1686.z + (-0.5));
        float _1729 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1693.x + (-0.5));
        float _1731 = _1729 * (_1693.y + (-0.5));
        float _1732 = _1729 * (_1693.z + (-0.5));
        float _1739 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1700.x + (-0.5));
        float _1741 = _1739 * (_1700.y + (-0.5));
        float _1742 = _1739 * (_1700.z + (-0.5));
        float _1749 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1707.x + (-0.5));
        float _1751 = _1749 * (_1707.y + (-0.5));
        float _1752 = _1749 * (_1707.z + (-0.5));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = _1720 * 0.5;
        float _1757 = _1730 * 0.5;
        float _1758 = _1740 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_1043, _1044, _1045), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4303 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1783 + 1.0))) + _1788) * _1753;
        float _1798 = _1721 * 0.5;
        float _1799 = _1731 * 0.5;
        float _1800 = _1741 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_1043, _1044, _1045), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4336 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1825 + 1.0))) + _1830) * _1754;
        float _1840 = _1722 * 0.5;
        float _1841 = _1732 * 0.5;
        float _1842 = _1742 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1043, _1044, _1045), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4369 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1867 + 1.0))) + _1872) * _1755;
        _1889 = _1722;
        _1890 = _1721;
        _1891 = _1720;
        _1892 = _1732;
        _1893 = _1731;
        _1894 = _1730;
        _1895 = _1742;
        _1896 = _1741;
        _1897 = _1740;
        _1898 = _1755;
        _1899 = _1754;
        _1900 = _1753;
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
    }
    else
    {
        _1889 = _1582;
        _1890 = _1582;
        _1891 = _1582;
        _1892 = _1582;
        _1893 = _1582;
        _1894 = _1582;
        _1895 = _1582;
        _1896 = _1582;
        _1897 = _1582;
        _1898 = _1582;
        _1899 = _1582;
        _1900 = _1582;
        _1901 = 0.0;
        _1902 = 0.0;
        _1903 = 0.0;
    }
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1594)) + _1594;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1595)) + _1595;
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1596)) + _1596;
    float _1936 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1913));
    float _1957 = _1216 * 0.5;
    float _1958 = _1217 * 0.5;
    float _1959 = _1218 * 0.5;
    float _1960 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _1963 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1966 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _2000;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1973 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1581, _1585, _1588, _1591));
        float _1977 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1583, _1586, _1589, _1592));
        float _1981 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1584, _1587, _1590, _1593));
        float _1988 = dot(vec4(cbModelParam._m0[39u]), vec4(_1957, _1958, _1959, 1.0));
        _2000 = dot(vec3(isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1988) ? 0.0 : (isnan(0.0) ? _1988 : max(0.0, _1988))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2000 = 1.0;
    }
    float _2011;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2002 = dot(vec4(cbModelParam._m0[40u]), vec4(_1957, _1958, _1959, 1.0));
        _2011 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2002) ? 0.0 : (isnan(0.0) ? _2002 : max(0.0, _2002))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2011 = 1.0;
    }
    float _2015 = (_2011 * cbModelParam._m0[1u].x) + (_2000 * (1.0 - cbModelParam._m0[1u].x));
    float _2025 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1046);
    float _2026 = isnan(_2025) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2025 : min(cbModelParam._m0[25u].z, _2025));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2074 = fma(_1280, cbModelParam._m0[13u].z, fma(_1276, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1272)) + cbModelParam._m0[13u].w;
        float _2078 = fma(_1280, cbModelParam._m0[14u].z, fma(_1276, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1272)) + cbModelParam._m0[14u].w;
        float _2082 = fma(_1280, cbModelParam._m0[15u].z, fma(_1276, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1272)) + cbModelParam._m0[15u].w;
        float _2085 = fma(_1218, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216));
        float _2088 = fma(_1218, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216));
        float _2091 = fma(_1218, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216));
        float _2119;
        if (_2085 > 0.0)
        {
            _2119 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2119 = frontier_phi_14_12_ladder;
        }
        float _2322;
        if (_2088 > 0.0)
        {
            _2322 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2322 = frontier_phi_23_19_ladder;
        }
        float _2576;
        if (_2091 > 0.0)
        {
            _2576 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2576 = frontier_phi_35_30_ladder;
        }
        float _2578 = isnan(_2322) ? _2119 : (isnan(_2119) ? _2322 : min(_2119, _2322));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _2085) + _2074;
        float _2584 = (_2579 * _2088) + _2078;
        float _2585 = (_2579 * _2091) + _2082;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2586;
        float _2590 = _2586 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 > _2590) || ((_2584 < _2588) || ((_2583 < _2588) || (_2583 > _2590))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2585, cbModelParam._m0[9u].z, fma(_2584, cbModelParam._m0[9u].y, _2583 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2585, cbModelParam._m0[10u].z, fma(_2584, cbModelParam._m0[10u].y, _2583 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2585, cbModelParam._m0[11u].z, fma(_2584, cbModelParam._m0[11u].y, _2583 * cbModelParam._m0[11u].x))), _2026);
            frontier_phi_13_35_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _2107 = frontier_phi_13_35_ladder_2;
        _2109 = frontier_phi_13_35_ladder_1;
        _2111 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1216, _1217, _1218), _2026);
        _2107 = _2095.x * cbModelParam._m0[1u].y;
        _2109 = _2095.y * cbModelParam._m0[1u].y;
        _2111 = _2095.z * cbModelParam._m0[1u].y;
    }
    float _2115 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1046);
    float _2116 = isnan(_2115) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2115 : min(cbModelParam._m0[25u].w, _2115));
    float _2206;
    float _2208;
    float _2210;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2170 = fma(_1280, cbModelParam._m0[21u].z, fma(_1276, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1272)) + cbModelParam._m0[21u].w;
        float _2174 = fma(_1280, cbModelParam._m0[22u].z, fma(_1276, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1272)) + cbModelParam._m0[22u].w;
        float _2178 = fma(_1280, cbModelParam._m0[23u].z, fma(_1276, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1272)) + cbModelParam._m0[23u].w;
        float _2181 = fma(_1218, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216));
        float _2184 = fma(_1218, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216));
        float _2187 = fma(_1218, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216));
        float _2327;
        if (_2181 > 0.0)
        {
            _2327 = abs((1.0 - _2170) / _2181);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2170 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2327 = frontier_phi_25_21_ladder;
        }
        float _2603;
        if (_2184 > 0.0)
        {
            _2603 = abs((1.0 - _2174) / _2184);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2174 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2603 = frontier_phi_37_32_ladder;
        }
        float _2816;
        if (_2187 > 0.0)
        {
            _2816 = abs((1.0 - _2178) / _2187);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2187 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2178 + 1.0) / _2187);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2816 = frontier_phi_46_43_ladder;
        }
        float _2818 = isnan(_2603) ? _2327 : (isnan(_2327) ? _2603 : min(_2327, _2603));
        float _2819 = isnan(_2816) ? _2818 : (isnan(_2818) ? _2816 : min(_2818, _2816));
        float _2823 = (_2819 * _2181) + _2170;
        float _2824 = (_2819 * _2184) + _2174;
        float _2825 = (_2819 * _2187) + _2178;
        float _2826 = _2819 * 9.9999997473787516355514526367188e-05;
        float _2827 = (-1.0) - _2826;
        float _2829 = _2826 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2825 > _2829) || ((_2825 < _2827) || ((_2824 > _2829) || ((_2824 < _2827) || ((_2823 < _2827) || (_2823 > _2829))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2825, cbModelParam._m0[17u].z, fma(_2824, cbModelParam._m0[17u].y, _2823 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2825, cbModelParam._m0[18u].z, fma(_2824, cbModelParam._m0[18u].y, _2823 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2825, cbModelParam._m0[19u].z, fma(_2824, cbModelParam._m0[19u].y, _2823 * cbModelParam._m0[19u].x))), _2116);
            frontier_phi_22_46_ladder = _3024.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3024.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3024.x * cbModelParam._m0[1u].z;
        }
        _2206 = frontier_phi_22_46_ladder_2;
        _2208 = frontier_phi_22_46_ladder_1;
        _2210 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2190 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1216, _1217, _1218), _2116);
        _2206 = _2190.x * cbModelParam._m0[1u].z;
        _2208 = _2190.y * cbModelParam._m0[1u].z;
        _2210 = _2190.z * cbModelParam._m0[1u].z;
    }
    float _2223 = (((_1243 * _1192) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2206 - _2107)) + _2107);
    float _2225 = (((_1243 * _1194) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2208 - _2109)) + _2109);
    float _2227 = (((_1243 * _1195) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2210 - _2111)) + _2111);
    float _2230 = fma(_2227, cbSceneParam._m0[89u].z, fma(_2225, cbSceneParam._m0[89u].y, _2223 * cbSceneParam._m0[89u].x));
    float _2233 = fma(_2227, cbSceneParam._m0[90u].z, fma(_2225, cbSceneParam._m0[90u].y, _2223 * cbSceneParam._m0[90u].x));
    float _2236 = fma(_2227, cbSceneParam._m0[91u].z, fma(_2225, cbSceneParam._m0[91u].y, _2223 * cbSceneParam._m0[91u].x));
    uvec4 _2246 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2248 = _2246.x * 14u;
    uint _2249 = _2248 + 13u;
    float _2256 = _1208 + (-1.0);
    float _2261 = (cbLight._m0[_2249].x * _2256) + 1.0;
    float _2262 = (cbLight._m0[_2249].y * _2256) + 1.0;
    float _2263 = (cbLight._m0[_2249].z * _2256) + 1.0;
    float _2264 = (cbLight._m0[_2249].w * _2256) + 1.0;
    uint _2265 = _2248 + 5u;
    float _2271 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    uint _2275 = _2248 + 4u;
    float _2281 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2285 = _2248 | 1u;
    float _2296 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_1043, _1044, _1045));
    float _2299 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_1043, _1044, _1045));
    float _4505 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _4516 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2304 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2306 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 0.3183098733425140380859375;
    float _2313 = ((cbLight._m0[_2265].x * _2271) * _2306) + ((cbLight._m0[_2275].x * _2281) * _2304);
    float _2314 = ((_2271 * cbLight._m0[_2265].y) * _2306) + ((_2281 * cbLight._m0[_2275].y) * _2304);
    float _2315 = ((_2271 * cbLight._m0[_2265].z) * _2306) + ((_2281 * cbLight._m0[_2275].z) * _2304);
    uvec4 _2319 = floatBitsToUint(cbLight._m0[_2248 + 12u]);
    bool _2321 = _2319.x == 0u;
    float _2332;
    float _2334;
    float _2336;
    if (_2321)
    {
        _2332 = _2313;
        _2334 = _2314;
        _2336 = _2315;
    }
    else
    {
        uint _2340 = _2248 + 6u;
        float _2356 = (dot(vec3(cbLight._m0[_2248 + 2u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4527 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2359 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2332 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2313;
        _2334 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2314;
        _2336 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2315;
    }
    bool _2339 = _2319.y == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2339)
    {
        _2377 = _2332;
        _2379 = _2334;
        _2381 = _2336;
    }
    else
    {
        uint _2547 = _2248 + 7u;
        float _2563 = (dot(vec3(cbLight._m0[_2248 + 3u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4543 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2566 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2377 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2332;
        _2379 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2334;
        _2381 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2336;
    }
    uint _2384 = _2248 + 8u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _1046) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2248].x + _1122;
    float _2400 = cbLight._m0[_2248].y + _1123;
    float _2401 = cbLight._m0[_2248].z + _1124;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2248].xyz));
    float _4559 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _4570 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _2413 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2414 = dot(vec3(_1043, _1044, _1045), vec3(_2406, _2407, _2408));
    float _4581 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2406, _2407, _2408));
    float _4592 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2398 * _2398;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
    float _2435 = 0.959999978542327880859375 - _1189;
    float _2437 = 0.959999978542327880859375 - _1190;
    float _2438 = 0.959999978542327880859375 - _1191;
    float _2445 = 1.0 - _2398;
    float _2456 = (0.5 / (((_2413 * ((_2412 * _2445) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2445) + _2398) * _2412))) * _2412;
    float _4603 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2458 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    uint _2469 = _2248 + 9u;
    float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _1046) * 0.949999988079071044921875);
    float _2481 = _2480 * _2480;
    float _2482 = cbLight._m0[_2285].x + _1122;
    float _2483 = cbLight._m0[_2285].y + _1123;
    float _2484 = cbLight._m0[_2285].z + _1124;
    float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
    float _2489 = _2488 * _2482;
    float _2490 = _2488 * _2483;
    float _2491 = _2488 * _2484;
    float _2492 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2285].xyz));
    float _4614 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2496 = dot(vec3(_1043, _1044, _1045), vec3(_2489, _2490, _2491));
    float _4625 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2500 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2489, _2490, _2491));
    float _4636 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = _2481 * _2481;
    float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
    float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2522 = 1.0 - _2481;
    float _2532 = (0.5 / (((_2413 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2522) + _2481) * _2495))) * _2495;
    float _4647 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
    float _2544 = (((((_2515 * _2435) + _1192) * cbLight._m0[_2469].x) * _2534) * _2271) + (((((_2434 * _2435) + _1192) * cbLight._m0[_2384].x) * _2458) * _2281);
    float _2545 = (((((_2515 * _2437) + _1194) * cbLight._m0[_2469].y) * _2534) * _2271) + (((((_2434 * _2437) + _1194) * cbLight._m0[_2384].y) * _2458) * _2281);
    float _2546 = (((((_2515 * _2438) + _1195) * cbLight._m0[_2469].z) * _2534) * _2271) + (((((_2434 * _2438) + _1195) * cbLight._m0[_2384].z) * _2458) * _2281);
    float _2608;
    float _2610;
    float _2612;
    if (_2321)
    {
        _2608 = _2544;
        _2610 = _2545;
        _2612 = _2546;
    }
    else
    {
        uint _2614 = _2248 + 2u;
        uint _2618 = _2248 + 10u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _1046) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _1122;
        float _2635 = cbLight._m0[_2614].y + _1123;
        float _2636 = cbLight._m0[_2614].z + _1124;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2614].xyz));
        float _4658 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2648 = dot(vec3(_1043, _1044, _1045), vec3(_2641, _2642, _2643));
        float _4669 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4680 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2674 = 1.0 - _2633;
        float _2684 = (0.5 / (((_2413 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2674) + _2633) * _2647))) * _2647;
        float _4691 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2608 = (((((_2667 * _2435) + _1192) * cbLight._m0[_2618].x) * _2686) * _2687) + _2544;
        _2610 = (((((_2667 * _2437) + _1194) * cbLight._m0[_2618].y) * _2686) * _2687) + _2545;
        _2612 = (((((_2667 * _2438) + _1195) * cbLight._m0[_2618].z) * _2686) * _2687) + _2546;
    }
    float _2722;
    float _2724;
    float _2726;
    if (_2339)
    {
        _2722 = _2608;
        _2724 = _2610;
        _2726 = _2612;
    }
    else
    {
        uint _2733 = _2248 + 3u;
        uint _2737 = _2248 + 11u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _1046) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _1122;
        float _2754 = cbLight._m0[_2733].y + _1123;
        float _2755 = cbLight._m0[_2733].z + _1124;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2733].xyz));
        float _4707 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2767 = dot(vec3(_1043, _1044, _1045), vec3(_2760, _2761, _2762));
        float _4718 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4729 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
        float _2793 = 1.0 - _2752;
        float _2803 = (0.5 / (((_2413 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2793) + _2752) * _2766))) * _2766;
        float _4740 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2722 = (((((_2786 * _2435) + _1192) * cbLight._m0[_2737].x) * _2805) * _2806) + _2608;
        _2724 = (((((_2786 * _2437) + _1194) * cbLight._m0[_2737].y) * _2805) * _2806) + _2610;
        _2726 = (((((_2786 * _2438) + _1195) * cbLight._m0[_2737].z) * _2805) * _2806) + _2612;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2246.y == 0u)
    {
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2882 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2881;
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2881;
        float _2884 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2881;
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1131) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _1130) / _2897)));
        float _2918 = (log2(_2884 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
        }
        else
        {
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            uint _3179 = 0u;
            uint _3188;
            bool _3189;
            for (;;)
            {
                _3188 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                _3189 = _3188 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3189)
                {
                    frontier_phi_61_pred = _3173;
                    frontier_phi_61_pred_1 = _3178;
                    frontier_phi_61_pred_2 = _3177;
                    frontier_phi_61_pred_3 = _3176;
                    frontier_phi_61_pred_4 = _3175;
                    frontier_phi_61_pred_5 = _3174;
                }
                else
                {
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    uint _3303;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3188;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    for (;;)
                    {
                        uint _3307 = uint(findLSB(_3303)) + (_3179 << 5u);
                        uint _3304 = (_3303 + 4294967295u) & _3303;
                        uint _3309 = _3307 * 48u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3329 = (_3307 * 48u) + 4u;
                        vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3348 = (_3307 * 48u) + 8u;
                        vec3 _3359 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x));
                        float _3363 = _3323.x - _2882;
                        float _3364 = _3323.y - _2883;
                        float _3365 = _3323.z - _2884;
                        float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                        float _3369 = inversesqrt(_3366);
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3373 = dot(vec3(_1149, _1152, _1155), vec3(_3370, _3371, _3372));
                        float _3378 = 1.0 - (_3366 * _3323.w);
                        float _4766 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3380 = sqrt(_3366) * _3342.w;
                        float _3383 = 1.39999997615814208984375 / (_3380 + 1.39999997615814208984375);
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3373) + _3384;
                        float _3390 = _3380 * _3380;
                        float _3394 = ((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3379) / ((_3390 * 0.699999988079071044921875) + 1.0);
                        float _3398 = (-0.0) - _2882;
                        float _3399 = (-0.0) - _2883;
                        float _3400 = (-0.0) - _2884;
                        float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3415 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                        float _3416 = 1.0 - _1224;
                        float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                        float _3424 = _3423 * _3423;
                        float _3425 = _3424 * _3424;
                        float _3426 = _3405 + _3370;
                        float _3427 = _3406 + _3371;
                        float _3428 = _3407 + _3372;
                        float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                        float _3436 = dot(vec3(_1149, _1152, _1155), vec3(_3405, _3406, _3407));
                        float _4782 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3440 = dot(vec3(_1149, _1152, _1155), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                        float _4793 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                        float _3448 = _3383 * _3424;
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3373) + _3449;
                        float _4804 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3454 = 1.0 - _3424;
                        float _3464 = (0.5 / (((_3453 * ((_3439 * _3454) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3424) * _3439))) * _3453;
                        float _4815 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3475 = (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) / ((_3447 * _3447) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125))) * _3379;
                        _3232 = (_3394 * _3342.x) + _3300;
                        _3233 = (_3394 * _3342.y) + _3301;
                        _3234 = (_3394 * _3342.z) + _3302;
                        _3229 = (_3475 * _3359.x) + _3297;
                        _3230 = (_3475 * _3359.y) + _3298;
                        _3231 = (_3475 * _3359.z) + _3299;
                        if (_3304 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3304;
                        }
                    }
                    frontier_phi_61_pred = _3229;
                    frontier_phi_61_pred_1 = _3234;
                    frontier_phi_61_pred_2 = _3233;
                    frontier_phi_61_pred_3 = _3232;
                    frontier_phi_61_pred_4 = _3231;
                    frontier_phi_61_pred_5 = _3230;
                }
                _3030 = frontier_phi_61_pred;
                _3040 = frontier_phi_61_pred_1;
                _3038 = frontier_phi_61_pred_2;
                _3036 = frontier_phi_61_pred_3;
                _3034 = frontier_phi_61_pred_4;
                _3032 = frontier_phi_61_pred_5;
                uint _3180 = _3179 + 1u;
                if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3173 = _3030;
                    _3174 = _3032;
                    _3175 = _3034;
                    _3176 = _3036;
                    _3177 = _3038;
                    _3178 = _3040;
                    _3179 = _3180;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
        }
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.z;
        uint _3046 = (_3044 >> 8u) & 15u;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((4294967295u << _3046) & _2928) == 0u)
        {
            _3141 = _3029;
            _3143 = _3031;
            _3145 = _3033;
            _3147 = _3035;
            _3149 = _3037;
            _3151 = _3039;
        }
        else
        {
            float _3166 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
            float _3167 = _3166 * _2882;
            float _3168 = _3166 * _2883;
            float _3169 = _3166 * _2884;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3046 < ((_3044 >> 12u) & 15u))
            {
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3280 = _3029;
                float _3281 = _3031;
                float _3282 = _3033;
                float _3283 = _3035;
                float _3284 = _3037;
                float _3285 = _3039;
                uint _3286 = _3046;
                uint _3295;
                bool _3296;
                for (;;)
                {
                    _3295 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                    _3296 = _3295 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3296)
                    {
                        frontier_phi_67_pred = _3283;
                        frontier_phi_67_pred_1 = _3284;
                        frontier_phi_67_pred_2 = _3285;
                        frontier_phi_67_pred_3 = _3282;
                        frontier_phi_67_pred_4 = _3281;
                        frontier_phi_67_pred_5 = _3280;
                    }
                    else
                    {
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        float _3498 = _3285;
                        uint _3499 = _3295;
                        uint _3500;
                        vec4 _3525;
                        float _3526;
                        vec4 _3541;
                        vec3 _3553;
                        vec4 _3568;
                        vec4 _3583;
                        float _3629;
                        bool _3630;
                        for (;;)
                        {
                            uint _3510 = ((_3286 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3499));
                            _3500 = (_3499 + 4294967295u) & _3499;
                            uint _3512 = _3510 * 40u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3526 = _3525.w;
                            uint _3528 = (_3510 * 40u) + 4u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3510 * 40u) + 8u;
                            _3553 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x));
                            uint _3555 = (_3510 * 40u) + 16u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3510 * 40u) + 20u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3510 * 40u) + 24u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3604 = (_3510 * 40u) + 28u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3629 = fma(_2884, _3617.z, fma(_2883, _3617.y, _3617.x * _2882)) + _3617.w;
                            _3630 = !((fma(_2884, _3598.z, fma(_2883, _3598.y, _3598.x * _2882)) + _3598.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3630)
                            {
                                float _3657 = _3525.x - _2882;
                                float _3658 = _3525.y - _2883;
                                float _3659 = _3525.z - _2884;
                                float _3660 = dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659));
                                float _3663 = inversesqrt(_3660);
                                float _3664 = _3663 * _3657;
                                float _3665 = _3663 * _3658;
                                float _3666 = _3663 * _3659;
                                float _3670 = 1.0 - (_3660 / (_3526 * _3526));
                                float _4826 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3675 = sqrt(_3660) * _3541.w;
                                float _3677 = 1.39999997615814208984375 / (_3675 + 1.39999997615814208984375);
                                float _3678 = _3677 * _3677;
                                float _3681 = ((1.0 - _3678) * dot(vec3(_3664, _3665, _3666), vec3(_1149, _1152, _1155))) + _3678;
                                float _3684 = _3675 * _3675;
                                float _3688 = (fma(_2884, _3568.z, fma(_2883, _3568.y, _3568.x * _2882)) + _3568.w) / _3629;
                                float _3689 = (fma(_2884, _3583.z, fma(_2883, _3583.y, _3583.x * _2882)) + _3583.w) / _3629;
                                float _3693 = 1.0 - dot(vec2(_3688, _3689), vec2(_3688, _3689));
                                float _4842 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3695 = _3694 * (((isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))) * _3671) / ((_3684 * 0.699999988079071044921875) + 1.0));
                                float _3707 = exp2(log2(1.0 / ((_3684 * 3.5) + 5.0)) * 0.25);
                                float _3708 = 1.0 - _1224;
                                float _3715 = sqrt(1.0 - ((1.0 - (_3708 * _3708)) * (1.0 - (_3707 * _3707))));
                                float _3716 = _3715 * _3715;
                                float _3717 = _3716 * _3716;
                                float _3718 = _3664 - _3167;
                                float _3719 = _3665 - _3168;
                                float _3720 = _3666 - _3169;
                                float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                                float _3728 = dot(vec3(_1149, _1152, _1155), vec3((-0.0) - _3167, (-0.0) - _3168, (-0.0) - _3169));
                                float _4853 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3732 = dot(vec3(_1149, _1152, _1155), vec3(_3724 * _3718, _3724 * _3719, _3724 * _3720));
                                float _4864 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3739 = ((_3735 * _3735) * (_3717 + (-1.0))) + 1.0;
                                float _3740 = _3677 * _3716;
                                float _3741 = _3740 * _3740;
                                float _3747 = ((1.0 - _3741) * dot(vec3(_1149, _1152, _1155), vec3(_3664, _3665, _3666))) + _3741;
                                float _4875 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3749 = 1.0 - _3716;
                                float _3759 = (0.5 / (((_3748 * ((_3731 * _3749) + _3716)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3716) * _3731))) * _3748;
                                float _4886 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3769 = (_3694 * _3671) * (((_3717 * 3.1415927410125732421875) * (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) / ((_3739 * _3739) * ((_3684 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3769 * _3553.x;
                                frontier_phi_73_pred_1 = _3769 * _3553.y;
                                frontier_phi_73_pred_2 = _3695 * _3541.z;
                                frontier_phi_73_pred_3 = _3695 * _3541.y;
                                frontier_phi_73_pred_4 = _3695 * _3541.x;
                                frontier_phi_73_pred_5 = _3769 * _3553.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3773 = frontier_phi_73_pred;
                            _3774 = frontier_phi_73_pred_1;
                            _3778 = frontier_phi_73_pred_2;
                            _3777 = frontier_phi_73_pred_3;
                            _3776 = frontier_phi_73_pred_4;
                            _3775 = frontier_phi_73_pred_5;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            if (_3500 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3500;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3483;
                        frontier_phi_67_pred_1 = _3484;
                        frontier_phi_67_pred_2 = _3485;
                        frontier_phi_67_pred_3 = _3482;
                        frontier_phi_67_pred_4 = _3481;
                        frontier_phi_67_pred_5 = _3480;
                    }
                    _3148 = frontier_phi_67_pred;
                    _3150 = frontier_phi_67_pred_1;
                    _3152 = frontier_phi_67_pred_2;
                    _3146 = frontier_phi_67_pred_3;
                    _3144 = frontier_phi_67_pred_4;
                    _3142 = frontier_phi_67_pred_5;
                    uint _3287 = _3286 + 1u;
                    if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3280 = _3142;
                        _3281 = _3144;
                        _3282 = _3146;
                        _3283 = _3148;
                        _3284 = _3150;
                        _3285 = _3152;
                        _3286 = _3287;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3150;
                frontier_phi_55_56_ladder_1 = _3152;
                frontier_phi_55_56_ladder_2 = _3148;
                frontier_phi_55_56_ladder_3 = _3146;
                frontier_phi_55_56_ladder_4 = _3144;
                frontier_phi_55_56_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_55_56_ladder = _3037;
                frontier_phi_55_56_ladder_1 = _3039;
                frontier_phi_55_56_ladder_2 = _3035;
                frontier_phi_55_56_ladder_3 = _3033;
                frontier_phi_55_56_ladder_4 = _3031;
                frontier_phi_55_56_ladder_5 = _3029;
            }
            _3141 = frontier_phi_55_56_ladder_5;
            _3143 = frontier_phi_55_56_ladder_4;
            _3145 = frontier_phi_55_56_ladder_3;
            _3147 = frontier_phi_55_56_ladder_2;
            _3149 = frontier_phi_55_56_ladder;
            _3151 = frontier_phi_55_56_ladder_1;
        }
        float _3156 = isnan(1.0) ? _1208 : (isnan(_1208) ? 1.0 : min(_1208, 1.0));
        _2941 = (_3156 * _3147) + _2377;
        _2943 = (_3156 * _3149) + _2379;
        _2945 = (_3156 * _3151) + _2381;
        _2947 = ((_3141 * _1192) * _3156) + _2722;
        _2949 = ((_3143 * _1194) * _3156) + _2724;
        _2951 = ((_3145 * _1195) * _3156) + _2726;
    }
    else
    {
        _2941 = _2377;
        _2943 = _2379;
        _2945 = _2381;
        _2947 = _2722;
        _2949 = _2724;
        _2951 = _2726;
    }
    float _4902 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _4913 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _4924 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    uint _2971 = _289 + 6u;
    float _2979 = _1130 / cbSceneParam._m0[86u].x;
    float _2980 = _1131 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _1065 : (isnan(_1065) ? cbSceneParam._m0[77u].w : min(_1065, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_1065 > cbSceneParam._m0[78u].w)
    {
        float _3054 = isnan(_1065) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1065 : min(cbSceneParam._m0[80u].w, _1065));
        float _3055 = _3054 / _1065;
        float _3066 = _3055 * _1115;
        float _3067 = _1116 * _3055;
        float _3068 = (-0.0) - _3067;
        float _3069 = _3055 * _1117;
        float _3071 = (cbSceneParam._m0[77u].w * _3068) / _3054;
        float _3072 = _3071 + cbSceneParam._m0[79u].w;
        float _3073 = cbSceneParam._m0[79u].w - _3067;
        float _3079 = sqrt(((_3066 * _3066) + (_3067 * _3067)) + (_3069 * _3069));
        float _3082 = (1.0 - (cbSceneParam._m0[77u].w / _3054)) * _3079;
        float _3087 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3089 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3242;
        if (abs((_3068 - _3071) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3242 = ((((_3072 > 0.0) ? exp2(_3087 * _3072) : (2.0 - exp2(_3089 * _3072))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3082;
        }
        else
        {
            float _3202 = 1.0 / cbSceneParam._m0[80u].x;
            float _3203 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : max(_3072, _3073));
            float _3204 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : min(_3072, _3073));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            _3242 = ((abs(_3079 / _3068) * cbSceneParam._m0[80u].y) * ((((_3213 - _3214) * 2.0) - ((exp2(_3087 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0)))) - exp2(_3087 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))))) * _3202)) - ((exp2(_3089 * _3213) - exp2(_3089 * _3214)) * _3202))) + (_3082 * cbSceneParam._m0[80u].z);
        }
        vec4 _3244 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3253 = exp2((_3242 * (-1.44269502162933349609375)) * (1.0 - _3244.w));
        float _3254 = log2(_3253);
        float _3270 = log2(_2999);
        _3091 = (exp2(_3270 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].x)) * _3244.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3093 = (exp2(_3270 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].y)) * _3244.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3095 = (exp2(_3270 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].z)) * _3244.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3097 = _3253 * _2999;
    }
    else
    {
        _3091 = _2996;
        _3093 = _2997;
        _3095 = _2998;
        _3097 = _2999;
    }
    float _3109 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3110 = _3109 == 3.0;
    float _3111 = log2(_3097);
    float _3118 = exp2(_3111 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2941 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1208))) + ((_2947 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3119 = exp2(_3111 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2943 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1208))) + ((_2949 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3120 = exp2(_3111 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2945 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1208))) + ((_2951 + ((isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3129 = (_3109 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3129 * (_3110 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3091)));
    SV_Target.y = _3129 * (_3110 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3093)));
    SV_Target.z = _3129 * (_3110 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3095)));
    SV_Target.w = cbInstanceData._m0[_2971].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2971].w;
}


