#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1499;
float _3878;
float _3879;
float _3880;
float _3881;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3890 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _422 = (_415 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _423 = (_415 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _424 = (_415 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3901 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _543 = ((_515.x - _534) * _415) + _534;
    float _544 = ((_515.y - _535) * _415) + _535;
    float _545 = ((_515.z - _536) * _415) + _536;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _570 = ((_557.z - _545) * _488) + _545;
    float _573 = ((((_557.x - _543) * _488) + _543) * 2.0) + (-1.0);
    float _575 = ((((_557.y - _544) * _488) + _544) * 2.0) + (-1.0);
    float _576 = dot(vec2(_573, _575), vec2(_573, _575));
    float _3912 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _607 = (((_595.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _573;
    float _608 = (((_595.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _575;
    float _611 = fma(_581, _249, fma(_608, _256, _607 * _242));
    float _614 = fma(_581, _250, fma(_608, _257, _607 * _243));
    float _617 = fma(_581, _251, fma(_608, _258, _607 * _244));
    float _621 = inversesqrt(dot(vec3(_611, _614, _617), vec3(_611, _614, _617)));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _660 = (cbMtdParam._m0[19u].x + dot(vec4(_621 * _611, _621 * _614, _621 * _617, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_650 - _651) * cbMtdParam._m0[24u].z) + _651) * cbMtdParam._m0[21u].z);
    float _3923 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _663 = (-0.0) - cbMtdParam._m0[24u].x;
    float _665 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
    float _673 = _661 - ((_661 * TEXCOORD_8.x) * _666);
    float _674 = _661 - ((_661 * TEXCOORD_8.y) * _666);
    float _675 = _661 - ((_661 * TEXCOORD_8.z) * _666);
    float _682 = (_673 * (cbMtdParam._m0[17u].x - _495)) + _495;
    float _683 = (_674 * (cbMtdParam._m0[17u].y - _496)) + _496;
    float _684 = (_675 * (cbMtdParam._m0[17u].z - _497)) + _497;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _725 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_698 - _699) * cbMtdParam._m0[24u].w) + _699) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3944 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _734 = ((((cbMtdParam._m0[10u].x - _682) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _726) + _682;
    float _735 = ((((cbMtdParam._m0[10u].y - _683) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _726) + _683;
    float _736 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _684)) * _726) + _684;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _764 = _762.x;
    float _782 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _764) * _415) + _764;
    float _799 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _782) * _488) + _782;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _799) * cbMtdParam._m0[19u].z) + _799;
    float _805 = _803 - (_803 * _673);
    float _807 = _805 - (_805 * _726);
    float _811 = (cbMtdParam._m0[19u].w * (_595.z - _570)) + _570;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _832 = (_825.x * 2.0) + (-1.0);
    float _833 = (_825.y * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _3955 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _842 = ((_825.z - _811) * _673) + _811;
    float _845 = ((cbMtdParam._m0[23u].x - _842) * _726) + _842;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _870 = (_864.x * 2.0) + (-1.0);
    float _871 = (_864.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _3966 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _887 = ((sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) - _581) * _675) + _581;
    float _890 = (((_832 - _607) * _673) + _607) + (cbMtdParam._m0[21u].x * _607);
    float _891 = (((_833 - _608) * _674) + _608) + (cbMtdParam._m0[21u].x * _608);
    float _902 = (((_870 - _890) + (_890 * cbMtdParam._m0[22u].z)) * _726) + _890;
    float _903 = (((_871 - _891) + (_891 * cbMtdParam._m0[22u].z)) * _726) + _891;
    float _904 = (_726 * (sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) - _887)) + _887;
    float _906 = cbMtdParam._m0[22u].x + _595.w;
    float _909 = fma(_904, _249, fma(_903, _256, _902 * _242));
    float _912 = fma(_904, _250, fma(_903, _257, _902 * _243));
    float _915 = fma(_904, _251, fma(_903, _258, _902 * _244));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _3977 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _923 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _3999 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4010 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4021 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4032 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _928 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    vec4 _1006 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1008 = _1006.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1180 = sqrt(((_992 * _992) + (_993 * _993)) + (_994 * _994));
        float _1186 = (cbMatDynParam._m0[5u].x * _1180) + cbMatDynParam._m0[5u].y;
        float _4043 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1191 = (cbMatDynParam._m0[5u].z * _1180) + cbMatDynParam._m0[5u].w;
        float _4054 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) - _1187)) + _1187) < ((_1008 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1041 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1044 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1057 = _261 + 9u;
    uint _1058 = _1057 + uint(cbMatDynParam._m0[0u].w);
    float _1064 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1058].x;
    float _1065 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1058].y;
    float _1066 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1058].z;
    float _4065 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1070 = 1.0 - _928;
    float _1071 = _1067 * _1070;
    float _1072 = _1068 * _1070;
    float _1073 = _1069 * _1070;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _928;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _928;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _928;
    float _1081 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    vec4 _1093 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1097 = ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * TEXCOORD_5.w) * _1093.x;
    float _1098 = dot(vec3(_920, _921, _922), vec3(_999, _1000, _1001));
    float _1101 = _1098 * 2.0;
    float _1105 = (_1101 * _920) - _999;
    float _1106 = (_1101 * _921) - _1000;
    float _1107 = (_1101 * _922) - _1001;
    float _1111 = abs(dot(vec3(_999, _1000, _1001), vec3(_920, _921, _922)));
    float _4098 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1113 = sqrt(_923);
    float _1126 = exp2((_1113 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1113 * 3.0));
    float _1132 = (1.0 - _1126) * ((_1113 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1133 = _1126 * _1113;
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1498;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1223 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1227 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1231 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1256 = _1161 + _920;
        float _1257 = _1165 + _921;
        float _1258 = _1169 + _922;
        float _1268 = fma(_1258, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256)) - _1223;
        float _1269 = fma(_1258, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256)) - _1227;
        float _1270 = fma(_1258, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256)) - _1231;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1223 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1227 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[34u].z) + ((((((_1231 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1326 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1292.x + (-0.5));
        float _1328 = _1326 * (_1292.y + (-0.5));
        float _1329 = _1326 * (_1292.z + (-0.5));
        float _1336 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1299.x + (-0.5));
        float _1338 = _1336 * (_1299.y + (-0.5));
        float _1339 = _1336 * (_1299.z + (-0.5));
        float _1346 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1306.x + (-0.5));
        float _1348 = _1346 * (_1306.y + (-0.5));
        float _1349 = _1346 * (_1306.z + (-0.5));
        float _1356 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1313.x + (-0.5));
        float _1358 = _1356 * (_1313.y + (-0.5));
        float _1359 = _1356 * (_1313.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1380 = (dot(vec3(_920, _921, _922), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1390 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4146 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1392 + 1.0))) + _1397) * _1360;
        float _1407 = _1328 * 0.5;
        float _1408 = _1338 * 0.5;
        float _1409 = _1348 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_920, _921, _922), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4179 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1434 + 1.0))) + _1439) * _1361;
        float _1449 = _1329 * 0.5;
        float _1450 = _1339 * 0.5;
        float _1451 = _1349 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_920, _921, _922), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4212 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1476 + 1.0))) + _1481) * _1362;
        _1498 = _1329;
        _1500 = _1328;
        _1501 = _1327;
        _1502 = _1339;
        _1503 = _1338;
        _1504 = _1337;
        _1505 = _1349;
        _1506 = _1348;
        _1507 = _1347;
        _1508 = _1362;
        _1509 = _1361;
        _1510 = _1360;
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1499;
        _1500 = _1499;
        _1501 = _1499;
        _1502 = _1499;
        _1503 = _1499;
        _1504 = _1499;
        _1505 = _1499;
        _1506 = _1499;
        _1507 = _1499;
        _1508 = _1499;
        _1509 = _1499;
        _1510 = _1499;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1540 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1544 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1548 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1571 = _1161 + _920;
        float _1572 = _1165 + _921;
        float _1573 = _1169 + _922;
        float _1583 = fma(_1573, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1571)) - _1540;
        float _1584 = fma(_1573, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1571)) - _1544;
        float _1585 = fma(_1573, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1571)) - _1548;
        float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
        float _1602 = ((_1589 * _1583) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1540 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1589 * _1584) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1544 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1589 * _1585) / cbModelParam._m0[35u].z) + ((((((_1548 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        float _1639 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1606.x + (-0.5));
        float _1641 = _1639 * (_1606.y + (-0.5));
        float _1642 = _1639 * (_1606.z + (-0.5));
        float _1649 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1613.x + (-0.5));
        float _1651 = _1649 * (_1613.y + (-0.5));
        float _1652 = _1649 * (_1613.z + (-0.5));
        float _1659 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1620.x + (-0.5));
        float _1661 = _1659 * (_1620.y + (-0.5));
        float _1662 = _1659 * (_1620.z + (-0.5));
        float _1669 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1627.x + (-0.5));
        float _1671 = _1669 * (_1627.y + (-0.5));
        float _1672 = _1669 * (_1627.z + (-0.5));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = _1640 * 0.5;
        float _1677 = _1650 * 0.5;
        float _1678 = _1660 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_920, _921, _922), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4275 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1703 + 1.0))) + _1708) * _1673;
        float _1718 = _1641 * 0.5;
        float _1719 = _1651 * 0.5;
        float _1720 = _1661 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_920, _921, _922), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4308 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1745 + 1.0))) + _1750) * _1674;
        float _1760 = _1642 * 0.5;
        float _1761 = _1652 * 0.5;
        float _1762 = _1662 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_920, _921, _922), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4341 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1787 + 1.0))) + _1792) * _1675;
        _1809 = _1642;
        _1810 = _1641;
        _1811 = _1640;
        _1812 = _1652;
        _1813 = _1651;
        _1814 = _1650;
        _1815 = _1662;
        _1816 = _1661;
        _1817 = _1660;
        _1818 = _1675;
        _1819 = _1674;
        _1820 = _1673;
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
    }
    else
    {
        _1809 = _1499;
        _1810 = _1499;
        _1811 = _1499;
        _1812 = _1499;
        _1813 = _1499;
        _1814 = _1499;
        _1815 = _1499;
        _1816 = _1499;
        _1817 = _1499;
        _1818 = _1499;
        _1819 = _1499;
        _1820 = _1499;
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1511)) + _1511;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1512)) + _1512;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1856 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1833));
    float _1877 = _1105 * 0.5;
    float _1878 = _1106 * 0.5;
    float _1879 = _1107 * 0.5;
    float _1880 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1883 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1886 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1920;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1893 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1498, _1502, _1505, _1508));
        float _1897 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1901 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1908 = dot(vec4(cbModelParam._m0[39u]), vec4(_1877, _1878, _1879, 1.0));
        _1920 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1920 = 1.0;
    }
    float _1931;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1922 = dot(vec4(cbModelParam._m0[40u]), vec4(_1877, _1878, _1879, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1935 = (_1931 * cbModelParam._m0[1u].x) + (_1920 * (1.0 - cbModelParam._m0[1u].x));
    float _1945 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1945 : min(cbModelParam._m0[25u].z, _1945));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1994 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1998 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _2002 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _2005 = fma(_1107, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105));
        float _2008 = fma(_1107, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105));
        float _2011 = fma(_1107, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105));
        float _2039;
        if (_2005 > 0.0)
        {
            _2039 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2039 = frontier_phi_17_15_ladder;
        }
        float _2242;
        if (_2008 > 0.0)
        {
            _2242 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2242 = frontier_phi_26_22_ladder;
        }
        float _2496;
        if (_2011 > 0.0)
        {
            _2496 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2496 = frontier_phi_38_33_ladder;
        }
        float _2498 = isnan(_2242) ? _2039 : (isnan(_2039) ? _2242 : min(_2039, _2242));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _2005) + _1994;
        float _2504 = (_2499 * _2008) + _1998;
        float _2505 = (_2499 * _2011) + _2002;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2506;
        float _2510 = _2506 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 > _2510) || ((_2504 < _2508) || ((_2503 < _2508) || (_2503 > _2510))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2505, cbModelParam._m0[9u].z, fma(_2504, cbModelParam._m0[9u].y, _2503 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2505, cbModelParam._m0[10u].z, fma(_2504, cbModelParam._m0[10u].y, _2503 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2505, cbModelParam._m0[11u].z, fma(_2504, cbModelParam._m0[11u].y, _2503 * cbModelParam._m0[11u].x))), _1946);
            frontier_phi_16_38_ladder = _2633.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2633.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2633.x * cbModelParam._m0[1u].y;
        }
        _2027 = frontier_phi_16_38_ladder_2;
        _2029 = frontier_phi_16_38_ladder_1;
        _2031 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1105, _1106, _1107), _1946);
        _2027 = _2015.x * cbModelParam._m0[1u].y;
        _2029 = _2015.y * cbModelParam._m0[1u].y;
        _2031 = _2015.z * cbModelParam._m0[1u].y;
    }
    float _2035 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _2036 = isnan(_2035) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2035 : min(cbModelParam._m0[25u].w, _2035));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2090 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2094 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2098 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2101 = fma(_1107, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105));
        float _2104 = fma(_1107, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105));
        float _2107 = fma(_1107, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105));
        float _2247;
        if (_2101 > 0.0)
        {
            _2247 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2247 = frontier_phi_28_24_ladder;
        }
        float _2523;
        if (_2104 > 0.0)
        {
            _2523 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2523 = frontier_phi_40_35_ladder;
        }
        float _2736;
        if (_2107 > 0.0)
        {
            _2736 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2736 = frontier_phi_49_46_ladder;
        }
        float _2738 = isnan(_2523) ? _2247 : (isnan(_2247) ? _2523 : min(_2247, _2523));
        float _2739 = isnan(_2736) ? _2738 : (isnan(_2738) ? _2736 : min(_2738, _2736));
        float _2743 = (_2739 * _2101) + _2090;
        float _2744 = (_2739 * _2104) + _2094;
        float _2745 = (_2739 * _2107) + _2098;
        float _2746 = _2739 * 9.9999997473787516355514526367188e-05;
        float _2747 = (-1.0) - _2746;
        float _2749 = _2746 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2745 > _2749) || ((_2745 < _2747) || ((_2744 > _2749) || ((_2744 < _2747) || ((_2743 < _2747) || (_2743 > _2749))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2745, cbModelParam._m0[17u].z, fma(_2744, cbModelParam._m0[17u].y, _2743 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2745, cbModelParam._m0[18u].z, fma(_2744, cbModelParam._m0[18u].y, _2743 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2745, cbModelParam._m0[19u].z, fma(_2744, cbModelParam._m0[19u].y, _2743 * cbModelParam._m0[19u].x))), _2036);
            frontier_phi_25_49_ladder = _2944.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2944.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2944.x * cbModelParam._m0[1u].z;
        }
        _2126 = frontier_phi_25_49_ladder_2;
        _2128 = frontier_phi_25_49_ladder_1;
        _2130 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1105, _1106, _1107), _2036);
        _2126 = _2110.x * cbModelParam._m0[1u].z;
        _2128 = _2110.y * cbModelParam._m0[1u].z;
        _2130 = _2110.z * cbModelParam._m0[1u].z;
    }
    float _2143 = (((_1132 * _1081) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2126 - _2027)) + _2027);
    float _2145 = (((_1132 * _1083) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2128 - _2029)) + _2029);
    float _2147 = (((_1132 * _1084) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2130 - _2031)) + _2031);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2145, cbSceneParam._m0[89u].y, _2143 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2145, cbSceneParam._m0[90u].y, _2143 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2145, cbSceneParam._m0[91u].y, _2143 * cbSceneParam._m0[91u].x));
    uvec4 _2166 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2168 = _2166.x * 14u;
    uint _2169 = _2168 + 13u;
    float _2176 = _1097 + (-1.0);
    float _2181 = (cbLight._m0[_2169].x * _2176) + 1.0;
    float _2182 = (cbLight._m0[_2169].y * _2176) + 1.0;
    float _2183 = (cbLight._m0[_2169].z * _2176) + 1.0;
    float _2184 = (cbLight._m0[_2169].w * _2176) + 1.0;
    uint _2185 = _2168 + 5u;
    float _2191 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2195 = _2168 + 4u;
    float _2201 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2205 = _2168 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_920, _921, _922));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_920, _921, _922));
    float _4477 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4488 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2185].x * _2191) * _2226) + ((cbLight._m0[_2195].x * _2201) * _2224);
    float _2234 = ((_2191 * cbLight._m0[_2185].y) * _2226) + ((_2201 * cbLight._m0[_2195].y) * _2224);
    float _2235 = ((_2191 * cbLight._m0[_2185].z) * _2226) + ((_2201 * cbLight._m0[_2195].z) * _2224);
    uvec4 _2239 = floatBitsToUint(cbLight._m0[_2168 + 12u]);
    bool _2241 = _2239.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2241)
    {
        _2252 = _2233;
        _2254 = _2234;
        _2256 = _2235;
    }
    else
    {
        uint _2260 = _2168 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2168 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4499 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2279 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2233;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2234;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2235;
    }
    bool _2259 = _2239.y == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2259)
    {
        _2297 = _2252;
        _2299 = _2254;
        _2301 = _2256;
    }
    else
    {
        uint _2467 = _2168 + 7u;
        float _2483 = (dot(vec3(cbLight._m0[_2168 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2484 = _2483 * _2483;
        float _4515 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2485 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2486 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2297 = (((cbLight._m0[_2467].x * 0.3183098733425140380859375) * _2485) * _2486) + _2252;
        _2299 = (((cbLight._m0[_2467].y * 0.3183098733425140380859375) * _2485) * _2486) + _2254;
        _2301 = (((cbLight._m0[_2467].z * 0.3183098733425140380859375) * _2485) * _2486) + _2256;
    }
    uint _2304 = _2168 + 8u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _923) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2168].x + _999;
    float _2320 = cbLight._m0[_2168].y + _1000;
    float _2321 = cbLight._m0[_2168].z + _1001;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2168].xyz));
    float _4531 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2333 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2334 = dot(vec3(_920, _921, _922), vec3(_2326, _2327, _2328));
    float _4553 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2326, _2327, _2328));
    float _4564 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2318 * _2318;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2355 = 0.959999978542327880859375 - _1078;
    float _2357 = 0.959999978542327880859375 - _1079;
    float _2358 = 0.959999978542327880859375 - _1080;
    float _2365 = 1.0 - _2318;
    float _2376 = (0.5 / (((_2333 * ((_2332 * _2365) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2365) + _2318) * _2332))) * _2332;
    float _4575 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    uint _2389 = _2168 + 9u;
    float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _923) * 0.949999988079071044921875);
    float _2401 = _2400 * _2400;
    float _2402 = cbLight._m0[_2205].x + _999;
    float _2403 = cbLight._m0[_2205].y + _1000;
    float _2404 = cbLight._m0[_2205].z + _1001;
    float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
    float _2409 = _2408 * _2402;
    float _2410 = _2408 * _2403;
    float _2411 = _2408 * _2404;
    float _2412 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2205].xyz));
    float _4586 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2416 = dot(vec3(_920, _921, _922), vec3(_2409, _2410, _2411));
    float _4597 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2409, _2410, _2411));
    float _4608 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2401 * _2401;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2442 = 1.0 - _2401;
    float _2452 = (0.5 / (((_2333 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2442) + _2401) * _2415))) * _2415;
    float _4619 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2454 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    float _2464 = (((((_2435 * _2355) + _1081) * cbLight._m0[_2389].x) * _2454) * _2191) + (((((_2354 * _2355) + _1081) * cbLight._m0[_2304].x) * _2378) * _2201);
    float _2465 = (((((_2435 * _2357) + _1083) * cbLight._m0[_2389].y) * _2454) * _2191) + (((((_2354 * _2357) + _1083) * cbLight._m0[_2304].y) * _2378) * _2201);
    float _2466 = (((((_2435 * _2358) + _1084) * cbLight._m0[_2389].z) * _2454) * _2191) + (((((_2354 * _2358) + _1084) * cbLight._m0[_2304].z) * _2378) * _2201);
    float _2528;
    float _2530;
    float _2532;
    if (_2241)
    {
        _2528 = _2464;
        _2530 = _2465;
        _2532 = _2466;
    }
    else
    {
        uint _2534 = _2168 + 2u;
        uint _2538 = _2168 + 10u;
        float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2534].w)) * _923) * 0.949999988079071044921875);
        float _2553 = _2552 * _2552;
        float _2554 = cbLight._m0[_2534].x + _999;
        float _2555 = cbLight._m0[_2534].y + _1000;
        float _2556 = cbLight._m0[_2534].z + _1001;
        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
        float _2561 = _2560 * _2554;
        float _2562 = _2560 * _2555;
        float _2563 = _2560 * _2556;
        float _2564 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2534].xyz));
        float _4630 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2568 = dot(vec3(_920, _921, _922), vec3(_2561, _2562, _2563));
        float _4641 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2572 = dot(vec3(cbLight._m0[_2534].xyz), vec3(_2561, _2562, _2563));
        float _4652 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2576 = _2553 * _2553;
        float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
        float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2594 = 1.0 - _2553;
        float _2604 = (0.5 / (((_2333 * ((_2567 * _2594) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2594) + _2553) * _2567))) * _2567;
        float _4663 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2606 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
        float _2607 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2528 = (((((_2587 * _2355) + _1081) * cbLight._m0[_2538].x) * _2606) * _2607) + _2464;
        _2530 = (((((_2587 * _2357) + _1083) * cbLight._m0[_2538].y) * _2606) * _2607) + _2465;
        _2532 = (((((_2587 * _2358) + _1084) * cbLight._m0[_2538].z) * _2606) * _2607) + _2466;
    }
    float _2642;
    float _2644;
    float _2646;
    if (_2259)
    {
        _2642 = _2528;
        _2644 = _2530;
        _2646 = _2532;
    }
    else
    {
        uint _2653 = _2168 + 3u;
        uint _2657 = _2168 + 11u;
        float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2653].w)) * _923) * 0.949999988079071044921875);
        float _2672 = _2671 * _2671;
        float _2673 = cbLight._m0[_2653].x + _999;
        float _2674 = cbLight._m0[_2653].y + _1000;
        float _2675 = cbLight._m0[_2653].z + _1001;
        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
        float _2680 = _2679 * _2673;
        float _2681 = _2679 * _2674;
        float _2682 = _2679 * _2675;
        float _2683 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2653].xyz));
        float _4679 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2687 = dot(vec3(_920, _921, _922), vec3(_2680, _2681, _2682));
        float _4690 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2691 = dot(vec3(cbLight._m0[_2653].xyz), vec3(_2680, _2681, _2682));
        float _4701 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2695 = _2672 * _2672;
        float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
        float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2713 = 1.0 - _2672;
        float _2723 = (0.5 / (((_2333 * ((_2686 * _2713) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2713) + _2672) * _2686))) * _2686;
        float _4712 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2725 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
        float _2726 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2642 = (((((_2706 * _2355) + _1081) * cbLight._m0[_2657].x) * _2725) * _2726) + _2528;
        _2644 = (((((_2706 * _2357) + _1083) * cbLight._m0[_2657].y) * _2725) * _2726) + _2530;
        _2646 = (((((_2706 * _2358) + _1084) * cbLight._m0[_2657].z) * _2725) * _2726) + _2532;
    }
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    if (_2166.y == 0u)
    {
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2801;
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2801;
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2801;
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.x;
        uint _2828 = uint((float(_2816.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _2817))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _2817)));
        float _2838 = (log2(_2804 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2839 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        uint _2842 = uint(isnan(14.0) ? _2839 : (isnan(_2839) ? 14.0 : min(_2839, 14.0)));
        uvec4 _2847 = texelFetch(g_lightClusterGridBuffer, int(((_2842 << 2u) + (_2828 << 6u)) >> 2u));
        uint _2848 = _2847.x;
        uint _2849 = _2816.z;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((((1u << ((_2849 >> 4u) & 15u)) + 4294967295u) & _2848) == 0u) || ((_2849 & 240u) == 0u))
        {
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
        }
        else
        {
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            uint _3107 = 0u;
            uint _3116;
            bool _3117;
            for (;;)
            {
                _3116 = texelFetch(g_lightClassification, int((((_2842 << 5u) + (_2828 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                _3117 = _3116 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3117)
                {
                    frontier_phi_66_pred = _3101;
                    frontier_phi_66_pred_1 = _3106;
                    frontier_phi_66_pred_2 = _3105;
                    frontier_phi_66_pred_3 = _3104;
                    frontier_phi_66_pred_4 = _3103;
                    frontier_phi_66_pred_5 = _3102;
                }
                else
                {
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    uint _3252;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3116;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    for (;;)
                    {
                        uint _3256 = uint(findLSB(_3252)) + (_3107 << 5u);
                        uint _3253 = (_3252 + 4294967295u) & _3252;
                        uint _3258 = _3256 * 48u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3278 = (_3256 * 48u) + 4u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3297 = (_3256 * 48u) + 8u;
                        vec3 _3308 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x));
                        float _3312 = _3272.x - _2802;
                        float _3313 = _3272.y - _2803;
                        float _3314 = _3272.z - _2804;
                        float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                        float _3318 = inversesqrt(_3315);
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3322 = dot(vec3(_1038, _1041, _1044), vec3(_3319, _3320, _3321));
                        float _3327 = 1.0 - (_3315 * _3272.w);
                        float _4738 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3329 = sqrt(_3315) * _3291.w;
                        float _3332 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3322) + _3333;
                        float _3339 = _3329 * _3329;
                        float _3343 = ((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3328) / ((_3339 * 0.699999988079071044921875) + 1.0);
                        float _3347 = (-0.0) - _2802;
                        float _3348 = (-0.0) - _2803;
                        float _3349 = (-0.0) - _2804;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3364 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                        float _3365 = 1.0 - _1113;
                        float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                        float _3373 = _3372 * _3372;
                        float _3374 = _3373 * _3373;
                        float _3375 = _3354 + _3319;
                        float _3376 = _3355 + _3320;
                        float _3377 = _3356 + _3321;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3385 = dot(vec3(_1038, _1041, _1044), vec3(_3354, _3355, _3356));
                        float _4754 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3389 = dot(vec3(_1038, _1041, _1044), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                        float _4765 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                        float _3397 = _3332 * _3373;
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3322) + _3398;
                        float _4776 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3403 = 1.0 - _3373;
                        float _3413 = (0.5 / (((_3402 * ((_3388 * _3403) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3373) * _3388))) * _3402;
                        float _4787 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3424 = (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3396 * _3396) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125))) * _3328;
                        _3176 = (_3343 * _3291.x) + _3249;
                        _3177 = (_3343 * _3291.y) + _3250;
                        _3178 = (_3343 * _3291.z) + _3251;
                        _3173 = (_3424 * _3308.x) + _3246;
                        _3174 = (_3424 * _3308.y) + _3247;
                        _3175 = (_3424 * _3308.z) + _3248;
                        if (_3253 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3253;
                        }
                    }
                    frontier_phi_66_pred = _3173;
                    frontier_phi_66_pred_1 = _3178;
                    frontier_phi_66_pred_2 = _3177;
                    frontier_phi_66_pred_3 = _3176;
                    frontier_phi_66_pred_4 = _3175;
                    frontier_phi_66_pred_5 = _3174;
                }
                _2950 = frontier_phi_66_pred;
                _2960 = frontier_phi_66_pred_1;
                _2958 = frontier_phi_66_pred_2;
                _2956 = frontier_phi_66_pred_3;
                _2954 = frontier_phi_66_pred_4;
                _2952 = frontier_phi_66_pred_5;
                uint _3108 = _3107 + 1u;
                if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3101 = _2950;
                    _3102 = _2952;
                    _3103 = _2954;
                    _3104 = _2956;
                    _3105 = _2958;
                    _3106 = _2960;
                    _3107 = _3108;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
        }
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.z;
        uint _2966 = (_2964 >> 8u) & 15u;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((4294967295u << _2966) & _2848) == 0u)
        {
            _3069 = _2949;
            _3071 = _2951;
            _3073 = _2953;
            _3075 = _2955;
            _3077 = _2957;
            _3079 = _2959;
        }
        else
        {
            float _3094 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
            float _3095 = _3094 * _2802;
            float _3096 = _3094 * _2803;
            float _3097 = _3094 * _2804;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2966 < ((_2964 >> 12u) & 15u))
            {
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3229 = _2949;
                float _3230 = _2951;
                float _3231 = _2953;
                float _3232 = _2955;
                float _3233 = _2957;
                float _3234 = _2959;
                uint _3235 = _2966;
                uint _3244;
                bool _3245;
                for (;;)
                {
                    _3244 = texelFetch(g_lightClassification, int((((_2842 << 5u) + (_2828 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                    _3245 = _3244 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3245)
                    {
                        frontier_phi_77_pred = _3234;
                        frontier_phi_77_pred_1 = _3233;
                        frontier_phi_77_pred_2 = _3232;
                        frontier_phi_77_pred_3 = _3231;
                        frontier_phi_77_pred_4 = _3230;
                        frontier_phi_77_pred_5 = _3229;
                    }
                    else
                    {
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        uint _3457 = _3244;
                        uint _3458;
                        vec4 _3483;
                        float _3484;
                        vec4 _3499;
                        vec3 _3511;
                        vec4 _3526;
                        vec4 _3541;
                        float _3587;
                        bool _3588;
                        for (;;)
                        {
                            uint _3468 = ((_3235 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3457));
                            _3458 = (_3457 + 4294967295u) & _3457;
                            uint _3470 = _3468 * 40u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3484 = _3483.w;
                            uint _3486 = (_3468 * 40u) + 4u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3468 * 40u) + 8u;
                            _3511 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x));
                            uint _3513 = (_3468 * 40u) + 16u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3468 * 40u) + 20u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3468 * 40u) + 24u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3562 = (_3468 * 40u) + 28u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3587 = fma(_2804, _3575.z, fma(_2803, _3575.y, _3575.x * _2802)) + _3575.w;
                            _3588 = !((fma(_2804, _3556.z, fma(_2803, _3556.y, _3556.x * _2802)) + _3556.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3588)
                            {
                                float _3615 = _3483.x - _2802;
                                float _3616 = _3483.y - _2803;
                                float _3617 = _3483.z - _2804;
                                float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                                float _3621 = inversesqrt(_3618);
                                float _3622 = _3621 * _3615;
                                float _3623 = _3621 * _3616;
                                float _3624 = _3621 * _3617;
                                float _3628 = 1.0 - (_3618 / (_3484 * _3484));
                                float _4798 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3633 = sqrt(_3618) * _3499.w;
                                float _3635 = 1.39999997615814208984375 / (_3633 + 1.39999997615814208984375);
                                float _3636 = _3635 * _3635;
                                float _3639 = ((1.0 - _3636) * dot(vec3(_3622, _3623, _3624), vec3(_1038, _1041, _1044))) + _3636;
                                float _3642 = _3633 * _3633;
                                float _3646 = (fma(_2804, _3526.z, fma(_2803, _3526.y, _3526.x * _2802)) + _3526.w) / _3587;
                                float _3647 = (fma(_2804, _3541.z, fma(_2803, _3541.y, _3541.x * _2802)) + _3541.w) / _3587;
                                float _3651 = 1.0 - dot(vec2(_3646, _3647), vec2(_3646, _3647));
                                float _4814 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3653 = _3652 * (((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3629) / ((_3642 * 0.699999988079071044921875) + 1.0));
                                float _3665 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                                float _3666 = 1.0 - _1113;
                                float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                                float _3674 = _3673 * _3673;
                                float _3675 = _3674 * _3674;
                                float _3676 = _3622 - _3095;
                                float _3677 = _3623 - _3096;
                                float _3678 = _3624 - _3097;
                                float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                                float _3686 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3095, (-0.0) - _3096, (-0.0) - _3097));
                                float _4825 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3690 = dot(vec3(_1038, _1041, _1044), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                                float _4836 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                                float _3698 = _3635 * _3674;
                                float _3699 = _3698 * _3698;
                                float _3705 = ((1.0 - _3699) * dot(vec3(_1038, _1041, _1044), vec3(_3622, _3623, _3624))) + _3699;
                                float _4847 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3707 = 1.0 - _3674;
                                float _3717 = (0.5 / (((_3706 * ((_3689 * _3707) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3706 * _3707) + _3674) * _3689))) * _3706;
                                float _4858 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3727 = (_3652 * _3629) * (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3697 * _3697) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3653 * _3499.y;
                                frontier_phi_83_pred_1 = _3653 * _3499.x;
                                frontier_phi_83_pred_2 = _3727 * _3511.z;
                                frontier_phi_83_pred_3 = _3727 * _3511.y;
                                frontier_phi_83_pred_4 = _3727 * _3511.x;
                                frontier_phi_83_pred_5 = _3653 * _3499.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3735 = frontier_phi_83_pred;
                            _3734 = frontier_phi_83_pred_1;
                            _3733 = frontier_phi_83_pred_2;
                            _3732 = frontier_phi_83_pred_3;
                            _3731 = frontier_phi_83_pred_4;
                            _3736 = frontier_phi_83_pred_5;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            if (_3458 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3458;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3443;
                        frontier_phi_77_pred_1 = _3442;
                        frontier_phi_77_pred_2 = _3441;
                        frontier_phi_77_pred_3 = _3440;
                        frontier_phi_77_pred_4 = _3439;
                        frontier_phi_77_pred_5 = _3438;
                    }
                    _3080 = frontier_phi_77_pred;
                    _3078 = frontier_phi_77_pred_1;
                    _3076 = frontier_phi_77_pred_2;
                    _3074 = frontier_phi_77_pred_3;
                    _3072 = frontier_phi_77_pred_4;
                    _3070 = frontier_phi_77_pred_5;
                    uint _3236 = _3235 + 1u;
                    if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3229 = _3070;
                        _3230 = _3072;
                        _3231 = _3074;
                        _3232 = _3076;
                        _3233 = _3078;
                        _3234 = _3080;
                        _3235 = _3236;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3074;
                frontier_phi_58_59_ladder_1 = _3080;
                frontier_phi_58_59_ladder_2 = _3078;
                frontier_phi_58_59_ladder_3 = _3076;
                frontier_phi_58_59_ladder_4 = _3072;
                frontier_phi_58_59_ladder_5 = _3070;
            }
            else
            {
                frontier_phi_58_59_ladder = _2953;
                frontier_phi_58_59_ladder_1 = _2959;
                frontier_phi_58_59_ladder_2 = _2957;
                frontier_phi_58_59_ladder_3 = _2955;
                frontier_phi_58_59_ladder_4 = _2951;
                frontier_phi_58_59_ladder_5 = _2949;
            }
            _3069 = frontier_phi_58_59_ladder_5;
            _3071 = frontier_phi_58_59_ladder_4;
            _3073 = frontier_phi_58_59_ladder;
            _3075 = frontier_phi_58_59_ladder_3;
            _3077 = frontier_phi_58_59_ladder_2;
            _3079 = frontier_phi_58_59_ladder_1;
        }
        float _3084 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
        _2861 = (_3084 * _3075) + _2297;
        _2863 = (_3084 * _3077) + _2299;
        _2865 = (_3084 * _3079) + _2301;
        _2867 = ((_3069 * _1081) * _3084) + _2642;
        _2869 = ((_3071 * _1083) * _3084) + _2644;
        _2871 = ((_3073 * _1084) * _3084) + _2646;
    }
    else
    {
        _2861 = _2297;
        _2863 = _2299;
        _2865 = _2301;
        _2867 = _2642;
        _2869 = _2644;
        _2871 = _2646;
    }
    float _4874 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4885 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4896 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2888 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2861 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1097))) + ((_2867 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _2889 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2863 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1097))) + ((_2869 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _2890 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2865 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1097))) + ((_2871 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    uint _2891 = _261 + 6u;
    float _2899 = _1019 / cbSceneParam._m0[86u].x;
    float _2900 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _2914 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2916 = _2914.x;
    float _2917 = _2914.y;
    float _2918 = _2914.z;
    float _2919 = _2914.w;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _2974 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _2975 = _2974 / _942;
        float _2986 = _2975 * _992;
        float _2987 = _993 * _2975;
        float _2988 = (-0.0) - _2987;
        float _2989 = _2975 * _994;
        float _2991 = (cbSceneParam._m0[77u].w * _2988) / _2974;
        float _2992 = _2991 + cbSceneParam._m0[79u].w;
        float _2993 = cbSceneParam._m0[79u].w - _2987;
        float _2999 = sqrt(((_2986 * _2986) + (_2987 * _2987)) + (_2989 * _2989));
        float _3002 = (1.0 - (cbSceneParam._m0[77u].w / _2974)) * _2999;
        float _3007 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3009 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3186;
        if (abs((_2988 - _2991) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3186 = ((((_2992 > 0.0) ? exp2(_3007 * _2992) : (2.0 - exp2(_3009 * _2992))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3002;
        }
        else
        {
            float _3130 = 1.0 / cbSceneParam._m0[80u].x;
            float _3131 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : max(_2992, _2993));
            float _3132 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : min(_2992, _2993));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            _3186 = ((abs(_2999 / _2988) * cbSceneParam._m0[80u].y) * ((((_3141 - _3142) * 2.0) - ((exp2(_3007 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0)))) - exp2(_3007 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))))) * _3130)) - ((exp2(_3009 * _3141) - exp2(_3009 * _3142)) * _3130))) + (_3002 * cbSceneParam._m0[80u].z);
        }
        vec4 _3188 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, 1.0), 0.0);
        float _3197 = exp2((_3186 * (-1.44269502162933349609375)) * (1.0 - _3188.w));
        float _3198 = log2(_3197);
        float _3214 = log2(_2919);
        _3011 = (exp2(_3214 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].x)) * _3188.x) / cbSceneParam._m0[78u].x)) + _2916;
        _3013 = (exp2(_3214 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].y)) * _3188.y) / cbSceneParam._m0[78u].y)) + _2917;
        _3015 = (exp2(_3214 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].z)) * _3188.z) / cbSceneParam._m0[78u].z)) + _2918;
        _3017 = _3197 * _2919;
    }
    else
    {
        _3011 = _2916;
        _3013 = _2917;
        _3015 = _2918;
        _3017 = _2919;
    }
    bool _3224;
    vec4 _3027;
    vec4 _3049;
    float _3051;
    float _3055;
    float _3056;
    float _3057;
    float _3058;
    bool _3068;
    for (;;)
    {
        _3027 = cbMatDynParam._m0[0u];
        float _3029 = roundEven(_3027.y);
        bool _3030 = _3029 == 3.0;
        float _3031 = log2(_3017);
        float _3038 = exp2(_3031 * cbSceneParam._m0[78u].x) * _2888;
        float _3039 = exp2(_3031 * cbSceneParam._m0[78u].y) * _2889;
        float _3040 = exp2(_3031 * cbSceneParam._m0[78u].z) * _2890;
        float _3047 = _1008 + (-0.5);
        _3049 = cbMtdParam._m0[1u];
        _3051 = _3049.y * _3047;
        float _3054 = (_3029 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3055 = _3054 * (_3030 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3011)));
        _3056 = _3054 * (_3030 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3013)));
        _3057 = _3054 * (_3030 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3015)));
        _3058 = _3047 * 0.999000012874603271484375;
        _3068 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3068)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3058) < 0.5)
            {
                _3224 = true;
                break;
            }
        }
        uint _3165 = _1057 + uint(_3027.w);
        if ((cbInstanceData._m0[_3165].w < 1.0) && ((cbInstanceData._m0[_3165].w + _3058) < 0.5))
        {
            _3224 = true;
            break;
        }
        if ((_3051 + 1.0) < _3049.x)
        {
            _3224 = true;
            break;
        }
        _3224 = false;
        break;
    }
    float _3429;
    if (_3224)
    {
        discard_state = true;
        _3429 = 0.0;
    }
    else
    {
        _3429 = cbInstanceData._m0[_2891].w;
    }
    SV_Target.x = _3055;
    SV_Target.y = _3056;
    SV_Target.z = _3057;
    SV_Target.w = _3429;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2891].w;
    discard_exit();
}


