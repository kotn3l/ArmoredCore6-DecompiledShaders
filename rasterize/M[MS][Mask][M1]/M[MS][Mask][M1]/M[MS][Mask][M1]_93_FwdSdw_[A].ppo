#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1493;
float _4154;
float _4155;
float _4156;
float _4157;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4166 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4177 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4188 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4199 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _457 = (_450 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _458 = (_450 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _459 = (_450 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4210 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) + _542;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _303) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _304) + cbTextureTilingScale._m0[14u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _635 = _631.z;
    float _642 = ((_614.x - _633) * _450) + _633;
    float _643 = ((_614.y - _634) * _450) + _634;
    float _644 = ((_614.z - _635) * _450) + _635;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_656.z - _644) * _523) + _644;
    float _672 = ((((_656.x - _642) * _523) + _642) * 2.0) + (-1.0);
    float _673 = ((((_656.y - _643) * _523) + _643) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _4221 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _709 = (_672 + ((((_589.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_697.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _710 = (_673 + ((((_589.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_697.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _713 = fma(_679, _251, fma(_710, _258, _709 * _244));
    float _716 = fma(_679, _252, fma(_710, _259, _709 * _245));
    float _719 = fma(_679, _253, fma(_710, _260, _709 * _246));
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _762 = (cbMtdParam._m0[19u].x + dot(vec4(_723 * _713, _723 * _716, _723 * _719, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_752 - _753) * cbMtdParam._m0[24u].z) + _753) * cbMtdParam._m0[21u].z);
    float _4232 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _770 = (_763 * ((_570.x * cbMtdParam._m0[18u].x) - _549)) + _549;
    float _771 = (_763 * ((_570.y * cbMtdParam._m0[18u].y) - _550)) + _550;
    float _772 = (_763 * ((_570.z * cbMtdParam._m0[18u].z) - _551)) + _551;
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _800 = _798.x;
    float _818 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _800) * _450) + _800;
    float _835 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _818) * _523) + _818;
    float _839 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _835) * cbMtdParam._m0[19u].z) + _835;
    float _841 = _839 - (_839 * _763);
    float _846 = (((_589.z - _669) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _669;
    float _850 = ((_697.z - _846) * cbMtdParam._m0[19u].w) + _846;
    vec4 _863 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _870 = (_863.x * 2.0) + (-1.0);
    float _871 = (_863.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _4243 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _880 = ((_863.z - _850) * _763) + _850;
    float _890 = ((sqrt(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) - _679) * _763) + _679;
    float _893 = (((_870 - _709) * _763) + _709) + (cbMtdParam._m0[21u].x * _709);
    float _894 = (((_871 - _710) * _763) + _710) + (cbMtdParam._m0[21u].x * _710);
    float _898 = cbMtdParam._m0[22u].x + _697.w;
    float _901 = fma(_890, _251, fma(_894, _258, _893 * _244));
    float _904 = fma(_890, _252, fma(_894, _259, _893 * _245));
    float _907 = fma(_890, _253, fma(_894, _260, _893 * _246));
    float _911 = inversesqrt(dot(vec3(_901, _904, _907), vec3(_901, _904, _907)));
    float _912 = _911 * _901;
    float _913 = _911 * _904;
    float _914 = _911 * _907;
    float _4254 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _915 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4276 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4287 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4298 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4309 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _920 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    vec4 _999 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1001 = _999.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1173 = sqrt(((_985 * _985) + (_986 * _986)) + (_987 * _987));
        float _1179 = (cbMatDynParam._m0[5u].x * _1173) + cbMatDynParam._m0[5u].y;
        float _4320 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1184 = (cbMatDynParam._m0[5u].z * _1173) + cbMatDynParam._m0[5u].w;
        float _4331 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) - _1180)) + _1180) < ((_1001 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1012 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1013 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1031 = fma(_914, cbSceneParam._m0[5u].z, fma(_913, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _912));
    float _1034 = fma(_914, cbSceneParam._m0[6u].z, fma(_913, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _912));
    float _1037 = fma(_914, cbSceneParam._m0[7u].z, fma(_913, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _912));
    uint _1050 = _284 + 9u;
    uint _1051 = _1050 + uint(cbMatDynParam._m0[0u].w);
    float _1057 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * cbInstanceData._m0[_1051].x;
    float _1058 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * cbInstanceData._m0[_1051].y;
    float _1059 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * cbInstanceData._m0[_1051].z;
    float _4342 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _1063 = 1.0 - _920;
    float _1064 = _1060 * _1063;
    float _1065 = _1061 * _1063;
    float _1066 = _1062 * _1063;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _920;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _920;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _920;
    float _1074 = _1071 + 0.039999999105930328369140625;
    float _1076 = _1072 + 0.039999999105930328369140625;
    float _1077 = _1073 + 0.039999999105930328369140625;
    vec4 _1086 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1012, cbSceneParam._m0[86u].y * _1013));
    float _1090 = ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * TEXCOORD_5.w) * _1086.x;
    float _1091 = dot(vec3(_912, _913, _914), vec3(_992, _993, _994));
    float _1094 = _1091 * 2.0;
    float _1098 = (_1094 * _912) - _992;
    float _1099 = (_1094 * _913) - _993;
    float _1100 = (_1094 * _914) - _994;
    float _1104 = abs(dot(vec3(_992, _993, _994), vec3(_912, _913, _914)));
    float _4375 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1106 = sqrt(_915);
    float _1119 = exp2((_1106 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1106 * 3.0));
    float _1125 = (1.0 - _1119) * ((_1106 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1126 = _1119 * _1106;
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1162, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154));
        float _1221 = fma(_1162, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154));
        float _1225 = fma(_1162, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154));
        float _1250 = _1154 + _912;
        float _1251 = _1158 + _913;
        float _1252 = _1162 + _914;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_912, _913, _914), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4423 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_912, _913, _914), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4456 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_912, _913, _914), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4489 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1534 = fma(_1162, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154));
        float _1538 = fma(_1162, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154));
        float _1542 = fma(_1162, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154));
        float _1565 = _1154 + _912;
        float _1566 = _1158 + _913;
        float _1567 = _1162 + _914;
        float _1577 = fma(_1567, cbModelParam._m0[30u].z, fma(_1566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1565)) - _1534;
        float _1578 = fma(_1567, cbModelParam._m0[31u].z, fma(_1566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1565)) - _1538;
        float _1579 = fma(_1567, cbModelParam._m0[32u].z, fma(_1566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1565)) - _1542;
        float _1583 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
        float _1596 = ((_1583 * _1577) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1534 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1583 * _1578) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1538 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1583 * _1579) / cbModelParam._m0[35u].z) + ((((((_1542 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        float _1633 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1600.x + (-0.5));
        float _1635 = _1633 * (_1600.y + (-0.5));
        float _1636 = _1633 * (_1600.z + (-0.5));
        float _1643 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1607.x + (-0.5));
        float _1645 = _1643 * (_1607.y + (-0.5));
        float _1646 = _1643 * (_1607.z + (-0.5));
        float _1653 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1614.x + (-0.5));
        float _1655 = _1653 * (_1614.y + (-0.5));
        float _1656 = _1653 * (_1614.z + (-0.5));
        float _1663 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1621.x + (-0.5));
        float _1665 = _1663 * (_1621.y + (-0.5));
        float _1666 = _1663 * (_1621.z + (-0.5));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = _1634 * 0.5;
        float _1671 = _1644 * 0.5;
        float _1672 = _1654 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_912, _913, _914), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4530 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4541 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4552 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_1697 + 1.0))) + _1702) * _1667;
        float _1712 = _1635 * 0.5;
        float _1713 = _1645 * 0.5;
        float _1714 = _1655 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_912, _913, _914), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4563 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4574 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4585 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_1739 + 1.0))) + _1744) * _1668;
        float _1754 = _1636 * 0.5;
        float _1755 = _1646 * 0.5;
        float _1756 = _1656 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_912, _913, _914), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4596 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4607 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4618 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_1781 + 1.0))) + _1786) * _1669;
        _1803 = _1636;
        _1804 = _1635;
        _1805 = _1634;
        _1806 = _1646;
        _1807 = _1645;
        _1808 = _1644;
        _1809 = _1656;
        _1810 = _1655;
        _1811 = _1654;
        _1812 = _1669;
        _1813 = _1668;
        _1814 = _1667;
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
    }
    else
    {
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = _1493;
        _1812 = _1493;
        _1813 = _1493;
        _1814 = _1493;
        _1815 = 0.0;
        _1816 = 0.0;
        _1817 = 0.0;
    }
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1505)) + _1505;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1506)) + _1506;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1507)) + _1507;
    float _1850 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1827));
    float _1871 = _1098 * 0.5;
    float _1872 = _1099 * 0.5;
    float _1873 = _1100 * 0.5;
    float _1874 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1877 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1880 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1914;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1887 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1891 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1895 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1902 = dot(vec4(cbModelParam._m0[39u]), vec4(_1871, _1872, _1873, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1925;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1916 = dot(vec4(cbModelParam._m0[40u]), vec4(_1871, _1872, _1873, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1929 = (_1925 * cbModelParam._m0[1u].x) + (_1914 * (1.0 - cbModelParam._m0[1u].x));
    float _1939 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _915);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1939 : min(cbModelParam._m0[25u].z, _1939));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1987 = fma(_1162, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1154)) + cbModelParam._m0[13u].w;
        float _1991 = fma(_1162, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1154)) + cbModelParam._m0[14u].w;
        float _1995 = fma(_1162, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1154)) + cbModelParam._m0[15u].w;
        float _1998 = fma(_1100, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1098));
        float _2001 = fma(_1100, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1098));
        float _2004 = fma(_1100, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1098));
        float _2032;
        if (_1998 > 0.0)
        {
            _2032 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2032 = frontier_phi_17_15_ladder;
        }
        float _2203;
        if (_2001 > 0.0)
        {
            _2203 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2203 = frontier_phi_26_22_ladder;
        }
        float _2498;
        if (_2004 > 0.0)
        {
            _2498 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2498 = frontier_phi_38_33_ladder;
        }
        float _2500 = isnan(_2203) ? _2032 : (isnan(_2032) ? _2203 : min(_2032, _2203));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1998) + _1987;
        float _2506 = (_2501 * _2001) + _1991;
        float _2507 = (_2501 * _2004) + _1995;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1940);
            frontier_phi_16_38_ladder = _2652.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2652.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2652.x * cbModelParam._m0[1u].y;
        }
        _2020 = frontier_phi_16_38_ladder_2;
        _2022 = frontier_phi_16_38_ladder_1;
        _2024 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1098, _1099, _1100), _1940);
        _2020 = _2008.x * cbModelParam._m0[1u].y;
        _2022 = _2008.y * cbModelParam._m0[1u].y;
        _2024 = _2008.z * cbModelParam._m0[1u].y;
    }
    float _2028 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _915);
    float _2029 = isnan(_2028) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2028 : min(cbModelParam._m0[25u].w, _2028));
    float _2118;
    float _2120;
    float _2122;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2082 = fma(_1162, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1154)) + cbModelParam._m0[21u].w;
        float _2086 = fma(_1162, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1154)) + cbModelParam._m0[22u].w;
        float _2090 = fma(_1162, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1154)) + cbModelParam._m0[23u].w;
        float _2093 = fma(_1100, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1098));
        float _2096 = fma(_1100, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1098));
        float _2099 = fma(_1100, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1098));
        float _2208;
        if (_2093 > 0.0)
        {
            _2208 = abs((1.0 - _2082) / _2093);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2082 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2208 = frontier_phi_28_24_ladder;
        }
        float _2525;
        if (_2096 > 0.0)
        {
            _2525 = abs((1.0 - _2086) / _2096);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2086 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2525 = frontier_phi_40_35_ladder;
        }
        float _2863;
        if (_2099 > 0.0)
        {
            _2863 = abs((1.0 - _2090) / _2099);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2090 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2863 = frontier_phi_50_47_ladder;
        }
        float _2865 = isnan(_2525) ? _2208 : (isnan(_2208) ? _2525 : min(_2208, _2525));
        float _2866 = isnan(_2863) ? _2865 : (isnan(_2865) ? _2863 : min(_2865, _2863));
        float _2870 = (_2866 * _2093) + _2082;
        float _2871 = (_2866 * _2096) + _2086;
        float _2872 = (_2866 * _2099) + _2090;
        float _2873 = _2866 * 9.9999997473787516355514526367188e-05;
        float _2874 = (-1.0) - _2873;
        float _2876 = _2873 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2872 > _2876) || ((_2872 < _2874) || ((_2871 > _2876) || ((_2871 < _2874) || ((_2870 < _2874) || (_2870 > _2876))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2872, cbModelParam._m0[17u].z, fma(_2871, cbModelParam._m0[17u].y, _2870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2872, cbModelParam._m0[18u].z, fma(_2871, cbModelParam._m0[18u].y, _2870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2872, cbModelParam._m0[19u].z, fma(_2871, cbModelParam._m0[19u].y, _2870 * cbModelParam._m0[19u].x))), _2029);
            frontier_phi_25_50_ladder = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _2118 = frontier_phi_25_50_ladder_2;
        _2120 = frontier_phi_25_50_ladder_1;
        _2122 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1098, _1099, _1100), _2029);
        _2118 = _2102.x * cbModelParam._m0[1u].z;
        _2120 = _2102.y * cbModelParam._m0[1u].z;
        _2122 = _2102.z * cbModelParam._m0[1u].z;
    }
    float _2135 = (((_1125 * _1074) + _1126) * _1090) * ((cbModelParam._m0[1u].w * (_2118 - _2020)) + _2020);
    float _2137 = (((_1125 * _1076) + _1126) * _1090) * ((cbModelParam._m0[1u].w * (_2120 - _2022)) + _2022);
    float _2139 = (((_1125 * _1077) + _1126) * _1090) * ((cbModelParam._m0[1u].w * (_2122 - _2024)) + _2024);
    float _2142 = fma(_2139, cbSceneParam._m0[89u].z, fma(_2137, cbSceneParam._m0[89u].y, _2135 * cbSceneParam._m0[89u].x));
    float _2145 = fma(_2139, cbSceneParam._m0[90u].z, fma(_2137, cbSceneParam._m0[90u].y, _2135 * cbSceneParam._m0[90u].x));
    float _2148 = fma(_2139, cbSceneParam._m0[91u].z, fma(_2137, cbSceneParam._m0[91u].y, _2135 * cbSceneParam._m0[91u].x));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2195 = _2182 / _2194;
    float _2196 = _2186 / _2194;
    float _2197 = _2190 / _2194;
    float _2344;
    float _2345;
    float _2346;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2224 = ((uint(_2197 > cbSceneParam._m0[59u].y) + uint(_2197 > cbSceneParam._m0[59u].x)) + uint(_2197 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2225 = _2224 + 43u;
        uint _2233 = _2224 + 44u;
        uint _2241 = _2224 + 45u;
        uint _2249 = _2224 + 46u;
        float _2260 = fma(_2194, cbSceneParam._m0[_2225].w, fma(_2190, cbSceneParam._m0[_2225].z, fma(_2186, cbSceneParam._m0[_2225].y, _2182 * cbSceneParam._m0[_2225].x)));
        float _2264 = fma(_2194, cbSceneParam._m0[_2233].w, fma(_2190, cbSceneParam._m0[_2233].z, fma(_2186, cbSceneParam._m0[_2233].y, _2182 * cbSceneParam._m0[_2233].x)));
        float _2272 = fma(_2194, cbSceneParam._m0[_2249].w, fma(_2190, cbSceneParam._m0[_2249].z, fma(_2186, cbSceneParam._m0[_2249].y, _2182 * cbSceneParam._m0[_2249].x)));
        float _2277 = cbSceneParam._m0[33u].z * _2272;
        float _2279 = cbSceneParam._m0[33u].w * _2272;
        float _2282 = fma(_2194, cbSceneParam._m0[_2241].w, fma(_2190, cbSceneParam._m0[_2241].z, fma(_2186, cbSceneParam._m0[_2241].y, _2182 * cbSceneParam._m0[_2241].x))) / _2272;
        float _2330 = (cbSceneParam._m0[33u].x - sqrt(((_2196 * _2196) + (_2195 * _2195)) + (_2197 * _2197))) * cbSceneParam._m0[33u].y;
        float _4744 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2337 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 + _2260) / _2272, (_2279 + _2264) / _2272), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2279 + _2260) / _2272, (_2264 - _2277) / _2272), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 - _2277) / _2272, (_2264 - _2279) / _2272), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 - _2279) / _2272, (_2277 + _2264) / _2272), _2282), 0.0)).x), vec4(0.25)));
        _2344 = 1.0 - (_2337 * cbSceneParam._m0[34u].x);
        _2345 = 1.0 - (_2337 * cbSceneParam._m0[34u].y);
        _2346 = 1.0 - (_2337 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2344 = 1.0;
        _2345 = 1.0;
        _2346 = 1.0;
    }
    float _2410;
    float _2412;
    float _2414;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2398 = fma(_2194, cbSceneParam._m0[63u].w, fma(_2190, cbSceneParam._m0[63u].z, fma(_2186, cbSceneParam._m0[63u].y, _2182 * cbSceneParam._m0[63u].x)));
        float _2399 = fma(_2194, cbSceneParam._m0[60u].w, fma(_2190, cbSceneParam._m0[60u].z, fma(_2186, cbSceneParam._m0[60u].y, _2182 * cbSceneParam._m0[60u].x))) / _2398;
        float _2400 = fma(_2194, cbSceneParam._m0[61u].w, fma(_2190, cbSceneParam._m0[61u].z, fma(_2186, cbSceneParam._m0[61u].y, _2182 * cbSceneParam._m0[61u].x))) / _2398;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2399 >= cbSceneParam._m0[64u].x) && (_2400 >= cbSceneParam._m0[64u].y)) && (_2399 <= cbSceneParam._m0[64u].z)) && (_2400 <= cbSceneParam._m0[64u].w))
        {
            float _2538 = fma(_2194, cbSceneParam._m0[62u].w, fma(_2190, cbSceneParam._m0[62u].z, fma(_2186, cbSceneParam._m0[62u].y, _2182 * cbSceneParam._m0[62u].x))) / _2398;
            float _2542 = isnan(cbSceneParam._m0[41u].w) ? _2538 : (isnan(_2538) ? cbSceneParam._m0[41u].w : max(_2538, cbSceneParam._m0[41u].w));
            float _2585 = (cbSceneParam._m0[33u].x - sqrt(((_2196 * _2196) + (_2195 * _2195)) + (_2197 * _2197))) * cbSceneParam._m0[33u].y;
            float _4760 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
            float _2592 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2399, cbSceneParam._m0[33u].w + _2400), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2399, _2400 - cbSceneParam._m0[33u].z), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2399 - cbSceneParam._m0[33u].z, _2400 - cbSceneParam._m0[33u].w), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2399 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2400), _2542), 0.0)).x), vec4(0.25)));
            float _2596 = 1.0 - (_2592 * cbSceneParam._m0[34u].x);
            float _2597 = 1.0 - (_2592 * cbSceneParam._m0[34u].y);
            float _2598 = 1.0 - (_2592 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2598) ? _2346 : (isnan(_2346) ? _2598 : min(_2346, _2598));
            frontier_phi_37_36_ladder_1 = isnan(_2597) ? _2345 : (isnan(_2345) ? _2597 : min(_2345, _2597));
            frontier_phi_37_36_ladder_2 = isnan(_2596) ? _2344 : (isnan(_2344) ? _2596 : min(_2344, _2596));
        }
        else
        {
            frontier_phi_37_36_ladder = _2346;
            frontier_phi_37_36_ladder_1 = _2345;
            frontier_phi_37_36_ladder_2 = _2344;
        }
        _2410 = frontier_phi_37_36_ladder_2;
        _2412 = frontier_phi_37_36_ladder_1;
        _2414 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2410 = _2344;
        _2412 = _2345;
        _2414 = _2346;
    }
    uvec4 _2419 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2421 = _2419.x * 14u;
    uint _2422 = _2421 + 13u;
    float _2429 = _1090 + (-1.0);
    float _2434 = (cbLight._m0[_2422].x * _2429) + 1.0;
    float _2435 = (cbLight._m0[_2422].y * _2429) + 1.0;
    float _2436 = (cbLight._m0[_2422].z * _2429) + 1.0;
    float _2437 = (cbLight._m0[_2422].w * _2429) + 1.0;
    uint _2438 = _2421 + 5u;
    float _2444 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
    uint _2448 = _2421 + 4u;
    float _2457 = isnan(1.0) ? _2434 : (isnan(_2434) ? 1.0 : min(_2434, 1.0));
    uint _2461 = _2421 | 1u;
    float _2472 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_912, _913, _914));
    float _2475 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_912, _913, _914));
    float _4796 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _4807 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2480 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * 0.3183098733425140380859375;
    float _2482 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * 0.3183098733425140380859375;
    float _2489 = ((cbLight._m0[_2438].x * _2444) * _2482) + (((cbLight._m0[_2448].x * _2410) * _2457) * _2480);
    float _2490 = ((_2444 * cbLight._m0[_2438].y) * _2482) + (((cbLight._m0[_2448].y * _2412) * _2457) * _2480);
    float _2491 = ((_2444 * cbLight._m0[_2438].z) * _2482) + (((cbLight._m0[_2448].z * _2414) * _2457) * _2480);
    uvec4 _2495 = floatBitsToUint(cbLight._m0[_2421 + 12u]);
    bool _2497 = _2495.x == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2497)
    {
        _2599 = _2489;
        _2601 = _2490;
        _2603 = _2491;
    }
    else
    {
        uint _2607 = _2421 + 6u;
        float _2623 = (dot(vec3(cbLight._m0[_2421 + 2u].xyz), vec3(_912, _913, _914)) * 0.5) + 0.5;
        float _2624 = _2623 * _2623;
        float _4818 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2625 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2626 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        _2599 = (((cbLight._m0[_2607].x * 0.3183098733425140380859375) * _2625) * _2626) + _2489;
        _2601 = (((cbLight._m0[_2607].y * 0.3183098733425140380859375) * _2625) * _2626) + _2490;
        _2603 = (((cbLight._m0[_2607].z * 0.3183098733425140380859375) * _2625) * _2626) + _2491;
    }
    bool _2606 = _2495.y == 0u;
    float _2661;
    float _2663;
    float _2665;
    if (_2606)
    {
        _2661 = _2599;
        _2663 = _2601;
        _2665 = _2603;
    }
    else
    {
        uint _2834 = _2421 + 7u;
        float _2850 = (dot(vec3(cbLight._m0[_2421 + 3u].xyz), vec3(_912, _913, _914)) * 0.5) + 0.5;
        float _2851 = _2850 * _2850;
        float _4834 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2852 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2853 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
        _2661 = (((cbLight._m0[_2834].x * 0.3183098733425140380859375) * _2852) * _2853) + _2599;
        _2663 = (((cbLight._m0[_2834].y * 0.3183098733425140380859375) * _2852) * _2853) + _2601;
        _2665 = (((cbLight._m0[_2834].z * 0.3183098733425140380859375) * _2852) * _2853) + _2603;
    }
    uint _2668 = _2421 + 8u;
    float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _915) * 0.949999988079071044921875);
    float _2682 = _2681 * _2681;
    float _2683 = cbLight._m0[_2421].x + _992;
    float _2684 = cbLight._m0[_2421].y + _993;
    float _2685 = cbLight._m0[_2421].z + _994;
    float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
    float _2690 = _2689 * _2683;
    float _2691 = _2689 * _2684;
    float _2692 = _2689 * _2685;
    float _2693 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2421].xyz));
    float _4850 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _4861 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _2697 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
    float _2698 = dot(vec3(_912, _913, _914), vec3(_2690, _2691, _2692));
    float _4872 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    float _2702 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2690, _2691, _2692));
    float _4883 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2706 = _2682 * _2682;
    float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) * 5.0);
    float _2719 = 0.959999978542327880859375 - _1071;
    float _2721 = 0.959999978542327880859375 - _1072;
    float _2722 = 0.959999978542327880859375 - _1073;
    float _2729 = 1.0 - _2682;
    float _2740 = (0.5 / (((_2697 * ((_2696 * _2729) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2729) + _2682) * _2696))) * _2696;
    float _4894 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2742 = (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
    uint _2756 = _2421 + 9u;
    float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _915) * 0.949999988079071044921875);
    float _2768 = _2767 * _2767;
    float _2769 = cbLight._m0[_2461].x + _992;
    float _2770 = cbLight._m0[_2461].y + _993;
    float _2771 = cbLight._m0[_2461].z + _994;
    float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
    float _2776 = _2775 * _2769;
    float _2777 = _2775 * _2770;
    float _2778 = _2775 * _2771;
    float _2779 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2461].xyz));
    float _4905 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _2783 = dot(vec3(_912, _913, _914), vec3(_2776, _2777, _2778));
    float _4916 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2786 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _2787 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2776, _2777, _2778));
    float _4927 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2791 = _2768 * _2768;
    float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
    float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) * 5.0);
    float _2809 = 1.0 - _2768;
    float _2819 = (0.5 / (((_2697 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2809) + _2768) * _2782))) * _2782;
    float _4938 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2821 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
    float _2831 = (((((_2802 * _2719) + _1074) * cbLight._m0[_2756].x) * _2821) * _2444) + ((((cbLight._m0[_2668].x * _2410) * ((_2718 * _2719) + _1074)) * _2742) * _2457);
    float _2832 = (((((_2802 * _2721) + _1076) * cbLight._m0[_2756].y) * _2821) * _2444) + ((((cbLight._m0[_2668].y * _2412) * ((_2718 * _2721) + _1076)) * _2742) * _2457);
    float _2833 = (((((_2802 * _2722) + _1077) * cbLight._m0[_2756].z) * _2821) * _2444) + ((((cbLight._m0[_2668].z * _2414) * ((_2718 * _2722) + _1077)) * _2742) * _2457);
    float _2889;
    float _2891;
    float _2893;
    if (_2497)
    {
        _2889 = _2831;
        _2891 = _2832;
        _2893 = _2833;
    }
    else
    {
        uint _2895 = _2421 + 2u;
        uint _2899 = _2421 + 10u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _915) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _992;
        float _2916 = cbLight._m0[_2895].y + _993;
        float _2917 = cbLight._m0[_2895].z + _994;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2895].xyz));
        float _4949 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2929 = dot(vec3(_912, _913, _914), vec3(_2922, _2923, _2924));
        float _4960 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _4971 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2697 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2955) + _2914) * _2928))) * _2928;
        float _4982 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        _2889 = (((((_2948 * _2719) + _1074) * cbLight._m0[_2899].x) * _2967) * _2968) + _2831;
        _2891 = (((((_2948 * _2721) + _1076) * cbLight._m0[_2899].y) * _2967) * _2968) + _2832;
        _2893 = (((((_2948 * _2722) + _1077) * cbLight._m0[_2899].z) * _2967) * _2968) + _2833;
    }
    float _2999;
    float _3001;
    float _3003;
    if (_2606)
    {
        _2999 = _2889;
        _3001 = _2891;
        _3003 = _2893;
    }
    else
    {
        uint _3010 = _2421 + 3u;
        uint _3014 = _2421 + 11u;
        float _3028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3010].w)) * _915) * 0.949999988079071044921875);
        float _3029 = _3028 * _3028;
        float _3030 = cbLight._m0[_3010].x + _992;
        float _3031 = cbLight._m0[_3010].y + _993;
        float _3032 = cbLight._m0[_3010].z + _994;
        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
        float _3037 = _3036 * _3030;
        float _3038 = _3036 * _3031;
        float _3039 = _3036 * _3032;
        float _3040 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_3010].xyz));
        float _4998 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _3044 = dot(vec3(_912, _913, _914), vec3(_3037, _3038, _3039));
        float _5009 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
        float _3048 = dot(vec3(cbLight._m0[_3010].xyz), vec3(_3037, _3038, _3039));
        float _5020 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3052 = _3029 * _3029;
        float _3056 = ((_3047 * _3047) * (_3052 + (-1.0))) + 1.0;
        float _3063 = exp2(log2(1.0 - (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) * 5.0);
        float _3070 = 1.0 - _3029;
        float _3080 = (0.5 / (((_2697 * ((_3043 * _3070) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _3070) + _3029) * _3043))) * _3043;
        float _5031 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3082 = (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3052 / ((_3056 * _3056) * 3.141590118408203125));
        float _3083 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
        _2999 = (((((_3063 * _2719) + _1074) * cbLight._m0[_3014].x) * _3082) * _3083) + _2889;
        _3001 = (((((_3063 * _2721) + _1076) * cbLight._m0[_3014].y) * _3082) * _3083) + _2891;
        _3003 = (((((_3063 * _2722) + _1077) * cbLight._m0[_3014].z) * _3082) * _3083) + _2893;
    }
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_2419.y == 0u)
    {
        uvec4 _3104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3105 = _3104.x;
        uint _3116 = uint((float(_3104.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1013) / _3105))) + floor(float(uint(cbSceneParam._m0[85u].x * _1012) / _3105)));
        float _3126 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3127 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
        uint _3130 = uint(isnan(14.0) ? _3127 : (isnan(_3127) ? 14.0 : min(_3127, 14.0)));
        uvec4 _3135 = texelFetch(g_lightClusterGridBuffer, int(((_3130 << 2u) + (_3116 << 6u)) >> 2u));
        uint _3136 = _3135.x;
        uint _3137 = _3104.z;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        if (((((1u << ((_3137 >> 4u) & 15u)) + 4294967295u) & _3136) == 0u) || ((_3137 & 240u) == 0u))
        {
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
        }
        else
        {
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3369 = 0.0;
            float _3370 = 0.0;
            float _3371 = 0.0;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            uint _3375 = 0u;
            uint _3384;
            bool _3385;
            for (;;)
            {
                _3384 = texelFetch(g_lightClassification, int((((_3130 << 5u) + (_3116 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                _3385 = _3384 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3385)
                {
                    frontier_phi_71_pred = _3374;
                    frontier_phi_71_pred_1 = _3373;
                    frontier_phi_71_pred_2 = _3372;
                    frontier_phi_71_pred_3 = _3371;
                    frontier_phi_71_pred_4 = _3370;
                    frontier_phi_71_pred_5 = _3369;
                }
                else
                {
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    uint _3520;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3384;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    for (;;)
                    {
                        uint _3524 = uint(findLSB(_3520)) + (_3375 << 5u);
                        uint _3521 = (_3520 + 4294967295u) & _3520;
                        uint _3526 = _3524 * 48u;
                        vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3526)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 3u)).x));
                        uint _3546 = (_3524 * 48u) + 4u;
                        vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3546)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 3u)).x));
                        uint _3565 = (_3524 * 48u) + 8u;
                        vec3 _3576 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x));
                        float _3580 = _3540.x - _2195;
                        float _3581 = _3540.y - _2196;
                        float _3582 = _3540.z - _2197;
                        float _3583 = dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582));
                        float _3586 = inversesqrt(_3583);
                        float _3587 = _3586 * _3580;
                        float _3588 = _3586 * _3581;
                        float _3589 = _3586 * _3582;
                        float _3590 = dot(vec3(_1031, _1034, _1037), vec3(_3587, _3588, _3589));
                        float _3595 = 1.0 - (_3583 * _3540.w);
                        float _5057 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                        float _3597 = sqrt(_3583) * _3559.w;
                        float _3600 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                        float _3601 = _3600 * _3600;
                        float _3604 = ((1.0 - _3601) * _3590) + _3601;
                        float _3607 = _3597 * _3597;
                        float _3611 = ((isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0))) * _3596) / ((_3607 * 0.699999988079071044921875) + 1.0);
                        float _3615 = (-0.0) - _2195;
                        float _3616 = (-0.0) - _2196;
                        float _3617 = (-0.0) - _2197;
                        float _3621 = inversesqrt(dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617)));
                        float _3622 = _3621 * _3615;
                        float _3623 = _3621 * _3616;
                        float _3624 = _3621 * _3617;
                        float _3631 = exp2(log2(1.0 / ((_3607 * 3.5) + 5.0)) * 0.25);
                        float _3632 = 1.0 - _1106;
                        float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                        float _3640 = _3639 * _3639;
                        float _3641 = _3640 * _3640;
                        float _3642 = _3622 + _3587;
                        float _3643 = _3623 + _3588;
                        float _3644 = _3624 + _3589;
                        float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                        float _3652 = dot(vec3(_1031, _1034, _1037), vec3(_3622, _3623, _3624));
                        float _5073 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3655 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3656 = dot(vec3(_1031, _1034, _1037), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                        float _5084 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3659 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                        float _3664 = _3600 * _3640;
                        float _3665 = _3664 * _3664;
                        float _3668 = ((1.0 - _3665) * _3590) + _3665;
                        float _5095 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3669 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3670 = 1.0 - _3640;
                        float _3680 = (0.5 / (((_3669 * ((_3655 * _3670) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3640) * _3655))) * _3669;
                        float _5106 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3691 = (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0)))) / ((_3663 * _3663) * ((_3607 * 2.1991131305694580078125) + 3.141590118408203125))) * _3596;
                        _3444 = (_3611 * _3559.x) + _3517;
                        _3445 = (_3611 * _3559.y) + _3518;
                        _3446 = (_3611 * _3559.z) + _3519;
                        _3441 = (_3691 * _3576.x) + _3514;
                        _3442 = (_3691 * _3576.y) + _3515;
                        _3443 = (_3691 * _3576.z) + _3516;
                        if (_3521 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3521;
                        }
                    }
                    frontier_phi_71_pred = _3446;
                    frontier_phi_71_pred_1 = _3445;
                    frontier_phi_71_pred_2 = _3444;
                    frontier_phi_71_pred_3 = _3443;
                    frontier_phi_71_pred_4 = _3442;
                    frontier_phi_71_pred_5 = _3441;
                }
                _3227 = frontier_phi_71_pred;
                _3225 = frontier_phi_71_pred_1;
                _3223 = frontier_phi_71_pred_2;
                _3221 = frontier_phi_71_pred_3;
                _3219 = frontier_phi_71_pred_4;
                _3217 = frontier_phi_71_pred_5;
                uint _3376 = _3375 + 1u;
                if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3369 = _3217;
                    _3370 = _3219;
                    _3371 = _3221;
                    _3372 = _3223;
                    _3373 = _3225;
                    _3374 = _3227;
                    _3375 = _3376;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
        }
        uvec4 _3230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3231 = _3230.z;
        uint _3233 = (_3231 >> 8u) & 15u;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        if (((4294967295u << _3233) & _3136) == 0u)
        {
            _3337 = _3216;
            _3339 = _3218;
            _3341 = _3220;
            _3343 = _3222;
            _3345 = _3224;
            _3347 = _3226;
        }
        else
        {
            float _3362 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _3363 = _3362 * _2195;
            float _3364 = _3362 * _2196;
            float _3365 = _3362 * _2197;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3233 < ((_3231 >> 12u) & 15u))
            {
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3497 = _3216;
                float _3498 = _3218;
                float _3499 = _3220;
                float _3500 = _3222;
                float _3501 = _3224;
                float _3502 = _3226;
                uint _3503 = _3233;
                uint _3512;
                bool _3513;
                for (;;)
                {
                    _3512 = texelFetch(g_lightClassification, int((((_3130 << 5u) + (_3116 << 9u)) + (_3503 << 2u)) >> 2u)).x;
                    _3513 = _3512 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3513)
                    {
                        frontier_phi_82_pred = _3502;
                        frontier_phi_82_pred_1 = _3501;
                        frontier_phi_82_pred_2 = _3500;
                        frontier_phi_82_pred_3 = _3499;
                        frontier_phi_82_pred_4 = _3498;
                        frontier_phi_82_pred_5 = _3497;
                    }
                    else
                    {
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _3718 = _3497;
                        float _3719 = _3498;
                        float _3720 = _3499;
                        float _3721 = _3500;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        uint _3724 = _3512;
                        uint _3725;
                        vec4 _3750;
                        float _3751;
                        vec4 _3766;
                        vec3 _3778;
                        vec4 _3793;
                        vec4 _3808;
                        float _3854;
                        bool _3855;
                        for (;;)
                        {
                            uint _3735 = ((_3503 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3724));
                            _3725 = (_3724 + 4294967295u) & _3724;
                            uint _3737 = _3735 * 40u;
                            _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            _3751 = _3750.w;
                            uint _3753 = (_3735 * 40u) + 4u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3768 = (_3735 * 40u) + 8u;
                            _3778 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x));
                            uint _3780 = (_3735 * 40u) + 16u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3735 * 40u) + 20u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3735 * 40u) + 24u;
                            vec4 _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3829 = (_3735 * 40u) + 28u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            _3854 = fma(_2197, _3842.z, fma(_2196, _3842.y, _3842.x * _2195)) + _3842.w;
                            _3855 = !((fma(_2197, _3823.z, fma(_2196, _3823.y, _3823.x * _2195)) + _3823.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3855)
                            {
                                float _3882 = _3750.x - _2195;
                                float _3883 = _3750.y - _2196;
                                float _3884 = _3750.z - _2197;
                                float _3885 = dot(vec3(_3882, _3883, _3884), vec3(_3882, _3883, _3884));
                                float _3888 = inversesqrt(_3885);
                                float _3889 = _3888 * _3882;
                                float _3890 = _3888 * _3883;
                                float _3891 = _3888 * _3884;
                                float _3895 = 1.0 - (_3885 / (_3751 * _3751));
                                float _5117 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3900 = sqrt(_3885) * _3766.w;
                                float _3902 = 1.39999997615814208984375 / (_3900 + 1.39999997615814208984375);
                                float _3903 = _3902 * _3902;
                                float _3906 = ((1.0 - _3903) * dot(vec3(_3889, _3890, _3891), vec3(_1031, _1034, _1037))) + _3903;
                                float _3909 = _3900 * _3900;
                                float _3913 = (fma(_2197, _3793.z, fma(_2196, _3793.y, _3793.x * _2195)) + _3793.w) / _3854;
                                float _3914 = (fma(_2197, _3808.z, fma(_2196, _3808.y, _3808.x * _2195)) + _3808.w) / _3854;
                                float _3918 = 1.0 - dot(vec2(_3913, _3914), vec2(_3913, _3914));
                                float _5133 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3920 = _3919 * (((isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0))) * _3896) / ((_3909 * 0.699999988079071044921875) + 1.0));
                                float _3932 = exp2(log2(1.0 / ((_3909 * 3.5) + 5.0)) * 0.25);
                                float _3933 = 1.0 - _1106;
                                float _3940 = sqrt(1.0 - ((1.0 - (_3933 * _3933)) * (1.0 - (_3932 * _3932))));
                                float _3941 = _3940 * _3940;
                                float _3942 = _3941 * _3941;
                                float _3943 = _3889 - _3363;
                                float _3944 = _3890 - _3364;
                                float _3945 = _3891 - _3365;
                                float _3949 = inversesqrt(dot(vec3(_3943, _3944, _3945), vec3(_3943, _3944, _3945)));
                                float _3953 = dot(vec3(_1031, _1034, _1037), vec3((-0.0) - _3363, (-0.0) - _3364, (-0.0) - _3365));
                                float _5144 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3956 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3957 = dot(vec3(_1031, _1034, _1037), vec3(_3949 * _3943, _3949 * _3944, _3949 * _3945));
                                float _5155 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3960 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3964 = ((_3960 * _3960) * (_3942 + (-1.0))) + 1.0;
                                float _3965 = _3902 * _3941;
                                float _3966 = _3965 * _3965;
                                float _3972 = ((1.0 - _3966) * dot(vec3(_1031, _1034, _1037), vec3(_3889, _3890, _3891))) + _3966;
                                float _5166 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3973 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _3974 = 1.0 - _3941;
                                float _3984 = (0.5 / (((_3973 * ((_3956 * _3974) + _3941)) + 9.9999999392252902907785028219223e-09) + (((_3973 * _3974) + _3941) * _3956))) * _3973;
                                float _5177 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3994 = (_3919 * _3896) * (((_3942 * 3.1415927410125732421875) * (isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0)))) / ((_3964 * _3964) * ((_3909 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3920 * _3766.z;
                                frontier_phi_88_pred_1 = _3920 * _3766.y;
                                frontier_phi_88_pred_2 = _3920 * _3766.x;
                                frontier_phi_88_pred_3 = _3994 * _3778.z;
                                frontier_phi_88_pred_4 = _3994 * _3778.y;
                                frontier_phi_88_pred_5 = _3994 * _3778.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4003 = frontier_phi_88_pred;
                            _4002 = frontier_phi_88_pred_1;
                            _4001 = frontier_phi_88_pred_2;
                            _4000 = frontier_phi_88_pred_3;
                            _3999 = frontier_phi_88_pred_4;
                            _3998 = frontier_phi_88_pred_5;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            if (_3725 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3725;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3710;
                        frontier_phi_82_pred_1 = _3709;
                        frontier_phi_82_pred_2 = _3708;
                        frontier_phi_82_pred_3 = _3707;
                        frontier_phi_82_pred_4 = _3706;
                        frontier_phi_82_pred_5 = _3705;
                    }
                    _3348 = frontier_phi_82_pred;
                    _3346 = frontier_phi_82_pred_1;
                    _3344 = frontier_phi_82_pred_2;
                    _3342 = frontier_phi_82_pred_3;
                    _3340 = frontier_phi_82_pred_4;
                    _3338 = frontier_phi_82_pred_5;
                    uint _3504 = _3503 + 1u;
                    if (_3504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3497 = _3338;
                        _3498 = _3340;
                        _3499 = _3342;
                        _3500 = _3344;
                        _3501 = _3346;
                        _3502 = _3348;
                        _3503 = _3504;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3344;
                frontier_phi_63_64_ladder_1 = _3348;
                frontier_phi_63_64_ladder_2 = _3346;
                frontier_phi_63_64_ladder_3 = _3342;
                frontier_phi_63_64_ladder_4 = _3340;
                frontier_phi_63_64_ladder_5 = _3338;
            }
            else
            {
                frontier_phi_63_64_ladder = _3222;
                frontier_phi_63_64_ladder_1 = _3226;
                frontier_phi_63_64_ladder_2 = _3224;
                frontier_phi_63_64_ladder_3 = _3220;
                frontier_phi_63_64_ladder_4 = _3218;
                frontier_phi_63_64_ladder_5 = _3216;
            }
            _3337 = frontier_phi_63_64_ladder_5;
            _3339 = frontier_phi_63_64_ladder_4;
            _3341 = frontier_phi_63_64_ladder_3;
            _3343 = frontier_phi_63_64_ladder;
            _3345 = frontier_phi_63_64_ladder_2;
            _3347 = frontier_phi_63_64_ladder_1;
        }
        float _3352 = isnan(1.0) ? _1090 : (isnan(_1090) ? 1.0 : min(_1090, 1.0));
        _3149 = (_3352 * _3343) + _2661;
        _3151 = (_3352 * _3345) + _2663;
        _3153 = (_3352 * _3347) + _2665;
        _3155 = ((_3337 * _1074) * _3352) + _2999;
        _3157 = ((_3339 * _1076) * _3352) + _3001;
        _3159 = ((_3341 * _1077) * _3352) + _3003;
    }
    else
    {
        _3149 = _2661;
        _3151 = _2663;
        _3153 = _2665;
        _3155 = _2999;
        _3157 = _3001;
        _3159 = _3003;
    }
    float _5193 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _5204 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _5215 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _3176 = ((isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0))) * (_3149 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1090))) + ((_3155 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    float _3177 = ((isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0))) * (_3151 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1090))) + ((_3157 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    float _3178 = ((isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_3153 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1090))) + ((_3159 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    uint _3179 = _284 + 6u;
    float _3187 = _1012 / cbSceneParam._m0[86u].x;
    float _3188 = _1013 / cbSceneParam._m0[86u].y;
    vec4 _3202 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3187, _3188, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3204 = _3202.x;
    float _3205 = _3202.y;
    float _3206 = _3202.z;
    float _3207 = _3202.w;
    float _3279;
    float _3281;
    float _3283;
    float _3285;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _3241 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _3242 = _3241 / _934;
        float _3253 = _3242 * _985;
        float _3254 = _986 * _3242;
        float _3255 = (-0.0) - _3254;
        float _3257 = _3242 * _987;
        float _3259 = (cbSceneParam._m0[77u].w * _3255) / _3241;
        float _3260 = _3259 + cbSceneParam._m0[79u].w;
        float _3261 = cbSceneParam._m0[79u].w - _3254;
        float _3267 = sqrt(((_3253 * _3253) + (_3254 * _3254)) + (_3257 * _3257));
        float _3270 = (1.0 - (cbSceneParam._m0[77u].w / _3241)) * _3267;
        float _3275 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3277 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3454;
        if (abs((_3255 - _3259) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3454 = ((((_3260 > 0.0) ? exp2(_3275 * _3260) : (2.0 - exp2(_3277 * _3260))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3270;
        }
        else
        {
            float _3398 = 1.0 / cbSceneParam._m0[80u].x;
            float _3399 = isnan(_3261) ? _3260 : (isnan(_3260) ? _3261 : max(_3260, _3261));
            float _3400 = isnan(_3261) ? _3260 : (isnan(_3260) ? _3261 : min(_3260, _3261));
            float _3409 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : min(_3399, 0.0));
            float _3410 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : min(_3400, 0.0));
            _3454 = ((abs(_3267 / _3255) * cbSceneParam._m0[80u].y) * ((((_3409 - _3410) * 2.0) - ((exp2(_3275 * (isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0)))) - exp2(_3275 * (isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))))) * _3398)) - ((exp2(_3277 * _3409) - exp2(_3277 * _3410)) * _3398))) + (_3270 * cbSceneParam._m0[80u].z);
        }
        vec4 _3456 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3187, _3188, 1.0), 0.0);
        float _3465 = exp2((_3454 * (-1.44269502162933349609375)) * (1.0 - _3456.w));
        float _3466 = log2(_3465);
        float _3482 = log2(_3207);
        _3279 = (exp2(_3482 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].x)) * _3456.x) / cbSceneParam._m0[78u].x)) + _3204;
        _3281 = (exp2(_3482 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].y)) * _3456.y) / cbSceneParam._m0[78u].y)) + _3205;
        _3283 = (exp2(_3482 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].z)) * _3456.z) / cbSceneParam._m0[78u].z)) + _3206;
        _3285 = _3465 * _3207;
    }
    else
    {
        _3279 = _3204;
        _3281 = _3205;
        _3283 = _3206;
        _3285 = _3207;
    }
    bool _3492;
    vec4 _3295;
    vec4 _3317;
    float _3319;
    float _3323;
    float _3324;
    float _3325;
    float _3326;
    bool _3336;
    for (;;)
    {
        _3295 = cbMatDynParam._m0[0u];
        float _3297 = roundEven(_3295.y);
        bool _3298 = _3297 == 3.0;
        float _3299 = log2(_3285);
        float _3306 = exp2(_3299 * cbSceneParam._m0[78u].x) * _3176;
        float _3307 = exp2(_3299 * cbSceneParam._m0[78u].y) * _3177;
        float _3308 = exp2(_3299 * cbSceneParam._m0[78u].z) * _3178;
        float _3315 = _1001 + (-0.5);
        _3317 = cbMtdParam._m0[1u];
        _3319 = _3317.y * _3315;
        float _3322 = (_3297 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3323 = _3322 * (_3298 ? _3306 : (_3306 + (cbSceneParam._m0[72u].w * _3279)));
        _3324 = _3322 * (_3298 ? _3307 : (_3307 + (cbSceneParam._m0[72u].w * _3281)));
        _3325 = _3322 * (_3298 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3283)));
        _3326 = _3315 * 0.999000012874603271484375;
        _3336 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3336)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3326) < 0.5)
            {
                _3492 = true;
                break;
            }
        }
        uint _3433 = _1050 + uint(_3295.w);
        if ((cbInstanceData._m0[_3433].w < 1.0) && ((cbInstanceData._m0[_3433].w + _3326) < 0.5))
        {
            _3492 = true;
            break;
        }
        if ((_3319 + 1.0) < _3317.x)
        {
            _3492 = true;
            break;
        }
        _3492 = false;
        break;
    }
    float _3696;
    if (_3492)
    {
        discard_state = true;
        _3696 = 0.0;
    }
    else
    {
        _3696 = cbInstanceData._m0[_3179].w;
    }
    SV_Target.x = _3323;
    SV_Target.y = _3324;
    SV_Target.z = _3325;
    SV_Target.w = _3696;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3179].w;
    discard_exit();
}


