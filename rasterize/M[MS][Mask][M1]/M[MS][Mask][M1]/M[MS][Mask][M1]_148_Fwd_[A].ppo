#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1763;
float _4139;
float _4140;
float _4141;
float _4142;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _263 = _262 * _254;
    float _264 = _262 * _255;
    float _265 = _262 * _256;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4151 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4162 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4173 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[23u].w) + _452) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4184 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[23u].w) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4195 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _550 = (_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477;
    float _551 = (_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478;
    float _552 = (_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _590 = _588.x;
    float _600 = dot(vec4(_590, _588.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _612 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_590 - _600) * cbMtdParam._m0[23u].w) + _600) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4206 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _620 = (_613 * ((_571.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _621 = (_613 * ((_571.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _622 = (_613 * ((_571.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _626 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _620;
    float _629 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _621;
    float _632 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _622;
    float _639 = ((_620 - _626) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) + _626;
    float _640 = ((_621 - _629) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) + _629;
    float _641 = ((_622 - _632) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _632;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _320) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _321) + cbTextureTilingScale._m0[14u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _470) + _722;
    float _732 = ((_703.y - _723) * _470) + _723;
    float _733 = ((_703.z - _724) * _470) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _543) + _731;
    float _757 = ((_745.y - _732) * _543) + _732;
    float _758 = ((_745.z - _733) * _543) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _613) + _758;
    float _786 = ((((_770.x - _756) * _613) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _613) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4217 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _823 = (_786 + ((((_678.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_811.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _824 = (_787 + ((((_678.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_811.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _827 = fma(_793, _270, fma(_824, _277, _823 * _263));
    float _830 = fma(_793, _271, fma(_824, _278, _823 * _264));
    float _833 = fma(_793, _272, fma(_824, _279, _823 * _265));
    float _837 = inversesqrt(dot(vec3(_827, _830, _833), vec3(_827, _830, _833)));
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _866 = _864.x;
    float _867 = 1.0 - _866;
    float _875 = (cbMtdParam._m0[19u].x + dot(vec4(_837 * _827, _837 * _830, _837 * _833, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_866 - _867) * cbMtdParam._m0[24u].z) + _867) * cbMtdParam._m0[21u].z);
    float _4228 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _876 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _878 = (-0.0) - cbMtdParam._m0[24u].x;
    float _880 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
    float _888 = _876 - ((_876 * TEXCOORD_8.x) * _881);
    float _889 = _876 - ((_876 * TEXCOORD_8.y) * _881);
    float _890 = _876 - ((_876 * TEXCOORD_8.z) * _881);
    float _897 = (_888 * ((_659.x * cbMtdParam._m0[18u].x) - _639)) + _639;
    float _898 = (_889 * ((_659.y * cbMtdParam._m0[18u].y) - _640)) + _640;
    float _899 = (_890 * ((_659.z * cbMtdParam._m0[18u].z) - _641)) + _641;
    float _914 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _915 = _914 * TEXCOORD.z;
    float _916 = _914 * TEXCOORD.w;
    vec4 _928 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _915) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _916) + cbTextureTilingScale._m0[19u].w));
    float _930 = _928.x;
    float _931 = 1.0 - _930;
    float _957 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_930 - _931) * cbMtdParam._m0[24u].w) + _931) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4249 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _958 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _966 = ((((cbMtdParam._m0[10u].x - _897) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _958) + _897;
    float _967 = ((((cbMtdParam._m0[10u].y - _898) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _958) + _898;
    float _968 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _899)) * _958) + _899;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _996 = _994.x;
    float _1014 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _996) * _470) + _996;
    float _1031 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _1014) * _543) + _1014;
    float _1048 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1031) * _613) + _1031;
    float _1054 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1048) * cbMtdParam._m0[19u].z) + _1048;
    float _1056 = _1054 - (_1054 * _888);
    float _1058 = _1056 - (_1056 * _958);
    float _1065 = (((_678.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _1069 = ((_811.z - _1065) * cbMtdParam._m0[19u].w) + _1065;
    vec4 _1085 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1092 = (_1085.x * 2.0) + (-1.0);
    float _1093 = (_1085.y * 2.0) + (-1.0);
    float _1094 = dot(vec2(_1092, _1093), vec2(_1092, _1093));
    float _4260 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1102 = ((_1085.z - _1069) * _888) + _1069;
    float _1105 = ((cbMtdParam._m0[23u].x - _1102) * _958) + _1102;
    vec4 _1128 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _915) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _916) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1134 = (_1128.x * 2.0) + (-1.0);
    float _1135 = (_1128.y * 2.0) + (-1.0);
    float _1136 = dot(vec2(_1134, _1135), vec2(_1134, _1135));
    float _4271 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1151 = ((sqrt(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) - _793) * _890) + _793;
    float _1154 = (((_1092 - _823) * _888) + _823) + (cbMtdParam._m0[21u].x * _823);
    float _1155 = (((_1093 - _824) * _889) + _824) + (cbMtdParam._m0[21u].x * _824);
    float _1166 = (((_1134 - _1154) + (_1154 * cbMtdParam._m0[22u].z)) * _958) + _1154;
    float _1167 = (((_1135 - _1155) + (_1155 * cbMtdParam._m0[22u].z)) * _958) + _1155;
    float _1168 = (_958 * (sqrt(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) - _1151)) + _1151;
    float _1170 = cbMtdParam._m0[22u].x + _811.w;
    float _1173 = fma(_1168, _270, fma(_1167, _277, _1166 * _263));
    float _1176 = fma(_1168, _271, fma(_1167, _278, _1166 * _264));
    float _1179 = fma(_1168, _272, fma(_1167, _279, _1166 * _265));
    float _1183 = inversesqrt(dot(vec3(_1173, _1176, _1179), vec3(_1173, _1176, _1179)));
    float _1184 = _1183 * _1173;
    float _1185 = _1183 * _1176;
    float _1186 = _1183 * _1179;
    float _4282 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1187 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _4304 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4315 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4326 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4337 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1192 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _1206 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1246);
    float _1257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1246);
    float _1258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1246);
    float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
    float _1263 = _1256 * _1262;
    float _1264 = _1257 * _1262;
    float _1265 = _1258 * _1262;
    vec4 _1270 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1272 = _1270.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1444 = sqrt(((_1256 * _1256) + (_1257 * _1257)) + (_1258 * _1258));
        float _1450 = (cbMatDynParam._m0[5u].x * _1444) + cbMatDynParam._m0[5u].y;
        float _4348 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1455 = (cbMatDynParam._m0[5u].z * _1444) + cbMatDynParam._m0[5u].w;
        float _4359 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) - _1451)) + _1451) < ((_1272 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1283 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1284 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1302 = fma(_1186, cbSceneParam._m0[5u].z, fma(_1185, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1184));
    float _1305 = fma(_1186, cbSceneParam._m0[6u].z, fma(_1185, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1184));
    float _1308 = fma(_1186, cbSceneParam._m0[7u].z, fma(_1185, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1184));
    uint _1321 = _301 + 9u;
    uint _1322 = _1321 + uint(cbMatDynParam._m0[0u].w);
    float _1328 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1322].x;
    float _1329 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1322].y;
    float _1330 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * cbInstanceData._m0[_1322].z;
    float _4370 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _1331 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _4381 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _1332 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1333 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _1334 = 1.0 - _1192;
    float _1335 = _1331 * _1334;
    float _1336 = _1332 * _1334;
    float _1337 = _1333 * _1334;
    float _1342 = (_1331 + (-0.039999999105930328369140625)) * _1192;
    float _1343 = (_1332 + (-0.039999999105930328369140625)) * _1192;
    float _1344 = (_1333 + (-0.039999999105930328369140625)) * _1192;
    float _1345 = _1342 + 0.039999999105930328369140625;
    float _1347 = _1343 + 0.039999999105930328369140625;
    float _1348 = _1344 + 0.039999999105930328369140625;
    vec4 _1357 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1283, cbSceneParam._m0[86u].y * _1284));
    float _1361 = ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * TEXCOORD_5.w) * _1357.x;
    float _1362 = dot(vec3(_1184, _1185, _1186), vec3(_1263, _1264, _1265));
    float _1365 = _1362 * 2.0;
    float _1369 = (_1365 * _1184) - _1263;
    float _1370 = (_1365 * _1185) - _1264;
    float _1371 = (_1365 * _1186) - _1265;
    float _1375 = abs(dot(vec3(_1263, _1264, _1265), vec3(_1184, _1185, _1186)));
    float _4403 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    float _1377 = sqrt(_1187);
    float _1390 = exp2((_1377 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1377 * 3.0));
    float _1396 = (1.0 - _1390) * ((_1377 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1397 = _1390 * _1377;
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1429 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1433 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1762;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1487 = fma(_1433, cbModelParam._m0[26u].z, fma(_1429, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1425));
        float _1491 = fma(_1433, cbModelParam._m0[27u].z, fma(_1429, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1425));
        float _1495 = fma(_1433, cbModelParam._m0[28u].z, fma(_1429, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1425));
        float _1520 = _1425 + _1184;
        float _1521 = _1429 + _1185;
        float _1522 = _1433 + _1186;
        float _1532 = fma(_1522, cbModelParam._m0[26u].z, fma(_1521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1520)) - _1487;
        float _1533 = fma(_1522, cbModelParam._m0[27u].z, fma(_1521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1520)) - _1491;
        float _1534 = fma(_1522, cbModelParam._m0[28u].z, fma(_1521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1520)) - _1495;
        float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
        float _1551 = ((_1538 * _1532) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1487 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1538 * _1533) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1491 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1538 * _1534) / cbModelParam._m0[34u].z) + ((((((_1495 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        float _1590 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1556.x + (-0.5));
        float _1592 = _1590 * (_1556.y + (-0.5));
        float _1593 = _1590 * (_1556.z + (-0.5));
        float _1600 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1563.x + (-0.5));
        float _1602 = _1600 * (_1563.y + (-0.5));
        float _1603 = _1600 * (_1563.z + (-0.5));
        float _1610 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1570.x + (-0.5));
        float _1612 = _1610 * (_1570.y + (-0.5));
        float _1613 = _1610 * (_1570.z + (-0.5));
        float _1620 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1577.x + (-0.5));
        float _1622 = _1620 * (_1577.y + (-0.5));
        float _1623 = _1620 * (_1577.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1644 = (dot(vec3(_1184, _1185, _1186), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1654 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4451 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1656 + 1.0))) + _1661) * _1624;
        float _1671 = _1592 * 0.5;
        float _1672 = _1602 * 0.5;
        float _1673 = _1612 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_1184, _1185, _1186), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4484 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1698 + 1.0))) + _1703) * _1625;
        float _1713 = _1593 * 0.5;
        float _1714 = _1603 * 0.5;
        float _1715 = _1613 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_1184, _1185, _1186), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4517 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1740 + 1.0))) + _1745) * _1626;
        _1762 = _1593;
        _1764 = _1592;
        _1765 = _1591;
        _1766 = _1603;
        _1767 = _1602;
        _1768 = _1601;
        _1769 = _1613;
        _1770 = _1612;
        _1771 = _1611;
        _1772 = _1626;
        _1773 = _1625;
        _1774 = _1624;
        _1775 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1776 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1763;
        _1764 = _1763;
        _1765 = _1763;
        _1766 = _1763;
        _1767 = _1763;
        _1768 = _1763;
        _1769 = _1763;
        _1770 = _1763;
        _1771 = _1763;
        _1772 = _1763;
        _1773 = _1763;
        _1774 = _1763;
        _1775 = 0.0;
        _1776 = 0.0;
        _1777 = 0.0;
    }
    float _2072;
    float _2073;
    float _2074;
    float _2075;
    float _2076;
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1803 = fma(_1433, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425));
        float _1807 = fma(_1433, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425));
        float _1811 = fma(_1433, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425));
        float _1834 = _1425 + _1184;
        float _1835 = _1429 + _1185;
        float _1836 = _1433 + _1186;
        float _1846 = fma(_1836, cbModelParam._m0[30u].z, fma(_1835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1834)) - _1803;
        float _1847 = fma(_1836, cbModelParam._m0[31u].z, fma(_1835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1834)) - _1807;
        float _1848 = fma(_1836, cbModelParam._m0[32u].z, fma(_1835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1834)) - _1811;
        float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
        float _1865 = ((_1852 * _1846) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1803 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1866 = ((_1852 * _1847) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1807 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1867 = ((_1852 * _1848) / cbModelParam._m0[35u].z) + ((((((_1811 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1869 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        vec4 _1876 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        vec4 _1883 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        vec4 _1890 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        float _1902 = exp2((_1869.w + (-0.5)) * 20.0) * 2.0;
        float _1903 = _1902 * (_1869.x + (-0.5));
        float _1904 = _1902 * (_1869.y + (-0.5));
        float _1905 = _1902 * (_1869.z + (-0.5));
        float _1912 = exp2((_1876.w + (-0.5)) * 20.0) * 2.0;
        float _1913 = _1912 * (_1876.x + (-0.5));
        float _1914 = _1912 * (_1876.y + (-0.5));
        float _1915 = _1912 * (_1876.z + (-0.5));
        float _1922 = exp2((_1883.w + (-0.5)) * 20.0) * 2.0;
        float _1923 = _1922 * (_1883.x + (-0.5));
        float _1924 = _1922 * (_1883.y + (-0.5));
        float _1925 = _1922 * (_1883.z + (-0.5));
        float _1932 = exp2((_1890.w + (-0.5)) * 20.0) * 2.0;
        float _1933 = _1932 * (_1890.x + (-0.5));
        float _1934 = _1932 * (_1890.y + (-0.5));
        float _1935 = _1932 * (_1890.z + (-0.5));
        float _1936 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1937 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1939 = _1903 * 0.5;
        float _1940 = _1913 * 0.5;
        float _1941 = _1923 * 0.5;
        float _1942 = dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941));
        float _1947 = (_1942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1942);
        float _1955 = (dot(vec3(_1184, _1185, _1186), vec3(_1947 * _1939, _1947 * _1940, _1947 * _1941)) + 1.0) * 0.5;
        float _4558 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1964 = sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941)) / (_1936 + 9.9999997473787516355514526367188e-06);
        float _4569 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1966 = _1965 * 2.0;
        float _1970 = (1.0 - _1965) / (_1965 + 1.0);
        float _4580 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1980 = ((((1.0 - _1971) * (_1966 + 2.0)) * exp2(log2(isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_1966 + 1.0))) + _1971) * _1936;
        float _1981 = _1904 * 0.5;
        float _1982 = _1914 * 0.5;
        float _1983 = _1924 * 0.5;
        float _1984 = dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983));
        float _1989 = (_1984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1984);
        float _1997 = (dot(vec3(_1184, _1185, _1186), vec3(_1989 * _1981, _1989 * _1982, _1989 * _1983)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2006 = sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983)) / (_1937 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2008 = _2007 * 2.0;
        float _2012 = (1.0 - _2007) / (_2007 + 1.0);
        float _4613 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2022 = ((((1.0 - _2013) * (_2008 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2008 + 1.0))) + _2013) * _1937;
        float _2023 = _1905 * 0.5;
        float _2024 = _1915 * 0.5;
        float _2025 = _1925 * 0.5;
        float _2026 = dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025));
        float _2031 = (_2026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2026);
        float _2039 = (dot(vec3(_1184, _1185, _1186), vec3(_2031 * _2023, _2031 * _2024, _2031 * _2025)) + 1.0) * 0.5;
        float _4624 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2048 = sqrt(((_2024 * _2024) + (_2023 * _2023)) + (_2025 * _2025)) / (_1938 + 9.9999997473787516355514526367188e-06);
        float _4635 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2050 = _2049 * 2.0;
        float _2054 = (1.0 - _2049) / (_2049 + 1.0);
        float _4646 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2064 = ((((1.0 - _2055) * (_2050 + 2.0)) * exp2(log2(isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2050 + 1.0))) + _2055) * _1938;
        _2072 = _1905;
        _2073 = _1904;
        _2074 = _1903;
        _2075 = _1915;
        _2076 = _1914;
        _2077 = _1913;
        _2078 = _1925;
        _2079 = _1924;
        _2080 = _1923;
        _2081 = _1938;
        _2082 = _1937;
        _2083 = _1936;
        _2084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)));
        _2085 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)));
        _2086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    }
    else
    {
        _2072 = _1763;
        _2073 = _1763;
        _2074 = _1763;
        _2075 = _1763;
        _2076 = _1763;
        _2077 = _1763;
        _2078 = _1763;
        _2079 = _1763;
        _2080 = _1763;
        _2081 = _1763;
        _2082 = _1763;
        _2083 = _1763;
        _2084 = 0.0;
        _2085 = 0.0;
        _2086 = 0.0;
    }
    float _2096 = (cbModelParam._m0[1u].x * (_2084 - _1775)) + _1775;
    float _2097 = (cbModelParam._m0[1u].x * (_2085 - _1776)) + _1776;
    float _2098 = (cbModelParam._m0[1u].x * (_2086 - _1777)) + _1777;
    float _2119 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2097, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2097, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2097, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2096));
    float _2140 = _1369 * 0.5;
    float _2141 = _1370 * 0.5;
    float _2142 = _1371 * 0.5;
    float _2143 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_2074, _2077, _2080, _2083));
    float _2146 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_2073, _2076, _2079, _2082));
    float _2149 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_2072, _2075, _2078, _2081));
    float _2183;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2156 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_1762, _1766, _1769, _1772));
        float _2160 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_1764, _1767, _1770, _1773));
        float _2164 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_1765, _1768, _1771, _1774));
        float _2171 = dot(vec4(cbModelParam._m0[39u]), vec4(_2140, _2141, _2142, 1.0));
        _2183 = dot(vec3(isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0)), isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)), isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2171) ? 0.0 : (isnan(0.0) ? _2171 : max(0.0, _2171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2183 = 1.0;
    }
    float _2194;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2185 = dot(vec4(cbModelParam._m0[40u]), vec4(_2140, _2141, _2142, 1.0));
        _2194 = dot(vec3(isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0)), isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0)), isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2185) ? 0.0 : (isnan(0.0) ? _2185 : max(0.0, _2185))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2194 = 1.0;
    }
    float _2198 = (_2194 * cbModelParam._m0[1u].x) + (_2183 * (1.0 - cbModelParam._m0[1u].x));
    float _2208 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1187);
    float _2209 = isnan(_2208) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2208 : min(cbModelParam._m0[25u].z, _2208));
    float _2289;
    float _2291;
    float _2293;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2256 = fma(_1433, cbModelParam._m0[13u].z, fma(_1429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1425)) + cbModelParam._m0[13u].w;
        float _2260 = fma(_1433, cbModelParam._m0[14u].z, fma(_1429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1425)) + cbModelParam._m0[14u].w;
        float _2264 = fma(_1433, cbModelParam._m0[15u].z, fma(_1429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1425)) + cbModelParam._m0[15u].w;
        float _2267 = fma(_1371, cbModelParam._m0[13u].z, fma(_1370, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1369));
        float _2270 = fma(_1371, cbModelParam._m0[14u].z, fma(_1370, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1369));
        float _2273 = fma(_1371, cbModelParam._m0[15u].z, fma(_1370, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1369));
        float _2301;
        if (_2267 > 0.0)
        {
            _2301 = abs((1.0 - _2256) / _2267);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2267 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2256 + 1.0) / _2267);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2301 = frontier_phi_17_15_ladder;
        }
        float _2503;
        if (_2270 > 0.0)
        {
            _2503 = abs((1.0 - _2260) / _2270);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2270 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2260 + 1.0) / _2270);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2503 = frontier_phi_26_22_ladder;
        }
        float _2757;
        if (_2273 > 0.0)
        {
            _2757 = abs((1.0 - _2264) / _2273);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2273 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2264 + 1.0) / _2273);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2757 = frontier_phi_38_33_ladder;
        }
        float _2759 = isnan(_2503) ? _2301 : (isnan(_2301) ? _2503 : min(_2301, _2503));
        float _2760 = isnan(_2757) ? _2759 : (isnan(_2759) ? _2757 : min(_2759, _2757));
        float _2764 = (_2760 * _2267) + _2256;
        float _2765 = (_2760 * _2270) + _2260;
        float _2766 = (_2760 * _2273) + _2264;
        float _2767 = _2760 * 9.9999997473787516355514526367188e-05;
        float _2769 = (-1.0) - _2767;
        float _2771 = _2767 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2766 > _2771) || ((_2766 < _2769) || ((_2765 > _2771) || ((_2765 < _2769) || ((_2764 < _2769) || (_2764 > _2771))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2766, cbModelParam._m0[9u].z, fma(_2765, cbModelParam._m0[9u].y, _2764 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2766, cbModelParam._m0[10u].z, fma(_2765, cbModelParam._m0[10u].y, _2764 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2766, cbModelParam._m0[11u].z, fma(_2765, cbModelParam._m0[11u].y, _2764 * cbModelParam._m0[11u].x))), _2209);
            frontier_phi_16_38_ladder = _2894.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2894.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2894.x * cbModelParam._m0[1u].y;
        }
        _2289 = frontier_phi_16_38_ladder_2;
        _2291 = frontier_phi_16_38_ladder_1;
        _2293 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1369, _1370, _1371), _2209);
        _2289 = _2277.x * cbModelParam._m0[1u].y;
        _2291 = _2277.y * cbModelParam._m0[1u].y;
        _2293 = _2277.z * cbModelParam._m0[1u].y;
    }
    float _2297 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1187);
    float _2298 = isnan(_2297) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2297 : min(cbModelParam._m0[25u].w, _2297));
    float _2387;
    float _2389;
    float _2391;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2351 = fma(_1433, cbModelParam._m0[21u].z, fma(_1429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1425)) + cbModelParam._m0[21u].w;
        float _2355 = fma(_1433, cbModelParam._m0[22u].z, fma(_1429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1425)) + cbModelParam._m0[22u].w;
        float _2359 = fma(_1433, cbModelParam._m0[23u].z, fma(_1429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1425)) + cbModelParam._m0[23u].w;
        float _2362 = fma(_1371, cbModelParam._m0[21u].z, fma(_1370, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1369));
        float _2365 = fma(_1371, cbModelParam._m0[22u].z, fma(_1370, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1369));
        float _2368 = fma(_1371, cbModelParam._m0[23u].z, fma(_1370, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1369));
        float _2508;
        if (_2362 > 0.0)
        {
            _2508 = abs((1.0 - _2351) / _2362);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2362 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2351 + 1.0) / _2362);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2508 = frontier_phi_28_24_ladder;
        }
        float _2784;
        if (_2365 > 0.0)
        {
            _2784 = abs((1.0 - _2355) / _2365);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2365 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2355 + 1.0) / _2365);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2784 = frontier_phi_40_35_ladder;
        }
        float _2997;
        if (_2368 > 0.0)
        {
            _2997 = abs((1.0 - _2359) / _2368);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2368 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2359 + 1.0) / _2368);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2997 = frontier_phi_49_46_ladder;
        }
        float _2999 = isnan(_2784) ? _2508 : (isnan(_2508) ? _2784 : min(_2508, _2784));
        float _3000 = isnan(_2997) ? _2999 : (isnan(_2999) ? _2997 : min(_2999, _2997));
        float _3004 = (_3000 * _2362) + _2351;
        float _3005 = (_3000 * _2365) + _2355;
        float _3006 = (_3000 * _2368) + _2359;
        float _3007 = _3000 * 9.9999997473787516355514526367188e-05;
        float _3008 = (-1.0) - _3007;
        float _3010 = _3007 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3006 > _3010) || ((_3006 < _3008) || ((_3005 > _3010) || ((_3005 < _3008) || ((_3004 < _3008) || (_3004 > _3010))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3205 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3006, cbModelParam._m0[17u].z, fma(_3005, cbModelParam._m0[17u].y, _3004 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3006, cbModelParam._m0[18u].z, fma(_3005, cbModelParam._m0[18u].y, _3004 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3006, cbModelParam._m0[19u].z, fma(_3005, cbModelParam._m0[19u].y, _3004 * cbModelParam._m0[19u].x))), _2298);
            frontier_phi_25_49_ladder = _3205.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3205.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3205.x * cbModelParam._m0[1u].z;
        }
        _2387 = frontier_phi_25_49_ladder_2;
        _2389 = frontier_phi_25_49_ladder_1;
        _2391 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1369, _1370, _1371), _2298);
        _2387 = _2371.x * cbModelParam._m0[1u].z;
        _2389 = _2371.y * cbModelParam._m0[1u].z;
        _2391 = _2371.z * cbModelParam._m0[1u].z;
    }
    float _2404 = (((_1396 * _1345) + _1397) * _1361) * ((cbModelParam._m0[1u].w * (_2387 - _2289)) + _2289);
    float _2406 = (((_1396 * _1347) + _1397) * _1361) * ((cbModelParam._m0[1u].w * (_2389 - _2291)) + _2291);
    float _2408 = (((_1396 * _1348) + _1397) * _1361) * ((cbModelParam._m0[1u].w * (_2391 - _2293)) + _2293);
    float _2411 = fma(_2408, cbSceneParam._m0[89u].z, fma(_2406, cbSceneParam._m0[89u].y, _2404 * cbSceneParam._m0[89u].x));
    float _2414 = fma(_2408, cbSceneParam._m0[90u].z, fma(_2406, cbSceneParam._m0[90u].y, _2404 * cbSceneParam._m0[90u].x));
    float _2417 = fma(_2408, cbSceneParam._m0[91u].z, fma(_2406, cbSceneParam._m0[91u].y, _2404 * cbSceneParam._m0[91u].x));
    uvec4 _2427 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2429 = _2427.x * 14u;
    uint _2430 = _2429 + 13u;
    float _2437 = _1361 + (-1.0);
    float _2442 = (cbLight._m0[_2430].x * _2437) + 1.0;
    float _2443 = (cbLight._m0[_2430].y * _2437) + 1.0;
    float _2444 = (cbLight._m0[_2430].z * _2437) + 1.0;
    float _2445 = (cbLight._m0[_2430].w * _2437) + 1.0;
    uint _2446 = _2429 + 5u;
    float _2452 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2456 = _2429 + 4u;
    float _2462 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
    uint _2466 = _2429 | 1u;
    float _2477 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_1184, _1185, _1186));
    float _2480 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_1184, _1185, _1186));
    float _4782 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _4793 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2485 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * 0.3183098733425140380859375;
    float _2487 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2494 = ((cbLight._m0[_2446].x * _2452) * _2487) + ((cbLight._m0[_2456].x * _2462) * _2485);
    float _2495 = ((_2452 * cbLight._m0[_2446].y) * _2487) + ((_2462 * cbLight._m0[_2456].y) * _2485);
    float _2496 = ((_2452 * cbLight._m0[_2446].z) * _2487) + ((_2462 * cbLight._m0[_2456].z) * _2485);
    uvec4 _2500 = floatBitsToUint(cbLight._m0[_2429 + 12u]);
    bool _2502 = _2500.x == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2502)
    {
        _2513 = _2494;
        _2515 = _2495;
        _2517 = _2496;
    }
    else
    {
        uint _2521 = _2429 + 6u;
        float _2537 = (dot(vec3(cbLight._m0[_2429 + 2u].xyz), vec3(_1184, _1185, _1186)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4804 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2540 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2513 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2494;
        _2515 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2495;
        _2517 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2496;
    }
    bool _2520 = _2500.y == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2520)
    {
        _2558 = _2513;
        _2560 = _2515;
        _2562 = _2517;
    }
    else
    {
        uint _2728 = _2429 + 7u;
        float _2744 = (dot(vec3(cbLight._m0[_2429 + 3u].xyz), vec3(_1184, _1185, _1186)) * 0.5) + 0.5;
        float _2745 = _2744 * _2744;
        float _4820 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2746 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2747 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2558 = (((cbLight._m0[_2728].x * 0.3183098733425140380859375) * _2746) * _2747) + _2513;
        _2560 = (((cbLight._m0[_2728].y * 0.3183098733425140380859375) * _2746) * _2747) + _2515;
        _2562 = (((cbLight._m0[_2728].z * 0.3183098733425140380859375) * _2746) * _2747) + _2517;
    }
    uint _2565 = _2429 + 8u;
    float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _1187) * 0.949999988079071044921875);
    float _2579 = _2578 * _2578;
    float _2580 = cbLight._m0[_2429].x + _1263;
    float _2581 = cbLight._m0[_2429].y + _1264;
    float _2582 = cbLight._m0[_2429].z + _1265;
    float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
    float _2587 = _2586 * _2580;
    float _2588 = _2586 * _2581;
    float _2589 = _2586 * _2582;
    float _2590 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_2429].xyz));
    float _4836 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _4847 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
    float _2594 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2595 = dot(vec3(_1184, _1185, _1186), vec3(_2587, _2588, _2589));
    float _4858 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2599 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2587, _2588, _2589));
    float _4869 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2603 = _2579 * _2579;
    float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
    float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
    float _2616 = 0.959999978542327880859375 - _1342;
    float _2618 = 0.959999978542327880859375 - _1343;
    float _2619 = 0.959999978542327880859375 - _1344;
    float _2626 = 1.0 - _2579;
    float _2637 = (0.5 / (((_2594 * ((_2593 * _2626) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2626) + _2579) * _2593))) * _2593;
    float _4880 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
    uint _2650 = _2429 + 9u;
    float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2466].w)) * _1187) * 0.949999988079071044921875);
    float _2662 = _2661 * _2661;
    float _2663 = cbLight._m0[_2466].x + _1263;
    float _2664 = cbLight._m0[_2466].y + _1264;
    float _2665 = cbLight._m0[_2466].z + _1265;
    float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
    float _2670 = _2669 * _2663;
    float _2671 = _2669 * _2664;
    float _2672 = _2669 * _2665;
    float _2673 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_2466].xyz));
    float _4891 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2677 = dot(vec3(_1184, _1185, _1186), vec3(_2670, _2671, _2672));
    float _4902 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_2670, _2671, _2672));
    float _4913 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2662 * _2662;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0);
    float _2703 = 1.0 - _2662;
    float _2713 = (0.5 / (((_2594 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2703) + _2662) * _2676))) * _2676;
    float _4924 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    float _2725 = (((((_2696 * _2616) + _1345) * cbLight._m0[_2650].x) * _2715) * _2452) + (((((_2615 * _2616) + _1345) * cbLight._m0[_2565].x) * _2639) * _2462);
    float _2726 = (((((_2696 * _2618) + _1347) * cbLight._m0[_2650].y) * _2715) * _2452) + (((((_2615 * _2618) + _1347) * cbLight._m0[_2565].y) * _2639) * _2462);
    float _2727 = (((((_2696 * _2619) + _1348) * cbLight._m0[_2650].z) * _2715) * _2452) + (((((_2615 * _2619) + _1348) * cbLight._m0[_2565].z) * _2639) * _2462);
    float _2789;
    float _2791;
    float _2793;
    if (_2502)
    {
        _2789 = _2725;
        _2791 = _2726;
        _2793 = _2727;
    }
    else
    {
        uint _2795 = _2429 + 2u;
        uint _2799 = _2429 + 10u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _1187) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _1263;
        float _2816 = cbLight._m0[_2795].y + _1264;
        float _2817 = cbLight._m0[_2795].z + _1265;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_2795].xyz));
        float _4935 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2829 = dot(vec3(_1184, _1185, _1186), vec3(_2822, _2823, _2824));
        float _4946 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4957 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2848 = exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0);
        float _2855 = 1.0 - _2814;
        float _2865 = (0.5 / (((_2594 * ((_2828 * _2855) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2855) + _2814) * _2828))) * _2828;
        float _4968 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2789 = (((((_2848 * _2616) + _1345) * cbLight._m0[_2799].x) * _2867) * _2868) + _2725;
        _2791 = (((((_2848 * _2618) + _1347) * cbLight._m0[_2799].y) * _2867) * _2868) + _2726;
        _2793 = (((((_2848 * _2619) + _1348) * cbLight._m0[_2799].z) * _2867) * _2868) + _2727;
    }
    float _2903;
    float _2905;
    float _2907;
    if (_2520)
    {
        _2903 = _2789;
        _2905 = _2791;
        _2907 = _2793;
    }
    else
    {
        uint _2914 = _2429 + 3u;
        uint _2918 = _2429 + 11u;
        float _2932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2914].w)) * _1187) * 0.949999988079071044921875);
        float _2933 = _2932 * _2932;
        float _2934 = cbLight._m0[_2914].x + _1263;
        float _2935 = cbLight._m0[_2914].y + _1264;
        float _2936 = cbLight._m0[_2914].z + _1265;
        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
        float _2941 = _2940 * _2934;
        float _2942 = _2940 * _2935;
        float _2943 = _2940 * _2936;
        float _2944 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_2914].xyz));
        float _4984 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _2948 = dot(vec3(_1184, _1185, _1186), vec3(_2941, _2942, _2943));
        float _4995 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _2952 = dot(vec3(cbLight._m0[_2914].xyz), vec3(_2941, _2942, _2943));
        float _5006 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2956 = _2933 * _2933;
        float _2960 = ((_2951 * _2951) * (_2956 + (-1.0))) + 1.0;
        float _2967 = exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0);
        float _2974 = 1.0 - _2933;
        float _2984 = (0.5 / (((_2594 * ((_2947 * _2974) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2974) + _2933) * _2947))) * _2947;
        float _5017 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2986 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2956 / ((_2960 * _2960) * 3.141590118408203125));
        float _2987 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2903 = (((((_2967 * _2616) + _1345) * cbLight._m0[_2918].x) * _2986) * _2987) + _2789;
        _2905 = (((((_2967 * _2618) + _1347) * cbLight._m0[_2918].y) * _2986) * _2987) + _2791;
        _2907 = (((((_2967 * _2619) + _1348) * cbLight._m0[_2918].z) * _2986) * _2987) + _2793;
    }
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    if (_2427.y == 0u)
    {
        float _3062 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3063 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3062;
        float _3064 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3062;
        float _3065 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3062;
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.x;
        uint _3089 = uint((float(_3077.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1284) / _3078))) + floor(float(uint(cbSceneParam._m0[85u].x * _1283) / _3078)));
        float _3099 = (log2(_3065 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3100 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
        uint _3103 = uint(isnan(14.0) ? _3100 : (isnan(_3100) ? 14.0 : min(_3100, 14.0)));
        uvec4 _3108 = texelFetch(g_lightClusterGridBuffer, int(((_3103 << 2u) + (_3089 << 6u)) >> 2u));
        uint _3109 = _3108.x;
        uint _3110 = _3077.z;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        if (((((1u << ((_3110 >> 4u) & 15u)) + 4294967295u) & _3109) == 0u) || ((_3110 & 240u) == 0u))
        {
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
        }
        else
        {
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            uint _3368 = 0u;
            uint _3377;
            bool _3378;
            for (;;)
            {
                _3377 = texelFetch(g_lightClassification, int((((_3103 << 5u) + (_3089 << 9u)) + (_3368 << 2u)) >> 2u)).x;
                _3378 = _3377 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3378)
                {
                    frontier_phi_66_pred = _3362;
                    frontier_phi_66_pred_1 = _3367;
                    frontier_phi_66_pred_2 = _3366;
                    frontier_phi_66_pred_3 = _3365;
                    frontier_phi_66_pred_4 = _3364;
                    frontier_phi_66_pred_5 = _3363;
                }
                else
                {
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    uint _3513;
                    _3507 = _3362;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3377;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    for (;;)
                    {
                        uint _3517 = uint(findLSB(_3513)) + (_3368 << 5u);
                        uint _3514 = (_3513 + 4294967295u) & _3513;
                        uint _3519 = _3517 * 48u;
                        vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3519)).x, texelFetch(g_PointLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3519 + 3u)).x));
                        uint _3539 = (_3517 * 48u) + 4u;
                        vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3539)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 3u)).x));
                        uint _3558 = (_3517 * 48u) + 8u;
                        vec3 _3569 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3558)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 2u)).x));
                        float _3573 = _3533.x - _3063;
                        float _3574 = _3533.y - _3064;
                        float _3575 = _3533.z - _3065;
                        float _3576 = dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575));
                        float _3579 = inversesqrt(_3576);
                        float _3580 = _3579 * _3573;
                        float _3581 = _3579 * _3574;
                        float _3582 = _3579 * _3575;
                        float _3583 = dot(vec3(_1302, _1305, _1308), vec3(_3580, _3581, _3582));
                        float _3588 = 1.0 - (_3576 * _3533.w);
                        float _5043 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3589 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3590 = sqrt(_3576) * _3552.w;
                        float _3593 = 1.39999997615814208984375 / (_3590 + 1.39999997615814208984375);
                        float _3594 = _3593 * _3593;
                        float _3597 = ((1.0 - _3594) * _3583) + _3594;
                        float _3600 = _3590 * _3590;
                        float _3604 = ((isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0))) * _3589) / ((_3600 * 0.699999988079071044921875) + 1.0);
                        float _3608 = (-0.0) - _3063;
                        float _3609 = (-0.0) - _3064;
                        float _3610 = (-0.0) - _3065;
                        float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                        float _3615 = _3614 * _3608;
                        float _3616 = _3614 * _3609;
                        float _3617 = _3614 * _3610;
                        float _3625 = exp2(log2(1.0 / ((_3600 * 3.5) + 5.0)) * 0.25);
                        float _3626 = 1.0 - _1377;
                        float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                        float _3634 = _3633 * _3633;
                        float _3635 = _3634 * _3634;
                        float _3636 = _3615 + _3580;
                        float _3637 = _3616 + _3581;
                        float _3638 = _3617 + _3582;
                        float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                        float _3646 = dot(vec3(_1302, _1305, _1308), vec3(_3615, _3616, _3617));
                        float _5059 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3649 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3650 = dot(vec3(_1302, _1305, _1308), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                        float _5070 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                        float _3653 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                        float _3658 = _3593 * _3634;
                        float _3659 = _3658 * _3658;
                        float _3662 = ((1.0 - _3659) * _3583) + _3659;
                        float _5081 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3663 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3664 = 1.0 - _3634;
                        float _3674 = (0.5 / (((_3663 * ((_3649 * _3664) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3663 * _3664) + _3634) * _3649))) * _3663;
                        float _5092 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3685 = (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) / ((_3657 * _3657) * ((_3600 * 2.1991131305694580078125) + 3.141590118408203125))) * _3589;
                        _3437 = (_3604 * _3552.x) + _3510;
                        _3438 = (_3604 * _3552.y) + _3511;
                        _3439 = (_3604 * _3552.z) + _3512;
                        _3434 = (_3685 * _3569.x) + _3507;
                        _3435 = (_3685 * _3569.y) + _3508;
                        _3436 = (_3685 * _3569.z) + _3509;
                        if (_3514 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3507 = _3434;
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3514;
                        }
                    }
                    frontier_phi_66_pred = _3434;
                    frontier_phi_66_pred_1 = _3439;
                    frontier_phi_66_pred_2 = _3438;
                    frontier_phi_66_pred_3 = _3437;
                    frontier_phi_66_pred_4 = _3436;
                    frontier_phi_66_pred_5 = _3435;
                }
                _3211 = frontier_phi_66_pred;
                _3221 = frontier_phi_66_pred_1;
                _3219 = frontier_phi_66_pred_2;
                _3217 = frontier_phi_66_pred_3;
                _3215 = frontier_phi_66_pred_4;
                _3213 = frontier_phi_66_pred_5;
                uint _3369 = _3368 + 1u;
                if (_3369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3362 = _3211;
                    _3363 = _3213;
                    _3364 = _3215;
                    _3365 = _3217;
                    _3366 = _3219;
                    _3367 = _3221;
                    _3368 = _3369;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
        }
        uvec4 _3224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3225 = _3224.z;
        uint _3227 = (_3225 >> 8u) & 15u;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        if (((4294967295u << _3227) & _3109) == 0u)
        {
            _3330 = _3210;
            _3332 = _3212;
            _3334 = _3214;
            _3336 = _3216;
            _3338 = _3218;
            _3340 = _3220;
        }
        else
        {
            float _3355 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
            float _3356 = _3355 * _3063;
            float _3357 = _3355 * _3064;
            float _3358 = _3355 * _3065;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3227 < ((_3225 >> 12u) & 15u))
            {
                float _3331;
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3341;
                float _3490 = _3210;
                float _3491 = _3212;
                float _3492 = _3214;
                float _3493 = _3216;
                float _3494 = _3218;
                float _3495 = _3220;
                uint _3496 = _3227;
                uint _3505;
                bool _3506;
                for (;;)
                {
                    _3505 = texelFetch(g_lightClassification, int((((_3103 << 5u) + (_3089 << 9u)) + (_3496 << 2u)) >> 2u)).x;
                    _3506 = _3505 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3506)
                    {
                        frontier_phi_77_pred = _3495;
                        frontier_phi_77_pred_1 = _3494;
                        frontier_phi_77_pred_2 = _3493;
                        frontier_phi_77_pred_3 = _3492;
                        frontier_phi_77_pred_4 = _3491;
                        frontier_phi_77_pred_5 = _3490;
                    }
                    else
                    {
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3712 = _3490;
                        float _3713 = _3491;
                        float _3714 = _3492;
                        float _3715 = _3493;
                        float _3716 = _3494;
                        float _3717 = _3495;
                        uint _3718 = _3505;
                        uint _3719;
                        vec4 _3744;
                        float _3745;
                        vec4 _3760;
                        vec3 _3772;
                        vec4 _3787;
                        vec4 _3802;
                        float _3848;
                        bool _3849;
                        for (;;)
                        {
                            uint _3729 = ((_3496 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3718));
                            _3719 = (_3718 + 4294967295u) & _3718;
                            uint _3731 = _3729 * 40u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            _3745 = _3744.w;
                            uint _3747 = (_3729 * 40u) + 4u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3729 * 40u) + 8u;
                            _3772 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x));
                            uint _3774 = (_3729 * 40u) + 16u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3729 * 40u) + 20u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3804 = (_3729 * 40u) + 24u;
                            vec4 _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3823 = (_3729 * 40u) + 28u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            _3848 = fma(_3065, _3836.z, fma(_3064, _3836.y, _3836.x * _3063)) + _3836.w;
                            _3849 = !((fma(_3065, _3817.z, fma(_3064, _3817.y, _3817.x * _3063)) + _3817.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3849)
                            {
                                float _3876 = _3744.x - _3063;
                                float _3877 = _3744.y - _3064;
                                float _3878 = _3744.z - _3065;
                                float _3879 = dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878));
                                float _3882 = inversesqrt(_3879);
                                float _3883 = _3882 * _3876;
                                float _3884 = _3882 * _3877;
                                float _3885 = _3882 * _3878;
                                float _3889 = 1.0 - (_3879 / (_3745 * _3745));
                                float _5103 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3894 = sqrt(_3879) * _3760.w;
                                float _3896 = 1.39999997615814208984375 / (_3894 + 1.39999997615814208984375);
                                float _3897 = _3896 * _3896;
                                float _3900 = ((1.0 - _3897) * dot(vec3(_3883, _3884, _3885), vec3(_1302, _1305, _1308))) + _3897;
                                float _3903 = _3894 * _3894;
                                float _3907 = (fma(_3065, _3787.z, fma(_3064, _3787.y, _3787.x * _3063)) + _3787.w) / _3848;
                                float _3908 = (fma(_3065, _3802.z, fma(_3064, _3802.y, _3802.x * _3063)) + _3802.w) / _3848;
                                float _3912 = 1.0 - dot(vec2(_3907, _3908), vec2(_3907, _3908));
                                float _5119 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3914 = _3913 * (((isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0))) * _3890) / ((_3903 * 0.699999988079071044921875) + 1.0));
                                float _3926 = exp2(log2(1.0 / ((_3903 * 3.5) + 5.0)) * 0.25);
                                float _3927 = 1.0 - _1377;
                                float _3934 = sqrt(1.0 - ((1.0 - (_3927 * _3927)) * (1.0 - (_3926 * _3926))));
                                float _3935 = _3934 * _3934;
                                float _3936 = _3935 * _3935;
                                float _3937 = _3883 - _3356;
                                float _3938 = _3884 - _3357;
                                float _3939 = _3885 - _3358;
                                float _3943 = inversesqrt(dot(vec3(_3937, _3938, _3939), vec3(_3937, _3938, _3939)));
                                float _3947 = dot(vec3(_1302, _1305, _1308), vec3((-0.0) - _3356, (-0.0) - _3357, (-0.0) - _3358));
                                float _5130 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3950 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3951 = dot(vec3(_1302, _1305, _1308), vec3(_3943 * _3937, _3943 * _3938, _3943 * _3939));
                                float _5141 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3954 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3958 = ((_3954 * _3954) * (_3936 + (-1.0))) + 1.0;
                                float _3959 = _3896 * _3935;
                                float _3960 = _3959 * _3959;
                                float _3966 = ((1.0 - _3960) * dot(vec3(_1302, _1305, _1308), vec3(_3883, _3884, _3885))) + _3960;
                                float _5152 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3967 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3968 = 1.0 - _3935;
                                float _3978 = (0.5 / (((_3967 * ((_3950 * _3968) + _3935)) + 9.9999999392252902907785028219223e-09) + (((_3967 * _3968) + _3935) * _3950))) * _3967;
                                float _5163 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3988 = (_3913 * _3890) * (((_3936 * 3.1415927410125732421875) * (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) / ((_3958 * _3958) * ((_3903 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3914 * _3760.y;
                                frontier_phi_83_pred_1 = _3914 * _3760.x;
                                frontier_phi_83_pred_2 = _3988 * _3772.z;
                                frontier_phi_83_pred_3 = _3988 * _3772.y;
                                frontier_phi_83_pred_4 = _3988 * _3772.x;
                                frontier_phi_83_pred_5 = _3914 * _3760.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3996 = frontier_phi_83_pred;
                            _3995 = frontier_phi_83_pred_1;
                            _3994 = frontier_phi_83_pred_2;
                            _3993 = frontier_phi_83_pred_3;
                            _3992 = frontier_phi_83_pred_4;
                            _3997 = frontier_phi_83_pred_5;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            if (_3719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3719;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3704;
                        frontier_phi_77_pred_1 = _3703;
                        frontier_phi_77_pred_2 = _3702;
                        frontier_phi_77_pred_3 = _3701;
                        frontier_phi_77_pred_4 = _3700;
                        frontier_phi_77_pred_5 = _3699;
                    }
                    _3341 = frontier_phi_77_pred;
                    _3339 = frontier_phi_77_pred_1;
                    _3337 = frontier_phi_77_pred_2;
                    _3335 = frontier_phi_77_pred_3;
                    _3333 = frontier_phi_77_pred_4;
                    _3331 = frontier_phi_77_pred_5;
                    uint _3497 = _3496 + 1u;
                    if (_3497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3490 = _3331;
                        _3491 = _3333;
                        _3492 = _3335;
                        _3493 = _3337;
                        _3494 = _3339;
                        _3495 = _3341;
                        _3496 = _3497;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3335;
                frontier_phi_58_59_ladder_1 = _3341;
                frontier_phi_58_59_ladder_2 = _3339;
                frontier_phi_58_59_ladder_3 = _3337;
                frontier_phi_58_59_ladder_4 = _3333;
                frontier_phi_58_59_ladder_5 = _3331;
            }
            else
            {
                frontier_phi_58_59_ladder = _3214;
                frontier_phi_58_59_ladder_1 = _3220;
                frontier_phi_58_59_ladder_2 = _3218;
                frontier_phi_58_59_ladder_3 = _3216;
                frontier_phi_58_59_ladder_4 = _3212;
                frontier_phi_58_59_ladder_5 = _3210;
            }
            _3330 = frontier_phi_58_59_ladder_5;
            _3332 = frontier_phi_58_59_ladder_4;
            _3334 = frontier_phi_58_59_ladder;
            _3336 = frontier_phi_58_59_ladder_3;
            _3338 = frontier_phi_58_59_ladder_2;
            _3340 = frontier_phi_58_59_ladder_1;
        }
        float _3345 = isnan(1.0) ? _1361 : (isnan(_1361) ? 1.0 : min(_1361, 1.0));
        _3122 = (_3345 * _3336) + _2558;
        _3124 = (_3345 * _3338) + _2560;
        _3126 = (_3345 * _3340) + _2562;
        _3128 = ((_3330 * _1345) * _3345) + _2903;
        _3130 = ((_3332 * _1347) * _3345) + _2905;
        _3132 = ((_3334 * _1348) * _3345) + _2907;
    }
    else
    {
        _3122 = _2558;
        _3124 = _2560;
        _3126 = _2562;
        _3128 = _2903;
        _3130 = _2905;
        _3132 = _2907;
    }
    float _5179 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
    float _5190 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _5201 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _3149 = ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3122 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1361))) + ((_3128 + ((isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))) * _2198)) * cbPerFrame._m0[3u].x);
    float _3150 = ((isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3124 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1361))) + ((_3130 + ((isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0))) * _2198)) * cbPerFrame._m0[3u].x);
    float _3151 = ((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3126 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1361))) + ((_3132 + ((isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0))) * _2198)) * cbPerFrame._m0[3u].x);
    uint _3152 = _301 + 6u;
    float _3160 = _1283 / cbSceneParam._m0[86u].x;
    float _3161 = _1284 / cbSceneParam._m0[86u].y;
    vec4 _3175 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3160, _3161, (log2((isnan(cbSceneParam._m0[77u].w) ? _1206 : (isnan(_1206) ? cbSceneParam._m0[77u].w : min(_1206, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3177 = _3175.x;
    float _3178 = _3175.y;
    float _3179 = _3175.z;
    float _3180 = _3175.w;
    float _3272;
    float _3274;
    float _3276;
    float _3278;
    if (_1206 > cbSceneParam._m0[78u].w)
    {
        float _3235 = isnan(_1206) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1206 : min(cbSceneParam._m0[80u].w, _1206));
        float _3236 = _3235 / _1206;
        float _3247 = _3236 * _1256;
        float _3248 = _1257 * _3236;
        float _3249 = (-0.0) - _3248;
        float _3250 = _3236 * _1258;
        float _3252 = (cbSceneParam._m0[77u].w * _3249) / _3235;
        float _3253 = _3252 + cbSceneParam._m0[79u].w;
        float _3254 = cbSceneParam._m0[79u].w - _3248;
        float _3260 = sqrt(((_3247 * _3247) + (_3248 * _3248)) + (_3250 * _3250));
        float _3263 = (1.0 - (cbSceneParam._m0[77u].w / _3235)) * _3260;
        float _3268 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3270 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3447;
        if (abs((_3249 - _3252) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3447 = ((((_3253 > 0.0) ? exp2(_3268 * _3253) : (2.0 - exp2(_3270 * _3253))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3263;
        }
        else
        {
            float _3391 = 1.0 / cbSceneParam._m0[80u].x;
            float _3392 = isnan(_3254) ? _3253 : (isnan(_3253) ? _3254 : max(_3253, _3254));
            float _3393 = isnan(_3254) ? _3253 : (isnan(_3253) ? _3254 : min(_3253, _3254));
            float _3402 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : min(_3392, 0.0));
            float _3403 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : min(_3393, 0.0));
            _3447 = ((abs(_3260 / _3249) * cbSceneParam._m0[80u].y) * ((((_3402 - _3403) * 2.0) - ((exp2(_3268 * (isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0)))) - exp2(_3268 * (isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))))) * _3391)) - ((exp2(_3270 * _3402) - exp2(_3270 * _3403)) * _3391))) + (_3263 * cbSceneParam._m0[80u].z);
        }
        vec4 _3449 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3160, _3161, 1.0), 0.0);
        float _3458 = exp2((_3447 * (-1.44269502162933349609375)) * (1.0 - _3449.w));
        float _3459 = log2(_3458);
        float _3475 = log2(_3180);
        _3272 = (exp2(_3475 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3459 * cbSceneParam._m0[78u].x)) * _3449.x) / cbSceneParam._m0[78u].x)) + _3177;
        _3274 = (exp2(_3475 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3459 * cbSceneParam._m0[78u].y)) * _3449.y) / cbSceneParam._m0[78u].y)) + _3178;
        _3276 = (exp2(_3475 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3459 * cbSceneParam._m0[78u].z)) * _3449.z) / cbSceneParam._m0[78u].z)) + _3179;
        _3278 = _3458 * _3180;
    }
    else
    {
        _3272 = _3177;
        _3274 = _3178;
        _3276 = _3179;
        _3278 = _3180;
    }
    bool _3485;
    vec4 _3288;
    vec4 _3310;
    float _3312;
    float _3316;
    float _3317;
    float _3318;
    float _3319;
    bool _3329;
    for (;;)
    {
        _3288 = cbMatDynParam._m0[0u];
        float _3290 = roundEven(_3288.y);
        bool _3291 = _3290 == 3.0;
        float _3292 = log2(_3278);
        float _3299 = exp2(_3292 * cbSceneParam._m0[78u].x) * _3149;
        float _3300 = exp2(_3292 * cbSceneParam._m0[78u].y) * _3150;
        float _3301 = exp2(_3292 * cbSceneParam._m0[78u].z) * _3151;
        float _3308 = _1272 + (-0.5);
        _3310 = cbMtdParam._m0[1u];
        _3312 = _3310.y * _3308;
        float _3315 = (_3290 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3316 = _3315 * (_3291 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3272)));
        _3317 = _3315 * (_3291 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3274)));
        _3318 = _3315 * (_3291 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3276)));
        _3319 = _3308 * 0.999000012874603271484375;
        _3329 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3329)
        {
            if ((cbInstanceData._m0[_301 + 7u].x + _3319) < 0.5)
            {
                _3485 = true;
                break;
            }
        }
        uint _3426 = _1321 + uint(_3288.w);
        if ((cbInstanceData._m0[_3426].w < 1.0) && ((cbInstanceData._m0[_3426].w + _3319) < 0.5))
        {
            _3485 = true;
            break;
        }
        if ((_3312 + 1.0) < _3310.x)
        {
            _3485 = true;
            break;
        }
        _3485 = false;
        break;
    }
    float _3690;
    if (_3485)
    {
        discard_state = true;
        _3690 = 0.0;
    }
    else
    {
        _3690 = cbInstanceData._m0[_3152].w;
    }
    SV_Target.x = _3316;
    SV_Target.y = _3317;
    SV_Target.z = _3318;
    SV_Target.w = _3690;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3152].w;
    discard_exit();
}


