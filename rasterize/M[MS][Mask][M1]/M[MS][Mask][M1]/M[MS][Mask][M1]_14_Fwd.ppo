#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1315;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3642 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3653 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3664 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _428 = _426.x;
    float _440 = dot(vec4(_428, _426.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _457 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_428 - _440) * cbMtdParam._m0[23u].w) + _440) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3675 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _468 = (_326.x * cbMtdParam._m0[9u].x) * ((_458 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357);
    float _469 = (_326.y * cbMtdParam._m0[9u].y) * ((_458 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358);
    float _470 = (_326.z * cbMtdParam._m0[9u].z) * ((_458 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359);
    float _474 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _468;
    float _477 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _469;
    float _480 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _470;
    float _488 = (((_468 - _474) * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) + _474) * 4.55000019073486328125;
    float _490 = (((_469 - _477) * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) + _477) * 4.55000019073486328125;
    float _492 = (((_470 - _480) * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) + _480) * 4.55000019073486328125;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _556 = _552.z;
    float _565 = ((_535.z - _556) * _458) + _556;
    float _568 = ((((_535.x - _554) * _458) + _554) * 2.0) + (-1.0);
    float _569 = ((((_535.y - _555) * _458) + _555) * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3686 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _575 = sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _635 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_618 - _619) * cbMtdParam._m0[24u].z) + _619) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3697 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _643 = (_636 * (cbMtdParam._m0[17u].x - _488)) + _488;
    float _644 = (_636 * (cbMtdParam._m0[17u].y - _490)) + _490;
    float _645 = (_636 * (cbMtdParam._m0[17u].z - _492)) + _492;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _673 = _671.x;
    float _690 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _673) * _458) + _673;
    float _694 = ((_657.x - _690) * cbMtdParam._m0[19u].z) + _690;
    float _696 = _694 - (_694 * _636);
    float _701 = (((_510.z - _565) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _565;
    float _705 = ((_591.z - _701) * cbMtdParam._m0[19u].w) + _701;
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _725 = (_718.x * 2.0) + (-1.0);
    float _726 = (_718.y * 2.0) + (-1.0);
    float _727 = dot(vec2(_725, _726), vec2(_725, _726));
    float _3708 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _735 = (_636 * (_718.z - _705)) + _705;
    float _744 = (_568 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_510.x * 2.0) + (-1.0)))) + (((_591.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _745 = (_569 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_510.y * 2.0) + (-1.0)))) + (((_591.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _757 = (((_725 - _744) + (cbMtdParam._m0[21u].x * _744)) * _636) + _744;
    float _758 = (((_726 - _745) + (cbMtdParam._m0[21u].x * _745)) * _636) + _745;
    float _759 = (_636 * (sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) - _575)) + _575;
    float _761 = cbMtdParam._m0[22u].x + _591.w;
    float _764 = fma(_759, _236 * NORMAL.x, fma(_758, _243 * TANGENT.x, (_229 * _221) * _757));
    float _767 = fma(_759, _236 * NORMAL.y, fma(_758, _243 * TANGENT.y, (_229 * _222) * _757));
    float _770 = fma(_759, _236 * NORMAL.z, fma(_758, _243 * TANGENT.z, (_229 * _223) * _757));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _3719 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _778 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3741 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3752 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3763 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3774 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _783 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _848 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _838);
    float _849 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _838);
    float _850 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _838);
    float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
    float _855 = _848 * _854;
    float _856 = _849 * _854;
    float _857 = _850 * _854;
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _885 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _888 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _902 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3785 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _914 = 1.0 - _783;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _783;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _783;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _783;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _941 = ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * TEXCOORD_5.w) * _937.x;
    float _942 = dot(vec3(_775, _776, _777), vec3(_855, _856, _857));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _775) - _855;
    float _950 = (_945 * _776) - _856;
    float _951 = (_945 * _777) - _857;
    float _955 = abs(dot(vec3(_855, _856, _857), vec3(_775, _776, _777)));
    float _3818 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_778);
    float _970 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _976 = (1.0 - _970) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _977 = _970 * _957;
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_1013, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005));
        float _1043 = fma(_1013, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005));
        float _1047 = fma(_1013, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005));
        float _1072 = _1005 + _775;
        float _1073 = _1009 + _776;
        float _1074 = _1013 + _777;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1039;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1043;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1047;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_775, _776, _777), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3866 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_775, _776, _777), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3899 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_775, _776, _777), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3932 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_1013, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005));
        float _1358 = fma(_1013, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005));
        float _1362 = fma(_1013, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005));
        float _1385 = _1005 + _775;
        float _1386 = _1009 + _776;
        float _1387 = _1013 + _777;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_775, _776, _777), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3995 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_775, _776, _777), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4028 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_775, _776, _777), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4061 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1315;
        _1624 = _1315;
        _1625 = _1315;
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1327)) + _1327;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1328)) + _1328;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1329)) + _1329;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _949 * 0.5;
    float _1692 = _950 * 0.5;
    float _1693 = _951 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_1013, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_1013, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_1013, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1822 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1825 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1853 = frontier_phi_14_12_ladder;
        }
        float _2056;
        if (_1822 > 0.0)
        {
            _2056 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2056 = frontier_phi_23_19_ladder;
        }
        float _2310;
        if (_1825 > 0.0)
        {
            _2310 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2310 = frontier_phi_35_30_ladder;
        }
        float _2312 = isnan(_2056) ? _1853 : (isnan(_1853) ? _2056 : min(_1853, _2056));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1819) + _1808;
        float _2318 = (_2313 * _1822) + _1812;
        float _2319 = (_2313 * _1825) + _1816;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2320;
        float _2324 = _2320 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 > _2324) || ((_2318 < _2322) || ((_2317 < _2322) || (_2317 > _2324))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2319, cbModelParam._m0[9u].z, fma(_2318, cbModelParam._m0[9u].y, _2317 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2319, cbModelParam._m0[10u].z, fma(_2318, cbModelParam._m0[10u].y, _2317 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2319, cbModelParam._m0[11u].z, fma(_2318, cbModelParam._m0[11u].y, _2317 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_13_35_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_13_35_ladder_2;
        _1843 = frontier_phi_13_35_ladder_1;
        _1845 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1760);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_1013, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_1013, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_1013, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1918 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1921 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2061;
        if (_1915 > 0.0)
        {
            _2061 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2061 = frontier_phi_25_21_ladder;
        }
        float _2337;
        if (_1918 > 0.0)
        {
            _2337 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2337 = frontier_phi_37_32_ladder;
        }
        float _2550;
        if (_1921 > 0.0)
        {
            _2550 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2550 = frontier_phi_46_43_ladder;
        }
        float _2552 = isnan(_2337) ? _2061 : (isnan(_2061) ? _2337 : min(_2061, _2337));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _1915) + _1904;
        float _2558 = (_2553 * _1918) + _1908;
        float _2559 = (_2553 * _1921) + _1912;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2560;
        float _2563 = _2560 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2559 > _2563) || ((_2559 < _2561) || ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 < _2561) || (_2557 > _2563))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2559, cbModelParam._m0[17u].z, fma(_2558, cbModelParam._m0[17u].y, _2557 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2559, cbModelParam._m0[18u].z, fma(_2558, cbModelParam._m0[18u].y, _2557 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2559, cbModelParam._m0[19u].z, fma(_2558, cbModelParam._m0[19u].y, _2557 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_22_46_ladder = _2758.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2758.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2758.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_22_46_ladder_2;
        _1942 = frontier_phi_22_46_ladder_1;
        _1944 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1850);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1957 = (((_976 * _925) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1959 = (((_976 * _927) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1961 = (((_976 * _928) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1990 = _941 + (-1.0);
    float _1995 = (cbLight._m0[_1983].x * _1990) + 1.0;
    float _1996 = (cbLight._m0[_1983].y * _1990) + 1.0;
    float _1997 = (cbLight._m0[_1983].z * _1990) + 1.0;
    float _1998 = (cbLight._m0[_1983].w * _1990) + 1.0;
    uint _1999 = _1982 + 5u;
    float _2005 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2009 = _1982 + 4u;
    float _2015 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2019 = _1982 | 1u;
    float _2030 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_775, _776, _777));
    float _2033 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_775, _776, _777));
    float _4197 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _4208 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2038 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _2040 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2047 = ((cbLight._m0[_1999].x * _2005) * _2040) + ((cbLight._m0[_2009].x * _2015) * _2038);
    float _2048 = ((_2005 * cbLight._m0[_1999].y) * _2040) + ((_2015 * cbLight._m0[_2009].y) * _2038);
    float _2049 = ((_2005 * cbLight._m0[_1999].z) * _2040) + ((_2015 * cbLight._m0[_2009].z) * _2038);
    uvec4 _2053 = floatBitsToUint(cbLight._m0[_1982 + 12u]);
    bool _2055 = _2053.x == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2055)
    {
        _2066 = _2047;
        _2068 = _2048;
        _2070 = _2049;
    }
    else
    {
        uint _2074 = _1982 + 6u;
        float _2090 = (dot(vec3(cbLight._m0[_1982 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4219 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2093 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2066 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _2047;
        _2068 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _2048;
        _2070 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _2049;
    }
    bool _2073 = _2053.y == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2073)
    {
        _2111 = _2066;
        _2113 = _2068;
        _2115 = _2070;
    }
    else
    {
        uint _2281 = _1982 + 7u;
        float _2297 = (dot(vec3(cbLight._m0[_1982 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4235 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2300 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2111 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2066;
        _2113 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2068;
        _2115 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2070;
    }
    uint _2118 = _1982 + 8u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _778) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1982].x + _855;
    float _2134 = cbLight._m0[_1982].y + _856;
    float _2135 = cbLight._m0[_1982].z + _857;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_1982].xyz));
    float _4251 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2147 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2148 = dot(vec3(_775, _776, _777), vec3(_2140, _2141, _2142));
    float _4273 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2140, _2141, _2142));
    float _4284 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2132 * _2132;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2169 = 0.959999978542327880859375 - _922;
    float _2171 = 0.959999978542327880859375 - _923;
    float _2172 = 0.959999978542327880859375 - _924;
    float _2179 = 1.0 - _2132;
    float _2190 = (0.5 / (((_2147 * ((_2146 * _2179) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2179) + _2132) * _2146))) * _2146;
    float _4295 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    uint _2203 = _1982 + 9u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _778) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2019].x + _855;
    float _2217 = cbLight._m0[_2019].y + _856;
    float _2218 = cbLight._m0[_2019].z + _857;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2019].xyz));
    float _4306 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2230 = dot(vec3(_775, _776, _777), vec3(_2223, _2224, _2225));
    float _4317 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2223, _2224, _2225));
    float _4328 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2215 * _2215;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2256 = 1.0 - _2215;
    float _2266 = (0.5 / (((_2147 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2256) + _2215) * _2229))) * _2229;
    float _4339 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    float _2278 = (((((_2249 * _2169) + _925) * cbLight._m0[_2203].x) * _2268) * _2005) + (((((_2168 * _2169) + _925) * cbLight._m0[_2118].x) * _2192) * _2015);
    float _2279 = (((((_2249 * _2171) + _927) * cbLight._m0[_2203].y) * _2268) * _2005) + (((((_2168 * _2171) + _927) * cbLight._m0[_2118].y) * _2192) * _2015);
    float _2280 = (((((_2249 * _2172) + _928) * cbLight._m0[_2203].z) * _2268) * _2005) + (((((_2168 * _2172) + _928) * cbLight._m0[_2118].z) * _2192) * _2015);
    float _2342;
    float _2344;
    float _2346;
    if (_2055)
    {
        _2342 = _2278;
        _2344 = _2279;
        _2346 = _2280;
    }
    else
    {
        uint _2348 = _1982 + 2u;
        uint _2352 = _1982 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _778) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _855;
        float _2369 = cbLight._m0[_2348].y + _856;
        float _2370 = cbLight._m0[_2348].z + _857;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2348].xyz));
        float _4350 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2382 = dot(vec3(_775, _776, _777), vec3(_2375, _2376, _2377));
        float _4361 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4372 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2147 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2408) + _2367) * _2381))) * _2381;
        float _4383 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2342 = (((((_2401 * _2169) + _925) * cbLight._m0[_2352].x) * _2420) * _2421) + _2278;
        _2344 = (((((_2401 * _2171) + _927) * cbLight._m0[_2352].y) * _2420) * _2421) + _2279;
        _2346 = (((((_2401 * _2172) + _928) * cbLight._m0[_2352].z) * _2420) * _2421) + _2280;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2073)
    {
        _2456 = _2342;
        _2458 = _2344;
        _2460 = _2346;
    }
    else
    {
        uint _2467 = _1982 + 3u;
        uint _2471 = _1982 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _778) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _855;
        float _2488 = cbLight._m0[_2467].y + _856;
        float _2489 = cbLight._m0[_2467].z + _857;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2467].xyz));
        float _4399 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2501 = dot(vec3(_775, _776, _777), vec3(_2494, _2495, _2496));
        float _4410 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4421 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
        float _2527 = 1.0 - _2486;
        float _2537 = (0.5 / (((_2147 * ((_2500 * _2527) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2527) + _2486) * _2500))) * _2500;
        float _4432 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2456 = (((((_2520 * _2169) + _925) * cbLight._m0[_2471].x) * _2539) * _2540) + _2342;
        _2458 = (((((_2520 * _2171) + _927) * cbLight._m0[_2471].y) * _2539) * _2540) + _2344;
        _2460 = (((((_2520 * _2172) + _928) * cbLight._m0[_2471].z) * _2539) * _2540) + _2346;
    }
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_1980.y == 0u)
    {
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2615;
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2615;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2615;
        uvec4 _2630 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2631 = _2630.x;
        uint _2642 = uint((float(_2630.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2631))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2631)));
        float _2652 = (log2(_2618 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2653 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        uint _2656 = uint(isnan(14.0) ? _2653 : (isnan(_2653) ? 14.0 : min(_2653, 14.0)));
        uvec4 _2661 = texelFetch(g_lightClusterGridBuffer, int(((_2656 << 2u) + (_2642 << 6u)) >> 2u));
        uint _2662 = _2661.x;
        uint _2663 = _2630.z;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        if (((((1u << ((_2663 >> 4u) & 15u)) + 4294967295u) & _2662) == 0u) || ((_2663 & 240u) == 0u))
        {
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
        }
        else
        {
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            uint _2914 = 0u;
            uint _2923;
            bool _2924;
            for (;;)
            {
                _2923 = texelFetch(g_lightClassification, int((((_2656 << 5u) + (_2642 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                _2924 = _2923 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2924)
                {
                    frontier_phi_61_pred = _2908;
                    frontier_phi_61_pred_1 = _2913;
                    frontier_phi_61_pred_2 = _2912;
                    frontier_phi_61_pred_3 = _2911;
                    frontier_phi_61_pred_4 = _2910;
                    frontier_phi_61_pred_5 = _2909;
                }
                else
                {
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    uint _3038;
                    _3032 = _2908;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2923;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    for (;;)
                    {
                        uint _3042 = uint(findLSB(_3038)) + (_2914 << 5u);
                        uint _3039 = (_3038 + 4294967295u) & _3038;
                        uint _3044 = _3042 * 48u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3064 = (_3042 * 48u) + 4u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3083 = (_3042 * 48u) + 8u;
                        vec3 _3094 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x));
                        float _3098 = _3058.x - _2616;
                        float _3099 = _3058.y - _2617;
                        float _3100 = _3058.z - _2618;
                        float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                        float _3104 = inversesqrt(_3101);
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3108 = dot(vec3(_882, _885, _888), vec3(_3105, _3106, _3107));
                        float _3113 = 1.0 - (_3101 * _3058.w);
                        float _4458 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3115 = sqrt(_3101) * _3077.w;
                        float _3118 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3108) + _3119;
                        float _3125 = _3115 * _3115;
                        float _3129 = ((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3114) / ((_3125 * 0.699999988079071044921875) + 1.0);
                        float _3133 = (-0.0) - _2616;
                        float _3134 = (-0.0) - _2617;
                        float _3135 = (-0.0) - _2618;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3150 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _957;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3140 + _3105;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_882, _885, _888), vec3(_3140, _3141, _3142));
                        float _4474 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3175 = dot(vec3(_882, _885, _888), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4485 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3118 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3108) + _3184;
                        float _4496 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4507 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3210 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3182 * _3182) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125))) * _3114;
                        _2967 = (_3129 * _3077.x) + _3035;
                        _2968 = (_3129 * _3077.y) + _3036;
                        _2969 = (_3129 * _3077.z) + _3037;
                        _2964 = (_3210 * _3094.x) + _3032;
                        _2965 = (_3210 * _3094.y) + _3033;
                        _2966 = (_3210 * _3094.z) + _3034;
                        if (_3039 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _3039;
                        }
                    }
                    frontier_phi_61_pred = _2964;
                    frontier_phi_61_pred_1 = _2969;
                    frontier_phi_61_pred_2 = _2968;
                    frontier_phi_61_pred_3 = _2967;
                    frontier_phi_61_pred_4 = _2966;
                    frontier_phi_61_pred_5 = _2965;
                }
                _2764 = frontier_phi_61_pred;
                _2774 = frontier_phi_61_pred_1;
                _2772 = frontier_phi_61_pred_2;
                _2770 = frontier_phi_61_pred_3;
                _2768 = frontier_phi_61_pred_4;
                _2766 = frontier_phi_61_pred_5;
                uint _2915 = _2914 + 1u;
                if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2908 = _2764;
                    _2909 = _2766;
                    _2910 = _2768;
                    _2911 = _2770;
                    _2912 = _2772;
                    _2913 = _2774;
                    _2914 = _2915;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
        }
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.z;
        uint _2780 = (_2778 >> 8u) & 15u;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((4294967295u << _2780) & _2662) == 0u)
        {
            _2876 = _2763;
            _2878 = _2765;
            _2880 = _2767;
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
        }
        else
        {
            float _2901 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
            float _2902 = _2901 * _2616;
            float _2903 = _2901 * _2617;
            float _2904 = _2901 * _2618;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2780 < ((_2778 >> 12u) & 15u))
            {
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _3015 = _2763;
                float _3016 = _2765;
                float _3017 = _2767;
                float _3018 = _2769;
                float _3019 = _2771;
                float _3020 = _2773;
                uint _3021 = _2780;
                uint _3030;
                bool _3031;
                for (;;)
                {
                    _3030 = texelFetch(g_lightClassification, int((((_2656 << 5u) + (_2642 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                    _3031 = _3030 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3031)
                    {
                        frontier_phi_67_pred = _3018;
                        frontier_phi_67_pred_1 = _3019;
                        frontier_phi_67_pred_2 = _3020;
                        frontier_phi_67_pred_3 = _3017;
                        frontier_phi_67_pred_4 = _3016;
                        frontier_phi_67_pred_5 = _3015;
                    }
                    else
                    {
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3228 = _3015;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        uint _3234 = _3030;
                        uint _3235;
                        vec4 _3260;
                        float _3261;
                        vec4 _3276;
                        vec3 _3288;
                        vec4 _3303;
                        vec4 _3318;
                        float _3364;
                        bool _3365;
                        for (;;)
                        {
                            uint _3245 = ((_3021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3234));
                            _3235 = (_3234 + 4294967295u) & _3234;
                            uint _3247 = _3245 * 40u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3261 = _3260.w;
                            uint _3263 = (_3245 * 40u) + 4u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3245 * 40u) + 8u;
                            _3288 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x));
                            uint _3290 = (_3245 * 40u) + 16u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3245 * 40u) + 20u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3245 * 40u) + 24u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3339 = (_3245 * 40u) + 28u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            _3364 = fma(_2618, _3352.z, fma(_2617, _3352.y, _3352.x * _2616)) + _3352.w;
                            _3365 = !((fma(_2618, _3333.z, fma(_2617, _3333.y, _3333.x * _2616)) + _3333.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3365)
                            {
                                float _3392 = _3260.x - _2616;
                                float _3393 = _3260.y - _2617;
                                float _3394 = _3260.z - _2618;
                                float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                                float _3398 = inversesqrt(_3395);
                                float _3399 = _3398 * _3392;
                                float _3400 = _3398 * _3393;
                                float _3401 = _3398 * _3394;
                                float _3405 = 1.0 - (_3395 / (_3261 * _3261));
                                float _4518 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3410 = sqrt(_3395) * _3276.w;
                                float _3412 = 1.39999997615814208984375 / (_3410 + 1.39999997615814208984375);
                                float _3413 = _3412 * _3412;
                                float _3416 = ((1.0 - _3413) * dot(vec3(_3399, _3400, _3401), vec3(_882, _885, _888))) + _3413;
                                float _3419 = _3410 * _3410;
                                float _3423 = (fma(_2618, _3303.z, fma(_2617, _3303.y, _3303.x * _2616)) + _3303.w) / _3364;
                                float _3424 = (fma(_2618, _3318.z, fma(_2617, _3318.y, _3318.x * _2616)) + _3318.w) / _3364;
                                float _3428 = 1.0 - dot(vec2(_3423, _3424), vec2(_3423, _3424));
                                float _4534 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3430 = _3429 * (((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3406) / ((_3419 * 0.699999988079071044921875) + 1.0));
                                float _3442 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                                float _3443 = 1.0 - _957;
                                float _3450 = sqrt(1.0 - ((1.0 - (_3443 * _3443)) * (1.0 - (_3442 * _3442))));
                                float _3451 = _3450 * _3450;
                                float _3452 = _3451 * _3451;
                                float _3453 = _3399 - _2902;
                                float _3454 = _3400 - _2903;
                                float _3455 = _3401 - _2904;
                                float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                                float _3463 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2902, (-0.0) - _2903, (-0.0) - _2904));
                                float _4545 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3466 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3467 = dot(vec3(_882, _885, _888), vec3(_3459 * _3453, _3459 * _3454, _3459 * _3455));
                                float _4556 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3474 = ((_3470 * _3470) * (_3452 + (-1.0))) + 1.0;
                                float _3475 = _3412 * _3451;
                                float _3476 = _3475 * _3475;
                                float _3482 = ((1.0 - _3476) * dot(vec3(_882, _885, _888), vec3(_3399, _3400, _3401))) + _3476;
                                float _4567 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3484 = 1.0 - _3451;
                                float _3494 = (0.5 / (((_3483 * ((_3466 * _3484) + _3451)) + 9.9999999392252902907785028219223e-09) + (((_3483 * _3484) + _3451) * _3466))) * _3483;
                                float _4578 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3504 = (_3429 * _3406) * (((_3452 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3474 * _3474) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3504 * _3288.x;
                                frontier_phi_73_pred_1 = _3504 * _3288.y;
                                frontier_phi_73_pred_2 = _3430 * _3276.z;
                                frontier_phi_73_pred_3 = _3430 * _3276.y;
                                frontier_phi_73_pred_4 = _3430 * _3276.x;
                                frontier_phi_73_pred_5 = _3504 * _3288.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3508 = frontier_phi_73_pred;
                            _3509 = frontier_phi_73_pred_1;
                            _3513 = frontier_phi_73_pred_2;
                            _3512 = frontier_phi_73_pred_3;
                            _3511 = frontier_phi_73_pred_4;
                            _3510 = frontier_phi_73_pred_5;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            if (_3235 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3235;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3218;
                        frontier_phi_67_pred_1 = _3219;
                        frontier_phi_67_pred_2 = _3220;
                        frontier_phi_67_pred_3 = _3217;
                        frontier_phi_67_pred_4 = _3216;
                        frontier_phi_67_pred_5 = _3215;
                    }
                    _2883 = frontier_phi_67_pred;
                    _2885 = frontier_phi_67_pred_1;
                    _2887 = frontier_phi_67_pred_2;
                    _2881 = frontier_phi_67_pred_3;
                    _2879 = frontier_phi_67_pred_4;
                    _2877 = frontier_phi_67_pred_5;
                    uint _3022 = _3021 + 1u;
                    if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3015 = _2877;
                        _3016 = _2879;
                        _3017 = _2881;
                        _3018 = _2883;
                        _3019 = _2885;
                        _3020 = _2887;
                        _3021 = _3022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2885;
                frontier_phi_55_56_ladder_1 = _2887;
                frontier_phi_55_56_ladder_2 = _2883;
                frontier_phi_55_56_ladder_3 = _2881;
                frontier_phi_55_56_ladder_4 = _2879;
                frontier_phi_55_56_ladder_5 = _2877;
            }
            else
            {
                frontier_phi_55_56_ladder = _2771;
                frontier_phi_55_56_ladder_1 = _2773;
                frontier_phi_55_56_ladder_2 = _2769;
                frontier_phi_55_56_ladder_3 = _2767;
                frontier_phi_55_56_ladder_4 = _2765;
                frontier_phi_55_56_ladder_5 = _2763;
            }
            _2876 = frontier_phi_55_56_ladder_5;
            _2878 = frontier_phi_55_56_ladder_4;
            _2880 = frontier_phi_55_56_ladder_3;
            _2882 = frontier_phi_55_56_ladder_2;
            _2884 = frontier_phi_55_56_ladder;
            _2886 = frontier_phi_55_56_ladder_1;
        }
        float _2891 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2675 = (_2891 * _2882) + _2111;
        _2677 = (_2891 * _2884) + _2113;
        _2679 = (_2891 * _2886) + _2115;
        _2681 = ((_2876 * _925) * _2891) + _2456;
        _2683 = ((_2878 * _927) * _2891) + _2458;
        _2685 = ((_2880 * _928) * _2891) + _2460;
    }
    else
    {
        _2675 = _2111;
        _2677 = _2113;
        _2679 = _2115;
        _2681 = _2456;
        _2683 = _2458;
        _2685 = _2460;
    }
    float _4594 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4605 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4616 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    uint _2705 = _270 + 6u;
    float _2713 = _863 / cbSceneParam._m0[86u].x;
    float _2714 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2728 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2713, _2714, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2730 = _2728.x;
    float _2731 = _2728.y;
    float _2732 = _2728.z;
    float _2733 = _2728.w;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _2788 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _2789 = _2788 / _797;
        float _2800 = _2789 * _848;
        float _2801 = _849 * _2789;
        float _2802 = (-0.0) - _2801;
        float _2804 = _2789 * _850;
        float _2806 = (cbSceneParam._m0[77u].w * _2802) / _2788;
        float _2807 = _2806 + cbSceneParam._m0[79u].w;
        float _2808 = cbSceneParam._m0[79u].w - _2801;
        float _2814 = sqrt(((_2800 * _2800) + (_2801 * _2801)) + (_2804 * _2804));
        float _2817 = (1.0 - (cbSceneParam._m0[77u].w / _2788)) * _2814;
        float _2822 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2824 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2977;
        if (abs((_2802 - _2806) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2977 = ((((_2807 > 0.0) ? exp2(_2822 * _2807) : (2.0 - exp2(_2824 * _2807))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2817;
        }
        else
        {
            float _2937 = 1.0 / cbSceneParam._m0[80u].x;
            float _2938 = isnan(_2808) ? _2807 : (isnan(_2807) ? _2808 : max(_2807, _2808));
            float _2939 = isnan(_2808) ? _2807 : (isnan(_2807) ? _2808 : min(_2807, _2808));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            _2977 = ((abs(_2814 / _2802) * cbSceneParam._m0[80u].y) * ((((_2948 - _2949) * 2.0) - ((exp2(_2822 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0)))) - exp2(_2822 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))))) * _2937)) - ((exp2(_2824 * _2948) - exp2(_2824 * _2949)) * _2937))) + (_2817 * cbSceneParam._m0[80u].z);
        }
        vec4 _2979 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2713, _2714, 1.0), 0.0);
        float _2988 = exp2((_2977 * (-1.44269502162933349609375)) * (1.0 - _2979.w));
        float _2989 = log2(_2988);
        float _3005 = log2(_2733);
        _2826 = (exp2(_3005 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].x)) * _2979.x) / cbSceneParam._m0[78u].x)) + _2730;
        _2828 = (exp2(_3005 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].y)) * _2979.y) / cbSceneParam._m0[78u].y)) + _2731;
        _2830 = (exp2(_3005 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].z)) * _2979.z) / cbSceneParam._m0[78u].z)) + _2732;
        _2832 = _2988 * _2733;
    }
    else
    {
        _2826 = _2730;
        _2828 = _2731;
        _2830 = _2732;
        _2832 = _2733;
    }
    float _2844 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2845 = _2844 == 3.0;
    float _2846 = log2(_2832);
    float _2853 = exp2(_2846 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2675 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _941))) + ((_2681 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2854 = exp2(_2846 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2677 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _941))) + ((_2683 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2855 = exp2(_2846 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2679 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _941))) + ((_2685 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2864 = (_2844 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2864 * (_2845 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2826)));
    SV_Target.y = _2864 * (_2845 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2828)));
    SV_Target.z = _2864 * (_2845 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.w = cbInstanceData._m0[_2705].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2705].w;
}


