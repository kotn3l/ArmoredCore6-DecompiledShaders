#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _4170;
float _4171;
float _4172;
float _4173;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4182 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4193 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4204 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[23u].w) + _461) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4215 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _486 = (_479 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _487 = (_479 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _488 = (_479 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[23u].w) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4226 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _562 = (_344.x * cbMtdParam._m0[9u].x) * ((_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486);
    float _563 = (_344.y * cbMtdParam._m0[9u].y) * ((_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487);
    float _564 = (_344.z * cbMtdParam._m0[9u].z) * ((_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488);
    float _568 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _562;
    float _571 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _563;
    float _574 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _564;
    float _582 = (((_562 - _568) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) + _568) * 4.55000019073486328125;
    float _584 = (((_563 - _571) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) + _571) * 4.55000019073486328125;
    float _586 = (((_564 - _574) * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) + _574) * 4.55000019073486328125;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _307) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _308) + cbTextureTilingScale._m0[14u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _668 = _664.z;
    float _675 = ((_647.x - _666) * _479) + _666;
    float _676 = ((_647.y - _667) * _479) + _667;
    float _677 = ((_647.z - _668) * _479) + _668;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _702 = ((_689.z - _677) * _552) + _677;
    float _705 = ((((_689.x - _675) * _552) + _675) * 2.0) + (-1.0);
    float _706 = ((((_689.y - _676) * _552) + _676) * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _4237 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _753 = _751.x;
    float _754 = 1.0 - _753;
    float _770 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_753 - _754) * cbMtdParam._m0[24u].z) + _754) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4248 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _778 = (_771 * ((_605.x * cbMtdParam._m0[18u].x) - _582)) + _582;
    float _779 = (_771 * ((_605.y * cbMtdParam._m0[18u].y) - _584)) + _584;
    float _780 = (_771 * ((_605.z * cbMtdParam._m0[18u].z) - _586)) + _586;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _808 = _806.x;
    float _825 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _808) * _479) + _808;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _825) * _552) + _825;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _842) * cbMtdParam._m0[19u].z) + _842;
    float _848 = _846 - (_846 * _771);
    float _853 = (((_624.z - _702) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _702;
    float _857 = ((_726.z - _853) * cbMtdParam._m0[19u].w) + _853;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _4259 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _887 = (_771 * (_870.z - _857)) + _857;
    float _896 = (_705 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_624.x * 2.0) + (-1.0)))) + (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _897 = (_706 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_624.y * 2.0) + (-1.0)))) + (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _909 = (((_877 - _896) + (cbMtdParam._m0[21u].x * _896)) * _771) + _896;
    float _910 = (((_878 - _897) + (cbMtdParam._m0[21u].x * _897)) * _771) + _897;
    float _911 = (_771 * (sqrt(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) - _712)) + _712;
    float _915 = cbMtdParam._m0[22u].x + _726.w;
    float _918 = fma(_911, _254 * NORMAL.x, fma(_910, _261 * TANGENT.x, (_247 * _239) * _909));
    float _921 = fma(_911, _254 * NORMAL.y, fma(_910, _261 * TANGENT.y, (_247 * _240) * _909));
    float _924 = fma(_911, _254 * NORMAL.z, fma(_910, _261 * TANGENT.z, (_247 * _241) * _909));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _4270 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _932 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4292 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4303 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4314 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4325 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _937 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _951 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1002 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _992);
    float _1003 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _992);
    float _1004 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _992);
    float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
    float _1009 = _1002 * _1008;
    float _1010 = _1003 * _1008;
    float _1011 = _1004 * _1008;
    vec4 _1016 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1018 = _1016.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1190 = sqrt(((_1002 * _1002) + (_1003 * _1003)) + (_1004 * _1004));
        float _1196 = (cbMatDynParam._m0[5u].x * _1190) + cbMatDynParam._m0[5u].y;
        float _4336 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1201 = (cbMatDynParam._m0[5u].z * _1190) + cbMatDynParam._m0[5u].w;
        float _4347 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) - _1197)) + _1197) < ((_1018 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1029 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1030 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1048 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1051 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1054 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1067 = _288 + 9u;
    uint _1068 = _1067 + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _4358 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _1080 = 1.0 - _937;
    float _1081 = _1077 * _1080;
    float _1082 = _1078 * _1080;
    float _1083 = _1079 * _1080;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _937;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _937;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _937;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1029, cbSceneParam._m0[86u].y * _1030));
    float _1107 = ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_929, _930, _931), vec3(_1009, _1010, _1011));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _929) - _1009;
    float _1116 = (_1111 * _930) - _1010;
    float _1117 = (_1111 * _931) - _1011;
    float _1121 = abs(dot(vec3(_1009, _1010, _1011), vec3(_929, _930, _931)));
    float _4391 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_932);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1142 = (1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1143 = _1136 * _1123;
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1237 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1241 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1266 = _1171 + _929;
        float _1267 = _1175 + _930;
        float _1268 = _1179 + _931;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_929, _930, _931), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4439 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_929, _930, _931), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4472 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_929, _930, _931), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4483 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4494 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4505 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1550 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1554 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1558 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1581 = _1171 + _929;
        float _1582 = _1175 + _930;
        float _1583 = _1179 + _931;
        float _1593 = fma(_1583, cbModelParam._m0[30u].z, fma(_1582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1581)) - _1550;
        float _1594 = fma(_1583, cbModelParam._m0[31u].z, fma(_1582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1581)) - _1554;
        float _1595 = fma(_1583, cbModelParam._m0[32u].z, fma(_1582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1581)) - _1558;
        float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
        float _1612 = ((_1599 * _1593) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1550 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1599 * _1594) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1554 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1599 * _1595) / cbModelParam._m0[35u].z) + ((((((_1558 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        float _1649 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1616.x + (-0.5));
        float _1651 = _1649 * (_1616.y + (-0.5));
        float _1652 = _1649 * (_1616.z + (-0.5));
        float _1659 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1623.x + (-0.5));
        float _1661 = _1659 * (_1623.y + (-0.5));
        float _1662 = _1659 * (_1623.z + (-0.5));
        float _1669 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1630.x + (-0.5));
        float _1671 = _1669 * (_1630.y + (-0.5));
        float _1672 = _1669 * (_1630.z + (-0.5));
        float _1679 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1637.x + (-0.5));
        float _1681 = _1679 * (_1637.y + (-0.5));
        float _1682 = _1679 * (_1637.z + (-0.5));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = _1650 * 0.5;
        float _1687 = _1660 * 0.5;
        float _1688 = _1670 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_929, _930, _931), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4546 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4557 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4568 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_1713 + 1.0))) + _1718) * _1683;
        float _1728 = _1651 * 0.5;
        float _1729 = _1661 * 0.5;
        float _1730 = _1671 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_929, _930, _931), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4579 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4590 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4601 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_1755 + 1.0))) + _1760) * _1684;
        float _1770 = _1652 * 0.5;
        float _1771 = _1662 * 0.5;
        float _1772 = _1672 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_929, _930, _931), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4612 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4623 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4634 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_1797 + 1.0))) + _1802) * _1685;
        _1819 = _1652;
        _1820 = _1651;
        _1821 = _1650;
        _1822 = _1662;
        _1823 = _1661;
        _1824 = _1660;
        _1825 = _1672;
        _1826 = _1671;
        _1827 = _1670;
        _1828 = _1685;
        _1829 = _1684;
        _1830 = _1683;
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
    }
    else
    {
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = _1509;
        _1831 = 0.0;
        _1832 = 0.0;
        _1833 = 0.0;
    }
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1521)) + _1521;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1522)) + _1522;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1523)) + _1523;
    float _1866 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1843));
    float _1887 = _1115 * 0.5;
    float _1888 = _1116 * 0.5;
    float _1889 = _1117 * 0.5;
    float _1890 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1893 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1896 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1930;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1903 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1907 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1911 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1918 = dot(vec4(cbModelParam._m0[39u]), vec4(_1887, _1888, _1889, 1.0));
        _1930 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1930 = 1.0;
    }
    float _1941;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1932 = dot(vec4(cbModelParam._m0[40u]), vec4(_1887, _1888, _1889, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1945 = (_1941 * cbModelParam._m0[1u].x) + (_1930 * (1.0 - cbModelParam._m0[1u].x));
    float _1955 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1955 : min(cbModelParam._m0[25u].z, _1955));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2003 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _2007 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _2011 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _2014 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _2017 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _2020 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2048;
        if (_2014 > 0.0)
        {
            _2048 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2048 = frontier_phi_17_15_ladder;
        }
        float _2219;
        if (_2017 > 0.0)
        {
            _2219 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2219 = frontier_phi_26_22_ladder;
        }
        float _2514;
        if (_2020 > 0.0)
        {
            _2514 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2514 = frontier_phi_38_33_ladder;
        }
        float _2516 = isnan(_2219) ? _2048 : (isnan(_2048) ? _2219 : min(_2048, _2219));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _2014) + _2003;
        float _2522 = (_2517 * _2017) + _2007;
        float _2523 = (_2517 * _2020) + _2011;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2524;
        float _2528 = _2524 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 > _2528) || ((_2522 < _2526) || ((_2521 < _2526) || (_2521 > _2528))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2523, cbModelParam._m0[9u].z, fma(_2522, cbModelParam._m0[9u].y, _2521 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2523, cbModelParam._m0[10u].z, fma(_2522, cbModelParam._m0[10u].y, _2521 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2523, cbModelParam._m0[11u].z, fma(_2522, cbModelParam._m0[11u].y, _2521 * cbModelParam._m0[11u].x))), _1956);
            frontier_phi_16_38_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2036 = frontier_phi_16_38_ladder_2;
        _2038 = frontier_phi_16_38_ladder_1;
        _2040 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1956);
        _2036 = _2024.x * cbModelParam._m0[1u].y;
        _2038 = _2024.y * cbModelParam._m0[1u].y;
        _2040 = _2024.z * cbModelParam._m0[1u].y;
    }
    float _2044 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2044 : min(cbModelParam._m0[25u].w, _2044));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2098 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2102 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2106 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2109 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2112 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2115 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2224;
        if (_2109 > 0.0)
        {
            _2224 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2224 = frontier_phi_28_24_ladder;
        }
        float _2541;
        if (_2112 > 0.0)
        {
            _2541 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2541 = frontier_phi_40_35_ladder;
        }
        float _2879;
        if (_2115 > 0.0)
        {
            _2879 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2879 = frontier_phi_50_47_ladder;
        }
        float _2881 = isnan(_2541) ? _2224 : (isnan(_2224) ? _2541 : min(_2224, _2541));
        float _2882 = isnan(_2879) ? _2881 : (isnan(_2881) ? _2879 : min(_2881, _2879));
        float _2886 = (_2882 * _2109) + _2098;
        float _2887 = (_2882 * _2112) + _2102;
        float _2888 = (_2882 * _2115) + _2106;
        float _2889 = _2882 * 9.9999997473787516355514526367188e-05;
        float _2890 = (-1.0) - _2889;
        float _2892 = _2889 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2888 > _2892) || ((_2888 < _2890) || ((_2887 > _2892) || ((_2887 < _2890) || ((_2886 < _2890) || (_2886 > _2892))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2888, cbModelParam._m0[17u].z, fma(_2887, cbModelParam._m0[17u].y, _2886 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2888, cbModelParam._m0[18u].z, fma(_2887, cbModelParam._m0[18u].y, _2886 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2888, cbModelParam._m0[19u].z, fma(_2887, cbModelParam._m0[19u].y, _2886 * cbModelParam._m0[19u].x))), _2045);
            frontier_phi_25_50_ladder = _3010.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3010.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3010.x * cbModelParam._m0[1u].z;
        }
        _2134 = frontier_phi_25_50_ladder_2;
        _2136 = frontier_phi_25_50_ladder_1;
        _2138 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2045);
        _2134 = _2118.x * cbModelParam._m0[1u].z;
        _2136 = _2118.y * cbModelParam._m0[1u].z;
        _2138 = _2118.z * cbModelParam._m0[1u].z;
    }
    float _2151 = (((_1142 * _1091) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2153 = (((_1142 * _1093) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2155 = (((_1142 * _1094) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2138 - _2040)) + _2040);
    float _2158 = fma(_2155, cbSceneParam._m0[89u].z, fma(_2153, cbSceneParam._m0[89u].y, _2151 * cbSceneParam._m0[89u].x));
    float _2161 = fma(_2155, cbSceneParam._m0[90u].z, fma(_2153, cbSceneParam._m0[90u].y, _2151 * cbSceneParam._m0[90u].x));
    float _2164 = fma(_2155, cbSceneParam._m0[91u].z, fma(_2153, cbSceneParam._m0[91u].y, _2151 * cbSceneParam._m0[91u].x));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2211 = _2198 / _2210;
    float _2212 = _2202 / _2210;
    float _2213 = _2206 / _2210;
    float _2360;
    float _2361;
    float _2362;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2240 = ((uint(_2213 > cbSceneParam._m0[59u].y) + uint(_2213 > cbSceneParam._m0[59u].x)) + uint(_2213 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2241 = _2240 + 43u;
        uint _2249 = _2240 + 44u;
        uint _2257 = _2240 + 45u;
        uint _2265 = _2240 + 46u;
        float _2276 = fma(_2210, cbSceneParam._m0[_2241].w, fma(_2206, cbSceneParam._m0[_2241].z, fma(_2202, cbSceneParam._m0[_2241].y, _2198 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2210, cbSceneParam._m0[_2249].w, fma(_2206, cbSceneParam._m0[_2249].z, fma(_2202, cbSceneParam._m0[_2249].y, _2198 * cbSceneParam._m0[_2249].x)));
        float _2288 = fma(_2210, cbSceneParam._m0[_2265].w, fma(_2206, cbSceneParam._m0[_2265].z, fma(_2202, cbSceneParam._m0[_2265].y, _2198 * cbSceneParam._m0[_2265].x)));
        float _2293 = cbSceneParam._m0[33u].z * _2288;
        float _2295 = cbSceneParam._m0[33u].w * _2288;
        float _2298 = fma(_2210, cbSceneParam._m0[_2257].w, fma(_2206, cbSceneParam._m0[_2257].z, fma(_2202, cbSceneParam._m0[_2257].y, _2198 * cbSceneParam._m0[_2257].x))) / _2288;
        float _2346 = (cbSceneParam._m0[33u].x - sqrt(((_2212 * _2212) + (_2211 * _2211)) + (_2213 * _2213))) * cbSceneParam._m0[33u].y;
        float _4760 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2353 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2293 + _2276) / _2288, (_2295 + _2280) / _2288), _2298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 + _2276) / _2288, (_2280 - _2293) / _2288), _2298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 - _2293) / _2288, (_2280 - _2295) / _2288), _2298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 - _2295) / _2288, (_2293 + _2280) / _2288), _2298), 0.0)).x), vec4(0.25)));
        _2360 = 1.0 - (_2353 * cbSceneParam._m0[34u].x);
        _2361 = 1.0 - (_2353 * cbSceneParam._m0[34u].y);
        _2362 = 1.0 - (_2353 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2360 = 1.0;
        _2361 = 1.0;
        _2362 = 1.0;
    }
    float _2426;
    float _2428;
    float _2430;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2414 = fma(_2210, cbSceneParam._m0[63u].w, fma(_2206, cbSceneParam._m0[63u].z, fma(_2202, cbSceneParam._m0[63u].y, _2198 * cbSceneParam._m0[63u].x)));
        float _2415 = fma(_2210, cbSceneParam._m0[60u].w, fma(_2206, cbSceneParam._m0[60u].z, fma(_2202, cbSceneParam._m0[60u].y, _2198 * cbSceneParam._m0[60u].x))) / _2414;
        float _2416 = fma(_2210, cbSceneParam._m0[61u].w, fma(_2206, cbSceneParam._m0[61u].z, fma(_2202, cbSceneParam._m0[61u].y, _2198 * cbSceneParam._m0[61u].x))) / _2414;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2415 >= cbSceneParam._m0[64u].x) && (_2416 >= cbSceneParam._m0[64u].y)) && (_2415 <= cbSceneParam._m0[64u].z)) && (_2416 <= cbSceneParam._m0[64u].w))
        {
            float _2554 = fma(_2210, cbSceneParam._m0[62u].w, fma(_2206, cbSceneParam._m0[62u].z, fma(_2202, cbSceneParam._m0[62u].y, _2198 * cbSceneParam._m0[62u].x))) / _2414;
            float _2558 = isnan(cbSceneParam._m0[41u].w) ? _2554 : (isnan(_2554) ? cbSceneParam._m0[41u].w : max(_2554, cbSceneParam._m0[41u].w));
            float _2601 = (cbSceneParam._m0[33u].x - sqrt(((_2212 * _2212) + (_2211 * _2211)) + (_2213 * _2213))) * cbSceneParam._m0[33u].y;
            float _4776 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
            float _2608 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2415, cbSceneParam._m0[33u].w + _2416), _2558), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2415, _2416 - cbSceneParam._m0[33u].z), _2558), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2415 - cbSceneParam._m0[33u].z, _2416 - cbSceneParam._m0[33u].w), _2558), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2415 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2416), _2558), 0.0)).x), vec4(0.25)));
            float _2612 = 1.0 - (_2608 * cbSceneParam._m0[34u].x);
            float _2613 = 1.0 - (_2608 * cbSceneParam._m0[34u].y);
            float _2614 = 1.0 - (_2608 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2614) ? _2362 : (isnan(_2362) ? _2614 : min(_2362, _2614));
            frontier_phi_37_36_ladder_1 = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
            frontier_phi_37_36_ladder_2 = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
        }
        else
        {
            frontier_phi_37_36_ladder = _2362;
            frontier_phi_37_36_ladder_1 = _2361;
            frontier_phi_37_36_ladder_2 = _2360;
        }
        _2426 = frontier_phi_37_36_ladder_2;
        _2428 = frontier_phi_37_36_ladder_1;
        _2430 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2426 = _2360;
        _2428 = _2361;
        _2430 = _2362;
    }
    uvec4 _2435 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2437 = _2435.x * 14u;
    uint _2438 = _2437 + 13u;
    float _2445 = _1107 + (-1.0);
    float _2450 = (cbLight._m0[_2438].x * _2445) + 1.0;
    float _2451 = (cbLight._m0[_2438].y * _2445) + 1.0;
    float _2452 = (cbLight._m0[_2438].z * _2445) + 1.0;
    float _2453 = (cbLight._m0[_2438].w * _2445) + 1.0;
    uint _2454 = _2437 + 5u;
    float _2460 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
    uint _2464 = _2437 + 4u;
    float _2473 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    uint _2477 = _2437 | 1u;
    float _2488 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_929, _930, _931));
    float _2491 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_929, _930, _931));
    float _4812 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _4823 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2496 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * 0.3183098733425140380859375;
    float _2498 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * 0.3183098733425140380859375;
    float _2505 = ((cbLight._m0[_2454].x * _2460) * _2498) + (((cbLight._m0[_2464].x * _2426) * _2473) * _2496);
    float _2506 = ((_2460 * cbLight._m0[_2454].y) * _2498) + (((cbLight._m0[_2464].y * _2428) * _2473) * _2496);
    float _2507 = ((_2460 * cbLight._m0[_2454].z) * _2498) + (((cbLight._m0[_2464].z * _2430) * _2473) * _2496);
    uvec4 _2511 = floatBitsToUint(cbLight._m0[_2437 + 12u]);
    bool _2513 = _2511.x == 0u;
    float _2615;
    float _2617;
    float _2619;
    if (_2513)
    {
        _2615 = _2505;
        _2617 = _2506;
        _2619 = _2507;
    }
    else
    {
        uint _2623 = _2437 + 6u;
        float _2639 = (dot(vec3(cbLight._m0[_2437 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2640 = _2639 * _2639;
        float _4834 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2641 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2642 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2615 = (((cbLight._m0[_2623].x * 0.3183098733425140380859375) * _2641) * _2642) + _2505;
        _2617 = (((cbLight._m0[_2623].y * 0.3183098733425140380859375) * _2641) * _2642) + _2506;
        _2619 = (((cbLight._m0[_2623].z * 0.3183098733425140380859375) * _2641) * _2642) + _2507;
    }
    bool _2622 = _2511.y == 0u;
    float _2677;
    float _2679;
    float _2681;
    if (_2622)
    {
        _2677 = _2615;
        _2679 = _2617;
        _2681 = _2619;
    }
    else
    {
        uint _2850 = _2437 + 7u;
        float _2866 = (dot(vec3(cbLight._m0[_2437 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2867 = _2866 * _2866;
        float _4850 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2868 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2869 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2677 = (((cbLight._m0[_2850].x * 0.3183098733425140380859375) * _2868) * _2869) + _2615;
        _2679 = (((cbLight._m0[_2850].y * 0.3183098733425140380859375) * _2868) * _2869) + _2617;
        _2681 = (((cbLight._m0[_2850].z * 0.3183098733425140380859375) * _2868) * _2869) + _2619;
    }
    uint _2684 = _2437 + 8u;
    float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _932) * 0.949999988079071044921875);
    float _2698 = _2697 * _2697;
    float _2699 = cbLight._m0[_2437].x + _1009;
    float _2700 = cbLight._m0[_2437].y + _1010;
    float _2701 = cbLight._m0[_2437].z + _1011;
    float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
    float _2706 = _2705 * _2699;
    float _2707 = _2705 * _2700;
    float _2708 = _2705 * _2701;
    float _2709 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2437].xyz));
    float _4866 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _4877 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2713 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2714 = dot(vec3(_929, _930, _931), vec3(_2706, _2707, _2708));
    float _4888 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2718 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2706, _2707, _2708));
    float _4899 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2722 = _2698 * _2698;
    float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
    float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
    float _2735 = 0.959999978542327880859375 - _1088;
    float _2737 = 0.959999978542327880859375 - _1089;
    float _2738 = 0.959999978542327880859375 - _1090;
    float _2745 = 1.0 - _2698;
    float _2756 = (0.5 / (((_2713 * ((_2712 * _2745) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2745) + _2698) * _2712))) * _2712;
    float _4910 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2758 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
    uint _2772 = _2437 + 9u;
    float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _932) * 0.949999988079071044921875);
    float _2784 = _2783 * _2783;
    float _2785 = cbLight._m0[_2477].x + _1009;
    float _2786 = cbLight._m0[_2477].y + _1010;
    float _2787 = cbLight._m0[_2477].z + _1011;
    float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
    float _2792 = _2791 * _2785;
    float _2793 = _2791 * _2786;
    float _2794 = _2791 * _2787;
    float _2795 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2477].xyz));
    float _4921 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2798 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
    float _2799 = dot(vec3(_929, _930, _931), vec3(_2792, _2793, _2794));
    float _4932 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2802 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
    float _2803 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2792, _2793, _2794));
    float _4943 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2807 = _2784 * _2784;
    float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
    float _2818 = exp2(log2(1.0 - (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) * 5.0);
    float _2825 = 1.0 - _2784;
    float _2835 = (0.5 / (((_2713 * ((_2798 * _2825) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2825) + _2784) * _2798))) * _2798;
    float _4954 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
    float _2837 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
    float _2847 = (((((_2818 * _2735) + _1091) * cbLight._m0[_2772].x) * _2837) * _2460) + ((((cbLight._m0[_2684].x * _2426) * ((_2734 * _2735) + _1091)) * _2758) * _2473);
    float _2848 = (((((_2818 * _2737) + _1093) * cbLight._m0[_2772].y) * _2837) * _2460) + ((((cbLight._m0[_2684].y * _2428) * ((_2734 * _2737) + _1093)) * _2758) * _2473);
    float _2849 = (((((_2818 * _2738) + _1094) * cbLight._m0[_2772].z) * _2837) * _2460) + ((((cbLight._m0[_2684].z * _2430) * ((_2734 * _2738) + _1094)) * _2758) * _2473);
    float _2905;
    float _2907;
    float _2909;
    if (_2513)
    {
        _2905 = _2847;
        _2907 = _2848;
        _2909 = _2849;
    }
    else
    {
        uint _2911 = _2437 + 2u;
        uint _2915 = _2437 + 10u;
        float _2929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2911].w)) * _932) * 0.949999988079071044921875);
        float _2930 = _2929 * _2929;
        float _2931 = cbLight._m0[_2911].x + _1009;
        float _2932 = cbLight._m0[_2911].y + _1010;
        float _2933 = cbLight._m0[_2911].z + _1011;
        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
        float _2938 = _2937 * _2931;
        float _2939 = _2937 * _2932;
        float _2940 = _2937 * _2933;
        float _2941 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2911].xyz));
        float _4965 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2945 = dot(vec3(_929, _930, _931), vec3(_2938, _2939, _2940));
        float _4976 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _2949 = dot(vec3(cbLight._m0[_2911].xyz), vec3(_2938, _2939, _2940));
        float _4987 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2953 = _2930 * _2930;
        float _2957 = ((_2948 * _2948) * (_2953 + (-1.0))) + 1.0;
        float _2964 = exp2(log2(1.0 - (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) * 5.0);
        float _2971 = 1.0 - _2930;
        float _2981 = (0.5 / (((_2713 * ((_2944 * _2971) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2971) + _2930) * _2944))) * _2944;
        float _4998 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2983 = (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2953 / ((_2957 * _2957) * 3.141590118408203125));
        float _2984 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2905 = (((((_2964 * _2735) + _1091) * cbLight._m0[_2915].x) * _2983) * _2984) + _2847;
        _2907 = (((((_2964 * _2737) + _1093) * cbLight._m0[_2915].y) * _2983) * _2984) + _2848;
        _2909 = (((((_2964 * _2738) + _1094) * cbLight._m0[_2915].z) * _2983) * _2984) + _2849;
    }
    float _3015;
    float _3017;
    float _3019;
    if (_2622)
    {
        _3015 = _2905;
        _3017 = _2907;
        _3019 = _2909;
    }
    else
    {
        uint _3026 = _2437 + 3u;
        uint _3030 = _2437 + 11u;
        float _3044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3026].w)) * _932) * 0.949999988079071044921875);
        float _3045 = _3044 * _3044;
        float _3046 = cbLight._m0[_3026].x + _1009;
        float _3047 = cbLight._m0[_3026].y + _1010;
        float _3048 = cbLight._m0[_3026].z + _1011;
        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
        float _3053 = _3052 * _3046;
        float _3054 = _3052 * _3047;
        float _3055 = _3052 * _3048;
        float _3056 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_3026].xyz));
        float _5014 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3059 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
        float _3060 = dot(vec3(_929, _930, _931), vec3(_3053, _3054, _3055));
        float _5025 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3063 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
        float _3064 = dot(vec3(cbLight._m0[_3026].xyz), vec3(_3053, _3054, _3055));
        float _5036 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3068 = _3045 * _3045;
        float _3072 = ((_3063 * _3063) * (_3068 + (-1.0))) + 1.0;
        float _3079 = exp2(log2(1.0 - (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0)))) * 5.0);
        float _3086 = 1.0 - _3045;
        float _3096 = (0.5 / (((_2713 * ((_3059 * _3086) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _3086) + _3045) * _3059))) * _3059;
        float _5047 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3098 = (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3068 / ((_3072 * _3072) * 3.141590118408203125));
        float _3099 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _3015 = (((((_3079 * _2735) + _1091) * cbLight._m0[_3030].x) * _3098) * _3099) + _2905;
        _3017 = (((((_3079 * _2737) + _1093) * cbLight._m0[_3030].y) * _3098) * _3099) + _2907;
        _3019 = (((((_3079 * _2738) + _1094) * cbLight._m0[_3030].z) * _3098) * _3099) + _2909;
    }
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_2435.y == 0u)
    {
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.x;
        uint _3132 = uint((float(_3120.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1030) / _3121))) + floor(float(uint(cbSceneParam._m0[85u].x * _1029) / _3121)));
        float _3142 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3143 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
        uint _3146 = uint(isnan(14.0) ? _3143 : (isnan(_3143) ? 14.0 : min(_3143, 14.0)));
        uvec4 _3151 = texelFetch(g_lightClusterGridBuffer, int(((_3146 << 2u) + (_3132 << 6u)) >> 2u));
        uint _3152 = _3151.x;
        uint _3153 = _3120.z;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((((1u << ((_3153 >> 4u) & 15u)) + 4294967295u) & _3152) == 0u) || ((_3153 & 240u) == 0u))
        {
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
        }
        else
        {
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            uint _3391 = 0u;
            uint _3400;
            bool _3401;
            for (;;)
            {
                _3400 = texelFetch(g_lightClassification, int((((_3146 << 5u) + (_3132 << 9u)) + (_3391 << 2u)) >> 2u)).x;
                _3401 = _3400 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3401)
                {
                    frontier_phi_71_pred = _3390;
                    frontier_phi_71_pred_1 = _3389;
                    frontier_phi_71_pred_2 = _3388;
                    frontier_phi_71_pred_3 = _3387;
                    frontier_phi_71_pred_4 = _3386;
                    frontier_phi_71_pred_5 = _3385;
                }
                else
                {
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    uint _3536;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3400;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    for (;;)
                    {
                        uint _3540 = uint(findLSB(_3536)) + (_3391 << 5u);
                        uint _3537 = (_3536 + 4294967295u) & _3536;
                        uint _3542 = _3540 * 48u;
                        vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3542)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 3u)).x));
                        uint _3562 = (_3540 * 48u) + 4u;
                        vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3562)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 3u)).x));
                        uint _3581 = (_3540 * 48u) + 8u;
                        vec3 _3592 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3581)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 2u)).x));
                        float _3596 = _3556.x - _2211;
                        float _3597 = _3556.y - _2212;
                        float _3598 = _3556.z - _2213;
                        float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                        float _3602 = inversesqrt(_3599);
                        float _3603 = _3602 * _3596;
                        float _3604 = _3602 * _3597;
                        float _3605 = _3602 * _3598;
                        float _3606 = dot(vec3(_1048, _1051, _1054), vec3(_3603, _3604, _3605));
                        float _3611 = 1.0 - (_3599 * _3556.w);
                        float _5073 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3612 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3613 = sqrt(_3599) * _3575.w;
                        float _3616 = 1.39999997615814208984375 / (_3613 + 1.39999997615814208984375);
                        float _3617 = _3616 * _3616;
                        float _3620 = ((1.0 - _3617) * _3606) + _3617;
                        float _3623 = _3613 * _3613;
                        float _3627 = ((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3612) / ((_3623 * 0.699999988079071044921875) + 1.0);
                        float _3631 = (-0.0) - _2211;
                        float _3632 = (-0.0) - _2212;
                        float _3633 = (-0.0) - _2213;
                        float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                        float _3638 = _3637 * _3631;
                        float _3639 = _3637 * _3632;
                        float _3640 = _3637 * _3633;
                        float _3647 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                        float _3648 = 1.0 - _1123;
                        float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                        float _3656 = _3655 * _3655;
                        float _3657 = _3656 * _3656;
                        float _3658 = _3638 + _3603;
                        float _3659 = _3639 + _3604;
                        float _3660 = _3640 + _3605;
                        float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                        float _3668 = dot(vec3(_1048, _1051, _1054), vec3(_3638, _3639, _3640));
                        float _5089 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3671 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3672 = dot(vec3(_1048, _1051, _1054), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                        float _5100 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                        float _3680 = _3616 * _3656;
                        float _3681 = _3680 * _3680;
                        float _3684 = ((1.0 - _3681) * _3606) + _3681;
                        float _5111 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3685 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3686 = 1.0 - _3656;
                        float _3696 = (0.5 / (((_3685 * ((_3671 * _3686) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3656) * _3671))) * _3685;
                        float _5122 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3707 = (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0)))) / ((_3679 * _3679) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125))) * _3612;
                        _3460 = (_3627 * _3575.x) + _3533;
                        _3461 = (_3627 * _3575.y) + _3534;
                        _3462 = (_3627 * _3575.z) + _3535;
                        _3457 = (_3707 * _3592.x) + _3530;
                        _3458 = (_3707 * _3592.y) + _3531;
                        _3459 = (_3707 * _3592.z) + _3532;
                        if (_3537 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3537;
                        }
                    }
                    frontier_phi_71_pred = _3462;
                    frontier_phi_71_pred_1 = _3461;
                    frontier_phi_71_pred_2 = _3460;
                    frontier_phi_71_pred_3 = _3459;
                    frontier_phi_71_pred_4 = _3458;
                    frontier_phi_71_pred_5 = _3457;
                }
                _3243 = frontier_phi_71_pred;
                _3241 = frontier_phi_71_pred_1;
                _3239 = frontier_phi_71_pred_2;
                _3237 = frontier_phi_71_pred_3;
                _3235 = frontier_phi_71_pred_4;
                _3233 = frontier_phi_71_pred_5;
                uint _3392 = _3391 + 1u;
                if (_3392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3385 = _3233;
                    _3386 = _3235;
                    _3387 = _3237;
                    _3388 = _3239;
                    _3389 = _3241;
                    _3390 = _3243;
                    _3391 = _3392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
        }
        uvec4 _3246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3247 = _3246.z;
        uint _3249 = (_3247 >> 8u) & 15u;
        float _3353;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        if (((4294967295u << _3249) & _3152) == 0u)
        {
            _3353 = _3232;
            _3355 = _3234;
            _3357 = _3236;
            _3359 = _3238;
            _3361 = _3240;
            _3363 = _3242;
        }
        else
        {
            float _3378 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _3379 = _3378 * _2211;
            float _3380 = _3378 * _2212;
            float _3381 = _3378 * _2213;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3249 < ((_3247 >> 12u) & 15u))
            {
                float _3354;
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3513 = _3232;
                float _3514 = _3234;
                float _3515 = _3236;
                float _3516 = _3238;
                float _3517 = _3240;
                float _3518 = _3242;
                uint _3519 = _3249;
                uint _3528;
                bool _3529;
                for (;;)
                {
                    _3528 = texelFetch(g_lightClassification, int((((_3146 << 5u) + (_3132 << 9u)) + (_3519 << 2u)) >> 2u)).x;
                    _3529 = _3528 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3529)
                    {
                        frontier_phi_82_pred = _3518;
                        frontier_phi_82_pred_1 = _3517;
                        frontier_phi_82_pred_2 = _3516;
                        frontier_phi_82_pred_3 = _3515;
                        frontier_phi_82_pred_4 = _3514;
                        frontier_phi_82_pred_5 = _3513;
                    }
                    else
                    {
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        uint _3740 = _3528;
                        uint _3741;
                        vec4 _3766;
                        float _3767;
                        vec4 _3782;
                        vec3 _3794;
                        vec4 _3809;
                        vec4 _3824;
                        float _3870;
                        bool _3871;
                        for (;;)
                        {
                            uint _3751 = ((_3519 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3740));
                            _3741 = (_3740 + 4294967295u) & _3740;
                            uint _3753 = _3751 * 40u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            _3767 = _3766.w;
                            uint _3769 = (_3751 * 40u) + 4u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3751 * 40u) + 8u;
                            _3794 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x));
                            uint _3796 = (_3751 * 40u) + 16u;
                            _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3811 = (_3751 * 40u) + 20u;
                            _3824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 3u)).x));
                            uint _3826 = (_3751 * 40u) + 24u;
                            vec4 _3839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 3u)).x));
                            uint _3845 = (_3751 * 40u) + 28u;
                            vec4 _3858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 3u)).x));
                            _3870 = fma(_2213, _3858.z, fma(_2212, _3858.y, _3858.x * _2211)) + _3858.w;
                            _3871 = !((fma(_2213, _3839.z, fma(_2212, _3839.y, _3839.x * _2211)) + _3839.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3871)
                            {
                                float _3898 = _3766.x - _2211;
                                float _3899 = _3766.y - _2212;
                                float _3900 = _3766.z - _2213;
                                float _3901 = dot(vec3(_3898, _3899, _3900), vec3(_3898, _3899, _3900));
                                float _3904 = inversesqrt(_3901);
                                float _3905 = _3904 * _3898;
                                float _3906 = _3904 * _3899;
                                float _3907 = _3904 * _3900;
                                float _3911 = 1.0 - (_3901 / (_3767 * _3767));
                                float _5133 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3912 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3916 = sqrt(_3901) * _3782.w;
                                float _3918 = 1.39999997615814208984375 / (_3916 + 1.39999997615814208984375);
                                float _3919 = _3918 * _3918;
                                float _3922 = ((1.0 - _3919) * dot(vec3(_3905, _3906, _3907), vec3(_1048, _1051, _1054))) + _3919;
                                float _3925 = _3916 * _3916;
                                float _3929 = (fma(_2213, _3809.z, fma(_2212, _3809.y, _3809.x * _2211)) + _3809.w) / _3870;
                                float _3930 = (fma(_2213, _3824.z, fma(_2212, _3824.y, _3824.x * _2211)) + _3824.w) / _3870;
                                float _3934 = 1.0 - dot(vec2(_3929, _3930), vec2(_3929, _3930));
                                float _5149 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3936 = _3935 * (((isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0))) * _3912) / ((_3925 * 0.699999988079071044921875) + 1.0));
                                float _3948 = exp2(log2(1.0 / ((_3925 * 3.5) + 5.0)) * 0.25);
                                float _3949 = 1.0 - _1123;
                                float _3956 = sqrt(1.0 - ((1.0 - (_3949 * _3949)) * (1.0 - (_3948 * _3948))));
                                float _3957 = _3956 * _3956;
                                float _3958 = _3957 * _3957;
                                float _3959 = _3905 - _3379;
                                float _3960 = _3906 - _3380;
                                float _3961 = _3907 - _3381;
                                float _3965 = inversesqrt(dot(vec3(_3959, _3960, _3961), vec3(_3959, _3960, _3961)));
                                float _3969 = dot(vec3(_1048, _1051, _1054), vec3((-0.0) - _3379, (-0.0) - _3380, (-0.0) - _3381));
                                float _5160 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3972 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3973 = dot(vec3(_1048, _1051, _1054), vec3(_3965 * _3959, _3965 * _3960, _3965 * _3961));
                                float _5171 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3976 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3980 = ((_3976 * _3976) * (_3958 + (-1.0))) + 1.0;
                                float _3981 = _3918 * _3957;
                                float _3982 = _3981 * _3981;
                                float _3988 = ((1.0 - _3982) * dot(vec3(_1048, _1051, _1054), vec3(_3905, _3906, _3907))) + _3982;
                                float _5182 = isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0));
                                float _3989 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _3990 = 1.0 - _3957;
                                float _4000 = (0.5 / (((_3989 * ((_3972 * _3990) + _3957)) + 9.9999999392252902907785028219223e-09) + (((_3989 * _3990) + _3957) * _3972))) * _3989;
                                float _5193 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4010 = (_3935 * _3912) * (((_3958 * 3.1415927410125732421875) * (isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0)))) / ((_3980 * _3980) * ((_3925 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3936 * _3782.z;
                                frontier_phi_88_pred_1 = _3936 * _3782.y;
                                frontier_phi_88_pred_2 = _3936 * _3782.x;
                                frontier_phi_88_pred_3 = _4010 * _3794.z;
                                frontier_phi_88_pred_4 = _4010 * _3794.y;
                                frontier_phi_88_pred_5 = _4010 * _3794.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4019 = frontier_phi_88_pred;
                            _4018 = frontier_phi_88_pred_1;
                            _4017 = frontier_phi_88_pred_2;
                            _4016 = frontier_phi_88_pred_3;
                            _4015 = frontier_phi_88_pred_4;
                            _4014 = frontier_phi_88_pred_5;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            if (_3741 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3741;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3726;
                        frontier_phi_82_pred_1 = _3725;
                        frontier_phi_82_pred_2 = _3724;
                        frontier_phi_82_pred_3 = _3723;
                        frontier_phi_82_pred_4 = _3722;
                        frontier_phi_82_pred_5 = _3721;
                    }
                    _3364 = frontier_phi_82_pred;
                    _3362 = frontier_phi_82_pred_1;
                    _3360 = frontier_phi_82_pred_2;
                    _3358 = frontier_phi_82_pred_3;
                    _3356 = frontier_phi_82_pred_4;
                    _3354 = frontier_phi_82_pred_5;
                    uint _3520 = _3519 + 1u;
                    if (_3520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3513 = _3354;
                        _3514 = _3356;
                        _3515 = _3358;
                        _3516 = _3360;
                        _3517 = _3362;
                        _3518 = _3364;
                        _3519 = _3520;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3360;
                frontier_phi_63_64_ladder_1 = _3364;
                frontier_phi_63_64_ladder_2 = _3362;
                frontier_phi_63_64_ladder_3 = _3358;
                frontier_phi_63_64_ladder_4 = _3356;
                frontier_phi_63_64_ladder_5 = _3354;
            }
            else
            {
                frontier_phi_63_64_ladder = _3238;
                frontier_phi_63_64_ladder_1 = _3242;
                frontier_phi_63_64_ladder_2 = _3240;
                frontier_phi_63_64_ladder_3 = _3236;
                frontier_phi_63_64_ladder_4 = _3234;
                frontier_phi_63_64_ladder_5 = _3232;
            }
            _3353 = frontier_phi_63_64_ladder_5;
            _3355 = frontier_phi_63_64_ladder_4;
            _3357 = frontier_phi_63_64_ladder_3;
            _3359 = frontier_phi_63_64_ladder;
            _3361 = frontier_phi_63_64_ladder_2;
            _3363 = frontier_phi_63_64_ladder_1;
        }
        float _3368 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _3165 = (_3368 * _3359) + _2677;
        _3167 = (_3368 * _3361) + _2679;
        _3169 = (_3368 * _3363) + _2681;
        _3171 = ((_3353 * _1091) * _3368) + _3015;
        _3173 = ((_3355 * _1093) * _3368) + _3017;
        _3175 = ((_3357 * _1094) * _3368) + _3019;
    }
    else
    {
        _3165 = _2677;
        _3167 = _2679;
        _3169 = _2681;
        _3171 = _3015;
        _3173 = _3017;
        _3175 = _3019;
    }
    float _5209 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5220 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _5231 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _3192 = ((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3165 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1107))) + ((_3171 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    float _3193 = ((isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3167 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1107))) + ((_3173 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    float _3194 = ((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3169 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1107))) + ((_3175 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    uint _3195 = _288 + 6u;
    float _3203 = _1029 / cbSceneParam._m0[86u].x;
    float _3204 = _1030 / cbSceneParam._m0[86u].y;
    vec4 _3218 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3203, _3204, (log2((isnan(cbSceneParam._m0[77u].w) ? _951 : (isnan(_951) ? cbSceneParam._m0[77u].w : min(_951, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3220 = _3218.x;
    float _3221 = _3218.y;
    float _3222 = _3218.z;
    float _3223 = _3218.w;
    float _3295;
    float _3297;
    float _3299;
    float _3301;
    if (_951 > cbSceneParam._m0[78u].w)
    {
        float _3257 = isnan(_951) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _951 : min(cbSceneParam._m0[80u].w, _951));
        float _3258 = _3257 / _951;
        float _3269 = _3258 * _1002;
        float _3270 = _1003 * _3258;
        float _3271 = (-0.0) - _3270;
        float _3273 = _3258 * _1004;
        float _3275 = (cbSceneParam._m0[77u].w * _3271) / _3257;
        float _3276 = _3275 + cbSceneParam._m0[79u].w;
        float _3277 = cbSceneParam._m0[79u].w - _3270;
        float _3283 = sqrt(((_3269 * _3269) + (_3270 * _3270)) + (_3273 * _3273));
        float _3286 = (1.0 - (cbSceneParam._m0[77u].w / _3257)) * _3283;
        float _3291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3293 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3470;
        if (abs((_3271 - _3275) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3470 = ((((_3276 > 0.0) ? exp2(_3291 * _3276) : (2.0 - exp2(_3293 * _3276))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3286;
        }
        else
        {
            float _3414 = 1.0 / cbSceneParam._m0[80u].x;
            float _3415 = isnan(_3277) ? _3276 : (isnan(_3276) ? _3277 : max(_3276, _3277));
            float _3416 = isnan(_3277) ? _3276 : (isnan(_3276) ? _3277 : min(_3276, _3277));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            float _3426 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : min(_3416, 0.0));
            _3470 = ((abs(_3283 / _3271) * cbSceneParam._m0[80u].y) * ((((_3425 - _3426) * 2.0) - ((exp2(_3291 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0)))) - exp2(_3291 * (isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))))) * _3414)) - ((exp2(_3293 * _3425) - exp2(_3293 * _3426)) * _3414))) + (_3286 * cbSceneParam._m0[80u].z);
        }
        vec4 _3472 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3203, _3204, 1.0), 0.0);
        float _3481 = exp2((_3470 * (-1.44269502162933349609375)) * (1.0 - _3472.w));
        float _3482 = log2(_3481);
        float _3498 = log2(_3223);
        _3295 = (exp2(_3498 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].x)) * _3472.x) / cbSceneParam._m0[78u].x)) + _3220;
        _3297 = (exp2(_3498 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].y)) * _3472.y) / cbSceneParam._m0[78u].y)) + _3221;
        _3299 = (exp2(_3498 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].z)) * _3472.z) / cbSceneParam._m0[78u].z)) + _3222;
        _3301 = _3481 * _3223;
    }
    else
    {
        _3295 = _3220;
        _3297 = _3221;
        _3299 = _3222;
        _3301 = _3223;
    }
    bool _3508;
    vec4 _3311;
    vec4 _3333;
    float _3335;
    float _3339;
    float _3340;
    float _3341;
    float _3342;
    bool _3352;
    for (;;)
    {
        _3311 = cbMatDynParam._m0[0u];
        float _3313 = roundEven(_3311.y);
        bool _3314 = _3313 == 3.0;
        float _3315 = log2(_3301);
        float _3322 = exp2(_3315 * cbSceneParam._m0[78u].x) * _3192;
        float _3323 = exp2(_3315 * cbSceneParam._m0[78u].y) * _3193;
        float _3324 = exp2(_3315 * cbSceneParam._m0[78u].z) * _3194;
        float _3331 = _1018 + (-0.5);
        _3333 = cbMtdParam._m0[1u];
        _3335 = _3333.y * _3331;
        float _3338 = (_3313 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3339 = _3338 * (_3314 ? _3322 : (_3322 + (cbSceneParam._m0[72u].w * _3295)));
        _3340 = _3338 * (_3314 ? _3323 : (_3323 + (cbSceneParam._m0[72u].w * _3297)));
        _3341 = _3338 * (_3314 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3299)));
        _3342 = _3331 * 0.999000012874603271484375;
        _3352 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3352)
        {
            if ((cbInstanceData._m0[_288 + 7u].x + _3342) < 0.5)
            {
                _3508 = true;
                break;
            }
        }
        uint _3449 = _1067 + uint(_3311.w);
        if ((cbInstanceData._m0[_3449].w < 1.0) && ((cbInstanceData._m0[_3449].w + _3342) < 0.5))
        {
            _3508 = true;
            break;
        }
        if ((_3335 + 1.0) < _3333.x)
        {
            _3508 = true;
            break;
        }
        _3508 = false;
        break;
    }
    float _3712;
    if (_3508)
    {
        discard_state = true;
        _3712 = 0.0;
    }
    else
    {
        _3712 = cbInstanceData._m0[_3195].w;
    }
    SV_Target.x = _3339;
    SV_Target.y = _3340;
    SV_Target.z = _3341;
    SV_Target.w = _3712;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3195].w;
    discard_exit();
}


