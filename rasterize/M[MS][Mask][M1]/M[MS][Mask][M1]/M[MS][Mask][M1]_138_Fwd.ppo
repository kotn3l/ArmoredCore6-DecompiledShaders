#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1673;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3996 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4007 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4018 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4029 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[23u].w) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4040 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _548 = (_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475;
    float _549 = (_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476;
    float _550 = (_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[23u].w) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4051 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _630;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _318) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _319) + cbTextureTilingScale._m0[14u].w));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _468) + _718;
    float _728 = ((_699.y - _719) * _468) + _719;
    float _729 = ((_699.z - _720) * _468) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _541) + _727;
    float _753 = ((_741.y - _728) * _541) + _728;
    float _754 = ((_741.z - _729) * _541) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _611) + _754;
    float _782 = ((((_766.x - _752) * _611) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _611) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _4062 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))));
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _828 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _830 = _828.x;
    float _831 = 1.0 - _830;
    float _839 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _842 = ((isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : min(_839, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _851 = (_842 - ((((((_830 - _831) * cbMtdParam._m0[24u].z) + _831) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _842))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4083 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _852 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _859 = (_852 * ((_657.x * cbMtdParam._m0[18u].x) - _637)) + _637;
    float _860 = (_852 * ((_657.y * cbMtdParam._m0[18u].y) - _638)) + _638;
    float _861 = (_852 * ((_657.z * cbMtdParam._m0[18u].z) - _639)) + _639;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _875 = _873.x;
    float _876 = 1.0 - _875;
    float _901 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_875 - _876) * cbMtdParam._m0[24u].w) + _876) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4094 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _902 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _910 = ((((cbMtdParam._m0[10u].x - _859) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _902) + _859;
    float _911 = ((((cbMtdParam._m0[10u].y - _860) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _902) + _860;
    float _912 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _861)) * _902) + _861;
    vec4 _938 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _940 = _938.x;
    float _958 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _940) * _468) + _940;
    float _975 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _958) * _541) + _958;
    float _992 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _975) * _611) + _975;
    float _996 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _992) * cbMtdParam._m0[19u].z) + _992;
    float _998 = _996 - (_996 * _852);
    float _1000 = _998 - (_998 * _902);
    float _1005 = (((_676.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _1009 = ((_803.z - _1005) * cbMtdParam._m0[19u].w) + _1005;
    vec4 _1025 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1032 = (_1025.x * 2.0) + (-1.0);
    float _1033 = (_1025.y * 2.0) + (-1.0);
    float _1034 = dot(vec2(_1032, _1033), vec2(_1032, _1033));
    float _4105 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1042 = (_852 * (_1025.z - _1009)) + _1009;
    float _1045 = ((cbMtdParam._m0[23u].x - _1042) * _902) + _1042;
    vec4 _1068 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1074 = (_1068.x * 2.0) + (-1.0);
    float _1075 = (_1068.y * 2.0) + (-1.0);
    float _1076 = dot(vec2(_1074, _1075), vec2(_1074, _1075));
    float _4116 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1090 = (_782 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_676.x * 2.0) + (-1.0)))) + (((_803.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1091 = (_783 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_676.y * 2.0) + (-1.0)))) + (((_803.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1103 = (((_1032 - _1090) + (cbMtdParam._m0[21u].x * _1090)) * _852) + _1090;
    float _1104 = (((_1033 - _1091) + (cbMtdParam._m0[21u].x * _1091)) * _852) + _1091;
    float _1105 = (_852 * (sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) - _789)) + _789;
    float _1116 = (((_1074 - _1103) + (_1103 * cbMtdParam._m0[22u].z)) * _902) + _1103;
    float _1117 = (((_1075 - _1104) + (_1104 * cbMtdParam._m0[22u].z)) * _902) + _1104;
    float _1118 = ((sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) - _1105) * _902) + _1105;
    float _1120 = cbMtdParam._m0[22u].x + _803.w;
    float _1123 = fma(_1118, _267 * NORMAL.x, fma(_1117, _274 * TANGENT.x, (_260 * _252) * _1116));
    float _1126 = fma(_1118, _267 * NORMAL.y, fma(_1117, _274 * TANGENT.y, (_260 * _253) * _1116));
    float _1129 = fma(_1118, _267 * NORMAL.z, fma(_1117, _274 * TANGENT.z, (_260 * _254) * _1116));
    float _1133 = inversesqrt(dot(vec3(_1123, _1126, _1129), vec3(_1123, _1126, _1129)));
    float _1134 = _1133 * _1123;
    float _1135 = _1133 * _1126;
    float _1136 = _1133 * _1129;
    float _4127 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1137 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _4149 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4160 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4171 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4182 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1142 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _1156 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1206 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1196);
    float _1207 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1196);
    float _1208 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1196);
    float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
    float _1213 = _1206 * _1212;
    float _1214 = _1207 * _1212;
    float _1215 = _1208 * _1212;
    float _1221 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1222 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1240 = fma(_1136, cbSceneParam._m0[5u].z, fma(_1135, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1134));
    float _1243 = fma(_1136, cbSceneParam._m0[6u].z, fma(_1135, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1134));
    float _1246 = fma(_1136, cbSceneParam._m0[7u].z, fma(_1135, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1134));
    uint _1260 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1266 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_1260].x;
    float _1267 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_1260].y;
    float _1268 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_1260].z;
    float _4193 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _1269 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _1270 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _1271 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1272 = 1.0 - _1142;
    float _1273 = _1269 * _1272;
    float _1274 = _1270 * _1272;
    float _1275 = _1271 * _1272;
    float _1280 = (_1269 + (-0.039999999105930328369140625)) * _1142;
    float _1281 = (_1270 + (-0.039999999105930328369140625)) * _1142;
    float _1282 = (_1271 + (-0.039999999105930328369140625)) * _1142;
    float _1283 = _1280 + 0.039999999105930328369140625;
    float _1285 = _1281 + 0.039999999105930328369140625;
    float _1286 = _1282 + 0.039999999105930328369140625;
    vec4 _1295 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1221, cbSceneParam._m0[86u].y * _1222));
    float _1299 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * TEXCOORD_5.w) * _1295.x;
    float _1300 = dot(vec3(_1134, _1135, _1136), vec3(_1213, _1214, _1215));
    float _1303 = _1300 * 2.0;
    float _1307 = (_1303 * _1134) - _1213;
    float _1308 = (_1303 * _1135) - _1214;
    float _1309 = (_1303 * _1136) - _1215;
    float _1313 = abs(dot(vec3(_1213, _1214, _1215), vec3(_1134, _1135, _1136)));
    float _4226 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1315 = sqrt(_1137);
    float _1328 = exp2((_1315 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1315 * 3.0));
    float _1334 = (1.0 - _1328) * ((_1315 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1335 = _1328 * _1315;
    float _1363 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1367 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1371 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1672;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1397 = fma(_1371, cbModelParam._m0[26u].z, fma(_1367, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1363));
        float _1401 = fma(_1371, cbModelParam._m0[27u].z, fma(_1367, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1363));
        float _1405 = fma(_1371, cbModelParam._m0[28u].z, fma(_1367, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1363));
        float _1430 = _1363 + _1134;
        float _1431 = _1367 + _1135;
        float _1432 = _1371 + _1136;
        float _1442 = fma(_1432, cbModelParam._m0[26u].z, fma(_1431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1430)) - _1397;
        float _1443 = fma(_1432, cbModelParam._m0[27u].z, fma(_1431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1430)) - _1401;
        float _1444 = fma(_1432, cbModelParam._m0[28u].z, fma(_1431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1430)) - _1405;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1397 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1401 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[34u].z) + ((((((_1405 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1500 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1466.x + (-0.5));
        float _1502 = _1500 * (_1466.y + (-0.5));
        float _1503 = _1500 * (_1466.z + (-0.5));
        float _1510 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1473.x + (-0.5));
        float _1512 = _1510 * (_1473.y + (-0.5));
        float _1513 = _1510 * (_1473.z + (-0.5));
        float _1520 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1480.x + (-0.5));
        float _1522 = _1520 * (_1480.y + (-0.5));
        float _1523 = _1520 * (_1480.z + (-0.5));
        float _1530 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1487.x + (-0.5));
        float _1532 = _1530 * (_1487.y + (-0.5));
        float _1533 = _1530 * (_1487.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1554 = (dot(vec3(_1134, _1135, _1136), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1564 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4274 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1566 + 1.0))) + _1571) * _1534;
        float _1581 = _1502 * 0.5;
        float _1582 = _1512 * 0.5;
        float _1583 = _1522 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_1134, _1135, _1136), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4307 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1608 + 1.0))) + _1613) * _1535;
        float _1623 = _1503 * 0.5;
        float _1624 = _1513 * 0.5;
        float _1625 = _1523 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_1134, _1135, _1136), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4340 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1650 + 1.0))) + _1655) * _1536;
        _1672 = _1503;
        _1674 = _1502;
        _1675 = _1501;
        _1676 = _1513;
        _1677 = _1512;
        _1678 = _1511;
        _1679 = _1523;
        _1680 = _1522;
        _1681 = _1521;
        _1682 = _1536;
        _1683 = _1535;
        _1684 = _1534;
        _1685 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1686 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1687 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
    }
    else
    {
        _1672 = _1673;
        _1674 = _1673;
        _1675 = _1673;
        _1676 = _1673;
        _1677 = _1673;
        _1678 = _1673;
        _1679 = _1673;
        _1680 = _1673;
        _1681 = _1673;
        _1682 = _1673;
        _1683 = _1673;
        _1684 = _1673;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    float _1983;
    float _1984;
    float _1985;
    float _1986;
    float _1987;
    float _1988;
    float _1989;
    float _1990;
    float _1991;
    float _1992;
    float _1993;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1710 = fma(_1371, cbModelParam._m0[30u].z, fma(_1367, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1363));
        float _1714 = fma(_1371, cbModelParam._m0[31u].z, fma(_1367, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1363));
        float _1718 = fma(_1371, cbModelParam._m0[32u].z, fma(_1367, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1363));
        float _1741 = _1363 + _1134;
        float _1742 = _1367 + _1135;
        float _1743 = _1371 + _1136;
        float _1753 = fma(_1743, cbModelParam._m0[30u].z, fma(_1742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1741)) - _1710;
        float _1754 = fma(_1743, cbModelParam._m0[31u].z, fma(_1742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1741)) - _1714;
        float _1755 = fma(_1743, cbModelParam._m0[32u].z, fma(_1742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1741)) - _1718;
        float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
        float _1772 = ((_1759 * _1753) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1710 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1773 = ((_1759 * _1754) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1714 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1774 = ((_1759 * _1755) / cbModelParam._m0[35u].z) + ((((((_1718 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1776 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1772, _1773, _1774), 0.0);
        vec4 _1783 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1772, _1773, _1774), 0.0);
        vec4 _1790 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1772, _1773, _1774), 0.0);
        vec4 _1797 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1772, _1773, _1774), 0.0);
        float _1809 = exp2((_1776.w + (-0.5)) * 20.0) * 2.0;
        float _1810 = _1809 * (_1776.x + (-0.5));
        float _1811 = _1809 * (_1776.y + (-0.5));
        float _1812 = _1809 * (_1776.z + (-0.5));
        float _1819 = exp2((_1783.w + (-0.5)) * 20.0) * 2.0;
        float _1820 = _1819 * (_1783.x + (-0.5));
        float _1821 = _1819 * (_1783.y + (-0.5));
        float _1822 = _1819 * (_1783.z + (-0.5));
        float _1829 = exp2((_1790.w + (-0.5)) * 20.0) * 2.0;
        float _1830 = _1829 * (_1790.x + (-0.5));
        float _1831 = _1829 * (_1790.y + (-0.5));
        float _1832 = _1829 * (_1790.z + (-0.5));
        float _1839 = exp2((_1797.w + (-0.5)) * 20.0) * 2.0;
        float _1840 = _1839 * (_1797.x + (-0.5));
        float _1841 = _1839 * (_1797.y + (-0.5));
        float _1842 = _1839 * (_1797.z + (-0.5));
        float _1843 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1844 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1845 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1846 = _1810 * 0.5;
        float _1847 = _1820 * 0.5;
        float _1848 = _1830 * 0.5;
        float _1849 = dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848));
        float _1854 = (_1849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1849);
        float _1862 = (dot(vec3(_1134, _1135, _1136), vec3(_1854 * _1846, _1854 * _1847, _1854 * _1848)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848)) / (_1843 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1873 = _1872 * 2.0;
        float _1877 = (1.0 - _1872) / (_1872 + 1.0);
        float _4403 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1887 = ((((1.0 - _1878) * (_1873 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1873 + 1.0))) + _1878) * _1843;
        float _1888 = _1811 * 0.5;
        float _1889 = _1821 * 0.5;
        float _1890 = _1831 * 0.5;
        float _1891 = dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890));
        float _1896 = (_1891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1891);
        float _1904 = (dot(vec3(_1134, _1135, _1136), vec3(_1896 * _1888, _1896 * _1889, _1896 * _1890)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1913 = sqrt(((_1889 * _1889) + (_1888 * _1888)) + (_1890 * _1890)) / (_1844 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1915 = _1914 * 2.0;
        float _1919 = (1.0 - _1914) / (_1914 + 1.0);
        float _4436 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1929 = ((((1.0 - _1920) * (_1915 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1915 + 1.0))) + _1920) * _1844;
        float _1930 = _1812 * 0.5;
        float _1931 = _1822 * 0.5;
        float _1932 = _1832 * 0.5;
        float _1933 = dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932));
        float _1938 = (_1933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1933);
        float _1946 = (dot(vec3(_1134, _1135, _1136), vec3(_1938 * _1930, _1938 * _1931, _1938 * _1932)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1955 = sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932)) / (_1845 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1957 = _1956 * 2.0;
        float _1961 = (1.0 - _1956) / (_1956 + 1.0);
        float _4469 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1971 = ((((1.0 - _1962) * (_1957 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1957 + 1.0))) + _1962) * _1845;
        _1979 = _1812;
        _1980 = _1811;
        _1981 = _1810;
        _1982 = _1822;
        _1983 = _1821;
        _1984 = _1820;
        _1985 = _1832;
        _1986 = _1831;
        _1987 = _1830;
        _1988 = _1845;
        _1989 = _1844;
        _1990 = _1843;
        _1991 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)));
        _1992 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)));
        _1993 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)));
    }
    else
    {
        _1979 = _1673;
        _1980 = _1673;
        _1981 = _1673;
        _1982 = _1673;
        _1983 = _1673;
        _1984 = _1673;
        _1985 = _1673;
        _1986 = _1673;
        _1987 = _1673;
        _1988 = _1673;
        _1989 = _1673;
        _1990 = _1673;
        _1991 = 0.0;
        _1992 = 0.0;
        _1993 = 0.0;
    }
    float _2003 = (cbModelParam._m0[1u].x * (_1991 - _1685)) + _1685;
    float _2004 = (cbModelParam._m0[1u].x * (_1992 - _1686)) + _1686;
    float _2005 = (cbModelParam._m0[1u].x * (_1993 - _1687)) + _1687;
    float _2026 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2003));
    float _2047 = _1307 * 0.5;
    float _2048 = _1308 * 0.5;
    float _2049 = _1309 * 0.5;
    float _2050 = dot(vec4(_2047, _2048, _2049, 1.0), vec4(_1981, _1984, _1987, _1990));
    float _2053 = dot(vec4(_2047, _2048, _2049, 1.0), vec4(_1980, _1983, _1986, _1989));
    float _2056 = dot(vec4(_2047, _2048, _2049, 1.0), vec4(_1979, _1982, _1985, _1988));
    float _2090;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2063 = dot(vec4(_2047, _2048, _2049, 1.0), vec4(_1672, _1676, _1679, _1682));
        float _2067 = dot(vec4(_2047, _2048, _2049, 1.0), vec4(_1674, _1677, _1680, _1683));
        float _2071 = dot(vec4(_2047, _2048, _2049, 1.0), vec4(_1675, _1678, _1681, _1684));
        float _2078 = dot(vec4(cbModelParam._m0[39u]), vec4(_2047, _2048, _2049, 1.0));
        _2090 = dot(vec3(isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)), isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0)), isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2078) ? 0.0 : (isnan(0.0) ? _2078 : max(0.0, _2078))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2090 = 1.0;
    }
    float _2101;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2092 = dot(vec4(cbModelParam._m0[40u]), vec4(_2047, _2048, _2049, 1.0));
        _2101 = dot(vec3(isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)), isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)), isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2092) ? 0.0 : (isnan(0.0) ? _2092 : max(0.0, _2092))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2101 = 1.0;
    }
    float _2105 = (_2101 * cbModelParam._m0[1u].x) + (_2090 * (1.0 - cbModelParam._m0[1u].x));
    float _2115 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1137);
    float _2116 = isnan(_2115) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2115 : min(cbModelParam._m0[25u].z, _2115));
    float _2196;
    float _2198;
    float _2200;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2163 = fma(_1371, cbModelParam._m0[13u].z, fma(_1367, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1363)) + cbModelParam._m0[13u].w;
        float _2167 = fma(_1371, cbModelParam._m0[14u].z, fma(_1367, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1363)) + cbModelParam._m0[14u].w;
        float _2171 = fma(_1371, cbModelParam._m0[15u].z, fma(_1367, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1363)) + cbModelParam._m0[15u].w;
        float _2174 = fma(_1309, cbModelParam._m0[13u].z, fma(_1308, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1307));
        float _2177 = fma(_1309, cbModelParam._m0[14u].z, fma(_1308, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1307));
        float _2180 = fma(_1309, cbModelParam._m0[15u].z, fma(_1308, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1307));
        float _2208;
        if (_2174 > 0.0)
        {
            _2208 = abs((1.0 - _2163) / _2174);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2163 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2208 = frontier_phi_14_12_ladder;
        }
        float _2410;
        if (_2177 > 0.0)
        {
            _2410 = abs((1.0 - _2167) / _2177);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2167 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2410 = frontier_phi_23_19_ladder;
        }
        float _2664;
        if (_2180 > 0.0)
        {
            _2664 = abs((1.0 - _2171) / _2180);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2171 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2664 = frontier_phi_35_30_ladder;
        }
        float _2666 = isnan(_2410) ? _2208 : (isnan(_2208) ? _2410 : min(_2208, _2410));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _2174) + _2163;
        float _2672 = (_2667 * _2177) + _2167;
        float _2673 = (_2667 * _2180) + _2171;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2674;
        float _2678 = _2674 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 > _2678) || ((_2672 < _2676) || ((_2671 < _2676) || (_2671 > _2678))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2673, cbModelParam._m0[9u].z, fma(_2672, cbModelParam._m0[9u].y, _2671 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2673, cbModelParam._m0[10u].z, fma(_2672, cbModelParam._m0[10u].y, _2671 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2673, cbModelParam._m0[11u].z, fma(_2672, cbModelParam._m0[11u].y, _2671 * cbModelParam._m0[11u].x))), _2116);
            frontier_phi_13_35_ladder = _2801.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2801.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2801.x * cbModelParam._m0[1u].y;
        }
        _2196 = frontier_phi_13_35_ladder_2;
        _2198 = frontier_phi_13_35_ladder_1;
        _2200 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2184 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1307, _1308, _1309), _2116);
        _2196 = _2184.x * cbModelParam._m0[1u].y;
        _2198 = _2184.y * cbModelParam._m0[1u].y;
        _2200 = _2184.z * cbModelParam._m0[1u].y;
    }
    float _2204 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1137);
    float _2205 = isnan(_2204) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2204 : min(cbModelParam._m0[25u].w, _2204));
    float _2294;
    float _2296;
    float _2298;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2258 = fma(_1371, cbModelParam._m0[21u].z, fma(_1367, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1363)) + cbModelParam._m0[21u].w;
        float _2262 = fma(_1371, cbModelParam._m0[22u].z, fma(_1367, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1363)) + cbModelParam._m0[22u].w;
        float _2266 = fma(_1371, cbModelParam._m0[23u].z, fma(_1367, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1363)) + cbModelParam._m0[23u].w;
        float _2269 = fma(_1309, cbModelParam._m0[21u].z, fma(_1308, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1307));
        float _2272 = fma(_1309, cbModelParam._m0[22u].z, fma(_1308, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1307));
        float _2275 = fma(_1309, cbModelParam._m0[23u].z, fma(_1308, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1307));
        float _2415;
        if (_2269 > 0.0)
        {
            _2415 = abs((1.0 - _2258) / _2269);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2269 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2258 + 1.0) / _2269);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2415 = frontier_phi_25_21_ladder;
        }
        float _2691;
        if (_2272 > 0.0)
        {
            _2691 = abs((1.0 - _2262) / _2272);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2272 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2262 + 1.0) / _2272);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2691 = frontier_phi_37_32_ladder;
        }
        float _2904;
        if (_2275 > 0.0)
        {
            _2904 = abs((1.0 - _2266) / _2275);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2275 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2266 + 1.0) / _2275);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2904 = frontier_phi_46_43_ladder;
        }
        float _2906 = isnan(_2691) ? _2415 : (isnan(_2415) ? _2691 : min(_2415, _2691));
        float _2907 = isnan(_2904) ? _2906 : (isnan(_2906) ? _2904 : min(_2906, _2904));
        float _2911 = (_2907 * _2269) + _2258;
        float _2912 = (_2907 * _2272) + _2262;
        float _2913 = (_2907 * _2275) + _2266;
        float _2914 = _2907 * 9.9999997473787516355514526367188e-05;
        float _2915 = (-1.0) - _2914;
        float _2917 = _2914 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2913 > _2917) || ((_2913 < _2915) || ((_2912 > _2917) || ((_2912 < _2915) || ((_2911 < _2915) || (_2911 > _2917))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2913, cbModelParam._m0[17u].z, fma(_2912, cbModelParam._m0[17u].y, _2911 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2913, cbModelParam._m0[18u].z, fma(_2912, cbModelParam._m0[18u].y, _2911 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2913, cbModelParam._m0[19u].z, fma(_2912, cbModelParam._m0[19u].y, _2911 * cbModelParam._m0[19u].x))), _2205);
            frontier_phi_22_46_ladder = _3112.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3112.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3112.x * cbModelParam._m0[1u].z;
        }
        _2294 = frontier_phi_22_46_ladder_2;
        _2296 = frontier_phi_22_46_ladder_1;
        _2298 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2278 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1307, _1308, _1309), _2205);
        _2294 = _2278.x * cbModelParam._m0[1u].z;
        _2296 = _2278.y * cbModelParam._m0[1u].z;
        _2298 = _2278.z * cbModelParam._m0[1u].z;
    }
    float _2311 = (((_1334 * _1283) + _1335) * _1299) * ((cbModelParam._m0[1u].w * (_2294 - _2196)) + _2196);
    float _2313 = (((_1334 * _1285) + _1335) * _1299) * ((cbModelParam._m0[1u].w * (_2296 - _2198)) + _2198);
    float _2315 = (((_1334 * _1286) + _1335) * _1299) * ((cbModelParam._m0[1u].w * (_2298 - _2200)) + _2200);
    float _2318 = fma(_2315, cbSceneParam._m0[89u].z, fma(_2313, cbSceneParam._m0[89u].y, _2311 * cbSceneParam._m0[89u].x));
    float _2321 = fma(_2315, cbSceneParam._m0[90u].z, fma(_2313, cbSceneParam._m0[90u].y, _2311 * cbSceneParam._m0[90u].x));
    float _2324 = fma(_2315, cbSceneParam._m0[91u].z, fma(_2313, cbSceneParam._m0[91u].y, _2311 * cbSceneParam._m0[91u].x));
    uvec4 _2334 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2336 = _2334.x * 14u;
    uint _2337 = _2336 + 13u;
    float _2344 = _1299 + (-1.0);
    float _2349 = (cbLight._m0[_2337].x * _2344) + 1.0;
    float _2350 = (cbLight._m0[_2337].y * _2344) + 1.0;
    float _2351 = (cbLight._m0[_2337].z * _2344) + 1.0;
    float _2352 = (cbLight._m0[_2337].w * _2344) + 1.0;
    uint _2353 = _2336 + 5u;
    float _2359 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2363 = _2336 + 4u;
    float _2369 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2373 = _2336 | 1u;
    float _2384 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_1134, _1135, _1136));
    float _2387 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_1134, _1135, _1136));
    float _4605 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _4616 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2392 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * 0.3183098733425140380859375;
    float _2394 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2401 = ((cbLight._m0[_2353].x * _2359) * _2394) + ((cbLight._m0[_2363].x * _2369) * _2392);
    float _2402 = ((_2359 * cbLight._m0[_2353].y) * _2394) + ((_2369 * cbLight._m0[_2363].y) * _2392);
    float _2403 = ((_2359 * cbLight._m0[_2353].z) * _2394) + ((_2369 * cbLight._m0[_2363].z) * _2392);
    uvec4 _2407 = floatBitsToUint(cbLight._m0[_2336 + 12u]);
    bool _2409 = _2407.x == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2409)
    {
        _2420 = _2401;
        _2422 = _2402;
        _2424 = _2403;
    }
    else
    {
        uint _2428 = _2336 + 6u;
        float _2444 = (dot(vec3(cbLight._m0[_2336 + 2u].xyz), vec3(_1134, _1135, _1136)) * 0.5) + 0.5;
        float _2445 = _2444 * _2444;
        float _4627 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2446 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2447 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2420 = (((cbLight._m0[_2428].x * 0.3183098733425140380859375) * _2446) * _2447) + _2401;
        _2422 = (((cbLight._m0[_2428].y * 0.3183098733425140380859375) * _2446) * _2447) + _2402;
        _2424 = (((cbLight._m0[_2428].z * 0.3183098733425140380859375) * _2446) * _2447) + _2403;
    }
    bool _2427 = _2407.y == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2427)
    {
        _2465 = _2420;
        _2467 = _2422;
        _2469 = _2424;
    }
    else
    {
        uint _2635 = _2336 + 7u;
        float _2651 = (dot(vec3(cbLight._m0[_2336 + 3u].xyz), vec3(_1134, _1135, _1136)) * 0.5) + 0.5;
        float _2652 = _2651 * _2651;
        float _4643 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2653 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2654 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2465 = (((cbLight._m0[_2635].x * 0.3183098733425140380859375) * _2653) * _2654) + _2420;
        _2467 = (((cbLight._m0[_2635].y * 0.3183098733425140380859375) * _2653) * _2654) + _2422;
        _2469 = (((cbLight._m0[_2635].z * 0.3183098733425140380859375) * _2653) * _2654) + _2424;
    }
    uint _2472 = _2336 + 8u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _1137) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2336].x + _1213;
    float _2488 = cbLight._m0[_2336].y + _1214;
    float _2489 = cbLight._m0[_2336].z + _1215;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_1134, _1135, _1136), vec3(cbLight._m0[_2336].xyz));
    float _4659 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _4670 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _2501 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2502 = dot(vec3(_1134, _1135, _1136), vec3(_2494, _2495, _2496));
    float _4681 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2494, _2495, _2496));
    float _4692 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2486 * _2486;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
    float _2523 = 0.959999978542327880859375 - _1280;
    float _2525 = 0.959999978542327880859375 - _1281;
    float _2526 = 0.959999978542327880859375 - _1282;
    float _2533 = 1.0 - _2486;
    float _2544 = (0.5 / (((_2501 * ((_2500 * _2533) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2533) + _2486) * _2500))) * _2500;
    float _4703 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    uint _2557 = _2336 + 9u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _1137) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2373].x + _1213;
    float _2571 = cbLight._m0[_2373].y + _1214;
    float _2572 = cbLight._m0[_2373].z + _1215;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_1134, _1135, _1136), vec3(cbLight._m0[_2373].xyz));
    float _4714 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2584 = dot(vec3(_1134, _1135, _1136), vec3(_2577, _2578, _2579));
    float _4725 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2577, _2578, _2579));
    float _4736 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2569 * _2569;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
    float _2610 = 1.0 - _2569;
    float _2620 = (0.5 / (((_2501 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2610) + _2569) * _2583))) * _2583;
    float _4747 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2622 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    float _2632 = (((((_2603 * _2523) + _1283) * cbLight._m0[_2557].x) * _2622) * _2359) + (((((_2522 * _2523) + _1283) * cbLight._m0[_2472].x) * _2546) * _2369);
    float _2633 = (((((_2603 * _2525) + _1285) * cbLight._m0[_2557].y) * _2622) * _2359) + (((((_2522 * _2525) + _1285) * cbLight._m0[_2472].y) * _2546) * _2369);
    float _2634 = (((((_2603 * _2526) + _1286) * cbLight._m0[_2557].z) * _2622) * _2359) + (((((_2522 * _2526) + _1286) * cbLight._m0[_2472].z) * _2546) * _2369);
    float _2696;
    float _2698;
    float _2700;
    if (_2409)
    {
        _2696 = _2632;
        _2698 = _2633;
        _2700 = _2634;
    }
    else
    {
        uint _2702 = _2336 + 2u;
        uint _2706 = _2336 + 10u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _1137) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _1213;
        float _2723 = cbLight._m0[_2702].y + _1214;
        float _2724 = cbLight._m0[_2702].z + _1215;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_1134, _1135, _1136), vec3(cbLight._m0[_2702].xyz));
        float _4758 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2736 = dot(vec3(_1134, _1135, _1136), vec3(_2729, _2730, _2731));
        float _4769 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4780 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2501 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2762) + _2721) * _2735))) * _2735;
        float _4791 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2696 = (((((_2755 * _2523) + _1283) * cbLight._m0[_2706].x) * _2774) * _2775) + _2632;
        _2698 = (((((_2755 * _2525) + _1285) * cbLight._m0[_2706].y) * _2774) * _2775) + _2633;
        _2700 = (((((_2755 * _2526) + _1286) * cbLight._m0[_2706].z) * _2774) * _2775) + _2634;
    }
    float _2810;
    float _2812;
    float _2814;
    if (_2427)
    {
        _2810 = _2696;
        _2812 = _2698;
        _2814 = _2700;
    }
    else
    {
        uint _2821 = _2336 + 3u;
        uint _2825 = _2336 + 11u;
        float _2839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2821].w)) * _1137) * 0.949999988079071044921875);
        float _2840 = _2839 * _2839;
        float _2841 = cbLight._m0[_2821].x + _1213;
        float _2842 = cbLight._m0[_2821].y + _1214;
        float _2843 = cbLight._m0[_2821].z + _1215;
        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
        float _2848 = _2847 * _2841;
        float _2849 = _2847 * _2842;
        float _2850 = _2847 * _2843;
        float _2851 = dot(vec3(_1134, _1135, _1136), vec3(cbLight._m0[_2821].xyz));
        float _4807 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2855 = dot(vec3(_1134, _1135, _1136), vec3(_2848, _2849, _2850));
        float _4818 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2859 = dot(vec3(cbLight._m0[_2821].xyz), vec3(_2848, _2849, _2850));
        float _4829 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2863 = _2840 * _2840;
        float _2867 = ((_2858 * _2858) * (_2863 + (-1.0))) + 1.0;
        float _2874 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
        float _2881 = 1.0 - _2840;
        float _2891 = (0.5 / (((_2501 * ((_2854 * _2881) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2881) + _2840) * _2854))) * _2854;
        float _4840 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2863 / ((_2867 * _2867) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2810 = (((((_2874 * _2523) + _1283) * cbLight._m0[_2825].x) * _2893) * _2894) + _2696;
        _2812 = (((((_2874 * _2525) + _1285) * cbLight._m0[_2825].y) * _2893) * _2894) + _2698;
        _2814 = (((((_2874 * _2526) + _1286) * cbLight._m0[_2825].z) * _2893) * _2894) + _2700;
    }
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_2334.y == 0u)
    {
        float _2969 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2970 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2969;
        float _2971 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2969;
        float _2972 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2969;
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.x;
        uint _2996 = uint((float(_2984.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1222) / _2985))) + floor(float(uint(cbSceneParam._m0[85u].x * _1221) / _2985)));
        float _3006 = (log2(_2972 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3007 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        uint _3010 = uint(isnan(14.0) ? _3007 : (isnan(_3007) ? 14.0 : min(_3007, 14.0)));
        uvec4 _3015 = texelFetch(g_lightClusterGridBuffer, int(((_3010 << 2u) + (_2996 << 6u)) >> 2u));
        uint _3016 = _3015.x;
        uint _3017 = _2984.z;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((((1u << ((_3017 >> 4u) & 15u)) + 4294967295u) & _3016) == 0u) || ((_3017 & 240u) == 0u))
        {
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
        }
        else
        {
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            uint _3268 = 0u;
            uint _3277;
            bool _3278;
            for (;;)
            {
                _3277 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                _3278 = _3277 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3278)
                {
                    frontier_phi_61_pred = _3262;
                    frontier_phi_61_pred_1 = _3267;
                    frontier_phi_61_pred_2 = _3266;
                    frontier_phi_61_pred_3 = _3265;
                    frontier_phi_61_pred_4 = _3264;
                    frontier_phi_61_pred_5 = _3263;
                }
                else
                {
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    uint _3392;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3277;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    for (;;)
                    {
                        uint _3396 = uint(findLSB(_3392)) + (_3268 << 5u);
                        uint _3393 = (_3392 + 4294967295u) & _3392;
                        uint _3398 = _3396 * 48u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3418 = (_3396 * 48u) + 4u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3437 = (_3396 * 48u) + 8u;
                        vec3 _3448 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x));
                        float _3452 = _3412.x - _2970;
                        float _3453 = _3412.y - _2971;
                        float _3454 = _3412.z - _2972;
                        float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                        float _3458 = inversesqrt(_3455);
                        float _3459 = _3458 * _3452;
                        float _3460 = _3458 * _3453;
                        float _3461 = _3458 * _3454;
                        float _3462 = dot(vec3(_1240, _1243, _1246), vec3(_3459, _3460, _3461));
                        float _3467 = 1.0 - (_3455 * _3412.w);
                        float _4866 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3469 = sqrt(_3455) * _3431.w;
                        float _3472 = 1.39999997615814208984375 / (_3469 + 1.39999997615814208984375);
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3462) + _3473;
                        float _3479 = _3469 * _3469;
                        float _3483 = ((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3468) / ((_3479 * 0.699999988079071044921875) + 1.0);
                        float _3487 = (-0.0) - _2970;
                        float _3488 = (-0.0) - _2971;
                        float _3489 = (-0.0) - _2972;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3504 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                        float _3505 = 1.0 - _1315;
                        float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                        float _3513 = _3512 * _3512;
                        float _3514 = _3513 * _3513;
                        float _3515 = _3494 + _3459;
                        float _3516 = _3495 + _3460;
                        float _3517 = _3496 + _3461;
                        float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                        float _3525 = dot(vec3(_1240, _1243, _1246), vec3(_3494, _3495, _3496));
                        float _4882 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3529 = dot(vec3(_1240, _1243, _1246), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                        float _4893 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3532 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                        float _3537 = _3472 * _3513;
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3462) + _3538;
                        float _4904 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3542 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3543 = 1.0 - _3513;
                        float _3553 = (0.5 / (((_3542 * ((_3528 * _3543) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3513) * _3528))) * _3542;
                        float _4915 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3564 = (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3536 * _3536) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125))) * _3468;
                        _3321 = (_3483 * _3431.x) + _3389;
                        _3322 = (_3483 * _3431.y) + _3390;
                        _3323 = (_3483 * _3431.z) + _3391;
                        _3318 = (_3564 * _3448.x) + _3386;
                        _3319 = (_3564 * _3448.y) + _3387;
                        _3320 = (_3564 * _3448.z) + _3388;
                        if (_3393 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3393;
                        }
                    }
                    frontier_phi_61_pred = _3318;
                    frontier_phi_61_pred_1 = _3323;
                    frontier_phi_61_pred_2 = _3322;
                    frontier_phi_61_pred_3 = _3321;
                    frontier_phi_61_pred_4 = _3320;
                    frontier_phi_61_pred_5 = _3319;
                }
                _3118 = frontier_phi_61_pred;
                _3128 = frontier_phi_61_pred_1;
                _3126 = frontier_phi_61_pred_2;
                _3124 = frontier_phi_61_pred_3;
                _3122 = frontier_phi_61_pred_4;
                _3120 = frontier_phi_61_pred_5;
                uint _3269 = _3268 + 1u;
                if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3262 = _3118;
                    _3263 = _3120;
                    _3264 = _3122;
                    _3265 = _3124;
                    _3266 = _3126;
                    _3267 = _3128;
                    _3268 = _3269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
        }
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.z;
        uint _3134 = (_3132 >> 8u) & 15u;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((4294967295u << _3134) & _3016) == 0u)
        {
            _3230 = _3117;
            _3232 = _3119;
            _3234 = _3121;
            _3236 = _3123;
            _3238 = _3125;
            _3240 = _3127;
        }
        else
        {
            float _3255 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
            float _3256 = _3255 * _2970;
            float _3257 = _3255 * _2971;
            float _3258 = _3255 * _2972;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3134 < ((_3132 >> 12u) & 15u))
            {
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3369 = _3117;
                float _3370 = _3119;
                float _3371 = _3121;
                float _3372 = _3123;
                float _3373 = _3125;
                float _3374 = _3127;
                uint _3375 = _3134;
                uint _3384;
                bool _3385;
                for (;;)
                {
                    _3384 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                    _3385 = _3384 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3385)
                    {
                        frontier_phi_67_pred = _3372;
                        frontier_phi_67_pred_1 = _3373;
                        frontier_phi_67_pred_2 = _3374;
                        frontier_phi_67_pred_3 = _3371;
                        frontier_phi_67_pred_4 = _3370;
                        frontier_phi_67_pred_5 = _3369;
                    }
                    else
                    {
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3582 = _3369;
                        float _3583 = _3370;
                        float _3584 = _3371;
                        float _3585 = _3372;
                        float _3586 = _3373;
                        float _3587 = _3374;
                        uint _3588 = _3384;
                        uint _3589;
                        vec4 _3614;
                        float _3615;
                        vec4 _3630;
                        vec3 _3642;
                        vec4 _3657;
                        vec4 _3672;
                        float _3718;
                        bool _3719;
                        for (;;)
                        {
                            uint _3599 = ((_3375 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3588));
                            _3589 = (_3588 + 4294967295u) & _3588;
                            uint _3601 = _3599 * 40u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3615 = _3614.w;
                            uint _3617 = (_3599 * 40u) + 4u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3599 * 40u) + 8u;
                            _3642 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x));
                            uint _3644 = (_3599 * 40u) + 16u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3599 * 40u) + 20u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3599 * 40u) + 24u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3693 = (_3599 * 40u) + 28u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3718 = fma(_2972, _3706.z, fma(_2971, _3706.y, _3706.x * _2970)) + _3706.w;
                            _3719 = !((fma(_2972, _3687.z, fma(_2971, _3687.y, _3687.x * _2970)) + _3687.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3719)
                            {
                                float _3746 = _3614.x - _2970;
                                float _3747 = _3614.y - _2971;
                                float _3748 = _3614.z - _2972;
                                float _3749 = dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748));
                                float _3752 = inversesqrt(_3749);
                                float _3753 = _3752 * _3746;
                                float _3754 = _3752 * _3747;
                                float _3755 = _3752 * _3748;
                                float _3759 = 1.0 - (_3749 / (_3615 * _3615));
                                float _4926 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3764 = sqrt(_3749) * _3630.w;
                                float _3766 = 1.39999997615814208984375 / (_3764 + 1.39999997615814208984375);
                                float _3767 = _3766 * _3766;
                                float _3770 = ((1.0 - _3767) * dot(vec3(_3753, _3754, _3755), vec3(_1240, _1243, _1246))) + _3767;
                                float _3773 = _3764 * _3764;
                                float _3777 = (fma(_2972, _3657.z, fma(_2971, _3657.y, _3657.x * _2970)) + _3657.w) / _3718;
                                float _3778 = (fma(_2972, _3672.z, fma(_2971, _3672.y, _3672.x * _2970)) + _3672.w) / _3718;
                                float _3782 = 1.0 - dot(vec2(_3777, _3778), vec2(_3777, _3778));
                                float _4942 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3784 = _3783 * (((isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0))) * _3760) / ((_3773 * 0.699999988079071044921875) + 1.0));
                                float _3796 = exp2(log2(1.0 / ((_3773 * 3.5) + 5.0)) * 0.25);
                                float _3797 = 1.0 - _1315;
                                float _3804 = sqrt(1.0 - ((1.0 - (_3797 * _3797)) * (1.0 - (_3796 * _3796))));
                                float _3805 = _3804 * _3804;
                                float _3806 = _3805 * _3805;
                                float _3807 = _3753 - _3256;
                                float _3808 = _3754 - _3257;
                                float _3809 = _3755 - _3258;
                                float _3813 = inversesqrt(dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809)));
                                float _3817 = dot(vec3(_1240, _1243, _1246), vec3((-0.0) - _3256, (-0.0) - _3257, (-0.0) - _3258));
                                float _4953 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3821 = dot(vec3(_1240, _1243, _1246), vec3(_3813 * _3807, _3813 * _3808, _3813 * _3809));
                                float _4964 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3828 = ((_3824 * _3824) * (_3806 + (-1.0))) + 1.0;
                                float _3829 = _3766 * _3805;
                                float _3830 = _3829 * _3829;
                                float _3836 = ((1.0 - _3830) * dot(vec3(_1240, _1243, _1246), vec3(_3753, _3754, _3755))) + _3830;
                                float _4975 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3838 = 1.0 - _3805;
                                float _3848 = (0.5 / (((_3837 * ((_3820 * _3838) + _3805)) + 9.9999999392252902907785028219223e-09) + (((_3837 * _3838) + _3805) * _3820))) * _3837;
                                float _4986 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3858 = (_3783 * _3760) * (((_3806 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3828 * _3828) * ((_3773 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3858 * _3642.x;
                                frontier_phi_73_pred_1 = _3858 * _3642.y;
                                frontier_phi_73_pred_2 = _3784 * _3630.z;
                                frontier_phi_73_pred_3 = _3784 * _3630.y;
                                frontier_phi_73_pred_4 = _3784 * _3630.x;
                                frontier_phi_73_pred_5 = _3858 * _3642.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3862 = frontier_phi_73_pred;
                            _3863 = frontier_phi_73_pred_1;
                            _3867 = frontier_phi_73_pred_2;
                            _3866 = frontier_phi_73_pred_3;
                            _3865 = frontier_phi_73_pred_4;
                            _3864 = frontier_phi_73_pred_5;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            if (_3589 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3589;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3572;
                        frontier_phi_67_pred_1 = _3573;
                        frontier_phi_67_pred_2 = _3574;
                        frontier_phi_67_pred_3 = _3571;
                        frontier_phi_67_pred_4 = _3570;
                        frontier_phi_67_pred_5 = _3569;
                    }
                    _3237 = frontier_phi_67_pred;
                    _3239 = frontier_phi_67_pred_1;
                    _3241 = frontier_phi_67_pred_2;
                    _3235 = frontier_phi_67_pred_3;
                    _3233 = frontier_phi_67_pred_4;
                    _3231 = frontier_phi_67_pred_5;
                    uint _3376 = _3375 + 1u;
                    if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3369 = _3231;
                        _3370 = _3233;
                        _3371 = _3235;
                        _3372 = _3237;
                        _3373 = _3239;
                        _3374 = _3241;
                        _3375 = _3376;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3239;
                frontier_phi_55_56_ladder_1 = _3241;
                frontier_phi_55_56_ladder_2 = _3237;
                frontier_phi_55_56_ladder_3 = _3235;
                frontier_phi_55_56_ladder_4 = _3233;
                frontier_phi_55_56_ladder_5 = _3231;
            }
            else
            {
                frontier_phi_55_56_ladder = _3125;
                frontier_phi_55_56_ladder_1 = _3127;
                frontier_phi_55_56_ladder_2 = _3123;
                frontier_phi_55_56_ladder_3 = _3121;
                frontier_phi_55_56_ladder_4 = _3119;
                frontier_phi_55_56_ladder_5 = _3117;
            }
            _3230 = frontier_phi_55_56_ladder_5;
            _3232 = frontier_phi_55_56_ladder_4;
            _3234 = frontier_phi_55_56_ladder_3;
            _3236 = frontier_phi_55_56_ladder_2;
            _3238 = frontier_phi_55_56_ladder;
            _3240 = frontier_phi_55_56_ladder_1;
        }
        float _3245 = isnan(1.0) ? _1299 : (isnan(_1299) ? 1.0 : min(_1299, 1.0));
        _3029 = (_3245 * _3236) + _2465;
        _3031 = (_3245 * _3238) + _2467;
        _3033 = (_3245 * _3240) + _2469;
        _3035 = ((_3230 * _1283) * _3245) + _2810;
        _3037 = ((_3232 * _1285) * _3245) + _2812;
        _3039 = ((_3234 * _1286) * _3245) + _2814;
    }
    else
    {
        _3029 = _2465;
        _3031 = _2467;
        _3033 = _2469;
        _3035 = _2810;
        _3037 = _2812;
        _3039 = _2814;
    }
    float _5002 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _5013 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _5024 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
    uint _3059 = _299 + 6u;
    float _3067 = _1221 / cbSceneParam._m0[86u].x;
    float _3068 = _1222 / cbSceneParam._m0[86u].y;
    vec4 _3082 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, (log2((isnan(cbSceneParam._m0[77u].w) ? _1156 : (isnan(_1156) ? cbSceneParam._m0[77u].w : min(_1156, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3084 = _3082.x;
    float _3085 = _3082.y;
    float _3086 = _3082.z;
    float _3087 = _3082.w;
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    if (_1156 > cbSceneParam._m0[78u].w)
    {
        float _3142 = isnan(_1156) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1156 : min(cbSceneParam._m0[80u].w, _1156));
        float _3143 = _3142 / _1156;
        float _3154 = _3143 * _1206;
        float _3155 = _1207 * _3143;
        float _3156 = (-0.0) - _3155;
        float _3158 = _3143 * _1208;
        float _3160 = (cbSceneParam._m0[77u].w * _3156) / _3142;
        float _3161 = _3160 + cbSceneParam._m0[79u].w;
        float _3162 = cbSceneParam._m0[79u].w - _3155;
        float _3168 = sqrt(((_3154 * _3154) + (_3155 * _3155)) + (_3158 * _3158));
        float _3171 = (1.0 - (cbSceneParam._m0[77u].w / _3142)) * _3168;
        float _3176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3331;
        if (abs((_3156 - _3160) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3331 = ((((_3161 > 0.0) ? exp2(_3176 * _3161) : (2.0 - exp2(_3178 * _3161))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3171;
        }
        else
        {
            float _3291 = 1.0 / cbSceneParam._m0[80u].x;
            float _3292 = isnan(_3162) ? _3161 : (isnan(_3161) ? _3162 : max(_3161, _3162));
            float _3293 = isnan(_3162) ? _3161 : (isnan(_3161) ? _3162 : min(_3161, _3162));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            _3331 = ((abs(_3168 / _3156) * cbSceneParam._m0[80u].y) * ((((_3302 - _3303) * 2.0) - ((exp2(_3176 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0)))) - exp2(_3176 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))))) * _3291)) - ((exp2(_3178 * _3302) - exp2(_3178 * _3303)) * _3291))) + (_3171 * cbSceneParam._m0[80u].z);
        }
        vec4 _3333 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, 1.0), 0.0);
        float _3342 = exp2((_3331 * (-1.44269502162933349609375)) * (1.0 - _3333.w));
        float _3343 = log2(_3342);
        float _3359 = log2(_3087);
        _3180 = (exp2(_3359 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].x)) * _3333.x) / cbSceneParam._m0[78u].x)) + _3084;
        _3182 = (exp2(_3359 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].y)) * _3333.y) / cbSceneParam._m0[78u].y)) + _3085;
        _3184 = (exp2(_3359 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].z)) * _3333.z) / cbSceneParam._m0[78u].z)) + _3086;
        _3186 = _3342 * _3087;
    }
    else
    {
        _3180 = _3084;
        _3182 = _3085;
        _3184 = _3086;
        _3186 = _3087;
    }
    float _3198 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3199 = _3198 == 3.0;
    float _3200 = log2(_3186);
    float _3207 = exp2(_3200 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_3029 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1299))) + ((_3035 + ((isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0))) * _2105)) * cbPerFrame._m0[3u].x));
    float _3208 = exp2(_3200 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_3031 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1299))) + ((_3037 + ((isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))) * _2105)) * cbPerFrame._m0[3u].x));
    float _3209 = exp2(_3200 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3033 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1299))) + ((_3039 + ((isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0))) * _2105)) * cbPerFrame._m0[3u].x));
    float _3218 = (_3198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3218 * (_3199 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3180)));
    SV_Target.y = _3218 * (_3199 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3182)));
    SV_Target.z = _3218 * (_3199 ? _3209 : (_3209 + (cbSceneParam._m0[72u].w * _3184)));
    SV_Target.w = cbInstanceData._m0[_3059].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3059].w;
}


