#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1342;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3950 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3961 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3972 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _434 = _432.x;
    float _446 = dot(vec4(_434, _432.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _463 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_434 - _446) * cbMtdParam._m0[23u].w) + _446) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3983 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _474 = (_332.x * cbMtdParam._m0[9u].x) * ((_464 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363);
    float _475 = (_332.y * cbMtdParam._m0[9u].y) * ((_464 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364);
    float _476 = (_332.z * cbMtdParam._m0[9u].z) * ((_464 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365);
    float _480 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _474;
    float _483 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _475;
    float _486 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _476;
    float _494 = (((_474 - _480) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) + _480) * 4.55000019073486328125;
    float _496 = (((_475 - _483) * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) + _483) * 4.55000019073486328125;
    float _498 = (((_476 - _486) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) + _486) * 4.55000019073486328125;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _581 = _579.x;
    float _582 = _579.y;
    float _583 = _579.z;
    float _592 = ((_562.z - _583) * _464) + _583;
    float _595 = ((((_562.x - _581) * _464) + _581) * 2.0) + (-1.0);
    float _596 = ((((_562.y - _582) * _464) + _582) * 2.0) + (-1.0);
    float _597 = dot(vec2(_595, _596), vec2(_595, _596));
    float _3994 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _602 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _662 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_645 - _646) * cbMtdParam._m0[24u].z) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4005 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _670 = (_663 * ((_517.x * cbMtdParam._m0[18u].x) - _494)) + _494;
    float _671 = (_663 * ((_517.y * cbMtdParam._m0[18u].y) - _496)) + _496;
    float _672 = (_663 * ((_517.z * cbMtdParam._m0[18u].z) - _498)) + _498;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _700 = _698.x;
    float _717 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _700) * _464) + _700;
    float _721 = ((_684.x - _717) * cbMtdParam._m0[19u].z) + _717;
    float _723 = _721 - (_721 * _663);
    float _728 = (((_537.z - _592) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _592;
    float _732 = ((_618.z - _728) * cbMtdParam._m0[19u].w) + _728;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _752 = (_745.x * 2.0) + (-1.0);
    float _753 = (_745.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _4016 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _762 = (_663 * (_745.z - _732)) + _732;
    float _771 = (_595 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_537.x * 2.0) + (-1.0)))) + (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _772 = (_596 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_537.y * 2.0) + (-1.0)))) + (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (((_752 - _771) + (cbMtdParam._m0[21u].x * _771)) * _663) + _771;
    float _785 = (((_753 - _772) + (cbMtdParam._m0[21u].x * _772)) * _663) + _772;
    float _786 = (_663 * (sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _602)) + _602;
    float _788 = cbMtdParam._m0[22u].x + _618.w;
    float _791 = fma(_786, _242 * NORMAL.x, fma(_785, _249 * TANGENT.x, (_235 * _227) * _784));
    float _794 = fma(_786, _242 * NORMAL.y, fma(_785, _249 * TANGENT.y, (_235 * _228) * _784));
    float _797 = fma(_786, _242 * NORMAL.z, fma(_785, _249 * TANGENT.z, (_235 * _229) * _784));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _4027 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _805 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4049 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4060 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4071 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4082 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _810 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _824 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _875 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _865);
    float _876 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _865);
    float _877 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _865);
    float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
    float _882 = _875 * _881;
    float _883 = _876 * _881;
    float _884 = _877 * _881;
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _912 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _915 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _929 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_929].z;
    float _4093 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _941 = 1.0 - _810;
    float _942 = _938 * _941;
    float _943 = _939 * _941;
    float _944 = _940 * _941;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _810;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _810;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _810;
    float _952 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    vec4 _964 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _968 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _964.x;
    float _969 = dot(vec3(_802, _803, _804), vec3(_882, _883, _884));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _802) - _882;
    float _977 = (_972 * _803) - _883;
    float _978 = (_972 * _804) - _884;
    float _982 = abs(dot(vec3(_882, _883, _884), vec3(_802, _803, _804)));
    float _4126 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_805);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1003 = (1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1004 = _997 * _984;
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1066 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1070 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1074 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1099 = _1032 + _802;
        float _1100 = _1036 + _803;
        float _1101 = _1040 + _804;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1066;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1070;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1074;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1066 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1070 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1074 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_802, _803, _804), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4174 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_802, _803, _804), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4207 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_802, _803, _804), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4240 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1381 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1385 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1389 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1412 = _1032 + _802;
        float _1413 = _1036 + _803;
        float _1414 = _1040 + _804;
        float _1424 = fma(_1414, cbModelParam._m0[30u].z, fma(_1413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1412)) - _1381;
        float _1425 = fma(_1414, cbModelParam._m0[31u].z, fma(_1413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1412)) - _1385;
        float _1426 = fma(_1414, cbModelParam._m0[32u].z, fma(_1413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1412)) - _1389;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1381 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1385 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[35u].z) + ((((((_1389 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1480 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1447.x + (-0.5));
        float _1482 = _1480 * (_1447.y + (-0.5));
        float _1483 = _1480 * (_1447.z + (-0.5));
        float _1490 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1454.x + (-0.5));
        float _1492 = _1490 * (_1454.y + (-0.5));
        float _1493 = _1490 * (_1454.z + (-0.5));
        float _1500 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1461.x + (-0.5));
        float _1502 = _1500 * (_1461.y + (-0.5));
        float _1503 = _1500 * (_1461.z + (-0.5));
        float _1510 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1468.x + (-0.5));
        float _1512 = _1510 * (_1468.y + (-0.5));
        float _1513 = _1510 * (_1468.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_802, _803, _804), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4303 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1544 + 1.0))) + _1549) * _1514;
        float _1559 = _1482 * 0.5;
        float _1560 = _1492 * 0.5;
        float _1561 = _1502 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_802, _803, _804), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4336 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1586 + 1.0))) + _1591) * _1515;
        float _1601 = _1483 * 0.5;
        float _1602 = _1493 * 0.5;
        float _1603 = _1503 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_802, _803, _804), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4369 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1628 + 1.0))) + _1633) * _1516;
        _1650 = _1483;
        _1651 = _1482;
        _1652 = _1481;
        _1653 = _1493;
        _1654 = _1492;
        _1655 = _1491;
        _1656 = _1503;
        _1657 = _1502;
        _1658 = _1501;
        _1659 = _1516;
        _1660 = _1515;
        _1661 = _1514;
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1342;
        _1651 = _1342;
        _1652 = _1342;
        _1653 = _1342;
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = 0.0;
        _1663 = 0.0;
        _1664 = 0.0;
    }
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1354)) + _1354;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1355)) + _1355;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1356)) + _1356;
    float _1697 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1674));
    float _1718 = _976 * 0.5;
    float _1719 = _977 * 0.5;
    float _1720 = _978 * 0.5;
    float _1721 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1724 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1727 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1761;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1734 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1738 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1742 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1749 = dot(vec4(cbModelParam._m0[39u]), vec4(_1718, _1719, _1720, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1772;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1763 = dot(vec4(cbModelParam._m0[40u]), vec4(_1718, _1719, _1720, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1776 = (_1772 * cbModelParam._m0[1u].x) + (_1761 * (1.0 - cbModelParam._m0[1u].x));
    float _1786 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1786 : min(cbModelParam._m0[25u].z, _1786));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1834 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1838 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1842 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1845 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1848 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1851 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1879;
        if (_1845 > 0.0)
        {
            _1879 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1879 = frontier_phi_14_12_ladder;
        }
        float _2050;
        if (_1848 > 0.0)
        {
            _2050 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2050 = frontier_phi_23_19_ladder;
        }
        float _2345;
        if (_1851 > 0.0)
        {
            _2345 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2345 = frontier_phi_35_30_ladder;
        }
        float _2347 = isnan(_2050) ? _1879 : (isnan(_1879) ? _2050 : min(_1879, _2050));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1845) + _1834;
        float _2353 = (_2348 * _1848) + _1838;
        float _2354 = (_2348 * _1851) + _1842;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2355;
        float _2359 = _2355 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 > _2359) || ((_2353 < _2357) || ((_2352 < _2357) || (_2352 > _2359))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2354, cbModelParam._m0[9u].z, fma(_2353, cbModelParam._m0[9u].y, _2352 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2354, cbModelParam._m0[10u].z, fma(_2353, cbModelParam._m0[10u].y, _2352 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2354, cbModelParam._m0[11u].z, fma(_2353, cbModelParam._m0[11u].y, _2352 * cbModelParam._m0[11u].x))), _1787);
            frontier_phi_13_35_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1867 = frontier_phi_13_35_ladder_2;
        _1869 = frontier_phi_13_35_ladder_1;
        _1871 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1787);
        _1867 = _1855.x * cbModelParam._m0[1u].y;
        _1869 = _1855.y * cbModelParam._m0[1u].y;
        _1871 = _1855.z * cbModelParam._m0[1u].y;
    }
    float _1875 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1875 : min(cbModelParam._m0[25u].w, _1875));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1943 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1946 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2055;
        if (_1940 > 0.0)
        {
            _2055 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2055 = frontier_phi_25_21_ladder;
        }
        float _2372;
        if (_1943 > 0.0)
        {
            _2372 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2372 = frontier_phi_37_32_ladder;
        }
        float _2710;
        if (_1946 > 0.0)
        {
            _2710 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2710 = frontier_phi_47_44_ladder;
        }
        float _2712 = isnan(_2372) ? _2055 : (isnan(_2055) ? _2372 : min(_2055, _2372));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _1940) + _1929;
        float _2718 = (_2713 * _1943) + _1933;
        float _2719 = (_2713 * _1946) + _1937;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2721 = (-1.0) - _2720;
        float _2723 = _2720 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2719 > _2723) || ((_2719 < _2721) || ((_2718 > _2723) || ((_2718 < _2721) || ((_2717 < _2721) || (_2717 > _2723))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2719, cbModelParam._m0[17u].z, fma(_2718, cbModelParam._m0[17u].y, _2717 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2719, cbModelParam._m0[18u].z, fma(_2718, cbModelParam._m0[18u].y, _2717 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2719, cbModelParam._m0[19u].z, fma(_2718, cbModelParam._m0[19u].y, _2717 * cbModelParam._m0[19u].x))), _1876);
            frontier_phi_22_47_ladder = _2841.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2841.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2841.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_22_47_ladder_2;
        _1967 = frontier_phi_22_47_ladder_1;
        _1969 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1876);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1982 = (((_1003 * _952) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1984 = (((_1003 * _954) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1967 - _1869)) + _1869);
    float _1986 = (((_1003 * _955) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1969 - _1871)) + _1871);
    float _1989 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2042 = _2029 / _2041;
    float _2043 = _2033 / _2041;
    float _2044 = _2037 / _2041;
    float _2191;
    float _2192;
    float _2193;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2071 = ((uint(_2044 > cbSceneParam._m0[59u].y) + uint(_2044 > cbSceneParam._m0[59u].x)) + uint(_2044 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2072 = _2071 + 43u;
        uint _2080 = _2071 + 44u;
        uint _2088 = _2071 + 45u;
        uint _2096 = _2071 + 46u;
        float _2107 = fma(_2041, cbSceneParam._m0[_2072].w, fma(_2037, cbSceneParam._m0[_2072].z, fma(_2033, cbSceneParam._m0[_2072].y, _2029 * cbSceneParam._m0[_2072].x)));
        float _2111 = fma(_2041, cbSceneParam._m0[_2080].w, fma(_2037, cbSceneParam._m0[_2080].z, fma(_2033, cbSceneParam._m0[_2080].y, _2029 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2041, cbSceneParam._m0[_2096].w, fma(_2037, cbSceneParam._m0[_2096].z, fma(_2033, cbSceneParam._m0[_2096].y, _2029 * cbSceneParam._m0[_2096].x)));
        float _2124 = cbSceneParam._m0[33u].z * _2119;
        float _2126 = cbSceneParam._m0[33u].w * _2119;
        float _2129 = fma(_2041, cbSceneParam._m0[_2088].w, fma(_2037, cbSceneParam._m0[_2088].z, fma(_2033, cbSceneParam._m0[_2088].y, _2029 * cbSceneParam._m0[_2088].x))) / _2119;
        float _2177 = (cbSceneParam._m0[33u].x - sqrt(((_2043 * _2043) + (_2042 * _2042)) + (_2044 * _2044))) * cbSceneParam._m0[33u].y;
        float _4495 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2184 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2107) / _2119, (_2126 + _2111) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 + _2107) / _2119, (_2111 - _2124) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 - _2124) / _2119, (_2111 - _2126) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 - _2126) / _2119, (_2124 + _2111) / _2119), _2129), 0.0)).x), vec4(0.25)));
        _2191 = 1.0 - (_2184 * cbSceneParam._m0[34u].x);
        _2192 = 1.0 - (_2184 * cbSceneParam._m0[34u].y);
        _2193 = 1.0 - (_2184 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2191 = 1.0;
        _2192 = 1.0;
        _2193 = 1.0;
    }
    float _2257;
    float _2259;
    float _2261;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2245 = fma(_2041, cbSceneParam._m0[63u].w, fma(_2037, cbSceneParam._m0[63u].z, fma(_2033, cbSceneParam._m0[63u].y, _2029 * cbSceneParam._m0[63u].x)));
        float _2246 = fma(_2041, cbSceneParam._m0[60u].w, fma(_2037, cbSceneParam._m0[60u].z, fma(_2033, cbSceneParam._m0[60u].y, _2029 * cbSceneParam._m0[60u].x))) / _2245;
        float _2247 = fma(_2041, cbSceneParam._m0[61u].w, fma(_2037, cbSceneParam._m0[61u].z, fma(_2033, cbSceneParam._m0[61u].y, _2029 * cbSceneParam._m0[61u].x))) / _2245;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2246 >= cbSceneParam._m0[64u].x) && (_2247 >= cbSceneParam._m0[64u].y)) && (_2246 <= cbSceneParam._m0[64u].z)) && (_2247 <= cbSceneParam._m0[64u].w))
        {
            float _2385 = fma(_2041, cbSceneParam._m0[62u].w, fma(_2037, cbSceneParam._m0[62u].z, fma(_2033, cbSceneParam._m0[62u].y, _2029 * cbSceneParam._m0[62u].x))) / _2245;
            float _2389 = isnan(cbSceneParam._m0[41u].w) ? _2385 : (isnan(_2385) ? cbSceneParam._m0[41u].w : max(_2385, cbSceneParam._m0[41u].w));
            float _2432 = (cbSceneParam._m0[33u].x - sqrt(((_2043 * _2043) + (_2042 * _2042)) + (_2044 * _2044))) * cbSceneParam._m0[33u].y;
            float _4511 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
            float _2439 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2246, cbSceneParam._m0[33u].w + _2247), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2246, _2247 - cbSceneParam._m0[33u].z), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2246 - cbSceneParam._m0[33u].z, _2247 - cbSceneParam._m0[33u].w), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2246 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2247), _2389), 0.0)).x), vec4(0.25)));
            float _2443 = 1.0 - (_2439 * cbSceneParam._m0[34u].x);
            float _2444 = 1.0 - (_2439 * cbSceneParam._m0[34u].y);
            float _2445 = 1.0 - (_2439 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2445) ? _2193 : (isnan(_2193) ? _2445 : min(_2193, _2445));
            frontier_phi_34_33_ladder_1 = isnan(_2444) ? _2192 : (isnan(_2192) ? _2444 : min(_2192, _2444));
            frontier_phi_34_33_ladder_2 = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
        }
        else
        {
            frontier_phi_34_33_ladder = _2193;
            frontier_phi_34_33_ladder_1 = _2192;
            frontier_phi_34_33_ladder_2 = _2191;
        }
        _2257 = frontier_phi_34_33_ladder_2;
        _2259 = frontier_phi_34_33_ladder_1;
        _2261 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2257 = _2191;
        _2259 = _2192;
        _2261 = _2193;
    }
    uvec4 _2266 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2268 = _2266.x * 14u;
    uint _2269 = _2268 + 13u;
    float _2276 = _968 + (-1.0);
    float _2281 = (cbLight._m0[_2269].x * _2276) + 1.0;
    float _2282 = (cbLight._m0[_2269].y * _2276) + 1.0;
    float _2283 = (cbLight._m0[_2269].z * _2276) + 1.0;
    float _2284 = (cbLight._m0[_2269].w * _2276) + 1.0;
    uint _2285 = _2268 + 5u;
    float _2291 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2295 = _2268 + 4u;
    float _2304 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2308 = _2268 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_802, _803, _804));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_802, _803, _804));
    float _4547 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4558 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2285].x * _2291) * _2329) + (((cbLight._m0[_2295].x * _2257) * _2304) * _2327);
    float _2337 = ((_2291 * cbLight._m0[_2285].y) * _2329) + (((cbLight._m0[_2295].y * _2259) * _2304) * _2327);
    float _2338 = ((_2291 * cbLight._m0[_2285].z) * _2329) + (((cbLight._m0[_2295].z * _2261) * _2304) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2268 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2344)
    {
        _2446 = _2336;
        _2448 = _2337;
        _2450 = _2338;
    }
    else
    {
        uint _2454 = _2268 + 6u;
        float _2470 = (dot(vec3(cbLight._m0[_2268 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2471 = _2470 * _2470;
        float _4569 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2472 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2473 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2446 = (((cbLight._m0[_2454].x * 0.3183098733425140380859375) * _2472) * _2473) + _2336;
        _2448 = (((cbLight._m0[_2454].y * 0.3183098733425140380859375) * _2472) * _2473) + _2337;
        _2450 = (((cbLight._m0[_2454].z * 0.3183098733425140380859375) * _2472) * _2473) + _2338;
    }
    bool _2453 = _2342.y == 0u;
    float _2508;
    float _2510;
    float _2512;
    if (_2453)
    {
        _2508 = _2446;
        _2510 = _2448;
        _2512 = _2450;
    }
    else
    {
        uint _2681 = _2268 + 7u;
        float _2697 = (dot(vec3(cbLight._m0[_2268 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4585 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2700 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2508 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2446;
        _2510 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2448;
        _2512 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2450;
    }
    uint _2515 = _2268 + 8u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _805) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2268].x + _882;
    float _2531 = cbLight._m0[_2268].y + _883;
    float _2532 = cbLight._m0[_2268].z + _884;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2268].xyz));
    float _4601 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _4612 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2544 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2545 = dot(vec3(_802, _803, _804), vec3(_2537, _2538, _2539));
    float _4623 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2537, _2538, _2539));
    float _4634 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2529 * _2529;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2566 = 0.959999978542327880859375 - _949;
    float _2568 = 0.959999978542327880859375 - _950;
    float _2569 = 0.959999978542327880859375 - _951;
    float _2576 = 1.0 - _2529;
    float _2587 = (0.5 / (((_2544 * ((_2543 * _2576) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2576) + _2529) * _2543))) * _2543;
    float _4645 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2589 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    uint _2603 = _2268 + 9u;
    float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _805) * 0.949999988079071044921875);
    float _2615 = _2614 * _2614;
    float _2616 = cbLight._m0[_2308].x + _882;
    float _2617 = cbLight._m0[_2308].y + _883;
    float _2618 = cbLight._m0[_2308].z + _884;
    float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
    float _2623 = _2622 * _2616;
    float _2624 = _2622 * _2617;
    float _2625 = _2622 * _2618;
    float _2626 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2308].xyz));
    float _4656 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2630 = dot(vec3(_802, _803, _804), vec3(_2623, _2624, _2625));
    float _4667 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2634 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2623, _2624, _2625));
    float _4678 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2638 = _2615 * _2615;
    float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
    float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2656 = 1.0 - _2615;
    float _2666 = (0.5 / (((_2544 * ((_2629 * _2656) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2656) + _2615) * _2629))) * _2629;
    float _4689 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
    float _2678 = (((((_2649 * _2566) + _952) * cbLight._m0[_2603].x) * _2668) * _2291) + ((((cbLight._m0[_2515].x * _2257) * ((_2565 * _2566) + _952)) * _2589) * _2304);
    float _2679 = (((((_2649 * _2568) + _954) * cbLight._m0[_2603].y) * _2668) * _2291) + ((((cbLight._m0[_2515].y * _2259) * ((_2565 * _2568) + _954)) * _2589) * _2304);
    float _2680 = (((((_2649 * _2569) + _955) * cbLight._m0[_2603].z) * _2668) * _2291) + ((((cbLight._m0[_2515].z * _2261) * ((_2565 * _2569) + _955)) * _2589) * _2304);
    float _2736;
    float _2738;
    float _2740;
    if (_2344)
    {
        _2736 = _2678;
        _2738 = _2679;
        _2740 = _2680;
    }
    else
    {
        uint _2742 = _2268 + 2u;
        uint _2746 = _2268 + 10u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _805) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _882;
        float _2763 = cbLight._m0[_2742].y + _883;
        float _2764 = cbLight._m0[_2742].z + _884;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2742].xyz));
        float _4700 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2776 = dot(vec3(_802, _803, _804), vec3(_2769, _2770, _2771));
        float _4711 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4722 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
        float _2802 = 1.0 - _2761;
        float _2812 = (0.5 / (((_2544 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2802) + _2761) * _2775))) * _2775;
        float _4733 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2814 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2815 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2736 = (((((_2795 * _2566) + _952) * cbLight._m0[_2746].x) * _2814) * _2815) + _2678;
        _2738 = (((((_2795 * _2568) + _954) * cbLight._m0[_2746].y) * _2814) * _2815) + _2679;
        _2740 = (((((_2795 * _2569) + _955) * cbLight._m0[_2746].z) * _2814) * _2815) + _2680;
    }
    float _2846;
    float _2848;
    float _2850;
    if (_2453)
    {
        _2846 = _2736;
        _2848 = _2738;
        _2850 = _2740;
    }
    else
    {
        uint _2857 = _2268 + 3u;
        uint _2861 = _2268 + 11u;
        float _2875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2857].w)) * _805) * 0.949999988079071044921875);
        float _2876 = _2875 * _2875;
        float _2877 = cbLight._m0[_2857].x + _882;
        float _2878 = cbLight._m0[_2857].y + _883;
        float _2879 = cbLight._m0[_2857].z + _884;
        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
        float _2884 = _2883 * _2877;
        float _2885 = _2883 * _2878;
        float _2886 = _2883 * _2879;
        float _2887 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2857].xyz));
        float _4749 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2891 = dot(vec3(_802, _803, _804), vec3(_2884, _2885, _2886));
        float _4760 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2895 = dot(vec3(cbLight._m0[_2857].xyz), vec3(_2884, _2885, _2886));
        float _4771 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2899 = _2876 * _2876;
        float _2903 = ((_2894 * _2894) * (_2899 + (-1.0))) + 1.0;
        float _2910 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2917 = 1.0 - _2876;
        float _2927 = (0.5 / (((_2544 * ((_2890 * _2917) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2917) + _2876) * _2890))) * _2890;
        float _4782 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2929 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2899 / ((_2903 * _2903) * 3.141590118408203125));
        float _2930 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2846 = (((((_2910 * _2566) + _952) * cbLight._m0[_2861].x) * _2929) * _2930) + _2736;
        _2848 = (((((_2910 * _2568) + _954) * cbLight._m0[_2861].y) * _2929) * _2930) + _2738;
        _2850 = (((((_2910 * _2569) + _955) * cbLight._m0[_2861].z) * _2929) * _2930) + _2740;
    }
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_2266.y == 0u)
    {
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.x;
        uint _2963 = uint((float(_2951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2952))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2952)));
        float _2973 = (log2(_2044 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2974 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        uint _2977 = uint(isnan(14.0) ? _2974 : (isnan(_2974) ? 14.0 : min(_2974, 14.0)));
        uvec4 _2982 = texelFetch(g_lightClusterGridBuffer, int(((_2977 << 2u) + (_2963 << 6u)) >> 2u));
        uint _2983 = _2982.x;
        uint _2984 = _2951.z;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((((1u << ((_2984 >> 4u) & 15u)) + 4294967295u) & _2983) == 0u) || ((_2984 & 240u) == 0u))
        {
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
        }
        else
        {
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            uint _3214 = 0u;
            uint _3223;
            bool _3224;
            for (;;)
            {
                _3223 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                _3224 = _3223 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3224)
                {
                    frontier_phi_66_pred = _3213;
                    frontier_phi_66_pred_1 = _3212;
                    frontier_phi_66_pred_2 = _3211;
                    frontier_phi_66_pred_3 = _3210;
                    frontier_phi_66_pred_4 = _3209;
                    frontier_phi_66_pred_5 = _3208;
                }
                else
                {
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    uint _3338;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3223;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    for (;;)
                    {
                        uint _3342 = uint(findLSB(_3338)) + (_3214 << 5u);
                        uint _3339 = (_3338 + 4294967295u) & _3338;
                        uint _3344 = _3342 * 48u;
                        vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3364 = (_3342 * 48u) + 4u;
                        vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3383 = (_3342 * 48u) + 8u;
                        vec3 _3394 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x));
                        float _3398 = _3358.x - _2042;
                        float _3399 = _3358.y - _2043;
                        float _3400 = _3358.z - _2044;
                        float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                        float _3404 = inversesqrt(_3401);
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3408 = dot(vec3(_909, _912, _915), vec3(_3405, _3406, _3407));
                        float _3413 = 1.0 - (_3401 * _3358.w);
                        float _4808 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3415 = sqrt(_3401) * _3377.w;
                        float _3418 = 1.39999997615814208984375 / (_3415 + 1.39999997615814208984375);
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3408) + _3419;
                        float _3425 = _3415 * _3415;
                        float _3429 = ((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3414) / ((_3425 * 0.699999988079071044921875) + 1.0);
                        float _3433 = (-0.0) - _2042;
                        float _3434 = (-0.0) - _2043;
                        float _3435 = (-0.0) - _2044;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3449 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                        float _3450 = 1.0 - _984;
                        float _3457 = sqrt(1.0 - ((1.0 - (_3450 * _3450)) * (1.0 - (_3449 * _3449))));
                        float _3458 = _3457 * _3457;
                        float _3459 = _3458 * _3458;
                        float _3460 = _3440 + _3405;
                        float _3461 = _3441 + _3406;
                        float _3462 = _3442 + _3407;
                        float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                        float _3470 = dot(vec3(_909, _912, _915), vec3(_3440, _3441, _3442));
                        float _4824 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3473 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3474 = dot(vec3(_909, _912, _915), vec3(_3466 * _3460, _3466 * _3461, _3466 * _3462));
                        float _4835 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3477 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3481 = ((_3477 * _3477) * (_3459 + (-1.0))) + 1.0;
                        float _3482 = _3418 * _3458;
                        float _3483 = _3482 * _3482;
                        float _3486 = ((1.0 - _3483) * _3408) + _3483;
                        float _4846 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3487 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3488 = 1.0 - _3458;
                        float _3498 = (0.5 / (((_3487 * ((_3473 * _3488) + _3458)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3458) * _3473))) * _3487;
                        float _4857 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3509 = (((_3459 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3481 * _3481) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125))) * _3414;
                        _3267 = (_3429 * _3377.x) + _3335;
                        _3268 = (_3429 * _3377.y) + _3336;
                        _3269 = (_3429 * _3377.z) + _3337;
                        _3264 = (_3509 * _3394.x) + _3332;
                        _3265 = (_3509 * _3394.y) + _3333;
                        _3266 = (_3509 * _3394.z) + _3334;
                        if (_3339 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3339;
                        }
                    }
                    frontier_phi_66_pred = _3269;
                    frontier_phi_66_pred_1 = _3268;
                    frontier_phi_66_pred_2 = _3267;
                    frontier_phi_66_pred_3 = _3266;
                    frontier_phi_66_pred_4 = _3265;
                    frontier_phi_66_pred_5 = _3264;
                }
                _3074 = frontier_phi_66_pred;
                _3072 = frontier_phi_66_pred_1;
                _3070 = frontier_phi_66_pred_2;
                _3068 = frontier_phi_66_pred_3;
                _3066 = frontier_phi_66_pred_4;
                _3064 = frontier_phi_66_pred_5;
                uint _3215 = _3214 + 1u;
                if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3208 = _3064;
                    _3209 = _3066;
                    _3210 = _3068;
                    _3211 = _3070;
                    _3212 = _3072;
                    _3213 = _3074;
                    _3214 = _3215;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
        }
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.z;
        uint _3080 = (_3078 >> 8u) & 15u;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        if (((4294967295u << _3080) & _2983) == 0u)
        {
            _3176 = _3063;
            _3178 = _3065;
            _3180 = _3067;
            _3182 = _3069;
            _3184 = _3071;
            _3186 = _3073;
        }
        else
        {
            float _3201 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
            float _3202 = _3201 * _2042;
            float _3203 = _3201 * _2043;
            float _3204 = _3201 * _2044;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3080 < ((_3078 >> 12u) & 15u))
            {
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3315 = _3063;
                float _3316 = _3065;
                float _3317 = _3067;
                float _3318 = _3069;
                float _3319 = _3071;
                float _3320 = _3073;
                uint _3321 = _3080;
                uint _3330;
                bool _3331;
                for (;;)
                {
                    _3330 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3321 << 2u)) >> 2u)).x;
                    _3331 = _3330 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3331)
                    {
                        frontier_phi_72_pred = _3320;
                        frontier_phi_72_pred_1 = _3319;
                        frontier_phi_72_pred_2 = _3318;
                        frontier_phi_72_pred_3 = _3317;
                        frontier_phi_72_pred_4 = _3316;
                        frontier_phi_72_pred_5 = _3315;
                    }
                    else
                    {
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3527 = _3315;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        uint _3533 = _3330;
                        uint _3534;
                        vec4 _3559;
                        float _3560;
                        vec4 _3575;
                        vec3 _3587;
                        vec4 _3602;
                        vec4 _3617;
                        float _3663;
                        bool _3664;
                        for (;;)
                        {
                            uint _3544 = ((_3321 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3533));
                            _3534 = (_3533 + 4294967295u) & _3533;
                            uint _3546 = _3544 * 40u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3560 = _3559.w;
                            uint _3562 = (_3544 * 40u) + 4u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3544 * 40u) + 8u;
                            _3587 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x));
                            uint _3589 = (_3544 * 40u) + 16u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3544 * 40u) + 20u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3544 * 40u) + 24u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3638 = (_3544 * 40u) + 28u;
                            vec4 _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            _3663 = fma(_2044, _3651.z, fma(_2043, _3651.y, _3651.x * _2042)) + _3651.w;
                            _3664 = !((fma(_2044, _3632.z, fma(_2043, _3632.y, _3632.x * _2042)) + _3632.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3664)
                            {
                                float _3691 = _3559.x - _2042;
                                float _3692 = _3559.y - _2043;
                                float _3693 = _3559.z - _2044;
                                float _3694 = dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693));
                                float _3697 = inversesqrt(_3694);
                                float _3698 = _3697 * _3691;
                                float _3699 = _3697 * _3692;
                                float _3700 = _3697 * _3693;
                                float _3704 = 1.0 - (_3694 / (_3560 * _3560));
                                float _4868 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3709 = sqrt(_3694) * _3575.w;
                                float _3711 = 1.39999997615814208984375 / (_3709 + 1.39999997615814208984375);
                                float _3712 = _3711 * _3711;
                                float _3715 = ((1.0 - _3712) * dot(vec3(_3698, _3699, _3700), vec3(_909, _912, _915))) + _3712;
                                float _3718 = _3709 * _3709;
                                float _3722 = (fma(_2044, _3602.z, fma(_2043, _3602.y, _3602.x * _2042)) + _3602.w) / _3663;
                                float _3723 = (fma(_2044, _3617.z, fma(_2043, _3617.y, _3617.x * _2042)) + _3617.w) / _3663;
                                float _3727 = 1.0 - dot(vec2(_3722, _3723), vec2(_3722, _3723));
                                float _4884 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3728 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3729 = _3728 * (((isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0))) * _3705) / ((_3718 * 0.699999988079071044921875) + 1.0));
                                float _3741 = exp2(log2(1.0 / ((_3718 * 3.5) + 5.0)) * 0.25);
                                float _3742 = 1.0 - _984;
                                float _3749 = sqrt(1.0 - ((1.0 - (_3742 * _3742)) * (1.0 - (_3741 * _3741))));
                                float _3750 = _3749 * _3749;
                                float _3751 = _3750 * _3750;
                                float _3752 = _3698 - _3202;
                                float _3753 = _3699 - _3203;
                                float _3754 = _3700 - _3204;
                                float _3758 = inversesqrt(dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754)));
                                float _3762 = dot(vec3(_909, _912, _915), vec3((-0.0) - _3202, (-0.0) - _3203, (-0.0) - _3204));
                                float _4895 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3765 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3766 = dot(vec3(_909, _912, _915), vec3(_3758 * _3752, _3758 * _3753, _3758 * _3754));
                                float _4906 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3773 = ((_3769 * _3769) * (_3751 + (-1.0))) + 1.0;
                                float _3774 = _3711 * _3750;
                                float _3775 = _3774 * _3774;
                                float _3781 = ((1.0 - _3775) * dot(vec3(_909, _912, _915), vec3(_3698, _3699, _3700))) + _3775;
                                float _4917 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3783 = 1.0 - _3750;
                                float _3793 = (0.5 / (((_3782 * ((_3765 * _3783) + _3750)) + 9.9999999392252902907785028219223e-09) + (((_3782 * _3783) + _3750) * _3765))) * _3782;
                                float _4928 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3803 = (_3728 * _3705) * (((_3751 * 3.1415927410125732421875) * (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) / ((_3773 * _3773) * ((_3718 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3729 * _3575.y;
                                frontier_phi_78_pred_1 = _3729 * _3575.x;
                                frontier_phi_78_pred_2 = _3803 * _3587.z;
                                frontier_phi_78_pred_3 = _3803 * _3587.y;
                                frontier_phi_78_pred_4 = _3803 * _3587.x;
                                frontier_phi_78_pred_5 = _3729 * _3575.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3811 = frontier_phi_78_pred;
                            _3810 = frontier_phi_78_pred_1;
                            _3809 = frontier_phi_78_pred_2;
                            _3808 = frontier_phi_78_pred_3;
                            _3807 = frontier_phi_78_pred_4;
                            _3812 = frontier_phi_78_pred_5;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            if (_3534 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3534;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3519;
                        frontier_phi_72_pred_1 = _3518;
                        frontier_phi_72_pred_2 = _3517;
                        frontier_phi_72_pred_3 = _3516;
                        frontier_phi_72_pred_4 = _3515;
                        frontier_phi_72_pred_5 = _3514;
                    }
                    _3187 = frontier_phi_72_pred;
                    _3185 = frontier_phi_72_pred_1;
                    _3183 = frontier_phi_72_pred_2;
                    _3181 = frontier_phi_72_pred_3;
                    _3179 = frontier_phi_72_pred_4;
                    _3177 = frontier_phi_72_pred_5;
                    uint _3322 = _3321 + 1u;
                    if (_3322 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3315 = _3177;
                        _3316 = _3179;
                        _3317 = _3181;
                        _3318 = _3183;
                        _3319 = _3185;
                        _3320 = _3187;
                        _3321 = _3322;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3187;
                frontier_phi_60_61_ladder_1 = _3185;
                frontier_phi_60_61_ladder_2 = _3181;
                frontier_phi_60_61_ladder_3 = _3179;
                frontier_phi_60_61_ladder_4 = _3177;
                frontier_phi_60_61_ladder_5 = _3183;
            }
            else
            {
                frontier_phi_60_61_ladder = _3073;
                frontier_phi_60_61_ladder_1 = _3071;
                frontier_phi_60_61_ladder_2 = _3067;
                frontier_phi_60_61_ladder_3 = _3065;
                frontier_phi_60_61_ladder_4 = _3063;
                frontier_phi_60_61_ladder_5 = _3069;
            }
            _3176 = frontier_phi_60_61_ladder_4;
            _3178 = frontier_phi_60_61_ladder_3;
            _3180 = frontier_phi_60_61_ladder_2;
            _3182 = frontier_phi_60_61_ladder_5;
            _3184 = frontier_phi_60_61_ladder_1;
            _3186 = frontier_phi_60_61_ladder;
        }
        float _3191 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _2996 = (_3191 * _3182) + _2508;
        _2998 = (_3191 * _3184) + _2510;
        _3000 = (_3191 * _3186) + _2512;
        _3002 = ((_3176 * _952) * _3191) + _2846;
        _3004 = ((_3178 * _954) * _3191) + _2848;
        _3006 = ((_3180 * _955) * _3191) + _2850;
    }
    else
    {
        _2996 = _2508;
        _2998 = _2510;
        _3000 = _2512;
        _3002 = _2846;
        _3004 = _2848;
        _3006 = _2850;
    }
    float _4944 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4955 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4966 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    uint _3026 = _276 + 6u;
    float _3034 = _890 / cbSceneParam._m0[86u].x;
    float _3035 = _891 / cbSceneParam._m0[86u].y;
    vec4 _3049 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, (log2((isnan(cbSceneParam._m0[77u].w) ? _824 : (isnan(_824) ? cbSceneParam._m0[77u].w : min(_824, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3051 = _3049.x;
    float _3052 = _3049.y;
    float _3053 = _3049.z;
    float _3054 = _3049.w;
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    if (_824 > cbSceneParam._m0[78u].w)
    {
        float _3088 = isnan(_824) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _824 : min(cbSceneParam._m0[80u].w, _824));
        float _3089 = _3088 / _824;
        float _3100 = _3089 * _875;
        float _3101 = _876 * _3089;
        float _3102 = (-0.0) - _3101;
        float _3104 = _3089 * _877;
        float _3106 = (cbSceneParam._m0[77u].w * _3102) / _3088;
        float _3107 = _3106 + cbSceneParam._m0[79u].w;
        float _3108 = cbSceneParam._m0[79u].w - _3101;
        float _3114 = sqrt(((_3100 * _3100) + (_3101 * _3101)) + (_3104 * _3104));
        float _3117 = (1.0 - (cbSceneParam._m0[77u].w / _3088)) * _3114;
        float _3122 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3124 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3277;
        if (abs((_3102 - _3106) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3277 = ((((_3107 > 0.0) ? exp2(_3122 * _3107) : (2.0 - exp2(_3124 * _3107))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3117;
        }
        else
        {
            float _3237 = 1.0 / cbSceneParam._m0[80u].x;
            float _3238 = isnan(_3108) ? _3107 : (isnan(_3107) ? _3108 : max(_3107, _3108));
            float _3239 = isnan(_3108) ? _3107 : (isnan(_3107) ? _3108 : min(_3107, _3108));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            _3277 = ((abs(_3114 / _3102) * cbSceneParam._m0[80u].y) * ((((_3248 - _3249) * 2.0) - ((exp2(_3122 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0)))) - exp2(_3122 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))))) * _3237)) - ((exp2(_3124 * _3248) - exp2(_3124 * _3249)) * _3237))) + (_3117 * cbSceneParam._m0[80u].z);
        }
        vec4 _3279 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, 1.0), 0.0);
        float _3288 = exp2((_3277 * (-1.44269502162933349609375)) * (1.0 - _3279.w));
        float _3289 = log2(_3288);
        float _3305 = log2(_3054);
        _3126 = (exp2(_3305 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].x)) * _3279.x) / cbSceneParam._m0[78u].x)) + _3051;
        _3128 = (exp2(_3305 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].y)) * _3279.y) / cbSceneParam._m0[78u].y)) + _3052;
        _3130 = (exp2(_3305 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].z)) * _3279.z) / cbSceneParam._m0[78u].z)) + _3053;
        _3132 = _3288 * _3054;
    }
    else
    {
        _3126 = _3051;
        _3128 = _3052;
        _3130 = _3053;
        _3132 = _3054;
    }
    float _3144 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3145 = _3144 == 3.0;
    float _3146 = log2(_3132);
    float _3153 = exp2(_3146 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2996 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _968))) + ((_3002 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1776)) * cbPerFrame._m0[3u].x));
    float _3154 = exp2(_3146 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2998 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _968))) + ((_3004 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1776)) * cbPerFrame._m0[3u].x));
    float _3155 = exp2(_3146 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_3000 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _968))) + ((_3006 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1776)) * cbPerFrame._m0[3u].x));
    float _3164 = (_3144 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3164 * (_3145 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3126)));
    SV_Target.y = _3164 * (_3145 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3128)));
    SV_Target.z = _3164 * (_3145 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3130)));
    SV_Target.w = cbInstanceData._m0[_3026].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3026].w;
}


