#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1457;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4066 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4077 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4088 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[23u].w) + _453) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4099 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _478 = (_471 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _479 = (_471 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _480 = (_471 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _543 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[23u].w) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4110 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _554 = (_336.x * cbMtdParam._m0[9u].x) * ((_544 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478);
    float _555 = (_336.y * cbMtdParam._m0[9u].y) * ((_544 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479);
    float _556 = (_336.z * cbMtdParam._m0[9u].z) * ((_544 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480);
    float _560 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _554;
    float _563 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _555;
    float _566 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _556;
    float _574 = (((_554 - _560) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _560) * 4.55000019073486328125;
    float _576 = (((_555 - _563) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) + _563) * 4.55000019073486328125;
    float _578 = (((_556 - _566) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) + _566) * 4.55000019073486328125;
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _471) + _639;
    float _649 = ((_620.y - _640) * _471) + _640;
    float _650 = ((_620.z - _641) * _471) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_662.z - _650) * _544) + _650;
    float _678 = ((((_662.x - _648) * _544) + _648) * 2.0) + (-1.0);
    float _679 = ((((_662.y - _649) * _544) + _649) * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _4121 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _715 = (_678 + ((((_595.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _716 = (_679 + ((((_595.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _719 = fma(_685, _247, fma(_716, _254, _715 * _240));
    float _722 = fma(_685, _248, fma(_716, _255, _715 * _241));
    float _725 = fma(_685, _249, fma(_716, _256, _715 * _242));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _758 = _756.x;
    float _759 = 1.0 - _758;
    float _768 = (cbMtdParam._m0[19u].x + dot(vec4(_729 * _719, _729 * _722, _729 * _725, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_758 - _759) * cbMtdParam._m0[24u].z) + _759) * cbMtdParam._m0[21u].z);
    float _4132 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _776 = (_769 * (cbMtdParam._m0[17u].x - _574)) + _574;
    float _777 = (_769 * (cbMtdParam._m0[17u].y - _576)) + _576;
    float _778 = (_769 * (cbMtdParam._m0[17u].z - _578)) + _578;
    vec4 _804 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _806 = _804.x;
    float _823 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _806) * _471) + _806;
    float _840 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _823) * _544) + _823;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _840) * cbMtdParam._m0[19u].z) + _840;
    float _846 = _844 - (_844 * _769);
    float _851 = (((_595.z - _675) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _675;
    float _855 = ((_703.z - _851) * cbMtdParam._m0[19u].w) + _851;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _875 = (_868.x * 2.0) + (-1.0);
    float _876 = (_868.y * 2.0) + (-1.0);
    float _877 = dot(vec2(_875, _876), vec2(_875, _876));
    float _4143 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _885 = ((_868.z - _855) * _769) + _855;
    float _895 = ((sqrt(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) - _685) * _769) + _685;
    float _898 = (((_875 - _715) * _769) + _715) + (cbMtdParam._m0[21u].x * _715);
    float _899 = (((_876 - _716) * _769) + _716) + (cbMtdParam._m0[21u].x * _716);
    float _903 = cbMtdParam._m0[22u].x + _703.w;
    float _906 = fma(_895, _247, fma(_899, _254, _898 * _240));
    float _909 = fma(_895, _248, fma(_899, _255, _898 * _241));
    float _912 = fma(_895, _249, fma(_899, _256, _898 * _242));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4154 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _920 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4176 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4187 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4198 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4209 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _925 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    float _1005 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1006 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1024 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1027 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1030 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1044 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1050 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_1044].x;
    float _1051 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_1044].y;
    float _1052 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * cbInstanceData._m0[_1044].z;
    float _4220 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _1056 = 1.0 - _925;
    float _1057 = _1053 * _1056;
    float _1058 = _1054 * _1056;
    float _1059 = _1055 * _1056;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _925;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _925;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _925;
    float _1067 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    vec4 _1079 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1005, cbSceneParam._m0[86u].y * _1006));
    float _1083 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * TEXCOORD_5.w) * _1079.x;
    float _1084 = dot(vec3(_917, _918, _919), vec3(_997, _998, _999));
    float _1087 = _1084 * 2.0;
    float _1091 = (_1087 * _917) - _997;
    float _1092 = (_1087 * _918) - _998;
    float _1093 = (_1087 * _919) - _999;
    float _1097 = abs(dot(vec3(_997, _998, _999), vec3(_917, _918, _919)));
    float _4253 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1099 = sqrt(_920);
    float _1112 = exp2((_1099 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1099 * 3.0));
    float _1118 = (1.0 - _1112) * ((_1099 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1119 = _1112 * _1099;
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1456;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1155, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1147));
        float _1185 = fma(_1155, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1147));
        float _1189 = fma(_1155, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1147));
        float _1214 = _1147 + _917;
        float _1215 = _1151 + _918;
        float _1216 = _1155 + _919;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1181;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1185;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1189;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1284 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1250.x + (-0.5));
        float _1286 = _1284 * (_1250.y + (-0.5));
        float _1287 = _1284 * (_1250.z + (-0.5));
        float _1294 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1257.x + (-0.5));
        float _1296 = _1294 * (_1257.y + (-0.5));
        float _1297 = _1294 * (_1257.z + (-0.5));
        float _1304 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1264.x + (-0.5));
        float _1306 = _1304 * (_1264.y + (-0.5));
        float _1307 = _1304 * (_1264.z + (-0.5));
        float _1314 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1271.x + (-0.5));
        float _1316 = _1314 * (_1271.y + (-0.5));
        float _1317 = _1314 * (_1271.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1338 = (dot(vec3(_917, _918, _919), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1348 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4301 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1350 + 1.0))) + _1355) * _1318;
        float _1365 = _1286 * 0.5;
        float _1366 = _1296 * 0.5;
        float _1367 = _1306 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_917, _918, _919), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4334 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1392 + 1.0))) + _1397) * _1319;
        float _1407 = _1287 * 0.5;
        float _1408 = _1297 * 0.5;
        float _1409 = _1307 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_917, _918, _919), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4367 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1434 + 1.0))) + _1439) * _1320;
        _1456 = _1287;
        _1458 = _1286;
        _1459 = _1285;
        _1460 = _1297;
        _1461 = _1296;
        _1462 = _1295;
        _1463 = _1307;
        _1464 = _1306;
        _1465 = _1305;
        _1466 = _1320;
        _1467 = _1319;
        _1468 = _1318;
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1457;
        _1458 = _1457;
        _1459 = _1457;
        _1460 = _1457;
        _1461 = _1457;
        _1462 = _1457;
        _1463 = _1457;
        _1464 = _1457;
        _1465 = _1457;
        _1466 = _1457;
        _1467 = _1457;
        _1468 = _1457;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1155, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147));
        float _1499 = fma(_1155, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147));
        float _1503 = fma(_1155, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147));
        float _1526 = _1147 + _917;
        float _1527 = _1151 + _918;
        float _1528 = _1155 + _919;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_917, _918, _919), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4430 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_917, _918, _919), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4463 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_917, _918, _919), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4496 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1457;
        _1765 = _1457;
        _1766 = _1457;
        _1767 = _1457;
        _1768 = _1457;
        _1769 = _1457;
        _1770 = _1457;
        _1771 = _1457;
        _1772 = _1457;
        _1773 = _1457;
        _1774 = _1457;
        _1775 = _1457;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1469)) + _1469;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1470)) + _1470;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1471)) + _1471;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1091 * 0.5;
    float _1833 = _1092 * 0.5;
    float _1834 = _1093 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1456, _1460, _1463, _1466));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1949 = fma(_1155, cbModelParam._m0[13u].z, fma(_1151, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1147)) + cbModelParam._m0[13u].w;
        float _1953 = fma(_1155, cbModelParam._m0[14u].z, fma(_1151, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1147)) + cbModelParam._m0[14u].w;
        float _1957 = fma(_1155, cbModelParam._m0[15u].z, fma(_1151, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1147)) + cbModelParam._m0[15u].w;
        float _1960 = fma(_1093, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091));
        float _1963 = fma(_1093, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091));
        float _1966 = fma(_1093, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091));
        float _1994;
        if (_1960 > 0.0)
        {
            _1994 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1994 = frontier_phi_14_12_ladder;
        }
        float _2166;
        if (_1963 > 0.0)
        {
            _2166 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2166 = frontier_phi_23_19_ladder;
        }
        float _2461;
        if (_1966 > 0.0)
        {
            _2461 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2461 = frontier_phi_35_30_ladder;
        }
        float _2463 = isnan(_2166) ? _1994 : (isnan(_1994) ? _2166 : min(_1994, _2166));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1960) + _1949;
        float _2469 = (_2464 * _1963) + _1953;
        float _2470 = (_2464 * _1966) + _1957;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_13_35_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _1982 = frontier_phi_13_35_ladder_2;
        _1984 = frontier_phi_13_35_ladder_1;
        _1986 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1091, _1092, _1093), _1901);
        _1982 = _1970.x * cbModelParam._m0[1u].y;
        _1984 = _1970.y * cbModelParam._m0[1u].y;
        _1986 = _1970.z * cbModelParam._m0[1u].y;
    }
    float _1990 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _1991 = isnan(_1990) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1990 : min(cbModelParam._m0[25u].w, _1990));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1155, cbModelParam._m0[21u].z, fma(_1151, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1147)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1155, cbModelParam._m0[22u].z, fma(_1151, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1147)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1155, cbModelParam._m0[23u].z, fma(_1151, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1147)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1093, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091));
        float _2059 = fma(_1093, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091));
        float _2062 = fma(_1093, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091));
        float _2171;
        if (_2056 > 0.0)
        {
            _2171 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2171 = frontier_phi_25_21_ladder;
        }
        float _2488;
        if (_2059 > 0.0)
        {
            _2488 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2488 = frontier_phi_37_32_ladder;
        }
        float _2826;
        if (_2062 > 0.0)
        {
            _2826 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2826 = frontier_phi_47_44_ladder;
        }
        float _2828 = isnan(_2488) ? _2171 : (isnan(_2171) ? _2488 : min(_2171, _2488));
        float _2829 = isnan(_2826) ? _2828 : (isnan(_2828) ? _2826 : min(_2828, _2826));
        float _2833 = (_2829 * _2056) + _2045;
        float _2834 = (_2829 * _2059) + _2049;
        float _2835 = (_2829 * _2062) + _2053;
        float _2836 = _2829 * 9.9999997473787516355514526367188e-05;
        float _2837 = (-1.0) - _2836;
        float _2839 = _2836 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2835 > _2839) || ((_2835 < _2837) || ((_2834 > _2839) || ((_2834 < _2837) || ((_2833 < _2837) || (_2833 > _2839))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2835, cbModelParam._m0[17u].z, fma(_2834, cbModelParam._m0[17u].y, _2833 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2835, cbModelParam._m0[18u].z, fma(_2834, cbModelParam._m0[18u].y, _2833 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2835, cbModelParam._m0[19u].z, fma(_2834, cbModelParam._m0[19u].y, _2833 * cbModelParam._m0[19u].x))), _1991);
            frontier_phi_22_47_ladder = _2957.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2957.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2957.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_22_47_ladder_2;
        _2083 = frontier_phi_22_47_ladder_1;
        _2085 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1091, _1092, _1093), _1991);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1118 * _1067) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2100 = (((_1118 * _1069) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2102 = (((_1118 * _1070) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2158 = _2145 / _2157;
    float _2159 = _2149 / _2157;
    float _2160 = _2153 / _2157;
    float _2307;
    float _2308;
    float _2309;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2187 = ((uint(_2160 > cbSceneParam._m0[59u].y) + uint(_2160 > cbSceneParam._m0[59u].x)) + uint(_2160 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2188 = _2187 + 43u;
        uint _2196 = _2187 + 44u;
        uint _2204 = _2187 + 45u;
        uint _2212 = _2187 + 46u;
        float _2223 = fma(_2157, cbSceneParam._m0[_2188].w, fma(_2153, cbSceneParam._m0[_2188].z, fma(_2149, cbSceneParam._m0[_2188].y, _2145 * cbSceneParam._m0[_2188].x)));
        float _2227 = fma(_2157, cbSceneParam._m0[_2196].w, fma(_2153, cbSceneParam._m0[_2196].z, fma(_2149, cbSceneParam._m0[_2196].y, _2145 * cbSceneParam._m0[_2196].x)));
        float _2235 = fma(_2157, cbSceneParam._m0[_2212].w, fma(_2153, cbSceneParam._m0[_2212].z, fma(_2149, cbSceneParam._m0[_2212].y, _2145 * cbSceneParam._m0[_2212].x)));
        float _2240 = cbSceneParam._m0[33u].z * _2235;
        float _2242 = cbSceneParam._m0[33u].w * _2235;
        float _2245 = fma(_2157, cbSceneParam._m0[_2204].w, fma(_2153, cbSceneParam._m0[_2204].z, fma(_2149, cbSceneParam._m0[_2204].y, _2145 * cbSceneParam._m0[_2204].x))) / _2235;
        float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_2159 * _2159) + (_2158 * _2158)) + (_2160 * _2160))) * cbSceneParam._m0[33u].y;
        float _4622 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2300 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 + _2223) / _2235, (_2242 + _2227) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 + _2223) / _2235, (_2227 - _2240) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 - _2240) / _2235, (_2227 - _2242) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 - _2242) / _2235, (_2240 + _2227) / _2235), _2245), 0.0)).x), vec4(0.25)));
        _2307 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
        _2308 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
        _2309 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2307 = 1.0;
        _2308 = 1.0;
        _2309 = 1.0;
    }
    float _2373;
    float _2375;
    float _2377;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2361 = fma(_2157, cbSceneParam._m0[63u].w, fma(_2153, cbSceneParam._m0[63u].z, fma(_2149, cbSceneParam._m0[63u].y, _2145 * cbSceneParam._m0[63u].x)));
        float _2362 = fma(_2157, cbSceneParam._m0[60u].w, fma(_2153, cbSceneParam._m0[60u].z, fma(_2149, cbSceneParam._m0[60u].y, _2145 * cbSceneParam._m0[60u].x))) / _2361;
        float _2363 = fma(_2157, cbSceneParam._m0[61u].w, fma(_2153, cbSceneParam._m0[61u].z, fma(_2149, cbSceneParam._m0[61u].y, _2145 * cbSceneParam._m0[61u].x))) / _2361;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2362 >= cbSceneParam._m0[64u].x) && (_2363 >= cbSceneParam._m0[64u].y)) && (_2362 <= cbSceneParam._m0[64u].z)) && (_2363 <= cbSceneParam._m0[64u].w))
        {
            float _2501 = fma(_2157, cbSceneParam._m0[62u].w, fma(_2153, cbSceneParam._m0[62u].z, fma(_2149, cbSceneParam._m0[62u].y, _2145 * cbSceneParam._m0[62u].x))) / _2361;
            float _2505 = isnan(cbSceneParam._m0[41u].w) ? _2501 : (isnan(_2501) ? cbSceneParam._m0[41u].w : max(_2501, cbSceneParam._m0[41u].w));
            float _2548 = (cbSceneParam._m0[33u].x - sqrt(((_2159 * _2159) + (_2158 * _2158)) + (_2160 * _2160))) * cbSceneParam._m0[33u].y;
            float _4638 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
            float _2555 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2362, cbSceneParam._m0[33u].w + _2363), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2362, _2363 - cbSceneParam._m0[33u].z), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].z, _2363 - cbSceneParam._m0[33u].w), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2363), _2505), 0.0)).x), vec4(0.25)));
            float _2559 = 1.0 - (_2555 * cbSceneParam._m0[34u].x);
            float _2560 = 1.0 - (_2555 * cbSceneParam._m0[34u].y);
            float _2561 = 1.0 - (_2555 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2561) ? _2309 : (isnan(_2309) ? _2561 : min(_2309, _2561));
            frontier_phi_34_33_ladder_1 = isnan(_2560) ? _2308 : (isnan(_2308) ? _2560 : min(_2308, _2560));
            frontier_phi_34_33_ladder_2 = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
        }
        else
        {
            frontier_phi_34_33_ladder = _2309;
            frontier_phi_34_33_ladder_1 = _2308;
            frontier_phi_34_33_ladder_2 = _2307;
        }
        _2373 = frontier_phi_34_33_ladder_2;
        _2375 = frontier_phi_34_33_ladder_1;
        _2377 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2373 = _2307;
        _2375 = _2308;
        _2377 = _2309;
    }
    uvec4 _2382 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2384 = _2382.x * 14u;
    uint _2385 = _2384 + 13u;
    float _2392 = _1083 + (-1.0);
    float _2397 = (cbLight._m0[_2385].x * _2392) + 1.0;
    float _2398 = (cbLight._m0[_2385].y * _2392) + 1.0;
    float _2399 = (cbLight._m0[_2385].z * _2392) + 1.0;
    float _2400 = (cbLight._m0[_2385].w * _2392) + 1.0;
    uint _2401 = _2384 + 5u;
    float _2407 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
    uint _2411 = _2384 + 4u;
    float _2420 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2424 = _2384 | 1u;
    float _2435 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_917, _918, _919));
    float _2438 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_917, _918, _919));
    float _4674 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _4685 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2443 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2445 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2452 = ((cbLight._m0[_2401].x * _2407) * _2445) + (((cbLight._m0[_2411].x * _2373) * _2420) * _2443);
    float _2453 = ((_2407 * cbLight._m0[_2401].y) * _2445) + (((cbLight._m0[_2411].y * _2375) * _2420) * _2443);
    float _2454 = ((_2407 * cbLight._m0[_2401].z) * _2445) + (((cbLight._m0[_2411].z * _2377) * _2420) * _2443);
    uvec4 _2458 = floatBitsToUint(cbLight._m0[_2384 + 12u]);
    bool _2460 = _2458.x == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2460)
    {
        _2562 = _2452;
        _2564 = _2453;
        _2566 = _2454;
    }
    else
    {
        uint _2570 = _2384 + 6u;
        float _2586 = (dot(vec3(cbLight._m0[_2384 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4696 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2589 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2562 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2452;
        _2564 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2453;
        _2566 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2454;
    }
    bool _2569 = _2458.y == 0u;
    float _2624;
    float _2626;
    float _2628;
    if (_2569)
    {
        _2624 = _2562;
        _2626 = _2564;
        _2628 = _2566;
    }
    else
    {
        uint _2797 = _2384 + 7u;
        float _2813 = (dot(vec3(cbLight._m0[_2384 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2814 = _2813 * _2813;
        float _4712 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2815 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2816 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2624 = (((cbLight._m0[_2797].x * 0.3183098733425140380859375) * _2815) * _2816) + _2562;
        _2626 = (((cbLight._m0[_2797].y * 0.3183098733425140380859375) * _2815) * _2816) + _2564;
        _2628 = (((cbLight._m0[_2797].z * 0.3183098733425140380859375) * _2815) * _2816) + _2566;
    }
    uint _2631 = _2384 + 8u;
    float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _920) * 0.949999988079071044921875);
    float _2645 = _2644 * _2644;
    float _2646 = cbLight._m0[_2384].x + _997;
    float _2647 = cbLight._m0[_2384].y + _998;
    float _2648 = cbLight._m0[_2384].z + _999;
    float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
    float _2653 = _2652 * _2646;
    float _2654 = _2652 * _2647;
    float _2655 = _2652 * _2648;
    float _2656 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2384].xyz));
    float _4728 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _4739 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2660 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2661 = dot(vec3(_917, _918, _919), vec3(_2653, _2654, _2655));
    float _4750 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2653, _2654, _2655));
    float _4761 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2645 * _2645;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2682 = 0.959999978542327880859375 - _1064;
    float _2684 = 0.959999978542327880859375 - _1065;
    float _2685 = 0.959999978542327880859375 - _1066;
    float _2692 = 1.0 - _2645;
    float _2703 = (0.5 / (((_2660 * ((_2659 * _2692) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2692) + _2645) * _2659))) * _2659;
    float _4772 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2705 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    uint _2719 = _2384 + 9u;
    float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _920) * 0.949999988079071044921875);
    float _2731 = _2730 * _2730;
    float _2732 = cbLight._m0[_2424].x + _997;
    float _2733 = cbLight._m0[_2424].y + _998;
    float _2734 = cbLight._m0[_2424].z + _999;
    float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
    float _2739 = _2738 * _2732;
    float _2740 = _2738 * _2733;
    float _2741 = _2738 * _2734;
    float _2742 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2424].xyz));
    float _4783 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2746 = dot(vec3(_917, _918, _919), vec3(_2739, _2740, _2741));
    float _4794 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2749 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2750 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2739, _2740, _2741));
    float _4805 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2754 = _2731 * _2731;
    float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
    float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
    float _2772 = 1.0 - _2731;
    float _2782 = (0.5 / (((_2660 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2772) + _2731) * _2745))) * _2745;
    float _4816 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2784 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
    float _2794 = (((((_2765 * _2682) + _1067) * cbLight._m0[_2719].x) * _2784) * _2407) + ((((cbLight._m0[_2631].x * _2373) * ((_2681 * _2682) + _1067)) * _2705) * _2420);
    float _2795 = (((((_2765 * _2684) + _1069) * cbLight._m0[_2719].y) * _2784) * _2407) + ((((cbLight._m0[_2631].y * _2375) * ((_2681 * _2684) + _1069)) * _2705) * _2420);
    float _2796 = (((((_2765 * _2685) + _1070) * cbLight._m0[_2719].z) * _2784) * _2407) + ((((cbLight._m0[_2631].z * _2377) * ((_2681 * _2685) + _1070)) * _2705) * _2420);
    float _2852;
    float _2854;
    float _2856;
    if (_2460)
    {
        _2852 = _2794;
        _2854 = _2795;
        _2856 = _2796;
    }
    else
    {
        uint _2858 = _2384 + 2u;
        uint _2862 = _2384 + 10u;
        float _2876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2858].w)) * _920) * 0.949999988079071044921875);
        float _2877 = _2876 * _2876;
        float _2878 = cbLight._m0[_2858].x + _997;
        float _2879 = cbLight._m0[_2858].y + _998;
        float _2880 = cbLight._m0[_2858].z + _999;
        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
        float _2885 = _2884 * _2878;
        float _2886 = _2884 * _2879;
        float _2887 = _2884 * _2880;
        float _2888 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2858].xyz));
        float _4827 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2892 = dot(vec3(_917, _918, _919), vec3(_2885, _2886, _2887));
        float _4838 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2896 = dot(vec3(cbLight._m0[_2858].xyz), vec3(_2885, _2886, _2887));
        float _4849 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2900 = _2877 * _2877;
        float _2904 = ((_2895 * _2895) * (_2900 + (-1.0))) + 1.0;
        float _2911 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
        float _2918 = 1.0 - _2877;
        float _2928 = (0.5 / (((_2660 * ((_2891 * _2918) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2918) + _2877) * _2891))) * _2891;
        float _4860 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2900 / ((_2904 * _2904) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2852 = (((((_2911 * _2682) + _1067) * cbLight._m0[_2862].x) * _2930) * _2931) + _2794;
        _2854 = (((((_2911 * _2684) + _1069) * cbLight._m0[_2862].y) * _2930) * _2931) + _2795;
        _2856 = (((((_2911 * _2685) + _1070) * cbLight._m0[_2862].z) * _2930) * _2931) + _2796;
    }
    float _2962;
    float _2964;
    float _2966;
    if (_2569)
    {
        _2962 = _2852;
        _2964 = _2854;
        _2966 = _2856;
    }
    else
    {
        uint _2973 = _2384 + 3u;
        uint _2977 = _2384 + 11u;
        float _2991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2973].w)) * _920) * 0.949999988079071044921875);
        float _2992 = _2991 * _2991;
        float _2993 = cbLight._m0[_2973].x + _997;
        float _2994 = cbLight._m0[_2973].y + _998;
        float _2995 = cbLight._m0[_2973].z + _999;
        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
        float _3000 = _2999 * _2993;
        float _3001 = _2999 * _2994;
        float _3002 = _2999 * _2995;
        float _3003 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2973].xyz));
        float _4876 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _3007 = dot(vec3(_917, _918, _919), vec3(_3000, _3001, _3002));
        float _4887 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _3011 = dot(vec3(cbLight._m0[_2973].xyz), vec3(_3000, _3001, _3002));
        float _4898 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3015 = _2992 * _2992;
        float _3019 = ((_3010 * _3010) * (_3015 + (-1.0))) + 1.0;
        float _3026 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
        float _3033 = 1.0 - _2992;
        float _3043 = (0.5 / (((_2660 * ((_3006 * _3033) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _3033) + _2992) * _3006))) * _3006;
        float _4909 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3045 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_3015 / ((_3019 * _3019) * 3.141590118408203125));
        float _3046 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2962 = (((((_3026 * _2682) + _1067) * cbLight._m0[_2977].x) * _3045) * _3046) + _2852;
        _2964 = (((((_3026 * _2684) + _1069) * cbLight._m0[_2977].y) * _3045) * _3046) + _2854;
        _2966 = (((((_3026 * _2685) + _1070) * cbLight._m0[_2977].z) * _3045) * _3046) + _2856;
    }
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_2382.y == 0u)
    {
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.x;
        uint _3079 = uint((float(_3067.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1006) / _3068))) + floor(float(uint(cbSceneParam._m0[85u].x * _1005) / _3068)));
        float _3089 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3090 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        uint _3093 = uint(isnan(14.0) ? _3090 : (isnan(_3090) ? 14.0 : min(_3090, 14.0)));
        uvec4 _3098 = texelFetch(g_lightClusterGridBuffer, int(((_3093 << 2u) + (_3079 << 6u)) >> 2u));
        uint _3099 = _3098.x;
        uint _3100 = _3067.z;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((((1u << ((_3100 >> 4u) & 15u)) + 4294967295u) & _3099) == 0u) || ((_3100 & 240u) == 0u))
        {
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
        }
        else
        {
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            float _3328 = 0.0;
            float _3329 = 0.0;
            uint _3330 = 0u;
            uint _3339;
            bool _3340;
            for (;;)
            {
                _3339 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3330 << 2u)) >> 2u)).x;
                _3340 = _3339 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3340)
                {
                    frontier_phi_66_pred = _3329;
                    frontier_phi_66_pred_1 = _3328;
                    frontier_phi_66_pred_2 = _3327;
                    frontier_phi_66_pred_3 = _3326;
                    frontier_phi_66_pred_4 = _3325;
                    frontier_phi_66_pred_5 = _3324;
                }
                else
                {
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    uint _3454;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3326;
                    _3451 = _3327;
                    _3452 = _3328;
                    _3453 = _3329;
                    _3454 = _3339;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    for (;;)
                    {
                        uint _3458 = uint(findLSB(_3454)) + (_3330 << 5u);
                        uint _3455 = (_3454 + 4294967295u) & _3454;
                        uint _3460 = _3458 * 48u;
                        vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 3u)).x));
                        uint _3480 = (_3458 * 48u) + 4u;
                        vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3480)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 3u)).x));
                        uint _3499 = (_3458 * 48u) + 8u;
                        vec3 _3510 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3499)).x, texelFetch(g_PointLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3499 + 2u)).x));
                        float _3514 = _3474.x - _2158;
                        float _3515 = _3474.y - _2159;
                        float _3516 = _3474.z - _2160;
                        float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                        float _3520 = inversesqrt(_3517);
                        float _3521 = _3520 * _3514;
                        float _3522 = _3520 * _3515;
                        float _3523 = _3520 * _3516;
                        float _3524 = dot(vec3(_1024, _1027, _1030), vec3(_3521, _3522, _3523));
                        float _3529 = 1.0 - (_3517 * _3474.w);
                        float _4935 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3530 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3531 = sqrt(_3517) * _3493.w;
                        float _3534 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                        float _3535 = _3534 * _3534;
                        float _3538 = ((1.0 - _3535) * _3524) + _3535;
                        float _3541 = _3531 * _3531;
                        float _3545 = ((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3530) / ((_3541 * 0.699999988079071044921875) + 1.0);
                        float _3549 = (-0.0) - _2158;
                        float _3550 = (-0.0) - _2159;
                        float _3551 = (-0.0) - _2160;
                        float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                        float _3556 = _3555 * _3549;
                        float _3557 = _3555 * _3550;
                        float _3558 = _3555 * _3551;
                        float _3565 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                        float _3566 = 1.0 - _1099;
                        float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                        float _3574 = _3573 * _3573;
                        float _3575 = _3574 * _3574;
                        float _3576 = _3556 + _3521;
                        float _3577 = _3557 + _3522;
                        float _3578 = _3558 + _3523;
                        float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                        float _3586 = dot(vec3(_1024, _1027, _1030), vec3(_3556, _3557, _3558));
                        float _4951 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3589 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3590 = dot(vec3(_1024, _1027, _1030), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                        float _4962 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3593 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                        float _3598 = _3534 * _3574;
                        float _3599 = _3598 * _3598;
                        float _3602 = ((1.0 - _3599) * _3524) + _3599;
                        float _4973 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3603 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3604 = 1.0 - _3574;
                        float _3614 = (0.5 / (((_3603 * ((_3589 * _3604) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3574) * _3589))) * _3603;
                        float _4984 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                        float _3625 = (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) / ((_3597 * _3597) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125))) * _3530;
                        _3383 = (_3545 * _3493.x) + _3451;
                        _3384 = (_3545 * _3493.y) + _3452;
                        _3385 = (_3545 * _3493.z) + _3453;
                        _3380 = (_3625 * _3510.x) + _3448;
                        _3381 = (_3625 * _3510.y) + _3449;
                        _3382 = (_3625 * _3510.z) + _3450;
                        if (_3455 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3382;
                            _3451 = _3383;
                            _3452 = _3384;
                            _3453 = _3385;
                            _3454 = _3455;
                        }
                    }
                    frontier_phi_66_pred = _3385;
                    frontier_phi_66_pred_1 = _3384;
                    frontier_phi_66_pred_2 = _3383;
                    frontier_phi_66_pred_3 = _3382;
                    frontier_phi_66_pred_4 = _3381;
                    frontier_phi_66_pred_5 = _3380;
                }
                _3190 = frontier_phi_66_pred;
                _3188 = frontier_phi_66_pred_1;
                _3186 = frontier_phi_66_pred_2;
                _3184 = frontier_phi_66_pred_3;
                _3182 = frontier_phi_66_pred_4;
                _3180 = frontier_phi_66_pred_5;
                uint _3331 = _3330 + 1u;
                if (_3331 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3324 = _3180;
                    _3325 = _3182;
                    _3326 = _3184;
                    _3327 = _3186;
                    _3328 = _3188;
                    _3329 = _3190;
                    _3330 = _3331;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
        }
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.z;
        uint _3196 = (_3194 >> 8u) & 15u;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        float _3300;
        float _3302;
        if (((4294967295u << _3196) & _3099) == 0u)
        {
            _3292 = _3179;
            _3294 = _3181;
            _3296 = _3183;
            _3298 = _3185;
            _3300 = _3187;
            _3302 = _3189;
        }
        else
        {
            float _3317 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _3318 = _3317 * _2158;
            float _3319 = _3317 * _2159;
            float _3320 = _3317 * _2160;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3196 < ((_3194 >> 12u) & 15u))
            {
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3301;
                float _3303;
                float _3431 = _3179;
                float _3432 = _3181;
                float _3433 = _3183;
                float _3434 = _3185;
                float _3435 = _3187;
                float _3436 = _3189;
                uint _3437 = _3196;
                uint _3446;
                bool _3447;
                for (;;)
                {
                    _3446 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3437 << 2u)) >> 2u)).x;
                    _3447 = _3446 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3447)
                    {
                        frontier_phi_72_pred = _3436;
                        frontier_phi_72_pred_1 = _3435;
                        frontier_phi_72_pred_2 = _3434;
                        frontier_phi_72_pred_3 = _3433;
                        frontier_phi_72_pred_4 = _3432;
                        frontier_phi_72_pred_5 = _3431;
                    }
                    else
                    {
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        float _3645 = _3433;
                        float _3646 = _3434;
                        float _3647 = _3435;
                        float _3648 = _3436;
                        uint _3649 = _3446;
                        uint _3650;
                        vec4 _3675;
                        float _3676;
                        vec4 _3691;
                        vec3 _3703;
                        vec4 _3718;
                        vec4 _3733;
                        float _3779;
                        bool _3780;
                        for (;;)
                        {
                            uint _3660 = ((_3437 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3649));
                            _3650 = (_3649 + 4294967295u) & _3649;
                            uint _3662 = _3660 * 40u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            _3676 = _3675.w;
                            uint _3678 = (_3660 * 40u) + 4u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3693 = (_3660 * 40u) + 8u;
                            _3703 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x));
                            uint _3705 = (_3660 * 40u) + 16u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3720 = (_3660 * 40u) + 20u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3735 = (_3660 * 40u) + 24u;
                            vec4 _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3754 = (_3660 * 40u) + 28u;
                            vec4 _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            _3779 = fma(_2160, _3767.z, fma(_2159, _3767.y, _3767.x * _2158)) + _3767.w;
                            _3780 = !((fma(_2160, _3748.z, fma(_2159, _3748.y, _3748.x * _2158)) + _3748.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3780)
                            {
                                float _3807 = _3675.x - _2158;
                                float _3808 = _3675.y - _2159;
                                float _3809 = _3675.z - _2160;
                                float _3810 = dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809));
                                float _3813 = inversesqrt(_3810);
                                float _3814 = _3813 * _3807;
                                float _3815 = _3813 * _3808;
                                float _3816 = _3813 * _3809;
                                float _3820 = 1.0 - (_3810 / (_3676 * _3676));
                                float _4995 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3825 = sqrt(_3810) * _3691.w;
                                float _3827 = 1.39999997615814208984375 / (_3825 + 1.39999997615814208984375);
                                float _3828 = _3827 * _3827;
                                float _3831 = ((1.0 - _3828) * dot(vec3(_3814, _3815, _3816), vec3(_1024, _1027, _1030))) + _3828;
                                float _3834 = _3825 * _3825;
                                float _3838 = (fma(_2160, _3718.z, fma(_2159, _3718.y, _3718.x * _2158)) + _3718.w) / _3779;
                                float _3839 = (fma(_2160, _3733.z, fma(_2159, _3733.y, _3733.x * _2158)) + _3733.w) / _3779;
                                float _3843 = 1.0 - dot(vec2(_3838, _3839), vec2(_3838, _3839));
                                float _5011 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3845 = _3844 * (((isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0))) * _3821) / ((_3834 * 0.699999988079071044921875) + 1.0));
                                float _3857 = exp2(log2(1.0 / ((_3834 * 3.5) + 5.0)) * 0.25);
                                float _3858 = 1.0 - _1099;
                                float _3865 = sqrt(1.0 - ((1.0 - (_3858 * _3858)) * (1.0 - (_3857 * _3857))));
                                float _3866 = _3865 * _3865;
                                float _3867 = _3866 * _3866;
                                float _3868 = _3814 - _3318;
                                float _3869 = _3815 - _3319;
                                float _3870 = _3816 - _3320;
                                float _3874 = inversesqrt(dot(vec3(_3868, _3869, _3870), vec3(_3868, _3869, _3870)));
                                float _3878 = dot(vec3(_1024, _1027, _1030), vec3((-0.0) - _3318, (-0.0) - _3319, (-0.0) - _3320));
                                float _5022 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3881 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3882 = dot(vec3(_1024, _1027, _1030), vec3(_3874 * _3868, _3874 * _3869, _3874 * _3870));
                                float _5033 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3885 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3889 = ((_3885 * _3885) * (_3867 + (-1.0))) + 1.0;
                                float _3890 = _3827 * _3866;
                                float _3891 = _3890 * _3890;
                                float _3897 = ((1.0 - _3891) * dot(vec3(_1024, _1027, _1030), vec3(_3814, _3815, _3816))) + _3891;
                                float _5044 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3898 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3899 = 1.0 - _3866;
                                float _3909 = (0.5 / (((_3898 * ((_3881 * _3899) + _3866)) + 9.9999999392252902907785028219223e-09) + (((_3898 * _3899) + _3866) * _3881))) * _3898;
                                float _5055 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3919 = (_3844 * _3821) * (((_3867 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3889 * _3889) * ((_3834 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3845 * _3691.y;
                                frontier_phi_78_pred_1 = _3845 * _3691.x;
                                frontier_phi_78_pred_2 = _3919 * _3703.z;
                                frontier_phi_78_pred_3 = _3919 * _3703.y;
                                frontier_phi_78_pred_4 = _3919 * _3703.x;
                                frontier_phi_78_pred_5 = _3845 * _3691.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3927 = frontier_phi_78_pred;
                            _3926 = frontier_phi_78_pred_1;
                            _3925 = frontier_phi_78_pred_2;
                            _3924 = frontier_phi_78_pred_3;
                            _3923 = frontier_phi_78_pred_4;
                            _3928 = frontier_phi_78_pred_5;
                            _3633 = _3926 + _3646;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            if (_3650 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3650;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3635;
                        frontier_phi_72_pred_1 = _3634;
                        frontier_phi_72_pred_2 = _3633;
                        frontier_phi_72_pred_3 = _3632;
                        frontier_phi_72_pred_4 = _3631;
                        frontier_phi_72_pred_5 = _3630;
                    }
                    _3303 = frontier_phi_72_pred;
                    _3301 = frontier_phi_72_pred_1;
                    _3299 = frontier_phi_72_pred_2;
                    _3297 = frontier_phi_72_pred_3;
                    _3295 = frontier_phi_72_pred_4;
                    _3293 = frontier_phi_72_pred_5;
                    uint _3438 = _3437 + 1u;
                    if (_3438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3431 = _3293;
                        _3432 = _3295;
                        _3433 = _3297;
                        _3434 = _3299;
                        _3435 = _3301;
                        _3436 = _3303;
                        _3437 = _3438;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3303;
                frontier_phi_60_61_ladder_1 = _3301;
                frontier_phi_60_61_ladder_2 = _3297;
                frontier_phi_60_61_ladder_3 = _3295;
                frontier_phi_60_61_ladder_4 = _3293;
                frontier_phi_60_61_ladder_5 = _3299;
            }
            else
            {
                frontier_phi_60_61_ladder = _3189;
                frontier_phi_60_61_ladder_1 = _3187;
                frontier_phi_60_61_ladder_2 = _3183;
                frontier_phi_60_61_ladder_3 = _3181;
                frontier_phi_60_61_ladder_4 = _3179;
                frontier_phi_60_61_ladder_5 = _3185;
            }
            _3292 = frontier_phi_60_61_ladder_4;
            _3294 = frontier_phi_60_61_ladder_3;
            _3296 = frontier_phi_60_61_ladder_2;
            _3298 = frontier_phi_60_61_ladder_5;
            _3300 = frontier_phi_60_61_ladder_1;
            _3302 = frontier_phi_60_61_ladder;
        }
        float _3307 = isnan(1.0) ? _1083 : (isnan(_1083) ? 1.0 : min(_1083, 1.0));
        _3112 = (_3307 * _3298) + _2624;
        _3114 = (_3307 * _3300) + _2626;
        _3116 = (_3307 * _3302) + _2628;
        _3118 = ((_3292 * _1067) * _3307) + _2962;
        _3120 = ((_3294 * _1069) * _3307) + _2964;
        _3122 = ((_3296 * _1070) * _3307) + _2966;
    }
    else
    {
        _3112 = _2624;
        _3114 = _2626;
        _3116 = _2628;
        _3118 = _2962;
        _3120 = _2964;
        _3122 = _2966;
    }
    float _5071 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _5082 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _5093 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    uint _3142 = _280 + 6u;
    float _3150 = _1005 / cbSceneParam._m0[86u].x;
    float _3151 = _1006 / cbSceneParam._m0[86u].y;
    vec4 _3165 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3167 = _3165.x;
    float _3168 = _3165.y;
    float _3169 = _3165.z;
    float _3170 = _3165.w;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _3204 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _3205 = _3204 / _939;
        float _3216 = _3205 * _990;
        float _3217 = _991 * _3205;
        float _3218 = (-0.0) - _3217;
        float _3220 = _3205 * _992;
        float _3222 = (cbSceneParam._m0[77u].w * _3218) / _3204;
        float _3223 = _3222 + cbSceneParam._m0[79u].w;
        float _3224 = cbSceneParam._m0[79u].w - _3217;
        float _3230 = sqrt(((_3216 * _3216) + (_3217 * _3217)) + (_3220 * _3220));
        float _3233 = (1.0 - (cbSceneParam._m0[77u].w / _3204)) * _3230;
        float _3238 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3240 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3393;
        if (abs((_3218 - _3222) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3393 = ((((_3223 > 0.0) ? exp2(_3238 * _3223) : (2.0 - exp2(_3240 * _3223))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3233;
        }
        else
        {
            float _3353 = 1.0 / cbSceneParam._m0[80u].x;
            float _3354 = isnan(_3224) ? _3223 : (isnan(_3223) ? _3224 : max(_3223, _3224));
            float _3355 = isnan(_3224) ? _3223 : (isnan(_3223) ? _3224 : min(_3223, _3224));
            float _3364 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : min(_3354, 0.0));
            float _3365 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : min(_3355, 0.0));
            _3393 = ((abs(_3230 / _3218) * cbSceneParam._m0[80u].y) * ((((_3364 - _3365) * 2.0) - ((exp2(_3238 * (isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0)))) - exp2(_3238 * (isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))))) * _3353)) - ((exp2(_3240 * _3364) - exp2(_3240 * _3365)) * _3353))) + (_3233 * cbSceneParam._m0[80u].z);
        }
        vec4 _3395 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, 1.0), 0.0);
        float _3404 = exp2((_3393 * (-1.44269502162933349609375)) * (1.0 - _3395.w));
        float _3405 = log2(_3404);
        float _3421 = log2(_3170);
        _3242 = (exp2(_3421 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3405 * cbSceneParam._m0[78u].x)) * _3395.x) / cbSceneParam._m0[78u].x)) + _3167;
        _3244 = (exp2(_3421 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3405 * cbSceneParam._m0[78u].y)) * _3395.y) / cbSceneParam._m0[78u].y)) + _3168;
        _3246 = (exp2(_3421 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3405 * cbSceneParam._m0[78u].z)) * _3395.z) / cbSceneParam._m0[78u].z)) + _3169;
        _3248 = _3404 * _3170;
    }
    else
    {
        _3242 = _3167;
        _3244 = _3168;
        _3246 = _3169;
        _3248 = _3170;
    }
    float _3260 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3261 = _3260 == 3.0;
    float _3262 = log2(_3248);
    float _3269 = exp2(_3262 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3112 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1083))) + ((_3118 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3270 = exp2(_3262 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3114 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1083))) + ((_3120 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3271 = exp2(_3262 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3116 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1083))) + ((_3122 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3280 = (_3260 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3280 * (_3261 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3242)));
    SV_Target.y = _3280 * (_3261 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3244)));
    SV_Target.z = _3280 * (_3261 ? _3271 : (_3271 + (cbSceneParam._m0[72u].w * _3246)));
    SV_Target.w = cbInstanceData._m0[_3142].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3142].w;
}


