#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1530;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3878 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3889 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3900 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3911 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _462 = (_455 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _463 = (_455 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _464 = (_455 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3922 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _388.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[23u].w) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3933 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _617;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _685 = _683.x;
    float _686 = _683.y;
    float _687 = _683.z;
    float _694 = ((_666.x - _685) * _455) + _685;
    float _695 = ((_666.y - _686) * _455) + _686;
    float _696 = ((_666.z - _687) * _455) + _687;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _719 = ((_708.x - _694) * _528) + _694;
    float _720 = ((_708.y - _695) * _528) + _695;
    float _721 = ((_708.z - _696) * _528) + _696;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _746 = ((_733.z - _721) * _598) + _721;
    float _749 = ((((_733.x - _719) * _598) + _719) * 2.0) + (-1.0);
    float _750 = ((((_733.y - _720) * _598) + _720) * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _3944 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _756 = sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))));
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _795 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _797 = _795.x;
    float _798 = 1.0 - _797;
    float _813 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_797 - _798) * cbMtdParam._m0[24u].z) + _798) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3955 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _821 = (_814 * (cbMtdParam._m0[17u].x - _624)) + _624;
    float _822 = (_814 * (cbMtdParam._m0[17u].y - _625)) + _625;
    float _823 = (_814 * (cbMtdParam._m0[17u].z - _626)) + _626;
    vec4 _849 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _851 = _849.x;
    float _869 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _851) * _455) + _851;
    float _886 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _869) * _528) + _869;
    float _904 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _886) * _598) + _886;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _904) * cbMtdParam._m0[19u].z) + _904;
    float _910 = _908 - (_908 * _814);
    float _915 = (((_643.z - _746) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _746;
    float _919 = ((_770.z - _915) * cbMtdParam._m0[19u].w) + _915;
    vec4 _932 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _939 = (_932.x * 2.0) + (-1.0);
    float _940 = (_932.y * 2.0) + (-1.0);
    float _941 = dot(vec2(_939, _940), vec2(_939, _940));
    float _3966 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _949 = (_814 * (_932.z - _919)) + _919;
    float _958 = (_749 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_643.x * 2.0) + (-1.0)))) + (((_770.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _959 = (_750 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_643.y * 2.0) + (-1.0)))) + (((_770.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _971 = (((_939 - _958) + (cbMtdParam._m0[21u].x * _958)) * _814) + _958;
    float _972 = (((_940 - _959) + (cbMtdParam._m0[21u].x * _959)) * _814) + _959;
    float _973 = (_814 * (sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) - _756)) + _756;
    float _977 = cbMtdParam._m0[22u].x + _770.w;
    float _980 = fma(_973, _252 * NORMAL.x, fma(_972, _259 * TANGENT.x, (_245 * _237) * _971));
    float _983 = fma(_973, _252 * NORMAL.y, fma(_972, _259 * TANGENT.y, (_245 * _238) * _971));
    float _986 = fma(_973, _252 * NORMAL.z, fma(_972, _259 * TANGENT.z, (_245 * _239) * _971));
    float _990 = inversesqrt(dot(vec3(_980, _983, _986), vec3(_980, _983, _986)));
    float _991 = _990 * _980;
    float _992 = _990 * _983;
    float _993 = _990 * _986;
    float _3977 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _994 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _3999 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4010 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4021 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4032 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _999 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1013 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1063 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1053);
    float _1064 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1053);
    float _1065 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1053);
    float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
    float _1070 = _1063 * _1069;
    float _1071 = _1064 * _1069;
    float _1072 = _1065 * _1069;
    float _1078 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1079 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1097 = fma(_993, cbSceneParam._m0[5u].z, fma(_992, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _991));
    float _1100 = fma(_993, cbSceneParam._m0[6u].z, fma(_992, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _991));
    float _1103 = fma(_993, cbSceneParam._m0[7u].z, fma(_992, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _991));
    uint _1117 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1123 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1117].x;
    float _1124 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1117].y;
    float _1125 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1117].z;
    float _4043 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1129 = 1.0 - _999;
    float _1130 = _1126 * _1129;
    float _1131 = _1127 * _1129;
    float _1132 = _1128 * _1129;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _999;
    float _1138 = (_1127 + (-0.039999999105930328369140625)) * _999;
    float _1139 = (_1128 + (-0.039999999105930328369140625)) * _999;
    float _1140 = _1137 + 0.039999999105930328369140625;
    float _1142 = _1138 + 0.039999999105930328369140625;
    float _1143 = _1139 + 0.039999999105930328369140625;
    vec4 _1152 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1078, cbSceneParam._m0[86u].y * _1079));
    float _1156 = ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * TEXCOORD_5.w) * _1152.x;
    float _1157 = dot(vec3(_991, _992, _993), vec3(_1070, _1071, _1072));
    float _1160 = _1157 * 2.0;
    float _1164 = (_1160 * _991) - _1070;
    float _1165 = (_1160 * _992) - _1071;
    float _1166 = (_1160 * _993) - _1072;
    float _1170 = abs(dot(vec3(_1070, _1071, _1072), vec3(_991, _992, _993)));
    float _4076 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1172 = sqrt(_994);
    float _1185 = exp2((_1172 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1172 * 3.0));
    float _1191 = (1.0 - _1185) * ((_1172 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1192 = _1185 * _1172;
    float _1220 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1224 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1228 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1529;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1254 = fma(_1228, cbModelParam._m0[26u].z, fma(_1224, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220));
        float _1258 = fma(_1228, cbModelParam._m0[27u].z, fma(_1224, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220));
        float _1262 = fma(_1228, cbModelParam._m0[28u].z, fma(_1224, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220));
        float _1287 = _1220 + _991;
        float _1288 = _1224 + _992;
        float _1289 = _1228 + _993;
        float _1299 = fma(_1289, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287)) - _1254;
        float _1300 = fma(_1289, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287)) - _1258;
        float _1301 = fma(_1289, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287)) - _1262;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1254 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1258 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[34u].z) + ((((((_1262 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1357 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1323.x + (-0.5));
        float _1359 = _1357 * (_1323.y + (-0.5));
        float _1360 = _1357 * (_1323.z + (-0.5));
        float _1367 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1330.x + (-0.5));
        float _1369 = _1367 * (_1330.y + (-0.5));
        float _1370 = _1367 * (_1330.z + (-0.5));
        float _1377 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1337.x + (-0.5));
        float _1379 = _1377 * (_1337.y + (-0.5));
        float _1380 = _1377 * (_1337.z + (-0.5));
        float _1387 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1344.x + (-0.5));
        float _1389 = _1387 * (_1344.y + (-0.5));
        float _1390 = _1387 * (_1344.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1411 = (dot(vec3(_991, _992, _993), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1421 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4124 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1423 + 1.0))) + _1428) * _1391;
        float _1438 = _1359 * 0.5;
        float _1439 = _1369 * 0.5;
        float _1440 = _1379 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_991, _992, _993), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4157 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1465 + 1.0))) + _1470) * _1392;
        float _1480 = _1360 * 0.5;
        float _1481 = _1370 * 0.5;
        float _1482 = _1380 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_991, _992, _993), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4190 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1507 + 1.0))) + _1512) * _1393;
        _1529 = _1360;
        _1531 = _1359;
        _1532 = _1358;
        _1533 = _1370;
        _1534 = _1369;
        _1535 = _1368;
        _1536 = _1380;
        _1537 = _1379;
        _1538 = _1378;
        _1539 = _1393;
        _1540 = _1392;
        _1541 = _1391;
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1530;
        _1531 = _1530;
        _1532 = _1530;
        _1533 = _1530;
        _1534 = _1530;
        _1535 = _1530;
        _1536 = _1530;
        _1537 = _1530;
        _1538 = _1530;
        _1539 = _1530;
        _1540 = _1530;
        _1541 = _1530;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1567 = fma(_1228, cbModelParam._m0[30u].z, fma(_1224, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220));
        float _1571 = fma(_1228, cbModelParam._m0[31u].z, fma(_1224, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220));
        float _1575 = fma(_1228, cbModelParam._m0[32u].z, fma(_1224, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220));
        float _1598 = _1220 + _991;
        float _1599 = _1224 + _992;
        float _1600 = _1228 + _993;
        float _1610 = fma(_1600, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1598)) - _1567;
        float _1611 = fma(_1600, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1598)) - _1571;
        float _1612 = fma(_1600, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1598)) - _1575;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1567 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1571 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[35u].z) + ((((((_1575 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1666 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1633.x + (-0.5));
        float _1668 = _1666 * (_1633.y + (-0.5));
        float _1669 = _1666 * (_1633.z + (-0.5));
        float _1676 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1640.x + (-0.5));
        float _1678 = _1676 * (_1640.y + (-0.5));
        float _1679 = _1676 * (_1640.z + (-0.5));
        float _1686 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1647.x + (-0.5));
        float _1688 = _1686 * (_1647.y + (-0.5));
        float _1689 = _1686 * (_1647.z + (-0.5));
        float _1696 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1654.x + (-0.5));
        float _1698 = _1696 * (_1654.y + (-0.5));
        float _1699 = _1696 * (_1654.z + (-0.5));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = _1667 * 0.5;
        float _1704 = _1677 * 0.5;
        float _1705 = _1687 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_991, _992, _993), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4253 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1730 + 1.0))) + _1735) * _1700;
        float _1745 = _1668 * 0.5;
        float _1746 = _1678 * 0.5;
        float _1747 = _1688 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_991, _992, _993), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4286 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1772 + 1.0))) + _1777) * _1701;
        float _1787 = _1669 * 0.5;
        float _1788 = _1679 * 0.5;
        float _1789 = _1689 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_991, _992, _993), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4319 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1814 + 1.0))) + _1819) * _1702;
        _1836 = _1669;
        _1837 = _1668;
        _1838 = _1667;
        _1839 = _1679;
        _1840 = _1678;
        _1841 = _1677;
        _1842 = _1689;
        _1843 = _1688;
        _1844 = _1687;
        _1845 = _1702;
        _1846 = _1701;
        _1847 = _1700;
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
    }
    else
    {
        _1836 = _1530;
        _1837 = _1530;
        _1838 = _1530;
        _1839 = _1530;
        _1840 = _1530;
        _1841 = _1530;
        _1842 = _1530;
        _1843 = _1530;
        _1844 = _1530;
        _1845 = _1530;
        _1846 = _1530;
        _1847 = _1530;
        _1848 = 0.0;
        _1849 = 0.0;
        _1850 = 0.0;
    }
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1542)) + _1542;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1543)) + _1543;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1544)) + _1544;
    float _1883 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1860));
    float _1904 = _1164 * 0.5;
    float _1905 = _1165 * 0.5;
    float _1906 = _1166 * 0.5;
    float _1907 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1910 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1913 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1920 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1529, _1533, _1536, _1539));
        float _1924 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1928 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1935 = dot(vec4(cbModelParam._m0[39u]), vec4(_1904, _1905, _1906, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1949 = dot(vec4(cbModelParam._m0[40u]), vec4(_1904, _1905, _1906, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1949) ? 0.0 : (isnan(0.0) ? _1949 : max(0.0, _1949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1962 = (_1958 * cbModelParam._m0[1u].x) + (_1947 * (1.0 - cbModelParam._m0[1u].x));
    float _1972 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _994);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1972 : min(cbModelParam._m0[25u].z, _1972));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2020 = fma(_1228, cbModelParam._m0[13u].z, fma(_1224, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1220)) + cbModelParam._m0[13u].w;
        float _2024 = fma(_1228, cbModelParam._m0[14u].z, fma(_1224, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1220)) + cbModelParam._m0[14u].w;
        float _2028 = fma(_1228, cbModelParam._m0[15u].z, fma(_1224, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1220)) + cbModelParam._m0[15u].w;
        float _2031 = fma(_1166, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164));
        float _2034 = fma(_1166, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164));
        float _2037 = fma(_1166, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164));
        float _2065;
        if (_2031 > 0.0)
        {
            _2065 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2065 = frontier_phi_14_12_ladder;
        }
        float _2289;
        if (_2034 > 0.0)
        {
            _2289 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2289 = frontier_phi_23_19_ladder;
        }
        float _2546;
        if (_2037 > 0.0)
        {
            _2546 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2546 = frontier_phi_35_30_ladder;
        }
        float _2548 = isnan(_2289) ? _2065 : (isnan(_2065) ? _2289 : min(_2065, _2289));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _2031) + _2020;
        float _2554 = (_2549 * _2034) + _2024;
        float _2555 = (_2549 * _2037) + _2028;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2556;
        float _2560 = _2556 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 > _2560) || ((_2554 < _2558) || ((_2553 < _2558) || (_2553 > _2560))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2555, cbModelParam._m0[9u].z, fma(_2554, cbModelParam._m0[9u].y, _2553 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2555, cbModelParam._m0[10u].z, fma(_2554, cbModelParam._m0[10u].y, _2553 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2555, cbModelParam._m0[11u].z, fma(_2554, cbModelParam._m0[11u].y, _2553 * cbModelParam._m0[11u].x))), _1973);
            frontier_phi_13_35_ladder = _2683.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2683.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2683.x * cbModelParam._m0[1u].y;
        }
        _2053 = frontier_phi_13_35_ladder_2;
        _2055 = frontier_phi_13_35_ladder_1;
        _2057 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1164, _1165, _1166), _1973);
        _2053 = _2041.x * cbModelParam._m0[1u].y;
        _2055 = _2041.y * cbModelParam._m0[1u].y;
        _2057 = _2041.z * cbModelParam._m0[1u].y;
    }
    float _2061 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _994);
    float _2062 = isnan(_2061) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2061 : min(cbModelParam._m0[25u].w, _2061));
    float _2152;
    float _2154;
    float _2156;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2116 = fma(_1228, cbModelParam._m0[21u].z, fma(_1224, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1220)) + cbModelParam._m0[21u].w;
        float _2120 = fma(_1228, cbModelParam._m0[22u].z, fma(_1224, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1220)) + cbModelParam._m0[22u].w;
        float _2124 = fma(_1228, cbModelParam._m0[23u].z, fma(_1224, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1220)) + cbModelParam._m0[23u].w;
        float _2127 = fma(_1166, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164));
        float _2130 = fma(_1166, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164));
        float _2133 = fma(_1166, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164));
        float _2294;
        if (_2127 > 0.0)
        {
            _2294 = abs((1.0 - _2116) / _2127);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2116 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2294 = frontier_phi_25_21_ladder;
        }
        float _2573;
        if (_2130 > 0.0)
        {
            _2573 = abs((1.0 - _2120) / _2130);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2120 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2573 = frontier_phi_37_32_ladder;
        }
        float _2786;
        if (_2133 > 0.0)
        {
            _2786 = abs((1.0 - _2124) / _2133);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2124 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2786 = frontier_phi_46_43_ladder;
        }
        float _2788 = isnan(_2573) ? _2294 : (isnan(_2294) ? _2573 : min(_2294, _2573));
        float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
        float _2793 = (_2789 * _2127) + _2116;
        float _2794 = (_2789 * _2130) + _2120;
        float _2795 = (_2789 * _2133) + _2124;
        float _2796 = _2789 * 9.9999997473787516355514526367188e-05;
        float _2797 = (-1.0) - _2796;
        float _2799 = _2796 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2795 > _2799) || ((_2795 < _2797) || ((_2794 > _2799) || ((_2794 < _2797) || ((_2793 < _2797) || (_2793 > _2799))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2795, cbModelParam._m0[17u].z, fma(_2794, cbModelParam._m0[17u].y, _2793 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2795, cbModelParam._m0[18u].z, fma(_2794, cbModelParam._m0[18u].y, _2793 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2795, cbModelParam._m0[19u].z, fma(_2794, cbModelParam._m0[19u].y, _2793 * cbModelParam._m0[19u].x))), _2062);
            frontier_phi_22_46_ladder = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _2152 = frontier_phi_22_46_ladder_2;
        _2154 = frontier_phi_22_46_ladder_1;
        _2156 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2136 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1164, _1165, _1166), _2062);
        _2152 = _2136.x * cbModelParam._m0[1u].z;
        _2154 = _2136.y * cbModelParam._m0[1u].z;
        _2156 = _2136.z * cbModelParam._m0[1u].z;
    }
    float _2169 = (((_1191 * _1140) + _1192) * _1156) * ((cbModelParam._m0[1u].w * (_2152 - _2053)) + _2053);
    float _2171 = (((_1191 * _1142) + _1192) * _1156) * ((cbModelParam._m0[1u].w * (_2154 - _2055)) + _2055);
    float _2173 = (((_1191 * _1143) + _1192) * _1156) * ((cbModelParam._m0[1u].w * (_2156 - _2057)) + _2057);
    float _2176 = fma(_2173, cbSceneParam._m0[89u].z, fma(_2171, cbSceneParam._m0[89u].y, _2169 * cbSceneParam._m0[89u].x));
    float _2179 = fma(_2173, cbSceneParam._m0[90u].z, fma(_2171, cbSceneParam._m0[90u].y, _2169 * cbSceneParam._m0[90u].x));
    float _2182 = fma(_2173, cbSceneParam._m0[91u].z, fma(_2171, cbSceneParam._m0[91u].y, _2169 * cbSceneParam._m0[91u].x));
    vec4 _2190 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1078, _1079));
    float _2192 = _2190.w;
    float _2204 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2192);
    float _2205 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2192);
    float _2206 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2192);
    uvec4 _2210 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2212 = _2210.x * 14u;
    uint _2213 = _2212 + 13u;
    float _2220 = _1156 + (-1.0);
    float _2225 = (cbLight._m0[_2213].x * _2220) + 1.0;
    float _2226 = (cbLight._m0[_2213].y * _2220) + 1.0;
    float _2227 = (cbLight._m0[_2213].z * _2220) + 1.0;
    float _2228 = (cbLight._m0[_2213].w * _2220) + 1.0;
    uint _2229 = _2212 + 5u;
    float _2235 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2239 = _2212 + 4u;
    float _2248 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2252 = _2212 | 1u;
    float _2263 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_991, _992, _993));
    float _2266 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_991, _992, _993));
    float _4455 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _4466 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2271 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2273 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2280 = ((cbLight._m0[_2229].x * _2235) * _2273) + (((cbLight._m0[_2239].x * _2204) * _2248) * _2271);
    float _2281 = ((_2235 * cbLight._m0[_2229].y) * _2273) + (((cbLight._m0[_2239].y * _2205) * _2248) * _2271);
    float _2282 = ((_2235 * cbLight._m0[_2229].z) * _2273) + (((cbLight._m0[_2239].z * _2206) * _2248) * _2271);
    uvec4 _2286 = floatBitsToUint(cbLight._m0[_2212 + 12u]);
    bool _2288 = _2286.x == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2288)
    {
        _2299 = _2280;
        _2301 = _2281;
        _2303 = _2282;
    }
    else
    {
        uint _2307 = _2212 + 6u;
        float _2323 = (dot(vec3(cbLight._m0[_2212 + 2u].xyz), vec3(_991, _992, _993)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4477 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2326 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2299 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2280;
        _2301 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2281;
        _2303 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2282;
    }
    bool _2306 = _2286.y == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2306)
    {
        _2344 = _2299;
        _2346 = _2301;
        _2348 = _2303;
    }
    else
    {
        uint _2517 = _2212 + 7u;
        float _2533 = (dot(vec3(cbLight._m0[_2212 + 3u].xyz), vec3(_991, _992, _993)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4493 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2536 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2344 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2299;
        _2346 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2301;
        _2348 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2303;
    }
    uint _2351 = _2212 + 8u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _994) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2212].x + _1070;
    float _2367 = cbLight._m0[_2212].y + _1071;
    float _2368 = cbLight._m0[_2212].z + _1072;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_991, _992, _993), vec3(cbLight._m0[_2212].xyz));
    float _4509 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _4520 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _2380 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2381 = dot(vec3(_991, _992, _993), vec3(_2373, _2374, _2375));
    float _4531 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2373, _2374, _2375));
    float _4542 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2365 * _2365;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
    float _2402 = 0.959999978542327880859375 - _1137;
    float _2404 = 0.959999978542327880859375 - _1138;
    float _2405 = 0.959999978542327880859375 - _1139;
    float _2412 = 1.0 - _2365;
    float _2423 = (0.5 / (((_2380 * ((_2379 * _2412) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2412) + _2365) * _2379))) * _2379;
    float _4553 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    uint _2439 = _2212 + 9u;
    float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _994) * 0.949999988079071044921875);
    float _2451 = _2450 * _2450;
    float _2452 = cbLight._m0[_2252].x + _1070;
    float _2453 = cbLight._m0[_2252].y + _1071;
    float _2454 = cbLight._m0[_2252].z + _1072;
    float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
    float _2459 = _2458 * _2452;
    float _2460 = _2458 * _2453;
    float _2461 = _2458 * _2454;
    float _2462 = dot(vec3(_991, _992, _993), vec3(cbLight._m0[_2252].xyz));
    float _4564 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2466 = dot(vec3(_991, _992, _993), vec3(_2459, _2460, _2461));
    float _4575 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2459, _2460, _2461));
    float _4586 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2451 * _2451;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2492 = 1.0 - _2451;
    float _2502 = (0.5 / (((_2380 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2492) + _2451) * _2465))) * _2465;
    float _4597 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    float _2514 = (((((_2485 * _2402) + _1140) * cbLight._m0[_2439].x) * _2504) * _2235) + ((((cbLight._m0[_2351].x * _2204) * ((_2401 * _2402) + _1140)) * _2425) * _2248);
    float _2515 = (((((_2485 * _2404) + _1142) * cbLight._m0[_2439].y) * _2504) * _2235) + ((((cbLight._m0[_2351].y * _2205) * ((_2401 * _2404) + _1142)) * _2425) * _2248);
    float _2516 = (((((_2485 * _2405) + _1143) * cbLight._m0[_2439].z) * _2504) * _2235) + ((((cbLight._m0[_2351].z * _2206) * ((_2401 * _2405) + _1143)) * _2425) * _2248);
    float _2578;
    float _2580;
    float _2582;
    if (_2288)
    {
        _2578 = _2514;
        _2580 = _2515;
        _2582 = _2516;
    }
    else
    {
        uint _2584 = _2212 + 2u;
        uint _2588 = _2212 + 10u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _994) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _1070;
        float _2605 = cbLight._m0[_2584].y + _1071;
        float _2606 = cbLight._m0[_2584].z + _1072;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_991, _992, _993), vec3(cbLight._m0[_2584].xyz));
        float _4608 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2618 = dot(vec3(_991, _992, _993), vec3(_2611, _2612, _2613));
        float _4619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4630 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2380 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2644) + _2603) * _2617))) * _2617;
        float _4641 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2578 = (((((_2637 * _2402) + _1140) * cbLight._m0[_2588].x) * _2656) * _2657) + _2514;
        _2580 = (((((_2637 * _2404) + _1142) * cbLight._m0[_2588].y) * _2656) * _2657) + _2515;
        _2582 = (((((_2637 * _2405) + _1143) * cbLight._m0[_2588].z) * _2656) * _2657) + _2516;
    }
    float _2692;
    float _2694;
    float _2696;
    if (_2306)
    {
        _2692 = _2578;
        _2694 = _2580;
        _2696 = _2582;
    }
    else
    {
        uint _2703 = _2212 + 3u;
        uint _2707 = _2212 + 11u;
        float _2721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2703].w)) * _994) * 0.949999988079071044921875);
        float _2722 = _2721 * _2721;
        float _2723 = cbLight._m0[_2703].x + _1070;
        float _2724 = cbLight._m0[_2703].y + _1071;
        float _2725 = cbLight._m0[_2703].z + _1072;
        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
        float _2730 = _2729 * _2723;
        float _2731 = _2729 * _2724;
        float _2732 = _2729 * _2725;
        float _2733 = dot(vec3(_991, _992, _993), vec3(cbLight._m0[_2703].xyz));
        float _4657 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2737 = dot(vec3(_991, _992, _993), vec3(_2730, _2731, _2732));
        float _4668 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2741 = dot(vec3(cbLight._m0[_2703].xyz), vec3(_2730, _2731, _2732));
        float _4679 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2745 = _2722 * _2722;
        float _2749 = ((_2740 * _2740) * (_2745 + (-1.0))) + 1.0;
        float _2756 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2763 = 1.0 - _2722;
        float _2773 = (0.5 / (((_2380 * ((_2736 * _2763) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2763) + _2722) * _2736))) * _2736;
        float _4690 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2775 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2745 / ((_2749 * _2749) * 3.141590118408203125));
        float _2776 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2692 = (((((_2756 * _2402) + _1140) * cbLight._m0[_2707].x) * _2775) * _2776) + _2578;
        _2694 = (((((_2756 * _2404) + _1142) * cbLight._m0[_2707].y) * _2775) * _2776) + _2580;
        _2696 = (((((_2756 * _2405) + _1143) * cbLight._m0[_2707].z) * _2775) * _2776) + _2582;
    }
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_2210.y == 0u)
    {
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2851;
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2851;
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2851;
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.x;
        uint _2878 = uint((float(_2866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1079) / _2867))) + floor(float(uint(cbSceneParam._m0[85u].x * _1078) / _2867)));
        float _2888 = (log2(_2854 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2889 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        uint _2892 = uint(isnan(14.0) ? _2889 : (isnan(_2889) ? 14.0 : min(_2889, 14.0)));
        uvec4 _2897 = texelFetch(g_lightClusterGridBuffer, int(((_2892 << 2u) + (_2878 << 6u)) >> 2u));
        uint _2898 = _2897.x;
        uint _2899 = _2866.z;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((((1u << ((_2899 >> 4u) & 15u)) + 4294967295u) & _2898) == 0u) || ((_2899 & 240u) == 0u))
        {
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
        }
        else
        {
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            uint _3150 = 0u;
            uint _3159;
            bool _3160;
            for (;;)
            {
                _3159 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                _3160 = _3159 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3160)
                {
                    frontier_phi_61_pred = _3144;
                    frontier_phi_61_pred_1 = _3149;
                    frontier_phi_61_pred_2 = _3148;
                    frontier_phi_61_pred_3 = _3147;
                    frontier_phi_61_pred_4 = _3146;
                    frontier_phi_61_pred_5 = _3145;
                }
                else
                {
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    uint _3274;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3159;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    for (;;)
                    {
                        uint _3278 = uint(findLSB(_3274)) + (_3150 << 5u);
                        uint _3275 = (_3274 + 4294967295u) & _3274;
                        uint _3280 = _3278 * 48u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3300 = (_3278 * 48u) + 4u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3319 = (_3278 * 48u) + 8u;
                        vec3 _3330 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x));
                        float _3334 = _3294.x - _2852;
                        float _3335 = _3294.y - _2853;
                        float _3336 = _3294.z - _2854;
                        float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                        float _3340 = inversesqrt(_3337);
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3344 = dot(vec3(_1097, _1100, _1103), vec3(_3341, _3342, _3343));
                        float _3349 = 1.0 - (_3337 * _3294.w);
                        float _4716 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3351 = sqrt(_3337) * _3313.w;
                        float _3354 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3344) + _3355;
                        float _3361 = _3351 * _3351;
                        float _3365 = ((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3350) / ((_3361 * 0.699999988079071044921875) + 1.0);
                        float _3369 = (-0.0) - _2852;
                        float _3370 = (-0.0) - _2853;
                        float _3371 = (-0.0) - _2854;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3386 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                        float _3387 = 1.0 - _1172;
                        float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                        float _3395 = _3394 * _3394;
                        float _3396 = _3395 * _3395;
                        float _3397 = _3376 + _3341;
                        float _3398 = _3377 + _3342;
                        float _3399 = _3378 + _3343;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3407 = dot(vec3(_1097, _1100, _1103), vec3(_3376, _3377, _3378));
                        float _4732 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3411 = dot(vec3(_1097, _1100, _1103), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                        float _4743 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                        float _3419 = _3354 * _3395;
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * _3344) + _3420;
                        float _4754 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3424 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3425 = 1.0 - _3395;
                        float _3435 = (0.5 / (((_3424 * ((_3410 * _3425) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3395) * _3410))) * _3424;
                        float _4765 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3446 = (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) / ((_3418 * _3418) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125))) * _3350;
                        _3203 = (_3365 * _3313.x) + _3271;
                        _3204 = (_3365 * _3313.y) + _3272;
                        _3205 = (_3365 * _3313.z) + _3273;
                        _3200 = (_3446 * _3330.x) + _3268;
                        _3201 = (_3446 * _3330.y) + _3269;
                        _3202 = (_3446 * _3330.z) + _3270;
                        if (_3275 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3275;
                        }
                    }
                    frontier_phi_61_pred = _3200;
                    frontier_phi_61_pred_1 = _3205;
                    frontier_phi_61_pred_2 = _3204;
                    frontier_phi_61_pred_3 = _3203;
                    frontier_phi_61_pred_4 = _3202;
                    frontier_phi_61_pred_5 = _3201;
                }
                _3000 = frontier_phi_61_pred;
                _3010 = frontier_phi_61_pred_1;
                _3008 = frontier_phi_61_pred_2;
                _3006 = frontier_phi_61_pred_3;
                _3004 = frontier_phi_61_pred_4;
                _3002 = frontier_phi_61_pred_5;
                uint _3151 = _3150 + 1u;
                if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3144 = _3000;
                    _3145 = _3002;
                    _3146 = _3004;
                    _3147 = _3006;
                    _3148 = _3008;
                    _3149 = _3010;
                    _3150 = _3151;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
        }
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.z;
        uint _3016 = (_3014 >> 8u) & 15u;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        if (((4294967295u << _3016) & _2898) == 0u)
        {
            _3112 = _2999;
            _3114 = _3001;
            _3116 = _3003;
            _3118 = _3005;
            _3120 = _3007;
            _3122 = _3009;
        }
        else
        {
            float _3137 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
            float _3138 = _3137 * _2852;
            float _3139 = _3137 * _2853;
            float _3140 = _3137 * _2854;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3016 < ((_3014 >> 12u) & 15u))
            {
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3251 = _2999;
                float _3252 = _3001;
                float _3253 = _3003;
                float _3254 = _3005;
                float _3255 = _3007;
                float _3256 = _3009;
                uint _3257 = _3016;
                uint _3266;
                bool _3267;
                for (;;)
                {
                    _3266 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                    _3267 = _3266 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3267)
                    {
                        frontier_phi_67_pred = _3254;
                        frontier_phi_67_pred_1 = _3255;
                        frontier_phi_67_pred_2 = _3256;
                        frontier_phi_67_pred_3 = _3253;
                        frontier_phi_67_pred_4 = _3252;
                        frontier_phi_67_pred_5 = _3251;
                    }
                    else
                    {
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3464 = _3251;
                        float _3465 = _3252;
                        float _3466 = _3253;
                        float _3467 = _3254;
                        float _3468 = _3255;
                        float _3469 = _3256;
                        uint _3470 = _3266;
                        uint _3471;
                        vec4 _3496;
                        float _3497;
                        vec4 _3512;
                        vec3 _3524;
                        vec4 _3539;
                        vec4 _3554;
                        float _3600;
                        bool _3601;
                        for (;;)
                        {
                            uint _3481 = ((_3257 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3470));
                            _3471 = (_3470 + 4294967295u) & _3470;
                            uint _3483 = _3481 * 40u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3497 = _3496.w;
                            uint _3499 = (_3481 * 40u) + 4u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3481 * 40u) + 8u;
                            _3524 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x));
                            uint _3526 = (_3481 * 40u) + 16u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3481 * 40u) + 20u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3481 * 40u) + 24u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3575 = (_3481 * 40u) + 28u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            _3600 = fma(_2854, _3588.z, fma(_2853, _3588.y, _3588.x * _2852)) + _3588.w;
                            _3601 = !((fma(_2854, _3569.z, fma(_2853, _3569.y, _3569.x * _2852)) + _3569.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3601)
                            {
                                float _3628 = _3496.x - _2852;
                                float _3629 = _3496.y - _2853;
                                float _3630 = _3496.z - _2854;
                                float _3631 = dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630));
                                float _3634 = inversesqrt(_3631);
                                float _3635 = _3634 * _3628;
                                float _3636 = _3634 * _3629;
                                float _3637 = _3634 * _3630;
                                float _3641 = 1.0 - (_3631 / (_3497 * _3497));
                                float _4776 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3646 = sqrt(_3631) * _3512.w;
                                float _3648 = 1.39999997615814208984375 / (_3646 + 1.39999997615814208984375);
                                float _3649 = _3648 * _3648;
                                float _3652 = ((1.0 - _3649) * dot(vec3(_3635, _3636, _3637), vec3(_1097, _1100, _1103))) + _3649;
                                float _3655 = _3646 * _3646;
                                float _3659 = (fma(_2854, _3539.z, fma(_2853, _3539.y, _3539.x * _2852)) + _3539.w) / _3600;
                                float _3660 = (fma(_2854, _3554.z, fma(_2853, _3554.y, _3554.x * _2852)) + _3554.w) / _3600;
                                float _3664 = 1.0 - dot(vec2(_3659, _3660), vec2(_3659, _3660));
                                float _4792 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3666 = _3665 * (((isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0))) * _3642) / ((_3655 * 0.699999988079071044921875) + 1.0));
                                float _3678 = exp2(log2(1.0 / ((_3655 * 3.5) + 5.0)) * 0.25);
                                float _3679 = 1.0 - _1172;
                                float _3686 = sqrt(1.0 - ((1.0 - (_3679 * _3679)) * (1.0 - (_3678 * _3678))));
                                float _3687 = _3686 * _3686;
                                float _3688 = _3687 * _3687;
                                float _3689 = _3635 - _3138;
                                float _3690 = _3636 - _3139;
                                float _3691 = _3637 - _3140;
                                float _3695 = inversesqrt(dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691)));
                                float _3699 = dot(vec3(_1097, _1100, _1103), vec3((-0.0) - _3138, (-0.0) - _3139, (-0.0) - _3140));
                                float _4803 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3703 = dot(vec3(_1097, _1100, _1103), vec3(_3695 * _3689, _3695 * _3690, _3695 * _3691));
                                float _4814 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3710 = ((_3706 * _3706) * (_3688 + (-1.0))) + 1.0;
                                float _3711 = _3648 * _3687;
                                float _3712 = _3711 * _3711;
                                float _3718 = ((1.0 - _3712) * dot(vec3(_1097, _1100, _1103), vec3(_3635, _3636, _3637))) + _3712;
                                float _4825 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3720 = 1.0 - _3687;
                                float _3730 = (0.5 / (((_3719 * ((_3702 * _3720) + _3687)) + 9.9999999392252902907785028219223e-09) + (((_3719 * _3720) + _3687) * _3702))) * _3719;
                                float _4836 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3740 = (_3665 * _3642) * (((_3688 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3710 * _3710) * ((_3655 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3740 * _3524.x;
                                frontier_phi_73_pred_1 = _3740 * _3524.y;
                                frontier_phi_73_pred_2 = _3666 * _3512.z;
                                frontier_phi_73_pred_3 = _3666 * _3512.y;
                                frontier_phi_73_pred_4 = _3666 * _3512.x;
                                frontier_phi_73_pred_5 = _3740 * _3524.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_73_pred;
                            _3745 = frontier_phi_73_pred_1;
                            _3749 = frontier_phi_73_pred_2;
                            _3748 = frontier_phi_73_pred_3;
                            _3747 = frontier_phi_73_pred_4;
                            _3746 = frontier_phi_73_pred_5;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            if (_3471 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3471;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3454;
                        frontier_phi_67_pred_1 = _3455;
                        frontier_phi_67_pred_2 = _3456;
                        frontier_phi_67_pred_3 = _3453;
                        frontier_phi_67_pred_4 = _3452;
                        frontier_phi_67_pred_5 = _3451;
                    }
                    _3119 = frontier_phi_67_pred;
                    _3121 = frontier_phi_67_pred_1;
                    _3123 = frontier_phi_67_pred_2;
                    _3117 = frontier_phi_67_pred_3;
                    _3115 = frontier_phi_67_pred_4;
                    _3113 = frontier_phi_67_pred_5;
                    uint _3258 = _3257 + 1u;
                    if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3251 = _3113;
                        _3252 = _3115;
                        _3253 = _3117;
                        _3254 = _3119;
                        _3255 = _3121;
                        _3256 = _3123;
                        _3257 = _3258;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3121;
                frontier_phi_55_56_ladder_1 = _3123;
                frontier_phi_55_56_ladder_2 = _3119;
                frontier_phi_55_56_ladder_3 = _3117;
                frontier_phi_55_56_ladder_4 = _3115;
                frontier_phi_55_56_ladder_5 = _3113;
            }
            else
            {
                frontier_phi_55_56_ladder = _3007;
                frontier_phi_55_56_ladder_1 = _3009;
                frontier_phi_55_56_ladder_2 = _3005;
                frontier_phi_55_56_ladder_3 = _3003;
                frontier_phi_55_56_ladder_4 = _3001;
                frontier_phi_55_56_ladder_5 = _2999;
            }
            _3112 = frontier_phi_55_56_ladder_5;
            _3114 = frontier_phi_55_56_ladder_4;
            _3116 = frontier_phi_55_56_ladder_3;
            _3118 = frontier_phi_55_56_ladder_2;
            _3120 = frontier_phi_55_56_ladder;
            _3122 = frontier_phi_55_56_ladder_1;
        }
        float _3127 = isnan(1.0) ? _1156 : (isnan(_1156) ? 1.0 : min(_1156, 1.0));
        _2911 = (_3127 * _3118) + _2344;
        _2913 = (_3127 * _3120) + _2346;
        _2915 = (_3127 * _3122) + _2348;
        _2917 = ((_3112 * _1140) * _3127) + _2692;
        _2919 = ((_3114 * _1142) * _3127) + _2694;
        _2921 = ((_3116 * _1143) * _3127) + _2696;
    }
    else
    {
        _2911 = _2344;
        _2913 = _2346;
        _2915 = _2348;
        _2917 = _2692;
        _2919 = _2694;
        _2921 = _2696;
    }
    float _4852 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _4863 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _4874 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    uint _2941 = _286 + 6u;
    float _2949 = _1078 / cbSceneParam._m0[86u].x;
    float _2950 = _1079 / cbSceneParam._m0[86u].y;
    vec4 _2964 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, (log2((isnan(cbSceneParam._m0[77u].w) ? _1013 : (isnan(_1013) ? cbSceneParam._m0[77u].w : min(_1013, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2966 = _2964.x;
    float _2967 = _2964.y;
    float _2968 = _2964.z;
    float _2969 = _2964.w;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_1013 > cbSceneParam._m0[78u].w)
    {
        float _3024 = isnan(_1013) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1013 : min(cbSceneParam._m0[80u].w, _1013));
        float _3025 = _3024 / _1013;
        float _3036 = _3025 * _1063;
        float _3037 = _1064 * _3025;
        float _3038 = (-0.0) - _3037;
        float _3040 = _3025 * _1065;
        float _3042 = (cbSceneParam._m0[77u].w * _3038) / _3024;
        float _3043 = _3042 + cbSceneParam._m0[79u].w;
        float _3044 = cbSceneParam._m0[79u].w - _3037;
        float _3050 = sqrt(((_3036 * _3036) + (_3037 * _3037)) + (_3040 * _3040));
        float _3053 = (1.0 - (cbSceneParam._m0[77u].w / _3024)) * _3050;
        float _3058 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3060 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3213;
        if (abs((_3038 - _3042) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3213 = ((((_3043 > 0.0) ? exp2(_3058 * _3043) : (2.0 - exp2(_3060 * _3043))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3053;
        }
        else
        {
            float _3173 = 1.0 / cbSceneParam._m0[80u].x;
            float _3174 = isnan(_3044) ? _3043 : (isnan(_3043) ? _3044 : max(_3043, _3044));
            float _3175 = isnan(_3044) ? _3043 : (isnan(_3043) ? _3044 : min(_3043, _3044));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            float _3185 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : min(_3175, 0.0));
            _3213 = ((abs(_3050 / _3038) * cbSceneParam._m0[80u].y) * ((((_3184 - _3185) * 2.0) - ((exp2(_3058 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0)))) - exp2(_3058 * (isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))))) * _3173)) - ((exp2(_3060 * _3184) - exp2(_3060 * _3185)) * _3173))) + (_3053 * cbSceneParam._m0[80u].z);
        }
        vec4 _3215 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, 1.0), 0.0);
        float _3224 = exp2((_3213 * (-1.44269502162933349609375)) * (1.0 - _3215.w));
        float _3225 = log2(_3224);
        float _3241 = log2(_2969);
        _3062 = (exp2(_3241 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].x)) * _3215.x) / cbSceneParam._m0[78u].x)) + _2966;
        _3064 = (exp2(_3241 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].y)) * _3215.y) / cbSceneParam._m0[78u].y)) + _2967;
        _3066 = (exp2(_3241 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].z)) * _3215.z) / cbSceneParam._m0[78u].z)) + _2968;
        _3068 = _3224 * _2969;
    }
    else
    {
        _3062 = _2966;
        _3064 = _2967;
        _3066 = _2968;
        _3068 = _2969;
    }
    float _3080 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3081 = _3080 == 3.0;
    float _3082 = log2(_3068);
    float _3089 = exp2(_3082 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2911 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1156))) + ((_2917 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1962)) * cbPerFrame._m0[3u].x));
    float _3090 = exp2(_3082 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2913 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1156))) + ((_2919 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1962)) * cbPerFrame._m0[3u].x));
    float _3091 = exp2(_3082 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2915 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1156))) + ((_2921 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1962)) * cbPerFrame._m0[3u].x));
    float _3100 = (_3080 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3100 * (_3081 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3062)));
    SV_Target.y = _3100 * (_3081 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3064)));
    SV_Target.z = _3100 * (_3081 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3066)));
    SV_Target.w = cbInstanceData._m0[_2941].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2941].w;
}


