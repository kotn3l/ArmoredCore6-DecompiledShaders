#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1085;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _353 = _351.x;
    float _365 = dot(vec4(_353, _351.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_353 - _365) * cbMtdParam._m0[23u].w) + _365) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3416 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _390 = (_383 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _391 = (_383 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _392 = (_383 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _383) + _426;
    float _438 = ((((_405.x - _424) * _383) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _383) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3427 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _474 = (((_462.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _438;
    float _475 = (((_462.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _503 = _501.x;
    float _521 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _250) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _251) + cbTextureTilingScale._m0[9u].w)).x - _503) * _383) + _503;
    float _525 = ((_487.x - _521) * cbMtdParam._m0[19u].z) + _521;
    float _529 = (cbMtdParam._m0[19u].w * (_462.z - _435)) + _435;
    float _531 = cbMtdParam._m0[22u].x + _462.w;
    float _534 = fma(_446, _217 * NORMAL.x, fma(_475, _224 * TANGENT.x, (_210 * _202) * _474));
    float _537 = fma(_446, _217 * NORMAL.y, fma(_475, _224 * TANGENT.y, (_210 * _203) * _474));
    float _540 = fma(_446, _217 * NORMAL.z, fma(_475, _224 * TANGENT.z, (_210 * _204) * _474));
    float _544 = inversesqrt(dot(vec3(_534, _537, _540), vec3(_534, _537, _540)));
    float _545 = _544 * _534;
    float _546 = _544 * _537;
    float _547 = _544 * _540;
    float _3438 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _548 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3460 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3471 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3482 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3493 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _553 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _567 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _618 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _608);
    float _619 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _608);
    float _620 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _608);
    float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
    float _625 = _618 * _624;
    float _626 = _619 * _624;
    float _627 = _620 * _624;
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _652 = fma(_547, cbSceneParam._m0[5u].z, fma(_546, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _545));
    float _655 = fma(_547, cbSceneParam._m0[6u].z, fma(_546, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _545));
    float _658 = fma(_547, cbSceneParam._m0[7u].z, fma(_546, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _545));
    uint _672 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _678 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_672].x;
    float _679 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_672].y;
    float _680 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_672].z;
    float _3504 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _684 = 1.0 - _553;
    float _685 = _681 * _684;
    float _686 = _682 * _684;
    float _687 = _683 * _684;
    float _692 = (_681 + (-0.039999999105930328369140625)) * _553;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _553;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _553;
    float _695 = _692 + 0.039999999105930328369140625;
    float _697 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    vec4 _707 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _711 = ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * TEXCOORD_5.w) * _707.x;
    float _712 = dot(vec3(_545, _546, _547), vec3(_625, _626, _627));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _545) - _625;
    float _720 = (_715 * _546) - _626;
    float _721 = (_715 * _547) - _627;
    float _725 = abs(dot(vec3(_625, _626, _627), vec3(_545, _546, _547)));
    float _3537 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_548);
    float _740 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _746 = (1.0 - _740) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _747 = _740 * _727;
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1084;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _809 = fma(_783, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775));
        float _813 = fma(_783, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775));
        float _817 = fma(_783, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775));
        float _842 = _775 + _545;
        float _843 = _779 + _546;
        float _844 = _783 + _547;
        float _854 = fma(_844, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842)) - _809;
        float _855 = fma(_844, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842)) - _813;
        float _856 = fma(_844, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842)) - _817;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_809 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_813 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[34u].z) + ((((((_817 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _912 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_878.x + (-0.5));
        float _914 = _912 * (_878.y + (-0.5));
        float _915 = _912 * (_878.z + (-0.5));
        float _922 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_885.x + (-0.5));
        float _924 = _922 * (_885.y + (-0.5));
        float _925 = _922 * (_885.z + (-0.5));
        float _932 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_892.x + (-0.5));
        float _934 = _932 * (_892.y + (-0.5));
        float _935 = _932 * (_892.z + (-0.5));
        float _942 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_899.x + (-0.5));
        float _944 = _942 * (_899.y + (-0.5));
        float _945 = _942 * (_899.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _966 = (dot(vec3(_545, _546, _547), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _976 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3585 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_978 + 1.0))) + _983) * _946;
        float _993 = _914 * 0.5;
        float _994 = _924 * 0.5;
        float _995 = _934 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_545, _546, _547), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3618 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1020 + 1.0))) + _1025) * _947;
        float _1035 = _915 * 0.5;
        float _1036 = _925 * 0.5;
        float _1037 = _935 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_545, _546, _547), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3651 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1062 + 1.0))) + _1067) * _948;
        _1084 = _915;
        _1086 = _914;
        _1087 = _913;
        _1088 = _925;
        _1089 = _924;
        _1090 = _923;
        _1091 = _935;
        _1092 = _934;
        _1093 = _933;
        _1094 = _948;
        _1095 = _947;
        _1096 = _946;
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
    }
    else
    {
        _1084 = _1085;
        _1086 = _1085;
        _1087 = _1085;
        _1088 = _1085;
        _1089 = _1085;
        _1090 = _1085;
        _1091 = _1085;
        _1092 = _1085;
        _1093 = _1085;
        _1094 = _1085;
        _1095 = _1085;
        _1096 = _1085;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1124 = fma(_783, cbModelParam._m0[30u].z, fma(_779, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775));
        float _1128 = fma(_783, cbModelParam._m0[31u].z, fma(_779, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775));
        float _1132 = fma(_783, cbModelParam._m0[32u].z, fma(_779, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775));
        float _1155 = _775 + _545;
        float _1156 = _779 + _546;
        float _1157 = _783 + _547;
        float _1167 = fma(_1157, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155)) - _1124;
        float _1168 = fma(_1157, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155)) - _1128;
        float _1169 = fma(_1157, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155)) - _1132;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1124 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1128 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[35u].z) + ((((((_1132 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1223 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1190.x + (-0.5));
        float _1225 = _1223 * (_1190.y + (-0.5));
        float _1226 = _1223 * (_1190.z + (-0.5));
        float _1233 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1197.x + (-0.5));
        float _1235 = _1233 * (_1197.y + (-0.5));
        float _1236 = _1233 * (_1197.z + (-0.5));
        float _1243 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1204.x + (-0.5));
        float _1245 = _1243 * (_1204.y + (-0.5));
        float _1246 = _1243 * (_1204.z + (-0.5));
        float _1253 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1211.x + (-0.5));
        float _1255 = _1253 * (_1211.y + (-0.5));
        float _1256 = _1253 * (_1211.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_545, _546, _547), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3714 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1287 + 1.0))) + _1292) * _1257;
        float _1302 = _1225 * 0.5;
        float _1303 = _1235 * 0.5;
        float _1304 = _1245 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_545, _546, _547), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3747 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1329 + 1.0))) + _1334) * _1258;
        float _1344 = _1226 * 0.5;
        float _1345 = _1236 * 0.5;
        float _1346 = _1246 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_545, _546, _547), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3780 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1371 + 1.0))) + _1376) * _1259;
        _1393 = _1226;
        _1394 = _1225;
        _1395 = _1224;
        _1396 = _1236;
        _1397 = _1235;
        _1398 = _1234;
        _1399 = _1246;
        _1400 = _1245;
        _1401 = _1244;
        _1402 = _1259;
        _1403 = _1258;
        _1404 = _1257;
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1085;
        _1394 = _1085;
        _1395 = _1085;
        _1396 = _1085;
        _1397 = _1085;
        _1398 = _1085;
        _1399 = _1085;
        _1400 = _1085;
        _1401 = _1085;
        _1402 = _1085;
        _1403 = _1085;
        _1404 = _1085;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1097)) + _1097;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1098)) + _1098;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1099)) + _1099;
    float _1440 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1443 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1446 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1417));
    float _1461 = _719 * 0.5;
    float _1462 = _720 * 0.5;
    float _1463 = _721 * 0.5;
    float _1464 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1467 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1470 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1504;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1477 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1084, _1088, _1091, _1094));
        float _1481 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1485 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1492 = dot(vec4(cbModelParam._m0[39u]), vec4(_1461, _1462, _1463, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1515;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1506 = dot(vec4(cbModelParam._m0[40u]), vec4(_1461, _1462, _1463, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1519 = (_1515 * cbModelParam._m0[1u].x) + (_1504 * (1.0 - cbModelParam._m0[1u].x));
    float _1529 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _548);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1529 : min(cbModelParam._m0[25u].z, _1529));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_783, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_783, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_783, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1593 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1596 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1624 = frontier_phi_14_12_ladder;
        }
        float _1828;
        if (_1593 > 0.0)
        {
            _1828 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1828 = frontier_phi_23_19_ladder;
        }
        float _2082;
        if (_1596 > 0.0)
        {
            _2082 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2082 = frontier_phi_35_30_ladder;
        }
        float _2084 = isnan(_1828) ? _1624 : (isnan(_1624) ? _1828 : min(_1624, _1828));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1590) + _1579;
        float _2090 = (_2085 * _1593) + _1583;
        float _2091 = (_2085 * _1596) + _1587;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2219 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1530);
            frontier_phi_13_35_ladder = _2219.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2219.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2219.x * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_13_35_ladder_2;
        _1614 = frontier_phi_13_35_ladder_1;
        _1616 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1530);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _548);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_783, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_783, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_783, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1690 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1693 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1833;
        if (_1687 > 0.0)
        {
            _1833 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1833 = frontier_phi_25_21_ladder;
        }
        float _2109;
        if (_1690 > 0.0)
        {
            _2109 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2109 = frontier_phi_37_32_ladder;
        }
        float _2322;
        if (_1693 > 0.0)
        {
            _2322 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2322 = frontier_phi_46_43_ladder;
        }
        float _2324 = isnan(_2109) ? _1833 : (isnan(_1833) ? _2109 : min(_1833, _2109));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1687) + _1676;
        float _2330 = (_2325 * _1690) + _1680;
        float _2331 = (_2325 * _1693) + _1684;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2331, cbModelParam._m0[17u].z, fma(_2330, cbModelParam._m0[17u].y, _2329 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2331, cbModelParam._m0[18u].z, fma(_2330, cbModelParam._m0[18u].y, _2329 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2331, cbModelParam._m0[19u].z, fma(_2330, cbModelParam._m0[19u].y, _2329 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_22_46_ladder = _2530.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2530.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2530.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_22_46_ladder_2;
        _1714 = frontier_phi_22_46_ladder_1;
        _1716 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1621);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1729 = (((_746 * _695) + _747) * _711) * ((cbModelParam._m0[1u].w * (_1712 - _1612)) + _1612);
    float _1731 = (((_746 * _697) + _747) * _711) * ((cbModelParam._m0[1u].w * (_1714 - _1614)) + _1614);
    float _1733 = (((_746 * _698) + _747) * _711) * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1736 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    uvec4 _1752 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1754 = _1752.x * 14u;
    uint _1755 = _1754 + 13u;
    float _1762 = _711 + (-1.0);
    float _1767 = (cbLight._m0[_1755].x * _1762) + 1.0;
    float _1768 = (cbLight._m0[_1755].y * _1762) + 1.0;
    float _1769 = (cbLight._m0[_1755].z * _1762) + 1.0;
    float _1770 = (cbLight._m0[_1755].w * _1762) + 1.0;
    uint _1771 = _1754 + 5u;
    float _1777 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1781 = _1754 + 4u;
    float _1787 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1791 = _1754 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_545, _546, _547));
    float _1805 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_545, _546, _547));
    float _3916 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _3927 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1810 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1812 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1819 = ((cbLight._m0[_1771].x * _1777) * _1812) + ((cbLight._m0[_1781].x * _1787) * _1810);
    float _1820 = ((_1777 * cbLight._m0[_1771].y) * _1812) + ((_1787 * cbLight._m0[_1781].y) * _1810);
    float _1821 = ((_1777 * cbLight._m0[_1771].z) * _1812) + ((_1787 * cbLight._m0[_1781].z) * _1810);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1754 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1819;
        _1840 = _1820;
        _1842 = _1821;
    }
    else
    {
        uint _1846 = _1754 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1754 + 2u].xyz), vec3(_545, _546, _547)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3938 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1865 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1821;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2053 = _1754 + 7u;
        float _2069 = (dot(vec3(cbLight._m0[_1754 + 3u].xyz), vec3(_545, _546, _547)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _3954 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2072 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1883 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _1838;
        _1885 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _1840;
        _1887 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _1842;
    }
    uint _1890 = _1754 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _548) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1754].x + _625;
    float _1906 = cbLight._m0[_1754].y + _626;
    float _1907 = cbLight._m0[_1754].z + _627;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_1754].xyz));
    float _3970 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _1919 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1920 = dot(vec3(_545, _546, _547), vec3(_1912, _1913, _1914));
    float _3992 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1912, _1913, _1914));
    float _4003 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
    float _1941 = 0.959999978542327880859375 - _692;
    float _1943 = 0.959999978542327880859375 - _693;
    float _1944 = 0.959999978542327880859375 - _694;
    float _1951 = 1.0 - _1904;
    float _1962 = (0.5 / (((_1919 * ((_1918 * _1951) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1951) + _1904) * _1918))) * _1918;
    float _4014 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1975 = _1754 + 9u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _548) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1791].x + _625;
    float _1989 = cbLight._m0[_1791].y + _626;
    float _1990 = cbLight._m0[_1791].z + _627;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_1791].xyz));
    float _4025 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _2002 = dot(vec3(_545, _546, _547), vec3(_1995, _1996, _1997));
    float _4036 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1995, _1996, _1997));
    float _4047 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1987 * _1987;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2021 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
    float _2028 = 1.0 - _1987;
    float _2038 = (0.5 / (((_1919 * ((_2001 * _2028) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2028) + _1987) * _2001))) * _2001;
    float _4058 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    float _2050 = (((((_2021 * _1941) + _695) * cbLight._m0[_1975].x) * _2040) * _1777) + (((((_1940 * _1941) + _695) * cbLight._m0[_1890].x) * _1964) * _1787);
    float _2051 = (((((_2021 * _1943) + _697) * cbLight._m0[_1975].y) * _2040) * _1777) + (((((_1940 * _1943) + _697) * cbLight._m0[_1890].y) * _1964) * _1787);
    float _2052 = (((((_2021 * _1944) + _698) * cbLight._m0[_1975].z) * _2040) * _1777) + (((((_1940 * _1944) + _698) * cbLight._m0[_1890].z) * _1964) * _1787);
    float _2114;
    float _2116;
    float _2118;
    if (_1827)
    {
        _2114 = _2050;
        _2116 = _2051;
        _2118 = _2052;
    }
    else
    {
        uint _2120 = _1754 + 2u;
        uint _2124 = _1754 + 10u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _548) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _625;
        float _2141 = cbLight._m0[_2120].y + _626;
        float _2142 = cbLight._m0[_2120].z + _627;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_2120].xyz));
        float _4069 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2154 = dot(vec3(_545, _546, _547), vec3(_2147, _2148, _2149));
        float _4080 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4091 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
        float _2180 = 1.0 - _2139;
        float _2190 = (0.5 / (((_1919 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2180) + _2139) * _2153))) * _2153;
        float _4102 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2114 = (((((_2173 * _1941) + _695) * cbLight._m0[_2124].x) * _2192) * _2193) + _2050;
        _2116 = (((((_2173 * _1943) + _697) * cbLight._m0[_2124].y) * _2192) * _2193) + _2051;
        _2118 = (((((_2173 * _1944) + _698) * cbLight._m0[_2124].z) * _2192) * _2193) + _2052;
    }
    float _2228;
    float _2230;
    float _2232;
    if (_1845)
    {
        _2228 = _2114;
        _2230 = _2116;
        _2232 = _2118;
    }
    else
    {
        uint _2239 = _1754 + 3u;
        uint _2243 = _1754 + 11u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _548) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _625;
        float _2260 = cbLight._m0[_2239].y + _626;
        float _2261 = cbLight._m0[_2239].z + _627;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_2239].xyz));
        float _4118 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2273 = dot(vec3(_545, _546, _547), vec3(_2266, _2267, _2268));
        float _4129 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4140 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
        float _2299 = 1.0 - _2258;
        float _2309 = (0.5 / (((_1919 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2299) + _2258) * _2272))) * _2272;
        float _4151 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2228 = (((((_2292 * _1941) + _695) * cbLight._m0[_2243].x) * _2311) * _2312) + _2114;
        _2230 = (((((_2292 * _1943) + _697) * cbLight._m0[_2243].y) * _2311) * _2312) + _2116;
        _2232 = (((((_2292 * _1944) + _698) * cbLight._m0[_2243].z) * _2311) * _2312) + _2118;
    }
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_1752.y == 0u)
    {
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2387;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2387;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2387;
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.x;
        uint _2414 = uint((float(_2402.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2403))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2403)));
        float _2424 = (log2(_2390 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2425 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        uint _2428 = uint(isnan(14.0) ? _2425 : (isnan(_2425) ? 14.0 : min(_2425, 14.0)));
        uvec4 _2433 = texelFetch(g_lightClusterGridBuffer, int(((_2428 << 2u) + (_2414 << 6u)) >> 2u));
        uint _2434 = _2433.x;
        uint _2435 = _2402.z;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((((1u << ((_2435 >> 4u) & 15u)) + 4294967295u) & _2434) == 0u) || ((_2435 & 240u) == 0u))
        {
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
        }
        else
        {
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            uint _2686 = 0u;
            uint _2695;
            bool _2696;
            for (;;)
            {
                _2695 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                _2696 = _2695 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2696)
                {
                    frontier_phi_61_pred = _2680;
                    frontier_phi_61_pred_1 = _2685;
                    frontier_phi_61_pred_2 = _2684;
                    frontier_phi_61_pred_3 = _2683;
                    frontier_phi_61_pred_4 = _2682;
                    frontier_phi_61_pred_5 = _2681;
                }
                else
                {
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    uint _2810;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2695;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    for (;;)
                    {
                        uint _2814 = uint(findLSB(_2810)) + (_2686 << 5u);
                        uint _2811 = (_2810 + 4294967295u) & _2810;
                        uint _2816 = _2814 * 48u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2836 = (_2814 * 48u) + 4u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2855 = (_2814 * 48u) + 8u;
                        vec3 _2866 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x));
                        float _2870 = _2830.x - _2388;
                        float _2871 = _2830.y - _2389;
                        float _2872 = _2830.z - _2390;
                        float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                        float _2876 = inversesqrt(_2873);
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2880 = dot(vec3(_652, _655, _658), vec3(_2877, _2878, _2879));
                        float _2885 = 1.0 - (_2873 * _2830.w);
                        float _4177 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2887 = sqrt(_2873) * _2849.w;
                        float _2890 = 1.39999997615814208984375 / (_2887 + 1.39999997615814208984375);
                        float _2891 = _2890 * _2890;
                        float _2894 = ((1.0 - _2891) * _2880) + _2891;
                        float _2897 = _2887 * _2887;
                        float _2901 = ((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2886) / ((_2897 * 0.699999988079071044921875) + 1.0);
                        float _2905 = (-0.0) - _2388;
                        float _2906 = (-0.0) - _2389;
                        float _2907 = (-0.0) - _2390;
                        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2922 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                        float _2923 = 1.0 - _727;
                        float _2930 = sqrt(1.0 - ((1.0 - (_2923 * _2923)) * (1.0 - (_2922 * _2922))));
                        float _2931 = _2930 * _2930;
                        float _2932 = _2931 * _2931;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2943 = dot(vec3(_652, _655, _658), vec3(_2912, _2913, _2914));
                        float _4193 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2947 = dot(vec3(_652, _655, _658), vec3(_2939 * _2933, _2939 * _2934, _2939 * _2935));
                        float _4204 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2954 = ((_2950 * _2950) * (_2932 + (-1.0))) + 1.0;
                        float _2955 = _2890 * _2931;
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2880) + _2956;
                        float _4215 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2961 = 1.0 - _2931;
                        float _2971 = (0.5 / (((_2960 * ((_2946 * _2961) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2960 * _2961) + _2931) * _2946))) * _2960;
                        float _4226 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2982 = (((_2932 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_2954 * _2954) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125))) * _2886;
                        _2739 = (_2901 * _2849.x) + _2807;
                        _2740 = (_2901 * _2849.y) + _2808;
                        _2741 = (_2901 * _2849.z) + _2809;
                        _2736 = (_2982 * _2866.x) + _2804;
                        _2737 = (_2982 * _2866.y) + _2805;
                        _2738 = (_2982 * _2866.z) + _2806;
                        if (_2811 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2811;
                        }
                    }
                    frontier_phi_61_pred = _2736;
                    frontier_phi_61_pred_1 = _2741;
                    frontier_phi_61_pred_2 = _2740;
                    frontier_phi_61_pred_3 = _2739;
                    frontier_phi_61_pred_4 = _2738;
                    frontier_phi_61_pred_5 = _2737;
                }
                _2536 = frontier_phi_61_pred;
                _2546 = frontier_phi_61_pred_1;
                _2544 = frontier_phi_61_pred_2;
                _2542 = frontier_phi_61_pred_3;
                _2540 = frontier_phi_61_pred_4;
                _2538 = frontier_phi_61_pred_5;
                uint _2687 = _2686 + 1u;
                if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2680 = _2536;
                    _2681 = _2538;
                    _2682 = _2540;
                    _2683 = _2542;
                    _2684 = _2544;
                    _2685 = _2546;
                    _2686 = _2687;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
        }
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.z;
        uint _2552 = (_2550 >> 8u) & 15u;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        if (((4294967295u << _2552) & _2434) == 0u)
        {
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
            _2654 = _2541;
            _2656 = _2543;
            _2658 = _2545;
        }
        else
        {
            float _2673 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
            float _2674 = _2673 * _2388;
            float _2675 = _2673 * _2389;
            float _2676 = _2673 * _2390;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2552 < ((_2550 >> 12u) & 15u))
            {
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2787 = _2535;
                float _2788 = _2537;
                float _2789 = _2539;
                float _2790 = _2541;
                float _2791 = _2543;
                float _2792 = _2545;
                uint _2793 = _2552;
                uint _2802;
                bool _2803;
                for (;;)
                {
                    _2802 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                    _2803 = _2802 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2803)
                    {
                        frontier_phi_67_pred = _2790;
                        frontier_phi_67_pred_1 = _2791;
                        frontier_phi_67_pred_2 = _2792;
                        frontier_phi_67_pred_3 = _2789;
                        frontier_phi_67_pred_4 = _2788;
                        frontier_phi_67_pred_5 = _2787;
                    }
                    else
                    {
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        uint _3006 = _2802;
                        uint _3007;
                        vec4 _3032;
                        float _3033;
                        vec4 _3048;
                        vec3 _3060;
                        vec4 _3075;
                        vec4 _3091;
                        float _3138;
                        bool _3139;
                        for (;;)
                        {
                            uint _3017 = ((_2793 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3006));
                            _3007 = (_3006 + 4294967295u) & _3006;
                            uint _3019 = _3017 * 40u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3033 = _3032.w;
                            uint _3035 = (_3017 * 40u) + 4u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_3017 * 40u) + 8u;
                            _3060 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x));
                            uint _3062 = (_3017 * 40u) + 16u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3078 = (_3017 * 40u) + 20u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3094 = (_3017 * 40u) + 24u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3113 = (_3017 * 40u) + 28u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            _3138 = fma(_2390, _3126.z, fma(_2389, _3126.y, _3126.x * _2388)) + _3126.w;
                            _3139 = !((fma(_2390, _3107.z, fma(_2389, _3107.y, _3107.x * _2388)) + _3107.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3139)
                            {
                                float _3166 = _3032.x - _2388;
                                float _3167 = _3032.y - _2389;
                                float _3168 = _3032.z - _2390;
                                float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                                float _3172 = inversesqrt(_3169);
                                float _3173 = _3172 * _3166;
                                float _3174 = _3172 * _3167;
                                float _3175 = _3172 * _3168;
                                float _3179 = 1.0 - (_3169 / (_3033 * _3033));
                                float _4237 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3184 = sqrt(_3169) * _3048.w;
                                float _3186 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                                float _3187 = _3186 * _3186;
                                float _3190 = ((1.0 - _3187) * dot(vec3(_3173, _3174, _3175), vec3(_652, _655, _658))) + _3187;
                                float _3193 = _3184 * _3184;
                                float _3197 = (fma(_2390, _3075.z, fma(_2389, _3075.y, _3075.x * _2388)) + _3075.w) / _3138;
                                float _3198 = (fma(_2390, _3091.z, fma(_2389, _3091.y, _3091.x * _2388)) + _3091.w) / _3138;
                                float _3202 = 1.0 - dot(vec2(_3197, _3198), vec2(_3197, _3198));
                                float _4253 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3204 = _3203 * (((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3180) / ((_3193 * 0.699999988079071044921875) + 1.0));
                                float _3216 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                                float _3217 = 1.0 - _727;
                                float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                                float _3225 = _3224 * _3224;
                                float _3226 = _3225 * _3225;
                                float _3227 = _3173 - _2674;
                                float _3228 = _3174 - _2675;
                                float _3229 = _3175 - _2676;
                                float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                                float _3237 = dot(vec3(_652, _655, _658), vec3((-0.0) - _2674, (-0.0) - _2675, (-0.0) - _2676));
                                float _4264 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3241 = dot(vec3(_652, _655, _658), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                                float _4275 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                                float _3249 = _3186 * _3225;
                                float _3250 = _3249 * _3249;
                                float _3256 = ((1.0 - _3250) * dot(vec3(_652, _655, _658), vec3(_3173, _3174, _3175))) + _3250;
                                float _4286 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3258 = 1.0 - _3225;
                                float _3268 = (0.5 / (((_3257 * ((_3240 * _3258) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3225) * _3240))) * _3257;
                                float _4297 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3278 = (_3203 * _3180) * (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) / ((_3248 * _3248) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3278 * _3060.x;
                                frontier_phi_73_pred_1 = _3278 * _3060.y;
                                frontier_phi_73_pred_2 = _3204 * _3048.z;
                                frontier_phi_73_pred_3 = _3204 * _3048.y;
                                frontier_phi_73_pred_4 = _3204 * _3048.x;
                                frontier_phi_73_pred_5 = _3278 * _3060.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3282 = frontier_phi_73_pred;
                            _3283 = frontier_phi_73_pred_1;
                            _3287 = frontier_phi_73_pred_2;
                            _3286 = frontier_phi_73_pred_3;
                            _3285 = frontier_phi_73_pred_4;
                            _3284 = frontier_phi_73_pred_5;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            _2992 = _3287 + _3005;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            if (_3007 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _3007;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2990;
                        frontier_phi_67_pred_1 = _2991;
                        frontier_phi_67_pred_2 = _2992;
                        frontier_phi_67_pred_3 = _2989;
                        frontier_phi_67_pred_4 = _2988;
                        frontier_phi_67_pred_5 = _2987;
                    }
                    _2655 = frontier_phi_67_pred;
                    _2657 = frontier_phi_67_pred_1;
                    _2659 = frontier_phi_67_pred_2;
                    _2653 = frontier_phi_67_pred_3;
                    _2651 = frontier_phi_67_pred_4;
                    _2649 = frontier_phi_67_pred_5;
                    uint _2794 = _2793 + 1u;
                    if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2787 = _2649;
                        _2788 = _2651;
                        _2789 = _2653;
                        _2790 = _2655;
                        _2791 = _2657;
                        _2792 = _2659;
                        _2793 = _2794;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2657;
                frontier_phi_55_56_ladder_1 = _2659;
                frontier_phi_55_56_ladder_2 = _2655;
                frontier_phi_55_56_ladder_3 = _2653;
                frontier_phi_55_56_ladder_4 = _2651;
                frontier_phi_55_56_ladder_5 = _2649;
            }
            else
            {
                frontier_phi_55_56_ladder = _2543;
                frontier_phi_55_56_ladder_1 = _2545;
                frontier_phi_55_56_ladder_2 = _2541;
                frontier_phi_55_56_ladder_3 = _2539;
                frontier_phi_55_56_ladder_4 = _2537;
                frontier_phi_55_56_ladder_5 = _2535;
            }
            _2648 = frontier_phi_55_56_ladder_5;
            _2650 = frontier_phi_55_56_ladder_4;
            _2652 = frontier_phi_55_56_ladder_3;
            _2654 = frontier_phi_55_56_ladder_2;
            _2656 = frontier_phi_55_56_ladder;
            _2658 = frontier_phi_55_56_ladder_1;
        }
        float _2663 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2447 = (_2663 * _2654) + _1883;
        _2449 = (_2663 * _2656) + _1885;
        _2451 = (_2663 * _2658) + _1887;
        _2453 = ((_2648 * _695) * _2663) + _2228;
        _2455 = ((_2650 * _697) * _2663) + _2230;
        _2457 = ((_2652 * _698) * _2663) + _2232;
    }
    else
    {
        _2447 = _1883;
        _2449 = _1885;
        _2451 = _1887;
        _2453 = _2228;
        _2455 = _2230;
        _2457 = _2232;
    }
    float _4313 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4324 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4335 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    uint _2477 = _230 + 6u;
    float _2485 = _633 / cbSceneParam._m0[86u].x;
    float _2486 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2500 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, (log2((isnan(cbSceneParam._m0[77u].w) ? _567 : (isnan(_567) ? cbSceneParam._m0[77u].w : min(_567, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2502 = _2500.x;
    float _2503 = _2500.y;
    float _2504 = _2500.z;
    float _2505 = _2500.w;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_567 > cbSceneParam._m0[78u].w)
    {
        float _2560 = isnan(_567) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _567 : min(cbSceneParam._m0[80u].w, _567));
        float _2561 = _2560 / _567;
        float _2572 = _2561 * _618;
        float _2573 = _619 * _2561;
        float _2574 = (-0.0) - _2573;
        float _2576 = _2561 * _620;
        float _2578 = (cbSceneParam._m0[77u].w * _2574) / _2560;
        float _2579 = _2578 + cbSceneParam._m0[79u].w;
        float _2580 = cbSceneParam._m0[79u].w - _2573;
        float _2586 = sqrt(((_2572 * _2572) + (_2573 * _2573)) + (_2576 * _2576));
        float _2589 = (1.0 - (cbSceneParam._m0[77u].w / _2560)) * _2586;
        float _2594 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2596 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2749;
        if (abs((_2574 - _2578) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2749 = ((((_2579 > 0.0) ? exp2(_2594 * _2579) : (2.0 - exp2(_2596 * _2579))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2589;
        }
        else
        {
            float _2709 = 1.0 / cbSceneParam._m0[80u].x;
            float _2710 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : max(_2579, _2580));
            float _2711 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : min(_2579, _2580));
            float _2720 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : min(_2710, 0.0));
            float _2721 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : min(_2711, 0.0));
            _2749 = ((abs(_2586 / _2574) * cbSceneParam._m0[80u].y) * ((((_2720 - _2721) * 2.0) - ((exp2(_2594 * (isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0)))) - exp2(_2594 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0))))) * _2709)) - ((exp2(_2596 * _2720) - exp2(_2596 * _2721)) * _2709))) + (_2589 * cbSceneParam._m0[80u].z);
        }
        vec4 _2751 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, 1.0), 0.0);
        float _2760 = exp2((_2749 * (-1.44269502162933349609375)) * (1.0 - _2751.w));
        float _2761 = log2(_2760);
        float _2777 = log2(_2505);
        _2598 = (exp2(_2777 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].x)) * _2751.x) / cbSceneParam._m0[78u].x)) + _2502;
        _2600 = (exp2(_2777 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].y)) * _2751.y) / cbSceneParam._m0[78u].y)) + _2503;
        _2602 = (exp2(_2777 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].z)) * _2751.z) / cbSceneParam._m0[78u].z)) + _2504;
        _2604 = _2760 * _2505;
    }
    else
    {
        _2598 = _2502;
        _2600 = _2503;
        _2602 = _2504;
        _2604 = _2505;
    }
    float _2616 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2617 = _2616 == 3.0;
    float _2618 = log2(_2604);
    float _2625 = exp2(_2618 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2447 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _711))) + ((_2453 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2626 = exp2(_2618 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2449 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _711))) + ((_2455 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2627 = exp2(_2618 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2451 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _711))) + ((_2457 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2636 = (_2616 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2636 * (_2617 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.y = _2636 * (_2617 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.z = _2636 * (_2617 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.w = cbInstanceData._m0[_2477].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2477].w;
}


