#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1607;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3930 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3941 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3952 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3963 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _489 = (_482 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _490 = (_482 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _491 = (_482 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3974 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _565 = (_347.x * cbMtdParam._m0[9u].x) * ((_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489);
    float _566 = (_347.y * cbMtdParam._m0[9u].y) * ((_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490);
    float _567 = (_347.z * cbMtdParam._m0[9u].z) * ((_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491);
    float _571 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _565;
    float _574 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _566;
    float _577 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _567;
    float _585 = (((_565 - _571) * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) + _571) * 4.55000019073486328125;
    float _587 = (((_566 - _574) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _574) * 4.55000019073486328125;
    float _589 = (((_567 - _577) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) + _577) * 4.55000019073486328125;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _671 = _669.x;
    float _672 = _669.y;
    float _673 = _669.z;
    float _680 = ((_652.x - _671) * _482) + _671;
    float _681 = ((_652.y - _672) * _482) + _672;
    float _682 = ((_652.z - _673) * _482) + _673;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _707 = ((_694.z - _682) * _555) + _682;
    float _710 = ((((_694.x - _680) * _555) + _680) * 2.0) + (-1.0);
    float _711 = ((((_694.y - _681) * _555) + _681) * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3985 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _717 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _747 = (_710 + ((((_627.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_735.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _748 = (_711 + ((((_627.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_735.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _751 = fma(_717, _260, fma(_748, _267, _747 * _253));
    float _754 = fma(_717, _261, fma(_748, _268, _747 * _254));
    float _757 = fma(_717, _262, fma(_748, _269, _747 * _255));
    float _761 = inversesqrt(dot(vec3(_751, _754, _757), vec3(_751, _754, _757)));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _790 = _788.x;
    float _791 = 1.0 - _790;
    float _800 = (cbMtdParam._m0[19u].x + dot(vec4(_761 * _751, _761 * _754, _761 * _757, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_790 - _791) * cbMtdParam._m0[24u].z) + _791) * cbMtdParam._m0[21u].z);
    float _3996 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _803 = (-0.0) - cbMtdParam._m0[24u].x;
    float _805 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _805 : (isnan(_805) ? 1.0 : min(_805, 1.0));
    float _813 = _801 - ((_801 * TEXCOORD_8.x) * _806);
    float _814 = _801 - ((_801 * TEXCOORD_8.y) * _806);
    float _815 = _801 - ((_801 * TEXCOORD_8.z) * _806);
    float _822 = (_813 * ((_608.x * cbMtdParam._m0[18u].x) - _585)) + _585;
    float _823 = (_814 * ((_608.y * cbMtdParam._m0[18u].y) - _587)) + _587;
    float _824 = (_815 * ((_608.z * cbMtdParam._m0[18u].z) - _589)) + _589;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _838 = _836.x;
    float _839 = 1.0 - _838;
    float _865 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_838 - _839) * cbMtdParam._m0[24u].w) + _839) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4017 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _866 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _874 = ((((cbMtdParam._m0[10u].x - _822) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _866) + _822;
    float _875 = ((((cbMtdParam._m0[10u].y - _823) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _866) + _823;
    float _876 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _824)) * _866) + _824;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _904 = _902.x;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _904) * _482) + _904;
    float _938 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _921) * _555) + _921;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _938) * cbMtdParam._m0[19u].z) + _938;
    float _944 = _942 - (_942 * _813);
    float _946 = _944 - (_944 * _866);
    float _951 = (((_627.z - _707) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _707;
    float _955 = ((_735.z - _951) * cbMtdParam._m0[19u].w) + _951;
    vec4 _969 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _976 = (_969.x * 2.0) + (-1.0);
    float _977 = (_969.y * 2.0) + (-1.0);
    float _978 = dot(vec2(_976, _977), vec2(_976, _977));
    float _4028 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _986 = ((_969.z - _955) * _813) + _955;
    float _989 = ((cbMtdParam._m0[23u].x - _986) * _866) + _986;
    vec4 _1012 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1018 = (_1012.x * 2.0) + (-1.0);
    float _1019 = (_1012.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4039 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1035 = ((sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) - _717) * _815) + _717;
    float _1038 = (((_976 - _747) * _813) + _747) + (cbMtdParam._m0[21u].x * _747);
    float _1039 = (((_977 - _748) * _814) + _748) + (cbMtdParam._m0[21u].x * _748);
    float _1050 = (((_1018 - _1038) + (_1038 * cbMtdParam._m0[22u].z)) * _866) + _1038;
    float _1051 = (((_1019 - _1039) + (_1039 * cbMtdParam._m0[22u].z)) * _866) + _1039;
    float _1052 = (_866 * (sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) - _1035)) + _1035;
    float _1054 = cbMtdParam._m0[22u].x + _735.w;
    float _1057 = fma(_1052, _260, fma(_1051, _267, _1050 * _253));
    float _1060 = fma(_1052, _261, fma(_1051, _268, _1050 * _254));
    float _1063 = fma(_1052, _262, fma(_1051, _269, _1050 * _255));
    float _1067 = inversesqrt(dot(vec3(_1057, _1060, _1063), vec3(_1057, _1060, _1063)));
    float _1068 = _1067 * _1057;
    float _1069 = _1067 * _1060;
    float _1070 = _1067 * _1063;
    float _4050 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1071 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4072 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4083 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4094 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4105 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _1076 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1090 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1140 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1130);
    float _1141 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1130);
    float _1142 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1130);
    float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
    float _1147 = _1140 * _1146;
    float _1148 = _1141 * _1146;
    float _1149 = _1142 * _1146;
    float _1155 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1156 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1174 = fma(_1070, cbSceneParam._m0[5u].z, fma(_1069, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1068));
    float _1177 = fma(_1070, cbSceneParam._m0[6u].z, fma(_1069, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1068));
    float _1180 = fma(_1070, cbSceneParam._m0[7u].z, fma(_1069, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1068));
    uint _1194 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1200 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_1194].x;
    float _1201 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_1194].y;
    float _1202 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1194].z;
    float _4116 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1203 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1204 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1206 = 1.0 - _1076;
    float _1207 = _1203 * _1206;
    float _1208 = _1204 * _1206;
    float _1209 = _1205 * _1206;
    float _1214 = (_1203 + (-0.039999999105930328369140625)) * _1076;
    float _1215 = (_1204 + (-0.039999999105930328369140625)) * _1076;
    float _1216 = (_1205 + (-0.039999999105930328369140625)) * _1076;
    float _1217 = _1214 + 0.039999999105930328369140625;
    float _1219 = _1215 + 0.039999999105930328369140625;
    float _1220 = _1216 + 0.039999999105930328369140625;
    vec4 _1229 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1155, cbSceneParam._m0[86u].y * _1156));
    float _1233 = ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * TEXCOORD_5.w) * _1229.x;
    float _1234 = dot(vec3(_1068, _1069, _1070), vec3(_1147, _1148, _1149));
    float _1237 = _1234 * 2.0;
    float _1241 = (_1237 * _1068) - _1147;
    float _1242 = (_1237 * _1069) - _1148;
    float _1243 = (_1237 * _1070) - _1149;
    float _1247 = abs(dot(vec3(_1147, _1148, _1149), vec3(_1068, _1069, _1070)));
    float _4149 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1249 = sqrt(_1071);
    float _1262 = exp2((_1249 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1249 * 3.0));
    float _1268 = (1.0 - _1262) * ((_1249 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1269 = _1262 * _1249;
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1301 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1606;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1331 = fma(_1305, cbModelParam._m0[26u].z, fma(_1301, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297));
        float _1335 = fma(_1305, cbModelParam._m0[27u].z, fma(_1301, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297));
        float _1339 = fma(_1305, cbModelParam._m0[28u].z, fma(_1301, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297));
        float _1364 = _1297 + _1068;
        float _1365 = _1301 + _1069;
        float _1366 = _1305 + _1070;
        float _1376 = fma(_1366, cbModelParam._m0[26u].z, fma(_1365, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1364)) - _1331;
        float _1377 = fma(_1366, cbModelParam._m0[27u].z, fma(_1365, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1364)) - _1335;
        float _1378 = fma(_1366, cbModelParam._m0[28u].z, fma(_1365, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1364)) - _1339;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1331 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1335 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[34u].z) + ((((((_1339 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1434 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1400.x + (-0.5));
        float _1436 = _1434 * (_1400.y + (-0.5));
        float _1437 = _1434 * (_1400.z + (-0.5));
        float _1444 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1407.x + (-0.5));
        float _1446 = _1444 * (_1407.y + (-0.5));
        float _1447 = _1444 * (_1407.z + (-0.5));
        float _1454 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1414.x + (-0.5));
        float _1456 = _1454 * (_1414.y + (-0.5));
        float _1457 = _1454 * (_1414.z + (-0.5));
        float _1464 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1421.x + (-0.5));
        float _1466 = _1464 * (_1421.y + (-0.5));
        float _1467 = _1464 * (_1421.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1488 = (dot(vec3(_1068, _1069, _1070), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1498 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4197 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1500 + 1.0))) + _1505) * _1468;
        float _1515 = _1436 * 0.5;
        float _1516 = _1446 * 0.5;
        float _1517 = _1456 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_1068, _1069, _1070), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4230 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1542 + 1.0))) + _1547) * _1469;
        float _1557 = _1437 * 0.5;
        float _1558 = _1447 * 0.5;
        float _1559 = _1457 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_1068, _1069, _1070), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4263 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1584 + 1.0))) + _1589) * _1470;
        _1606 = _1437;
        _1608 = _1436;
        _1609 = _1435;
        _1610 = _1447;
        _1611 = _1446;
        _1612 = _1445;
        _1613 = _1457;
        _1614 = _1456;
        _1615 = _1455;
        _1616 = _1470;
        _1617 = _1469;
        _1618 = _1468;
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1607;
        _1608 = _1607;
        _1609 = _1607;
        _1610 = _1607;
        _1611 = _1607;
        _1612 = _1607;
        _1613 = _1607;
        _1614 = _1607;
        _1615 = _1607;
        _1616 = _1607;
        _1617 = _1607;
        _1618 = _1607;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1645 = fma(_1305, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297));
        float _1649 = fma(_1305, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297));
        float _1653 = fma(_1305, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297));
        float _1676 = _1297 + _1068;
        float _1677 = _1301 + _1069;
        float _1678 = _1305 + _1070;
        float _1688 = fma(_1678, cbModelParam._m0[30u].z, fma(_1677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1676)) - _1645;
        float _1689 = fma(_1678, cbModelParam._m0[31u].z, fma(_1677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1676)) - _1649;
        float _1690 = fma(_1678, cbModelParam._m0[32u].z, fma(_1677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1676)) - _1653;
        float _1694 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
        float _1707 = ((_1694 * _1688) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1645 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1694 * _1689) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1649 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1709 = ((_1694 * _1690) / cbModelParam._m0[35u].z) + ((((((_1653 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        float _1744 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1711.x + (-0.5));
        float _1746 = _1744 * (_1711.y + (-0.5));
        float _1747 = _1744 * (_1711.z + (-0.5));
        float _1754 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1718.x + (-0.5));
        float _1756 = _1754 * (_1718.y + (-0.5));
        float _1757 = _1754 * (_1718.z + (-0.5));
        float _1764 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1725.x + (-0.5));
        float _1766 = _1764 * (_1725.y + (-0.5));
        float _1767 = _1764 * (_1725.z + (-0.5));
        float _1774 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1732.x + (-0.5));
        float _1776 = _1774 * (_1732.y + (-0.5));
        float _1777 = _1774 * (_1732.z + (-0.5));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = _1745 * 0.5;
        float _1782 = _1755 * 0.5;
        float _1783 = _1765 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_1068, _1069, _1070), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4326 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1808 + 1.0))) + _1813) * _1778;
        float _1823 = _1746 * 0.5;
        float _1824 = _1756 * 0.5;
        float _1825 = _1766 * 0.5;
        float _1826 = dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825));
        float _1831 = (_1826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1826);
        float _1839 = (dot(vec3(_1068, _1069, _1070), vec3(_1831 * _1823, _1831 * _1824, _1831 * _1825)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1848 = sqrt(((_1824 * _1824) + (_1823 * _1823)) + (_1825 * _1825)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1850 = _1849 * 2.0;
        float _1854 = (1.0 - _1849) / (_1849 + 1.0);
        float _4359 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1864 = ((((1.0 - _1855) * (_1850 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1850 + 1.0))) + _1855) * _1779;
        float _1865 = _1747 * 0.5;
        float _1866 = _1757 * 0.5;
        float _1867 = _1767 * 0.5;
        float _1868 = dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867));
        float _1873 = (_1868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1868);
        float _1881 = (dot(vec3(_1068, _1069, _1070), vec3(_1873 * _1865, _1873 * _1866, _1873 * _1867)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = sqrt(((_1866 * _1866) + (_1865 * _1865)) + (_1867 * _1867)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1892 = _1891 * 2.0;
        float _1896 = (1.0 - _1891) / (_1891 + 1.0);
        float _4392 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1906 = ((((1.0 - _1897) * (_1892 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1892 + 1.0))) + _1897) * _1780;
        _1914 = _1747;
        _1915 = _1746;
        _1916 = _1745;
        _1917 = _1757;
        _1918 = _1756;
        _1919 = _1755;
        _1920 = _1767;
        _1921 = _1766;
        _1922 = _1765;
        _1923 = _1780;
        _1924 = _1779;
        _1925 = _1778;
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)));
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)));
    }
    else
    {
        _1914 = _1607;
        _1915 = _1607;
        _1916 = _1607;
        _1917 = _1607;
        _1918 = _1607;
        _1919 = _1607;
        _1920 = _1607;
        _1921 = _1607;
        _1922 = _1607;
        _1923 = _1607;
        _1924 = _1607;
        _1925 = _1607;
        _1926 = 0.0;
        _1927 = 0.0;
        _1928 = 0.0;
    }
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1619)) + _1619;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1620)) + _1620;
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1621)) + _1621;
    float _1961 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1964 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1967 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1938));
    float _1982 = _1241 * 0.5;
    float _1983 = _1242 * 0.5;
    float _1984 = _1243 * 0.5;
    float _1985 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _1988 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1991 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _2025;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1998 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1606, _1610, _1613, _1616));
        float _2002 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1608, _1611, _1614, _1617));
        float _2006 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1609, _1612, _1615, _1618));
        float _2013 = dot(vec4(cbModelParam._m0[39u]), vec4(_1982, _1983, _1984, 1.0));
        _2025 = dot(vec3(isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2013) ? 0.0 : (isnan(0.0) ? _2013 : max(0.0, _2013))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2025 = 1.0;
    }
    float _2036;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2027 = dot(vec4(cbModelParam._m0[40u]), vec4(_1982, _1983, _1984, 1.0));
        _2036 = dot(vec3(isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2027) ? 0.0 : (isnan(0.0) ? _2027 : max(0.0, _2027))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2036 = 1.0;
    }
    float _2040 = (_2036 * cbModelParam._m0[1u].x) + (_2025 * (1.0 - cbModelParam._m0[1u].x));
    float _2050 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1071);
    float _2051 = isnan(_2050) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2050 : min(cbModelParam._m0[25u].z, _2050));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2098 = fma(_1305, cbModelParam._m0[13u].z, fma(_1301, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1297)) + cbModelParam._m0[13u].w;
        float _2102 = fma(_1305, cbModelParam._m0[14u].z, fma(_1301, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1297)) + cbModelParam._m0[14u].w;
        float _2106 = fma(_1305, cbModelParam._m0[15u].z, fma(_1301, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1297)) + cbModelParam._m0[15u].w;
        float _2109 = fma(_1243, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1241));
        float _2112 = fma(_1243, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1241));
        float _2115 = fma(_1243, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1241));
        float _2143;
        if (_2109 > 0.0)
        {
            _2143 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2143 = frontier_phi_14_12_ladder;
        }
        float _2345;
        if (_2112 > 0.0)
        {
            _2345 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2345 = frontier_phi_23_19_ladder;
        }
        float _2599;
        if (_2115 > 0.0)
        {
            _2599 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2599 = frontier_phi_35_30_ladder;
        }
        float _2601 = isnan(_2345) ? _2143 : (isnan(_2143) ? _2345 : min(_2143, _2345));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2109) + _2098;
        float _2607 = (_2602 * _2112) + _2102;
        float _2608 = (_2602 * _2115) + _2106;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2051);
            frontier_phi_13_35_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2131 = frontier_phi_13_35_ladder_2;
        _2133 = frontier_phi_13_35_ladder_1;
        _2135 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1241, _1242, _1243), _2051);
        _2131 = _2119.x * cbModelParam._m0[1u].y;
        _2133 = _2119.y * cbModelParam._m0[1u].y;
        _2135 = _2119.z * cbModelParam._m0[1u].y;
    }
    float _2139 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1071);
    float _2140 = isnan(_2139) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2139 : min(cbModelParam._m0[25u].w, _2139));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1305, cbModelParam._m0[21u].z, fma(_1301, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1297)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1305, cbModelParam._m0[22u].z, fma(_1301, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1297)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1305, cbModelParam._m0[23u].z, fma(_1301, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1297)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1243, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1241));
        float _2207 = fma(_1243, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1241));
        float _2210 = fma(_1243, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1241));
        float _2350;
        if (_2204 > 0.0)
        {
            _2350 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2350 = frontier_phi_25_21_ladder;
        }
        float _2626;
        if (_2207 > 0.0)
        {
            _2626 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2626 = frontier_phi_37_32_ladder;
        }
        float _2839;
        if (_2210 > 0.0)
        {
            _2839 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2839 = frontier_phi_46_43_ladder;
        }
        float _2841 = isnan(_2626) ? _2350 : (isnan(_2350) ? _2626 : min(_2350, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2204) + _2193;
        float _2847 = (_2842 * _2207) + _2197;
        float _2848 = (_2842 * _2210) + _2201;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2140);
            frontier_phi_22_46_ladder = _3047.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3047.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3047.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_22_46_ladder_2;
        _2231 = frontier_phi_22_46_ladder_1;
        _2233 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1241, _1242, _1243), _2140);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2246 = (((_1268 * _1217) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2248 = (((_1268 * _1219) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2250 = (((_1268 * _1220) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2253 = fma(_2250, cbSceneParam._m0[89u].z, fma(_2248, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2256 = fma(_2250, cbSceneParam._m0[90u].z, fma(_2248, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2259 = fma(_2250, cbSceneParam._m0[91u].z, fma(_2248, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    uvec4 _2269 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2271 = _2269.x * 14u;
    uint _2272 = _2271 + 13u;
    float _2279 = _1233 + (-1.0);
    float _2284 = (cbLight._m0[_2272].x * _2279) + 1.0;
    float _2285 = (cbLight._m0[_2272].y * _2279) + 1.0;
    float _2286 = (cbLight._m0[_2272].z * _2279) + 1.0;
    float _2287 = (cbLight._m0[_2272].w * _2279) + 1.0;
    uint _2288 = _2271 + 5u;
    float _2294 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2298 = _2271 + 4u;
    float _2304 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2308 = _2271 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_1068, _1069, _1070));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1068, _1069, _1070));
    float _4528 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4539 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2288].x * _2294) * _2329) + ((cbLight._m0[_2298].x * _2304) * _2327);
    float _2337 = ((_2294 * cbLight._m0[_2288].y) * _2329) + ((_2304 * cbLight._m0[_2298].y) * _2327);
    float _2338 = ((_2294 * cbLight._m0[_2288].z) * _2329) + ((_2304 * cbLight._m0[_2298].z) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2271 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2344)
    {
        _2355 = _2336;
        _2357 = _2337;
        _2359 = _2338;
    }
    else
    {
        uint _2363 = _2271 + 6u;
        float _2379 = (dot(vec3(cbLight._m0[_2271 + 2u].xyz), vec3(_1068, _1069, _1070)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4550 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2382 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2355 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2336;
        _2357 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2337;
        _2359 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2338;
    }
    bool _2362 = _2342.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2362)
    {
        _2400 = _2355;
        _2402 = _2357;
        _2404 = _2359;
    }
    else
    {
        uint _2570 = _2271 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2271 + 3u].xyz), vec3(_1068, _1069, _1070)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4566 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2589 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2400 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2355;
        _2402 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2357;
        _2404 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2359;
    }
    uint _2407 = _2271 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _1071) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2271].x + _1147;
    float _2423 = cbLight._m0[_2271].y + _1148;
    float _2424 = cbLight._m0[_2271].z + _1149;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2271].xyz));
    float _4582 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _4593 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _2436 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2437 = dot(vec3(_1068, _1069, _1070), vec3(_2429, _2430, _2431));
    float _4604 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2429, _2430, _2431));
    float _4615 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2458 = 0.959999978542327880859375 - _1214;
    float _2460 = 0.959999978542327880859375 - _1215;
    float _2461 = 0.959999978542327880859375 - _1216;
    float _2468 = 1.0 - _2421;
    float _2479 = (0.5 / (((_2436 * ((_2435 * _2468) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2468) + _2421) * _2435))) * _2435;
    float _4626 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2492 = _2271 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1071) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2308].x + _1147;
    float _2506 = cbLight._m0[_2308].y + _1148;
    float _2507 = cbLight._m0[_2308].z + _1149;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2308].xyz));
    float _4637 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2519 = dot(vec3(_1068, _1069, _1070), vec3(_2512, _2513, _2514));
    float _4648 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2512, _2513, _2514));
    float _4659 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2436 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2545) + _2504) * _2518))) * _2518;
    float _4670 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2458) + _1217) * cbLight._m0[_2492].x) * _2557) * _2294) + (((((_2457 * _2458) + _1217) * cbLight._m0[_2407].x) * _2481) * _2304);
    float _2568 = (((((_2538 * _2460) + _1219) * cbLight._m0[_2492].y) * _2557) * _2294) + (((((_2457 * _2460) + _1219) * cbLight._m0[_2407].y) * _2481) * _2304);
    float _2569 = (((((_2538 * _2461) + _1220) * cbLight._m0[_2492].z) * _2557) * _2294) + (((((_2457 * _2461) + _1220) * cbLight._m0[_2407].z) * _2481) * _2304);
    float _2631;
    float _2633;
    float _2635;
    if (_2344)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2271 + 2u;
        uint _2641 = _2271 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1071) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1147;
        float _2658 = cbLight._m0[_2637].y + _1148;
        float _2659 = cbLight._m0[_2637].z + _1149;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2637].xyz));
        float _4681 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2671 = dot(vec3(_1068, _1069, _1070), vec3(_2664, _2665, _2666));
        float _4692 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4703 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2436 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2697) + _2656) * _2670))) * _2670;
        float _4714 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2631 = (((((_2690 * _2458) + _1217) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2460) + _1219) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2461) + _1220) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2362)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2271 + 3u;
        uint _2760 = _2271 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1071) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1147;
        float _2777 = cbLight._m0[_2756].y + _1148;
        float _2778 = cbLight._m0[_2756].z + _1149;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2756].xyz));
        float _4730 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2790 = dot(vec3(_1068, _1069, _1070), vec3(_2783, _2784, _2785));
        float _4741 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4752 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2436 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2816) + _2775) * _2789))) * _2789;
        float _4763 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2745 = (((((_2809 * _2458) + _1217) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2460) + _1219) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2461) + _1220) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2269.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1156) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1155) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            uint _3202 = 0u;
            uint _3211;
            bool _3212;
            for (;;)
            {
                _3211 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                _3212 = _3211 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3212)
                {
                    frontier_phi_61_pred = _3196;
                    frontier_phi_61_pred_1 = _3201;
                    frontier_phi_61_pred_2 = _3200;
                    frontier_phi_61_pred_3 = _3199;
                    frontier_phi_61_pred_4 = _3198;
                    frontier_phi_61_pred_5 = _3197;
                }
                else
                {
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    uint _3326;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3211;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    for (;;)
                    {
                        uint _3330 = uint(findLSB(_3326)) + (_3202 << 5u);
                        uint _3327 = (_3326 + 4294967295u) & _3326;
                        uint _3332 = _3330 * 48u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3352 = (_3330 * 48u) + 4u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3371 = (_3330 * 48u) + 8u;
                        vec3 _3382 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x));
                        float _3386 = _3346.x - _2905;
                        float _3387 = _3346.y - _2906;
                        float _3388 = _3346.z - _2907;
                        float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                        float _3392 = inversesqrt(_3389);
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3396 = dot(vec3(_1174, _1177, _1180), vec3(_3393, _3394, _3395));
                        float _3401 = 1.0 - (_3389 * _3346.w);
                        float _4789 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3403 = sqrt(_3389) * _3365.w;
                        float _3406 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3396) + _3407;
                        float _3413 = _3403 * _3403;
                        float _3417 = ((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3402) / ((_3413 * 0.699999988079071044921875) + 1.0);
                        float _3421 = (-0.0) - _2905;
                        float _3422 = (-0.0) - _2906;
                        float _3423 = (-0.0) - _2907;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3438 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                        float _3439 = 1.0 - _1249;
                        float _3446 = sqrt(1.0 - ((1.0 - (_3439 * _3439)) * (1.0 - (_3438 * _3438))));
                        float _3447 = _3446 * _3446;
                        float _3448 = _3447 * _3447;
                        float _3449 = _3428 + _3393;
                        float _3450 = _3429 + _3394;
                        float _3451 = _3430 + _3395;
                        float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                        float _3459 = dot(vec3(_1174, _1177, _1180), vec3(_3428, _3429, _3430));
                        float _4805 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3463 = dot(vec3(_1174, _1177, _1180), vec3(_3455 * _3449, _3455 * _3450, _3455 * _3451));
                        float _4816 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3470 = ((_3466 * _3466) * (_3448 + (-1.0))) + 1.0;
                        float _3471 = _3406 * _3447;
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3396) + _3472;
                        float _4827 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3477 = 1.0 - _3447;
                        float _3487 = (0.5 / (((_3476 * ((_3462 * _3477) + _3447)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3447) * _3462))) * _3476;
                        float _4838 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3498 = (((_3448 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3470 * _3470) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125))) * _3402;
                        _3255 = (_3417 * _3365.x) + _3323;
                        _3256 = (_3417 * _3365.y) + _3324;
                        _3257 = (_3417 * _3365.z) + _3325;
                        _3252 = (_3498 * _3382.x) + _3320;
                        _3253 = (_3498 * _3382.y) + _3321;
                        _3254 = (_3498 * _3382.z) + _3322;
                        if (_3327 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3327;
                        }
                    }
                    frontier_phi_61_pred = _3252;
                    frontier_phi_61_pred_1 = _3257;
                    frontier_phi_61_pred_2 = _3256;
                    frontier_phi_61_pred_3 = _3255;
                    frontier_phi_61_pred_4 = _3254;
                    frontier_phi_61_pred_5 = _3253;
                }
                _3053 = frontier_phi_61_pred;
                _3063 = frontier_phi_61_pred_1;
                _3061 = frontier_phi_61_pred_2;
                _3059 = frontier_phi_61_pred_3;
                _3057 = frontier_phi_61_pred_4;
                _3055 = frontier_phi_61_pred_5;
                uint _3203 = _3202 + 1u;
                if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3196 = _3053;
                    _3197 = _3055;
                    _3198 = _3057;
                    _3199 = _3059;
                    _3200 = _3061;
                    _3201 = _3063;
                    _3202 = _3203;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((4294967295u << _3069) & _2951) == 0u)
        {
            _3164 = _3052;
            _3166 = _3054;
            _3168 = _3056;
            _3170 = _3058;
            _3172 = _3060;
            _3174 = _3062;
        }
        else
        {
            float _3189 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3190 = _3189 * _2905;
            float _3191 = _3189 * _2906;
            float _3192 = _3189 * _2907;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3303 = _3052;
                float _3304 = _3054;
                float _3305 = _3056;
                float _3306 = _3058;
                float _3307 = _3060;
                float _3308 = _3062;
                uint _3309 = _3069;
                uint _3318;
                bool _3319;
                for (;;)
                {
                    _3318 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3309 << 2u)) >> 2u)).x;
                    _3319 = _3318 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3319)
                    {
                        frontier_phi_67_pred = _3306;
                        frontier_phi_67_pred_1 = _3307;
                        frontier_phi_67_pred_2 = _3308;
                        frontier_phi_67_pred_3 = _3305;
                        frontier_phi_67_pred_4 = _3304;
                        frontier_phi_67_pred_5 = _3303;
                    }
                    else
                    {
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3516 = _3303;
                        float _3517 = _3304;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        uint _3522 = _3318;
                        uint _3523;
                        vec4 _3548;
                        float _3549;
                        vec4 _3564;
                        vec3 _3576;
                        vec4 _3591;
                        vec4 _3606;
                        float _3652;
                        bool _3653;
                        for (;;)
                        {
                            uint _3533 = ((_3309 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3522));
                            _3523 = (_3522 + 4294967295u) & _3522;
                            uint _3535 = _3533 * 40u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3549 = _3548.w;
                            uint _3551 = (_3533 * 40u) + 4u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3533 * 40u) + 8u;
                            _3576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x));
                            uint _3578 = (_3533 * 40u) + 16u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3533 * 40u) + 20u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3533 * 40u) + 24u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3627 = (_3533 * 40u) + 28u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3652 = fma(_2907, _3640.z, fma(_2906, _3640.y, _3640.x * _2905)) + _3640.w;
                            _3653 = !((fma(_2907, _3621.z, fma(_2906, _3621.y, _3621.x * _2905)) + _3621.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3653)
                            {
                                float _3680 = _3548.x - _2905;
                                float _3681 = _3548.y - _2906;
                                float _3682 = _3548.z - _2907;
                                float _3683 = dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682));
                                float _3686 = inversesqrt(_3683);
                                float _3687 = _3686 * _3680;
                                float _3688 = _3686 * _3681;
                                float _3689 = _3686 * _3682;
                                float _3693 = 1.0 - (_3683 / (_3549 * _3549));
                                float _4849 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3698 = sqrt(_3683) * _3564.w;
                                float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                                float _3701 = _3700 * _3700;
                                float _3704 = ((1.0 - _3701) * dot(vec3(_3687, _3688, _3689), vec3(_1174, _1177, _1180))) + _3701;
                                float _3707 = _3698 * _3698;
                                float _3711 = (fma(_2907, _3591.z, fma(_2906, _3591.y, _3591.x * _2905)) + _3591.w) / _3652;
                                float _3712 = (fma(_2907, _3606.z, fma(_2906, _3606.y, _3606.x * _2905)) + _3606.w) / _3652;
                                float _3716 = 1.0 - dot(vec2(_3711, _3712), vec2(_3711, _3712));
                                float _4865 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3718 = _3717 * (((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3694) / ((_3707 * 0.699999988079071044921875) + 1.0));
                                float _3730 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                                float _3731 = 1.0 - _1249;
                                float _3738 = sqrt(1.0 - ((1.0 - (_3731 * _3731)) * (1.0 - (_3730 * _3730))));
                                float _3739 = _3738 * _3738;
                                float _3740 = _3739 * _3739;
                                float _3741 = _3687 - _3190;
                                float _3742 = _3688 - _3191;
                                float _3743 = _3689 - _3192;
                                float _3747 = inversesqrt(dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743)));
                                float _3751 = dot(vec3(_1174, _1177, _1180), vec3((-0.0) - _3190, (-0.0) - _3191, (-0.0) - _3192));
                                float _4876 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3755 = dot(vec3(_1174, _1177, _1180), vec3(_3747 * _3741, _3747 * _3742, _3747 * _3743));
                                float _4887 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3758 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3762 = ((_3758 * _3758) * (_3740 + (-1.0))) + 1.0;
                                float _3763 = _3700 * _3739;
                                float _3764 = _3763 * _3763;
                                float _3770 = ((1.0 - _3764) * dot(vec3(_1174, _1177, _1180), vec3(_3687, _3688, _3689))) + _3764;
                                float _4898 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3772 = 1.0 - _3739;
                                float _3782 = (0.5 / (((_3771 * ((_3754 * _3772) + _3739)) + 9.9999999392252902907785028219223e-09) + (((_3771 * _3772) + _3739) * _3754))) * _3771;
                                float _4909 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3792 = (_3717 * _3694) * (((_3740 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3762 * _3762) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3792 * _3576.x;
                                frontier_phi_73_pred_1 = _3792 * _3576.y;
                                frontier_phi_73_pred_2 = _3718 * _3564.z;
                                frontier_phi_73_pred_3 = _3718 * _3564.y;
                                frontier_phi_73_pred_4 = _3718 * _3564.x;
                                frontier_phi_73_pred_5 = _3792 * _3576.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3796 = frontier_phi_73_pred;
                            _3797 = frontier_phi_73_pred_1;
                            _3801 = frontier_phi_73_pred_2;
                            _3800 = frontier_phi_73_pred_3;
                            _3799 = frontier_phi_73_pred_4;
                            _3798 = frontier_phi_73_pred_5;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            if (_3523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3523;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3506;
                        frontier_phi_67_pred_1 = _3507;
                        frontier_phi_67_pred_2 = _3508;
                        frontier_phi_67_pred_3 = _3505;
                        frontier_phi_67_pred_4 = _3504;
                        frontier_phi_67_pred_5 = _3503;
                    }
                    _3171 = frontier_phi_67_pred;
                    _3173 = frontier_phi_67_pred_1;
                    _3175 = frontier_phi_67_pred_2;
                    _3169 = frontier_phi_67_pred_3;
                    _3167 = frontier_phi_67_pred_4;
                    _3165 = frontier_phi_67_pred_5;
                    uint _3310 = _3309 + 1u;
                    if (_3310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3303 = _3165;
                        _3304 = _3167;
                        _3305 = _3169;
                        _3306 = _3171;
                        _3307 = _3173;
                        _3308 = _3175;
                        _3309 = _3310;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3173;
                frontier_phi_55_56_ladder_1 = _3175;
                frontier_phi_55_56_ladder_2 = _3171;
                frontier_phi_55_56_ladder_3 = _3169;
                frontier_phi_55_56_ladder_4 = _3167;
                frontier_phi_55_56_ladder_5 = _3165;
            }
            else
            {
                frontier_phi_55_56_ladder = _3060;
                frontier_phi_55_56_ladder_1 = _3062;
                frontier_phi_55_56_ladder_2 = _3058;
                frontier_phi_55_56_ladder_3 = _3056;
                frontier_phi_55_56_ladder_4 = _3054;
                frontier_phi_55_56_ladder_5 = _3052;
            }
            _3164 = frontier_phi_55_56_ladder_5;
            _3166 = frontier_phi_55_56_ladder_4;
            _3168 = frontier_phi_55_56_ladder_3;
            _3170 = frontier_phi_55_56_ladder_2;
            _3172 = frontier_phi_55_56_ladder;
            _3174 = frontier_phi_55_56_ladder_1;
        }
        float _3179 = isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0));
        _2964 = (_3179 * _3170) + _2400;
        _2966 = (_3179 * _3172) + _2402;
        _2968 = (_3179 * _3174) + _2404;
        _2970 = ((_3164 * _1217) * _3179) + _2745;
        _2972 = ((_3166 * _1219) * _3179) + _2747;
        _2974 = ((_3168 * _1220) * _3179) + _2749;
    }
    else
    {
        _2964 = _2400;
        _2966 = _2402;
        _2968 = _2404;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    float _4925 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _4936 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _4947 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    uint _2994 = _291 + 6u;
    float _3002 = _1155 / cbSceneParam._m0[86u].x;
    float _3003 = _1156 / cbSceneParam._m0[86u].y;
    vec4 _3017 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, (log2((isnan(cbSceneParam._m0[77u].w) ? _1090 : (isnan(_1090) ? cbSceneParam._m0[77u].w : min(_1090, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3019 = _3017.x;
    float _3020 = _3017.y;
    float _3021 = _3017.z;
    float _3022 = _3017.w;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_1090 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_1090) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1090 : min(cbSceneParam._m0[80u].w, _1090));
        float _3078 = _3077 / _1090;
        float _3089 = _3078 * _1140;
        float _3090 = _1141 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3092 = _3078 * _1142;
        float _3094 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3095 = _3094 + cbSceneParam._m0[79u].w;
        float _3096 = cbSceneParam._m0[79u].w - _3090;
        float _3102 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3092 * _3092));
        float _3105 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3102;
        float _3110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3265;
        if (abs((_3091 - _3094) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3265 = ((((_3095 > 0.0) ? exp2(_3110 * _3095) : (2.0 - exp2(_3112 * _3095))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3105;
        }
        else
        {
            float _3225 = 1.0 / cbSceneParam._m0[80u].x;
            float _3226 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : max(_3095, _3096));
            float _3227 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : min(_3095, _3096));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            _3265 = ((abs(_3102 / _3091) * cbSceneParam._m0[80u].y) * ((((_3236 - _3237) * 2.0) - ((exp2(_3110 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0)))) - exp2(_3110 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))))) * _3225)) - ((exp2(_3112 * _3236) - exp2(_3112 * _3237)) * _3225))) + (_3105 * cbSceneParam._m0[80u].z);
        }
        vec4 _3267 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, 1.0), 0.0);
        float _3276 = exp2((_3265 * (-1.44269502162933349609375)) * (1.0 - _3267.w));
        float _3277 = log2(_3276);
        float _3293 = log2(_3022);
        _3114 = (exp2(_3293 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].x)) * _3267.x) / cbSceneParam._m0[78u].x)) + _3019;
        _3116 = (exp2(_3293 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].y)) * _3267.y) / cbSceneParam._m0[78u].y)) + _3020;
        _3118 = (exp2(_3293 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].z)) * _3267.z) / cbSceneParam._m0[78u].z)) + _3021;
        _3120 = _3276 * _3022;
    }
    else
    {
        _3114 = _3019;
        _3116 = _3020;
        _3118 = _3021;
        _3120 = _3022;
    }
    float _3132 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3133 = _3132 == 3.0;
    float _3134 = log2(_3120);
    float _3141 = exp2(_3134 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2964 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1233))) + ((_2970 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2040)) * cbPerFrame._m0[3u].x));
    float _3142 = exp2(_3134 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2966 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1233))) + ((_2972 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2040)) * cbPerFrame._m0[3u].x));
    float _3143 = exp2(_3134 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2968 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1233))) + ((_2974 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2040)) * cbPerFrame._m0[3u].x));
    float _3152 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3152 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3114)));
    SV_Target.y = _3152 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.z = _3152 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.w = cbInstanceData._m0[_2994].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2994].w;
}


