#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1577;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4183 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4194 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4205 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4216 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _466 = (_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _467 = (_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _468 = (_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4227 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    float _545 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _539;
    float _548 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _540;
    float _551 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _541;
    float _558 = ((_539 - _545) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _545;
    float _559 = ((_540 - _548) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) + _548;
    float _560 = ((_541 - _551) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _551;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    float _651 = ((_623.x - _642) * _459) + _642;
    float _652 = ((_623.y - _643) * _459) + _643;
    float _653 = ((_623.z - _644) * _459) + _644;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _678 = ((_665.z - _653) * _532) + _653;
    float _681 = ((((_665.x - _651) * _532) + _651) * 2.0) + (-1.0);
    float _682 = ((((_665.y - _652) * _532) + _652) * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _4238 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _688 = sqrt(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _718 = (_681 + ((((_598.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_706.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _719 = (_682 + ((((_598.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_706.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _722 = fma(_688, _262, fma(_719, _269, _718 * _255));
    float _725 = fma(_688, _263, fma(_719, _270, _718 * _256));
    float _728 = fma(_688, _264, fma(_719, _271, _718 * _257));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _761 = _759.x;
    float _762 = 1.0 - _761;
    float _771 = (cbMtdParam._m0[19u].x + dot(vec4(_732 * _722, _732 * _725, _732 * _728, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_761 - _762) * cbMtdParam._m0[24u].z) + _762) * cbMtdParam._m0[21u].z);
    float _4249 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _774 = (-0.0) - cbMtdParam._m0[24u].x;
    float _776 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
    float _784 = _772 - ((_772 * TEXCOORD_8.x) * _777);
    float _785 = _772 - ((_772 * TEXCOORD_8.y) * _777);
    float _786 = _772 - ((_772 * TEXCOORD_8.z) * _777);
    float _793 = (_784 * ((_579.x * cbMtdParam._m0[18u].x) - _558)) + _558;
    float _794 = (_785 * ((_579.y * cbMtdParam._m0[18u].y) - _559)) + _559;
    float _795 = (_786 * ((_579.z * cbMtdParam._m0[18u].z) - _560)) + _560;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _836 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].w) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4270 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _845 = ((((cbMtdParam._m0[10u].x - _793) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _837) + _793;
    float _846 = ((((cbMtdParam._m0[10u].y - _794) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _837) + _794;
    float _847 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _795)) * _837) + _795;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _875 = _873.x;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _875) * _459) + _875;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _893) * _532) + _893;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _910) * cbMtdParam._m0[19u].z) + _910;
    float _916 = _914 - (_914 * _784);
    float _918 = _916 - (_916 * _837);
    float _923 = (((_598.z - _678) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _678;
    float _927 = ((_706.z - _923) * cbMtdParam._m0[19u].w) + _923;
    vec4 _941 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _948 = (_941.x * 2.0) + (-1.0);
    float _949 = (_941.y * 2.0) + (-1.0);
    float _950 = dot(vec2(_948, _949), vec2(_948, _949));
    float _4281 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _958 = ((_941.z - _927) * _784) + _927;
    float _961 = ((cbMtdParam._m0[23u].x - _958) * _837) + _958;
    vec4 _982 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _988 = (_982.x * 2.0) + (-1.0);
    float _989 = (_982.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4292 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _1005 = ((sqrt(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) - _688) * _786) + _688;
    float _1008 = (((_948 - _718) * _784) + _718) + (cbMtdParam._m0[21u].x * _718);
    float _1009 = (((_949 - _719) * _785) + _719) + (cbMtdParam._m0[21u].x * _719);
    float _1020 = (((_988 - _1008) + (_1008 * cbMtdParam._m0[22u].z)) * _837) + _1008;
    float _1021 = (((_989 - _1009) + (_1009 * cbMtdParam._m0[22u].z)) * _837) + _1009;
    float _1022 = (_837 * (sqrt(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) - _1005)) + _1005;
    float _1024 = cbMtdParam._m0[22u].x + _706.w;
    float _1027 = fma(_1022, _262, fma(_1021, _269, _1020 * _255));
    float _1030 = fma(_1022, _263, fma(_1021, _270, _1020 * _256));
    float _1033 = fma(_1022, _264, fma(_1021, _271, _1020 * _257));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _4303 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _1041 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _4314 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4325 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4336 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4347 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4358 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _1046 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _1060 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1110 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1100);
    float _1111 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1100);
    float _1112 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1100);
    float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
    float _1117 = _1110 * _1116;
    float _1118 = _1111 * _1116;
    float _1119 = _1112 * _1116;
    float _1125 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1126 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1144 = fma(_1040, cbSceneParam._m0[5u].z, fma(_1039, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1038));
    float _1147 = fma(_1040, cbSceneParam._m0[6u].z, fma(_1039, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1038));
    float _1150 = fma(_1040, cbSceneParam._m0[7u].z, fma(_1039, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1038));
    uint _1164 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1170 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * cbInstanceData._m0[_1164].x;
    float _1171 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1164].y;
    float _1172 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1164].z;
    float _4369 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _1176 = 1.0 - _1046;
    float _1177 = _1173 * _1176;
    float _1178 = _1174 * _1176;
    float _1179 = _1175 * _1176;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1046;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1046;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1046;
    float _1187 = _1184 + 0.039999999105930328369140625;
    float _1189 = _1185 + 0.039999999105930328369140625;
    float _1190 = _1186 + 0.039999999105930328369140625;
    vec4 _1199 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1125, cbSceneParam._m0[86u].y * _1126));
    float _1203 = ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * TEXCOORD_5.w) * _1199.x;
    float _1204 = dot(vec3(_1038, _1039, _1040), vec3(_1117, _1118, _1119));
    float _1207 = _1204 * 2.0;
    float _1211 = (_1207 * _1038) - _1117;
    float _1212 = (_1207 * _1039) - _1118;
    float _1213 = (_1207 * _1040) - _1119;
    float _1217 = abs(dot(vec3(_1117, _1118, _1119), vec3(_1038, _1039, _1040)));
    float _4402 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1219 = sqrt(_1041);
    float _1232 = exp2((_1219 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1219 * 3.0));
    float _1238 = (1.0 - _1232) * ((_1219 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1239 = _1232 * _1219;
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1576;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1301 = fma(_1275, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267));
        float _1305 = fma(_1275, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267));
        float _1309 = fma(_1275, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267));
        float _1334 = _1267 + _1038;
        float _1335 = _1271 + _1039;
        float _1336 = _1275 + _1040;
        float _1346 = fma(_1336, cbModelParam._m0[26u].z, fma(_1335, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1334)) - _1301;
        float _1347 = fma(_1336, cbModelParam._m0[27u].z, fma(_1335, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1334)) - _1305;
        float _1348 = fma(_1336, cbModelParam._m0[28u].z, fma(_1335, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1334)) - _1309;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1301 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1305 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[34u].z) + ((((((_1309 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1404 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1370.x + (-0.5));
        float _1406 = _1404 * (_1370.y + (-0.5));
        float _1407 = _1404 * (_1370.z + (-0.5));
        float _1414 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1377.x + (-0.5));
        float _1416 = _1414 * (_1377.y + (-0.5));
        float _1417 = _1414 * (_1377.z + (-0.5));
        float _1424 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1384.x + (-0.5));
        float _1426 = _1424 * (_1384.y + (-0.5));
        float _1427 = _1424 * (_1384.z + (-0.5));
        float _1434 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1391.x + (-0.5));
        float _1436 = _1434 * (_1391.y + (-0.5));
        float _1437 = _1434 * (_1391.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1458 = (dot(vec3(_1038, _1039, _1040), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1468 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4450 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1470 + 1.0))) + _1475) * _1438;
        float _1485 = _1406 * 0.5;
        float _1486 = _1416 * 0.5;
        float _1487 = _1426 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_1038, _1039, _1040), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4483 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1512 + 1.0))) + _1517) * _1439;
        float _1527 = _1407 * 0.5;
        float _1528 = _1417 * 0.5;
        float _1529 = _1427 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1038, _1039, _1040), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4516 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1554 + 1.0))) + _1559) * _1440;
        _1576 = _1407;
        _1578 = _1406;
        _1579 = _1405;
        _1580 = _1417;
        _1581 = _1416;
        _1582 = _1415;
        _1583 = _1427;
        _1584 = _1426;
        _1585 = _1425;
        _1586 = _1440;
        _1587 = _1439;
        _1588 = _1438;
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1577;
        _1578 = _1577;
        _1579 = _1577;
        _1580 = _1577;
        _1581 = _1577;
        _1582 = _1577;
        _1583 = _1577;
        _1584 = _1577;
        _1585 = _1577;
        _1586 = _1577;
        _1587 = _1577;
        _1588 = _1577;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1615 = fma(_1275, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267));
        float _1619 = fma(_1275, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267));
        float _1623 = fma(_1275, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267));
        float _1646 = _1267 + _1038;
        float _1647 = _1271 + _1039;
        float _1648 = _1275 + _1040;
        float _1658 = fma(_1648, cbModelParam._m0[30u].z, fma(_1647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1646)) - _1615;
        float _1659 = fma(_1648, cbModelParam._m0[31u].z, fma(_1647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1646)) - _1619;
        float _1660 = fma(_1648, cbModelParam._m0[32u].z, fma(_1647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1646)) - _1623;
        float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
        float _1677 = ((_1664 * _1658) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1615 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1664 * _1659) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1619 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1664 * _1660) / cbModelParam._m0[35u].z) + ((((((_1623 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        float _1714 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1681.x + (-0.5));
        float _1716 = _1714 * (_1681.y + (-0.5));
        float _1717 = _1714 * (_1681.z + (-0.5));
        float _1724 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1688.x + (-0.5));
        float _1726 = _1724 * (_1688.y + (-0.5));
        float _1727 = _1724 * (_1688.z + (-0.5));
        float _1734 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1735 = _1734 * (_1695.x + (-0.5));
        float _1736 = _1734 * (_1695.y + (-0.5));
        float _1737 = _1734 * (_1695.z + (-0.5));
        float _1744 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1702.x + (-0.5));
        float _1746 = _1744 * (_1702.y + (-0.5));
        float _1747 = _1744 * (_1702.z + (-0.5));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = _1715 * 0.5;
        float _1752 = _1725 * 0.5;
        float _1753 = _1735 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_1038, _1039, _1040), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4557 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4568 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4579 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_1778 + 1.0))) + _1783) * _1748;
        float _1793 = _1716 * 0.5;
        float _1794 = _1726 * 0.5;
        float _1795 = _1736 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_1038, _1039, _1040), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4612 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1820 + 1.0))) + _1825) * _1749;
        float _1835 = _1717 * 0.5;
        float _1836 = _1727 * 0.5;
        float _1837 = _1737 * 0.5;
        float _1838 = dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837));
        float _1843 = (_1838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1838);
        float _1851 = (dot(vec3(_1038, _1039, _1040), vec3(_1843 * _1835, _1843 * _1836, _1843 * _1837)) + 1.0) * 0.5;
        float _4623 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1860 = sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4634 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _1862 = _1861 * 2.0;
        float _1866 = (1.0 - _1861) / (_1861 + 1.0);
        float _4645 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1876 = ((((1.0 - _1867) * (_1862 + 2.0)) * exp2(log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_1862 + 1.0))) + _1867) * _1750;
        _1884 = _1717;
        _1885 = _1716;
        _1886 = _1715;
        _1887 = _1727;
        _1888 = _1726;
        _1889 = _1725;
        _1890 = _1737;
        _1891 = _1736;
        _1892 = _1735;
        _1893 = _1750;
        _1894 = _1749;
        _1895 = _1748;
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)));
    }
    else
    {
        _1884 = _1577;
        _1885 = _1577;
        _1886 = _1577;
        _1887 = _1577;
        _1888 = _1577;
        _1889 = _1577;
        _1890 = _1577;
        _1891 = _1577;
        _1892 = _1577;
        _1893 = _1577;
        _1894 = _1577;
        _1895 = _1577;
        _1896 = 0.0;
        _1897 = 0.0;
        _1898 = 0.0;
    }
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1589)) + _1589;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1590)) + _1590;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1591)) + _1591;
    float _1931 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1908));
    float _1952 = _1211 * 0.5;
    float _1953 = _1212 * 0.5;
    float _1954 = _1213 * 0.5;
    float _1955 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1958 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1961 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1995;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1968 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1576, _1580, _1583, _1586));
        float _1972 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1976 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1983 = dot(vec4(cbModelParam._m0[39u]), vec4(_1952, _1953, _1954, 1.0));
        _1995 = dot(vec3(isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1983) ? 0.0 : (isnan(0.0) ? _1983 : max(0.0, _1983))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1995 = 1.0;
    }
    float _2006;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1997 = dot(vec4(cbModelParam._m0[40u]), vec4(_1952, _1953, _1954, 1.0));
        _2006 = dot(vec3(isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1997) ? 0.0 : (isnan(0.0) ? _1997 : max(0.0, _1997))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2006 = 1.0;
    }
    float _2010 = (_2006 * cbModelParam._m0[1u].x) + (_1995 * (1.0 - cbModelParam._m0[1u].x));
    float _2020 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1041);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2020 : min(cbModelParam._m0[25u].z, _2020));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2068 = fma(_1275, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267)) + cbModelParam._m0[13u].w;
        float _2072 = fma(_1275, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267)) + cbModelParam._m0[14u].w;
        float _2076 = fma(_1275, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267)) + cbModelParam._m0[15u].w;
        float _2079 = fma(_1213, cbModelParam._m0[13u].z, fma(_1212, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211));
        float _2082 = fma(_1213, cbModelParam._m0[14u].z, fma(_1212, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211));
        float _2085 = fma(_1213, cbModelParam._m0[15u].z, fma(_1212, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211));
        float _2113;
        if (_2079 > 0.0)
        {
            _2113 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2113 = frontier_phi_14_12_ladder;
        }
        float _2284;
        if (_2082 > 0.0)
        {
            _2284 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2284 = frontier_phi_23_19_ladder;
        }
        float _2579;
        if (_2085 > 0.0)
        {
            _2579 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2579 = frontier_phi_35_30_ladder;
        }
        float _2581 = isnan(_2284) ? _2113 : (isnan(_2113) ? _2284 : min(_2113, _2284));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _2079) + _2068;
        float _2587 = (_2582 * _2082) + _2072;
        float _2588 = (_2582 * _2085) + _2076;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2589;
        float _2593 = _2589 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 > _2593) || ((_2587 < _2591) || ((_2586 < _2591) || (_2586 > _2593))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2588, cbModelParam._m0[9u].z, fma(_2587, cbModelParam._m0[9u].y, _2586 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2588, cbModelParam._m0[10u].z, fma(_2587, cbModelParam._m0[10u].y, _2586 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2588, cbModelParam._m0[11u].z, fma(_2587, cbModelParam._m0[11u].y, _2586 * cbModelParam._m0[11u].x))), _2021);
            frontier_phi_13_35_ladder = _2733.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2733.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2733.x * cbModelParam._m0[1u].y;
        }
        _2101 = frontier_phi_13_35_ladder_2;
        _2103 = frontier_phi_13_35_ladder_1;
        _2105 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1211, _1212, _1213), _2021);
        _2101 = _2089.x * cbModelParam._m0[1u].y;
        _2103 = _2089.y * cbModelParam._m0[1u].y;
        _2105 = _2089.z * cbModelParam._m0[1u].y;
    }
    float _2109 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1041);
    float _2110 = isnan(_2109) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2109 : min(cbModelParam._m0[25u].w, _2109));
    float _2199;
    float _2201;
    float _2203;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2163 = fma(_1275, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267)) + cbModelParam._m0[21u].w;
        float _2167 = fma(_1275, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267)) + cbModelParam._m0[22u].w;
        float _2171 = fma(_1275, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267)) + cbModelParam._m0[23u].w;
        float _2174 = fma(_1213, cbModelParam._m0[21u].z, fma(_1212, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211));
        float _2177 = fma(_1213, cbModelParam._m0[22u].z, fma(_1212, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211));
        float _2180 = fma(_1213, cbModelParam._m0[23u].z, fma(_1212, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211));
        float _2289;
        if (_2174 > 0.0)
        {
            _2289 = abs((1.0 - _2163) / _2174);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2163 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2289 = frontier_phi_25_21_ladder;
        }
        float _2606;
        if (_2177 > 0.0)
        {
            _2606 = abs((1.0 - _2167) / _2177);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2167 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2606 = frontier_phi_37_32_ladder;
        }
        float _2944;
        if (_2180 > 0.0)
        {
            _2944 = abs((1.0 - _2171) / _2180);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2171 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2944 = frontier_phi_47_44_ladder;
        }
        float _2946 = isnan(_2606) ? _2289 : (isnan(_2289) ? _2606 : min(_2289, _2606));
        float _2947 = isnan(_2944) ? _2946 : (isnan(_2946) ? _2944 : min(_2946, _2944));
        float _2951 = (_2947 * _2174) + _2163;
        float _2952 = (_2947 * _2177) + _2167;
        float _2953 = (_2947 * _2180) + _2171;
        float _2954 = _2947 * 9.9999997473787516355514526367188e-05;
        float _2955 = (-1.0) - _2954;
        float _2957 = _2954 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2953 > _2957) || ((_2953 < _2955) || ((_2952 > _2957) || ((_2952 < _2955) || ((_2951 < _2955) || (_2951 > _2957))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2953, cbModelParam._m0[17u].z, fma(_2952, cbModelParam._m0[17u].y, _2951 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2953, cbModelParam._m0[18u].z, fma(_2952, cbModelParam._m0[18u].y, _2951 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2953, cbModelParam._m0[19u].z, fma(_2952, cbModelParam._m0[19u].y, _2951 * cbModelParam._m0[19u].x))), _2110);
            frontier_phi_22_47_ladder = _3075.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3075.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3075.x * cbModelParam._m0[1u].z;
        }
        _2199 = frontier_phi_22_47_ladder_2;
        _2201 = frontier_phi_22_47_ladder_1;
        _2203 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1211, _1212, _1213), _2110);
        _2199 = _2183.x * cbModelParam._m0[1u].z;
        _2201 = _2183.y * cbModelParam._m0[1u].z;
        _2203 = _2183.z * cbModelParam._m0[1u].z;
    }
    float _2216 = (((_1238 * _1187) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2199 - _2101)) + _2101);
    float _2218 = (((_1238 * _1189) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2201 - _2103)) + _2103);
    float _2220 = (((_1238 * _1190) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2223 = fma(_2220, cbSceneParam._m0[89u].z, fma(_2218, cbSceneParam._m0[89u].y, _2216 * cbSceneParam._m0[89u].x));
    float _2226 = fma(_2220, cbSceneParam._m0[90u].z, fma(_2218, cbSceneParam._m0[90u].y, _2216 * cbSceneParam._m0[90u].x));
    float _2229 = fma(_2220, cbSceneParam._m0[91u].z, fma(_2218, cbSceneParam._m0[91u].y, _2216 * cbSceneParam._m0[91u].x));
    float _2263 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2276 = _2263 / _2275;
    float _2277 = _2267 / _2275;
    float _2278 = _2271 / _2275;
    float _2425;
    float _2426;
    float _2427;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2305 = ((uint(_2278 > cbSceneParam._m0[59u].y) + uint(_2278 > cbSceneParam._m0[59u].x)) + uint(_2278 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2306 = _2305 + 43u;
        uint _2314 = _2305 + 44u;
        uint _2322 = _2305 + 45u;
        uint _2330 = _2305 + 46u;
        float _2341 = fma(_2275, cbSceneParam._m0[_2306].w, fma(_2271, cbSceneParam._m0[_2306].z, fma(_2267, cbSceneParam._m0[_2306].y, _2263 * cbSceneParam._m0[_2306].x)));
        float _2345 = fma(_2275, cbSceneParam._m0[_2314].w, fma(_2271, cbSceneParam._m0[_2314].z, fma(_2267, cbSceneParam._m0[_2314].y, _2263 * cbSceneParam._m0[_2314].x)));
        float _2353 = fma(_2275, cbSceneParam._m0[_2330].w, fma(_2271, cbSceneParam._m0[_2330].z, fma(_2267, cbSceneParam._m0[_2330].y, _2263 * cbSceneParam._m0[_2330].x)));
        float _2358 = cbSceneParam._m0[33u].z * _2353;
        float _2360 = cbSceneParam._m0[33u].w * _2353;
        float _2363 = fma(_2275, cbSceneParam._m0[_2322].w, fma(_2271, cbSceneParam._m0[_2322].z, fma(_2267, cbSceneParam._m0[_2322].y, _2263 * cbSceneParam._m0[_2322].x))) / _2353;
        float _2411 = (cbSceneParam._m0[33u].x - sqrt(((_2277 * _2277) + (_2276 * _2276)) + (_2278 * _2278))) * cbSceneParam._m0[33u].y;
        float _4771 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2418 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2358 + _2341) / _2353, (_2360 + _2345) / _2353), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2360 + _2341) / _2353, (_2345 - _2358) / _2353), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2341 - _2358) / _2353, (_2345 - _2360) / _2353), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2341 - _2360) / _2353, (_2358 + _2345) / _2353), _2363), 0.0)).x), vec4(0.25)));
        _2425 = 1.0 - (_2418 * cbSceneParam._m0[34u].x);
        _2426 = 1.0 - (_2418 * cbSceneParam._m0[34u].y);
        _2427 = 1.0 - (_2418 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2425 = 1.0;
        _2426 = 1.0;
        _2427 = 1.0;
    }
    float _2491;
    float _2493;
    float _2495;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2479 = fma(_2275, cbSceneParam._m0[63u].w, fma(_2271, cbSceneParam._m0[63u].z, fma(_2267, cbSceneParam._m0[63u].y, _2263 * cbSceneParam._m0[63u].x)));
        float _2480 = fma(_2275, cbSceneParam._m0[60u].w, fma(_2271, cbSceneParam._m0[60u].z, fma(_2267, cbSceneParam._m0[60u].y, _2263 * cbSceneParam._m0[60u].x))) / _2479;
        float _2481 = fma(_2275, cbSceneParam._m0[61u].w, fma(_2271, cbSceneParam._m0[61u].z, fma(_2267, cbSceneParam._m0[61u].y, _2263 * cbSceneParam._m0[61u].x))) / _2479;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2480 >= cbSceneParam._m0[64u].x) && (_2481 >= cbSceneParam._m0[64u].y)) && (_2480 <= cbSceneParam._m0[64u].z)) && (_2481 <= cbSceneParam._m0[64u].w))
        {
            float _2619 = fma(_2275, cbSceneParam._m0[62u].w, fma(_2271, cbSceneParam._m0[62u].z, fma(_2267, cbSceneParam._m0[62u].y, _2263 * cbSceneParam._m0[62u].x))) / _2479;
            float _2623 = isnan(cbSceneParam._m0[41u].w) ? _2619 : (isnan(_2619) ? cbSceneParam._m0[41u].w : max(_2619, cbSceneParam._m0[41u].w));
            float _2666 = (cbSceneParam._m0[33u].x - sqrt(((_2277 * _2277) + (_2276 * _2276)) + (_2278 * _2278))) * cbSceneParam._m0[33u].y;
            float _4787 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
            float _2673 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2480, cbSceneParam._m0[33u].w + _2481), _2623), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2480, _2481 - cbSceneParam._m0[33u].z), _2623), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2480 - cbSceneParam._m0[33u].z, _2481 - cbSceneParam._m0[33u].w), _2623), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2480 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2481), _2623), 0.0)).x), vec4(0.25)));
            float _2677 = 1.0 - (_2673 * cbSceneParam._m0[34u].x);
            float _2678 = 1.0 - (_2673 * cbSceneParam._m0[34u].y);
            float _2679 = 1.0 - (_2673 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2679) ? _2427 : (isnan(_2427) ? _2679 : min(_2427, _2679));
            frontier_phi_34_33_ladder_1 = isnan(_2678) ? _2426 : (isnan(_2426) ? _2678 : min(_2426, _2678));
            frontier_phi_34_33_ladder_2 = isnan(_2677) ? _2425 : (isnan(_2425) ? _2677 : min(_2425, _2677));
        }
        else
        {
            frontier_phi_34_33_ladder = _2427;
            frontier_phi_34_33_ladder_1 = _2426;
            frontier_phi_34_33_ladder_2 = _2425;
        }
        _2491 = frontier_phi_34_33_ladder_2;
        _2493 = frontier_phi_34_33_ladder_1;
        _2495 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2491 = _2425;
        _2493 = _2426;
        _2495 = _2427;
    }
    uvec4 _2500 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2502 = _2500.x * 14u;
    uint _2503 = _2502 + 13u;
    float _2510 = _1203 + (-1.0);
    float _2515 = (cbLight._m0[_2503].x * _2510) + 1.0;
    float _2516 = (cbLight._m0[_2503].y * _2510) + 1.0;
    float _2517 = (cbLight._m0[_2503].z * _2510) + 1.0;
    float _2518 = (cbLight._m0[_2503].w * _2510) + 1.0;
    uint _2519 = _2502 + 5u;
    float _2525 = isnan(1.0) ? _2516 : (isnan(_2516) ? 1.0 : min(_2516, 1.0));
    uint _2529 = _2502 + 4u;
    float _2538 = isnan(1.0) ? _2515 : (isnan(_2515) ? 1.0 : min(_2515, 1.0));
    uint _2542 = _2502 | 1u;
    float _2553 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_1038, _1039, _1040));
    float _2556 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_1038, _1039, _1040));
    float _4823 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _4834 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2561 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * 0.3183098733425140380859375;
    float _2563 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * 0.3183098733425140380859375;
    float _2570 = ((cbLight._m0[_2519].x * _2525) * _2563) + (((cbLight._m0[_2529].x * _2491) * _2538) * _2561);
    float _2571 = ((_2525 * cbLight._m0[_2519].y) * _2563) + (((cbLight._m0[_2529].y * _2493) * _2538) * _2561);
    float _2572 = ((_2525 * cbLight._m0[_2519].z) * _2563) + (((cbLight._m0[_2529].z * _2495) * _2538) * _2561);
    uvec4 _2576 = floatBitsToUint(cbLight._m0[_2502 + 12u]);
    bool _2578 = _2576.x == 0u;
    float _2680;
    float _2682;
    float _2684;
    if (_2578)
    {
        _2680 = _2570;
        _2682 = _2571;
        _2684 = _2572;
    }
    else
    {
        uint _2688 = _2502 + 6u;
        float _2704 = (dot(vec3(cbLight._m0[_2502 + 2u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4845 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2707 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
        _2680 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2570;
        _2682 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2571;
        _2684 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2572;
    }
    bool _2687 = _2576.y == 0u;
    float _2742;
    float _2744;
    float _2746;
    if (_2687)
    {
        _2742 = _2680;
        _2744 = _2682;
        _2746 = _2684;
    }
    else
    {
        uint _2915 = _2502 + 7u;
        float _2931 = (dot(vec3(cbLight._m0[_2502 + 3u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2932 = _2931 * _2931;
        float _4861 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2933 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2934 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
        _2742 = (((cbLight._m0[_2915].x * 0.3183098733425140380859375) * _2933) * _2934) + _2680;
        _2744 = (((cbLight._m0[_2915].y * 0.3183098733425140380859375) * _2933) * _2934) + _2682;
        _2746 = (((cbLight._m0[_2915].z * 0.3183098733425140380859375) * _2933) * _2934) + _2684;
    }
    uint _2749 = _2502 + 8u;
    float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _1041) * 0.949999988079071044921875);
    float _2763 = _2762 * _2762;
    float _2764 = cbLight._m0[_2502].x + _1117;
    float _2765 = cbLight._m0[_2502].y + _1118;
    float _2766 = cbLight._m0[_2502].z + _1119;
    float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
    float _2771 = _2770 * _2764;
    float _2772 = _2770 * _2765;
    float _2773 = _2770 * _2766;
    float _2774 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2502].xyz));
    float _4877 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2777 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _4888 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _2778 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2779 = dot(vec3(_1038, _1039, _1040), vec3(_2771, _2772, _2773));
    float _4899 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2783 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2771, _2772, _2773));
    float _4910 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2787 = _2763 * _2763;
    float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
    float _2799 = exp2(log2(1.0 - (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) * 5.0);
    float _2800 = 0.959999978542327880859375 - _1184;
    float _2802 = 0.959999978542327880859375 - _1185;
    float _2803 = 0.959999978542327880859375 - _1186;
    float _2810 = 1.0 - _2763;
    float _2821 = (0.5 / (((_2778 * ((_2777 * _2810) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _2810) + _2763) * _2777))) * _2777;
    float _4921 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2823 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
    uint _2837 = _2502 + 9u;
    float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _1041) * 0.949999988079071044921875);
    float _2849 = _2848 * _2848;
    float _2850 = cbLight._m0[_2542].x + _1117;
    float _2851 = cbLight._m0[_2542].y + _1118;
    float _2852 = cbLight._m0[_2542].z + _1119;
    float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
    float _2857 = _2856 * _2850;
    float _2858 = _2856 * _2851;
    float _2859 = _2856 * _2852;
    float _2860 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2542].xyz));
    float _4932 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2863 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
    float _2864 = dot(vec3(_1038, _1039, _1040), vec3(_2857, _2858, _2859));
    float _4943 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2867 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
    float _2868 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2857, _2858, _2859));
    float _4954 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2872 = _2849 * _2849;
    float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
    float _2883 = exp2(log2(1.0 - (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) * 5.0);
    float _2890 = 1.0 - _2849;
    float _2900 = (0.5 / (((_2778 * ((_2863 * _2890) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _2890) + _2849) * _2863))) * _2863;
    float _4965 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
    float _2902 = (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
    float _2912 = (((((_2883 * _2800) + _1187) * cbLight._m0[_2837].x) * _2902) * _2525) + ((((cbLight._m0[_2749].x * _2491) * ((_2799 * _2800) + _1187)) * _2823) * _2538);
    float _2913 = (((((_2883 * _2802) + _1189) * cbLight._m0[_2837].y) * _2902) * _2525) + ((((cbLight._m0[_2749].y * _2493) * ((_2799 * _2802) + _1189)) * _2823) * _2538);
    float _2914 = (((((_2883 * _2803) + _1190) * cbLight._m0[_2837].z) * _2902) * _2525) + ((((cbLight._m0[_2749].z * _2495) * ((_2799 * _2803) + _1190)) * _2823) * _2538);
    float _2970;
    float _2972;
    float _2974;
    if (_2578)
    {
        _2970 = _2912;
        _2972 = _2913;
        _2974 = _2914;
    }
    else
    {
        uint _2976 = _2502 + 2u;
        uint _2980 = _2502 + 10u;
        float _2994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2976].w)) * _1041) * 0.949999988079071044921875);
        float _2995 = _2994 * _2994;
        float _2996 = cbLight._m0[_2976].x + _1117;
        float _2997 = cbLight._m0[_2976].y + _1118;
        float _2998 = cbLight._m0[_2976].z + _1119;
        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
        float _3003 = _3002 * _2996;
        float _3004 = _3002 * _2997;
        float _3005 = _3002 * _2998;
        float _3006 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2976].xyz));
        float _4976 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3009 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _3010 = dot(vec3(_1038, _1039, _1040), vec3(_3003, _3004, _3005));
        float _4987 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _3014 = dot(vec3(cbLight._m0[_2976].xyz), vec3(_3003, _3004, _3005));
        float _4998 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3018 = _2995 * _2995;
        float _3022 = ((_3013 * _3013) * (_3018 + (-1.0))) + 1.0;
        float _3029 = exp2(log2(1.0 - (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) * 5.0);
        float _3036 = 1.0 - _2995;
        float _3046 = (0.5 / (((_2778 * ((_3009 * _3036) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _3036) + _2995) * _3009))) * _3009;
        float _5009 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3048 = (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3018 / ((_3022 * _3022) * 3.141590118408203125));
        float _3049 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
        _2970 = (((((_3029 * _2800) + _1187) * cbLight._m0[_2980].x) * _3048) * _3049) + _2912;
        _2972 = (((((_3029 * _2802) + _1189) * cbLight._m0[_2980].y) * _3048) * _3049) + _2913;
        _2974 = (((((_3029 * _2803) + _1190) * cbLight._m0[_2980].z) * _3048) * _3049) + _2914;
    }
    float _3080;
    float _3082;
    float _3084;
    if (_2687)
    {
        _3080 = _2970;
        _3082 = _2972;
        _3084 = _2974;
    }
    else
    {
        uint _3091 = _2502 + 3u;
        uint _3095 = _2502 + 11u;
        float _3109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3091].w)) * _1041) * 0.949999988079071044921875);
        float _3110 = _3109 * _3109;
        float _3111 = cbLight._m0[_3091].x + _1117;
        float _3112 = cbLight._m0[_3091].y + _1118;
        float _3113 = cbLight._m0[_3091].z + _1119;
        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
        float _3118 = _3117 * _3111;
        float _3119 = _3117 * _3112;
        float _3120 = _3117 * _3113;
        float _3121 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_3091].xyz));
        float _5025 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        float _3124 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
        float _3125 = dot(vec3(_1038, _1039, _1040), vec3(_3118, _3119, _3120));
        float _5036 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
        float _3128 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _3129 = dot(vec3(cbLight._m0[_3091].xyz), vec3(_3118, _3119, _3120));
        float _5047 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3133 = _3110 * _3110;
        float _3137 = ((_3128 * _3128) * (_3133 + (-1.0))) + 1.0;
        float _3144 = exp2(log2(1.0 - (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0)))) * 5.0);
        float _3151 = 1.0 - _3110;
        float _3161 = (0.5 / (((_2778 * ((_3124 * _3151) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _3151) + _3110) * _3124))) * _3124;
        float _5058 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        float _3163 = (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3133 / ((_3137 * _3137) * 3.141590118408203125));
        float _3164 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
        _3080 = (((((_3144 * _2800) + _1187) * cbLight._m0[_3095].x) * _3163) * _3164) + _2970;
        _3082 = (((((_3144 * _2802) + _1189) * cbLight._m0[_3095].y) * _3163) * _3164) + _2972;
        _3084 = (((((_3144 * _2803) + _1190) * cbLight._m0[_3095].z) * _3163) * _3164) + _2974;
    }
    float _3230;
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    float _3240;
    if (_2500.y == 0u)
    {
        uvec4 _3185 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3186 = _3185.x;
        uint _3197 = uint((float(_3185.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1126) / _3186))) + floor(float(uint(cbSceneParam._m0[85u].x * _1125) / _3186)));
        float _3207 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3208 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
        uint _3211 = uint(isnan(14.0) ? _3208 : (isnan(_3208) ? 14.0 : min(_3208, 14.0)));
        uvec4 _3216 = texelFetch(g_lightClusterGridBuffer, int(((_3211 << 2u) + (_3197 << 6u)) >> 2u));
        uint _3217 = _3216.x;
        uint _3218 = _3185.z;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        if (((((1u << ((_3218 >> 4u) & 15u)) + 4294967295u) & _3217) == 0u) || ((_3218 & 240u) == 0u))
        {
            _3297 = 0.0;
            _3299 = 0.0;
            _3301 = 0.0;
            _3303 = 0.0;
            _3305 = 0.0;
            _3307 = 0.0;
        }
        else
        {
            float _3298;
            float _3300;
            float _3302;
            float _3304;
            float _3306;
            float _3308;
            float _3441 = 0.0;
            float _3442 = 0.0;
            float _3443 = 0.0;
            float _3444 = 0.0;
            float _3445 = 0.0;
            float _3446 = 0.0;
            uint _3447 = 0u;
            uint _3456;
            bool _3457;
            for (;;)
            {
                _3456 = texelFetch(g_lightClassification, int((((_3211 << 5u) + (_3197 << 9u)) + (_3447 << 2u)) >> 2u)).x;
                _3457 = _3456 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3457)
                {
                    frontier_phi_66_pred = _3446;
                    frontier_phi_66_pred_1 = _3445;
                    frontier_phi_66_pred_2 = _3444;
                    frontier_phi_66_pred_3 = _3443;
                    frontier_phi_66_pred_4 = _3442;
                    frontier_phi_66_pred_5 = _3441;
                }
                else
                {
                    float _3565;
                    float _3566;
                    float _3567;
                    float _3568;
                    float _3569;
                    float _3570;
                    uint _3571;
                    _3565 = _3441;
                    _3566 = _3442;
                    _3567 = _3443;
                    _3568 = _3444;
                    _3569 = _3445;
                    _3570 = _3446;
                    _3571 = _3456;
                    float _3497;
                    float _3498;
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    for (;;)
                    {
                        uint _3575 = uint(findLSB(_3571)) + (_3447 << 5u);
                        uint _3572 = (_3571 + 4294967295u) & _3571;
                        uint _3577 = _3575 * 48u;
                        vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3577)).x, texelFetch(g_PointLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3577 + 3u)).x));
                        uint _3597 = (_3575 * 48u) + 4u;
                        vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3597)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 3u)).x));
                        uint _3616 = (_3575 * 48u) + 8u;
                        vec3 _3627 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3616)).x, texelFetch(g_PointLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3616 + 2u)).x));
                        float _3631 = _3591.x - _2276;
                        float _3632 = _3591.y - _2277;
                        float _3633 = _3591.z - _2278;
                        float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                        float _3637 = inversesqrt(_3634);
                        float _3638 = _3637 * _3631;
                        float _3639 = _3637 * _3632;
                        float _3640 = _3637 * _3633;
                        float _3641 = dot(vec3(_1144, _1147, _1150), vec3(_3638, _3639, _3640));
                        float _3646 = 1.0 - (_3634 * _3591.w);
                        float _5084 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3647 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3648 = sqrt(_3634) * _3610.w;
                        float _3651 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                        float _3652 = _3651 * _3651;
                        float _3655 = ((1.0 - _3652) * _3641) + _3652;
                        float _3658 = _3648 * _3648;
                        float _3662 = ((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3647) / ((_3658 * 0.699999988079071044921875) + 1.0);
                        float _3666 = (-0.0) - _2276;
                        float _3667 = (-0.0) - _2277;
                        float _3668 = (-0.0) - _2278;
                        float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                        float _3673 = _3672 * _3666;
                        float _3674 = _3672 * _3667;
                        float _3675 = _3672 * _3668;
                        float _3682 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                        float _3683 = 1.0 - _1219;
                        float _3690 = sqrt(1.0 - ((1.0 - (_3683 * _3683)) * (1.0 - (_3682 * _3682))));
                        float _3691 = _3690 * _3690;
                        float _3692 = _3691 * _3691;
                        float _3693 = _3673 + _3638;
                        float _3694 = _3674 + _3639;
                        float _3695 = _3675 + _3640;
                        float _3699 = inversesqrt(dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695)));
                        float _3703 = dot(vec3(_1144, _1147, _1150), vec3(_3673, _3674, _3675));
                        float _5100 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                        float _3706 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3707 = dot(vec3(_1144, _1147, _1150), vec3(_3699 * _3693, _3699 * _3694, _3699 * _3695));
                        float _5111 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3710 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3714 = ((_3710 * _3710) * (_3692 + (-1.0))) + 1.0;
                        float _3715 = _3651 * _3691;
                        float _3716 = _3715 * _3715;
                        float _3719 = ((1.0 - _3716) * _3641) + _3716;
                        float _5122 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3720 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3721 = 1.0 - _3691;
                        float _3731 = (0.5 / (((_3720 * ((_3706 * _3721) + _3691)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3691) * _3706))) * _3720;
                        float _5133 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3742 = (((_3692 * 3.1415927410125732421875) * (isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0)))) / ((_3714 * _3714) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125))) * _3647;
                        _3500 = (_3662 * _3610.x) + _3568;
                        _3501 = (_3662 * _3610.y) + _3569;
                        _3502 = (_3662 * _3610.z) + _3570;
                        _3497 = (_3742 * _3627.x) + _3565;
                        _3498 = (_3742 * _3627.y) + _3566;
                        _3499 = (_3742 * _3627.z) + _3567;
                        if (_3572 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3565 = _3497;
                            _3566 = _3498;
                            _3567 = _3499;
                            _3568 = _3500;
                            _3569 = _3501;
                            _3570 = _3502;
                            _3571 = _3572;
                        }
                    }
                    frontier_phi_66_pred = _3502;
                    frontier_phi_66_pred_1 = _3501;
                    frontier_phi_66_pred_2 = _3500;
                    frontier_phi_66_pred_3 = _3499;
                    frontier_phi_66_pred_4 = _3498;
                    frontier_phi_66_pred_5 = _3497;
                }
                _3308 = frontier_phi_66_pred;
                _3306 = frontier_phi_66_pred_1;
                _3304 = frontier_phi_66_pred_2;
                _3302 = frontier_phi_66_pred_3;
                _3300 = frontier_phi_66_pred_4;
                _3298 = frontier_phi_66_pred_5;
                uint _3448 = _3447 + 1u;
                if (_3448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3441 = _3298;
                    _3442 = _3300;
                    _3443 = _3302;
                    _3444 = _3304;
                    _3445 = _3306;
                    _3446 = _3308;
                    _3447 = _3448;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3297 = _3298;
            _3299 = _3300;
            _3301 = _3302;
            _3303 = _3304;
            _3305 = _3306;
            _3307 = _3308;
        }
        uvec4 _3311 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3312 = _3311.z;
        uint _3314 = (_3312 >> 8u) & 15u;
        float _3409;
        float _3411;
        float _3413;
        float _3415;
        float _3417;
        float _3419;
        if (((4294967295u << _3314) & _3217) == 0u)
        {
            _3409 = _3297;
            _3411 = _3299;
            _3413 = _3301;
            _3415 = _3303;
            _3417 = _3305;
            _3419 = _3307;
        }
        else
        {
            float _3434 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _3435 = _3434 * _2276;
            float _3436 = _3434 * _2277;
            float _3437 = _3434 * _2278;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3314 < ((_3312 >> 12u) & 15u))
            {
                float _3410;
                float _3412;
                float _3414;
                float _3416;
                float _3418;
                float _3420;
                float _3548 = _3297;
                float _3549 = _3299;
                float _3550 = _3301;
                float _3551 = _3303;
                float _3552 = _3305;
                float _3553 = _3307;
                uint _3554 = _3314;
                uint _3563;
                bool _3564;
                for (;;)
                {
                    _3563 = texelFetch(g_lightClassification, int((((_3211 << 5u) + (_3197 << 9u)) + (_3554 << 2u)) >> 2u)).x;
                    _3564 = _3563 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3564)
                    {
                        frontier_phi_72_pred = _3553;
                        frontier_phi_72_pred_1 = _3552;
                        frontier_phi_72_pred_2 = _3551;
                        frontier_phi_72_pred_3 = _3550;
                        frontier_phi_72_pred_4 = _3549;
                        frontier_phi_72_pred_5 = _3548;
                    }
                    else
                    {
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _4043;
                        float _4044;
                        float _4045;
                        float _3760 = _3548;
                        float _3761 = _3549;
                        float _3762 = _3550;
                        float _3763 = _3551;
                        float _3764 = _3552;
                        float _3765 = _3553;
                        uint _3766 = _3563;
                        uint _3767;
                        vec4 _3792;
                        float _3793;
                        vec4 _3808;
                        vec3 _3820;
                        vec4 _3835;
                        vec4 _3850;
                        float _3896;
                        bool _3897;
                        for (;;)
                        {
                            uint _3777 = ((_3554 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3766));
                            _3767 = (_3766 + 4294967295u) & _3766;
                            uint _3779 = _3777 * 40u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            _3793 = _3792.w;
                            uint _3795 = (_3777 * 40u) + 4u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3777 * 40u) + 8u;
                            _3820 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x));
                            uint _3822 = (_3777 * 40u) + 16u;
                            _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3837 = (_3777 * 40u) + 20u;
                            _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            uint _3852 = (_3777 * 40u) + 24u;
                            vec4 _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            uint _3871 = (_3777 * 40u) + 28u;
                            vec4 _3884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 3u)).x));
                            _3896 = fma(_2278, _3884.z, fma(_2277, _3884.y, _3884.x * _2276)) + _3884.w;
                            _3897 = !((fma(_2278, _3865.z, fma(_2277, _3865.y, _3865.x * _2276)) + _3865.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3897)
                            {
                                float _3924 = _3792.x - _2276;
                                float _3925 = _3792.y - _2277;
                                float _3926 = _3792.z - _2278;
                                float _3927 = dot(vec3(_3924, _3925, _3926), vec3(_3924, _3925, _3926));
                                float _3930 = inversesqrt(_3927);
                                float _3931 = _3930 * _3924;
                                float _3932 = _3930 * _3925;
                                float _3933 = _3930 * _3926;
                                float _3937 = 1.0 - (_3927 / (_3793 * _3793));
                                float _5144 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3942 = sqrt(_3927) * _3808.w;
                                float _3944 = 1.39999997615814208984375 / (_3942 + 1.39999997615814208984375);
                                float _3945 = _3944 * _3944;
                                float _3948 = ((1.0 - _3945) * dot(vec3(_3931, _3932, _3933), vec3(_1144, _1147, _1150))) + _3945;
                                float _3951 = _3942 * _3942;
                                float _3955 = (fma(_2278, _3835.z, fma(_2277, _3835.y, _3835.x * _2276)) + _3835.w) / _3896;
                                float _3956 = (fma(_2278, _3850.z, fma(_2277, _3850.y, _3850.x * _2276)) + _3850.w) / _3896;
                                float _3960 = 1.0 - dot(vec2(_3955, _3956), vec2(_3955, _3956));
                                float _5160 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3961 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3962 = _3961 * (((isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0))) * _3938) / ((_3951 * 0.699999988079071044921875) + 1.0));
                                float _3974 = exp2(log2(1.0 / ((_3951 * 3.5) + 5.0)) * 0.25);
                                float _3975 = 1.0 - _1219;
                                float _3982 = sqrt(1.0 - ((1.0 - (_3975 * _3975)) * (1.0 - (_3974 * _3974))));
                                float _3983 = _3982 * _3982;
                                float _3984 = _3983 * _3983;
                                float _3985 = _3931 - _3435;
                                float _3986 = _3932 - _3436;
                                float _3987 = _3933 - _3437;
                                float _3991 = inversesqrt(dot(vec3(_3985, _3986, _3987), vec3(_3985, _3986, _3987)));
                                float _3995 = dot(vec3(_1144, _1147, _1150), vec3((-0.0) - _3435, (-0.0) - _3436, (-0.0) - _3437));
                                float _5171 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _3998 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3999 = dot(vec3(_1144, _1147, _1150), vec3(_3991 * _3985, _3991 * _3986, _3991 * _3987));
                                float _5182 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4002 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _4006 = ((_4002 * _4002) * (_3984 + (-1.0))) + 1.0;
                                float _4007 = _3944 * _3983;
                                float _4008 = _4007 * _4007;
                                float _4014 = ((1.0 - _4008) * dot(vec3(_1144, _1147, _1150), vec3(_3931, _3932, _3933))) + _4008;
                                float _5193 = isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0));
                                float _4015 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _4016 = 1.0 - _3983;
                                float _4026 = (0.5 / (((_4015 * ((_3998 * _4016) + _3983)) + 9.9999999392252902907785028219223e-09) + (((_4015 * _4016) + _3983) * _3998))) * _4015;
                                float _5204 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4036 = (_3961 * _3938) * (((_3984 * 3.1415927410125732421875) * (isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0)))) / ((_4006 * _4006) * ((_3951 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3962 * _3808.y;
                                frontier_phi_78_pred_1 = _3962 * _3808.x;
                                frontier_phi_78_pred_2 = _4036 * _3820.z;
                                frontier_phi_78_pred_3 = _4036 * _3820.y;
                                frontier_phi_78_pred_4 = _4036 * _3820.x;
                                frontier_phi_78_pred_5 = _3962 * _3808.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4044 = frontier_phi_78_pred;
                            _4043 = frontier_phi_78_pred_1;
                            _4042 = frontier_phi_78_pred_2;
                            _4041 = frontier_phi_78_pred_3;
                            _4040 = frontier_phi_78_pred_4;
                            _4045 = frontier_phi_78_pred_5;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3752 = _4045 + _3765;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            if (_3767 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3752;
                                _3766 = _3767;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3752;
                        frontier_phi_72_pred_1 = _3751;
                        frontier_phi_72_pred_2 = _3750;
                        frontier_phi_72_pred_3 = _3749;
                        frontier_phi_72_pred_4 = _3748;
                        frontier_phi_72_pred_5 = _3747;
                    }
                    _3420 = frontier_phi_72_pred;
                    _3418 = frontier_phi_72_pred_1;
                    _3416 = frontier_phi_72_pred_2;
                    _3414 = frontier_phi_72_pred_3;
                    _3412 = frontier_phi_72_pred_4;
                    _3410 = frontier_phi_72_pred_5;
                    uint _3555 = _3554 + 1u;
                    if (_3555 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3548 = _3410;
                        _3549 = _3412;
                        _3550 = _3414;
                        _3551 = _3416;
                        _3552 = _3418;
                        _3553 = _3420;
                        _3554 = _3555;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3420;
                frontier_phi_60_61_ladder_1 = _3418;
                frontier_phi_60_61_ladder_2 = _3414;
                frontier_phi_60_61_ladder_3 = _3412;
                frontier_phi_60_61_ladder_4 = _3410;
                frontier_phi_60_61_ladder_5 = _3416;
            }
            else
            {
                frontier_phi_60_61_ladder = _3307;
                frontier_phi_60_61_ladder_1 = _3305;
                frontier_phi_60_61_ladder_2 = _3301;
                frontier_phi_60_61_ladder_3 = _3299;
                frontier_phi_60_61_ladder_4 = _3297;
                frontier_phi_60_61_ladder_5 = _3303;
            }
            _3409 = frontier_phi_60_61_ladder_4;
            _3411 = frontier_phi_60_61_ladder_3;
            _3413 = frontier_phi_60_61_ladder_2;
            _3415 = frontier_phi_60_61_ladder_5;
            _3417 = frontier_phi_60_61_ladder_1;
            _3419 = frontier_phi_60_61_ladder;
        }
        float _3424 = isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0));
        _3230 = (_3424 * _3415) + _2742;
        _3232 = (_3424 * _3417) + _2744;
        _3234 = (_3424 * _3419) + _2746;
        _3236 = ((_3409 * _1187) * _3424) + _3080;
        _3238 = ((_3411 * _1189) * _3424) + _3082;
        _3240 = ((_3413 * _1190) * _3424) + _3084;
    }
    else
    {
        _3230 = _2742;
        _3232 = _2744;
        _3234 = _2746;
        _3236 = _3080;
        _3238 = _3082;
        _3240 = _3084;
    }
    float _5220 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _5231 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _5242 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    uint _3260 = _293 + 6u;
    float _3268 = _1125 / cbSceneParam._m0[86u].x;
    float _3269 = _1126 / cbSceneParam._m0[86u].y;
    vec4 _3283 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3268, _3269, (log2((isnan(cbSceneParam._m0[77u].w) ? _1060 : (isnan(_1060) ? cbSceneParam._m0[77u].w : min(_1060, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3285 = _3283.x;
    float _3286 = _3283.y;
    float _3287 = _3283.z;
    float _3288 = _3283.w;
    float _3359;
    float _3361;
    float _3363;
    float _3365;
    if (_1060 > cbSceneParam._m0[78u].w)
    {
        float _3322 = isnan(_1060) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1060 : min(cbSceneParam._m0[80u].w, _1060));
        float _3323 = _3322 / _1060;
        float _3334 = _3323 * _1110;
        float _3335 = _1111 * _3323;
        float _3336 = (-0.0) - _3335;
        float _3337 = _3323 * _1112;
        float _3339 = (cbSceneParam._m0[77u].w * _3336) / _3322;
        float _3340 = _3339 + cbSceneParam._m0[79u].w;
        float _3341 = cbSceneParam._m0[79u].w - _3335;
        float _3347 = sqrt(((_3334 * _3334) + (_3335 * _3335)) + (_3337 * _3337));
        float _3350 = (1.0 - (cbSceneParam._m0[77u].w / _3322)) * _3347;
        float _3355 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3357 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3510;
        if (abs((_3336 - _3339) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3510 = ((((_3340 > 0.0) ? exp2(_3355 * _3340) : (2.0 - exp2(_3357 * _3340))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3350;
        }
        else
        {
            float _3470 = 1.0 / cbSceneParam._m0[80u].x;
            float _3471 = isnan(_3341) ? _3340 : (isnan(_3340) ? _3341 : max(_3340, _3341));
            float _3472 = isnan(_3341) ? _3340 : (isnan(_3340) ? _3341 : min(_3340, _3341));
            float _3481 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : min(_3471, 0.0));
            float _3482 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : min(_3472, 0.0));
            _3510 = ((abs(_3347 / _3336) * cbSceneParam._m0[80u].y) * ((((_3481 - _3482) * 2.0) - ((exp2(_3355 * (isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0)))) - exp2(_3355 * (isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))))) * _3470)) - ((exp2(_3357 * _3481) - exp2(_3357 * _3482)) * _3470))) + (_3350 * cbSceneParam._m0[80u].z);
        }
        vec4 _3512 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3268, _3269, 1.0), 0.0);
        float _3521 = exp2((_3510 * (-1.44269502162933349609375)) * (1.0 - _3512.w));
        float _3522 = log2(_3521);
        float _3538 = log2(_3288);
        _3359 = (exp2(_3538 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3522 * cbSceneParam._m0[78u].x)) * _3512.x) / cbSceneParam._m0[78u].x)) + _3285;
        _3361 = (exp2(_3538 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3522 * cbSceneParam._m0[78u].y)) * _3512.y) / cbSceneParam._m0[78u].y)) + _3286;
        _3363 = (exp2(_3538 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3522 * cbSceneParam._m0[78u].z)) * _3512.z) / cbSceneParam._m0[78u].z)) + _3287;
        _3365 = _3521 * _3288;
    }
    else
    {
        _3359 = _3285;
        _3361 = _3286;
        _3363 = _3287;
        _3365 = _3288;
    }
    float _3377 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3378 = _3377 == 3.0;
    float _3379 = log2(_3365);
    float _3386 = exp2(_3379 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3230 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1203))) + ((_3236 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2010)) * cbPerFrame._m0[3u].x));
    float _3387 = exp2(_3379 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3232 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1203))) + ((_3238 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2010)) * cbPerFrame._m0[3u].x));
    float _3388 = exp2(_3379 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0))) * (_3234 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1203))) + ((_3240 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2010)) * cbPerFrame._m0[3u].x));
    float _3397 = (_3377 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3397 * (_3378 ? _3386 : (_3386 + (cbSceneParam._m0[72u].w * _3359)));
    SV_Target.y = _3397 * (_3378 ? _3387 : (_3387 + (cbSceneParam._m0[72u].w * _3361)));
    SV_Target.z = _3397 * (_3378 ? _3388 : (_3388 + (cbSceneParam._m0[72u].w * _3363)));
    SV_Target.w = cbInstanceData._m0[_3260].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3260].w;
}


