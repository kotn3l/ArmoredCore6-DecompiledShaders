#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1795;
float _4171;
float _4172;
float _4173;
float _4174;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _265 = _264 * _256;
    float _266 = _264 * _257;
    float _267 = _264 * _258;
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = _271 * NORMAL.x;
    float _273 = _271 * NORMAL.y;
    float _274 = _271 * NORMAL.z;
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = _278 * TANGENT.x;
    float _280 = _278 * TANGENT.y;
    float _281 = _278 * TANGENT.z;
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4183 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4194 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4205 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = _385.x * cbMtdParam._m0[11u].x;
    float _391 = _385.y * cbMtdParam._m0[11u].y;
    float _392 = _385.z * cbMtdParam._m0[11u].z;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _479 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _496 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _430.x) * 2.0) - ((((_467 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4216 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _504 = (_497 * ((_411.x * cbMtdParam._m0[12u].x) - _390)) + _390;
    float _505 = (_497 * ((_411.y * cbMtdParam._m0[12u].y) - _391)) + _391;
    float _506 = (_497 * ((_411.z * cbMtdParam._m0[12u].z) - _392)) + _392;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _569 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _430.y) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[23u].w) + _555) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4227 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _577 = (_570 * ((_523.x * cbMtdParam._m0[13u].x) - _504)) + _504;
    float _578 = (_570 * ((_523.y * cbMtdParam._m0[13u].y) - _505)) + _505;
    float _579 = (_570 * ((_523.z * cbMtdParam._m0[13u].z) - _506)) + _506;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _627 = dot(vec4(_617, _615.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _639 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _430.z) * 2.0) - ((((_617 - _627) * cbMtdParam._m0[23u].w) + _627) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4238 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _650 = (_359.x * cbMtdParam._m0[9u].x) * ((_640 * ((_598.x * cbMtdParam._m0[14u].x) - _577)) + _577);
    float _651 = (_359.y * cbMtdParam._m0[9u].y) * ((_640 * ((_598.y * cbMtdParam._m0[14u].y) - _578)) + _578);
    float _652 = (_359.z * cbMtdParam._m0[9u].z) * ((_640 * ((_598.z * cbMtdParam._m0[14u].z) - _579)) + _579);
    float _656 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _650;
    float _659 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _651;
    float _662 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _652;
    float _670 = (((_650 - _656) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _656) * 4.55000019073486328125;
    float _672 = (((_651 - _659) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) + _659) * 4.55000019073486328125;
    float _674 = (((_652 - _662) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _662) * 4.55000019073486328125;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _322) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _323) + cbTextureTilingScale._m0[14u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _755 = _753.x;
    float _756 = _753.y;
    float _757 = _753.z;
    float _764 = ((_736.x - _755) * _497) + _755;
    float _765 = ((_736.y - _756) * _497) + _756;
    float _766 = ((_736.z - _757) * _497) + _757;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _789 = ((_778.x - _764) * _570) + _764;
    float _790 = ((_778.y - _765) * _570) + _765;
    float _791 = ((_778.z - _766) * _570) + _766;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _816 = ((_803.z - _791) * _640) + _791;
    float _819 = ((((_803.x - _789) * _640) + _789) * 2.0) + (-1.0);
    float _820 = ((((_803.y - _790) * _640) + _790) * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4249 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _826 = sqrt(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))));
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _856 = (_819 + ((((_711.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_844.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _857 = (_820 + ((((_711.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_844.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _860 = fma(_826, _272, fma(_857, _279, _856 * _265));
    float _863 = fma(_826, _273, fma(_857, _280, _856 * _266));
    float _866 = fma(_826, _274, fma(_857, _281, _856 * _267));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _899 = _897.x;
    float _900 = 1.0 - _899;
    float _908 = (cbMtdParam._m0[19u].x + dot(vec4(_870 * _860, _870 * _863, _870 * _866, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_899 - _900) * cbMtdParam._m0[24u].z) + _900) * cbMtdParam._m0[21u].z);
    float _4260 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _909 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _911 = (-0.0) - cbMtdParam._m0[24u].x;
    float _913 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
    float _921 = _909 - ((_909 * TEXCOORD_8.x) * _914);
    float _922 = _909 - ((_909 * TEXCOORD_8.y) * _914);
    float _923 = _909 - ((_909 * TEXCOORD_8.z) * _914);
    float _930 = (_921 * ((_692.x * cbMtdParam._m0[18u].x) - _670)) + _670;
    float _931 = (_922 * ((_692.y * cbMtdParam._m0[18u].y) - _672)) + _672;
    float _932 = (_923 * ((_692.z * cbMtdParam._m0[18u].z) - _674)) + _674;
    float _947 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _948 = _947 * TEXCOORD.z;
    float _949 = _947 * TEXCOORD.w;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _948) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _949) + cbTextureTilingScale._m0[19u].w));
    float _963 = _961.x;
    float _964 = 1.0 - _963;
    float _990 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_963 - _964) * cbMtdParam._m0[24u].w) + _964) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4281 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _991 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _999 = ((((cbMtdParam._m0[10u].x - _930) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _991) + _930;
    float _1000 = ((((cbMtdParam._m0[10u].y - _931) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _991) + _931;
    float _1001 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _932)) * _991) + _932;
    vec4 _1027 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1029 = _1027.x;
    float _1046 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _1029) * _497) + _1029;
    float _1063 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _1046) * _570) + _1046;
    float _1080 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1063) * _640) + _1063;
    float _1086 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1080) * cbMtdParam._m0[19u].z) + _1080;
    float _1088 = _1086 - (_1086 * _921);
    float _1090 = _1088 - (_1088 * _991);
    float _1097 = (((_711.z - _816) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _816;
    float _1101 = ((_844.z - _1097) * cbMtdParam._m0[19u].w) + _1097;
    vec4 _1117 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1124 = (_1117.x * 2.0) + (-1.0);
    float _1125 = (_1117.y * 2.0) + (-1.0);
    float _1126 = dot(vec2(_1124, _1125), vec2(_1124, _1125));
    float _4292 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1134 = ((_1117.z - _1101) * _921) + _1101;
    float _1137 = ((cbMtdParam._m0[23u].x - _1134) * _991) + _1134;
    vec4 _1160 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _948) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _949) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1166 = (_1160.x * 2.0) + (-1.0);
    float _1167 = (_1160.y * 2.0) + (-1.0);
    float _1168 = dot(vec2(_1166, _1167), vec2(_1166, _1167));
    float _4303 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1183 = ((sqrt(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) - _826) * _923) + _826;
    float _1186 = (((_1124 - _856) * _921) + _856) + (cbMtdParam._m0[21u].x * _856);
    float _1187 = (((_1125 - _857) * _922) + _857) + (cbMtdParam._m0[21u].x * _857);
    float _1198 = (((_1166 - _1186) + (_1186 * cbMtdParam._m0[22u].z)) * _991) + _1186;
    float _1199 = (((_1167 - _1187) + (_1187 * cbMtdParam._m0[22u].z)) * _991) + _1187;
    float _1200 = (_991 * (sqrt(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) - _1183)) + _1183;
    float _1202 = cbMtdParam._m0[22u].x + _844.w;
    float _1205 = fma(_1200, _272, fma(_1199, _279, _1198 * _265));
    float _1208 = fma(_1200, _273, fma(_1199, _280, _1198 * _266));
    float _1211 = fma(_1200, _274, fma(_1199, _281, _1198 * _267));
    float _1215 = inversesqrt(dot(vec3(_1205, _1208, _1211), vec3(_1205, _1208, _1211)));
    float _1216 = _1215 * _1205;
    float _1217 = _1215 * _1208;
    float _1218 = _1215 * _1211;
    float _4314 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1219 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _4336 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4347 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4358 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4369 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1224 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _1238 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1278);
    float _1289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1278);
    float _1290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1278);
    float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
    float _1295 = _1288 * _1294;
    float _1296 = _1289 * _1294;
    float _1297 = _1290 * _1294;
    vec4 _1302 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1304 = _1302.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1476 = sqrt(((_1288 * _1288) + (_1289 * _1289)) + (_1290 * _1290));
        float _1482 = (cbMatDynParam._m0[5u].x * _1476) + cbMatDynParam._m0[5u].y;
        float _4380 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1487 = (cbMatDynParam._m0[5u].z * _1476) + cbMatDynParam._m0[5u].w;
        float _4391 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) - _1483)) + _1483) < ((_1304 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1315 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1316 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1334 = fma(_1218, cbSceneParam._m0[5u].z, fma(_1217, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1216));
    float _1337 = fma(_1218, cbSceneParam._m0[6u].z, fma(_1217, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1216));
    float _1340 = fma(_1218, cbSceneParam._m0[7u].z, fma(_1217, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1216));
    uint _1353 = _303 + 9u;
    uint _1354 = _1353 + uint(cbMatDynParam._m0[0u].w);
    float _1360 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1354].x;
    float _1361 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1354].y;
    float _1362 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * cbInstanceData._m0[_1354].z;
    float _4402 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
    float _1363 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1364 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _4424 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
    float _1365 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _1366 = 1.0 - _1224;
    float _1367 = _1363 * _1366;
    float _1368 = _1364 * _1366;
    float _1369 = _1365 * _1366;
    float _1374 = (_1363 + (-0.039999999105930328369140625)) * _1224;
    float _1375 = (_1364 + (-0.039999999105930328369140625)) * _1224;
    float _1376 = (_1365 + (-0.039999999105930328369140625)) * _1224;
    float _1377 = _1374 + 0.039999999105930328369140625;
    float _1379 = _1375 + 0.039999999105930328369140625;
    float _1380 = _1376 + 0.039999999105930328369140625;
    vec4 _1389 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1315, cbSceneParam._m0[86u].y * _1316));
    float _1393 = ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * TEXCOORD_5.w) * _1389.x;
    float _1394 = dot(vec3(_1216, _1217, _1218), vec3(_1295, _1296, _1297));
    float _1397 = _1394 * 2.0;
    float _1401 = (_1397 * _1216) - _1295;
    float _1402 = (_1397 * _1217) - _1296;
    float _1403 = (_1397 * _1218) - _1297;
    float _1407 = abs(dot(vec3(_1295, _1296, _1297), vec3(_1216, _1217, _1218)));
    float _4435 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1409 = sqrt(_1219);
    float _1422 = exp2((_1409 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1409 * 3.0));
    float _1428 = (1.0 - _1422) * ((_1409 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1429 = _1422 * _1409;
    float _1457 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1461 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1465 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1794;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1519 = fma(_1465, cbModelParam._m0[26u].z, fma(_1461, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1457));
        float _1523 = fma(_1465, cbModelParam._m0[27u].z, fma(_1461, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1457));
        float _1527 = fma(_1465, cbModelParam._m0[28u].z, fma(_1461, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1457));
        float _1552 = _1457 + _1216;
        float _1553 = _1461 + _1217;
        float _1554 = _1465 + _1218;
        float _1564 = fma(_1554, cbModelParam._m0[26u].z, fma(_1553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1552)) - _1519;
        float _1565 = fma(_1554, cbModelParam._m0[27u].z, fma(_1553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1552)) - _1523;
        float _1566 = fma(_1554, cbModelParam._m0[28u].z, fma(_1553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1552)) - _1527;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1583 = ((_1570 * _1564) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1519 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1570 * _1565) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1523 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1570 * _1566) / cbModelParam._m0[34u].z) + ((((((_1527 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        float _1622 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1588.x + (-0.5));
        float _1624 = _1622 * (_1588.y + (-0.5));
        float _1625 = _1622 * (_1588.z + (-0.5));
        float _1632 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1595.x + (-0.5));
        float _1634 = _1632 * (_1595.y + (-0.5));
        float _1635 = _1632 * (_1595.z + (-0.5));
        float _1642 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1602.x + (-0.5));
        float _1644 = _1642 * (_1602.y + (-0.5));
        float _1645 = _1642 * (_1602.z + (-0.5));
        float _1652 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1609.x + (-0.5));
        float _1654 = _1652 * (_1609.y + (-0.5));
        float _1655 = _1652 * (_1609.z + (-0.5));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = _1623 * 0.5;
        float _1660 = _1633 * 0.5;
        float _1661 = _1643 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1676 = (dot(vec3(_1216, _1217, _1218), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1686 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4483 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1688 + 1.0))) + _1693) * _1656;
        float _1703 = _1624 * 0.5;
        float _1704 = _1634 * 0.5;
        float _1705 = _1644 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_1216, _1217, _1218), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4516 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1730 + 1.0))) + _1735) * _1657;
        float _1745 = _1625 * 0.5;
        float _1746 = _1635 * 0.5;
        float _1747 = _1645 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_1216, _1217, _1218), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4549 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1772 + 1.0))) + _1777) * _1658;
        _1794 = _1625;
        _1796 = _1624;
        _1797 = _1623;
        _1798 = _1635;
        _1799 = _1634;
        _1800 = _1633;
        _1801 = _1645;
        _1802 = _1644;
        _1803 = _1643;
        _1804 = _1658;
        _1805 = _1657;
        _1806 = _1656;
        _1807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1795;
        _1796 = _1795;
        _1797 = _1795;
        _1798 = _1795;
        _1799 = _1795;
        _1800 = _1795;
        _1801 = _1795;
        _1802 = _1795;
        _1803 = _1795;
        _1804 = _1795;
        _1805 = _1795;
        _1806 = _1795;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _2104;
    float _2105;
    float _2106;
    float _2107;
    float _2108;
    float _2109;
    float _2110;
    float _2111;
    float _2112;
    float _2113;
    float _2114;
    float _2115;
    float _2116;
    float _2117;
    float _2118;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1835 = fma(_1465, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457));
        float _1839 = fma(_1465, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457));
        float _1843 = fma(_1465, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457));
        float _1866 = _1457 + _1216;
        float _1867 = _1461 + _1217;
        float _1868 = _1465 + _1218;
        float _1878 = fma(_1868, cbModelParam._m0[30u].z, fma(_1867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1866)) - _1835;
        float _1879 = fma(_1868, cbModelParam._m0[31u].z, fma(_1867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1866)) - _1839;
        float _1880 = fma(_1868, cbModelParam._m0[32u].z, fma(_1867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1866)) - _1843;
        float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
        float _1897 = ((_1884 * _1878) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1835 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1898 = ((_1884 * _1879) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1839 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1899 = ((_1884 * _1880) / cbModelParam._m0[35u].z) + ((((((_1843 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1901 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1897, _1898, _1899), 0.0);
        vec4 _1908 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1897, _1898, _1899), 0.0);
        vec4 _1915 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1897, _1898, _1899), 0.0);
        vec4 _1922 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1897, _1898, _1899), 0.0);
        float _1934 = exp2((_1901.w + (-0.5)) * 20.0) * 2.0;
        float _1935 = _1934 * (_1901.x + (-0.5));
        float _1936 = _1934 * (_1901.y + (-0.5));
        float _1937 = _1934 * (_1901.z + (-0.5));
        float _1944 = exp2((_1908.w + (-0.5)) * 20.0) * 2.0;
        float _1945 = _1944 * (_1908.x + (-0.5));
        float _1946 = _1944 * (_1908.y + (-0.5));
        float _1947 = _1944 * (_1908.z + (-0.5));
        float _1954 = exp2((_1915.w + (-0.5)) * 20.0) * 2.0;
        float _1955 = _1954 * (_1915.x + (-0.5));
        float _1956 = _1954 * (_1915.y + (-0.5));
        float _1957 = _1954 * (_1915.z + (-0.5));
        float _1964 = exp2((_1922.w + (-0.5)) * 20.0) * 2.0;
        float _1965 = _1964 * (_1922.x + (-0.5));
        float _1966 = _1964 * (_1922.y + (-0.5));
        float _1967 = _1964 * (_1922.z + (-0.5));
        float _1968 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1969 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1970 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1935 * 0.5;
        float _1972 = _1945 * 0.5;
        float _1973 = _1955 * 0.5;
        float _1974 = dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973));
        float _1979 = (_1974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1974);
        float _1987 = (dot(vec3(_1216, _1217, _1218), vec3(_1979 * _1971, _1979 * _1972, _1979 * _1973)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1996 = sqrt(((_1972 * _1972) + (_1971 * _1971)) + (_1973 * _1973)) / (_1968 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1998 = _1997 * 2.0;
        float _2002 = (1.0 - _1997) / (_1997 + 1.0);
        float _4612 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2012 = ((((1.0 - _2003) * (_1998 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1998 + 1.0))) + _2003) * _1968;
        float _2013 = _1936 * 0.5;
        float _2014 = _1946 * 0.5;
        float _2015 = _1956 * 0.5;
        float _2016 = dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015));
        float _2021 = (_2016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2016);
        float _2029 = (dot(vec3(_1216, _1217, _1218), vec3(_2021 * _2013, _2021 * _2014, _2021 * _2015)) + 1.0) * 0.5;
        float _4623 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2038 = sqrt(((_2014 * _2014) + (_2013 * _2013)) + (_2015 * _2015)) / (_1969 + 9.9999997473787516355514526367188e-06);
        float _4634 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2040 = _2039 * 2.0;
        float _2044 = (1.0 - _2039) / (_2039 + 1.0);
        float _4645 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2054 = ((((1.0 - _2045) * (_2040 + 2.0)) * exp2(log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2040 + 1.0))) + _2045) * _1969;
        float _2055 = _1937 * 0.5;
        float _2056 = _1947 * 0.5;
        float _2057 = _1957 * 0.5;
        float _2058 = dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057));
        float _2063 = (_2058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2058);
        float _2071 = (dot(vec3(_1216, _1217, _1218), vec3(_2063 * _2055, _2063 * _2056, _2063 * _2057)) + 1.0) * 0.5;
        float _4656 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2080 = sqrt(((_2056 * _2056) + (_2055 * _2055)) + (_2057 * _2057)) / (_1970 + 9.9999997473787516355514526367188e-06);
        float _4667 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2082 = _2081 * 2.0;
        float _2086 = (1.0 - _2081) / (_2081 + 1.0);
        float _4678 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2096 = ((((1.0 - _2087) * (_2082 + 2.0)) * exp2(log2(isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2082 + 1.0))) + _2087) * _1970;
        _2104 = _1937;
        _2105 = _1936;
        _2106 = _1935;
        _2107 = _1947;
        _2108 = _1946;
        _2109 = _1945;
        _2110 = _1957;
        _2111 = _1956;
        _2112 = _1955;
        _2113 = _1970;
        _2114 = _1969;
        _2115 = _1968;
        _2116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)));
        _2117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)));
        _2118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)));
    }
    else
    {
        _2104 = _1795;
        _2105 = _1795;
        _2106 = _1795;
        _2107 = _1795;
        _2108 = _1795;
        _2109 = _1795;
        _2110 = _1795;
        _2111 = _1795;
        _2112 = _1795;
        _2113 = _1795;
        _2114 = _1795;
        _2115 = _1795;
        _2116 = 0.0;
        _2117 = 0.0;
        _2118 = 0.0;
    }
    float _2128 = (cbModelParam._m0[1u].x * (_2116 - _1807)) + _1807;
    float _2129 = (cbModelParam._m0[1u].x * (_2117 - _1808)) + _1808;
    float _2130 = (cbModelParam._m0[1u].x * (_2118 - _1809)) + _1809;
    float _2151 = fma(_2130, cbSceneParam._m0[89u].z, fma(_2129, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2154 = fma(_2130, cbSceneParam._m0[90u].z, fma(_2129, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2157 = fma(_2130, cbSceneParam._m0[91u].z, fma(_2129, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2128));
    float _2172 = _1401 * 0.5;
    float _2173 = _1402 * 0.5;
    float _2174 = _1403 * 0.5;
    float _2175 = dot(vec4(_2172, _2173, _2174, 1.0), vec4(_2106, _2109, _2112, _2115));
    float _2178 = dot(vec4(_2172, _2173, _2174, 1.0), vec4(_2105, _2108, _2111, _2114));
    float _2181 = dot(vec4(_2172, _2173, _2174, 1.0), vec4(_2104, _2107, _2110, _2113));
    float _2215;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2188 = dot(vec4(_2172, _2173, _2174, 1.0), vec4(_1794, _1798, _1801, _1804));
        float _2192 = dot(vec4(_2172, _2173, _2174, 1.0), vec4(_1796, _1799, _1802, _1805));
        float _2196 = dot(vec4(_2172, _2173, _2174, 1.0), vec4(_1797, _1800, _1803, _1806));
        float _2203 = dot(vec4(cbModelParam._m0[39u]), vec4(_2172, _2173, _2174, 1.0));
        _2215 = dot(vec3(isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0)), isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0)), isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2203) ? 0.0 : (isnan(0.0) ? _2203 : max(0.0, _2203))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2215 = 1.0;
    }
    float _2226;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2217 = dot(vec4(cbModelParam._m0[40u]), vec4(_2172, _2173, _2174, 1.0));
        _2226 = dot(vec3(isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0)), isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0)), isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2217) ? 0.0 : (isnan(0.0) ? _2217 : max(0.0, _2217))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2226 = 1.0;
    }
    float _2230 = (_2226 * cbModelParam._m0[1u].x) + (_2215 * (1.0 - cbModelParam._m0[1u].x));
    float _2240 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1219);
    float _2241 = isnan(_2240) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2240 : min(cbModelParam._m0[25u].z, _2240));
    float _2321;
    float _2323;
    float _2325;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2288 = fma(_1465, cbModelParam._m0[13u].z, fma(_1461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1457)) + cbModelParam._m0[13u].w;
        float _2292 = fma(_1465, cbModelParam._m0[14u].z, fma(_1461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1457)) + cbModelParam._m0[14u].w;
        float _2296 = fma(_1465, cbModelParam._m0[15u].z, fma(_1461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1457)) + cbModelParam._m0[15u].w;
        float _2299 = fma(_1403, cbModelParam._m0[13u].z, fma(_1402, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1401));
        float _2302 = fma(_1403, cbModelParam._m0[14u].z, fma(_1402, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1401));
        float _2305 = fma(_1403, cbModelParam._m0[15u].z, fma(_1402, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1401));
        float _2333;
        if (_2299 > 0.0)
        {
            _2333 = abs((1.0 - _2288) / _2299);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2299 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2288 + 1.0) / _2299);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2333 = frontier_phi_17_15_ladder;
        }
        float _2535;
        if (_2302 > 0.0)
        {
            _2535 = abs((1.0 - _2292) / _2302);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2302 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2292 + 1.0) / _2302);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2535 = frontier_phi_26_22_ladder;
        }
        float _2789;
        if (_2305 > 0.0)
        {
            _2789 = abs((1.0 - _2296) / _2305);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2305 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2296 + 1.0) / _2305);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2789 = frontier_phi_38_33_ladder;
        }
        float _2791 = isnan(_2535) ? _2333 : (isnan(_2333) ? _2535 : min(_2333, _2535));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _2299) + _2288;
        float _2797 = (_2792 * _2302) + _2292;
        float _2798 = (_2792 * _2305) + _2296;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2801 = (-1.0) - _2799;
        float _2803 = _2799 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2798 > _2803) || ((_2798 < _2801) || ((_2797 > _2803) || ((_2797 < _2801) || ((_2796 < _2801) || (_2796 > _2803))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2798, cbModelParam._m0[9u].z, fma(_2797, cbModelParam._m0[9u].y, _2796 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2798, cbModelParam._m0[10u].z, fma(_2797, cbModelParam._m0[10u].y, _2796 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2798, cbModelParam._m0[11u].z, fma(_2797, cbModelParam._m0[11u].y, _2796 * cbModelParam._m0[11u].x))), _2241);
            frontier_phi_16_38_ladder = _2926.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2926.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2926.x * cbModelParam._m0[1u].y;
        }
        _2321 = frontier_phi_16_38_ladder_2;
        _2323 = frontier_phi_16_38_ladder_1;
        _2325 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1401, _1402, _1403), _2241);
        _2321 = _2309.x * cbModelParam._m0[1u].y;
        _2323 = _2309.y * cbModelParam._m0[1u].y;
        _2325 = _2309.z * cbModelParam._m0[1u].y;
    }
    float _2329 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1219);
    float _2330 = isnan(_2329) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2329 : min(cbModelParam._m0[25u].w, _2329));
    float _2419;
    float _2421;
    float _2423;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2383 = fma(_1465, cbModelParam._m0[21u].z, fma(_1461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1457)) + cbModelParam._m0[21u].w;
        float _2387 = fma(_1465, cbModelParam._m0[22u].z, fma(_1461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1457)) + cbModelParam._m0[22u].w;
        float _2391 = fma(_1465, cbModelParam._m0[23u].z, fma(_1461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1457)) + cbModelParam._m0[23u].w;
        float _2394 = fma(_1403, cbModelParam._m0[21u].z, fma(_1402, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1401));
        float _2397 = fma(_1403, cbModelParam._m0[22u].z, fma(_1402, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1401));
        float _2400 = fma(_1403, cbModelParam._m0[23u].z, fma(_1402, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1401));
        float _2540;
        if (_2394 > 0.0)
        {
            _2540 = abs((1.0 - _2383) / _2394);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2394 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2383 + 1.0) / _2394);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2540 = frontier_phi_28_24_ladder;
        }
        float _2816;
        if (_2397 > 0.0)
        {
            _2816 = abs((1.0 - _2387) / _2397);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2397 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2387 + 1.0) / _2397);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2816 = frontier_phi_40_35_ladder;
        }
        float _3029;
        if (_2400 > 0.0)
        {
            _3029 = abs((1.0 - _2391) / _2400);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2400 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2391 + 1.0) / _2400);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3029 = frontier_phi_49_46_ladder;
        }
        float _3031 = isnan(_2816) ? _2540 : (isnan(_2540) ? _2816 : min(_2540, _2816));
        float _3032 = isnan(_3029) ? _3031 : (isnan(_3031) ? _3029 : min(_3031, _3029));
        float _3036 = (_3032 * _2394) + _2383;
        float _3037 = (_3032 * _2397) + _2387;
        float _3038 = (_3032 * _2400) + _2391;
        float _3039 = _3032 * 9.9999997473787516355514526367188e-05;
        float _3040 = (-1.0) - _3039;
        float _3042 = _3039 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3038 > _3042) || ((_3038 < _3040) || ((_3037 > _3042) || ((_3037 < _3040) || ((_3036 < _3040) || (_3036 > _3042))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3038, cbModelParam._m0[17u].z, fma(_3037, cbModelParam._m0[17u].y, _3036 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3038, cbModelParam._m0[18u].z, fma(_3037, cbModelParam._m0[18u].y, _3036 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3038, cbModelParam._m0[19u].z, fma(_3037, cbModelParam._m0[19u].y, _3036 * cbModelParam._m0[19u].x))), _2330);
            frontier_phi_25_49_ladder = _3237.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3237.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3237.x * cbModelParam._m0[1u].z;
        }
        _2419 = frontier_phi_25_49_ladder_2;
        _2421 = frontier_phi_25_49_ladder_1;
        _2423 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1401, _1402, _1403), _2330);
        _2419 = _2403.x * cbModelParam._m0[1u].z;
        _2421 = _2403.y * cbModelParam._m0[1u].z;
        _2423 = _2403.z * cbModelParam._m0[1u].z;
    }
    float _2436 = (((_1428 * _1377) + _1429) * _1393) * ((cbModelParam._m0[1u].w * (_2419 - _2321)) + _2321);
    float _2438 = (((_1428 * _1379) + _1429) * _1393) * ((cbModelParam._m0[1u].w * (_2421 - _2323)) + _2323);
    float _2440 = (((_1428 * _1380) + _1429) * _1393) * ((cbModelParam._m0[1u].w * (_2423 - _2325)) + _2325);
    float _2443 = fma(_2440, cbSceneParam._m0[89u].z, fma(_2438, cbSceneParam._m0[89u].y, _2436 * cbSceneParam._m0[89u].x));
    float _2446 = fma(_2440, cbSceneParam._m0[90u].z, fma(_2438, cbSceneParam._m0[90u].y, _2436 * cbSceneParam._m0[90u].x));
    float _2449 = fma(_2440, cbSceneParam._m0[91u].z, fma(_2438, cbSceneParam._m0[91u].y, _2436 * cbSceneParam._m0[91u].x));
    uvec4 _2459 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2461 = _2459.x * 14u;
    uint _2462 = _2461 + 13u;
    float _2469 = _1393 + (-1.0);
    float _2474 = (cbLight._m0[_2462].x * _2469) + 1.0;
    float _2475 = (cbLight._m0[_2462].y * _2469) + 1.0;
    float _2476 = (cbLight._m0[_2462].z * _2469) + 1.0;
    float _2477 = (cbLight._m0[_2462].w * _2469) + 1.0;
    uint _2478 = _2461 + 5u;
    float _2484 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
    uint _2488 = _2461 + 4u;
    float _2494 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
    uint _2498 = _2461 | 1u;
    float _2509 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_1216, _1217, _1218));
    float _2512 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_1216, _1217, _1218));
    float _4814 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _4825 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2517 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * 0.3183098733425140380859375;
    float _2519 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * 0.3183098733425140380859375;
    float _2526 = ((cbLight._m0[_2478].x * _2484) * _2519) + ((cbLight._m0[_2488].x * _2494) * _2517);
    float _2527 = ((_2484 * cbLight._m0[_2478].y) * _2519) + ((_2494 * cbLight._m0[_2488].y) * _2517);
    float _2528 = ((_2484 * cbLight._m0[_2478].z) * _2519) + ((_2494 * cbLight._m0[_2488].z) * _2517);
    uvec4 _2532 = floatBitsToUint(cbLight._m0[_2461 + 12u]);
    bool _2534 = _2532.x == 0u;
    float _2545;
    float _2547;
    float _2549;
    if (_2534)
    {
        _2545 = _2526;
        _2547 = _2527;
        _2549 = _2528;
    }
    else
    {
        uint _2553 = _2461 + 6u;
        float _2569 = (dot(vec3(cbLight._m0[_2461 + 2u].xyz), vec3(_1216, _1217, _1218)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4836 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2572 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2545 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2526;
        _2547 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2527;
        _2549 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2528;
    }
    bool _2552 = _2532.y == 0u;
    float _2590;
    float _2592;
    float _2594;
    if (_2552)
    {
        _2590 = _2545;
        _2592 = _2547;
        _2594 = _2549;
    }
    else
    {
        uint _2760 = _2461 + 7u;
        float _2776 = (dot(vec3(cbLight._m0[_2461 + 3u].xyz), vec3(_1216, _1217, _1218)) * 0.5) + 0.5;
        float _2777 = _2776 * _2776;
        float _4852 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2778 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2779 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _2590 = (((cbLight._m0[_2760].x * 0.3183098733425140380859375) * _2778) * _2779) + _2545;
        _2592 = (((cbLight._m0[_2760].y * 0.3183098733425140380859375) * _2778) * _2779) + _2547;
        _2594 = (((cbLight._m0[_2760].z * 0.3183098733425140380859375) * _2778) * _2779) + _2549;
    }
    uint _2597 = _2461 + 8u;
    float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _1219) * 0.949999988079071044921875);
    float _2611 = _2610 * _2610;
    float _2612 = cbLight._m0[_2461].x + _1295;
    float _2613 = cbLight._m0[_2461].y + _1296;
    float _2614 = cbLight._m0[_2461].z + _1297;
    float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
    float _2619 = _2618 * _2612;
    float _2620 = _2618 * _2613;
    float _2621 = _2618 * _2614;
    float _2622 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_2461].xyz));
    float _4868 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _4879 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
    float _2626 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2627 = dot(vec3(_1216, _1217, _1218), vec3(_2619, _2620, _2621));
    float _4890 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _2631 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2619, _2620, _2621));
    float _4901 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2635 = _2611 * _2611;
    float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
    float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
    float _2648 = 0.959999978542327880859375 - _1374;
    float _2650 = 0.959999978542327880859375 - _1375;
    float _2651 = 0.959999978542327880859375 - _1376;
    float _2658 = 1.0 - _2611;
    float _2669 = (0.5 / (((_2626 * ((_2625 * _2658) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2658) + _2611) * _2625))) * _2625;
    float _4912 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
    uint _2682 = _2461 + 9u;
    float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _1219) * 0.949999988079071044921875);
    float _2694 = _2693 * _2693;
    float _2695 = cbLight._m0[_2498].x + _1295;
    float _2696 = cbLight._m0[_2498].y + _1296;
    float _2697 = cbLight._m0[_2498].z + _1297;
    float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
    float _2702 = _2701 * _2695;
    float _2703 = _2701 * _2696;
    float _2704 = _2701 * _2697;
    float _2705 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_2498].xyz));
    float _4923 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
    float _2709 = dot(vec3(_1216, _1217, _1218), vec3(_2702, _2703, _2704));
    float _4934 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
    float _2713 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2702, _2703, _2704));
    float _4945 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = _2694 * _2694;
    float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
    float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) * 5.0);
    float _2735 = 1.0 - _2694;
    float _2745 = (0.5 / (((_2626 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2735) + _2694) * _2708))) * _2708;
    float _4956 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2747 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
    float _2757 = (((((_2728 * _2648) + _1377) * cbLight._m0[_2682].x) * _2747) * _2484) + (((((_2647 * _2648) + _1377) * cbLight._m0[_2597].x) * _2671) * _2494);
    float _2758 = (((((_2728 * _2650) + _1379) * cbLight._m0[_2682].y) * _2747) * _2484) + (((((_2647 * _2650) + _1379) * cbLight._m0[_2597].y) * _2671) * _2494);
    float _2759 = (((((_2728 * _2651) + _1380) * cbLight._m0[_2682].z) * _2747) * _2484) + (((((_2647 * _2651) + _1380) * cbLight._m0[_2597].z) * _2671) * _2494);
    float _2821;
    float _2823;
    float _2825;
    if (_2534)
    {
        _2821 = _2757;
        _2823 = _2758;
        _2825 = _2759;
    }
    else
    {
        uint _2827 = _2461 + 2u;
        uint _2831 = _2461 + 10u;
        float _2845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2827].w)) * _1219) * 0.949999988079071044921875);
        float _2846 = _2845 * _2845;
        float _2847 = cbLight._m0[_2827].x + _1295;
        float _2848 = cbLight._m0[_2827].y + _1296;
        float _2849 = cbLight._m0[_2827].z + _1297;
        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
        float _2854 = _2853 * _2847;
        float _2855 = _2853 * _2848;
        float _2856 = _2853 * _2849;
        float _2857 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_2827].xyz));
        float _4967 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _2861 = dot(vec3(_1216, _1217, _1218), vec3(_2854, _2855, _2856));
        float _4978 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _2865 = dot(vec3(cbLight._m0[_2827].xyz), vec3(_2854, _2855, _2856));
        float _4989 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2869 = _2846 * _2846;
        float _2873 = ((_2864 * _2864) * (_2869 + (-1.0))) + 1.0;
        float _2880 = exp2(log2(1.0 - (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) * 5.0);
        float _2887 = 1.0 - _2846;
        float _2897 = (0.5 / (((_2626 * ((_2860 * _2887) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2887) + _2846) * _2860))) * _2860;
        float _5000 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2899 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2869 / ((_2873 * _2873) * 3.141590118408203125));
        float _2900 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2821 = (((((_2880 * _2648) + _1377) * cbLight._m0[_2831].x) * _2899) * _2900) + _2757;
        _2823 = (((((_2880 * _2650) + _1379) * cbLight._m0[_2831].y) * _2899) * _2900) + _2758;
        _2825 = (((((_2880 * _2651) + _1380) * cbLight._m0[_2831].z) * _2899) * _2900) + _2759;
    }
    float _2935;
    float _2937;
    float _2939;
    if (_2552)
    {
        _2935 = _2821;
        _2937 = _2823;
        _2939 = _2825;
    }
    else
    {
        uint _2946 = _2461 + 3u;
        uint _2950 = _2461 + 11u;
        float _2964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2946].w)) * _1219) * 0.949999988079071044921875);
        float _2965 = _2964 * _2964;
        float _2966 = cbLight._m0[_2946].x + _1295;
        float _2967 = cbLight._m0[_2946].y + _1296;
        float _2968 = cbLight._m0[_2946].z + _1297;
        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
        float _2973 = _2972 * _2966;
        float _2974 = _2972 * _2967;
        float _2975 = _2972 * _2968;
        float _2976 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_2946].xyz));
        float _5016 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
        float _2980 = dot(vec3(_1216, _1217, _1218), vec3(_2973, _2974, _2975));
        float _5027 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
        float _2984 = dot(vec3(cbLight._m0[_2946].xyz), vec3(_2973, _2974, _2975));
        float _5038 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2988 = _2965 * _2965;
        float _2992 = ((_2983 * _2983) * (_2988 + (-1.0))) + 1.0;
        float _2999 = exp2(log2(1.0 - (isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0)))) * 5.0);
        float _3006 = 1.0 - _2965;
        float _3016 = (0.5 / (((_2626 * ((_2979 * _3006) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _3006) + _2965) * _2979))) * _2979;
        float _5049 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3018 = (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_2988 / ((_2992 * _2992) * 3.141590118408203125));
        float _3019 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _2935 = (((((_2999 * _2648) + _1377) * cbLight._m0[_2950].x) * _3018) * _3019) + _2821;
        _2937 = (((((_2999 * _2650) + _1379) * cbLight._m0[_2950].y) * _3018) * _3019) + _2823;
        _2939 = (((((_2999 * _2651) + _1380) * cbLight._m0[_2950].z) * _3018) * _3019) + _2825;
    }
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    if (_2459.y == 0u)
    {
        float _3094 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3094;
        float _3096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3094;
        float _3097 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3094;
        uvec4 _3109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3110 = _3109.x;
        uint _3121 = uint((float(_3109.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1316) / _3110))) + floor(float(uint(cbSceneParam._m0[85u].x * _1315) / _3110)));
        float _3131 = (log2(_3097 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3132 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
        uint _3135 = uint(isnan(14.0) ? _3132 : (isnan(_3132) ? 14.0 : min(_3132, 14.0)));
        uvec4 _3140 = texelFetch(g_lightClusterGridBuffer, int(((_3135 << 2u) + (_3121 << 6u)) >> 2u));
        uint _3141 = _3140.x;
        uint _3142 = _3109.z;
        float _3242;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        if (((((1u << ((_3142 >> 4u) & 15u)) + 4294967295u) & _3141) == 0u) || ((_3142 & 240u) == 0u))
        {
            _3242 = 0.0;
            _3244 = 0.0;
            _3246 = 0.0;
            _3248 = 0.0;
            _3250 = 0.0;
            _3252 = 0.0;
        }
        else
        {
            float _3243;
            float _3245;
            float _3247;
            float _3249;
            float _3251;
            float _3253;
            float _3394 = 0.0;
            float _3395 = 0.0;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            uint _3400 = 0u;
            uint _3409;
            bool _3410;
            for (;;)
            {
                _3409 = texelFetch(g_lightClassification, int((((_3135 << 5u) + (_3121 << 9u)) + (_3400 << 2u)) >> 2u)).x;
                _3410 = _3409 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3410)
                {
                    frontier_phi_66_pred = _3394;
                    frontier_phi_66_pred_1 = _3399;
                    frontier_phi_66_pred_2 = _3398;
                    frontier_phi_66_pred_3 = _3397;
                    frontier_phi_66_pred_4 = _3396;
                    frontier_phi_66_pred_5 = _3395;
                }
                else
                {
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    uint _3545;
                    _3539 = _3394;
                    _3540 = _3395;
                    _3541 = _3396;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3399;
                    _3545 = _3409;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    for (;;)
                    {
                        uint _3549 = uint(findLSB(_3545)) + (_3400 << 5u);
                        uint _3546 = (_3545 + 4294967295u) & _3545;
                        uint _3551 = _3549 * 48u;
                        vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3551)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 3u)).x));
                        uint _3571 = (_3549 * 48u) + 4u;
                        vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3571)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 3u)).x));
                        uint _3590 = (_3549 * 48u) + 8u;
                        vec3 _3601 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3590)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 2u)).x));
                        float _3605 = _3565.x - _3095;
                        float _3606 = _3565.y - _3096;
                        float _3607 = _3565.z - _3097;
                        float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                        float _3611 = inversesqrt(_3608);
                        float _3612 = _3611 * _3605;
                        float _3613 = _3611 * _3606;
                        float _3614 = _3611 * _3607;
                        float _3615 = dot(vec3(_1334, _1337, _1340), vec3(_3612, _3613, _3614));
                        float _3620 = 1.0 - (_3608 * _3565.w);
                        float _5075 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3621 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                        float _3622 = sqrt(_3608) * _3584.w;
                        float _3625 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                        float _3626 = _3625 * _3625;
                        float _3629 = ((1.0 - _3626) * _3615) + _3626;
                        float _3632 = _3622 * _3622;
                        float _3636 = ((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3621) / ((_3632 * 0.699999988079071044921875) + 1.0);
                        float _3640 = (-0.0) - _3095;
                        float _3641 = (-0.0) - _3096;
                        float _3642 = (-0.0) - _3097;
                        float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                        float _3647 = _3646 * _3640;
                        float _3648 = _3646 * _3641;
                        float _3649 = _3646 * _3642;
                        float _3657 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                        float _3658 = 1.0 - _1409;
                        float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                        float _3666 = _3665 * _3665;
                        float _3667 = _3666 * _3666;
                        float _3668 = _3647 + _3612;
                        float _3669 = _3648 + _3613;
                        float _3670 = _3649 + _3614;
                        float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                        float _3678 = dot(vec3(_1334, _1337, _1340), vec3(_3647, _3648, _3649));
                        float _5091 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3681 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                        float _3682 = dot(vec3(_1334, _1337, _1340), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                        float _5102 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3685 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                        float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                        float _3690 = _3625 * _3666;
                        float _3691 = _3690 * _3690;
                        float _3694 = ((1.0 - _3691) * _3615) + _3691;
                        float _5113 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3695 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                        float _3696 = 1.0 - _3666;
                        float _3706 = (0.5 / (((_3695 * ((_3681 * _3696) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3666) * _3681))) * _3695;
                        float _5124 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3717 = (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0)))) / ((_3689 * _3689) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125))) * _3621;
                        _3469 = (_3636 * _3584.x) + _3542;
                        _3470 = (_3636 * _3584.y) + _3543;
                        _3471 = (_3636 * _3584.z) + _3544;
                        _3466 = (_3717 * _3601.x) + _3539;
                        _3467 = (_3717 * _3601.y) + _3540;
                        _3468 = (_3717 * _3601.z) + _3541;
                        if (_3546 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3539 = _3466;
                            _3540 = _3467;
                            _3541 = _3468;
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3471;
                            _3545 = _3546;
                        }
                    }
                    frontier_phi_66_pred = _3466;
                    frontier_phi_66_pred_1 = _3471;
                    frontier_phi_66_pred_2 = _3470;
                    frontier_phi_66_pred_3 = _3469;
                    frontier_phi_66_pred_4 = _3468;
                    frontier_phi_66_pred_5 = _3467;
                }
                _3243 = frontier_phi_66_pred;
                _3253 = frontier_phi_66_pred_1;
                _3251 = frontier_phi_66_pred_2;
                _3249 = frontier_phi_66_pred_3;
                _3247 = frontier_phi_66_pred_4;
                _3245 = frontier_phi_66_pred_5;
                uint _3401 = _3400 + 1u;
                if (_3401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3394 = _3243;
                    _3395 = _3245;
                    _3396 = _3247;
                    _3397 = _3249;
                    _3398 = _3251;
                    _3399 = _3253;
                    _3400 = _3401;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3242 = _3243;
            _3244 = _3245;
            _3246 = _3247;
            _3248 = _3249;
            _3250 = _3251;
            _3252 = _3253;
        }
        uvec4 _3256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3257 = _3256.z;
        uint _3259 = (_3257 >> 8u) & 15u;
        float _3362;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        float _3372;
        if (((4294967295u << _3259) & _3141) == 0u)
        {
            _3362 = _3242;
            _3364 = _3244;
            _3366 = _3246;
            _3368 = _3248;
            _3370 = _3250;
            _3372 = _3252;
        }
        else
        {
            float _3387 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
            float _3388 = _3387 * _3095;
            float _3389 = _3387 * _3096;
            float _3390 = _3387 * _3097;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3259 < ((_3257 >> 12u) & 15u))
            {
                float _3363;
                float _3365;
                float _3367;
                float _3369;
                float _3371;
                float _3373;
                float _3522 = _3242;
                float _3523 = _3244;
                float _3524 = _3246;
                float _3525 = _3248;
                float _3526 = _3250;
                float _3527 = _3252;
                uint _3528 = _3259;
                uint _3537;
                bool _3538;
                for (;;)
                {
                    _3537 = texelFetch(g_lightClassification, int((((_3135 << 5u) + (_3121 << 9u)) + (_3528 << 2u)) >> 2u)).x;
                    _3538 = _3537 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3538)
                    {
                        frontier_phi_77_pred = _3527;
                        frontier_phi_77_pred_1 = _3526;
                        frontier_phi_77_pred_2 = _3525;
                        frontier_phi_77_pred_3 = _3524;
                        frontier_phi_77_pred_4 = _3523;
                        frontier_phi_77_pred_5 = _3522;
                    }
                    else
                    {
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _3744 = _3522;
                        float _3745 = _3523;
                        float _3746 = _3524;
                        float _3747 = _3525;
                        float _3748 = _3526;
                        float _3749 = _3527;
                        uint _3750 = _3537;
                        uint _3751;
                        vec4 _3776;
                        float _3777;
                        vec4 _3792;
                        vec3 _3804;
                        vec4 _3819;
                        vec4 _3834;
                        float _3880;
                        bool _3881;
                        for (;;)
                        {
                            uint _3761 = ((_3528 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3750));
                            _3751 = (_3750 + 4294967295u) & _3750;
                            uint _3763 = _3761 * 40u;
                            _3776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 3u)).x));
                            _3777 = _3776.w;
                            uint _3779 = (_3761 * 40u) + 4u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3794 = (_3761 * 40u) + 8u;
                            _3804 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x));
                            uint _3806 = (_3761 * 40u) + 16u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3761 * 40u) + 20u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3761 * 40u) + 24u;
                            vec4 _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3855 = (_3761 * 40u) + 28u;
                            vec4 _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            _3880 = fma(_3097, _3868.z, fma(_3096, _3868.y, _3868.x * _3095)) + _3868.w;
                            _3881 = !((fma(_3097, _3849.z, fma(_3096, _3849.y, _3849.x * _3095)) + _3849.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3881)
                            {
                                float _3908 = _3776.x - _3095;
                                float _3909 = _3776.y - _3096;
                                float _3910 = _3776.z - _3097;
                                float _3911 = dot(vec3(_3908, _3909, _3910), vec3(_3908, _3909, _3910));
                                float _3914 = inversesqrt(_3911);
                                float _3915 = _3914 * _3908;
                                float _3916 = _3914 * _3909;
                                float _3917 = _3914 * _3910;
                                float _3921 = 1.0 - (_3911 / (_3777 * _3777));
                                float _5135 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3926 = sqrt(_3911) * _3792.w;
                                float _3928 = 1.39999997615814208984375 / (_3926 + 1.39999997615814208984375);
                                float _3929 = _3928 * _3928;
                                float _3932 = ((1.0 - _3929) * dot(vec3(_3915, _3916, _3917), vec3(_1334, _1337, _1340))) + _3929;
                                float _3935 = _3926 * _3926;
                                float _3939 = (fma(_3097, _3819.z, fma(_3096, _3819.y, _3819.x * _3095)) + _3819.w) / _3880;
                                float _3940 = (fma(_3097, _3834.z, fma(_3096, _3834.y, _3834.x * _3095)) + _3834.w) / _3880;
                                float _3944 = 1.0 - dot(vec2(_3939, _3940), vec2(_3939, _3940));
                                float _5151 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3946 = _3945 * (((isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0))) * _3922) / ((_3935 * 0.699999988079071044921875) + 1.0));
                                float _3958 = exp2(log2(1.0 / ((_3935 * 3.5) + 5.0)) * 0.25);
                                float _3959 = 1.0 - _1409;
                                float _3966 = sqrt(1.0 - ((1.0 - (_3959 * _3959)) * (1.0 - (_3958 * _3958))));
                                float _3967 = _3966 * _3966;
                                float _3968 = _3967 * _3967;
                                float _3969 = _3915 - _3388;
                                float _3970 = _3916 - _3389;
                                float _3971 = _3917 - _3390;
                                float _3975 = inversesqrt(dot(vec3(_3969, _3970, _3971), vec3(_3969, _3970, _3971)));
                                float _3979 = dot(vec3(_1334, _1337, _1340), vec3((-0.0) - _3388, (-0.0) - _3389, (-0.0) - _3390));
                                float _5162 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3982 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3983 = dot(vec3(_1334, _1337, _1340), vec3(_3975 * _3969, _3975 * _3970, _3975 * _3971));
                                float _5173 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3986 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3990 = ((_3986 * _3986) * (_3968 + (-1.0))) + 1.0;
                                float _3991 = _3928 * _3967;
                                float _3992 = _3991 * _3991;
                                float _3998 = ((1.0 - _3992) * dot(vec3(_1334, _1337, _1340), vec3(_3915, _3916, _3917))) + _3992;
                                float _5184 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _3999 = isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0));
                                float _4000 = 1.0 - _3967;
                                float _4010 = (0.5 / (((_3999 * ((_3982 * _4000) + _3967)) + 9.9999999392252902907785028219223e-09) + (((_3999 * _4000) + _3967) * _3982))) * _3999;
                                float _5195 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4020 = (_3945 * _3922) * (((_3968 * 3.1415927410125732421875) * (isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0)))) / ((_3990 * _3990) * ((_3935 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3946 * _3792.y;
                                frontier_phi_83_pred_1 = _3946 * _3792.x;
                                frontier_phi_83_pred_2 = _4020 * _3804.z;
                                frontier_phi_83_pred_3 = _4020 * _3804.y;
                                frontier_phi_83_pred_4 = _4020 * _3804.x;
                                frontier_phi_83_pred_5 = _3946 * _3792.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4028 = frontier_phi_83_pred;
                            _4027 = frontier_phi_83_pred_1;
                            _4026 = frontier_phi_83_pred_2;
                            _4025 = frontier_phi_83_pred_3;
                            _4024 = frontier_phi_83_pred_4;
                            _4029 = frontier_phi_83_pred_5;
                            _3734 = _4027 + _3747;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3731 = _4024 + _3744;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            if (_3751 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3751;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3736;
                        frontier_phi_77_pred_1 = _3735;
                        frontier_phi_77_pred_2 = _3734;
                        frontier_phi_77_pred_3 = _3733;
                        frontier_phi_77_pred_4 = _3732;
                        frontier_phi_77_pred_5 = _3731;
                    }
                    _3373 = frontier_phi_77_pred;
                    _3371 = frontier_phi_77_pred_1;
                    _3369 = frontier_phi_77_pred_2;
                    _3367 = frontier_phi_77_pred_3;
                    _3365 = frontier_phi_77_pred_4;
                    _3363 = frontier_phi_77_pred_5;
                    uint _3529 = _3528 + 1u;
                    if (_3529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3522 = _3363;
                        _3523 = _3365;
                        _3524 = _3367;
                        _3525 = _3369;
                        _3526 = _3371;
                        _3527 = _3373;
                        _3528 = _3529;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3367;
                frontier_phi_58_59_ladder_1 = _3373;
                frontier_phi_58_59_ladder_2 = _3371;
                frontier_phi_58_59_ladder_3 = _3369;
                frontier_phi_58_59_ladder_4 = _3365;
                frontier_phi_58_59_ladder_5 = _3363;
            }
            else
            {
                frontier_phi_58_59_ladder = _3246;
                frontier_phi_58_59_ladder_1 = _3252;
                frontier_phi_58_59_ladder_2 = _3250;
                frontier_phi_58_59_ladder_3 = _3248;
                frontier_phi_58_59_ladder_4 = _3244;
                frontier_phi_58_59_ladder_5 = _3242;
            }
            _3362 = frontier_phi_58_59_ladder_5;
            _3364 = frontier_phi_58_59_ladder_4;
            _3366 = frontier_phi_58_59_ladder;
            _3368 = frontier_phi_58_59_ladder_3;
            _3370 = frontier_phi_58_59_ladder_2;
            _3372 = frontier_phi_58_59_ladder_1;
        }
        float _3377 = isnan(1.0) ? _1393 : (isnan(_1393) ? 1.0 : min(_1393, 1.0));
        _3154 = (_3377 * _3368) + _2590;
        _3156 = (_3377 * _3370) + _2592;
        _3158 = (_3377 * _3372) + _2594;
        _3160 = ((_3362 * _1377) * _3377) + _2935;
        _3162 = ((_3364 * _1379) * _3377) + _2937;
        _3164 = ((_3366 * _1380) * _3377) + _2939;
    }
    else
    {
        _3154 = _2590;
        _3156 = _2592;
        _3158 = _2594;
        _3160 = _2935;
        _3162 = _2937;
        _3164 = _2939;
    }
    float _5211 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _5222 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
    float _5233 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _3181 = ((isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0))) * (_3154 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1393))) + ((_3160 + ((isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0))) * _2230)) * cbPerFrame._m0[3u].x);
    float _3182 = ((isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0))) * (_3156 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1393))) + ((_3162 + ((isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0))) * _2230)) * cbPerFrame._m0[3u].x);
    float _3183 = ((isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0))) * (_3158 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1393))) + ((_3164 + ((isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0))) * _2230)) * cbPerFrame._m0[3u].x);
    uint _3184 = _303 + 6u;
    float _3192 = _1315 / cbSceneParam._m0[86u].x;
    float _3193 = _1316 / cbSceneParam._m0[86u].y;
    vec4 _3207 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3192, _3193, (log2((isnan(cbSceneParam._m0[77u].w) ? _1238 : (isnan(_1238) ? cbSceneParam._m0[77u].w : min(_1238, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3209 = _3207.x;
    float _3210 = _3207.y;
    float _3211 = _3207.z;
    float _3212 = _3207.w;
    float _3304;
    float _3306;
    float _3308;
    float _3310;
    if (_1238 > cbSceneParam._m0[78u].w)
    {
        float _3267 = isnan(_1238) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1238 : min(cbSceneParam._m0[80u].w, _1238));
        float _3268 = _3267 / _1238;
        float _3279 = _3268 * _1288;
        float _3280 = _1289 * _3268;
        float _3281 = (-0.0) - _3280;
        float _3282 = _3268 * _1290;
        float _3284 = (cbSceneParam._m0[77u].w * _3281) / _3267;
        float _3285 = _3284 + cbSceneParam._m0[79u].w;
        float _3286 = cbSceneParam._m0[79u].w - _3280;
        float _3292 = sqrt(((_3279 * _3279) + (_3280 * _3280)) + (_3282 * _3282));
        float _3295 = (1.0 - (cbSceneParam._m0[77u].w / _3267)) * _3292;
        float _3300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3302 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3479;
        if (abs((_3281 - _3284) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3479 = ((((_3285 > 0.0) ? exp2(_3300 * _3285) : (2.0 - exp2(_3302 * _3285))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3295;
        }
        else
        {
            float _3423 = 1.0 / cbSceneParam._m0[80u].x;
            float _3424 = isnan(_3286) ? _3285 : (isnan(_3285) ? _3286 : max(_3285, _3286));
            float _3425 = isnan(_3286) ? _3285 : (isnan(_3285) ? _3286 : min(_3285, _3286));
            float _3434 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : min(_3424, 0.0));
            float _3435 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : min(_3425, 0.0));
            _3479 = ((abs(_3292 / _3281) * cbSceneParam._m0[80u].y) * ((((_3434 - _3435) * 2.0) - ((exp2(_3300 * (isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0)))) - exp2(_3300 * (isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))))) * _3423)) - ((exp2(_3302 * _3434) - exp2(_3302 * _3435)) * _3423))) + (_3295 * cbSceneParam._m0[80u].z);
        }
        vec4 _3481 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3192, _3193, 1.0), 0.0);
        float _3490 = exp2((_3479 * (-1.44269502162933349609375)) * (1.0 - _3481.w));
        float _3491 = log2(_3490);
        float _3507 = log2(_3212);
        _3304 = (exp2(_3507 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].x)) * _3481.x) / cbSceneParam._m0[78u].x)) + _3209;
        _3306 = (exp2(_3507 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].y)) * _3481.y) / cbSceneParam._m0[78u].y)) + _3210;
        _3308 = (exp2(_3507 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].z)) * _3481.z) / cbSceneParam._m0[78u].z)) + _3211;
        _3310 = _3490 * _3212;
    }
    else
    {
        _3304 = _3209;
        _3306 = _3210;
        _3308 = _3211;
        _3310 = _3212;
    }
    bool _3517;
    vec4 _3320;
    vec4 _3342;
    float _3344;
    float _3348;
    float _3349;
    float _3350;
    float _3351;
    bool _3361;
    for (;;)
    {
        _3320 = cbMatDynParam._m0[0u];
        float _3322 = roundEven(_3320.y);
        bool _3323 = _3322 == 3.0;
        float _3324 = log2(_3310);
        float _3331 = exp2(_3324 * cbSceneParam._m0[78u].x) * _3181;
        float _3332 = exp2(_3324 * cbSceneParam._m0[78u].y) * _3182;
        float _3333 = exp2(_3324 * cbSceneParam._m0[78u].z) * _3183;
        float _3340 = _1304 + (-0.5);
        _3342 = cbMtdParam._m0[1u];
        _3344 = _3342.y * _3340;
        float _3347 = (_3322 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3348 = _3347 * (_3323 ? _3331 : (_3331 + (cbSceneParam._m0[72u].w * _3304)));
        _3349 = _3347 * (_3323 ? _3332 : (_3332 + (cbSceneParam._m0[72u].w * _3306)));
        _3350 = _3347 * (_3323 ? _3333 : (_3333 + (cbSceneParam._m0[72u].w * _3308)));
        _3351 = _3340 * 0.999000012874603271484375;
        _3361 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3361)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3351) < 0.5)
            {
                _3517 = true;
                break;
            }
        }
        uint _3458 = _1353 + uint(_3320.w);
        if ((cbInstanceData._m0[_3458].w < 1.0) && ((cbInstanceData._m0[_3458].w + _3351) < 0.5))
        {
            _3517 = true;
            break;
        }
        if ((_3344 + 1.0) < _3342.x)
        {
            _3517 = true;
            break;
        }
        _3517 = false;
        break;
    }
    float _3722;
    if (_3517)
    {
        discard_state = true;
        _3722 = 0.0;
    }
    else
    {
        _3722 = cbInstanceData._m0[_3184].w;
    }
    SV_Target.x = _3348;
    SV_Target.y = _3349;
    SV_Target.z = _3350;
    SV_Target.w = _3722;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3184].w;
    discard_exit();
}


