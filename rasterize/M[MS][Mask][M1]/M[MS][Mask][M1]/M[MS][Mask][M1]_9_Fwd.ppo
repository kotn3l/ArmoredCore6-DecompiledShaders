#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1331;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3660 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3671 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3682 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _364 = _359.x * cbMtdParam._m0[11u].x;
    float _365 = _359.y * cbMtdParam._m0[11u].y;
    float _366 = _359.z * cbMtdParam._m0[11u].z;
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[23u].w) + _447) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3693 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _475 = (_333.x * cbMtdParam._m0[9u].x) * ((_465 * ((_385.x * cbMtdParam._m0[12u].x) - _364)) + _364);
    float _476 = (_333.y * cbMtdParam._m0[9u].y) * ((_465 * ((_385.y * cbMtdParam._m0[12u].y) - _365)) + _365);
    float _477 = (_333.z * cbMtdParam._m0[9u].z) * ((_465 * ((_385.z * cbMtdParam._m0[12u].z) - _366)) + _366);
    float _481 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _475;
    float _484 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _476;
    float _487 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _477;
    float _495 = (((_475 - _481) * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) + _481) * 4.55000019073486328125;
    float _497 = (((_476 - _484) * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) + _484) * 4.55000019073486328125;
    float _499 = (((_477 - _487) * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) + _487) * 4.55000019073486328125;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _558 = _554.z;
    float _567 = ((_537.z - _558) * _465) + _558;
    float _570 = ((((_537.x - _556) * _465) + _556) * 2.0) + (-1.0);
    float _571 = ((((_537.y - _557) * _465) + _557) * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3704 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _611 = (_570 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_512.x * 2.0) + (-1.0)))) + (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _612 = (_571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_512.y * 2.0) + (-1.0)))) + (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _656 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_626 - _627) * cbMtdParam._m0[24u].w) + _627) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3715 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _665 = ((((cbMtdParam._m0[10u].x - _495) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _657) + _495;
    float _666 = ((((cbMtdParam._m0[10u].y - _497) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _657) + _497;
    float _667 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _499)) * _657) + _499;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _695 = _693.x;
    float _712 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _695) * _465) + _695;
    float _716 = ((_679.x - _712) * cbMtdParam._m0[19u].z) + _712;
    float _718 = _716 - (_716 * _657);
    float _723 = (((_512.z - _567) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _567;
    float _727 = ((_599.z - _723) * cbMtdParam._m0[19u].w) + _723;
    float _731 = ((cbMtdParam._m0[23u].x - _727) * _657) + _727;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _756 = (_750.x * 2.0) + (-1.0);
    float _757 = (_750.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _3726 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _774 = (_657 * (((cbMtdParam._m0[22u].z * _611) - _611) + _756)) + _611;
    float _775 = (_657 * (((cbMtdParam._m0[22u].z * _612) - _612) + _757)) + _612;
    float _776 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) - _577)) + _577;
    float _778 = cbMtdParam._m0[22u].x + _599.w;
    float _781 = fma(_776, _245 * NORMAL.x, fma(_775, _252 * TANGENT.x, (_238 * _230) * _774));
    float _784 = fma(_776, _245 * NORMAL.y, fma(_775, _252 * TANGENT.y, (_238 * _231) * _774));
    float _787 = fma(_776, _245 * NORMAL.z, fma(_775, _252 * TANGENT.z, (_238 * _232) * _774));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _3737 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _795 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3759 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3770 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3781 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3792 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _800 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _901 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _904 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _918 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_918].z;
    float _3803 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _930 = 1.0 - _800;
    float _931 = _927 * _930;
    float _932 = _928 * _930;
    float _933 = _929 * _930;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _800;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _800;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _800;
    float _941 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _957 = ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * TEXCOORD_5.w) * _953.x;
    float _958 = dot(vec3(_792, _793, _794), vec3(_871, _872, _873));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _792) - _871;
    float _966 = (_961 * _793) - _872;
    float _967 = (_961 * _794) - _873;
    float _971 = abs(dot(vec3(_871, _872, _873), vec3(_792, _793, _794)));
    float _3836 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_795);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _992 = (1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _993 = _986 * _973;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1330;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1055 = fma(_1029, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021));
        float _1059 = fma(_1029, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021));
        float _1063 = fma(_1029, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021));
        float _1088 = _1021 + _792;
        float _1089 = _1025 + _793;
        float _1090 = _1029 + _794;
        float _1100 = fma(_1090, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088)) - _1055;
        float _1101 = fma(_1090, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088)) - _1059;
        float _1102 = fma(_1090, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088)) - _1063;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1055 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1059 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[34u].z) + ((((((_1063 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1158 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1124.x + (-0.5));
        float _1160 = _1158 * (_1124.y + (-0.5));
        float _1161 = _1158 * (_1124.z + (-0.5));
        float _1168 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1131.x + (-0.5));
        float _1170 = _1168 * (_1131.y + (-0.5));
        float _1171 = _1168 * (_1131.z + (-0.5));
        float _1178 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1138.x + (-0.5));
        float _1180 = _1178 * (_1138.y + (-0.5));
        float _1181 = _1178 * (_1138.z + (-0.5));
        float _1188 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1145.x + (-0.5));
        float _1190 = _1188 * (_1145.y + (-0.5));
        float _1191 = _1188 * (_1145.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1212 = (dot(vec3(_792, _793, _794), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1222 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3884 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1224 + 1.0))) + _1229) * _1192;
        float _1239 = _1160 * 0.5;
        float _1240 = _1170 * 0.5;
        float _1241 = _1180 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_792, _793, _794), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3917 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1266 + 1.0))) + _1271) * _1193;
        float _1281 = _1161 * 0.5;
        float _1282 = _1171 * 0.5;
        float _1283 = _1181 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_792, _793, _794), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3950 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1308 + 1.0))) + _1313) * _1194;
        _1330 = _1161;
        _1332 = _1160;
        _1333 = _1159;
        _1334 = _1171;
        _1335 = _1170;
        _1336 = _1169;
        _1337 = _1181;
        _1338 = _1180;
        _1339 = _1179;
        _1340 = _1194;
        _1341 = _1193;
        _1342 = _1192;
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1331;
        _1332 = _1331;
        _1333 = _1331;
        _1334 = _1331;
        _1335 = _1331;
        _1336 = _1331;
        _1337 = _1331;
        _1338 = _1331;
        _1339 = _1331;
        _1340 = _1331;
        _1341 = _1331;
        _1342 = _1331;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1029, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021));
        float _1374 = fma(_1029, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021));
        float _1378 = fma(_1029, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021));
        float _1401 = _1021 + _792;
        float _1402 = _1025 + _793;
        float _1403 = _1029 + _794;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_792, _793, _794), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4013 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_792, _793, _794), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4046 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_792, _793, _794), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4079 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1331;
        _1640 = _1331;
        _1641 = _1331;
        _1642 = _1331;
        _1643 = _1331;
        _1644 = _1331;
        _1645 = _1331;
        _1646 = _1331;
        _1647 = _1331;
        _1648 = _1331;
        _1649 = _1331;
        _1650 = _1331;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1343)) + _1343;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1344)) + _1344;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _965 * 0.5;
    float _1708 = _966 * 0.5;
    float _1709 = _967 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1330, _1334, _1337, _1340));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1029, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1029, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1029, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1839 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1842 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1870 = frontier_phi_14_12_ladder;
        }
        float _2074;
        if (_1839 > 0.0)
        {
            _2074 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2074 = frontier_phi_23_19_ladder;
        }
        float _2328;
        if (_1842 > 0.0)
        {
            _2328 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2328 = frontier_phi_35_30_ladder;
        }
        float _2330 = isnan(_2074) ? _1870 : (isnan(_1870) ? _2074 : min(_1870, _2074));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1836) + _1825;
        float _2336 = (_2331 * _1839) + _1829;
        float _2337 = (_2331 * _1842) + _1833;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_13_35_ladder = _2465.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2465.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2465.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_13_35_ladder_2;
        _1860 = frontier_phi_13_35_ladder_1;
        _1862 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1776);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1029, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1029, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1029, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1936 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1939 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2079;
        if (_1933 > 0.0)
        {
            _2079 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2079 = frontier_phi_25_21_ladder;
        }
        float _2355;
        if (_1936 > 0.0)
        {
            _2355 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2355 = frontier_phi_37_32_ladder;
        }
        float _2568;
        if (_1939 > 0.0)
        {
            _2568 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2568 = frontier_phi_46_43_ladder;
        }
        float _2570 = isnan(_2355) ? _2079 : (isnan(_2079) ? _2355 : min(_2079, _2355));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1933) + _1922;
        float _2576 = (_2571 * _1936) + _1926;
        float _2577 = (_2571 * _1939) + _1930;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_22_46_ladder = _2776.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2776.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2776.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_22_46_ladder_2;
        _1960 = frontier_phi_22_46_ladder_1;
        _1962 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1867);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1975 = (((_992 * _941) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1958 - _1858)) + _1858);
    float _1977 = (((_992 * _943) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1960 - _1860)) + _1860);
    float _1979 = (((_992 * _944) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1962 - _1862)) + _1862);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    uvec4 _1998 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2000 = _1998.x * 14u;
    uint _2001 = _2000 + 13u;
    float _2008 = _957 + (-1.0);
    float _2013 = (cbLight._m0[_2001].x * _2008) + 1.0;
    float _2014 = (cbLight._m0[_2001].y * _2008) + 1.0;
    float _2015 = (cbLight._m0[_2001].z * _2008) + 1.0;
    float _2016 = (cbLight._m0[_2001].w * _2008) + 1.0;
    uint _2017 = _2000 + 5u;
    float _2023 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2027 = _2000 + 4u;
    float _2033 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2037 = _2000 | 1u;
    float _2048 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_792, _793, _794));
    float _2051 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_792, _793, _794));
    float _4215 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _4226 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2056 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _2058 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2065 = ((cbLight._m0[_2017].x * _2023) * _2058) + ((cbLight._m0[_2027].x * _2033) * _2056);
    float _2066 = ((_2023 * cbLight._m0[_2017].y) * _2058) + ((_2033 * cbLight._m0[_2027].y) * _2056);
    float _2067 = ((_2023 * cbLight._m0[_2017].z) * _2058) + ((_2033 * cbLight._m0[_2027].z) * _2056);
    uvec4 _2071 = floatBitsToUint(cbLight._m0[_2000 + 12u]);
    bool _2073 = _2071.x == 0u;
    float _2084;
    float _2086;
    float _2088;
    if (_2073)
    {
        _2084 = _2065;
        _2086 = _2066;
        _2088 = _2067;
    }
    else
    {
        uint _2092 = _2000 + 6u;
        float _2108 = (dot(vec3(cbLight._m0[_2000 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4237 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2111 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2084 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _2065;
        _2086 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _2066;
        _2088 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _2067;
    }
    bool _2091 = _2071.y == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2091)
    {
        _2129 = _2084;
        _2131 = _2086;
        _2133 = _2088;
    }
    else
    {
        uint _2299 = _2000 + 7u;
        float _2315 = (dot(vec3(cbLight._m0[_2000 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4253 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2318 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2129 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2084;
        _2131 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2086;
        _2133 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2088;
    }
    uint _2136 = _2000 + 8u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _795) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_2000].x + _871;
    float _2152 = cbLight._m0[_2000].y + _872;
    float _2153 = cbLight._m0[_2000].z + _873;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2000].xyz));
    float _4269 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2165 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2166 = dot(vec3(_792, _793, _794), vec3(_2158, _2159, _2160));
    float _4291 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2158, _2159, _2160));
    float _4302 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2150 * _2150;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2187 = 0.959999978542327880859375 - _938;
    float _2189 = 0.959999978542327880859375 - _939;
    float _2190 = 0.959999978542327880859375 - _940;
    float _2197 = 1.0 - _2150;
    float _2208 = (0.5 / (((_2165 * ((_2164 * _2197) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2197) + _2150) * _2164))) * _2164;
    float _4313 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    uint _2221 = _2000 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _795) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_2037].x + _871;
    float _2235 = cbLight._m0[_2037].y + _872;
    float _2236 = cbLight._m0[_2037].z + _873;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2037].xyz));
    float _4324 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2248 = dot(vec3(_792, _793, _794), vec3(_2241, _2242, _2243));
    float _4335 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2241, _2242, _2243));
    float _4346 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
    float _2274 = 1.0 - _2233;
    float _2284 = (0.5 / (((_2165 * ((_2247 * _2274) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2274) + _2233) * _2247))) * _2247;
    float _4357 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2286 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2296 = (((((_2267 * _2187) + _941) * cbLight._m0[_2221].x) * _2286) * _2023) + (((((_2186 * _2187) + _941) * cbLight._m0[_2136].x) * _2210) * _2033);
    float _2297 = (((((_2267 * _2189) + _943) * cbLight._m0[_2221].y) * _2286) * _2023) + (((((_2186 * _2189) + _943) * cbLight._m0[_2136].y) * _2210) * _2033);
    float _2298 = (((((_2267 * _2190) + _944) * cbLight._m0[_2221].z) * _2286) * _2023) + (((((_2186 * _2190) + _944) * cbLight._m0[_2136].z) * _2210) * _2033);
    float _2360;
    float _2362;
    float _2364;
    if (_2073)
    {
        _2360 = _2296;
        _2362 = _2297;
        _2364 = _2298;
    }
    else
    {
        uint _2366 = _2000 + 2u;
        uint _2370 = _2000 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _795) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _871;
        float _2387 = cbLight._m0[_2366].y + _872;
        float _2388 = cbLight._m0[_2366].z + _873;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2366].xyz));
        float _4368 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2400 = dot(vec3(_792, _793, _794), vec3(_2393, _2394, _2395));
        float _4379 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4390 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2426 = 1.0 - _2385;
        float _2436 = (0.5 / (((_2165 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2426) + _2385) * _2399))) * _2399;
        float _4401 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2360 = (((((_2419 * _2187) + _941) * cbLight._m0[_2370].x) * _2438) * _2439) + _2296;
        _2362 = (((((_2419 * _2189) + _943) * cbLight._m0[_2370].y) * _2438) * _2439) + _2297;
        _2364 = (((((_2419 * _2190) + _944) * cbLight._m0[_2370].z) * _2438) * _2439) + _2298;
    }
    float _2474;
    float _2476;
    float _2478;
    if (_2091)
    {
        _2474 = _2360;
        _2476 = _2362;
        _2478 = _2364;
    }
    else
    {
        uint _2485 = _2000 + 3u;
        uint _2489 = _2000 + 11u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _795) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _871;
        float _2506 = cbLight._m0[_2485].y + _872;
        float _2507 = cbLight._m0[_2485].z + _873;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2485].xyz));
        float _4417 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2519 = dot(vec3(_792, _793, _794), vec3(_2512, _2513, _2514));
        float _4428 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4439 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2165 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2545) + _2504) * _2518))) * _2518;
        float _4450 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2474 = (((((_2538 * _2187) + _941) * cbLight._m0[_2489].x) * _2557) * _2558) + _2360;
        _2476 = (((((_2538 * _2189) + _943) * cbLight._m0[_2489].y) * _2557) * _2558) + _2362;
        _2478 = (((((_2538 * _2190) + _944) * cbLight._m0[_2489].z) * _2557) * _2558) + _2364;
    }
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_1998.y == 0u)
    {
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2633;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2633;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2633;
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.x;
        uint _2660 = uint((float(_2648.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2649))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2649)));
        float _2670 = (log2(_2636 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2671 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        uint _2674 = uint(isnan(14.0) ? _2671 : (isnan(_2671) ? 14.0 : min(_2671, 14.0)));
        uvec4 _2679 = texelFetch(g_lightClusterGridBuffer, int(((_2674 << 2u) + (_2660 << 6u)) >> 2u));
        uint _2680 = _2679.x;
        uint _2681 = _2648.z;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((((1u << ((_2681 >> 4u) & 15u)) + 4294967295u) & _2680) == 0u) || ((_2681 & 240u) == 0u))
        {
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
        }
        else
        {
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2942)
                {
                    frontier_phi_61_pred = _2926;
                    frontier_phi_61_pred_1 = _2931;
                    frontier_phi_61_pred_2 = _2930;
                    frontier_phi_61_pred_3 = _2929;
                    frontier_phi_61_pred_4 = _2928;
                    frontier_phi_61_pred_5 = _2927;
                }
                else
                {
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    uint _3056;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2941;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    for (;;)
                    {
                        uint _3060 = uint(findLSB(_3056)) + (_2932 << 5u);
                        uint _3057 = (_3056 + 4294967295u) & _3056;
                        uint _3062 = _3060 * 48u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3082 = (_3060 * 48u) + 4u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3101 = (_3060 * 48u) + 8u;
                        vec3 _3112 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x));
                        float _3116 = _3076.x - _2634;
                        float _3117 = _3076.y - _2635;
                        float _3118 = _3076.z - _2636;
                        float _3119 = dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118));
                        float _3122 = inversesqrt(_3119);
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3126 = dot(vec3(_898, _901, _904), vec3(_3123, _3124, _3125));
                        float _3131 = 1.0 - (_3119 * _3076.w);
                        float _4476 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3133 = sqrt(_3119) * _3095.w;
                        float _3136 = 1.39999997615814208984375 / (_3133 + 1.39999997615814208984375);
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3126) + _3137;
                        float _3143 = _3133 * _3133;
                        float _3147 = ((isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))) * _3132) / ((_3143 * 0.699999988079071044921875) + 1.0);
                        float _3151 = (-0.0) - _2634;
                        float _3152 = (-0.0) - _2635;
                        float _3153 = (-0.0) - _2636;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3168 = exp2(log2(1.0 / ((_3143 * 3.5) + 5.0)) * 0.25);
                        float _3169 = 1.0 - _973;
                        float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                        float _3177 = _3176 * _3176;
                        float _3178 = _3177 * _3177;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3189 = dot(vec3(_898, _901, _904), vec3(_3158, _3159, _3160));
                        float _4492 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3193 = dot(vec3(_898, _901, _904), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                        float _4503 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                        float _3201 = _3136 * _3177;
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3126) + _3202;
                        float _4514 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3207 = 1.0 - _3177;
                        float _3217 = (0.5 / (((_3206 * ((_3192 * _3207) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3177) * _3192))) * _3206;
                        float _4525 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3228 = (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3200 * _3200) * ((_3143 * 2.1991131305694580078125) + 3.141590118408203125))) * _3132;
                        _2985 = (_3147 * _3095.x) + _3053;
                        _2986 = (_3147 * _3095.y) + _3054;
                        _2987 = (_3147 * _3095.z) + _3055;
                        _2982 = (_3228 * _3112.x) + _3050;
                        _2983 = (_3228 * _3112.y) + _3051;
                        _2984 = (_3228 * _3112.z) + _3052;
                        if (_3057 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _3057;
                        }
                    }
                    frontier_phi_61_pred = _2982;
                    frontier_phi_61_pred_1 = _2987;
                    frontier_phi_61_pred_2 = _2986;
                    frontier_phi_61_pred_3 = _2985;
                    frontier_phi_61_pred_4 = _2984;
                    frontier_phi_61_pred_5 = _2983;
                }
                _2782 = frontier_phi_61_pred;
                _2792 = frontier_phi_61_pred_1;
                _2790 = frontier_phi_61_pred_2;
                _2788 = frontier_phi_61_pred_3;
                _2786 = frontier_phi_61_pred_4;
                _2784 = frontier_phi_61_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2782;
                    _2927 = _2784;
                    _2928 = _2786;
                    _2929 = _2788;
                    _2930 = _2790;
                    _2931 = _2792;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
        }
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.z;
        uint _2798 = (_2796 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2798) & _2680) == 0u)
        {
            _2894 = _2781;
            _2896 = _2783;
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
            float _2920 = _2919 * _2634;
            float _2921 = _2919 * _2635;
            float _2922 = _2919 * _2636;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2798 < ((_2796 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3033 = _2781;
                float _3034 = _2783;
                float _3035 = _2785;
                float _3036 = _2787;
                float _3037 = _2789;
                float _3038 = _2791;
                uint _3039 = _2798;
                uint _3048;
                bool _3049;
                for (;;)
                {
                    _3048 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                    _3049 = _3048 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3049)
                    {
                        frontier_phi_67_pred = _3036;
                        frontier_phi_67_pred_1 = _3037;
                        frontier_phi_67_pred_2 = _3038;
                        frontier_phi_67_pred_3 = _3035;
                        frontier_phi_67_pred_4 = _3034;
                        frontier_phi_67_pred_5 = _3033;
                    }
                    else
                    {
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        uint _3252 = _3048;
                        uint _3253;
                        vec4 _3278;
                        float _3279;
                        vec4 _3294;
                        vec3 _3306;
                        vec4 _3321;
                        vec4 _3336;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3263 = ((_3039 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3252));
                            _3253 = (_3252 + 4294967295u) & _3252;
                            uint _3265 = _3263 * 40u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3279 = _3278.w;
                            uint _3281 = (_3263 * 40u) + 4u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3263 * 40u) + 8u;
                            _3306 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x));
                            uint _3308 = (_3263 * 40u) + 16u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3263 * 40u) + 20u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3263 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3263 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2636, _3370.z, fma(_2635, _3370.y, _3370.x * _2634)) + _3370.w;
                            _3383 = !((fma(_2636, _3351.z, fma(_2635, _3351.y, _3351.x * _2634)) + _3351.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3278.x - _2634;
                                float _3411 = _3278.y - _2635;
                                float _3412 = _3278.z - _2636;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3279 * _3279));
                                float _4536 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3428 = sqrt(_3413) * _3294.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_898, _901, _904))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2636, _3321.z, fma(_2635, _3321.y, _3321.x * _2634)) + _3321.w) / _3382;
                                float _3442 = (fma(_2636, _3336.z, fma(_2635, _3336.y, _3336.x * _2634)) + _3336.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4552 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _973;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2920;
                                float _3472 = _3418 - _2921;
                                float _3473 = _3419 - _2922;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_898, _901, _904), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4563 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3485 = dot(vec3(_898, _901, _904), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4574 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_898, _901, _904), vec3(_3417, _3418, _3419))) + _3494;
                                float _4585 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4596 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3522 * _3306.x;
                                frontier_phi_73_pred_1 = _3522 * _3306.y;
                                frontier_phi_73_pred_2 = _3448 * _3294.z;
                                frontier_phi_73_pred_3 = _3448 * _3294.y;
                                frontier_phi_73_pred_4 = _3448 * _3294.x;
                                frontier_phi_73_pred_5 = _3522 * _3306.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3526 = frontier_phi_73_pred;
                            _3527 = frontier_phi_73_pred_1;
                            _3531 = frontier_phi_73_pred_2;
                            _3530 = frontier_phi_73_pred_3;
                            _3529 = frontier_phi_73_pred_4;
                            _3528 = frontier_phi_73_pred_5;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            if (_3253 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3253;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3236;
                        frontier_phi_67_pred_1 = _3237;
                        frontier_phi_67_pred_2 = _3238;
                        frontier_phi_67_pred_3 = _3235;
                        frontier_phi_67_pred_4 = _3234;
                        frontier_phi_67_pred_5 = _3233;
                    }
                    _2901 = frontier_phi_67_pred;
                    _2903 = frontier_phi_67_pred_1;
                    _2905 = frontier_phi_67_pred_2;
                    _2899 = frontier_phi_67_pred_3;
                    _2897 = frontier_phi_67_pred_4;
                    _2895 = frontier_phi_67_pred_5;
                    uint _3040 = _3039 + 1u;
                    if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3033 = _2895;
                        _3034 = _2897;
                        _3035 = _2899;
                        _3036 = _2901;
                        _3037 = _2903;
                        _3038 = _2905;
                        _3039 = _3040;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2903;
                frontier_phi_55_56_ladder_1 = _2905;
                frontier_phi_55_56_ladder_2 = _2901;
                frontier_phi_55_56_ladder_3 = _2899;
                frontier_phi_55_56_ladder_4 = _2897;
                frontier_phi_55_56_ladder_5 = _2895;
            }
            else
            {
                frontier_phi_55_56_ladder = _2789;
                frontier_phi_55_56_ladder_1 = _2791;
                frontier_phi_55_56_ladder_2 = _2787;
                frontier_phi_55_56_ladder_3 = _2785;
                frontier_phi_55_56_ladder_4 = _2783;
                frontier_phi_55_56_ladder_5 = _2781;
            }
            _2894 = frontier_phi_55_56_ladder_5;
            _2896 = frontier_phi_55_56_ladder_4;
            _2898 = frontier_phi_55_56_ladder_3;
            _2900 = frontier_phi_55_56_ladder_2;
            _2902 = frontier_phi_55_56_ladder;
            _2904 = frontier_phi_55_56_ladder_1;
        }
        float _2909 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2693 = (_2909 * _2900) + _2129;
        _2695 = (_2909 * _2902) + _2131;
        _2697 = (_2909 * _2904) + _2133;
        _2699 = ((_2894 * _941) * _2909) + _2474;
        _2701 = ((_2896 * _943) * _2909) + _2476;
        _2703 = ((_2898 * _944) * _2909) + _2478;
    }
    else
    {
        _2693 = _2129;
        _2695 = _2131;
        _2697 = _2133;
        _2699 = _2474;
        _2701 = _2476;
        _2703 = _2478;
    }
    float _4612 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4623 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4634 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    uint _2723 = _277 + 6u;
    float _2731 = _879 / cbSceneParam._m0[86u].x;
    float _2732 = _880 / cbSceneParam._m0[86u].y;
    vec4 _2746 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2731, _2732, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2748 = _2746.x;
    float _2749 = _2746.y;
    float _2750 = _2746.z;
    float _2751 = _2746.w;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2806 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2807 = _2806 / _814;
        float _2818 = _2807 * _864;
        float _2819 = _865 * _2807;
        float _2820 = (-0.0) - _2819;
        float _2822 = _2807 * _866;
        float _2824 = (cbSceneParam._m0[77u].w * _2820) / _2806;
        float _2825 = _2824 + cbSceneParam._m0[79u].w;
        float _2826 = cbSceneParam._m0[79u].w - _2819;
        float _2832 = sqrt(((_2818 * _2818) + (_2819 * _2819)) + (_2822 * _2822));
        float _2835 = (1.0 - (cbSceneParam._m0[77u].w / _2806)) * _2832;
        float _2840 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2842 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2995;
        if (abs((_2820 - _2824) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2995 = ((((_2825 > 0.0) ? exp2(_2840 * _2825) : (2.0 - exp2(_2842 * _2825))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2835;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : max(_2825, _2826));
            float _2957 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : min(_2825, _2826));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _2995 = ((abs(_2832 / _2820) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2840 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2840 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2842 * _2966) - exp2(_2842 * _2967)) * _2955))) + (_2835 * cbSceneParam._m0[80u].z);
        }
        vec4 _2997 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2731, _2732, 1.0), 0.0);
        float _3006 = exp2((_2995 * (-1.44269502162933349609375)) * (1.0 - _2997.w));
        float _3007 = log2(_3006);
        float _3023 = log2(_2751);
        _2844 = (exp2(_3023 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].x)) * _2997.x) / cbSceneParam._m0[78u].x)) + _2748;
        _2846 = (exp2(_3023 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].y)) * _2997.y) / cbSceneParam._m0[78u].y)) + _2749;
        _2848 = (exp2(_3023 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].z)) * _2997.z) / cbSceneParam._m0[78u].z)) + _2750;
        _2850 = _3006 * _2751;
    }
    else
    {
        _2844 = _2748;
        _2846 = _2749;
        _2848 = _2750;
        _2850 = _2751;
    }
    float _2862 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2863 = _2862 == 3.0;
    float _2864 = log2(_2850);
    float _2871 = exp2(_2864 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2693 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _957))) + ((_2699 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2872 = exp2(_2864 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2695 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _957))) + ((_2701 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2873 = exp2(_2864 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2697 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _957))) + ((_2703 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2882 = (_2862 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2882 * (_2863 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.y = _2882 * (_2863 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.z = _2882 * (_2863 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.w = cbInstanceData._m0[_2723].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2723].w;
}


