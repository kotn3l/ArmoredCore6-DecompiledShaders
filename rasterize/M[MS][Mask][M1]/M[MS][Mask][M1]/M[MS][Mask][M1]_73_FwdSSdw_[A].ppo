#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1468;
float _3872;
float _3873;
float _3874;
float _3875;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3884 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3895 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3906 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _453 = (_446 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _454 = (_446 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _455 = (_446 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3928 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) + _538;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _446) + _608;
    float _618 = ((_589.y - _609) * _446) + _609;
    float _619 = ((_589.z - _610) * _446) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _644 = ((_631.z - _619) * _519) + _619;
    float _647 = ((((_631.x - _617) * _519) + _617) * 2.0) + (-1.0);
    float _648 = ((((_631.y - _618) * _519) + _618) * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3939 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _684 = (_647 + ((((_564.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_672.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _685 = (_648 + ((((_564.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_672.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _688 = fma(_654, _247, fma(_685, _254, _684 * _240));
    float _691 = fma(_654, _248, fma(_685, _255, _684 * _241));
    float _694 = fma(_654, _249, fma(_685, _256, _684 * _242));
    float _698 = inversesqrt(dot(vec3(_688, _691, _694), vec3(_688, _691, _694)));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _727 = _725.x;
    float _728 = 1.0 - _727;
    float _737 = (cbMtdParam._m0[19u].x + dot(vec4(_698 * _688, _698 * _691, _698 * _694, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_727 - _728) * cbMtdParam._m0[24u].z) + _728) * cbMtdParam._m0[21u].z);
    float _3950 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _745 = (_738 * (cbMtdParam._m0[17u].x - _545)) + _545;
    float _746 = (_738 * (cbMtdParam._m0[17u].y - _546)) + _546;
    float _747 = (_738 * (cbMtdParam._m0[17u].z - _547)) + _547;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _775 = _773.x;
    float _793 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _775) * _446) + _775;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _793) * _519) + _793;
    float _814 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _810) * cbMtdParam._m0[19u].z) + _810;
    float _816 = _814 - (_814 * _738);
    float _821 = (((_564.z - _644) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _644;
    float _825 = ((_672.z - _821) * cbMtdParam._m0[19u].w) + _821;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _845 = (_838.x * 2.0) + (-1.0);
    float _846 = (_838.y * 2.0) + (-1.0);
    float _847 = dot(vec2(_845, _846), vec2(_845, _846));
    float _3961 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _855 = ((_838.z - _825) * _738) + _825;
    float _865 = ((sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _654) * _738) + _654;
    float _868 = (((_845 - _684) * _738) + _684) + (cbMtdParam._m0[21u].x * _684);
    float _869 = (((_846 - _685) * _738) + _685) + (cbMtdParam._m0[21u].x * _685);
    float _873 = cbMtdParam._m0[22u].x + _672.w;
    float _876 = fma(_865, _247, fma(_869, _254, _868 * _240));
    float _879 = fma(_865, _248, fma(_869, _255, _868 * _241));
    float _882 = fma(_865, _249, fma(_869, _256, _868 * _242));
    float _886 = inversesqrt(dot(vec3(_876, _879, _882), vec3(_876, _879, _882)));
    float _887 = _886 * _876;
    float _888 = _886 * _879;
    float _889 = _886 * _882;
    float _3972 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _890 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _3994 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4005 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4016 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4027 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _895 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _909 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    vec4 _974 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _976 = _974.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1148 = sqrt(((_960 * _960) + (_961 * _961)) + (_962 * _962));
        float _1154 = (cbMatDynParam._m0[5u].x * _1148) + cbMatDynParam._m0[5u].y;
        float _4038 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1159 = (cbMatDynParam._m0[5u].z * _1148) + cbMatDynParam._m0[5u].w;
        float _4049 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) - _1155)) + _1155) < ((_976 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _987 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _988 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1006 = fma(_889, cbSceneParam._m0[5u].z, fma(_888, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _887));
    float _1009 = fma(_889, cbSceneParam._m0[6u].z, fma(_888, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _887));
    float _1012 = fma(_889, cbSceneParam._m0[7u].z, fma(_888, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _887));
    uint _1025 = _280 + 9u;
    uint _1026 = _1025 + uint(cbMatDynParam._m0[0u].w);
    float _1032 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_1026].x;
    float _1033 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1026].y;
    float _1034 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1026].z;
    float _4060 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1038 = 1.0 - _895;
    float _1039 = _1035 * _1038;
    float _1040 = _1036 * _1038;
    float _1041 = _1037 * _1038;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _895;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _895;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _895;
    float _1049 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _987, cbSceneParam._m0[86u].y * _988));
    float _1065 = ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * TEXCOORD_5.w) * _1061.x;
    float _1066 = dot(vec3(_887, _888, _889), vec3(_967, _968, _969));
    float _1069 = _1066 * 2.0;
    float _1073 = (_1069 * _887) - _967;
    float _1074 = (_1069 * _888) - _968;
    float _1075 = (_1069 * _889) - _969;
    float _1079 = abs(dot(vec3(_967, _968, _969), vec3(_887, _888, _889)));
    float _4093 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1081 = sqrt(_890);
    float _1094 = exp2((_1081 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1081 * 3.0));
    float _1100 = (1.0 - _1094) * ((_1081 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1101 = _1094 * _1081;
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1467;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1192 = fma(_1137, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129));
        float _1196 = fma(_1137, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129));
        float _1200 = fma(_1137, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129));
        float _1225 = _1129 + _887;
        float _1226 = _1133 + _888;
        float _1227 = _1137 + _889;
        float _1237 = fma(_1227, cbModelParam._m0[26u].z, fma(_1226, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1225)) - _1192;
        float _1238 = fma(_1227, cbModelParam._m0[27u].z, fma(_1226, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1225)) - _1196;
        float _1239 = fma(_1227, cbModelParam._m0[28u].z, fma(_1226, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1225)) - _1200;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1192 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1196 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[34u].z) + ((((((_1200 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1295 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1261.x + (-0.5));
        float _1297 = _1295 * (_1261.y + (-0.5));
        float _1298 = _1295 * (_1261.z + (-0.5));
        float _1305 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1268.x + (-0.5));
        float _1307 = _1305 * (_1268.y + (-0.5));
        float _1308 = _1305 * (_1268.z + (-0.5));
        float _1315 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1275.x + (-0.5));
        float _1317 = _1315 * (_1275.y + (-0.5));
        float _1318 = _1315 * (_1275.z + (-0.5));
        float _1325 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1282.x + (-0.5));
        float _1327 = _1325 * (_1282.y + (-0.5));
        float _1328 = _1325 * (_1282.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1349 = (dot(vec3(_887, _888, _889), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1359 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4141 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1361 + 1.0))) + _1366) * _1329;
        float _1376 = _1297 * 0.5;
        float _1377 = _1307 * 0.5;
        float _1378 = _1317 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_887, _888, _889), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4174 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1403 + 1.0))) + _1408) * _1330;
        float _1418 = _1298 * 0.5;
        float _1419 = _1308 * 0.5;
        float _1420 = _1318 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_887, _888, _889), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4207 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1445 + 1.0))) + _1450) * _1331;
        _1467 = _1298;
        _1469 = _1297;
        _1470 = _1296;
        _1471 = _1308;
        _1472 = _1307;
        _1473 = _1306;
        _1474 = _1318;
        _1475 = _1317;
        _1476 = _1316;
        _1477 = _1331;
        _1478 = _1330;
        _1479 = _1329;
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1468;
        _1469 = _1468;
        _1470 = _1468;
        _1471 = _1468;
        _1472 = _1468;
        _1473 = _1468;
        _1474 = _1468;
        _1475 = _1468;
        _1476 = _1468;
        _1477 = _1468;
        _1478 = _1468;
        _1479 = _1468;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1509 = fma(_1137, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129));
        float _1513 = fma(_1137, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129));
        float _1517 = fma(_1137, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129));
        float _1540 = _1129 + _887;
        float _1541 = _1133 + _888;
        float _1542 = _1137 + _889;
        float _1552 = fma(_1542, cbModelParam._m0[30u].z, fma(_1541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1540)) - _1509;
        float _1553 = fma(_1542, cbModelParam._m0[31u].z, fma(_1541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1540)) - _1513;
        float _1554 = fma(_1542, cbModelParam._m0[32u].z, fma(_1541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1540)) - _1517;
        float _1558 = inversesqrt(dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554)));
        float _1571 = ((_1558 * _1552) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1509 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1558 * _1553) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1513 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1573 = ((_1558 * _1554) / cbModelParam._m0[35u].z) + ((((((_1517 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        float _1608 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1575.x + (-0.5));
        float _1610 = _1608 * (_1575.y + (-0.5));
        float _1611 = _1608 * (_1575.z + (-0.5));
        float _1618 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1582.x + (-0.5));
        float _1620 = _1618 * (_1582.y + (-0.5));
        float _1621 = _1618 * (_1582.z + (-0.5));
        float _1628 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1589.x + (-0.5));
        float _1630 = _1628 * (_1589.y + (-0.5));
        float _1631 = _1628 * (_1589.z + (-0.5));
        float _1638 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1596.x + (-0.5));
        float _1640 = _1638 * (_1596.y + (-0.5));
        float _1641 = _1638 * (_1596.z + (-0.5));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = _1609 * 0.5;
        float _1646 = _1619 * 0.5;
        float _1647 = _1629 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_887, _888, _889), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4270 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1672 + 1.0))) + _1677) * _1642;
        float _1687 = _1610 * 0.5;
        float _1688 = _1620 * 0.5;
        float _1689 = _1630 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_887, _888, _889), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4303 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1714 + 1.0))) + _1719) * _1643;
        float _1729 = _1611 * 0.5;
        float _1730 = _1621 * 0.5;
        float _1731 = _1631 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_887, _888, _889), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4336 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1756 + 1.0))) + _1761) * _1644;
        _1778 = _1611;
        _1779 = _1610;
        _1780 = _1609;
        _1781 = _1621;
        _1782 = _1620;
        _1783 = _1619;
        _1784 = _1631;
        _1785 = _1630;
        _1786 = _1629;
        _1787 = _1644;
        _1788 = _1643;
        _1789 = _1642;
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
    }
    else
    {
        _1778 = _1468;
        _1779 = _1468;
        _1780 = _1468;
        _1781 = _1468;
        _1782 = _1468;
        _1783 = _1468;
        _1784 = _1468;
        _1785 = _1468;
        _1786 = _1468;
        _1787 = _1468;
        _1788 = _1468;
        _1789 = _1468;
        _1790 = 0.0;
        _1791 = 0.0;
        _1792 = 0.0;
    }
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1480)) + _1480;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1481)) + _1481;
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1482)) + _1482;
    float _1825 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1802));
    float _1846 = _1073 * 0.5;
    float _1847 = _1074 * 0.5;
    float _1848 = _1075 * 0.5;
    float _1849 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1852 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1855 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1889;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1862 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1467, _1471, _1474, _1477));
        float _1866 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1469, _1472, _1475, _1478));
        float _1870 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1470, _1473, _1476, _1479));
        float _1877 = dot(vec4(cbModelParam._m0[39u]), vec4(_1846, _1847, _1848, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1900;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1891 = dot(vec4(cbModelParam._m0[40u]), vec4(_1846, _1847, _1848, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1904 = (_1900 * cbModelParam._m0[1u].x) + (_1889 * (1.0 - cbModelParam._m0[1u].x));
    float _1914 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _890);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1914 : min(cbModelParam._m0[25u].z, _1914));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1963 = fma(_1137, cbModelParam._m0[13u].z, fma(_1133, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129)) + cbModelParam._m0[13u].w;
        float _1967 = fma(_1137, cbModelParam._m0[14u].z, fma(_1133, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129)) + cbModelParam._m0[14u].w;
        float _1971 = fma(_1137, cbModelParam._m0[15u].z, fma(_1133, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129)) + cbModelParam._m0[15u].w;
        float _1974 = fma(_1075, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073));
        float _1977 = fma(_1075, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073));
        float _1980 = fma(_1075, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073));
        float _2008;
        if (_1974 > 0.0)
        {
            _2008 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2008 = frontier_phi_17_15_ladder;
        }
        float _2232;
        if (_1977 > 0.0)
        {
            _2232 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2232 = frontier_phi_26_22_ladder;
        }
        float _2489;
        if (_1980 > 0.0)
        {
            _2489 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2489 = frontier_phi_38_33_ladder;
        }
        float _2491 = isnan(_2232) ? _2008 : (isnan(_2008) ? _2232 : min(_2008, _2232));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1974) + _1963;
        float _2497 = (_2492 * _1977) + _1967;
        float _2498 = (_2492 * _1980) + _1971;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2499;
        float _2503 = _2499 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 > _2503) || ((_2497 < _2501) || ((_2496 < _2501) || (_2496 > _2503))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2498, cbModelParam._m0[9u].z, fma(_2497, cbModelParam._m0[9u].y, _2496 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2498, cbModelParam._m0[10u].z, fma(_2497, cbModelParam._m0[10u].y, _2496 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2498, cbModelParam._m0[11u].z, fma(_2497, cbModelParam._m0[11u].y, _2496 * cbModelParam._m0[11u].x))), _1915);
            frontier_phi_16_38_ladder = _2626.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2626.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2626.x * cbModelParam._m0[1u].y;
        }
        _1996 = frontier_phi_16_38_ladder_2;
        _1998 = frontier_phi_16_38_ladder_1;
        _2000 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1073, _1074, _1075), _1915);
        _1996 = _1984.x * cbModelParam._m0[1u].y;
        _1998 = _1984.y * cbModelParam._m0[1u].y;
        _2000 = _1984.z * cbModelParam._m0[1u].y;
    }
    float _2004 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _890);
    float _2005 = isnan(_2004) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2004 : min(cbModelParam._m0[25u].w, _2004));
    float _2095;
    float _2097;
    float _2099;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2059 = fma(_1137, cbModelParam._m0[21u].z, fma(_1133, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129)) + cbModelParam._m0[21u].w;
        float _2063 = fma(_1137, cbModelParam._m0[22u].z, fma(_1133, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129)) + cbModelParam._m0[22u].w;
        float _2067 = fma(_1137, cbModelParam._m0[23u].z, fma(_1133, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129)) + cbModelParam._m0[23u].w;
        float _2070 = fma(_1075, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073));
        float _2073 = fma(_1075, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073));
        float _2076 = fma(_1075, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073));
        float _2237;
        if (_2070 > 0.0)
        {
            _2237 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2237 = frontier_phi_28_24_ladder;
        }
        float _2516;
        if (_2073 > 0.0)
        {
            _2516 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2516 = frontier_phi_40_35_ladder;
        }
        float _2729;
        if (_2076 > 0.0)
        {
            _2729 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2729 = frontier_phi_49_46_ladder;
        }
        float _2731 = isnan(_2516) ? _2237 : (isnan(_2237) ? _2516 : min(_2237, _2516));
        float _2732 = isnan(_2729) ? _2731 : (isnan(_2731) ? _2729 : min(_2731, _2729));
        float _2736 = (_2732 * _2070) + _2059;
        float _2737 = (_2732 * _2073) + _2063;
        float _2738 = (_2732 * _2076) + _2067;
        float _2739 = _2732 * 9.9999997473787516355514526367188e-05;
        float _2740 = (-1.0) - _2739;
        float _2742 = _2739 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2738 > _2742) || ((_2738 < _2740) || ((_2737 > _2742) || ((_2737 < _2740) || ((_2736 < _2740) || (_2736 > _2742))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2738, cbModelParam._m0[17u].z, fma(_2737, cbModelParam._m0[17u].y, _2736 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2738, cbModelParam._m0[18u].z, fma(_2737, cbModelParam._m0[18u].y, _2736 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2738, cbModelParam._m0[19u].z, fma(_2737, cbModelParam._m0[19u].y, _2736 * cbModelParam._m0[19u].x))), _2005);
            frontier_phi_25_49_ladder = _2937.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2937.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2937.x * cbModelParam._m0[1u].z;
        }
        _2095 = frontier_phi_25_49_ladder_2;
        _2097 = frontier_phi_25_49_ladder_1;
        _2099 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1073, _1074, _1075), _2005);
        _2095 = _2079.x * cbModelParam._m0[1u].z;
        _2097 = _2079.y * cbModelParam._m0[1u].z;
        _2099 = _2079.z * cbModelParam._m0[1u].z;
    }
    float _2112 = (((_1100 * _1049) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2095 - _1996)) + _1996);
    float _2114 = (((_1100 * _1051) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2097 - _1998)) + _1998);
    float _2116 = (((_1100 * _1052) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2119 = fma(_2116, cbSceneParam._m0[89u].z, fma(_2114, cbSceneParam._m0[89u].y, _2112 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2116, cbSceneParam._m0[90u].z, fma(_2114, cbSceneParam._m0[90u].y, _2112 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2116, cbSceneParam._m0[91u].z, fma(_2114, cbSceneParam._m0[91u].y, _2112 * cbSceneParam._m0[91u].x));
    vec4 _2133 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_987, _988));
    float _2135 = _2133.w;
    float _2147 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2135);
    float _2148 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2135);
    float _2149 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2135);
    uvec4 _2153 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2155 = _2153.x * 14u;
    uint _2156 = _2155 + 13u;
    float _2163 = _1065 + (-1.0);
    float _2168 = (cbLight._m0[_2156].x * _2163) + 1.0;
    float _2169 = (cbLight._m0[_2156].y * _2163) + 1.0;
    float _2170 = (cbLight._m0[_2156].z * _2163) + 1.0;
    float _2171 = (cbLight._m0[_2156].w * _2163) + 1.0;
    uint _2172 = _2155 + 5u;
    float _2178 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2182 = _2155 + 4u;
    float _2191 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2195 = _2155 | 1u;
    float _2206 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_887, _888, _889));
    float _2209 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_887, _888, _889));
    float _4472 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _4483 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2214 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2216 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2223 = ((cbLight._m0[_2172].x * _2178) * _2216) + (((cbLight._m0[_2182].x * _2147) * _2191) * _2214);
    float _2224 = ((_2178 * cbLight._m0[_2172].y) * _2216) + (((cbLight._m0[_2182].y * _2148) * _2191) * _2214);
    float _2225 = ((_2178 * cbLight._m0[_2172].z) * _2216) + (((cbLight._m0[_2182].z * _2149) * _2191) * _2214);
    uvec4 _2229 = floatBitsToUint(cbLight._m0[_2155 + 12u]);
    bool _2231 = _2229.x == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2231)
    {
        _2242 = _2223;
        _2244 = _2224;
        _2246 = _2225;
    }
    else
    {
        uint _2250 = _2155 + 6u;
        float _2266 = (dot(vec3(cbLight._m0[_2155 + 2u].xyz), vec3(_887, _888, _889)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4494 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2269 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2242 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2223;
        _2244 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2224;
        _2246 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2225;
    }
    bool _2249 = _2229.y == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2249)
    {
        _2287 = _2242;
        _2289 = _2244;
        _2291 = _2246;
    }
    else
    {
        uint _2460 = _2155 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2155 + 3u].xyz), vec3(_887, _888, _889)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4510 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2479 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2287 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2242;
        _2289 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2244;
        _2291 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2246;
    }
    uint _2294 = _2155 + 8u;
    float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _890) * 0.949999988079071044921875);
    float _2308 = _2307 * _2307;
    float _2309 = cbLight._m0[_2155].x + _967;
    float _2310 = cbLight._m0[_2155].y + _968;
    float _2311 = cbLight._m0[_2155].z + _969;
    float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
    float _2316 = _2315 * _2309;
    float _2317 = _2315 * _2310;
    float _2318 = _2315 * _2311;
    float _2319 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2155].xyz));
    float _4526 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _4537 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2323 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2324 = dot(vec3(_887, _888, _889), vec3(_2316, _2317, _2318));
    float _4548 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2328 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2316, _2317, _2318));
    float _4559 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2332 = _2308 * _2308;
    float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
    float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
    float _2345 = 0.959999978542327880859375 - _1046;
    float _2347 = 0.959999978542327880859375 - _1047;
    float _2348 = 0.959999978542327880859375 - _1048;
    float _2355 = 1.0 - _2308;
    float _2366 = (0.5 / (((_2323 * ((_2322 * _2355) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2355) + _2308) * _2322))) * _2322;
    float _4570 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
    uint _2382 = _2155 + 9u;
    float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _890) * 0.949999988079071044921875);
    float _2394 = _2393 * _2393;
    float _2395 = cbLight._m0[_2195].x + _967;
    float _2396 = cbLight._m0[_2195].y + _968;
    float _2397 = cbLight._m0[_2195].z + _969;
    float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
    float _2402 = _2401 * _2395;
    float _2403 = _2401 * _2396;
    float _2404 = _2401 * _2397;
    float _2405 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2195].xyz));
    float _4581 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2409 = dot(vec3(_887, _888, _889), vec3(_2402, _2403, _2404));
    float _4592 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2413 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2402, _2403, _2404));
    float _4603 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2417 = _2394 * _2394;
    float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
    float _2435 = 1.0 - _2394;
    float _2445 = (0.5 / (((_2323 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2435) + _2394) * _2408))) * _2408;
    float _4614 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
    float _2457 = (((((_2428 * _2345) + _1049) * cbLight._m0[_2382].x) * _2447) * _2178) + ((((cbLight._m0[_2294].x * _2147) * ((_2344 * _2345) + _1049)) * _2368) * _2191);
    float _2458 = (((((_2428 * _2347) + _1051) * cbLight._m0[_2382].y) * _2447) * _2178) + ((((cbLight._m0[_2294].y * _2148) * ((_2344 * _2347) + _1051)) * _2368) * _2191);
    float _2459 = (((((_2428 * _2348) + _1052) * cbLight._m0[_2382].z) * _2447) * _2178) + ((((cbLight._m0[_2294].z * _2149) * ((_2344 * _2348) + _1052)) * _2368) * _2191);
    float _2521;
    float _2523;
    float _2525;
    if (_2231)
    {
        _2521 = _2457;
        _2523 = _2458;
        _2525 = _2459;
    }
    else
    {
        uint _2527 = _2155 + 2u;
        uint _2531 = _2155 + 10u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _890) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _967;
        float _2548 = cbLight._m0[_2527].y + _968;
        float _2549 = cbLight._m0[_2527].z + _969;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2527].xyz));
        float _4625 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2561 = dot(vec3(_887, _888, _889), vec3(_2554, _2555, _2556));
        float _4636 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4647 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2323 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2587) + _2546) * _2560))) * _2560;
        float _4658 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2521 = (((((_2580 * _2345) + _1049) * cbLight._m0[_2531].x) * _2599) * _2600) + _2457;
        _2523 = (((((_2580 * _2347) + _1051) * cbLight._m0[_2531].y) * _2599) * _2600) + _2458;
        _2525 = (((((_2580 * _2348) + _1052) * cbLight._m0[_2531].z) * _2599) * _2600) + _2459;
    }
    float _2635;
    float _2637;
    float _2639;
    if (_2249)
    {
        _2635 = _2521;
        _2637 = _2523;
        _2639 = _2525;
    }
    else
    {
        uint _2646 = _2155 + 3u;
        uint _2650 = _2155 + 11u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _890) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _967;
        float _2667 = cbLight._m0[_2646].y + _968;
        float _2668 = cbLight._m0[_2646].z + _969;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2646].xyz));
        float _4674 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2680 = dot(vec3(_887, _888, _889), vec3(_2673, _2674, _2675));
        float _4685 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4696 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2706 = 1.0 - _2665;
        float _2716 = (0.5 / (((_2323 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2706) + _2665) * _2679))) * _2679;
        float _4707 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2718 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2719 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2635 = (((((_2699 * _2345) + _1049) * cbLight._m0[_2650].x) * _2718) * _2719) + _2521;
        _2637 = (((((_2699 * _2347) + _1051) * cbLight._m0[_2650].y) * _2718) * _2719) + _2523;
        _2639 = (((((_2699 * _2348) + _1052) * cbLight._m0[_2650].z) * _2718) * _2719) + _2525;
    }
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_2153.y == 0u)
    {
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2794;
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2794;
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2794;
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.x;
        uint _2821 = uint((float(_2809.y) * floor(float(uint(cbSceneParam._m0[85u].y * _988) / _2810))) + floor(float(uint(cbSceneParam._m0[85u].x * _987) / _2810)));
        float _2831 = (log2(_2797 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2832 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        uint _2835 = uint(isnan(14.0) ? _2832 : (isnan(_2832) ? 14.0 : min(_2832, 14.0)));
        uvec4 _2840 = texelFetch(g_lightClusterGridBuffer, int(((_2835 << 2u) + (_2821 << 6u)) >> 2u));
        uint _2841 = _2840.x;
        uint _2842 = _2809.z;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        if (((((1u << ((_2842 >> 4u) & 15u)) + 4294967295u) & _2841) == 0u) || ((_2842 & 240u) == 0u))
        {
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
        }
        else
        {
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            uint _3101 = 0u;
            uint _3110;
            bool _3111;
            for (;;)
            {
                _3110 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3101 << 2u)) >> 2u)).x;
                _3111 = _3110 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3111)
                {
                    frontier_phi_66_pred = _3095;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                else
                {
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    uint _3246;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3110;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    for (;;)
                    {
                        uint _3250 = uint(findLSB(_3246)) + (_3101 << 5u);
                        uint _3247 = (_3246 + 4294967295u) & _3246;
                        uint _3252 = _3250 * 48u;
                        vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3272 = (_3250 * 48u) + 4u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3291 = (_3250 * 48u) + 8u;
                        vec3 _3302 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x));
                        float _3306 = _3266.x - _2795;
                        float _3307 = _3266.y - _2796;
                        float _3308 = _3266.z - _2797;
                        float _3309 = dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308));
                        float _3312 = inversesqrt(_3309);
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3316 = dot(vec3(_1006, _1009, _1012), vec3(_3313, _3314, _3315));
                        float _3321 = 1.0 - (_3309 * _3266.w);
                        float _4733 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3323 = sqrt(_3309) * _3285.w;
                        float _3326 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3316) + _3327;
                        float _3333 = _3323 * _3323;
                        float _3337 = ((isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * _3322) / ((_3333 * 0.699999988079071044921875) + 1.0);
                        float _3341 = (-0.0) - _2795;
                        float _3342 = (-0.0) - _2796;
                        float _3343 = (-0.0) - _2797;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3348 = _3347 * _3341;
                        float _3349 = _3347 * _3342;
                        float _3350 = _3347 * _3343;
                        float _3358 = exp2(log2(1.0 / ((_3333 * 3.5) + 5.0)) * 0.25);
                        float _3359 = 1.0 - _1081;
                        float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                        float _3367 = _3366 * _3366;
                        float _3368 = _3367 * _3367;
                        float _3369 = _3348 + _3313;
                        float _3370 = _3349 + _3314;
                        float _3371 = _3350 + _3315;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3379 = dot(vec3(_1006, _1009, _1012), vec3(_3348, _3349, _3350));
                        float _4749 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3383 = dot(vec3(_1006, _1009, _1012), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                        float _4760 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                        float _3391 = _3326 * _3367;
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3316) + _3392;
                        float _4771 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3397 = 1.0 - _3367;
                        float _3407 = (0.5 / (((_3396 * ((_3382 * _3397) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3367) * _3382))) * _3396;
                        float _4782 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3418 = (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3390 * _3390) * ((_3333 * 2.1991131305694580078125) + 3.141590118408203125))) * _3322;
                        _3170 = (_3337 * _3285.x) + _3243;
                        _3171 = (_3337 * _3285.y) + _3244;
                        _3172 = (_3337 * _3285.z) + _3245;
                        _3167 = (_3418 * _3302.x) + _3240;
                        _3168 = (_3418 * _3302.y) + _3241;
                        _3169 = (_3418 * _3302.z) + _3242;
                        if (_3247 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3247;
                        }
                    }
                    frontier_phi_66_pred = _3167;
                    frontier_phi_66_pred_1 = _3172;
                    frontier_phi_66_pred_2 = _3171;
                    frontier_phi_66_pred_3 = _3170;
                    frontier_phi_66_pred_4 = _3169;
                    frontier_phi_66_pred_5 = _3168;
                }
                _2943 = frontier_phi_66_pred;
                _2953 = frontier_phi_66_pred_1;
                _2951 = frontier_phi_66_pred_2;
                _2949 = frontier_phi_66_pred_3;
                _2947 = frontier_phi_66_pred_4;
                _2945 = frontier_phi_66_pred_5;
                uint _3102 = _3101 + 1u;
                if (_3102 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3095 = _2943;
                    _3096 = _2945;
                    _3097 = _2947;
                    _3098 = _2949;
                    _3099 = _2951;
                    _3100 = _2953;
                    _3101 = _3102;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
        }
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.z;
        uint _2959 = (_2957 >> 8u) & 15u;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((4294967295u << _2959) & _2841) == 0u)
        {
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
        }
        else
        {
            float _3088 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
            float _3089 = _3088 * _2795;
            float _3090 = _3088 * _2796;
            float _3091 = _3088 * _2797;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2959 < ((_2957 >> 12u) & 15u))
            {
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3223 = _2942;
                float _3224 = _2944;
                float _3225 = _2946;
                float _3226 = _2948;
                float _3227 = _2950;
                float _3228 = _2952;
                uint _3229 = _2959;
                uint _3238;
                bool _3239;
                for (;;)
                {
                    _3238 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3229 << 2u)) >> 2u)).x;
                    _3239 = _3238 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3239)
                    {
                        frontier_phi_77_pred = _3228;
                        frontier_phi_77_pred_1 = _3227;
                        frontier_phi_77_pred_2 = _3226;
                        frontier_phi_77_pred_3 = _3225;
                        frontier_phi_77_pred_4 = _3224;
                        frontier_phi_77_pred_5 = _3223;
                    }
                    else
                    {
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        uint _3451 = _3238;
                        uint _3452;
                        vec4 _3477;
                        float _3478;
                        vec4 _3493;
                        vec3 _3505;
                        vec4 _3520;
                        vec4 _3535;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3462 = ((_3229 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3451));
                            _3452 = (_3451 + 4294967295u) & _3451;
                            uint _3464 = _3462 * 40u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3478 = _3477.w;
                            uint _3480 = (_3462 * 40u) + 4u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3462 * 40u) + 8u;
                            _3505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x));
                            uint _3507 = (_3462 * 40u) + 16u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3462 * 40u) + 20u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3462 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3462 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_2797, _3569.z, fma(_2796, _3569.y, _3569.x * _2795)) + _3569.w;
                            _3582 = !((fma(_2797, _3550.z, fma(_2796, _3550.y, _3550.x * _2795)) + _3550.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3477.x - _2795;
                                float _3610 = _3477.y - _2796;
                                float _3611 = _3477.z - _2797;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3478 * _3478));
                                float _4793 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3627 = sqrt(_3612) * _3493.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_1006, _1009, _1012))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_2797, _3520.z, fma(_2796, _3520.y, _3520.x * _2795)) + _3520.w) / _3581;
                                float _3641 = (fma(_2797, _3535.z, fma(_2796, _3535.y, _3535.x * _2795)) + _3535.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4809 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _1081;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3089;
                                float _3671 = _3617 - _3090;
                                float _3672 = _3618 - _3091;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_1006, _1009, _1012), vec3((-0.0) - _3089, (-0.0) - _3090, (-0.0) - _3091));
                                float _4820 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3684 = dot(vec3(_1006, _1009, _1012), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4831 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_1006, _1009, _1012), vec3(_3616, _3617, _3618))) + _3693;
                                float _4842 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4853 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3647 * _3493.y;
                                frontier_phi_83_pred_1 = _3647 * _3493.x;
                                frontier_phi_83_pred_2 = _3721 * _3505.z;
                                frontier_phi_83_pred_3 = _3721 * _3505.y;
                                frontier_phi_83_pred_4 = _3721 * _3505.x;
                                frontier_phi_83_pred_5 = _3647 * _3493.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3729 = frontier_phi_83_pred;
                            _3728 = frontier_phi_83_pred_1;
                            _3727 = frontier_phi_83_pred_2;
                            _3726 = frontier_phi_83_pred_3;
                            _3725 = frontier_phi_83_pred_4;
                            _3730 = frontier_phi_83_pred_5;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            if (_3452 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3452;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3437;
                        frontier_phi_77_pred_1 = _3436;
                        frontier_phi_77_pred_2 = _3435;
                        frontier_phi_77_pred_3 = _3434;
                        frontier_phi_77_pred_4 = _3433;
                        frontier_phi_77_pred_5 = _3432;
                    }
                    _3074 = frontier_phi_77_pred;
                    _3072 = frontier_phi_77_pred_1;
                    _3070 = frontier_phi_77_pred_2;
                    _3068 = frontier_phi_77_pred_3;
                    _3066 = frontier_phi_77_pred_4;
                    _3064 = frontier_phi_77_pred_5;
                    uint _3230 = _3229 + 1u;
                    if (_3230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3223 = _3064;
                        _3224 = _3066;
                        _3225 = _3068;
                        _3226 = _3070;
                        _3227 = _3072;
                        _3228 = _3074;
                        _3229 = _3230;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3068;
                frontier_phi_58_59_ladder_1 = _3074;
                frontier_phi_58_59_ladder_2 = _3072;
                frontier_phi_58_59_ladder_3 = _3070;
                frontier_phi_58_59_ladder_4 = _3066;
                frontier_phi_58_59_ladder_5 = _3064;
            }
            else
            {
                frontier_phi_58_59_ladder = _2946;
                frontier_phi_58_59_ladder_1 = _2952;
                frontier_phi_58_59_ladder_2 = _2950;
                frontier_phi_58_59_ladder_3 = _2948;
                frontier_phi_58_59_ladder_4 = _2944;
                frontier_phi_58_59_ladder_5 = _2942;
            }
            _3063 = frontier_phi_58_59_ladder_5;
            _3065 = frontier_phi_58_59_ladder_4;
            _3067 = frontier_phi_58_59_ladder;
            _3069 = frontier_phi_58_59_ladder_3;
            _3071 = frontier_phi_58_59_ladder_2;
            _3073 = frontier_phi_58_59_ladder_1;
        }
        float _3078 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _2854 = (_3078 * _3069) + _2287;
        _2856 = (_3078 * _3071) + _2289;
        _2858 = (_3078 * _3073) + _2291;
        _2860 = ((_3063 * _1049) * _3078) + _2635;
        _2862 = ((_3065 * _1051) * _3078) + _2637;
        _2864 = ((_3067 * _1052) * _3078) + _2639;
    }
    else
    {
        _2854 = _2287;
        _2856 = _2289;
        _2858 = _2291;
        _2860 = _2635;
        _2862 = _2637;
        _2864 = _2639;
    }
    float _4869 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4880 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4891 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2881 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2854 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1065))) + ((_2860 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1904)) * cbPerFrame._m0[3u].x);
    float _2882 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2856 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1065))) + ((_2862 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1904)) * cbPerFrame._m0[3u].x);
    float _2883 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2858 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1065))) + ((_2864 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1904)) * cbPerFrame._m0[3u].x);
    uint _2884 = _280 + 6u;
    float _2892 = _987 / cbSceneParam._m0[86u].x;
    float _2893 = _988 / cbSceneParam._m0[86u].y;
    vec4 _2907 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, (log2((isnan(cbSceneParam._m0[77u].w) ? _909 : (isnan(_909) ? cbSceneParam._m0[77u].w : min(_909, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2909 = _2907.x;
    float _2910 = _2907.y;
    float _2911 = _2907.z;
    float _2912 = _2907.w;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_909 > cbSceneParam._m0[78u].w)
    {
        float _2967 = isnan(_909) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _909 : min(cbSceneParam._m0[80u].w, _909));
        float _2968 = _2967 / _909;
        float _2979 = _2968 * _960;
        float _2980 = _961 * _2968;
        float _2981 = (-0.0) - _2980;
        float _2983 = _2968 * _962;
        float _2985 = (cbSceneParam._m0[77u].w * _2981) / _2967;
        float _2986 = _2985 + cbSceneParam._m0[79u].w;
        float _2987 = cbSceneParam._m0[79u].w - _2980;
        float _2993 = sqrt(((_2979 * _2979) + (_2980 * _2980)) + (_2983 * _2983));
        float _2996 = (1.0 - (cbSceneParam._m0[77u].w / _2967)) * _2993;
        float _3001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3180;
        if (abs((_2981 - _2985) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3180 = ((((_2986 > 0.0) ? exp2(_3001 * _2986) : (2.0 - exp2(_3003 * _2986))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2996;
        }
        else
        {
            float _3124 = 1.0 / cbSceneParam._m0[80u].x;
            float _3125 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : max(_2986, _2987));
            float _3126 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : min(_2986, _2987));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            _3180 = ((abs(_2993 / _2981) * cbSceneParam._m0[80u].y) * ((((_3135 - _3136) * 2.0) - ((exp2(_3001 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)))) - exp2(_3001 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))))) * _3124)) - ((exp2(_3003 * _3135) - exp2(_3003 * _3136)) * _3124))) + (_2996 * cbSceneParam._m0[80u].z);
        }
        vec4 _3182 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, 1.0), 0.0);
        float _3191 = exp2((_3180 * (-1.44269502162933349609375)) * (1.0 - _3182.w));
        float _3192 = log2(_3191);
        float _3208 = log2(_2912);
        _3005 = (exp2(_3208 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].x)) * _3182.x) / cbSceneParam._m0[78u].x)) + _2909;
        _3007 = (exp2(_3208 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].y)) * _3182.y) / cbSceneParam._m0[78u].y)) + _2910;
        _3009 = (exp2(_3208 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].z)) * _3182.z) / cbSceneParam._m0[78u].z)) + _2911;
        _3011 = _3191 * _2912;
    }
    else
    {
        _3005 = _2909;
        _3007 = _2910;
        _3009 = _2911;
        _3011 = _2912;
    }
    bool _3218;
    vec4 _3021;
    vec4 _3043;
    float _3045;
    float _3049;
    float _3050;
    float _3051;
    float _3052;
    bool _3062;
    for (;;)
    {
        _3021 = cbMatDynParam._m0[0u];
        float _3023 = roundEven(_3021.y);
        bool _3024 = _3023 == 3.0;
        float _3025 = log2(_3011);
        float _3032 = exp2(_3025 * cbSceneParam._m0[78u].x) * _2881;
        float _3033 = exp2(_3025 * cbSceneParam._m0[78u].y) * _2882;
        float _3034 = exp2(_3025 * cbSceneParam._m0[78u].z) * _2883;
        float _3041 = _976 + (-0.5);
        _3043 = cbMtdParam._m0[1u];
        _3045 = _3043.y * _3041;
        float _3048 = (_3023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3049 = _3048 * (_3024 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3005)));
        _3050 = _3048 * (_3024 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3007)));
        _3051 = _3048 * (_3024 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3009)));
        _3052 = _3041 * 0.999000012874603271484375;
        _3062 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3062)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3052) < 0.5)
            {
                _3218 = true;
                break;
            }
        }
        uint _3159 = _1025 + uint(_3021.w);
        if ((cbInstanceData._m0[_3159].w < 1.0) && ((cbInstanceData._m0[_3159].w + _3052) < 0.5))
        {
            _3218 = true;
            break;
        }
        if ((_3045 + 1.0) < _3043.x)
        {
            _3218 = true;
            break;
        }
        _3218 = false;
        break;
    }
    float _3423;
    if (_3218)
    {
        discard_state = true;
        _3423 = 0.0;
    }
    else
    {
        _3423 = cbInstanceData._m0[_2884].w;
    }
    SV_Target.x = _3049;
    SV_Target.y = _3050;
    SV_Target.z = _3051;
    SV_Target.w = _3423;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2884].w;
    discard_exit();
}


