#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1496;
float _3899;
float _3900;
float _3901;
float _3902;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3911 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _431 = (_424 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _432 = (_424 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _433 = (_424 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[23u].w) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3922 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _544 = _542.x;
    float _554 = dot(vec4(_544, _542.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _566 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _353.z) * 2.0) - ((((_544 - _554) * cbMtdParam._m0[23u].w) + _554) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3933 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _574 = (_567 * ((_525.x * cbMtdParam._m0[14u].x) - _504)) + _504;
    float _575 = (_567 * ((_525.y * cbMtdParam._m0[14u].y) - _505)) + _505;
    float _576 = (_567 * ((_525.z * cbMtdParam._m0[14u].z) - _506)) + _506;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _424) + _608;
    float _618 = ((_589.y - _609) * _424) + _609;
    float _619 = ((_589.z - _610) * _424) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_631.x - _617) * _497) + _617;
    float _643 = ((_631.y - _618) * _497) + _618;
    float _644 = ((_631.z - _619) * _497) + _619;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _669 = ((_656.z - _644) * _567) + _644;
    float _672 = ((((_656.x - _642) * _567) + _642) * 2.0) + (-1.0);
    float _674 = ((((_656.y - _643) * _567) + _643) * 2.0) + (-1.0);
    float _675 = dot(vec2(_672, _674), vec2(_672, _674));
    float _3944 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _706 = (((_694.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _672;
    float _707 = (((_694.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _674;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _721 = _719.x;
    float _722 = 1.0 - _721;
    float _750 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_721 - _722) * cbMtdParam._m0[24u].w) + _722) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3955 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _759 = ((((cbMtdParam._m0[10u].x - _574) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _751) + _574;
    float _760 = ((((cbMtdParam._m0[10u].y - _575) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _751) + _575;
    float _761 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _576)) * _751) + _576;
    vec4 _787 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _789 = _787.x;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _789) * _424) + _789;
    float _825 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _807) * _497) + _807;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _825) * _567) + _825;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _842) * cbMtdParam._m0[19u].z) + _842;
    float _848 = _846 - (_846 * _751);
    float _852 = (cbMtdParam._m0[19u].w * (_694.z - _669)) + _669;
    float _856 = ((cbMtdParam._m0[23u].x - _852) * _751) + _852;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _881 = (_875.x * 2.0) + (-1.0);
    float _882 = (_875.y * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _3966 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _899 = (_751 * (((cbMtdParam._m0[22u].z * _706) - _706) + _881)) + _706;
    float _900 = (_751 * (((cbMtdParam._m0[22u].z * _707) - _707) + _882)) + _707;
    float _901 = (_751 * (sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) - _680)) + _680;
    float _903 = cbMtdParam._m0[22u].x + _694.w;
    float _906 = fma(_901, _254 * NORMAL.x, fma(_900, _261 * TANGENT.x, (_247 * _239) * _899));
    float _909 = fma(_901, _254 * NORMAL.y, fma(_900, _261 * TANGENT.y, (_247 * _240) * _899));
    float _912 = fma(_901, _254 * NORMAL.z, fma(_900, _261 * TANGENT.z, (_247 * _241) * _899));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _3977 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _920 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _3999 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4010 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4021 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4032 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _925 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    vec4 _1003 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1005 = _1003.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1177 = sqrt(((_989 * _989) + (_990 * _990)) + (_991 * _991));
        float _1183 = (cbMatDynParam._m0[5u].x * _1177) + cbMatDynParam._m0[5u].y;
        float _4043 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1188 = (cbMatDynParam._m0[5u].z * _1177) + cbMatDynParam._m0[5u].w;
        float _4054 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) - _1184)) + _1184) < ((_1005 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1016 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1017 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1035 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1038 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1041 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1054 = _267 + 9u;
    uint _1055 = _1054 + uint(cbMatDynParam._m0[0u].w);
    float _1061 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1055].x;
    float _1062 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1055].y;
    float _1063 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1055].z;
    float _4065 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1067 = 1.0 - _925;
    float _1068 = _1064 * _1067;
    float _1069 = _1065 * _1067;
    float _1070 = _1066 * _1067;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _925;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _925;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _925;
    float _1078 = _1075 + 0.039999999105930328369140625;
    float _1080 = _1076 + 0.039999999105930328369140625;
    float _1081 = _1077 + 0.039999999105930328369140625;
    vec4 _1090 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1016, cbSceneParam._m0[86u].y * _1017));
    float _1094 = ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * TEXCOORD_5.w) * _1090.x;
    float _1095 = dot(vec3(_917, _918, _919), vec3(_996, _997, _998));
    float _1098 = _1095 * 2.0;
    float _1102 = (_1098 * _917) - _996;
    float _1103 = (_1098 * _918) - _997;
    float _1104 = (_1098 * _919) - _998;
    float _1108 = abs(dot(vec3(_996, _997, _998), vec3(_917, _918, _919)));
    float _4098 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1110 = sqrt(_920);
    float _1123 = exp2((_1110 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1110 * 3.0));
    float _1129 = (1.0 - _1123) * ((_1110 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1130 = _1123 * _1110;
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1495;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1220 = fma(_1166, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158));
        float _1224 = fma(_1166, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158));
        float _1228 = fma(_1166, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158));
        float _1253 = _1158 + _917;
        float _1254 = _1162 + _918;
        float _1255 = _1166 + _919;
        float _1265 = fma(_1255, cbModelParam._m0[26u].z, fma(_1254, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1253)) - _1220;
        float _1266 = fma(_1255, cbModelParam._m0[27u].z, fma(_1254, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1253)) - _1224;
        float _1267 = fma(_1255, cbModelParam._m0[28u].z, fma(_1254, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1253)) - _1228;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1220 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1224 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[34u].z) + ((((((_1228 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1323 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1289.x + (-0.5));
        float _1325 = _1323 * (_1289.y + (-0.5));
        float _1326 = _1323 * (_1289.z + (-0.5));
        float _1333 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1296.x + (-0.5));
        float _1335 = _1333 * (_1296.y + (-0.5));
        float _1336 = _1333 * (_1296.z + (-0.5));
        float _1343 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1303.x + (-0.5));
        float _1345 = _1343 * (_1303.y + (-0.5));
        float _1346 = _1343 * (_1303.z + (-0.5));
        float _1353 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1310.x + (-0.5));
        float _1355 = _1353 * (_1310.y + (-0.5));
        float _1356 = _1353 * (_1310.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1377 = (dot(vec3(_917, _918, _919), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1387 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4146 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1389 + 1.0))) + _1394) * _1357;
        float _1404 = _1325 * 0.5;
        float _1405 = _1335 * 0.5;
        float _1406 = _1345 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_917, _918, _919), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4179 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1431 + 1.0))) + _1436) * _1358;
        float _1446 = _1326 * 0.5;
        float _1447 = _1336 * 0.5;
        float _1448 = _1346 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_917, _918, _919), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4212 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1473 + 1.0))) + _1478) * _1359;
        _1495 = _1326;
        _1497 = _1325;
        _1498 = _1324;
        _1499 = _1336;
        _1500 = _1335;
        _1501 = _1334;
        _1502 = _1346;
        _1503 = _1345;
        _1504 = _1344;
        _1505 = _1359;
        _1506 = _1358;
        _1507 = _1357;
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1496;
        _1497 = _1496;
        _1498 = _1496;
        _1499 = _1496;
        _1500 = _1496;
        _1501 = _1496;
        _1502 = _1496;
        _1503 = _1496;
        _1504 = _1496;
        _1505 = _1496;
        _1506 = _1496;
        _1507 = _1496;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1536 = fma(_1166, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158));
        float _1540 = fma(_1166, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158));
        float _1544 = fma(_1166, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158));
        float _1567 = _1158 + _917;
        float _1568 = _1162 + _918;
        float _1569 = _1166 + _919;
        float _1579 = fma(_1569, cbModelParam._m0[30u].z, fma(_1568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1567)) - _1536;
        float _1580 = fma(_1569, cbModelParam._m0[31u].z, fma(_1568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1567)) - _1540;
        float _1581 = fma(_1569, cbModelParam._m0[32u].z, fma(_1568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1567)) - _1544;
        float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
        float _1598 = ((_1585 * _1579) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1536 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1599 = ((_1585 * _1580) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1540 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1600 = ((_1585 * _1581) / cbModelParam._m0[35u].z) + ((((((_1544 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        float _1635 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1602.x + (-0.5));
        float _1637 = _1635 * (_1602.y + (-0.5));
        float _1638 = _1635 * (_1602.z + (-0.5));
        float _1645 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1609.x + (-0.5));
        float _1647 = _1645 * (_1609.y + (-0.5));
        float _1648 = _1645 * (_1609.z + (-0.5));
        float _1655 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1616.x + (-0.5));
        float _1657 = _1655 * (_1616.y + (-0.5));
        float _1658 = _1655 * (_1616.z + (-0.5));
        float _1665 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1623.x + (-0.5));
        float _1667 = _1665 * (_1623.y + (-0.5));
        float _1668 = _1665 * (_1623.z + (-0.5));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = _1636 * 0.5;
        float _1673 = _1646 * 0.5;
        float _1674 = _1656 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_917, _918, _919), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4275 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1699 + 1.0))) + _1704) * _1669;
        float _1714 = _1637 * 0.5;
        float _1715 = _1647 * 0.5;
        float _1716 = _1657 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_917, _918, _919), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4308 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1741 + 1.0))) + _1746) * _1670;
        float _1756 = _1638 * 0.5;
        float _1757 = _1648 * 0.5;
        float _1758 = _1658 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_917, _918, _919), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4341 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1783 + 1.0))) + _1788) * _1671;
        _1805 = _1638;
        _1806 = _1637;
        _1807 = _1636;
        _1808 = _1648;
        _1809 = _1647;
        _1810 = _1646;
        _1811 = _1658;
        _1812 = _1657;
        _1813 = _1656;
        _1814 = _1671;
        _1815 = _1670;
        _1816 = _1669;
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
    }
    else
    {
        _1805 = _1496;
        _1806 = _1496;
        _1807 = _1496;
        _1808 = _1496;
        _1809 = _1496;
        _1810 = _1496;
        _1811 = _1496;
        _1812 = _1496;
        _1813 = _1496;
        _1814 = _1496;
        _1815 = _1496;
        _1816 = _1496;
        _1817 = 0.0;
        _1818 = 0.0;
        _1819 = 0.0;
    }
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1508)) + _1508;
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1509)) + _1509;
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1510)) + _1510;
    float _1852 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1829));
    float _1873 = _1102 * 0.5;
    float _1874 = _1103 * 0.5;
    float _1875 = _1104 * 0.5;
    float _1876 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1879 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1882 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1916;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1889 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1495, _1499, _1502, _1505));
        float _1893 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1897 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1904 = dot(vec4(cbModelParam._m0[39u]), vec4(_1873, _1874, _1875, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1927;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1918 = dot(vec4(cbModelParam._m0[40u]), vec4(_1873, _1874, _1875, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1931 = (_1927 * cbModelParam._m0[1u].x) + (_1916 * (1.0 - cbModelParam._m0[1u].x));
    float _1941 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1941 : min(cbModelParam._m0[25u].z, _1941));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1990 = fma(_1166, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1158)) + cbModelParam._m0[13u].w;
        float _1994 = fma(_1166, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1158)) + cbModelParam._m0[14u].w;
        float _1998 = fma(_1166, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1158)) + cbModelParam._m0[15u].w;
        float _2001 = fma(_1104, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102));
        float _2004 = fma(_1104, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102));
        float _2007 = fma(_1104, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102));
        float _2035;
        if (_2001 > 0.0)
        {
            _2035 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2035 = frontier_phi_17_15_ladder;
        }
        float _2259;
        if (_2004 > 0.0)
        {
            _2259 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2259 = frontier_phi_26_22_ladder;
        }
        float _2516;
        if (_2007 > 0.0)
        {
            _2516 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2516 = frontier_phi_38_33_ladder;
        }
        float _2518 = isnan(_2259) ? _2035 : (isnan(_2035) ? _2259 : min(_2035, _2259));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _2001) + _1990;
        float _2524 = (_2519 * _2004) + _1994;
        float _2525 = (_2519 * _2007) + _1998;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1942);
            frontier_phi_16_38_ladder = _2653.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2653.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2653.x * cbModelParam._m0[1u].y;
        }
        _2023 = frontier_phi_16_38_ladder_2;
        _2025 = frontier_phi_16_38_ladder_1;
        _2027 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1102, _1103, _1104), _1942);
        _2023 = _2011.x * cbModelParam._m0[1u].y;
        _2025 = _2011.y * cbModelParam._m0[1u].y;
        _2027 = _2011.z * cbModelParam._m0[1u].y;
    }
    float _2031 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _2032 = isnan(_2031) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2031 : min(cbModelParam._m0[25u].w, _2031));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2086 = fma(_1166, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1158)) + cbModelParam._m0[21u].w;
        float _2090 = fma(_1166, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1158)) + cbModelParam._m0[22u].w;
        float _2094 = fma(_1166, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1158)) + cbModelParam._m0[23u].w;
        float _2097 = fma(_1104, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102));
        float _2100 = fma(_1104, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102));
        float _2103 = fma(_1104, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102));
        float _2264;
        if (_2097 > 0.0)
        {
            _2264 = abs((1.0 - _2086) / _2097);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2086 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2264 = frontier_phi_28_24_ladder;
        }
        float _2543;
        if (_2100 > 0.0)
        {
            _2543 = abs((1.0 - _2090) / _2100);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2090 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2543 = frontier_phi_40_35_ladder;
        }
        float _2756;
        if (_2103 > 0.0)
        {
            _2756 = abs((1.0 - _2094) / _2103);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2094 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2756 = frontier_phi_49_46_ladder;
        }
        float _2758 = isnan(_2543) ? _2264 : (isnan(_2264) ? _2543 : min(_2264, _2543));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _2097) + _2086;
        float _2764 = (_2759 * _2100) + _2090;
        float _2765 = (_2759 * _2103) + _2094;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _2032);
            frontier_phi_25_49_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _2122 = frontier_phi_25_49_ladder_2;
        _2124 = frontier_phi_25_49_ladder_1;
        _2126 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1102, _1103, _1104), _2032);
        _2122 = _2106.x * cbModelParam._m0[1u].z;
        _2124 = _2106.y * cbModelParam._m0[1u].z;
        _2126 = _2106.z * cbModelParam._m0[1u].z;
    }
    float _2139 = (((_1129 * _1078) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2141 = (((_1129 * _1080) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2124 - _2025)) + _2025);
    float _2143 = (((_1129 * _1081) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2126 - _2027)) + _2027);
    float _2146 = fma(_2143, cbSceneParam._m0[89u].z, fma(_2141, cbSceneParam._m0[89u].y, _2139 * cbSceneParam._m0[89u].x));
    float _2149 = fma(_2143, cbSceneParam._m0[90u].z, fma(_2141, cbSceneParam._m0[90u].y, _2139 * cbSceneParam._m0[90u].x));
    float _2152 = fma(_2143, cbSceneParam._m0[91u].z, fma(_2141, cbSceneParam._m0[91u].y, _2139 * cbSceneParam._m0[91u].x));
    vec4 _2160 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1016, _1017));
    float _2162 = _2160.w;
    float _2174 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2162);
    float _2175 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2162);
    float _2176 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2162);
    uvec4 _2180 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2182 = _2180.x * 14u;
    uint _2183 = _2182 + 13u;
    float _2190 = _1094 + (-1.0);
    float _2195 = (cbLight._m0[_2183].x * _2190) + 1.0;
    float _2196 = (cbLight._m0[_2183].y * _2190) + 1.0;
    float _2197 = (cbLight._m0[_2183].z * _2190) + 1.0;
    float _2198 = (cbLight._m0[_2183].w * _2190) + 1.0;
    uint _2199 = _2182 + 5u;
    float _2205 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
    uint _2209 = _2182 + 4u;
    float _2218 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2222 = _2182 | 1u;
    float _2233 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_917, _918, _919));
    float _2236 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_917, _918, _919));
    float _4477 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _4488 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2241 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2243 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2250 = ((cbLight._m0[_2199].x * _2205) * _2243) + (((cbLight._m0[_2209].x * _2174) * _2218) * _2241);
    float _2251 = ((_2205 * cbLight._m0[_2199].y) * _2243) + (((cbLight._m0[_2209].y * _2175) * _2218) * _2241);
    float _2252 = ((_2205 * cbLight._m0[_2199].z) * _2243) + (((cbLight._m0[_2209].z * _2176) * _2218) * _2241);
    uvec4 _2256 = floatBitsToUint(cbLight._m0[_2182 + 12u]);
    bool _2258 = _2256.x == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2258)
    {
        _2269 = _2250;
        _2271 = _2251;
        _2273 = _2252;
    }
    else
    {
        uint _2277 = _2182 + 6u;
        float _2293 = (dot(vec3(cbLight._m0[_2182 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4499 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2296 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2269 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2250;
        _2271 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2251;
        _2273 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2252;
    }
    bool _2276 = _2256.y == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2276)
    {
        _2314 = _2269;
        _2316 = _2271;
        _2318 = _2273;
    }
    else
    {
        uint _2487 = _2182 + 7u;
        float _2503 = (dot(vec3(cbLight._m0[_2182 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4515 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2506 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2314 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2269;
        _2316 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2271;
        _2318 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2273;
    }
    uint _2321 = _2182 + 8u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _920) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2182].x + _996;
    float _2337 = cbLight._m0[_2182].y + _997;
    float _2338 = cbLight._m0[_2182].z + _998;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2182].xyz));
    float _4531 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _2350 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2351 = dot(vec3(_917, _918, _919), vec3(_2343, _2344, _2345));
    float _4553 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2343, _2344, _2345));
    float _4564 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2335 * _2335;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2372 = 0.959999978542327880859375 - _1075;
    float _2374 = 0.959999978542327880859375 - _1076;
    float _2375 = 0.959999978542327880859375 - _1077;
    float _2382 = 1.0 - _2335;
    float _2393 = (0.5 / (((_2350 * ((_2349 * _2382) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2382) + _2335) * _2349))) * _2349;
    float _4575 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2395 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    uint _2409 = _2182 + 9u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _920) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2222].x + _996;
    float _2423 = cbLight._m0[_2222].y + _997;
    float _2424 = cbLight._m0[_2222].z + _998;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2222].xyz));
    float _4586 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2436 = dot(vec3(_917, _918, _919), vec3(_2429, _2430, _2431));
    float _4597 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2429, _2430, _2431));
    float _4608 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2421 * _2421;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2462 = 1.0 - _2421;
    float _2472 = (0.5 / (((_2350 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2462) + _2421) * _2435))) * _2435;
    float _4619 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    float _2484 = (((((_2455 * _2372) + _1078) * cbLight._m0[_2409].x) * _2474) * _2205) + ((((cbLight._m0[_2321].x * _2174) * ((_2371 * _2372) + _1078)) * _2395) * _2218);
    float _2485 = (((((_2455 * _2374) + _1080) * cbLight._m0[_2409].y) * _2474) * _2205) + ((((cbLight._m0[_2321].y * _2175) * ((_2371 * _2374) + _1080)) * _2395) * _2218);
    float _2486 = (((((_2455 * _2375) + _1081) * cbLight._m0[_2409].z) * _2474) * _2205) + ((((cbLight._m0[_2321].z * _2176) * ((_2371 * _2375) + _1081)) * _2395) * _2218);
    float _2548;
    float _2550;
    float _2552;
    if (_2258)
    {
        _2548 = _2484;
        _2550 = _2485;
        _2552 = _2486;
    }
    else
    {
        uint _2554 = _2182 + 2u;
        uint _2558 = _2182 + 10u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _920) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _996;
        float _2575 = cbLight._m0[_2554].y + _997;
        float _2576 = cbLight._m0[_2554].z + _998;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2554].xyz));
        float _4630 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2588 = dot(vec3(_917, _918, _919), vec3(_2581, _2582, _2583));
        float _4641 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4652 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2614 = 1.0 - _2573;
        float _2624 = (0.5 / (((_2350 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2614) + _2573) * _2587))) * _2587;
        float _4663 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2548 = (((((_2607 * _2372) + _1078) * cbLight._m0[_2558].x) * _2626) * _2627) + _2484;
        _2550 = (((((_2607 * _2374) + _1080) * cbLight._m0[_2558].y) * _2626) * _2627) + _2485;
        _2552 = (((((_2607 * _2375) + _1081) * cbLight._m0[_2558].z) * _2626) * _2627) + _2486;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2276)
    {
        _2662 = _2548;
        _2664 = _2550;
        _2666 = _2552;
    }
    else
    {
        uint _2673 = _2182 + 3u;
        uint _2677 = _2182 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _920) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _996;
        float _2694 = cbLight._m0[_2673].y + _997;
        float _2695 = cbLight._m0[_2673].z + _998;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2673].xyz));
        float _4679 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2707 = dot(vec3(_917, _918, _919), vec3(_2700, _2701, _2702));
        float _4690 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4701 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2350 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2733) + _2692) * _2706))) * _2706;
        float _4712 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2662 = (((((_2726 * _2372) + _1078) * cbLight._m0[_2677].x) * _2745) * _2746) + _2548;
        _2664 = (((((_2726 * _2374) + _1080) * cbLight._m0[_2677].y) * _2745) * _2746) + _2550;
        _2666 = (((((_2726 * _2375) + _1081) * cbLight._m0[_2677].z) * _2745) * _2746) + _2552;
    }
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_2180.y == 0u)
    {
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2821;
        float _2823 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2821;
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2821;
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.x;
        uint _2848 = uint((float(_2836.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1017) / _2837))) + floor(float(uint(cbSceneParam._m0[85u].x * _1016) / _2837)));
        float _2858 = (log2(_2824 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2859 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        uint _2862 = uint(isnan(14.0) ? _2859 : (isnan(_2859) ? 14.0 : min(_2859, 14.0)));
        uvec4 _2867 = texelFetch(g_lightClusterGridBuffer, int(((_2862 << 2u) + (_2848 << 6u)) >> 2u));
        uint _2868 = _2867.x;
        uint _2869 = _2836.z;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((((1u << ((_2869 >> 4u) & 15u)) + 4294967295u) & _2868) == 0u) || ((_2869 & 240u) == 0u))
        {
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
        }
        else
        {
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            uint _3128 = 0u;
            uint _3137;
            bool _3138;
            for (;;)
            {
                _3137 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                _3138 = _3137 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3138)
                {
                    frontier_phi_66_pred = _3122;
                    frontier_phi_66_pred_1 = _3127;
                    frontier_phi_66_pred_2 = _3126;
                    frontier_phi_66_pred_3 = _3125;
                    frontier_phi_66_pred_4 = _3124;
                    frontier_phi_66_pred_5 = _3123;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3137;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3128 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _2822;
                        float _3334 = _3293.y - _2823;
                        float _3335 = _3293.z - _2824;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_1035, _1038, _1041), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4738 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _2822;
                        float _3369 = (-0.0) - _2823;
                        float _3370 = (-0.0) - _2824;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3385 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _1110;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3375 + _3340;
                        float _3397 = _3376 + _3341;
                        float _3398 = _3377 + _3342;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_1035, _1038, _1041), vec3(_3375, _3376, _3377));
                        float _4754 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3410 = dot(vec3(_1035, _1038, _1041), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4765 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3353 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3343) + _3419;
                        float _4776 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4787 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3417 * _3417) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3197 = (_3364 * _3312.x) + _3270;
                        _3198 = (_3364 * _3312.y) + _3271;
                        _3199 = (_3364 * _3312.z) + _3272;
                        _3194 = (_3445 * _3329.x) + _3267;
                        _3195 = (_3445 * _3329.y) + _3268;
                        _3196 = (_3445 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_66_pred = _3194;
                    frontier_phi_66_pred_1 = _3199;
                    frontier_phi_66_pred_2 = _3198;
                    frontier_phi_66_pred_3 = _3197;
                    frontier_phi_66_pred_4 = _3196;
                    frontier_phi_66_pred_5 = _3195;
                }
                _2970 = frontier_phi_66_pred;
                _2980 = frontier_phi_66_pred_1;
                _2978 = frontier_phi_66_pred_2;
                _2976 = frontier_phi_66_pred_3;
                _2974 = frontier_phi_66_pred_4;
                _2972 = frontier_phi_66_pred_5;
                uint _3129 = _3128 + 1u;
                if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3122 = _2970;
                    _3123 = _2972;
                    _3124 = _2974;
                    _3125 = _2976;
                    _3126 = _2978;
                    _3127 = _2980;
                    _3128 = _3129;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
        }
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.z;
        uint _2986 = (_2984 >> 8u) & 15u;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((4294967295u << _2986) & _2868) == 0u)
        {
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
        }
        else
        {
            float _3115 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
            float _3116 = _3115 * _2822;
            float _3117 = _3115 * _2823;
            float _3118 = _3115 * _2824;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2986 < ((_2984 >> 12u) & 15u))
            {
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3250 = _2969;
                float _3251 = _2971;
                float _3252 = _2973;
                float _3253 = _2975;
                float _3254 = _2977;
                float _3255 = _2979;
                uint _3256 = _2986;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3266)
                    {
                        frontier_phi_77_pred = _3255;
                        frontier_phi_77_pred_1 = _3254;
                        frontier_phi_77_pred_2 = _3253;
                        frontier_phi_77_pred_3 = _3252;
                        frontier_phi_77_pred_4 = _3251;
                        frontier_phi_77_pred_5 = _3250;
                    }
                    else
                    {
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3472 = _3250;
                        float _3473 = _3251;
                        float _3474 = _3252;
                        float _3475 = _3253;
                        float _3476 = _3254;
                        float _3477 = _3255;
                        uint _3478 = _3265;
                        uint _3479;
                        vec4 _3504;
                        float _3505;
                        vec4 _3520;
                        vec3 _3532;
                        vec4 _3547;
                        vec4 _3562;
                        float _3608;
                        bool _3609;
                        for (;;)
                        {
                            uint _3489 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3478));
                            _3479 = (_3478 + 4294967295u) & _3478;
                            uint _3491 = _3489 * 40u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3505 = _3504.w;
                            uint _3507 = (_3489 * 40u) + 4u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3489 * 40u) + 8u;
                            _3532 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x));
                            uint _3534 = (_3489 * 40u) + 16u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3489 * 40u) + 20u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3489 * 40u) + 24u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3583 = (_3489 * 40u) + 28u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            _3608 = fma(_2824, _3596.z, fma(_2823, _3596.y, _3596.x * _2822)) + _3596.w;
                            _3609 = !((fma(_2824, _3577.z, fma(_2823, _3577.y, _3577.x * _2822)) + _3577.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3609)
                            {
                                float _3636 = _3504.x - _2822;
                                float _3637 = _3504.y - _2823;
                                float _3638 = _3504.z - _2824;
                                float _3639 = dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638));
                                float _3642 = inversesqrt(_3639);
                                float _3643 = _3642 * _3636;
                                float _3644 = _3642 * _3637;
                                float _3645 = _3642 * _3638;
                                float _3649 = 1.0 - (_3639 / (_3505 * _3505));
                                float _4798 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3654 = sqrt(_3639) * _3520.w;
                                float _3656 = 1.39999997615814208984375 / (_3654 + 1.39999997615814208984375);
                                float _3657 = _3656 * _3656;
                                float _3660 = ((1.0 - _3657) * dot(vec3(_3643, _3644, _3645), vec3(_1035, _1038, _1041))) + _3657;
                                float _3663 = _3654 * _3654;
                                float _3667 = (fma(_2824, _3547.z, fma(_2823, _3547.y, _3547.x * _2822)) + _3547.w) / _3608;
                                float _3668 = (fma(_2824, _3562.z, fma(_2823, _3562.y, _3562.x * _2822)) + _3562.w) / _3608;
                                float _3672 = 1.0 - dot(vec2(_3667, _3668), vec2(_3667, _3668));
                                float _4814 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3674 = _3673 * (((isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0))) * _3650) / ((_3663 * 0.699999988079071044921875) + 1.0));
                                float _3686 = exp2(log2(1.0 / ((_3663 * 3.5) + 5.0)) * 0.25);
                                float _3687 = 1.0 - _1110;
                                float _3694 = sqrt(1.0 - ((1.0 - (_3687 * _3687)) * (1.0 - (_3686 * _3686))));
                                float _3695 = _3694 * _3694;
                                float _3696 = _3695 * _3695;
                                float _3697 = _3643 - _3116;
                                float _3698 = _3644 - _3117;
                                float _3699 = _3645 - _3118;
                                float _3703 = inversesqrt(dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699)));
                                float _3707 = dot(vec3(_1035, _1038, _1041), vec3((-0.0) - _3116, (-0.0) - _3117, (-0.0) - _3118));
                                float _4825 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3711 = dot(vec3(_1035, _1038, _1041), vec3(_3703 * _3697, _3703 * _3698, _3703 * _3699));
                                float _4836 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3718 = ((_3714 * _3714) * (_3696 + (-1.0))) + 1.0;
                                float _3719 = _3656 * _3695;
                                float _3720 = _3719 * _3719;
                                float _3726 = ((1.0 - _3720) * dot(vec3(_1035, _1038, _1041), vec3(_3643, _3644, _3645))) + _3720;
                                float _4847 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3728 = 1.0 - _3695;
                                float _3738 = (0.5 / (((_3727 * ((_3710 * _3728) + _3695)) + 9.9999999392252902907785028219223e-09) + (((_3727 * _3728) + _3695) * _3710))) * _3727;
                                float _4858 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3748 = (_3673 * _3650) * (((_3696 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3718 * _3718) * ((_3663 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3674 * _3520.y;
                                frontier_phi_83_pred_1 = _3674 * _3520.x;
                                frontier_phi_83_pred_2 = _3748 * _3532.z;
                                frontier_phi_83_pred_3 = _3748 * _3532.y;
                                frontier_phi_83_pred_4 = _3748 * _3532.x;
                                frontier_phi_83_pred_5 = _3674 * _3520.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3756 = frontier_phi_83_pred;
                            _3755 = frontier_phi_83_pred_1;
                            _3754 = frontier_phi_83_pred_2;
                            _3753 = frontier_phi_83_pred_3;
                            _3752 = frontier_phi_83_pred_4;
                            _3757 = frontier_phi_83_pred_5;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            if (_3479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3479;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3464;
                        frontier_phi_77_pred_1 = _3463;
                        frontier_phi_77_pred_2 = _3462;
                        frontier_phi_77_pred_3 = _3461;
                        frontier_phi_77_pred_4 = _3460;
                        frontier_phi_77_pred_5 = _3459;
                    }
                    _3101 = frontier_phi_77_pred;
                    _3099 = frontier_phi_77_pred_1;
                    _3097 = frontier_phi_77_pred_2;
                    _3095 = frontier_phi_77_pred_3;
                    _3093 = frontier_phi_77_pred_4;
                    _3091 = frontier_phi_77_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3091;
                        _3251 = _3093;
                        _3252 = _3095;
                        _3253 = _3097;
                        _3254 = _3099;
                        _3255 = _3101;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3095;
                frontier_phi_58_59_ladder_1 = _3101;
                frontier_phi_58_59_ladder_2 = _3099;
                frontier_phi_58_59_ladder_3 = _3097;
                frontier_phi_58_59_ladder_4 = _3093;
                frontier_phi_58_59_ladder_5 = _3091;
            }
            else
            {
                frontier_phi_58_59_ladder = _2973;
                frontier_phi_58_59_ladder_1 = _2979;
                frontier_phi_58_59_ladder_2 = _2977;
                frontier_phi_58_59_ladder_3 = _2975;
                frontier_phi_58_59_ladder_4 = _2971;
                frontier_phi_58_59_ladder_5 = _2969;
            }
            _3090 = frontier_phi_58_59_ladder_5;
            _3092 = frontier_phi_58_59_ladder_4;
            _3094 = frontier_phi_58_59_ladder;
            _3096 = frontier_phi_58_59_ladder_3;
            _3098 = frontier_phi_58_59_ladder_2;
            _3100 = frontier_phi_58_59_ladder_1;
        }
        float _3105 = isnan(1.0) ? _1094 : (isnan(_1094) ? 1.0 : min(_1094, 1.0));
        _2881 = (_3105 * _3096) + _2314;
        _2883 = (_3105 * _3098) + _2316;
        _2885 = (_3105 * _3100) + _2318;
        _2887 = ((_3090 * _1078) * _3105) + _2662;
        _2889 = ((_3092 * _1080) * _3105) + _2664;
        _2891 = ((_3094 * _1081) * _3105) + _2666;
    }
    else
    {
        _2881 = _2314;
        _2883 = _2316;
        _2885 = _2318;
        _2887 = _2662;
        _2889 = _2664;
        _2891 = _2666;
    }
    float _4874 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4885 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4896 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2908 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2881 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1094))) + ((_2887 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1931)) * cbPerFrame._m0[3u].x);
    float _2909 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2883 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1094))) + ((_2889 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1931)) * cbPerFrame._m0[3u].x);
    float _2910 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2885 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1094))) + ((_2891 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1931)) * cbPerFrame._m0[3u].x);
    uint _2911 = _267 + 6u;
    float _2919 = _1016 / cbSceneParam._m0[86u].x;
    float _2920 = _1017 / cbSceneParam._m0[86u].y;
    vec4 _2934 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2936 = _2934.x;
    float _2937 = _2934.y;
    float _2938 = _2934.z;
    float _2939 = _2934.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _2994 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _2995 = _2994 / _939;
        float _3006 = _2995 * _989;
        float _3007 = _990 * _2995;
        float _3008 = (-0.0) - _3007;
        float _3010 = _2995 * _991;
        float _3012 = (cbSceneParam._m0[77u].w * _3008) / _2994;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3007;
        float _3020 = sqrt(((_3006 * _3006) + (_3007 * _3007)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2994)) * _3020;
        float _3028 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3008 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3013 > 0.0) ? exp2(_3028 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3151 = 1.0 / cbSceneParam._m0[80u].x;
            float _3152 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3153 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            _3207 = ((abs(_3020 / _3008) * cbSceneParam._m0[80u].y) * ((((_3162 - _3163) * 2.0) - ((exp2(_3028 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0)))) - exp2(_3028 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))))) * _3151)) - ((exp2(_3030 * _3162) - exp2(_3030 * _3163)) * _3151))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2939);
        _3032 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2936;
        _3034 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2937;
        _3036 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2938;
        _3038 = _3218 * _2939;
    }
    else
    {
        _3032 = _2936;
        _3034 = _2937;
        _3036 = _2938;
        _3038 = _2939;
    }
    bool _3245;
    vec4 _3048;
    vec4 _3070;
    float _3072;
    float _3076;
    float _3077;
    float _3078;
    float _3079;
    bool _3089;
    for (;;)
    {
        _3048 = cbMatDynParam._m0[0u];
        float _3050 = roundEven(_3048.y);
        bool _3051 = _3050 == 3.0;
        float _3052 = log2(_3038);
        float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * _2908;
        float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * _2909;
        float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * _2910;
        float _3068 = _1005 + (-0.5);
        _3070 = cbMtdParam._m0[1u];
        _3072 = _3070.y * _3068;
        float _3075 = (_3050 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3076 = _3075 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = _3075 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3034)));
        _3078 = _3075 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3036)));
        _3079 = _3068 * 0.999000012874603271484375;
        _3089 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3089)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3079) < 0.5)
            {
                _3245 = true;
                break;
            }
        }
        uint _3186 = _1054 + uint(_3048.w);
        if ((cbInstanceData._m0[_3186].w < 1.0) && ((cbInstanceData._m0[_3186].w + _3079) < 0.5))
        {
            _3245 = true;
            break;
        }
        if ((_3072 + 1.0) < _3070.x)
        {
            _3245 = true;
            break;
        }
        _3245 = false;
        break;
    }
    float _3450;
    if (_3245)
    {
        discard_state = true;
        _3450 = 0.0;
    }
    else
    {
        _3450 = cbInstanceData._m0[_2911].w;
    }
    SV_Target.x = _3076;
    SV_Target.y = _3077;
    SV_Target.z = _3078;
    SV_Target.w = _3450;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2911].w;
    discard_exit();
}


