#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1247;
float _3629;
float _3630;
float _3631;
float _3632;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[23u].w) + _373) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3641 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _398 = (_391 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _399 = (_391 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _400 = (_391 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _391) + _439;
    float _451 = ((((_418.x - _437) * _391) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _391) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3652 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _487 = (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _488 = (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _491 = fma(_459, _226, fma(_488, _233, _487 * _219));
    float _494 = fma(_459, _227, fma(_488, _234, _487 * _220));
    float _497 = fma(_459, _228, fma(_488, _235, _487 * _221));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _540 = (cbMtdParam._m0[19u].x + dot(vec4(_501 * _491, _501 * _494, _501 * _497, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_530 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[21u].z);
    float _3663 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _548 = (_541 * (cbMtdParam._m0[17u].x - _398)) + _398;
    float _549 = (_541 * (cbMtdParam._m0[17u].y - _399)) + _399;
    float _550 = (_541 * (cbMtdParam._m0[17u].z - _400)) + _400;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _578 = _576.x;
    float _596 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _578) * _391) + _578;
    float _600 = ((_562.x - _596) * cbMtdParam._m0[19u].z) + _596;
    float _602 = _600 - (_600 * _541);
    float _606 = (cbMtdParam._m0[19u].w * (_475.z - _448)) + _448;
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _626 = (_619.x * 2.0) + (-1.0);
    float _627 = (_619.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3674 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _636 = ((_619.z - _606) * _541) + _606;
    float _646 = ((sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) - _459) * _541) + _459;
    float _649 = (((_626 - _487) * _541) + _487) + (cbMtdParam._m0[21u].x * _487);
    float _650 = (((_627 - _488) * _541) + _488) + (cbMtdParam._m0[21u].x * _488);
    float _652 = cbMtdParam._m0[22u].x + _475.w;
    float _655 = fma(_646, _226, fma(_650, _233, _649 * _219));
    float _658 = fma(_646, _227, fma(_650, _234, _649 * _220));
    float _661 = fma(_646, _228, fma(_650, _235, _649 * _221));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3685 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _669 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _3707 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3718 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3729 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3740 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _674 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    vec4 _753 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _755 = _753.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _927 = sqrt(((_739 * _739) + (_740 * _740)) + (_741 * _741));
        float _933 = (cbMatDynParam._m0[5u].x * _927) + cbMatDynParam._m0[5u].y;
        float _3751 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _938 = (cbMatDynParam._m0[5u].z * _927) + cbMatDynParam._m0[5u].w;
        float _3762 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) - _934)) + _934) < ((_755 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _788 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _791 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _804 = _238 + 9u;
    uint _805 = _804 + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3773 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _817 = 1.0 - _674;
    float _818 = _814 * _817;
    float _819 = _815 * _817;
    float _820 = _816 * _817;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _674;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _674;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _674;
    float _828 = _825 + 0.039999999105930328369140625;
    float _830 = _826 + 0.039999999105930328369140625;
    float _831 = _827 + 0.039999999105930328369140625;
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _844 = ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * TEXCOORD_5.w) * _840.x;
    float _845 = dot(vec3(_666, _667, _668), vec3(_746, _747, _748));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _666) - _746;
    float _853 = (_848 * _667) - _747;
    float _854 = (_848 * _668) - _748;
    float _858 = abs(dot(vec3(_746, _747, _748), vec3(_666, _667, _668)));
    float _3806 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_669);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _879 = (1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _880 = _873 * _860;
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _975 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _979 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _1004 = _908 + _666;
        float _1005 = _912 + _667;
        float _1006 = _916 + _668;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_666, _667, _668), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3854 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_666, _667, _668), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3887 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_666, _667, _668), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3920 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1293 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1297 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1320 = _908 + _666;
        float _1321 = _912 + _667;
        float _1322 = _916 + _668;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_666, _667, _668), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3983 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_666, _667, _668), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4016 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_666, _667, _668), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4049 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = _1247;
        _1568 = _1247;
        _1569 = _1247;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1259)) + _1259;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1260)) + _1260;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1261)) + _1261;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _852 * 0.5;
    float _1627 = _853 * 0.5;
    float _1628 = _854 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1743 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1747 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1751 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1754 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1757 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1760 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1788;
        if (_1754 > 0.0)
        {
            _1788 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1788 = frontier_phi_17_15_ladder;
        }
        float _1991;
        if (_1757 > 0.0)
        {
            _1991 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1991 = frontier_phi_26_22_ladder;
        }
        float _2245;
        if (_1760 > 0.0)
        {
            _2245 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2245 = frontier_phi_38_33_ladder;
        }
        float _2247 = isnan(_1991) ? _1788 : (isnan(_1788) ? _1991 : min(_1788, _1991));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1754) + _1743;
        float _2253 = (_2248 * _1757) + _1747;
        float _2254 = (_2248 * _1760) + _1751;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2255;
        float _2259 = _2255 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 > _2259) || ((_2253 < _2257) || ((_2252 < _2257) || (_2252 > _2259))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_16_38_ladder = _2382.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2382.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2382.x * cbModelParam._m0[1u].y;
        }
        _1776 = frontier_phi_16_38_ladder_2;
        _1778 = frontier_phi_16_38_ladder_1;
        _1780 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1695);
        _1776 = _1764.x * cbModelParam._m0[1u].y;
        _1778 = _1764.y * cbModelParam._m0[1u].y;
        _1780 = _1764.z * cbModelParam._m0[1u].y;
    }
    float _1784 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1784 : min(cbModelParam._m0[25u].w, _1784));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1839 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1843 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1847 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1850 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1853 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1856 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1996;
        if (_1850 > 0.0)
        {
            _1996 = abs((1.0 - _1839) / _1850);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1839 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1996 = frontier_phi_28_24_ladder;
        }
        float _2272;
        if (_1853 > 0.0)
        {
            _2272 = abs((1.0 - _1843) / _1853);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1843 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2272 = frontier_phi_40_35_ladder;
        }
        float _2485;
        if (_1856 > 0.0)
        {
            _2485 = abs((1.0 - _1847) / _1856);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1847 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2485 = frontier_phi_49_46_ladder;
        }
        float _2487 = isnan(_2272) ? _1996 : (isnan(_1996) ? _2272 : min(_1996, _2272));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1850) + _1839;
        float _2493 = (_2488 * _1853) + _1843;
        float _2494 = (_2488 * _1856) + _1847;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1785);
            frontier_phi_25_49_ladder = _2693.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2693.x * cbModelParam._m0[1u].z;
        }
        _1875 = frontier_phi_25_49_ladder_2;
        _1877 = frontier_phi_25_49_ladder_1;
        _1879 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1785);
        _1875 = _1859.x * cbModelParam._m0[1u].z;
        _1877 = _1859.y * cbModelParam._m0[1u].z;
        _1879 = _1859.z * cbModelParam._m0[1u].z;
    }
    float _1892 = (((_879 * _828) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1875 - _1776)) + _1776);
    float _1894 = (((_879 * _830) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1877 - _1778)) + _1778);
    float _1896 = (((_879 * _831) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1879 - _1780)) + _1780);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, _1892 * cbSceneParam._m0[91u].x));
    uvec4 _1915 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1917 = _1915.x * 14u;
    uint _1918 = _1917 + 13u;
    float _1925 = _844 + (-1.0);
    float _1930 = (cbLight._m0[_1918].x * _1925) + 1.0;
    float _1931 = (cbLight._m0[_1918].y * _1925) + 1.0;
    float _1932 = (cbLight._m0[_1918].z * _1925) + 1.0;
    float _1933 = (cbLight._m0[_1918].w * _1925) + 1.0;
    uint _1934 = _1917 + 5u;
    float _1940 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1944 = _1917 + 4u;
    float _1950 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1954 = _1917 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_666, _667, _668));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_666, _667, _668));
    float _4185 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _4196 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1934].x * _1940) * _1975) + ((cbLight._m0[_1944].x * _1950) * _1973);
    float _1983 = ((_1940 * cbLight._m0[_1934].y) * _1975) + ((_1950 * cbLight._m0[_1944].y) * _1973);
    float _1984 = ((_1940 * cbLight._m0[_1934].z) * _1975) + ((_1950 * cbLight._m0[_1944].z) * _1973);
    uvec4 _1988 = floatBitsToUint(cbLight._m0[_1917 + 12u]);
    bool _1990 = _1988.x == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1990)
    {
        _2001 = _1982;
        _2003 = _1983;
        _2005 = _1984;
    }
    else
    {
        uint _2009 = _1917 + 6u;
        float _2025 = (dot(vec3(cbLight._m0[_1917 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _4207 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2028 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2001 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1982;
        _2003 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1983;
        _2005 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1984;
    }
    bool _2008 = _1988.y == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2008)
    {
        _2046 = _2001;
        _2048 = _2003;
        _2050 = _2005;
    }
    else
    {
        uint _2216 = _1917 + 7u;
        float _2232 = (dot(vec3(cbLight._m0[_1917 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4223 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2235 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2046 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2001;
        _2048 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2003;
        _2050 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2005;
    }
    uint _2053 = _1917 + 8u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _669) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1917].x + _746;
    float _2069 = cbLight._m0[_1917].y + _747;
    float _2070 = cbLight._m0[_1917].z + _748;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1917].xyz));
    float _4239 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2082 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2083 = dot(vec3(_666, _667, _668), vec3(_2075, _2076, _2077));
    float _4261 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2075, _2076, _2077));
    float _4272 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2067 * _2067;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0);
    float _2104 = 0.959999978542327880859375 - _825;
    float _2106 = 0.959999978542327880859375 - _826;
    float _2107 = 0.959999978542327880859375 - _827;
    float _2114 = 1.0 - _2067;
    float _2125 = (0.5 / (((_2082 * ((_2081 * _2114) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2114) + _2067) * _2081))) * _2081;
    float _4283 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    uint _2138 = _1917 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _669) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1954].x + _746;
    float _2152 = cbLight._m0[_1954].y + _747;
    float _2153 = cbLight._m0[_1954].z + _748;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1954].xyz));
    float _4294 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2165 = dot(vec3(_666, _667, _668), vec3(_2158, _2159, _2160));
    float _4305 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2158, _2159, _2160));
    float _4316 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0);
    float _2191 = 1.0 - _2150;
    float _2201 = (0.5 / (((_2082 * ((_2164 * _2191) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2191) + _2150) * _2164))) * _2164;
    float _4327 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2213 = (((((_2184 * _2104) + _828) * cbLight._m0[_2138].x) * _2203) * _1940) + (((((_2103 * _2104) + _828) * cbLight._m0[_2053].x) * _2127) * _1950);
    float _2214 = (((((_2184 * _2106) + _830) * cbLight._m0[_2138].y) * _2203) * _1940) + (((((_2103 * _2106) + _830) * cbLight._m0[_2053].y) * _2127) * _1950);
    float _2215 = (((((_2184 * _2107) + _831) * cbLight._m0[_2138].z) * _2203) * _1940) + (((((_2103 * _2107) + _831) * cbLight._m0[_2053].z) * _2127) * _1950);
    float _2277;
    float _2279;
    float _2281;
    if (_1990)
    {
        _2277 = _2213;
        _2279 = _2214;
        _2281 = _2215;
    }
    else
    {
        uint _2283 = _1917 + 2u;
        uint _2287 = _1917 + 10u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _669) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _746;
        float _2304 = cbLight._m0[_2283].y + _747;
        float _2305 = cbLight._m0[_2283].z + _748;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2283].xyz));
        float _4338 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2317 = dot(vec3(_666, _667, _668), vec3(_2310, _2311, _2312));
        float _4349 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4360 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2343 = 1.0 - _2302;
        float _2353 = (0.5 / (((_2082 * ((_2316 * _2343) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2343) + _2302) * _2316))) * _2316;
        float _4371 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2277 = (((((_2336 * _2104) + _828) * cbLight._m0[_2287].x) * _2355) * _2356) + _2213;
        _2279 = (((((_2336 * _2106) + _830) * cbLight._m0[_2287].y) * _2355) * _2356) + _2214;
        _2281 = (((((_2336 * _2107) + _831) * cbLight._m0[_2287].z) * _2355) * _2356) + _2215;
    }
    float _2391;
    float _2393;
    float _2395;
    if (_2008)
    {
        _2391 = _2277;
        _2393 = _2279;
        _2395 = _2281;
    }
    else
    {
        uint _2402 = _1917 + 3u;
        uint _2406 = _1917 + 11u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _669) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _746;
        float _2423 = cbLight._m0[_2402].y + _747;
        float _2424 = cbLight._m0[_2402].z + _748;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2402].xyz));
        float _4387 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2436 = dot(vec3(_666, _667, _668), vec3(_2429, _2430, _2431));
        float _4398 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4409 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2082 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2462) + _2421) * _2435))) * _2435;
        float _4420 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2391 = (((((_2455 * _2104) + _828) * cbLight._m0[_2406].x) * _2474) * _2475) + _2277;
        _2393 = (((((_2455 * _2106) + _830) * cbLight._m0[_2406].y) * _2474) * _2475) + _2279;
        _2395 = (((((_2455 * _2107) + _831) * cbLight._m0[_2406].z) * _2474) * _2475) + _2281;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1915.y == 0u)
    {
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2550;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2550;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2550;
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2566)));
        float _2587 = (log2(_2553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
        }
        else
        {
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            uint _2857 = 0u;
            uint _2866;
            bool _2867;
            for (;;)
            {
                _2866 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                _2867 = _2866 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2867)
                {
                    frontier_phi_66_pred = _2851;
                    frontier_phi_66_pred_1 = _2856;
                    frontier_phi_66_pred_2 = _2855;
                    frontier_phi_66_pred_3 = _2854;
                    frontier_phi_66_pred_4 = _2853;
                    frontier_phi_66_pred_5 = _2852;
                }
                else
                {
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    uint _3002;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2866;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3006 = uint(findLSB(_3002)) + (_2857 << 5u);
                        uint _3003 = (_3002 + 4294967295u) & _3002;
                        uint _3008 = _3006 * 48u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3028 = (_3006 * 48u) + 4u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3047 = (_3006 * 48u) + 8u;
                        vec3 _3058 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x));
                        float _3062 = _3022.x - _2551;
                        float _3063 = _3022.y - _2552;
                        float _3064 = _3022.z - _2553;
                        float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                        float _3068 = inversesqrt(_3065);
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3072 = dot(vec3(_785, _788, _791), vec3(_3069, _3070, _3071));
                        float _3077 = 1.0 - (_3065 * _3022.w);
                        float _4446 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3078 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3079 = sqrt(_3065) * _3041.w;
                        float _3082 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3072) + _3083;
                        float _3089 = _3079 * _3079;
                        float _3093 = ((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3078) / ((_3089 * 0.699999988079071044921875) + 1.0);
                        float _3097 = (-0.0) - _2551;
                        float _3098 = (-0.0) - _2552;
                        float _3099 = (-0.0) - _2553;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3114 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _860;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3104 + _3069;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_785, _788, _791), vec3(_3104, _3105, _3106));
                        float _4462 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3139 = dot(vec3(_785, _788, _791), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4473 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = _3082 * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3072) + _3148;
                        float _4484 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4495 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3146 * _3146) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125))) * _3078;
                        _2926 = (_3093 * _3041.x) + _2999;
                        _2927 = (_3093 * _3041.y) + _3000;
                        _2928 = (_3093 * _3041.z) + _3001;
                        _2923 = (_3174 * _3058.x) + _2996;
                        _2924 = (_3174 * _3058.y) + _2997;
                        _2925 = (_3174 * _3058.z) + _2998;
                        if (_3003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _3003;
                        }
                    }
                    frontier_phi_66_pred = _2923;
                    frontier_phi_66_pred_1 = _2928;
                    frontier_phi_66_pred_2 = _2927;
                    frontier_phi_66_pred_3 = _2926;
                    frontier_phi_66_pred_4 = _2925;
                    frontier_phi_66_pred_5 = _2924;
                }
                _2699 = frontier_phi_66_pred;
                _2709 = frontier_phi_66_pred_1;
                _2707 = frontier_phi_66_pred_2;
                _2705 = frontier_phi_66_pred_3;
                _2703 = frontier_phi_66_pred_4;
                _2701 = frontier_phi_66_pred_5;
                uint _2858 = _2857 + 1u;
                if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2851 = _2699;
                    _2852 = _2701;
                    _2853 = _2703;
                    _2854 = _2705;
                    _2855 = _2707;
                    _2856 = _2709;
                    _2857 = _2858;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
        }
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.z;
        uint _2715 = (_2713 >> 8u) & 15u;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((4294967295u << _2715) & _2597) == 0u)
        {
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
        }
        else
        {
            float _2844 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
            float _2845 = _2844 * _2551;
            float _2846 = _2844 * _2552;
            float _2847 = _2844 * _2553;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2715 < ((_2713 >> 12u) & 15u))
            {
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2979 = _2698;
                float _2980 = _2700;
                float _2981 = _2702;
                float _2982 = _2704;
                float _2983 = _2706;
                float _2984 = _2708;
                uint _2985 = _2715;
                uint _2994;
                bool _2995;
                for (;;)
                {
                    _2994 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                    _2995 = _2994 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2995)
                    {
                        frontier_phi_77_pred = _2984;
                        frontier_phi_77_pred_1 = _2983;
                        frontier_phi_77_pred_2 = _2982;
                        frontier_phi_77_pred_3 = _2981;
                        frontier_phi_77_pred_4 = _2980;
                        frontier_phi_77_pred_5 = _2979;
                    }
                    else
                    {
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        uint _3207 = _2994;
                        uint _3208;
                        vec4 _3233;
                        float _3234;
                        vec4 _3249;
                        vec3 _3261;
                        vec4 _3276;
                        vec4 _3292;
                        float _3338;
                        bool _3339;
                        for (;;)
                        {
                            uint _3218 = ((_2985 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3207));
                            _3208 = (_3207 + 4294967295u) & _3207;
                            uint _3220 = _3218 * 40u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3234 = _3233.w;
                            uint _3236 = (_3218 * 40u) + 4u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3251 = (_3218 * 40u) + 8u;
                            _3261 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x));
                            uint _3263 = (_3218 * 40u) + 16u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3279 = (_3218 * 40u) + 20u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3218 * 40u) + 24u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3313 = (_3218 * 40u) + 28u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3338 = fma(_2553, _3326.z, fma(_2552, _3326.y, _3326.x * _2551)) + _3326.w;
                            _3339 = !((fma(_2553, _3307.z, fma(_2552, _3307.y, _3307.x * _2551)) + _3307.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3339)
                            {
                                float _3366 = _3233.x - _2551;
                                float _3367 = _3233.y - _2552;
                                float _3368 = _3233.z - _2553;
                                float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                                float _3372 = inversesqrt(_3369);
                                float _3373 = _3372 * _3366;
                                float _3374 = _3372 * _3367;
                                float _3375 = _3372 * _3368;
                                float _3379 = 1.0 - (_3369 / (_3234 * _3234));
                                float _4506 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3384 = sqrt(_3369) * _3249.w;
                                float _3386 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                                float _3387 = _3386 * _3386;
                                float _3390 = ((1.0 - _3387) * dot(vec3(_3373, _3374, _3375), vec3(_785, _788, _791))) + _3387;
                                float _3393 = _3384 * _3384;
                                float _3397 = (fma(_2553, _3276.z, fma(_2552, _3276.y, _3276.x * _2551)) + _3276.w) / _3338;
                                float _3398 = (fma(_2553, _3292.z, fma(_2552, _3292.y, _3292.x * _2551)) + _3292.w) / _3338;
                                float _3402 = 1.0 - dot(vec2(_3397, _3398), vec2(_3397, _3398));
                                float _4522 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3404 = _3403 * (((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3380) / ((_3393 * 0.699999988079071044921875) + 1.0));
                                float _3416 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                                float _3417 = 1.0 - _860;
                                float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                                float _3425 = _3424 * _3424;
                                float _3426 = _3425 * _3425;
                                float _3427 = _3373 - _2845;
                                float _3428 = _3374 - _2846;
                                float _3429 = _3375 - _2847;
                                float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                                float _3437 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2845, (-0.0) - _2846, (-0.0) - _2847));
                                float _4533 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3441 = dot(vec3(_785, _788, _791), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                                float _4544 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                                float _3449 = _3386 * _3425;
                                float _3450 = _3449 * _3449;
                                float _3456 = ((1.0 - _3450) * dot(vec3(_785, _788, _791), vec3(_3373, _3374, _3375))) + _3450;
                                float _4555 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3458 = 1.0 - _3425;
                                float _3468 = (0.5 / (((_3457 * ((_3440 * _3458) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3425) * _3440))) * _3457;
                                float _4566 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3478 = (_3403 * _3380) * (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3448 * _3448) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3404 * _3249.y;
                                frontier_phi_83_pred_1 = _3404 * _3249.x;
                                frontier_phi_83_pred_2 = _3478 * _3261.z;
                                frontier_phi_83_pred_3 = _3478 * _3261.y;
                                frontier_phi_83_pred_4 = _3478 * _3261.x;
                                frontier_phi_83_pred_5 = _3404 * _3249.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_83_pred;
                            _3485 = frontier_phi_83_pred_1;
                            _3484 = frontier_phi_83_pred_2;
                            _3483 = frontier_phi_83_pred_3;
                            _3482 = frontier_phi_83_pred_4;
                            _3487 = frontier_phi_83_pred_5;
                            _3191 = _3485 + _3204;
                            _3192 = _3486 + _3205;
                            _3193 = _3487 + _3206;
                            _3188 = _3482 + _3201;
                            _3189 = _3483 + _3202;
                            _3190 = _3484 + _3203;
                            if (_3208 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3208;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3193;
                        frontier_phi_77_pred_1 = _3192;
                        frontier_phi_77_pred_2 = _3191;
                        frontier_phi_77_pred_3 = _3190;
                        frontier_phi_77_pred_4 = _3189;
                        frontier_phi_77_pred_5 = _3188;
                    }
                    _2830 = frontier_phi_77_pred;
                    _2828 = frontier_phi_77_pred_1;
                    _2826 = frontier_phi_77_pred_2;
                    _2824 = frontier_phi_77_pred_3;
                    _2822 = frontier_phi_77_pred_4;
                    _2820 = frontier_phi_77_pred_5;
                    uint _2986 = _2985 + 1u;
                    if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2979 = _2820;
                        _2980 = _2822;
                        _2981 = _2824;
                        _2982 = _2826;
                        _2983 = _2828;
                        _2984 = _2830;
                        _2985 = _2986;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2824;
                frontier_phi_58_59_ladder_1 = _2830;
                frontier_phi_58_59_ladder_2 = _2828;
                frontier_phi_58_59_ladder_3 = _2826;
                frontier_phi_58_59_ladder_4 = _2822;
                frontier_phi_58_59_ladder_5 = _2820;
            }
            else
            {
                frontier_phi_58_59_ladder = _2702;
                frontier_phi_58_59_ladder_1 = _2708;
                frontier_phi_58_59_ladder_2 = _2706;
                frontier_phi_58_59_ladder_3 = _2704;
                frontier_phi_58_59_ladder_4 = _2700;
                frontier_phi_58_59_ladder_5 = _2698;
            }
            _2819 = frontier_phi_58_59_ladder_5;
            _2821 = frontier_phi_58_59_ladder_4;
            _2823 = frontier_phi_58_59_ladder;
            _2825 = frontier_phi_58_59_ladder_3;
            _2827 = frontier_phi_58_59_ladder_2;
            _2829 = frontier_phi_58_59_ladder_1;
        }
        float _2834 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2610 = (_2834 * _2825) + _2046;
        _2612 = (_2834 * _2827) + _2048;
        _2614 = (_2834 * _2829) + _2050;
        _2616 = ((_2819 * _828) * _2834) + _2391;
        _2618 = ((_2821 * _830) * _2834) + _2393;
        _2620 = ((_2823 * _831) * _2834) + _2395;
    }
    else
    {
        _2610 = _2046;
        _2612 = _2048;
        _2614 = _2050;
        _2616 = _2391;
        _2618 = _2393;
        _2620 = _2395;
    }
    float _4582 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4593 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4604 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2637 = ((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2610 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _844))) + ((_2616 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2638 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2612 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _844))) + ((_2618 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2639 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2614 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _844))) + ((_2620 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    uint _2640 = _238 + 6u;
    float _2648 = _766 / cbSceneParam._m0[86u].x;
    float _2649 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2663 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2665 = _2663.x;
    float _2666 = _2663.y;
    float _2667 = _2663.z;
    float _2668 = _2663.w;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2724 = _2723 / _688;
        float _2735 = _2724 * _739;
        float _2736 = _740 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2739 = _2724 * _741;
        float _2741 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2742 = _2741 + cbSceneParam._m0[79u].w;
        float _2743 = cbSceneParam._m0[79u].w - _2736;
        float _2749 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2739 * _2739));
        float _2752 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2749;
        float _2757 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2759 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2936;
        if (abs((_2737 - _2741) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2936 = ((((_2742 > 0.0) ? exp2(_2757 * _2742) : (2.0 - exp2(_2759 * _2742))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2752;
        }
        else
        {
            float _2880 = 1.0 / cbSceneParam._m0[80u].x;
            float _2881 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : max(_2742, _2743));
            float _2882 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : min(_2742, _2743));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            _2936 = ((abs(_2749 / _2737) * cbSceneParam._m0[80u].y) * ((((_2891 - _2892) * 2.0) - ((exp2(_2757 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0)))) - exp2(_2757 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))))) * _2880)) - ((exp2(_2759 * _2891) - exp2(_2759 * _2892)) * _2880))) + (_2752 * cbSceneParam._m0[80u].z);
        }
        vec4 _2938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, 1.0), 0.0);
        float _2947 = exp2((_2936 * (-1.44269502162933349609375)) * (1.0 - _2938.w));
        float _2948 = log2(_2947);
        float _2964 = log2(_2668);
        _2761 = (exp2(_2964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].x)) * _2938.x) / cbSceneParam._m0[78u].x)) + _2665;
        _2763 = (exp2(_2964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].y)) * _2938.y) / cbSceneParam._m0[78u].y)) + _2666;
        _2765 = (exp2(_2964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].z)) * _2938.z) / cbSceneParam._m0[78u].z)) + _2667;
        _2767 = _2947 * _2668;
    }
    else
    {
        _2761 = _2665;
        _2763 = _2666;
        _2765 = _2667;
        _2767 = _2668;
    }
    bool _2974;
    vec4 _2777;
    vec4 _2799;
    float _2801;
    float _2805;
    float _2806;
    float _2807;
    float _2808;
    bool _2818;
    for (;;)
    {
        _2777 = cbMatDynParam._m0[0u];
        float _2779 = roundEven(_2777.y);
        bool _2780 = _2779 == 3.0;
        float _2781 = log2(_2767);
        float _2788 = exp2(_2781 * cbSceneParam._m0[78u].x) * _2637;
        float _2789 = exp2(_2781 * cbSceneParam._m0[78u].y) * _2638;
        float _2790 = exp2(_2781 * cbSceneParam._m0[78u].z) * _2639;
        float _2797 = _755 + (-0.5);
        _2799 = cbMtdParam._m0[1u];
        _2801 = _2799.y * _2797;
        float _2804 = (_2779 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2805 = _2804 * (_2780 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2761)));
        _2806 = _2804 * (_2780 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2763)));
        _2807 = _2804 * (_2780 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2765)));
        _2808 = _2797 * 0.999000012874603271484375;
        _2818 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2818)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2808) < 0.5)
            {
                _2974 = true;
                break;
            }
        }
        uint _2915 = _804 + uint(_2777.w);
        if ((cbInstanceData._m0[_2915].w < 1.0) && ((cbInstanceData._m0[_2915].w + _2808) < 0.5))
        {
            _2974 = true;
            break;
        }
        if ((_2801 + 1.0) < _2799.x)
        {
            _2974 = true;
            break;
        }
        _2974 = false;
        break;
    }
    float _3179;
    if (_2974)
    {
        discard_state = true;
        _3179 = 0.0;
    }
    else
    {
        _3179 = cbInstanceData._m0[_2640].w;
    }
    SV_Target.x = _2805;
    SV_Target.y = _2806;
    SV_Target.z = _2807;
    SV_Target.w = _3179;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2640].w;
    discard_exit();
}


