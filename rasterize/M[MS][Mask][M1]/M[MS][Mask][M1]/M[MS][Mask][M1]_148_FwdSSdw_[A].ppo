#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1765;
float _4165;
float _4166;
float _4167;
float _4168;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _265 = _264 * _256;
    float _266 = _264 * _257;
    float _267 = _264 * _258;
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = _271 * NORMAL.x;
    float _273 = _271 * NORMAL.y;
    float _274 = _271 * NORMAL.z;
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = _278 * TANGENT.x;
    float _280 = _278 * TANGENT.y;
    float _281 = _278 * TANGENT.z;
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4177 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4188 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4199 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[23u].w) + _454) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4210 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[23u].w) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4221 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _552 = (_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479;
    float _553 = (_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480;
    float _554 = (_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[23u].w) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4232 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _622 = (_615 * ((_573.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _623 = (_615 * ((_573.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _624 = (_615 * ((_573.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _628 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _622;
    float _631 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _623;
    float _634 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _624;
    float _641 = ((_622 - _628) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) + _628;
    float _642 = ((_623 - _631) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) + _631;
    float _643 = ((_624 - _634) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) + _634;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _322) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _323) + cbTextureTilingScale._m0[14u].w));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _726 = _722.z;
    float _733 = ((_705.x - _724) * _472) + _724;
    float _734 = ((_705.y - _725) * _472) + _725;
    float _735 = ((_705.z - _726) * _472) + _726;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _758 = ((_747.x - _733) * _545) + _733;
    float _759 = ((_747.y - _734) * _545) + _734;
    float _760 = ((_747.z - _735) * _545) + _735;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _785 = ((_772.z - _760) * _615) + _760;
    float _788 = ((((_772.x - _758) * _615) + _758) * 2.0) + (-1.0);
    float _789 = ((((_772.y - _759) * _615) + _759) * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4243 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))));
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _825 = (_788 + ((((_680.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_813.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _826 = (_789 + ((((_680.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_813.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _829 = fma(_795, _272, fma(_826, _279, _825 * _265));
    float _832 = fma(_795, _273, fma(_826, _280, _825 * _266));
    float _835 = fma(_795, _274, fma(_826, _281, _825 * _267));
    float _839 = inversesqrt(dot(vec3(_829, _832, _835), vec3(_829, _832, _835)));
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _868 = _866.x;
    float _869 = 1.0 - _868;
    float _877 = (cbMtdParam._m0[19u].x + dot(vec4(_839 * _829, _839 * _832, _839 * _835, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_868 - _869) * cbMtdParam._m0[24u].z) + _869) * cbMtdParam._m0[21u].z);
    float _4254 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _878 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _880 = (-0.0) - cbMtdParam._m0[24u].x;
    float _882 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
    float _890 = _878 - ((_878 * TEXCOORD_8.x) * _883);
    float _891 = _878 - ((_878 * TEXCOORD_8.y) * _883);
    float _892 = _878 - ((_878 * TEXCOORD_8.z) * _883);
    float _899 = (_890 * ((_661.x * cbMtdParam._m0[18u].x) - _641)) + _641;
    float _900 = (_891 * ((_661.y * cbMtdParam._m0[18u].y) - _642)) + _642;
    float _901 = (_892 * ((_661.z * cbMtdParam._m0[18u].z) - _643)) + _643;
    float _916 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _917 = _916 * TEXCOORD.z;
    float _918 = _916 * TEXCOORD.w;
    vec4 _930 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _917) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _918) + cbTextureTilingScale._m0[19u].w));
    float _932 = _930.x;
    float _933 = 1.0 - _932;
    float _959 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_932 - _933) * cbMtdParam._m0[24u].w) + _933) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4275 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _960 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _968 = ((((cbMtdParam._m0[10u].x - _899) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _960) + _899;
    float _969 = ((((cbMtdParam._m0[10u].y - _900) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _960) + _900;
    float _970 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _901)) * _960) + _901;
    vec4 _996 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _998 = _996.x;
    float _1016 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _998) * _472) + _998;
    float _1033 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _1016) * _545) + _1016;
    float _1050 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1033) * _615) + _1033;
    float _1056 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1050) * cbMtdParam._m0[19u].z) + _1050;
    float _1058 = _1056 - (_1056 * _890);
    float _1060 = _1058 - (_1058 * _960);
    float _1067 = (((_680.z - _785) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _785;
    float _1071 = ((_813.z - _1067) * cbMtdParam._m0[19u].w) + _1067;
    vec4 _1087 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1094 = (_1087.x * 2.0) + (-1.0);
    float _1095 = (_1087.y * 2.0) + (-1.0);
    float _1096 = dot(vec2(_1094, _1095), vec2(_1094, _1095));
    float _4286 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1104 = ((_1087.z - _1071) * _890) + _1071;
    float _1107 = ((cbMtdParam._m0[23u].x - _1104) * _960) + _1104;
    vec4 _1130 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _917) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _918) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1136 = (_1130.x * 2.0) + (-1.0);
    float _1137 = (_1130.y * 2.0) + (-1.0);
    float _1138 = dot(vec2(_1136, _1137), vec2(_1136, _1137));
    float _4297 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1153 = ((sqrt(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) - _795) * _892) + _795;
    float _1156 = (((_1094 - _825) * _890) + _825) + (cbMtdParam._m0[21u].x * _825);
    float _1157 = (((_1095 - _826) * _891) + _826) + (cbMtdParam._m0[21u].x * _826);
    float _1168 = (((_1136 - _1156) + (_1156 * cbMtdParam._m0[22u].z)) * _960) + _1156;
    float _1169 = (((_1137 - _1157) + (_1157 * cbMtdParam._m0[22u].z)) * _960) + _1157;
    float _1170 = (_960 * (sqrt(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) - _1153)) + _1153;
    float _1172 = cbMtdParam._m0[22u].x + _813.w;
    float _1175 = fma(_1170, _272, fma(_1169, _279, _1168 * _265));
    float _1178 = fma(_1170, _273, fma(_1169, _280, _1168 * _266));
    float _1181 = fma(_1170, _274, fma(_1169, _281, _1168 * _267));
    float _1185 = inversesqrt(dot(vec3(_1175, _1178, _1181), vec3(_1175, _1178, _1181)));
    float _1186 = _1185 * _1175;
    float _1187 = _1185 * _1178;
    float _1188 = _1185 * _1181;
    float _4308 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1189 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _4330 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4341 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4352 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4363 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1194 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _1208 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1258 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1248);
    float _1259 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1248);
    float _1260 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1248);
    float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
    float _1265 = _1258 * _1264;
    float _1266 = _1259 * _1264;
    float _1267 = _1260 * _1264;
    vec4 _1272 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1274 = _1272.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1446 = sqrt(((_1258 * _1258) + (_1259 * _1259)) + (_1260 * _1260));
        float _1452 = (cbMatDynParam._m0[5u].x * _1446) + cbMatDynParam._m0[5u].y;
        float _4374 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1457 = (cbMatDynParam._m0[5u].z * _1446) + cbMatDynParam._m0[5u].w;
        float _4385 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) - _1453)) + _1453) < ((_1274 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1285 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1286 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1304 = fma(_1188, cbSceneParam._m0[5u].z, fma(_1187, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1186));
    float _1307 = fma(_1188, cbSceneParam._m0[6u].z, fma(_1187, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1186));
    float _1310 = fma(_1188, cbSceneParam._m0[7u].z, fma(_1187, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1186));
    uint _1323 = _303 + 9u;
    uint _1324 = _1323 + uint(cbMatDynParam._m0[0u].w);
    float _1330 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * cbInstanceData._m0[_1324].x;
    float _1331 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * cbInstanceData._m0[_1324].y;
    float _1332 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * cbInstanceData._m0[_1324].z;
    float _4396 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1333 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _1334 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _4418 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1335 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _1336 = 1.0 - _1194;
    float _1337 = _1333 * _1336;
    float _1338 = _1334 * _1336;
    float _1339 = _1335 * _1336;
    float _1344 = (_1333 + (-0.039999999105930328369140625)) * _1194;
    float _1345 = (_1334 + (-0.039999999105930328369140625)) * _1194;
    float _1346 = (_1335 + (-0.039999999105930328369140625)) * _1194;
    float _1347 = _1344 + 0.039999999105930328369140625;
    float _1349 = _1345 + 0.039999999105930328369140625;
    float _1350 = _1346 + 0.039999999105930328369140625;
    vec4 _1359 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1285, cbSceneParam._m0[86u].y * _1286));
    float _1363 = ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * TEXCOORD_5.w) * _1359.x;
    float _1364 = dot(vec3(_1186, _1187, _1188), vec3(_1265, _1266, _1267));
    float _1367 = _1364 * 2.0;
    float _1371 = (_1367 * _1186) - _1265;
    float _1372 = (_1367 * _1187) - _1266;
    float _1373 = (_1367 * _1188) - _1267;
    float _1377 = abs(dot(vec3(_1265, _1266, _1267), vec3(_1186, _1187, _1188)));
    float _4429 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
    float _1379 = sqrt(_1189);
    float _1392 = exp2((_1379 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1379 * 3.0));
    float _1398 = (1.0 - _1392) * ((_1379 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1399 = _1392 * _1379;
    float _1427 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1431 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1435 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1764;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1489 = fma(_1435, cbModelParam._m0[26u].z, fma(_1431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1427));
        float _1493 = fma(_1435, cbModelParam._m0[27u].z, fma(_1431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1427));
        float _1497 = fma(_1435, cbModelParam._m0[28u].z, fma(_1431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1427));
        float _1522 = _1427 + _1186;
        float _1523 = _1431 + _1187;
        float _1524 = _1435 + _1188;
        float _1534 = fma(_1524, cbModelParam._m0[26u].z, fma(_1523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1522)) - _1489;
        float _1535 = fma(_1524, cbModelParam._m0[27u].z, fma(_1523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1522)) - _1493;
        float _1536 = fma(_1524, cbModelParam._m0[28u].z, fma(_1523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1522)) - _1497;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1489 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1493 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[34u].z) + ((((((_1497 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1592 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1558.x + (-0.5));
        float _1594 = _1592 * (_1558.y + (-0.5));
        float _1595 = _1592 * (_1558.z + (-0.5));
        float _1602 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1565.x + (-0.5));
        float _1604 = _1602 * (_1565.y + (-0.5));
        float _1605 = _1602 * (_1565.z + (-0.5));
        float _1612 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1572.x + (-0.5));
        float _1614 = _1612 * (_1572.y + (-0.5));
        float _1615 = _1612 * (_1572.z + (-0.5));
        float _1622 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1579.x + (-0.5));
        float _1624 = _1622 * (_1579.y + (-0.5));
        float _1625 = _1622 * (_1579.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1646 = (dot(vec3(_1186, _1187, _1188), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1656 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4477 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1658 + 1.0))) + _1663) * _1626;
        float _1673 = _1594 * 0.5;
        float _1674 = _1604 * 0.5;
        float _1675 = _1614 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_1186, _1187, _1188), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4488 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4499 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4510 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_1700 + 1.0))) + _1705) * _1627;
        float _1715 = _1595 * 0.5;
        float _1716 = _1605 * 0.5;
        float _1717 = _1615 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_1186, _1187, _1188), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4521 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4532 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4543 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_1742 + 1.0))) + _1747) * _1628;
        _1764 = _1595;
        _1766 = _1594;
        _1767 = _1593;
        _1768 = _1605;
        _1769 = _1604;
        _1770 = _1603;
        _1771 = _1615;
        _1772 = _1614;
        _1773 = _1613;
        _1774 = _1628;
        _1775 = _1627;
        _1776 = _1626;
        _1777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1765;
        _1766 = _1765;
        _1767 = _1765;
        _1768 = _1765;
        _1769 = _1765;
        _1770 = _1765;
        _1771 = _1765;
        _1772 = _1765;
        _1773 = _1765;
        _1774 = _1765;
        _1775 = _1765;
        _1776 = _1765;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
    }
    float _2074;
    float _2075;
    float _2076;
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1805 = fma(_1435, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427));
        float _1809 = fma(_1435, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427));
        float _1813 = fma(_1435, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427));
        float _1836 = _1427 + _1186;
        float _1837 = _1431 + _1187;
        float _1838 = _1435 + _1188;
        float _1848 = fma(_1838, cbModelParam._m0[30u].z, fma(_1837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1836)) - _1805;
        float _1849 = fma(_1838, cbModelParam._m0[31u].z, fma(_1837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1836)) - _1809;
        float _1850 = fma(_1838, cbModelParam._m0[32u].z, fma(_1837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1836)) - _1813;
        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
        float _1867 = ((_1854 * _1848) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1805 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1868 = ((_1854 * _1849) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1809 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1869 = ((_1854 * _1850) / cbModelParam._m0[35u].z) + ((((((_1813 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1871 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        vec4 _1878 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        vec4 _1885 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        vec4 _1892 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        float _1904 = exp2((_1871.w + (-0.5)) * 20.0) * 2.0;
        float _1905 = _1904 * (_1871.x + (-0.5));
        float _1906 = _1904 * (_1871.y + (-0.5));
        float _1907 = _1904 * (_1871.z + (-0.5));
        float _1914 = exp2((_1878.w + (-0.5)) * 20.0) * 2.0;
        float _1915 = _1914 * (_1878.x + (-0.5));
        float _1916 = _1914 * (_1878.y + (-0.5));
        float _1917 = _1914 * (_1878.z + (-0.5));
        float _1924 = exp2((_1885.w + (-0.5)) * 20.0) * 2.0;
        float _1925 = _1924 * (_1885.x + (-0.5));
        float _1926 = _1924 * (_1885.y + (-0.5));
        float _1927 = _1924 * (_1885.z + (-0.5));
        float _1934 = exp2((_1892.w + (-0.5)) * 20.0) * 2.0;
        float _1935 = _1934 * (_1892.x + (-0.5));
        float _1936 = _1934 * (_1892.y + (-0.5));
        float _1937 = _1934 * (_1892.z + (-0.5));
        float _1938 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1939 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = _1905 * 0.5;
        float _1942 = _1915 * 0.5;
        float _1943 = _1925 * 0.5;
        float _1944 = dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943));
        float _1949 = (_1944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1944);
        float _1957 = (dot(vec3(_1186, _1187, _1188), vec3(_1949 * _1941, _1949 * _1942, _1949 * _1943)) + 1.0) * 0.5;
        float _4584 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1966 = sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943)) / (_1938 + 9.9999997473787516355514526367188e-06);
        float _4595 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1968 = _1967 * 2.0;
        float _1972 = (1.0 - _1967) / (_1967 + 1.0);
        float _4606 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1982 = ((((1.0 - _1973) * (_1968 + 2.0)) * exp2(log2(isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_1968 + 1.0))) + _1973) * _1938;
        float _1983 = _1906 * 0.5;
        float _1984 = _1916 * 0.5;
        float _1985 = _1926 * 0.5;
        float _1986 = dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985));
        float _1991 = (_1986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1986);
        float _1999 = (dot(vec3(_1186, _1187, _1188), vec3(_1991 * _1983, _1991 * _1984, _1991 * _1985)) + 1.0) * 0.5;
        float _4617 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2008 = sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985)) / (_1939 + 9.9999997473787516355514526367188e-06);
        float _4628 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2010 = _2009 * 2.0;
        float _2014 = (1.0 - _2009) / (_2009 + 1.0);
        float _4639 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2024 = ((((1.0 - _2015) * (_2010 + 2.0)) * exp2(log2(isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2010 + 1.0))) + _2015) * _1939;
        float _2025 = _1907 * 0.5;
        float _2026 = _1917 * 0.5;
        float _2027 = _1927 * 0.5;
        float _2028 = dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027));
        float _2033 = (_2028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2028);
        float _2041 = (dot(vec3(_1186, _1187, _1188), vec3(_2033 * _2025, _2033 * _2026, _2033 * _2027)) + 1.0) * 0.5;
        float _4650 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2050 = sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027)) / (_1940 + 9.9999997473787516355514526367188e-06);
        float _4661 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2052 = _2051 * 2.0;
        float _2056 = (1.0 - _2051) / (_2051 + 1.0);
        float _4672 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2066 = ((((1.0 - _2057) * (_2052 + 2.0)) * exp2(log2(isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2052 + 1.0))) + _2057) * _1940;
        _2074 = _1907;
        _2075 = _1906;
        _2076 = _1905;
        _2077 = _1917;
        _2078 = _1916;
        _2079 = _1915;
        _2080 = _1927;
        _2081 = _1926;
        _2082 = _1925;
        _2083 = _1940;
        _2084 = _1939;
        _2085 = _1938;
        _2086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)));
        _2087 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
        _2088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0)));
    }
    else
    {
        _2074 = _1765;
        _2075 = _1765;
        _2076 = _1765;
        _2077 = _1765;
        _2078 = _1765;
        _2079 = _1765;
        _2080 = _1765;
        _2081 = _1765;
        _2082 = _1765;
        _2083 = _1765;
        _2084 = _1765;
        _2085 = _1765;
        _2086 = 0.0;
        _2087 = 0.0;
        _2088 = 0.0;
    }
    float _2098 = (cbModelParam._m0[1u].x * (_2086 - _1777)) + _1777;
    float _2099 = (cbModelParam._m0[1u].x * (_2087 - _1778)) + _1778;
    float _2100 = (cbModelParam._m0[1u].x * (_2088 - _1779)) + _1779;
    float _2121 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2099, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2099, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2099, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2098));
    float _2142 = _1371 * 0.5;
    float _2143 = _1372 * 0.5;
    float _2144 = _1373 * 0.5;
    float _2145 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_2076, _2079, _2082, _2085));
    float _2148 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_2075, _2078, _2081, _2084));
    float _2151 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_2074, _2077, _2080, _2083));
    float _2185;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2158 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_1764, _1768, _1771, _1774));
        float _2162 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_1766, _1769, _1772, _1775));
        float _2166 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_1767, _1770, _1773, _1776));
        float _2173 = dot(vec4(cbModelParam._m0[39u]), vec4(_2142, _2143, _2144, 1.0));
        _2185 = dot(vec3(isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0)), isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)), isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2173) ? 0.0 : (isnan(0.0) ? _2173 : max(0.0, _2173))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2185 = 1.0;
    }
    float _2196;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2187 = dot(vec4(cbModelParam._m0[40u]), vec4(_2142, _2143, _2144, 1.0));
        _2196 = dot(vec3(isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0)), isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2187) ? 0.0 : (isnan(0.0) ? _2187 : max(0.0, _2187))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2196 = 1.0;
    }
    float _2200 = (_2196 * cbModelParam._m0[1u].x) + (_2185 * (1.0 - cbModelParam._m0[1u].x));
    float _2210 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1189);
    float _2211 = isnan(_2210) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2210 : min(cbModelParam._m0[25u].z, _2210));
    float _2291;
    float _2293;
    float _2295;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2258 = fma(_1435, cbModelParam._m0[13u].z, fma(_1431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1427)) + cbModelParam._m0[13u].w;
        float _2262 = fma(_1435, cbModelParam._m0[14u].z, fma(_1431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1427)) + cbModelParam._m0[14u].w;
        float _2266 = fma(_1435, cbModelParam._m0[15u].z, fma(_1431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1427)) + cbModelParam._m0[15u].w;
        float _2269 = fma(_1373, cbModelParam._m0[13u].z, fma(_1372, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1371));
        float _2272 = fma(_1373, cbModelParam._m0[14u].z, fma(_1372, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1371));
        float _2275 = fma(_1373, cbModelParam._m0[15u].z, fma(_1372, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1371));
        float _2303;
        if (_2269 > 0.0)
        {
            _2303 = abs((1.0 - _2258) / _2269);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2269 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2258 + 1.0) / _2269);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2303 = frontier_phi_17_15_ladder;
        }
        float _2526;
        if (_2272 > 0.0)
        {
            _2526 = abs((1.0 - _2262) / _2272);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2272 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2262 + 1.0) / _2272);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2526 = frontier_phi_26_22_ladder;
        }
        float _2783;
        if (_2275 > 0.0)
        {
            _2783 = abs((1.0 - _2266) / _2275);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2275 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2266 + 1.0) / _2275);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2783 = frontier_phi_38_33_ladder;
        }
        float _2785 = isnan(_2526) ? _2303 : (isnan(_2303) ? _2526 : min(_2303, _2526));
        float _2786 = isnan(_2783) ? _2785 : (isnan(_2785) ? _2783 : min(_2785, _2783));
        float _2790 = (_2786 * _2269) + _2258;
        float _2791 = (_2786 * _2272) + _2262;
        float _2792 = (_2786 * _2275) + _2266;
        float _2793 = _2786 * 9.9999997473787516355514526367188e-05;
        float _2795 = (-1.0) - _2793;
        float _2797 = _2793 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2792 > _2797) || ((_2792 < _2795) || ((_2791 > _2797) || ((_2791 < _2795) || ((_2790 < _2795) || (_2790 > _2797))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2792, cbModelParam._m0[9u].z, fma(_2791, cbModelParam._m0[9u].y, _2790 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2792, cbModelParam._m0[10u].z, fma(_2791, cbModelParam._m0[10u].y, _2790 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2792, cbModelParam._m0[11u].z, fma(_2791, cbModelParam._m0[11u].y, _2790 * cbModelParam._m0[11u].x))), _2211);
            frontier_phi_16_38_ladder = _2920.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2920.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2920.x * cbModelParam._m0[1u].y;
        }
        _2291 = frontier_phi_16_38_ladder_2;
        _2293 = frontier_phi_16_38_ladder_1;
        _2295 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2279 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1371, _1372, _1373), _2211);
        _2291 = _2279.x * cbModelParam._m0[1u].y;
        _2293 = _2279.y * cbModelParam._m0[1u].y;
        _2295 = _2279.z * cbModelParam._m0[1u].y;
    }
    float _2299 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1189);
    float _2300 = isnan(_2299) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2299 : min(cbModelParam._m0[25u].w, _2299));
    float _2389;
    float _2391;
    float _2393;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2353 = fma(_1435, cbModelParam._m0[21u].z, fma(_1431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1427)) + cbModelParam._m0[21u].w;
        float _2357 = fma(_1435, cbModelParam._m0[22u].z, fma(_1431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1427)) + cbModelParam._m0[22u].w;
        float _2361 = fma(_1435, cbModelParam._m0[23u].z, fma(_1431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1427)) + cbModelParam._m0[23u].w;
        float _2364 = fma(_1373, cbModelParam._m0[21u].z, fma(_1372, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1371));
        float _2367 = fma(_1373, cbModelParam._m0[22u].z, fma(_1372, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1371));
        float _2370 = fma(_1373, cbModelParam._m0[23u].z, fma(_1372, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1371));
        float _2531;
        if (_2364 > 0.0)
        {
            _2531 = abs((1.0 - _2353) / _2364);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2364 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2353 + 1.0) / _2364);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2531 = frontier_phi_28_24_ladder;
        }
        float _2810;
        if (_2367 > 0.0)
        {
            _2810 = abs((1.0 - _2357) / _2367);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2367 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2357 + 1.0) / _2367);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2810 = frontier_phi_40_35_ladder;
        }
        float _3023;
        if (_2370 > 0.0)
        {
            _3023 = abs((1.0 - _2361) / _2370);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2370 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2361 + 1.0) / _2370);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3023 = frontier_phi_49_46_ladder;
        }
        float _3025 = isnan(_2810) ? _2531 : (isnan(_2531) ? _2810 : min(_2531, _2810));
        float _3026 = isnan(_3023) ? _3025 : (isnan(_3025) ? _3023 : min(_3025, _3023));
        float _3030 = (_3026 * _2364) + _2353;
        float _3031 = (_3026 * _2367) + _2357;
        float _3032 = (_3026 * _2370) + _2361;
        float _3033 = _3026 * 9.9999997473787516355514526367188e-05;
        float _3034 = (-1.0) - _3033;
        float _3036 = _3033 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3032 > _3036) || ((_3032 < _3034) || ((_3031 > _3036) || ((_3031 < _3034) || ((_3030 < _3034) || (_3030 > _3036))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3231 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3032, cbModelParam._m0[17u].z, fma(_3031, cbModelParam._m0[17u].y, _3030 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3032, cbModelParam._m0[18u].z, fma(_3031, cbModelParam._m0[18u].y, _3030 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3032, cbModelParam._m0[19u].z, fma(_3031, cbModelParam._m0[19u].y, _3030 * cbModelParam._m0[19u].x))), _2300);
            frontier_phi_25_49_ladder = _3231.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3231.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3231.x * cbModelParam._m0[1u].z;
        }
        _2389 = frontier_phi_25_49_ladder_2;
        _2391 = frontier_phi_25_49_ladder_1;
        _2393 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1371, _1372, _1373), _2300);
        _2389 = _2373.x * cbModelParam._m0[1u].z;
        _2391 = _2373.y * cbModelParam._m0[1u].z;
        _2393 = _2373.z * cbModelParam._m0[1u].z;
    }
    float _2406 = (((_1398 * _1347) + _1399) * _1363) * ((cbModelParam._m0[1u].w * (_2389 - _2291)) + _2291);
    float _2408 = (((_1398 * _1349) + _1399) * _1363) * ((cbModelParam._m0[1u].w * (_2391 - _2293)) + _2293);
    float _2410 = (((_1398 * _1350) + _1399) * _1363) * ((cbModelParam._m0[1u].w * (_2393 - _2295)) + _2295);
    float _2413 = fma(_2410, cbSceneParam._m0[89u].z, fma(_2408, cbSceneParam._m0[89u].y, _2406 * cbSceneParam._m0[89u].x));
    float _2416 = fma(_2410, cbSceneParam._m0[90u].z, fma(_2408, cbSceneParam._m0[90u].y, _2406 * cbSceneParam._m0[90u].x));
    float _2419 = fma(_2410, cbSceneParam._m0[91u].z, fma(_2408, cbSceneParam._m0[91u].y, _2406 * cbSceneParam._m0[91u].x));
    vec4 _2427 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1285, _1286));
    float _2429 = _2427.w;
    float _2441 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2429);
    float _2442 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2429);
    float _2443 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2429);
    uvec4 _2447 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2449 = _2447.x * 14u;
    uint _2450 = _2449 + 13u;
    float _2457 = _1363 + (-1.0);
    float _2462 = (cbLight._m0[_2450].x * _2457) + 1.0;
    float _2463 = (cbLight._m0[_2450].y * _2457) + 1.0;
    float _2464 = (cbLight._m0[_2450].z * _2457) + 1.0;
    float _2465 = (cbLight._m0[_2450].w * _2457) + 1.0;
    uint _2466 = _2449 + 5u;
    float _2472 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
    uint _2476 = _2449 + 4u;
    float _2485 = isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0));
    uint _2489 = _2449 | 1u;
    float _2500 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_1186, _1187, _1188));
    float _2503 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_1186, _1187, _1188));
    float _4808 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _4819 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2508 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * 0.3183098733425140380859375;
    float _2510 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * 0.3183098733425140380859375;
    float _2517 = ((cbLight._m0[_2466].x * _2472) * _2510) + (((cbLight._m0[_2476].x * _2441) * _2485) * _2508);
    float _2518 = ((_2472 * cbLight._m0[_2466].y) * _2510) + (((cbLight._m0[_2476].y * _2442) * _2485) * _2508);
    float _2519 = ((_2472 * cbLight._m0[_2466].z) * _2510) + (((cbLight._m0[_2476].z * _2443) * _2485) * _2508);
    uvec4 _2523 = floatBitsToUint(cbLight._m0[_2449 + 12u]);
    bool _2525 = _2523.x == 0u;
    float _2536;
    float _2538;
    float _2540;
    if (_2525)
    {
        _2536 = _2517;
        _2538 = _2518;
        _2540 = _2519;
    }
    else
    {
        uint _2544 = _2449 + 6u;
        float _2560 = (dot(vec3(cbLight._m0[_2449 + 2u].xyz), vec3(_1186, _1187, _1188)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4830 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2563 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
        _2536 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2517;
        _2538 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2518;
        _2540 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2519;
    }
    bool _2543 = _2523.y == 0u;
    float _2581;
    float _2583;
    float _2585;
    if (_2543)
    {
        _2581 = _2536;
        _2583 = _2538;
        _2585 = _2540;
    }
    else
    {
        uint _2754 = _2449 + 7u;
        float _2770 = (dot(vec3(cbLight._m0[_2449 + 3u].xyz), vec3(_1186, _1187, _1188)) * 0.5) + 0.5;
        float _2771 = _2770 * _2770;
        float _4846 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2772 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2773 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
        _2581 = (((cbLight._m0[_2754].x * 0.3183098733425140380859375) * _2772) * _2773) + _2536;
        _2583 = (((cbLight._m0[_2754].y * 0.3183098733425140380859375) * _2772) * _2773) + _2538;
        _2585 = (((cbLight._m0[_2754].z * 0.3183098733425140380859375) * _2772) * _2773) + _2540;
    }
    uint _2588 = _2449 + 8u;
    float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _1189) * 0.949999988079071044921875);
    float _2602 = _2601 * _2601;
    float _2603 = cbLight._m0[_2449].x + _1265;
    float _2604 = cbLight._m0[_2449].y + _1266;
    float _2605 = cbLight._m0[_2449].z + _1267;
    float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
    float _2610 = _2609 * _2603;
    float _2611 = _2609 * _2604;
    float _2612 = _2609 * _2605;
    float _2613 = dot(vec3(_1186, _1187, _1188), vec3(cbLight._m0[_2449].xyz));
    float _4862 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _4873 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _2617 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
    float _2618 = dot(vec3(_1186, _1187, _1188), vec3(_2610, _2611, _2612));
    float _4884 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2610, _2611, _2612));
    float _4895 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = _2602 * _2602;
    float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
    float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
    float _2639 = 0.959999978542327880859375 - _1344;
    float _2641 = 0.959999978542327880859375 - _1345;
    float _2642 = 0.959999978542327880859375 - _1346;
    float _2649 = 1.0 - _2602;
    float _2660 = (0.5 / (((_2617 * ((_2616 * _2649) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2649) + _2602) * _2616))) * _2616;
    float _4906 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2662 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
    uint _2676 = _2449 + 9u;
    float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _1189) * 0.949999988079071044921875);
    float _2688 = _2687 * _2687;
    float _2689 = cbLight._m0[_2489].x + _1265;
    float _2690 = cbLight._m0[_2489].y + _1266;
    float _2691 = cbLight._m0[_2489].z + _1267;
    float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
    float _2696 = _2695 * _2689;
    float _2697 = _2695 * _2690;
    float _2698 = _2695 * _2691;
    float _2699 = dot(vec3(_1186, _1187, _1188), vec3(cbLight._m0[_2489].xyz));
    float _4917 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
    float _2703 = dot(vec3(_1186, _1187, _1188), vec3(_2696, _2697, _2698));
    float _4928 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2706 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _2707 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2696, _2697, _2698));
    float _4939 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2711 = _2688 * _2688;
    float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
    float _2722 = exp2(log2(1.0 - (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) * 5.0);
    float _2729 = 1.0 - _2688;
    float _2739 = (0.5 / (((_2617 * ((_2702 * _2729) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2729) + _2688) * _2702))) * _2702;
    float _4950 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2741 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
    float _2751 = (((((_2722 * _2639) + _1347) * cbLight._m0[_2676].x) * _2741) * _2472) + ((((cbLight._m0[_2588].x * _2441) * ((_2638 * _2639) + _1347)) * _2662) * _2485);
    float _2752 = (((((_2722 * _2641) + _1349) * cbLight._m0[_2676].y) * _2741) * _2472) + ((((cbLight._m0[_2588].y * _2442) * ((_2638 * _2641) + _1349)) * _2662) * _2485);
    float _2753 = (((((_2722 * _2642) + _1350) * cbLight._m0[_2676].z) * _2741) * _2472) + ((((cbLight._m0[_2588].z * _2443) * ((_2638 * _2642) + _1350)) * _2662) * _2485);
    float _2815;
    float _2817;
    float _2819;
    if (_2525)
    {
        _2815 = _2751;
        _2817 = _2752;
        _2819 = _2753;
    }
    else
    {
        uint _2821 = _2449 + 2u;
        uint _2825 = _2449 + 10u;
        float _2839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2821].w)) * _1189) * 0.949999988079071044921875);
        float _2840 = _2839 * _2839;
        float _2841 = cbLight._m0[_2821].x + _1265;
        float _2842 = cbLight._m0[_2821].y + _1266;
        float _2843 = cbLight._m0[_2821].z + _1267;
        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
        float _2848 = _2847 * _2841;
        float _2849 = _2847 * _2842;
        float _2850 = _2847 * _2843;
        float _2851 = dot(vec3(_1186, _1187, _1188), vec3(cbLight._m0[_2821].xyz));
        float _4961 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
        float _2855 = dot(vec3(_1186, _1187, _1188), vec3(_2848, _2849, _2850));
        float _4972 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _2859 = dot(vec3(cbLight._m0[_2821].xyz), vec3(_2848, _2849, _2850));
        float _4983 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2863 = _2840 * _2840;
        float _2867 = ((_2858 * _2858) * (_2863 + (-1.0))) + 1.0;
        float _2874 = exp2(log2(1.0 - (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) * 5.0);
        float _2881 = 1.0 - _2840;
        float _2891 = (0.5 / (((_2617 * ((_2854 * _2881) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2881) + _2840) * _2854))) * _2854;
        float _4994 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2863 / ((_2867 * _2867) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
        _2815 = (((((_2874 * _2639) + _1347) * cbLight._m0[_2825].x) * _2893) * _2894) + _2751;
        _2817 = (((((_2874 * _2641) + _1349) * cbLight._m0[_2825].y) * _2893) * _2894) + _2752;
        _2819 = (((((_2874 * _2642) + _1350) * cbLight._m0[_2825].z) * _2893) * _2894) + _2753;
    }
    float _2929;
    float _2931;
    float _2933;
    if (_2543)
    {
        _2929 = _2815;
        _2931 = _2817;
        _2933 = _2819;
    }
    else
    {
        uint _2940 = _2449 + 3u;
        uint _2944 = _2449 + 11u;
        float _2958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2940].w)) * _1189) * 0.949999988079071044921875);
        float _2959 = _2958 * _2958;
        float _2960 = cbLight._m0[_2940].x + _1265;
        float _2961 = cbLight._m0[_2940].y + _1266;
        float _2962 = cbLight._m0[_2940].z + _1267;
        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
        float _2967 = _2966 * _2960;
        float _2968 = _2966 * _2961;
        float _2969 = _2966 * _2962;
        float _2970 = dot(vec3(_1186, _1187, _1188), vec3(cbLight._m0[_2940].xyz));
        float _5010 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _2974 = dot(vec3(_1186, _1187, _1188), vec3(_2967, _2968, _2969));
        float _5021 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
        float _2978 = dot(vec3(cbLight._m0[_2940].xyz), vec3(_2967, _2968, _2969));
        float _5032 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2982 = _2959 * _2959;
        float _2986 = ((_2977 * _2977) * (_2982 + (-1.0))) + 1.0;
        float _2993 = exp2(log2(1.0 - (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) * 5.0);
        float _3000 = 1.0 - _2959;
        float _3010 = (0.5 / (((_2617 * ((_2973 * _3000) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _3000) + _2959) * _2973))) * _2973;
        float _5043 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3012 = (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_2982 / ((_2986 * _2986) * 3.141590118408203125));
        float _3013 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
        _2929 = (((((_2993 * _2639) + _1347) * cbLight._m0[_2944].x) * _3012) * _3013) + _2815;
        _2931 = (((((_2993 * _2641) + _1349) * cbLight._m0[_2944].y) * _3012) * _3013) + _2817;
        _2933 = (((((_2993 * _2642) + _1350) * cbLight._m0[_2944].z) * _3012) * _3013) + _2819;
    }
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    if (_2447.y == 0u)
    {
        float _3088 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3089 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3088;
        float _3090 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3088;
        float _3091 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3088;
        uvec4 _3103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3104 = _3103.x;
        uint _3115 = uint((float(_3103.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1286) / _3104))) + floor(float(uint(cbSceneParam._m0[85u].x * _1285) / _3104)));
        float _3125 = (log2(_3091 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3126 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
        uint _3129 = uint(isnan(14.0) ? _3126 : (isnan(_3126) ? 14.0 : min(_3126, 14.0)));
        uvec4 _3134 = texelFetch(g_lightClusterGridBuffer, int(((_3129 << 2u) + (_3115 << 6u)) >> 2u));
        uint _3135 = _3134.x;
        uint _3136 = _3103.z;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        if (((((1u << ((_3136 >> 4u) & 15u)) + 4294967295u) & _3135) == 0u) || ((_3136 & 240u) == 0u))
        {
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
            _3244 = 0.0;
            _3246 = 0.0;
        }
        else
        {
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3245;
            float _3247;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            float _3393 = 0.0;
            uint _3394 = 0u;
            uint _3403;
            bool _3404;
            for (;;)
            {
                _3403 = texelFetch(g_lightClassification, int((((_3129 << 5u) + (_3115 << 9u)) + (_3394 << 2u)) >> 2u)).x;
                _3404 = _3403 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3404)
                {
                    frontier_phi_66_pred = _3388;
                    frontier_phi_66_pred_1 = _3393;
                    frontier_phi_66_pred_2 = _3392;
                    frontier_phi_66_pred_3 = _3391;
                    frontier_phi_66_pred_4 = _3390;
                    frontier_phi_66_pred_5 = _3389;
                }
                else
                {
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    float _3538;
                    uint _3539;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3393;
                    _3539 = _3403;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    for (;;)
                    {
                        uint _3543 = uint(findLSB(_3539)) + (_3394 << 5u);
                        uint _3540 = (_3539 + 4294967295u) & _3539;
                        uint _3545 = _3543 * 48u;
                        vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3545)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 3u)).x));
                        uint _3565 = (_3543 * 48u) + 4u;
                        vec4 _3578 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 3u)).x));
                        uint _3584 = (_3543 * 48u) + 8u;
                        vec3 _3595 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3584)).x, texelFetch(g_PointLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3584 + 2u)).x));
                        float _3599 = _3559.x - _3089;
                        float _3600 = _3559.y - _3090;
                        float _3601 = _3559.z - _3091;
                        float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                        float _3605 = inversesqrt(_3602);
                        float _3606 = _3605 * _3599;
                        float _3607 = _3605 * _3600;
                        float _3608 = _3605 * _3601;
                        float _3609 = dot(vec3(_1304, _1307, _1310), vec3(_3606, _3607, _3608));
                        float _3614 = 1.0 - (_3602 * _3559.w);
                        float _5069 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                        float _3615 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                        float _3616 = sqrt(_3602) * _3578.w;
                        float _3619 = 1.39999997615814208984375 / (_3616 + 1.39999997615814208984375);
                        float _3620 = _3619 * _3619;
                        float _3623 = ((1.0 - _3620) * _3609) + _3620;
                        float _3626 = _3616 * _3616;
                        float _3630 = ((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3615) / ((_3626 * 0.699999988079071044921875) + 1.0);
                        float _3634 = (-0.0) - _3089;
                        float _3635 = (-0.0) - _3090;
                        float _3636 = (-0.0) - _3091;
                        float _3640 = inversesqrt(dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636)));
                        float _3641 = _3640 * _3634;
                        float _3642 = _3640 * _3635;
                        float _3643 = _3640 * _3636;
                        float _3651 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                        float _3652 = 1.0 - _1379;
                        float _3659 = sqrt(1.0 - ((1.0 - (_3652 * _3652)) * (1.0 - (_3651 * _3651))));
                        float _3660 = _3659 * _3659;
                        float _3661 = _3660 * _3660;
                        float _3662 = _3641 + _3606;
                        float _3663 = _3642 + _3607;
                        float _3664 = _3643 + _3608;
                        float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                        float _3672 = dot(vec3(_1304, _1307, _1310), vec3(_3641, _3642, _3643));
                        float _5085 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3676 = dot(vec3(_1304, _1307, _1310), vec3(_3668 * _3662, _3668 * _3663, _3668 * _3664));
                        float _5096 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3679 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                        float _3683 = ((_3679 * _3679) * (_3661 + (-1.0))) + 1.0;
                        float _3684 = _3619 * _3660;
                        float _3685 = _3684 * _3684;
                        float _3688 = ((1.0 - _3685) * _3609) + _3685;
                        float _5107 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3689 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                        float _3690 = 1.0 - _3660;
                        float _3700 = (0.5 / (((_3689 * ((_3675 * _3690) + _3660)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3660) * _3675))) * _3689;
                        float _5118 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3711 = (((_3661 * 3.1415927410125732421875) * (isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0)))) / ((_3683 * _3683) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125))) * _3615;
                        _3463 = (_3630 * _3578.x) + _3536;
                        _3464 = (_3630 * _3578.y) + _3537;
                        _3465 = (_3630 * _3578.z) + _3538;
                        _3460 = (_3711 * _3595.x) + _3533;
                        _3461 = (_3711 * _3595.y) + _3534;
                        _3462 = (_3711 * _3595.z) + _3535;
                        if (_3540 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3465;
                            _3539 = _3540;
                        }
                    }
                    frontier_phi_66_pred = _3460;
                    frontier_phi_66_pred_1 = _3465;
                    frontier_phi_66_pred_2 = _3464;
                    frontier_phi_66_pred_3 = _3463;
                    frontier_phi_66_pred_4 = _3462;
                    frontier_phi_66_pred_5 = _3461;
                }
                _3237 = frontier_phi_66_pred;
                _3247 = frontier_phi_66_pred_1;
                _3245 = frontier_phi_66_pred_2;
                _3243 = frontier_phi_66_pred_3;
                _3241 = frontier_phi_66_pred_4;
                _3239 = frontier_phi_66_pred_5;
                uint _3395 = _3394 + 1u;
                if (_3395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3388 = _3237;
                    _3389 = _3239;
                    _3390 = _3241;
                    _3391 = _3243;
                    _3392 = _3245;
                    _3393 = _3247;
                    _3394 = _3395;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
            _3244 = _3245;
            _3246 = _3247;
        }
        uvec4 _3250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3251 = _3250.z;
        uint _3253 = (_3251 >> 8u) & 15u;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        float _3364;
        float _3366;
        if (((4294967295u << _3253) & _3135) == 0u)
        {
            _3356 = _3236;
            _3358 = _3238;
            _3360 = _3240;
            _3362 = _3242;
            _3364 = _3244;
            _3366 = _3246;
        }
        else
        {
            float _3381 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
            float _3382 = _3381 * _3089;
            float _3383 = _3381 * _3090;
            float _3384 = _3381 * _3091;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3253 < ((_3251 >> 12u) & 15u))
            {
                float _3357;
                float _3359;
                float _3361;
                float _3363;
                float _3365;
                float _3367;
                float _3516 = _3236;
                float _3517 = _3238;
                float _3518 = _3240;
                float _3519 = _3242;
                float _3520 = _3244;
                float _3521 = _3246;
                uint _3522 = _3253;
                uint _3531;
                bool _3532;
                for (;;)
                {
                    _3531 = texelFetch(g_lightClassification, int((((_3129 << 5u) + (_3115 << 9u)) + (_3522 << 2u)) >> 2u)).x;
                    _3532 = _3531 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3532)
                    {
                        frontier_phi_77_pred = _3521;
                        frontier_phi_77_pred_1 = _3520;
                        frontier_phi_77_pred_2 = _3519;
                        frontier_phi_77_pred_3 = _3518;
                        frontier_phi_77_pred_4 = _3517;
                        frontier_phi_77_pred_5 = _3516;
                    }
                    else
                    {
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _3738 = _3516;
                        float _3739 = _3517;
                        float _3740 = _3518;
                        float _3741 = _3519;
                        float _3742 = _3520;
                        float _3743 = _3521;
                        uint _3744 = _3531;
                        uint _3745;
                        vec4 _3770;
                        float _3771;
                        vec4 _3786;
                        vec3 _3798;
                        vec4 _3813;
                        vec4 _3828;
                        float _3874;
                        bool _3875;
                        for (;;)
                        {
                            uint _3755 = ((_3522 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3744));
                            _3745 = (_3744 + 4294967295u) & _3744;
                            uint _3757 = _3755 * 40u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            _3771 = _3770.w;
                            uint _3773 = (_3755 * 40u) + 4u;
                            _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3788 = (_3755 * 40u) + 8u;
                            _3798 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x));
                            uint _3800 = (_3755 * 40u) + 16u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3815 = (_3755 * 40u) + 20u;
                            _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            uint _3830 = (_3755 * 40u) + 24u;
                            vec4 _3843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 3u)).x));
                            uint _3849 = (_3755 * 40u) + 28u;
                            vec4 _3862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 3u)).x));
                            _3874 = fma(_3091, _3862.z, fma(_3090, _3862.y, _3862.x * _3089)) + _3862.w;
                            _3875 = !((fma(_3091, _3843.z, fma(_3090, _3843.y, _3843.x * _3089)) + _3843.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3875)
                            {
                                float _3902 = _3770.x - _3089;
                                float _3903 = _3770.y - _3090;
                                float _3904 = _3770.z - _3091;
                                float _3905 = dot(vec3(_3902, _3903, _3904), vec3(_3902, _3903, _3904));
                                float _3908 = inversesqrt(_3905);
                                float _3909 = _3908 * _3902;
                                float _3910 = _3908 * _3903;
                                float _3911 = _3908 * _3904;
                                float _3915 = 1.0 - (_3905 / (_3771 * _3771));
                                float _5129 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3920 = sqrt(_3905) * _3786.w;
                                float _3922 = 1.39999997615814208984375 / (_3920 + 1.39999997615814208984375);
                                float _3923 = _3922 * _3922;
                                float _3926 = ((1.0 - _3923) * dot(vec3(_3909, _3910, _3911), vec3(_1304, _1307, _1310))) + _3923;
                                float _3929 = _3920 * _3920;
                                float _3933 = (fma(_3091, _3813.z, fma(_3090, _3813.y, _3813.x * _3089)) + _3813.w) / _3874;
                                float _3934 = (fma(_3091, _3828.z, fma(_3090, _3828.y, _3828.x * _3089)) + _3828.w) / _3874;
                                float _3938 = 1.0 - dot(vec2(_3933, _3934), vec2(_3933, _3934));
                                float _5145 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3939 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3940 = _3939 * (((isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0))) * _3916) / ((_3929 * 0.699999988079071044921875) + 1.0));
                                float _3952 = exp2(log2(1.0 / ((_3929 * 3.5) + 5.0)) * 0.25);
                                float _3953 = 1.0 - _1379;
                                float _3960 = sqrt(1.0 - ((1.0 - (_3953 * _3953)) * (1.0 - (_3952 * _3952))));
                                float _3961 = _3960 * _3960;
                                float _3962 = _3961 * _3961;
                                float _3963 = _3909 - _3382;
                                float _3964 = _3910 - _3383;
                                float _3965 = _3911 - _3384;
                                float _3969 = inversesqrt(dot(vec3(_3963, _3964, _3965), vec3(_3963, _3964, _3965)));
                                float _3973 = dot(vec3(_1304, _1307, _1310), vec3((-0.0) - _3382, (-0.0) - _3383, (-0.0) - _3384));
                                float _5156 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3976 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3977 = dot(vec3(_1304, _1307, _1310), vec3(_3969 * _3963, _3969 * _3964, _3969 * _3965));
                                float _5167 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3980 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                                float _3984 = ((_3980 * _3980) * (_3962 + (-1.0))) + 1.0;
                                float _3985 = _3922 * _3961;
                                float _3986 = _3985 * _3985;
                                float _3992 = ((1.0 - _3986) * dot(vec3(_1304, _1307, _1310), vec3(_3909, _3910, _3911))) + _3986;
                                float _5178 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _3993 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _3994 = 1.0 - _3961;
                                float _4004 = (0.5 / (((_3993 * ((_3976 * _3994) + _3961)) + 9.9999999392252902907785028219223e-09) + (((_3993 * _3994) + _3961) * _3976))) * _3993;
                                float _5189 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4014 = (_3939 * _3916) * (((_3962 * 3.1415927410125732421875) * (isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0)))) / ((_3984 * _3984) * ((_3929 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3940 * _3786.y;
                                frontier_phi_83_pred_1 = _3940 * _3786.x;
                                frontier_phi_83_pred_2 = _4014 * _3798.z;
                                frontier_phi_83_pred_3 = _4014 * _3798.y;
                                frontier_phi_83_pred_4 = _4014 * _3798.x;
                                frontier_phi_83_pred_5 = _3940 * _3786.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4022 = frontier_phi_83_pred;
                            _4021 = frontier_phi_83_pred_1;
                            _4020 = frontier_phi_83_pred_2;
                            _4019 = frontier_phi_83_pred_3;
                            _4018 = frontier_phi_83_pred_4;
                            _4023 = frontier_phi_83_pred_5;
                            _3728 = _4021 + _3741;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            if (_3745 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3745;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3730;
                        frontier_phi_77_pred_1 = _3729;
                        frontier_phi_77_pred_2 = _3728;
                        frontier_phi_77_pred_3 = _3727;
                        frontier_phi_77_pred_4 = _3726;
                        frontier_phi_77_pred_5 = _3725;
                    }
                    _3367 = frontier_phi_77_pred;
                    _3365 = frontier_phi_77_pred_1;
                    _3363 = frontier_phi_77_pred_2;
                    _3361 = frontier_phi_77_pred_3;
                    _3359 = frontier_phi_77_pred_4;
                    _3357 = frontier_phi_77_pred_5;
                    uint _3523 = _3522 + 1u;
                    if (_3523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3516 = _3357;
                        _3517 = _3359;
                        _3518 = _3361;
                        _3519 = _3363;
                        _3520 = _3365;
                        _3521 = _3367;
                        _3522 = _3523;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3361;
                frontier_phi_58_59_ladder_1 = _3367;
                frontier_phi_58_59_ladder_2 = _3365;
                frontier_phi_58_59_ladder_3 = _3363;
                frontier_phi_58_59_ladder_4 = _3359;
                frontier_phi_58_59_ladder_5 = _3357;
            }
            else
            {
                frontier_phi_58_59_ladder = _3240;
                frontier_phi_58_59_ladder_1 = _3246;
                frontier_phi_58_59_ladder_2 = _3244;
                frontier_phi_58_59_ladder_3 = _3242;
                frontier_phi_58_59_ladder_4 = _3238;
                frontier_phi_58_59_ladder_5 = _3236;
            }
            _3356 = frontier_phi_58_59_ladder_5;
            _3358 = frontier_phi_58_59_ladder_4;
            _3360 = frontier_phi_58_59_ladder;
            _3362 = frontier_phi_58_59_ladder_3;
            _3364 = frontier_phi_58_59_ladder_2;
            _3366 = frontier_phi_58_59_ladder_1;
        }
        float _3371 = isnan(1.0) ? _1363 : (isnan(_1363) ? 1.0 : min(_1363, 1.0));
        _3148 = (_3371 * _3362) + _2581;
        _3150 = (_3371 * _3364) + _2583;
        _3152 = (_3371 * _3366) + _2585;
        _3154 = ((_3356 * _1347) * _3371) + _2929;
        _3156 = ((_3358 * _1349) * _3371) + _2931;
        _3158 = ((_3360 * _1350) * _3371) + _2933;
    }
    else
    {
        _3148 = _2581;
        _3150 = _2583;
        _3152 = _2585;
        _3154 = _2929;
        _3156 = _2931;
        _3158 = _2933;
    }
    float _5205 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _5216 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _5227 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _3175 = ((isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0))) * (_3148 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1363))) + ((_3154 + ((isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))) * _2200)) * cbPerFrame._m0[3u].x);
    float _3176 = ((isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0))) * (_3150 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1363))) + ((_3156 + ((isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0))) * _2200)) * cbPerFrame._m0[3u].x);
    float _3177 = ((isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0))) * (_3152 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1363))) + ((_3158 + ((isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0))) * _2200)) * cbPerFrame._m0[3u].x);
    uint _3178 = _303 + 6u;
    float _3186 = _1285 / cbSceneParam._m0[86u].x;
    float _3187 = _1286 / cbSceneParam._m0[86u].y;
    vec4 _3201 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3186, _3187, (log2((isnan(cbSceneParam._m0[77u].w) ? _1208 : (isnan(_1208) ? cbSceneParam._m0[77u].w : min(_1208, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3203 = _3201.x;
    float _3204 = _3201.y;
    float _3205 = _3201.z;
    float _3206 = _3201.w;
    float _3298;
    float _3300;
    float _3302;
    float _3304;
    if (_1208 > cbSceneParam._m0[78u].w)
    {
        float _3261 = isnan(_1208) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1208 : min(cbSceneParam._m0[80u].w, _1208));
        float _3262 = _3261 / _1208;
        float _3273 = _3262 * _1258;
        float _3274 = _1259 * _3262;
        float _3275 = (-0.0) - _3274;
        float _3276 = _3262 * _1260;
        float _3278 = (cbSceneParam._m0[77u].w * _3275) / _3261;
        float _3279 = _3278 + cbSceneParam._m0[79u].w;
        float _3280 = cbSceneParam._m0[79u].w - _3274;
        float _3286 = sqrt(((_3273 * _3273) + (_3274 * _3274)) + (_3276 * _3276));
        float _3289 = (1.0 - (cbSceneParam._m0[77u].w / _3261)) * _3286;
        float _3294 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3296 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3473;
        if (abs((_3275 - _3278) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3473 = ((((_3279 > 0.0) ? exp2(_3294 * _3279) : (2.0 - exp2(_3296 * _3279))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3289;
        }
        else
        {
            float _3417 = 1.0 / cbSceneParam._m0[80u].x;
            float _3418 = isnan(_3280) ? _3279 : (isnan(_3279) ? _3280 : max(_3279, _3280));
            float _3419 = isnan(_3280) ? _3279 : (isnan(_3279) ? _3280 : min(_3279, _3280));
            float _3428 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : min(_3418, 0.0));
            float _3429 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : min(_3419, 0.0));
            _3473 = ((abs(_3286 / _3275) * cbSceneParam._m0[80u].y) * ((((_3428 - _3429) * 2.0) - ((exp2(_3294 * (isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0)))) - exp2(_3294 * (isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))))) * _3417)) - ((exp2(_3296 * _3428) - exp2(_3296 * _3429)) * _3417))) + (_3289 * cbSceneParam._m0[80u].z);
        }
        vec4 _3475 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3186, _3187, 1.0), 0.0);
        float _3484 = exp2((_3473 * (-1.44269502162933349609375)) * (1.0 - _3475.w));
        float _3485 = log2(_3484);
        float _3501 = log2(_3206);
        _3298 = (exp2(_3501 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3485 * cbSceneParam._m0[78u].x)) * _3475.x) / cbSceneParam._m0[78u].x)) + _3203;
        _3300 = (exp2(_3501 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3485 * cbSceneParam._m0[78u].y)) * _3475.y) / cbSceneParam._m0[78u].y)) + _3204;
        _3302 = (exp2(_3501 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3485 * cbSceneParam._m0[78u].z)) * _3475.z) / cbSceneParam._m0[78u].z)) + _3205;
        _3304 = _3484 * _3206;
    }
    else
    {
        _3298 = _3203;
        _3300 = _3204;
        _3302 = _3205;
        _3304 = _3206;
    }
    bool _3511;
    vec4 _3314;
    vec4 _3336;
    float _3338;
    float _3342;
    float _3343;
    float _3344;
    float _3345;
    bool _3355;
    for (;;)
    {
        _3314 = cbMatDynParam._m0[0u];
        float _3316 = roundEven(_3314.y);
        bool _3317 = _3316 == 3.0;
        float _3318 = log2(_3304);
        float _3325 = exp2(_3318 * cbSceneParam._m0[78u].x) * _3175;
        float _3326 = exp2(_3318 * cbSceneParam._m0[78u].y) * _3176;
        float _3327 = exp2(_3318 * cbSceneParam._m0[78u].z) * _3177;
        float _3334 = _1274 + (-0.5);
        _3336 = cbMtdParam._m0[1u];
        _3338 = _3336.y * _3334;
        float _3341 = (_3316 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3342 = _3341 * (_3317 ? _3325 : (_3325 + (cbSceneParam._m0[72u].w * _3298)));
        _3343 = _3341 * (_3317 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3300)));
        _3344 = _3341 * (_3317 ? _3327 : (_3327 + (cbSceneParam._m0[72u].w * _3302)));
        _3345 = _3334 * 0.999000012874603271484375;
        _3355 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3355)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3345) < 0.5)
            {
                _3511 = true;
                break;
            }
        }
        uint _3452 = _1323 + uint(_3314.w);
        if ((cbInstanceData._m0[_3452].w < 1.0) && ((cbInstanceData._m0[_3452].w + _3345) < 0.5))
        {
            _3511 = true;
            break;
        }
        if ((_3338 + 1.0) < _3336.x)
        {
            _3511 = true;
            break;
        }
        _3511 = false;
        break;
    }
    float _3716;
    if (_3511)
    {
        discard_state = true;
        _3716 = 0.0;
    }
    else
    {
        _3716 = cbInstanceData._m0[_3178].w;
    }
    SV_Target.x = _3342;
    SV_Target.y = _3343;
    SV_Target.z = _3344;
    SV_Target.w = _3716;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3178].w;
    discard_exit();
}


