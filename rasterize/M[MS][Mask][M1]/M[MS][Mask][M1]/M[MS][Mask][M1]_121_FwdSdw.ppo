#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1452;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _342.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4059 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _420 = (_413 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _421 = (_413 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _422 = (_413 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _342.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4070 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _493 = (_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420;
    float _494 = (_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _495 = (_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _555 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _342.z) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[23u].w) + _543) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4081 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _563 = (_556 * ((_514.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _564 = (_556 * ((_514.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _565 = (_556 * ((_514.z * cbMtdParam._m0[14u].z) - _495)) + _495;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _602 = _600.x;
    float _603 = _600.y;
    float _604 = _600.z;
    float _611 = ((_583.x - _602) * _413) + _602;
    float _612 = ((_583.y - _603) * _413) + _603;
    float _613 = ((_583.z - _604) * _413) + _604;
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _636 = ((_625.x - _611) * _486) + _611;
    float _637 = ((_625.y - _612) * _486) + _612;
    float _638 = ((_625.z - _613) * _486) + _613;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _663 = ((_650.z - _638) * _556) + _638;
    float _666 = ((((_650.x - _636) * _556) + _636) * 2.0) + (-1.0);
    float _668 = ((((_650.y - _637) * _556) + _637) * 2.0) + (-1.0);
    float _669 = dot(vec2(_666, _668), vec2(_666, _668));
    float _4092 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _700 = (((_688.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _666;
    float _701 = (((_688.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _668;
    float _704 = fma(_674, _242, fma(_701, _249, _700 * _235));
    float _707 = fma(_674, _243, fma(_701, _250, _700 * _236));
    float _710 = fma(_674, _244, fma(_701, _251, _700 * _237));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _752 = (cbMtdParam._m0[19u].x + dot(vec4(_714 * _704, _714 * _707, _714 * _710, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_743 - _744) * cbMtdParam._m0[24u].z) + _744) * cbMtdParam._m0[21u].z);
    float _4103 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _760 = (_753 * (cbMtdParam._m0[17u].x - _563)) + _563;
    float _761 = (_753 * (cbMtdParam._m0[17u].y - _564)) + _564;
    float _762 = (_753 * (cbMtdParam._m0[17u].z - _565)) + _565;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _790 = _788.x;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _790) * _413) + _790;
    float _825 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _808) * _486) + _808;
    float _843 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _274) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _275) + cbTextureTilingScale._m0[10u].w)).x - _825) * _556) + _825;
    float _847 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _843) * cbMtdParam._m0[19u].z) + _843;
    float _849 = _847 - (_847 * _753);
    float _853 = (cbMtdParam._m0[19u].w * (_688.z - _663)) + _663;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _4114 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = ((_866.z - _853) * _753) + _853;
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) - _674) * _753) + _674;
    float _896 = (((_873 - _700) * _753) + _700) + (cbMtdParam._m0[21u].x * _700);
    float _897 = (((_874 - _701) * _753) + _701) + (cbMtdParam._m0[21u].x * _701);
    float _899 = cbMtdParam._m0[22u].x + _688.w;
    float _902 = fma(_893, _242, fma(_897, _249, _896 * _235));
    float _905 = fma(_893, _243, fma(_897, _250, _896 * _236));
    float _908 = fma(_893, _244, fma(_897, _251, _896 * _237));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _4125 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _916 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4147 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4158 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4169 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4180 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _921 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _935 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    float _1000 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1001 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1019 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1022 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1025 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1039 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1045 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1039].x;
    float _1046 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_1039].y;
    float _1047 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_1039].z;
    float _4191 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _1051 = 1.0 - _921;
    float _1052 = _1048 * _1051;
    float _1053 = _1049 * _1051;
    float _1054 = _1050 * _1051;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _921;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _921;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _921;
    float _1062 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    vec4 _1074 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1000, cbSceneParam._m0[86u].y * _1001));
    float _1078 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * TEXCOORD_5.w) * _1074.x;
    float _1079 = dot(vec3(_913, _914, _915), vec3(_992, _993, _994));
    float _1082 = _1079 * 2.0;
    float _1086 = (_1082 * _913) - _992;
    float _1087 = (_1082 * _914) - _993;
    float _1088 = (_1082 * _915) - _994;
    float _1092 = abs(dot(vec3(_992, _993, _994), vec3(_913, _914, _915)));
    float _4224 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1094 = sqrt(_916);
    float _1107 = exp2((_1094 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1094 * 3.0));
    float _1113 = (1.0 - _1107) * ((_1094 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1114 = _1107 * _1094;
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1451;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1176 = fma(_1150, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142));
        float _1180 = fma(_1150, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142));
        float _1184 = fma(_1150, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142));
        float _1209 = _1142 + _913;
        float _1210 = _1146 + _914;
        float _1211 = _1150 + _915;
        float _1221 = fma(_1211, cbModelParam._m0[26u].z, fma(_1210, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209)) - _1176;
        float _1222 = fma(_1211, cbModelParam._m0[27u].z, fma(_1210, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209)) - _1180;
        float _1223 = fma(_1211, cbModelParam._m0[28u].z, fma(_1210, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209)) - _1184;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1176 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1180 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[34u].z) + ((((((_1184 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1279 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1245.x + (-0.5));
        float _1281 = _1279 * (_1245.y + (-0.5));
        float _1282 = _1279 * (_1245.z + (-0.5));
        float _1289 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1252.x + (-0.5));
        float _1291 = _1289 * (_1252.y + (-0.5));
        float _1292 = _1289 * (_1252.z + (-0.5));
        float _1299 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1259.x + (-0.5));
        float _1301 = _1299 * (_1259.y + (-0.5));
        float _1302 = _1299 * (_1259.z + (-0.5));
        float _1309 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1266.x + (-0.5));
        float _1311 = _1309 * (_1266.y + (-0.5));
        float _1312 = _1309 * (_1266.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1333 = (dot(vec3(_913, _914, _915), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1343 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4272 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1345 + 1.0))) + _1350) * _1313;
        float _1360 = _1281 * 0.5;
        float _1361 = _1291 * 0.5;
        float _1362 = _1301 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_913, _914, _915), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4305 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1387 + 1.0))) + _1392) * _1314;
        float _1402 = _1282 * 0.5;
        float _1403 = _1292 * 0.5;
        float _1404 = _1302 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_913, _914, _915), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4338 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1429 + 1.0))) + _1434) * _1315;
        _1451 = _1282;
        _1453 = _1281;
        _1454 = _1280;
        _1455 = _1292;
        _1456 = _1291;
        _1457 = _1290;
        _1458 = _1302;
        _1459 = _1301;
        _1460 = _1300;
        _1461 = _1315;
        _1462 = _1314;
        _1463 = _1313;
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1452;
        _1453 = _1452;
        _1454 = _1452;
        _1455 = _1452;
        _1456 = _1452;
        _1457 = _1452;
        _1458 = _1452;
        _1459 = _1452;
        _1460 = _1452;
        _1461 = _1452;
        _1462 = _1452;
        _1463 = _1452;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1489 = fma(_1150, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142));
        float _1493 = fma(_1150, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142));
        float _1497 = fma(_1150, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142));
        float _1520 = _1142 + _913;
        float _1521 = _1146 + _914;
        float _1522 = _1150 + _915;
        float _1532 = fma(_1522, cbModelParam._m0[30u].z, fma(_1521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1520)) - _1489;
        float _1533 = fma(_1522, cbModelParam._m0[31u].z, fma(_1521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1520)) - _1493;
        float _1534 = fma(_1522, cbModelParam._m0[32u].z, fma(_1521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1520)) - _1497;
        float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
        float _1551 = ((_1538 * _1532) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1489 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1538 * _1533) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1493 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1538 * _1534) / cbModelParam._m0[35u].z) + ((((((_1497 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        float _1588 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1555.x + (-0.5));
        float _1590 = _1588 * (_1555.y + (-0.5));
        float _1591 = _1588 * (_1555.z + (-0.5));
        float _1598 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1562.x + (-0.5));
        float _1600 = _1598 * (_1562.y + (-0.5));
        float _1601 = _1598 * (_1562.z + (-0.5));
        float _1608 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1569.x + (-0.5));
        float _1610 = _1608 * (_1569.y + (-0.5));
        float _1611 = _1608 * (_1569.z + (-0.5));
        float _1618 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1576.x + (-0.5));
        float _1620 = _1618 * (_1576.y + (-0.5));
        float _1621 = _1618 * (_1576.z + (-0.5));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = _1589 * 0.5;
        float _1626 = _1599 * 0.5;
        float _1627 = _1609 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_913, _914, _915), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4401 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1652 + 1.0))) + _1657) * _1622;
        float _1667 = _1590 * 0.5;
        float _1668 = _1600 * 0.5;
        float _1669 = _1610 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_913, _914, _915), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4434 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1694 + 1.0))) + _1699) * _1623;
        float _1709 = _1591 * 0.5;
        float _1710 = _1601 * 0.5;
        float _1711 = _1611 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_913, _914, _915), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4467 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1736 + 1.0))) + _1741) * _1624;
        _1758 = _1591;
        _1759 = _1590;
        _1760 = _1589;
        _1761 = _1601;
        _1762 = _1600;
        _1763 = _1599;
        _1764 = _1611;
        _1765 = _1610;
        _1766 = _1609;
        _1767 = _1624;
        _1768 = _1623;
        _1769 = _1622;
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
    }
    else
    {
        _1758 = _1452;
        _1759 = _1452;
        _1760 = _1452;
        _1761 = _1452;
        _1762 = _1452;
        _1763 = _1452;
        _1764 = _1452;
        _1765 = _1452;
        _1766 = _1452;
        _1767 = _1452;
        _1768 = _1452;
        _1769 = _1452;
        _1770 = 0.0;
        _1771 = 0.0;
        _1772 = 0.0;
    }
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1464)) + _1464;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1466)) + _1466;
    float _1805 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1782));
    float _1826 = _1086 * 0.5;
    float _1827 = _1087 * 0.5;
    float _1828 = _1088 * 0.5;
    float _1829 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1832 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1835 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1869;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1842 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1451, _1455, _1458, _1461));
        float _1846 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1850 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1857 = dot(vec4(cbModelParam._m0[39u]), vec4(_1826, _1827, _1828, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1880;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1871 = dot(vec4(cbModelParam._m0[40u]), vec4(_1826, _1827, _1828, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1884 = (_1880 * cbModelParam._m0[1u].x) + (_1869 * (1.0 - cbModelParam._m0[1u].x));
    float _1894 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1894 : min(cbModelParam._m0[25u].z, _1894));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1942 = fma(_1150, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142)) + cbModelParam._m0[13u].w;
        float _1946 = fma(_1150, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142)) + cbModelParam._m0[14u].w;
        float _1950 = fma(_1150, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142)) + cbModelParam._m0[15u].w;
        float _1953 = fma(_1088, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086));
        float _1956 = fma(_1088, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086));
        float _1959 = fma(_1088, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086));
        float _1987;
        if (_1953 > 0.0)
        {
            _1987 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1987 = frontier_phi_14_12_ladder;
        }
        float _2159;
        if (_1956 > 0.0)
        {
            _2159 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2159 = frontier_phi_23_19_ladder;
        }
        float _2454;
        if (_1959 > 0.0)
        {
            _2454 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2454 = frontier_phi_35_30_ladder;
        }
        float _2456 = isnan(_2159) ? _1987 : (isnan(_1987) ? _2159 : min(_1987, _2159));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1953) + _1942;
        float _2462 = (_2457 * _1956) + _1946;
        float _2463 = (_2457 * _1959) + _1950;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2464;
        float _2468 = _2464 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 > _2468) || ((_2462 < _2466) || ((_2461 < _2466) || (_2461 > _2468))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2463, cbModelParam._m0[9u].z, fma(_2462, cbModelParam._m0[9u].y, _2461 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2463, cbModelParam._m0[10u].z, fma(_2462, cbModelParam._m0[10u].y, _2461 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2463, cbModelParam._m0[11u].z, fma(_2462, cbModelParam._m0[11u].y, _2461 * cbModelParam._m0[11u].x))), _1895);
            frontier_phi_13_35_ladder = _2608.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2608.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2608.x * cbModelParam._m0[1u].y;
        }
        _1975 = frontier_phi_13_35_ladder_2;
        _1977 = frontier_phi_13_35_ladder_1;
        _1979 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1086, _1087, _1088), _1895);
        _1975 = _1963.x * cbModelParam._m0[1u].y;
        _1977 = _1963.y * cbModelParam._m0[1u].y;
        _1979 = _1963.z * cbModelParam._m0[1u].y;
    }
    float _1983 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _1984 = isnan(_1983) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1983 : min(cbModelParam._m0[25u].w, _1983));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2038 = fma(_1150, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142)) + cbModelParam._m0[21u].w;
        float _2042 = fma(_1150, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142)) + cbModelParam._m0[22u].w;
        float _2046 = fma(_1150, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142)) + cbModelParam._m0[23u].w;
        float _2049 = fma(_1088, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086));
        float _2052 = fma(_1088, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086));
        float _2055 = fma(_1088, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086));
        float _2164;
        if (_2049 > 0.0)
        {
            _2164 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2164 = frontier_phi_25_21_ladder;
        }
        float _2481;
        if (_2052 > 0.0)
        {
            _2481 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2481 = frontier_phi_37_32_ladder;
        }
        float _2819;
        if (_2055 > 0.0)
        {
            _2819 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2819 = frontier_phi_47_44_ladder;
        }
        float _2821 = isnan(_2481) ? _2164 : (isnan(_2164) ? _2481 : min(_2164, _2481));
        float _2822 = isnan(_2819) ? _2821 : (isnan(_2821) ? _2819 : min(_2821, _2819));
        float _2826 = (_2822 * _2049) + _2038;
        float _2827 = (_2822 * _2052) + _2042;
        float _2828 = (_2822 * _2055) + _2046;
        float _2829 = _2822 * 9.9999997473787516355514526367188e-05;
        float _2830 = (-1.0) - _2829;
        float _2832 = _2829 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2828 > _2832) || ((_2828 < _2830) || ((_2827 > _2832) || ((_2827 < _2830) || ((_2826 < _2830) || (_2826 > _2832))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2828, cbModelParam._m0[17u].z, fma(_2827, cbModelParam._m0[17u].y, _2826 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2828, cbModelParam._m0[18u].z, fma(_2827, cbModelParam._m0[18u].y, _2826 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2828, cbModelParam._m0[19u].z, fma(_2827, cbModelParam._m0[19u].y, _2826 * cbModelParam._m0[19u].x))), _1984);
            frontier_phi_22_47_ladder = _2950.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2950.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2950.x * cbModelParam._m0[1u].z;
        }
        _2074 = frontier_phi_22_47_ladder_2;
        _2076 = frontier_phi_22_47_ladder_1;
        _2078 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1086, _1087, _1088), _1984);
        _2074 = _2058.x * cbModelParam._m0[1u].z;
        _2076 = _2058.y * cbModelParam._m0[1u].z;
        _2078 = _2058.z * cbModelParam._m0[1u].z;
    }
    float _2091 = (((_1113 * _1062) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2093 = (((_1113 * _1064) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2076 - _1977)) + _1977);
    float _2095 = (((_1113 * _1065) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2078 - _1979)) + _1979);
    float _2098 = fma(_2095, cbSceneParam._m0[89u].z, fma(_2093, cbSceneParam._m0[89u].y, _2091 * cbSceneParam._m0[89u].x));
    float _2101 = fma(_2095, cbSceneParam._m0[90u].z, fma(_2093, cbSceneParam._m0[90u].y, _2091 * cbSceneParam._m0[90u].x));
    float _2104 = fma(_2095, cbSceneParam._m0[91u].z, fma(_2093, cbSceneParam._m0[91u].y, _2091 * cbSceneParam._m0[91u].x));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2150 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2151 = _2138 / _2150;
    float _2152 = _2142 / _2150;
    float _2153 = _2146 / _2150;
    float _2300;
    float _2301;
    float _2302;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2180 = ((uint(_2153 > cbSceneParam._m0[59u].y) + uint(_2153 > cbSceneParam._m0[59u].x)) + uint(_2153 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2181 = _2180 + 43u;
        uint _2189 = _2180 + 44u;
        uint _2197 = _2180 + 45u;
        uint _2205 = _2180 + 46u;
        float _2216 = fma(_2150, cbSceneParam._m0[_2181].w, fma(_2146, cbSceneParam._m0[_2181].z, fma(_2142, cbSceneParam._m0[_2181].y, _2138 * cbSceneParam._m0[_2181].x)));
        float _2220 = fma(_2150, cbSceneParam._m0[_2189].w, fma(_2146, cbSceneParam._m0[_2189].z, fma(_2142, cbSceneParam._m0[_2189].y, _2138 * cbSceneParam._m0[_2189].x)));
        float _2228 = fma(_2150, cbSceneParam._m0[_2205].w, fma(_2146, cbSceneParam._m0[_2205].z, fma(_2142, cbSceneParam._m0[_2205].y, _2138 * cbSceneParam._m0[_2205].x)));
        float _2233 = cbSceneParam._m0[33u].z * _2228;
        float _2235 = cbSceneParam._m0[33u].w * _2228;
        float _2238 = fma(_2150, cbSceneParam._m0[_2197].w, fma(_2146, cbSceneParam._m0[_2197].z, fma(_2142, cbSceneParam._m0[_2197].y, _2138 * cbSceneParam._m0[_2197].x))) / _2228;
        float _2286 = (cbSceneParam._m0[33u].x - sqrt(((_2152 * _2152) + (_2151 * _2151)) + (_2153 * _2153))) * cbSceneParam._m0[33u].y;
        float _4593 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2293 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2233 + _2216) / _2228, (_2235 + _2220) / _2228), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2235 + _2216) / _2228, (_2220 - _2233) / _2228), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 - _2233) / _2228, (_2220 - _2235) / _2228), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 - _2235) / _2228, (_2233 + _2220) / _2228), _2238), 0.0)).x), vec4(0.25)));
        _2300 = 1.0 - (_2293 * cbSceneParam._m0[34u].x);
        _2301 = 1.0 - (_2293 * cbSceneParam._m0[34u].y);
        _2302 = 1.0 - (_2293 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2300 = 1.0;
        _2301 = 1.0;
        _2302 = 1.0;
    }
    float _2366;
    float _2368;
    float _2370;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2354 = fma(_2150, cbSceneParam._m0[63u].w, fma(_2146, cbSceneParam._m0[63u].z, fma(_2142, cbSceneParam._m0[63u].y, _2138 * cbSceneParam._m0[63u].x)));
        float _2355 = fma(_2150, cbSceneParam._m0[60u].w, fma(_2146, cbSceneParam._m0[60u].z, fma(_2142, cbSceneParam._m0[60u].y, _2138 * cbSceneParam._m0[60u].x))) / _2354;
        float _2356 = fma(_2150, cbSceneParam._m0[61u].w, fma(_2146, cbSceneParam._m0[61u].z, fma(_2142, cbSceneParam._m0[61u].y, _2138 * cbSceneParam._m0[61u].x))) / _2354;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2355 >= cbSceneParam._m0[64u].x) && (_2356 >= cbSceneParam._m0[64u].y)) && (_2355 <= cbSceneParam._m0[64u].z)) && (_2356 <= cbSceneParam._m0[64u].w))
        {
            float _2494 = fma(_2150, cbSceneParam._m0[62u].w, fma(_2146, cbSceneParam._m0[62u].z, fma(_2142, cbSceneParam._m0[62u].y, _2138 * cbSceneParam._m0[62u].x))) / _2354;
            float _2498 = isnan(cbSceneParam._m0[41u].w) ? _2494 : (isnan(_2494) ? cbSceneParam._m0[41u].w : max(_2494, cbSceneParam._m0[41u].w));
            float _2541 = (cbSceneParam._m0[33u].x - sqrt(((_2152 * _2152) + (_2151 * _2151)) + (_2153 * _2153))) * cbSceneParam._m0[33u].y;
            float _4609 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
            float _2548 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2355, cbSceneParam._m0[33u].w + _2356), _2498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2355, _2356 - cbSceneParam._m0[33u].z), _2498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2355 - cbSceneParam._m0[33u].z, _2356 - cbSceneParam._m0[33u].w), _2498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2355 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2356), _2498), 0.0)).x), vec4(0.25)));
            float _2552 = 1.0 - (_2548 * cbSceneParam._m0[34u].x);
            float _2553 = 1.0 - (_2548 * cbSceneParam._m0[34u].y);
            float _2554 = 1.0 - (_2548 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2554) ? _2302 : (isnan(_2302) ? _2554 : min(_2302, _2554));
            frontier_phi_34_33_ladder_1 = isnan(_2553) ? _2301 : (isnan(_2301) ? _2553 : min(_2301, _2553));
            frontier_phi_34_33_ladder_2 = isnan(_2552) ? _2300 : (isnan(_2300) ? _2552 : min(_2300, _2552));
        }
        else
        {
            frontier_phi_34_33_ladder = _2302;
            frontier_phi_34_33_ladder_1 = _2301;
            frontier_phi_34_33_ladder_2 = _2300;
        }
        _2366 = frontier_phi_34_33_ladder_2;
        _2368 = frontier_phi_34_33_ladder_1;
        _2370 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2366 = _2300;
        _2368 = _2301;
        _2370 = _2302;
    }
    uvec4 _2375 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2377 = _2375.x * 14u;
    uint _2378 = _2377 + 13u;
    float _2385 = _1078 + (-1.0);
    float _2390 = (cbLight._m0[_2378].x * _2385) + 1.0;
    float _2391 = (cbLight._m0[_2378].y * _2385) + 1.0;
    float _2392 = (cbLight._m0[_2378].z * _2385) + 1.0;
    float _2393 = (cbLight._m0[_2378].w * _2385) + 1.0;
    uint _2394 = _2377 + 5u;
    float _2400 = isnan(1.0) ? _2391 : (isnan(_2391) ? 1.0 : min(_2391, 1.0));
    uint _2404 = _2377 + 4u;
    float _2413 = isnan(1.0) ? _2390 : (isnan(_2390) ? 1.0 : min(_2390, 1.0));
    uint _2417 = _2377 | 1u;
    float _2428 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_913, _914, _915));
    float _2431 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_913, _914, _915));
    float _4645 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _4656 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2436 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2438 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2445 = ((cbLight._m0[_2394].x * _2400) * _2438) + (((cbLight._m0[_2404].x * _2366) * _2413) * _2436);
    float _2446 = ((_2400 * cbLight._m0[_2394].y) * _2438) + (((cbLight._m0[_2404].y * _2368) * _2413) * _2436);
    float _2447 = ((_2400 * cbLight._m0[_2394].z) * _2438) + (((cbLight._m0[_2404].z * _2370) * _2413) * _2436);
    uvec4 _2451 = floatBitsToUint(cbLight._m0[_2377 + 12u]);
    bool _2453 = _2451.x == 0u;
    float _2555;
    float _2557;
    float _2559;
    if (_2453)
    {
        _2555 = _2445;
        _2557 = _2446;
        _2559 = _2447;
    }
    else
    {
        uint _2563 = _2377 + 6u;
        float _2579 = (dot(vec3(cbLight._m0[_2377 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2580 = _2579 * _2579;
        float _4667 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2581 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2582 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        _2555 = (((cbLight._m0[_2563].x * 0.3183098733425140380859375) * _2581) * _2582) + _2445;
        _2557 = (((cbLight._m0[_2563].y * 0.3183098733425140380859375) * _2581) * _2582) + _2446;
        _2559 = (((cbLight._m0[_2563].z * 0.3183098733425140380859375) * _2581) * _2582) + _2447;
    }
    bool _2562 = _2451.y == 0u;
    float _2617;
    float _2619;
    float _2621;
    if (_2562)
    {
        _2617 = _2555;
        _2619 = _2557;
        _2621 = _2559;
    }
    else
    {
        uint _2790 = _2377 + 7u;
        float _2806 = (dot(vec3(cbLight._m0[_2377 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2807 = _2806 * _2806;
        float _4683 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2808 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2809 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2617 = (((cbLight._m0[_2790].x * 0.3183098733425140380859375) * _2808) * _2809) + _2555;
        _2619 = (((cbLight._m0[_2790].y * 0.3183098733425140380859375) * _2808) * _2809) + _2557;
        _2621 = (((cbLight._m0[_2790].z * 0.3183098733425140380859375) * _2808) * _2809) + _2559;
    }
    uint _2624 = _2377 + 8u;
    float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _916) * 0.949999988079071044921875);
    float _2638 = _2637 * _2637;
    float _2639 = cbLight._m0[_2377].x + _992;
    float _2640 = cbLight._m0[_2377].y + _993;
    float _2641 = cbLight._m0[_2377].z + _994;
    float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
    float _2646 = _2645 * _2639;
    float _2647 = _2645 * _2640;
    float _2648 = _2645 * _2641;
    float _2649 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2377].xyz));
    float _4699 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2652 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _4710 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _2653 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2654 = dot(vec3(_913, _914, _915), vec3(_2646, _2647, _2648));
    float _4721 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2646, _2647, _2648));
    float _4732 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2638 * _2638;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
    float _2675 = 0.959999978542327880859375 - _1059;
    float _2677 = 0.959999978542327880859375 - _1060;
    float _2678 = 0.959999978542327880859375 - _1061;
    float _2685 = 1.0 - _2638;
    float _2696 = (0.5 / (((_2653 * ((_2652 * _2685) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2685) + _2638) * _2652))) * _2652;
    float _4743 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    uint _2712 = _2377 + 9u;
    float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _916) * 0.949999988079071044921875);
    float _2724 = _2723 * _2723;
    float _2725 = cbLight._m0[_2417].x + _992;
    float _2726 = cbLight._m0[_2417].y + _993;
    float _2727 = cbLight._m0[_2417].z + _994;
    float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
    float _2732 = _2731 * _2725;
    float _2733 = _2731 * _2726;
    float _2734 = _2731 * _2727;
    float _2735 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2417].xyz));
    float _4754 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2739 = dot(vec3(_913, _914, _915), vec3(_2732, _2733, _2734));
    float _4765 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2742 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2743 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2732, _2733, _2734));
    float _4776 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2747 = _2724 * _2724;
    float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
    float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0);
    float _2765 = 1.0 - _2724;
    float _2775 = (0.5 / (((_2653 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2765) + _2724) * _2738))) * _2738;
    float _4787 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2777 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
    float _2787 = (((((_2758 * _2675) + _1062) * cbLight._m0[_2712].x) * _2777) * _2400) + ((((cbLight._m0[_2624].x * _2366) * ((_2674 * _2675) + _1062)) * _2698) * _2413);
    float _2788 = (((((_2758 * _2677) + _1064) * cbLight._m0[_2712].y) * _2777) * _2400) + ((((cbLight._m0[_2624].y * _2368) * ((_2674 * _2677) + _1064)) * _2698) * _2413);
    float _2789 = (((((_2758 * _2678) + _1065) * cbLight._m0[_2712].z) * _2777) * _2400) + ((((cbLight._m0[_2624].z * _2370) * ((_2674 * _2678) + _1065)) * _2698) * _2413);
    float _2845;
    float _2847;
    float _2849;
    if (_2453)
    {
        _2845 = _2787;
        _2847 = _2788;
        _2849 = _2789;
    }
    else
    {
        uint _2851 = _2377 + 2u;
        uint _2855 = _2377 + 10u;
        float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _916) * 0.949999988079071044921875);
        float _2870 = _2869 * _2869;
        float _2871 = cbLight._m0[_2851].x + _992;
        float _2872 = cbLight._m0[_2851].y + _993;
        float _2873 = cbLight._m0[_2851].z + _994;
        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
        float _2878 = _2877 * _2871;
        float _2879 = _2877 * _2872;
        float _2880 = _2877 * _2873;
        float _2881 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2851].xyz));
        float _4798 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2885 = dot(vec3(_913, _914, _915), vec3(_2878, _2879, _2880));
        float _4809 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2889 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_2878, _2879, _2880));
        float _4820 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2893 = _2870 * _2870;
        float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
        float _2904 = exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0);
        float _2911 = 1.0 - _2870;
        float _2921 = (0.5 / (((_2653 * ((_2884 * _2911) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2911) + _2870) * _2884))) * _2884;
        float _4831 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2923 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
        float _2924 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        _2845 = (((((_2904 * _2675) + _1062) * cbLight._m0[_2855].x) * _2923) * _2924) + _2787;
        _2847 = (((((_2904 * _2677) + _1064) * cbLight._m0[_2855].y) * _2923) * _2924) + _2788;
        _2849 = (((((_2904 * _2678) + _1065) * cbLight._m0[_2855].z) * _2923) * _2924) + _2789;
    }
    float _2955;
    float _2957;
    float _2959;
    if (_2562)
    {
        _2955 = _2845;
        _2957 = _2847;
        _2959 = _2849;
    }
    else
    {
        uint _2966 = _2377 + 3u;
        uint _2970 = _2377 + 11u;
        float _2984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2966].w)) * _916) * 0.949999988079071044921875);
        float _2985 = _2984 * _2984;
        float _2986 = cbLight._m0[_2966].x + _992;
        float _2987 = cbLight._m0[_2966].y + _993;
        float _2988 = cbLight._m0[_2966].z + _994;
        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
        float _2993 = _2992 * _2986;
        float _2994 = _2992 * _2987;
        float _2995 = _2992 * _2988;
        float _2996 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2966].xyz));
        float _4847 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _3000 = dot(vec3(_913, _914, _915), vec3(_2993, _2994, _2995));
        float _4858 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3003 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _3004 = dot(vec3(cbLight._m0[_2966].xyz), vec3(_2993, _2994, _2995));
        float _4869 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        float _3008 = _2985 * _2985;
        float _3012 = ((_3003 * _3003) * (_3008 + (-1.0))) + 1.0;
        float _3019 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
        float _3026 = 1.0 - _2985;
        float _3036 = (0.5 / (((_2653 * ((_2999 * _3026) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _3026) + _2985) * _2999))) * _2999;
        float _4880 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3038 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_3008 / ((_3012 * _3012) * 3.141590118408203125));
        float _3039 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2955 = (((((_3019 * _2675) + _1062) * cbLight._m0[_2970].x) * _3038) * _3039) + _2845;
        _2957 = (((((_3019 * _2677) + _1064) * cbLight._m0[_2970].y) * _3038) * _3039) + _2847;
        _2959 = (((((_3019 * _2678) + _1065) * cbLight._m0[_2970].z) * _3038) * _3039) + _2849;
    }
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_2375.y == 0u)
    {
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.x;
        uint _3072 = uint((float(_3060.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1001) / _3061))) + floor(float(uint(cbSceneParam._m0[85u].x * _1000) / _3061)));
        float _3082 = (log2(_2153 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3083 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        uint _3086 = uint(isnan(14.0) ? _3083 : (isnan(_3083) ? 14.0 : min(_3083, 14.0)));
        uvec4 _3091 = texelFetch(g_lightClusterGridBuffer, int(((_3086 << 2u) + (_3072 << 6u)) >> 2u));
        uint _3092 = _3091.x;
        uint _3093 = _3060.z;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((((1u << ((_3093 >> 4u) & 15u)) + 4294967295u) & _3092) == 0u) || ((_3093 & 240u) == 0u))
        {
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
            _3180 = 0.0;
            _3182 = 0.0;
        }
        else
        {
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3181;
            float _3183;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            uint _3323 = 0u;
            uint _3332;
            bool _3333;
            for (;;)
            {
                _3332 = texelFetch(g_lightClassification, int((((_3086 << 5u) + (_3072 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                _3333 = _3332 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3333)
                {
                    frontier_phi_66_pred = _3322;
                    frontier_phi_66_pred_1 = _3321;
                    frontier_phi_66_pred_2 = _3320;
                    frontier_phi_66_pred_3 = _3319;
                    frontier_phi_66_pred_4 = _3318;
                    frontier_phi_66_pred_5 = _3317;
                }
                else
                {
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    uint _3447;
                    _3441 = _3317;
                    _3442 = _3318;
                    _3443 = _3319;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3332;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    for (;;)
                    {
                        uint _3451 = uint(findLSB(_3447)) + (_3323 << 5u);
                        uint _3448 = (_3447 + 4294967295u) & _3447;
                        uint _3453 = _3451 * 48u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 3u)).x));
                        uint _3473 = (_3451 * 48u) + 4u;
                        vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 3u)).x));
                        uint _3492 = (_3451 * 48u) + 8u;
                        vec3 _3503 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x));
                        float _3507 = _3467.x - _2151;
                        float _3508 = _3467.y - _2152;
                        float _3509 = _3467.z - _2153;
                        float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                        float _3513 = inversesqrt(_3510);
                        float _3514 = _3513 * _3507;
                        float _3515 = _3513 * _3508;
                        float _3516 = _3513 * _3509;
                        float _3517 = dot(vec3(_1019, _1022, _1025), vec3(_3514, _3515, _3516));
                        float _3522 = 1.0 - (_3510 * _3467.w);
                        float _4906 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3524 = sqrt(_3510) * _3486.w;
                        float _3527 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3517) + _3528;
                        float _3534 = _3524 * _3524;
                        float _3538 = ((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3523) / ((_3534 * 0.699999988079071044921875) + 1.0);
                        float _3542 = (-0.0) - _2151;
                        float _3543 = (-0.0) - _2152;
                        float _3544 = (-0.0) - _2153;
                        float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                        float _3549 = _3548 * _3542;
                        float _3550 = _3548 * _3543;
                        float _3551 = _3548 * _3544;
                        float _3558 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                        float _3559 = 1.0 - _1094;
                        float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                        float _3567 = _3566 * _3566;
                        float _3568 = _3567 * _3567;
                        float _3569 = _3549 + _3514;
                        float _3570 = _3550 + _3515;
                        float _3571 = _3551 + _3516;
                        float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                        float _3579 = dot(vec3(_1019, _1022, _1025), vec3(_3549, _3550, _3551));
                        float _4922 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3583 = dot(vec3(_1019, _1022, _1025), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                        float _4933 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3586 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                        float _3591 = _3527 * _3567;
                        float _3592 = _3591 * _3591;
                        float _3595 = ((1.0 - _3592) * _3517) + _3592;
                        float _4944 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3597 = 1.0 - _3567;
                        float _3607 = (0.5 / (((_3596 * ((_3582 * _3597) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3567) * _3582))) * _3596;
                        float _4955 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3618 = (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) / ((_3590 * _3590) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125))) * _3523;
                        _3376 = (_3538 * _3486.x) + _3444;
                        _3377 = (_3538 * _3486.y) + _3445;
                        _3378 = (_3538 * _3486.z) + _3446;
                        _3373 = (_3618 * _3503.x) + _3441;
                        _3374 = (_3618 * _3503.y) + _3442;
                        _3375 = (_3618 * _3503.z) + _3443;
                        if (_3448 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3441 = _3373;
                            _3442 = _3374;
                            _3443 = _3375;
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3448;
                        }
                    }
                    frontier_phi_66_pred = _3378;
                    frontier_phi_66_pred_1 = _3377;
                    frontier_phi_66_pred_2 = _3376;
                    frontier_phi_66_pred_3 = _3375;
                    frontier_phi_66_pred_4 = _3374;
                    frontier_phi_66_pred_5 = _3373;
                }
                _3183 = frontier_phi_66_pred;
                _3181 = frontier_phi_66_pred_1;
                _3179 = frontier_phi_66_pred_2;
                _3177 = frontier_phi_66_pred_3;
                _3175 = frontier_phi_66_pred_4;
                _3173 = frontier_phi_66_pred_5;
                uint _3324 = _3323 + 1u;
                if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3317 = _3173;
                    _3318 = _3175;
                    _3319 = _3177;
                    _3320 = _3179;
                    _3321 = _3181;
                    _3322 = _3183;
                    _3323 = _3324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
            _3180 = _3181;
            _3182 = _3183;
        }
        uvec4 _3186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3187 = _3186.z;
        uint _3189 = (_3187 >> 8u) & 15u;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((4294967295u << _3189) & _3092) == 0u)
        {
            _3285 = _3172;
            _3287 = _3174;
            _3289 = _3176;
            _3291 = _3178;
            _3293 = _3180;
            _3295 = _3182;
        }
        else
        {
            float _3310 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
            float _3311 = _3310 * _2151;
            float _3312 = _3310 * _2152;
            float _3313 = _3310 * _2153;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3189 < ((_3187 >> 12u) & 15u))
            {
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3424 = _3172;
                float _3425 = _3174;
                float _3426 = _3176;
                float _3427 = _3178;
                float _3428 = _3180;
                float _3429 = _3182;
                uint _3430 = _3189;
                uint _3439;
                bool _3440;
                for (;;)
                {
                    _3439 = texelFetch(g_lightClassification, int((((_3086 << 5u) + (_3072 << 9u)) + (_3430 << 2u)) >> 2u)).x;
                    _3440 = _3439 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3440)
                    {
                        frontier_phi_72_pred = _3429;
                        frontier_phi_72_pred_1 = _3428;
                        frontier_phi_72_pred_2 = _3427;
                        frontier_phi_72_pred_3 = _3426;
                        frontier_phi_72_pred_4 = _3425;
                        frontier_phi_72_pred_5 = _3424;
                    }
                    else
                    {
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3636 = _3424;
                        float _3637 = _3425;
                        float _3638 = _3426;
                        float _3639 = _3427;
                        float _3640 = _3428;
                        float _3641 = _3429;
                        uint _3642 = _3439;
                        uint _3643;
                        vec4 _3668;
                        float _3669;
                        vec4 _3684;
                        vec3 _3696;
                        vec4 _3711;
                        vec4 _3726;
                        float _3772;
                        bool _3773;
                        for (;;)
                        {
                            uint _3653 = ((_3430 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3642));
                            _3643 = (_3642 + 4294967295u) & _3642;
                            uint _3655 = _3653 * 40u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3669 = _3668.w;
                            uint _3671 = (_3653 * 40u) + 4u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3653 * 40u) + 8u;
                            _3696 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x));
                            uint _3698 = (_3653 * 40u) + 16u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3653 * 40u) + 20u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3653 * 40u) + 24u;
                            vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3747 = (_3653 * 40u) + 28u;
                            vec4 _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            _3772 = fma(_2153, _3760.z, fma(_2152, _3760.y, _3760.x * _2151)) + _3760.w;
                            _3773 = !((fma(_2153, _3741.z, fma(_2152, _3741.y, _3741.x * _2151)) + _3741.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3773)
                            {
                                float _3800 = _3668.x - _2151;
                                float _3801 = _3668.y - _2152;
                                float _3802 = _3668.z - _2153;
                                float _3803 = dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802));
                                float _3806 = inversesqrt(_3803);
                                float _3807 = _3806 * _3800;
                                float _3808 = _3806 * _3801;
                                float _3809 = _3806 * _3802;
                                float _3813 = 1.0 - (_3803 / (_3669 * _3669));
                                float _4966 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3818 = sqrt(_3803) * _3684.w;
                                float _3820 = 1.39999997615814208984375 / (_3818 + 1.39999997615814208984375);
                                float _3821 = _3820 * _3820;
                                float _3824 = ((1.0 - _3821) * dot(vec3(_3807, _3808, _3809), vec3(_1019, _1022, _1025))) + _3821;
                                float _3827 = _3818 * _3818;
                                float _3831 = (fma(_2153, _3711.z, fma(_2152, _3711.y, _3711.x * _2151)) + _3711.w) / _3772;
                                float _3832 = (fma(_2153, _3726.z, fma(_2152, _3726.y, _3726.x * _2151)) + _3726.w) / _3772;
                                float _3836 = 1.0 - dot(vec2(_3831, _3832), vec2(_3831, _3832));
                                float _4982 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3838 = _3837 * (((isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0))) * _3814) / ((_3827 * 0.699999988079071044921875) + 1.0));
                                float _3850 = exp2(log2(1.0 / ((_3827 * 3.5) + 5.0)) * 0.25);
                                float _3851 = 1.0 - _1094;
                                float _3858 = sqrt(1.0 - ((1.0 - (_3851 * _3851)) * (1.0 - (_3850 * _3850))));
                                float _3859 = _3858 * _3858;
                                float _3860 = _3859 * _3859;
                                float _3861 = _3807 - _3311;
                                float _3862 = _3808 - _3312;
                                float _3863 = _3809 - _3313;
                                float _3867 = inversesqrt(dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863)));
                                float _3871 = dot(vec3(_1019, _1022, _1025), vec3((-0.0) - _3311, (-0.0) - _3312, (-0.0) - _3313));
                                float _4993 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3874 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3875 = dot(vec3(_1019, _1022, _1025), vec3(_3867 * _3861, _3867 * _3862, _3867 * _3863));
                                float _5004 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3882 = ((_3878 * _3878) * (_3860 + (-1.0))) + 1.0;
                                float _3883 = _3820 * _3859;
                                float _3884 = _3883 * _3883;
                                float _3890 = ((1.0 - _3884) * dot(vec3(_1019, _1022, _1025), vec3(_3807, _3808, _3809))) + _3884;
                                float _5015 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3892 = 1.0 - _3859;
                                float _3902 = (0.5 / (((_3891 * ((_3874 * _3892) + _3859)) + 9.9999999392252902907785028219223e-09) + (((_3891 * _3892) + _3859) * _3874))) * _3891;
                                float _5026 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3912 = (_3837 * _3814) * (((_3860 * 3.1415927410125732421875) * (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) / ((_3882 * _3882) * ((_3827 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3838 * _3684.y;
                                frontier_phi_78_pred_1 = _3838 * _3684.x;
                                frontier_phi_78_pred_2 = _3912 * _3696.z;
                                frontier_phi_78_pred_3 = _3912 * _3696.y;
                                frontier_phi_78_pred_4 = _3912 * _3696.x;
                                frontier_phi_78_pred_5 = _3838 * _3684.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3920 = frontier_phi_78_pred;
                            _3919 = frontier_phi_78_pred_1;
                            _3918 = frontier_phi_78_pred_2;
                            _3917 = frontier_phi_78_pred_3;
                            _3916 = frontier_phi_78_pred_4;
                            _3921 = frontier_phi_78_pred_5;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            if (_3643 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3643;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3628;
                        frontier_phi_72_pred_1 = _3627;
                        frontier_phi_72_pred_2 = _3626;
                        frontier_phi_72_pred_3 = _3625;
                        frontier_phi_72_pred_4 = _3624;
                        frontier_phi_72_pred_5 = _3623;
                    }
                    _3296 = frontier_phi_72_pred;
                    _3294 = frontier_phi_72_pred_1;
                    _3292 = frontier_phi_72_pred_2;
                    _3290 = frontier_phi_72_pred_3;
                    _3288 = frontier_phi_72_pred_4;
                    _3286 = frontier_phi_72_pred_5;
                    uint _3431 = _3430 + 1u;
                    if (_3431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3424 = _3286;
                        _3425 = _3288;
                        _3426 = _3290;
                        _3427 = _3292;
                        _3428 = _3294;
                        _3429 = _3296;
                        _3430 = _3431;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3296;
                frontier_phi_60_61_ladder_1 = _3294;
                frontier_phi_60_61_ladder_2 = _3290;
                frontier_phi_60_61_ladder_3 = _3288;
                frontier_phi_60_61_ladder_4 = _3286;
                frontier_phi_60_61_ladder_5 = _3292;
            }
            else
            {
                frontier_phi_60_61_ladder = _3182;
                frontier_phi_60_61_ladder_1 = _3180;
                frontier_phi_60_61_ladder_2 = _3176;
                frontier_phi_60_61_ladder_3 = _3174;
                frontier_phi_60_61_ladder_4 = _3172;
                frontier_phi_60_61_ladder_5 = _3178;
            }
            _3285 = frontier_phi_60_61_ladder_4;
            _3287 = frontier_phi_60_61_ladder_3;
            _3289 = frontier_phi_60_61_ladder_2;
            _3291 = frontier_phi_60_61_ladder_5;
            _3293 = frontier_phi_60_61_ladder_1;
            _3295 = frontier_phi_60_61_ladder;
        }
        float _3300 = isnan(1.0) ? _1078 : (isnan(_1078) ? 1.0 : min(_1078, 1.0));
        _3105 = (_3300 * _3291) + _2617;
        _3107 = (_3300 * _3293) + _2619;
        _3109 = (_3300 * _3295) + _2621;
        _3111 = ((_3285 * _1062) * _3300) + _2955;
        _3113 = ((_3287 * _1064) * _3300) + _2957;
        _3115 = ((_3289 * _1065) * _3300) + _2959;
    }
    else
    {
        _3105 = _2617;
        _3107 = _2619;
        _3109 = _2621;
        _3111 = _2955;
        _3113 = _2957;
        _3115 = _2959;
    }
    float _5042 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _5053 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _5064 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    uint _3135 = _254 + 6u;
    float _3143 = _1000 / cbSceneParam._m0[86u].x;
    float _3144 = _1001 / cbSceneParam._m0[86u].y;
    vec4 _3158 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3143, _3144, (log2((isnan(cbSceneParam._m0[77u].w) ? _935 : (isnan(_935) ? cbSceneParam._m0[77u].w : min(_935, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3160 = _3158.x;
    float _3161 = _3158.y;
    float _3162 = _3158.z;
    float _3163 = _3158.w;
    float _3235;
    float _3237;
    float _3239;
    float _3241;
    if (_935 > cbSceneParam._m0[78u].w)
    {
        float _3197 = isnan(_935) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _935 : min(cbSceneParam._m0[80u].w, _935));
        float _3198 = _3197 / _935;
        float _3209 = _3198 * _985;
        float _3210 = _986 * _3198;
        float _3211 = (-0.0) - _3210;
        float _3213 = _3198 * _987;
        float _3215 = (cbSceneParam._m0[77u].w * _3211) / _3197;
        float _3216 = _3215 + cbSceneParam._m0[79u].w;
        float _3217 = cbSceneParam._m0[79u].w - _3210;
        float _3223 = sqrt(((_3209 * _3209) + (_3210 * _3210)) + (_3213 * _3213));
        float _3226 = (1.0 - (cbSceneParam._m0[77u].w / _3197)) * _3223;
        float _3231 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3233 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3386;
        if (abs((_3211 - _3215) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3386 = ((((_3216 > 0.0) ? exp2(_3231 * _3216) : (2.0 - exp2(_3233 * _3216))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3226;
        }
        else
        {
            float _3346 = 1.0 / cbSceneParam._m0[80u].x;
            float _3347 = isnan(_3217) ? _3216 : (isnan(_3216) ? _3217 : max(_3216, _3217));
            float _3348 = isnan(_3217) ? _3216 : (isnan(_3216) ? _3217 : min(_3216, _3217));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            _3386 = ((abs(_3223 / _3211) * cbSceneParam._m0[80u].y) * ((((_3357 - _3358) * 2.0) - ((exp2(_3231 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0)))) - exp2(_3231 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))))) * _3346)) - ((exp2(_3233 * _3357) - exp2(_3233 * _3358)) * _3346))) + (_3226 * cbSceneParam._m0[80u].z);
        }
        vec4 _3388 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3143, _3144, 1.0), 0.0);
        float _3397 = exp2((_3386 * (-1.44269502162933349609375)) * (1.0 - _3388.w));
        float _3398 = log2(_3397);
        float _3414 = log2(_3163);
        _3235 = (exp2(_3414 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].x)) * _3388.x) / cbSceneParam._m0[78u].x)) + _3160;
        _3237 = (exp2(_3414 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].y)) * _3388.y) / cbSceneParam._m0[78u].y)) + _3161;
        _3239 = (exp2(_3414 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].z)) * _3388.z) / cbSceneParam._m0[78u].z)) + _3162;
        _3241 = _3397 * _3163;
    }
    else
    {
        _3235 = _3160;
        _3237 = _3161;
        _3239 = _3162;
        _3241 = _3163;
    }
    float _3253 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3254 = _3253 == 3.0;
    float _3255 = log2(_3241);
    float _3262 = exp2(_3255 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3105 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1078))) + ((_3111 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _3263 = exp2(_3255 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3107 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1078))) + ((_3113 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _3264 = exp2(_3255 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3109 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1078))) + ((_3115 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _3273 = (_3253 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3273 * (_3254 ? _3262 : (_3262 + (cbSceneParam._m0[72u].w * _3235)));
    SV_Target.y = _3273 * (_3254 ? _3263 : (_3263 + (cbSceneParam._m0[72u].w * _3237)));
    SV_Target.z = _3273 * (_3254 ? _3264 : (_3264 + (cbSceneParam._m0[72u].w * _3239)));
    SV_Target.w = cbInstanceData._m0[_3135].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3135].w;
}


