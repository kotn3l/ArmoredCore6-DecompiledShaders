#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1475;
float _4137;
float _4138;
float _4139;
float _4140;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4149 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4160 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4171 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[23u].w) + _436) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4182 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _461 = (_454 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _462 = (_454 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _463 = (_454 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    float _467 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _461;
    float _470 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _462;
    float _473 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _463;
    float _480 = ((_461 - _467) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) + _467;
    float _481 = ((_462 - _470) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) + _470;
    float _482 = ((_463 - _473) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) + _473;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    float _576 = ((_546.z - _567) * _454) + _567;
    float _579 = ((((_546.x - _565) * _454) + _565) * 2.0) + (-1.0);
    float _580 = ((((_546.y - _566) * _454) + _566) * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _4193 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _639 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _642 = ((isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : min(_639, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _651 = (_642 - ((((((_629 - _630) * cbMtdParam._m0[24u].z) + _630) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _642))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4214 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _659 = (_652 * ((_501.x * cbMtdParam._m0[18u].x) - _480)) + _480;
    float _660 = (_652 * ((_501.y * cbMtdParam._m0[18u].y) - _481)) + _481;
    float _661 = (_652 * ((_501.z * cbMtdParam._m0[18u].z) - _482)) + _482;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _701 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_675 - _676) * cbMtdParam._m0[24u].w) + _676) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4225 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _710 = ((((cbMtdParam._m0[10u].x - _659) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _702) + _659;
    float _711 = ((((cbMtdParam._m0[10u].y - _660) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _702) + _660;
    float _712 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _661)) * _702) + _661;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _740 = _738.x;
    float _758 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _740) * _454) + _740;
    float _762 = ((_724.x - _758) * cbMtdParam._m0[19u].z) + _758;
    float _764 = _762 - (_762 * _652);
    float _766 = _764 - (_764 * _702);
    float _771 = (((_521.z - _576) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _576;
    float _775 = ((_602.z - _771) * cbMtdParam._m0[19u].w) + _771;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _796 = (_789.x * 2.0) + (-1.0);
    float _797 = (_789.y * 2.0) + (-1.0);
    float _798 = dot(vec2(_796, _797), vec2(_796, _797));
    float _4236 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _806 = (_652 * (_789.z - _775)) + _775;
    float _809 = ((cbMtdParam._m0[23u].x - _806) * _702) + _806;
    vec4 _828 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _834 = (_828.x * 2.0) + (-1.0);
    float _835 = (_828.y * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _4247 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _850 = (_579 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_521.x * 2.0) + (-1.0)))) + (((_602.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _851 = (_580 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_521.y * 2.0) + (-1.0)))) + (((_602.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _863 = (((_796 - _850) + (cbMtdParam._m0[21u].x * _850)) * _652) + _850;
    float _864 = (((_797 - _851) + (cbMtdParam._m0[21u].x * _851)) * _652) + _851;
    float _865 = (_652 * (sqrt(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) - _586)) + _586;
    float _876 = (((_834 - _863) + (_863 * cbMtdParam._m0[22u].z)) * _702) + _863;
    float _877 = (((_835 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _702) + _864;
    float _878 = ((sqrt(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) - _865) * _702) + _865;
    float _882 = cbMtdParam._m0[22u].x + _602.w;
    float _885 = fma(_878, _259 * NORMAL.x, fma(_877, _266 * TANGENT.x, (_252 * _244) * _876));
    float _888 = fma(_878, _259 * NORMAL.y, fma(_877, _266 * TANGENT.y, (_252 * _245) * _876));
    float _891 = fma(_878, _259 * NORMAL.z, fma(_877, _266 * TANGENT.z, (_252 * _246) * _876));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _4258 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _899 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4280 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4291 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4302 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4313 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _904 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _918 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _968 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _958);
    float _969 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _958);
    float _970 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _958);
    float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
    float _975 = _968 * _974;
    float _976 = _969 * _974;
    float _977 = _970 * _974;
    vec4 _982 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _984 = _982.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1156 = sqrt(((_968 * _968) + (_969 * _969)) + (_970 * _970));
        float _1162 = (cbMatDynParam._m0[5u].x * _1156) + cbMatDynParam._m0[5u].y;
        float _4324 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1167 = (cbMatDynParam._m0[5u].z * _1156) + cbMatDynParam._m0[5u].w;
        float _4335 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) - _1163)) + _1163) < ((_984 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _995 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _996 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1014 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1017 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1020 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1033 = _291 + 9u;
    uint _1034 = _1033 + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _4346 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _4357 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _1046 = 1.0 - _904;
    float _1047 = _1043 * _1046;
    float _1048 = _1044 * _1046;
    float _1049 = _1045 * _1046;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _904;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _904;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _904;
    float _1057 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    vec4 _1069 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _995, cbSceneParam._m0[86u].y * _996));
    float _1073 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * TEXCOORD_5.w) * _1069.x;
    float _1074 = dot(vec3(_896, _897, _898), vec3(_975, _976, _977));
    float _1077 = _1074 * 2.0;
    float _1081 = (_1077 * _896) - _975;
    float _1082 = (_1077 * _897) - _976;
    float _1083 = (_1077 * _898) - _977;
    float _1087 = abs(dot(vec3(_975, _976, _977), vec3(_896, _897, _898)));
    float _4379 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1089 = sqrt(_899);
    float _1102 = exp2((_1089 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1089 * 3.0));
    float _1108 = (1.0 - _1102) * ((_1089 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1109 = _1102 * _1089;
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1474;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1145, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137));
        float _1203 = fma(_1145, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137));
        float _1207 = fma(_1145, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137));
        float _1232 = _1137 + _896;
        float _1233 = _1141 + _897;
        float _1234 = _1145 + _898;
        float _1244 = fma(_1234, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1232)) - _1199;
        float _1245 = fma(_1234, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1232)) - _1203;
        float _1246 = fma(_1234, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1232)) - _1207;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1302 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1268.x + (-0.5));
        float _1304 = _1302 * (_1268.y + (-0.5));
        float _1305 = _1302 * (_1268.z + (-0.5));
        float _1312 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1275.x + (-0.5));
        float _1314 = _1312 * (_1275.y + (-0.5));
        float _1315 = _1312 * (_1275.z + (-0.5));
        float _1322 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1282.x + (-0.5));
        float _1324 = _1322 * (_1282.y + (-0.5));
        float _1325 = _1322 * (_1282.z + (-0.5));
        float _1332 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1289.x + (-0.5));
        float _1334 = _1332 * (_1289.y + (-0.5));
        float _1335 = _1332 * (_1289.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1356 = (dot(vec3(_896, _897, _898), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1366 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4427 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1368 + 1.0))) + _1373) * _1336;
        float _1383 = _1304 * 0.5;
        float _1384 = _1314 * 0.5;
        float _1385 = _1324 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_896, _897, _898), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4460 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1410 + 1.0))) + _1415) * _1337;
        float _1425 = _1305 * 0.5;
        float _1426 = _1315 * 0.5;
        float _1427 = _1325 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_896, _897, _898), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4493 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1452 + 1.0))) + _1457) * _1338;
        _1474 = _1305;
        _1476 = _1304;
        _1477 = _1303;
        _1478 = _1315;
        _1479 = _1314;
        _1480 = _1313;
        _1481 = _1325;
        _1482 = _1324;
        _1483 = _1323;
        _1484 = _1338;
        _1485 = _1337;
        _1486 = _1336;
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1475;
        _1476 = _1475;
        _1477 = _1475;
        _1478 = _1475;
        _1479 = _1475;
        _1480 = _1475;
        _1481 = _1475;
        _1482 = _1475;
        _1483 = _1475;
        _1484 = _1475;
        _1485 = _1475;
        _1486 = _1475;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1517 = fma(_1145, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137));
        float _1521 = fma(_1145, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137));
        float _1525 = fma(_1145, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137));
        float _1548 = _1137 + _896;
        float _1549 = _1141 + _897;
        float _1550 = _1145 + _898;
        float _1560 = fma(_1550, cbModelParam._m0[30u].z, fma(_1549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1548)) - _1517;
        float _1561 = fma(_1550, cbModelParam._m0[31u].z, fma(_1549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1548)) - _1521;
        float _1562 = fma(_1550, cbModelParam._m0[32u].z, fma(_1549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1548)) - _1525;
        float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
        float _1579 = ((_1566 * _1560) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1517 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1566 * _1561) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1521 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1566 * _1562) / cbModelParam._m0[35u].z) + ((((((_1525 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        float _1616 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1583.x + (-0.5));
        float _1618 = _1616 * (_1583.y + (-0.5));
        float _1619 = _1616 * (_1583.z + (-0.5));
        float _1626 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1590.x + (-0.5));
        float _1628 = _1626 * (_1590.y + (-0.5));
        float _1629 = _1626 * (_1590.z + (-0.5));
        float _1636 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1597.x + (-0.5));
        float _1638 = _1636 * (_1597.y + (-0.5));
        float _1639 = _1636 * (_1597.z + (-0.5));
        float _1646 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1604.x + (-0.5));
        float _1648 = _1646 * (_1604.y + (-0.5));
        float _1649 = _1646 * (_1604.z + (-0.5));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = _1617 * 0.5;
        float _1654 = _1627 * 0.5;
        float _1655 = _1637 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_896, _897, _898), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4534 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4545 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4556 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_1680 + 1.0))) + _1685) * _1650;
        float _1695 = _1618 * 0.5;
        float _1696 = _1628 * 0.5;
        float _1697 = _1638 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_896, _897, _898), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4567 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4578 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4589 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_1722 + 1.0))) + _1727) * _1651;
        float _1737 = _1619 * 0.5;
        float _1738 = _1629 * 0.5;
        float _1739 = _1639 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_896, _897, _898), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4600 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4611 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4622 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_1764 + 1.0))) + _1769) * _1652;
        _1786 = _1619;
        _1787 = _1618;
        _1788 = _1617;
        _1789 = _1629;
        _1790 = _1628;
        _1791 = _1627;
        _1792 = _1639;
        _1793 = _1638;
        _1794 = _1637;
        _1795 = _1652;
        _1796 = _1651;
        _1797 = _1650;
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
    }
    else
    {
        _1786 = _1475;
        _1787 = _1475;
        _1788 = _1475;
        _1789 = _1475;
        _1790 = _1475;
        _1791 = _1475;
        _1792 = _1475;
        _1793 = _1475;
        _1794 = _1475;
        _1795 = _1475;
        _1796 = _1475;
        _1797 = _1475;
        _1798 = 0.0;
        _1799 = 0.0;
        _1800 = 0.0;
    }
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1487)) + _1487;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1488)) + _1488;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1489)) + _1489;
    float _1833 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1810));
    float _1854 = _1081 * 0.5;
    float _1855 = _1082 * 0.5;
    float _1856 = _1083 * 0.5;
    float _1857 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1860 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1863 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1897;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1870 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1474, _1478, _1481, _1484));
        float _1874 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1878 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1885 = dot(vec4(cbModelParam._m0[39u]), vec4(_1854, _1855, _1856, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1908;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1899 = dot(vec4(cbModelParam._m0[40u]), vec4(_1854, _1855, _1856, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1912 = (_1908 * cbModelParam._m0[1u].x) + (_1897 * (1.0 - cbModelParam._m0[1u].x));
    float _1922 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1922 : min(cbModelParam._m0[25u].z, _1922));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1970 = fma(_1145, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137)) + cbModelParam._m0[13u].w;
        float _1974 = fma(_1145, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137)) + cbModelParam._m0[14u].w;
        float _1978 = fma(_1145, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137)) + cbModelParam._m0[15u].w;
        float _1981 = fma(_1083, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081));
        float _1984 = fma(_1083, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081));
        float _1987 = fma(_1083, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081));
        float _2015;
        if (_1981 > 0.0)
        {
            _2015 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2015 = frontier_phi_17_15_ladder;
        }
        float _2186;
        if (_1984 > 0.0)
        {
            _2186 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2186 = frontier_phi_26_22_ladder;
        }
        float _2481;
        if (_1987 > 0.0)
        {
            _2481 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2481 = frontier_phi_38_33_ladder;
        }
        float _2483 = isnan(_2186) ? _2015 : (isnan(_2015) ? _2186 : min(_2015, _2186));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1981) + _1970;
        float _2489 = (_2484 * _1984) + _1974;
        float _2490 = (_2484 * _1987) + _1978;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2491;
        float _2495 = _2491 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 > _2495) || ((_2489 < _2493) || ((_2488 < _2493) || (_2488 > _2495))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2490, cbModelParam._m0[9u].z, fma(_2489, cbModelParam._m0[9u].y, _2488 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2490, cbModelParam._m0[10u].z, fma(_2489, cbModelParam._m0[10u].y, _2488 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2490, cbModelParam._m0[11u].z, fma(_2489, cbModelParam._m0[11u].y, _2488 * cbModelParam._m0[11u].x))), _1923);
            frontier_phi_16_38_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2003 = frontier_phi_16_38_ladder_2;
        _2005 = frontier_phi_16_38_ladder_1;
        _2007 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1081, _1082, _1083), _1923);
        _2003 = _1991.x * cbModelParam._m0[1u].y;
        _2005 = _1991.y * cbModelParam._m0[1u].y;
        _2007 = _1991.z * cbModelParam._m0[1u].y;
    }
    float _2011 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _2012 = isnan(_2011) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2011 : min(cbModelParam._m0[25u].w, _2011));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2065 = fma(_1145, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137)) + cbModelParam._m0[21u].w;
        float _2069 = fma(_1145, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137)) + cbModelParam._m0[22u].w;
        float _2073 = fma(_1145, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137)) + cbModelParam._m0[23u].w;
        float _2076 = fma(_1083, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081));
        float _2079 = fma(_1083, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081));
        float _2082 = fma(_1083, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081));
        float _2191;
        if (_2076 > 0.0)
        {
            _2191 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2191 = frontier_phi_28_24_ladder;
        }
        float _2508;
        if (_2079 > 0.0)
        {
            _2508 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2508 = frontier_phi_40_35_ladder;
        }
        float _2846;
        if (_2082 > 0.0)
        {
            _2846 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2846 = frontier_phi_50_47_ladder;
        }
        float _2848 = isnan(_2508) ? _2191 : (isnan(_2191) ? _2508 : min(_2191, _2508));
        float _2849 = isnan(_2846) ? _2848 : (isnan(_2848) ? _2846 : min(_2848, _2846));
        float _2853 = (_2849 * _2076) + _2065;
        float _2854 = (_2849 * _2079) + _2069;
        float _2855 = (_2849 * _2082) + _2073;
        float _2856 = _2849 * 9.9999997473787516355514526367188e-05;
        float _2857 = (-1.0) - _2856;
        float _2859 = _2856 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2855 > _2859) || ((_2855 < _2857) || ((_2854 > _2859) || ((_2854 < _2857) || ((_2853 < _2857) || (_2853 > _2859))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2855, cbModelParam._m0[17u].z, fma(_2854, cbModelParam._m0[17u].y, _2853 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2855, cbModelParam._m0[18u].z, fma(_2854, cbModelParam._m0[18u].y, _2853 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2855, cbModelParam._m0[19u].z, fma(_2854, cbModelParam._m0[19u].y, _2853 * cbModelParam._m0[19u].x))), _2012);
            frontier_phi_25_50_ladder = _2977.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2977.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2977.x * cbModelParam._m0[1u].z;
        }
        _2101 = frontier_phi_25_50_ladder_2;
        _2103 = frontier_phi_25_50_ladder_1;
        _2105 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1081, _1082, _1083), _2012);
        _2101 = _2085.x * cbModelParam._m0[1u].z;
        _2103 = _2085.y * cbModelParam._m0[1u].z;
        _2105 = _2085.z * cbModelParam._m0[1u].z;
    }
    float _2118 = (((_1108 * _1057) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2120 = (((_1108 * _1059) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2103 - _2005)) + _2005);
    float _2122 = (((_1108 * _1060) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2105 - _2007)) + _2007);
    float _2125 = fma(_2122, cbSceneParam._m0[89u].z, fma(_2120, cbSceneParam._m0[89u].y, _2118 * cbSceneParam._m0[89u].x));
    float _2128 = fma(_2122, cbSceneParam._m0[90u].z, fma(_2120, cbSceneParam._m0[90u].y, _2118 * cbSceneParam._m0[90u].x));
    float _2131 = fma(_2122, cbSceneParam._m0[91u].z, fma(_2120, cbSceneParam._m0[91u].y, _2118 * cbSceneParam._m0[91u].x));
    float _2165 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2169 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2178 = _2165 / _2177;
    float _2179 = _2169 / _2177;
    float _2180 = _2173 / _2177;
    float _2327;
    float _2328;
    float _2329;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2207 = ((uint(_2180 > cbSceneParam._m0[59u].y) + uint(_2180 > cbSceneParam._m0[59u].x)) + uint(_2180 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2208 = _2207 + 43u;
        uint _2216 = _2207 + 44u;
        uint _2224 = _2207 + 45u;
        uint _2232 = _2207 + 46u;
        float _2243 = fma(_2177, cbSceneParam._m0[_2208].w, fma(_2173, cbSceneParam._m0[_2208].z, fma(_2169, cbSceneParam._m0[_2208].y, _2165 * cbSceneParam._m0[_2208].x)));
        float _2247 = fma(_2177, cbSceneParam._m0[_2216].w, fma(_2173, cbSceneParam._m0[_2216].z, fma(_2169, cbSceneParam._m0[_2216].y, _2165 * cbSceneParam._m0[_2216].x)));
        float _2255 = fma(_2177, cbSceneParam._m0[_2232].w, fma(_2173, cbSceneParam._m0[_2232].z, fma(_2169, cbSceneParam._m0[_2232].y, _2165 * cbSceneParam._m0[_2232].x)));
        float _2260 = cbSceneParam._m0[33u].z * _2255;
        float _2262 = cbSceneParam._m0[33u].w * _2255;
        float _2265 = fma(_2177, cbSceneParam._m0[_2224].w, fma(_2173, cbSceneParam._m0[_2224].z, fma(_2169, cbSceneParam._m0[_2224].y, _2165 * cbSceneParam._m0[_2224].x))) / _2255;
        float _2313 = (cbSceneParam._m0[33u].x - sqrt(((_2179 * _2179) + (_2178 * _2178)) + (_2180 * _2180))) * cbSceneParam._m0[33u].y;
        float _4748 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2320 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 + _2243) / _2255, (_2262 + _2247) / _2255), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2262 + _2243) / _2255, (_2247 - _2260) / _2255), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2243 - _2260) / _2255, (_2247 - _2262) / _2255), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2243 - _2262) / _2255, (_2260 + _2247) / _2255), _2265), 0.0)).x), vec4(0.25)));
        _2327 = 1.0 - (_2320 * cbSceneParam._m0[34u].x);
        _2328 = 1.0 - (_2320 * cbSceneParam._m0[34u].y);
        _2329 = 1.0 - (_2320 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2327 = 1.0;
        _2328 = 1.0;
        _2329 = 1.0;
    }
    float _2393;
    float _2395;
    float _2397;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2381 = fma(_2177, cbSceneParam._m0[63u].w, fma(_2173, cbSceneParam._m0[63u].z, fma(_2169, cbSceneParam._m0[63u].y, _2165 * cbSceneParam._m0[63u].x)));
        float _2382 = fma(_2177, cbSceneParam._m0[60u].w, fma(_2173, cbSceneParam._m0[60u].z, fma(_2169, cbSceneParam._m0[60u].y, _2165 * cbSceneParam._m0[60u].x))) / _2381;
        float _2383 = fma(_2177, cbSceneParam._m0[61u].w, fma(_2173, cbSceneParam._m0[61u].z, fma(_2169, cbSceneParam._m0[61u].y, _2165 * cbSceneParam._m0[61u].x))) / _2381;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2382 >= cbSceneParam._m0[64u].x) && (_2383 >= cbSceneParam._m0[64u].y)) && (_2382 <= cbSceneParam._m0[64u].z)) && (_2383 <= cbSceneParam._m0[64u].w))
        {
            float _2521 = fma(_2177, cbSceneParam._m0[62u].w, fma(_2173, cbSceneParam._m0[62u].z, fma(_2169, cbSceneParam._m0[62u].y, _2165 * cbSceneParam._m0[62u].x))) / _2381;
            float _2525 = isnan(cbSceneParam._m0[41u].w) ? _2521 : (isnan(_2521) ? cbSceneParam._m0[41u].w : max(_2521, cbSceneParam._m0[41u].w));
            float _2568 = (cbSceneParam._m0[33u].x - sqrt(((_2179 * _2179) + (_2178 * _2178)) + (_2180 * _2180))) * cbSceneParam._m0[33u].y;
            float _4764 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
            float _2575 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2382, cbSceneParam._m0[33u].w + _2383), _2525), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2382, _2383 - cbSceneParam._m0[33u].z), _2525), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2382 - cbSceneParam._m0[33u].z, _2383 - cbSceneParam._m0[33u].w), _2525), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2382 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2383), _2525), 0.0)).x), vec4(0.25)));
            float _2579 = 1.0 - (_2575 * cbSceneParam._m0[34u].x);
            float _2580 = 1.0 - (_2575 * cbSceneParam._m0[34u].y);
            float _2581 = 1.0 - (_2575 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2581) ? _2329 : (isnan(_2329) ? _2581 : min(_2329, _2581));
            frontier_phi_37_36_ladder_1 = isnan(_2580) ? _2328 : (isnan(_2328) ? _2580 : min(_2328, _2580));
            frontier_phi_37_36_ladder_2 = isnan(_2579) ? _2327 : (isnan(_2327) ? _2579 : min(_2327, _2579));
        }
        else
        {
            frontier_phi_37_36_ladder = _2329;
            frontier_phi_37_36_ladder_1 = _2328;
            frontier_phi_37_36_ladder_2 = _2327;
        }
        _2393 = frontier_phi_37_36_ladder_2;
        _2395 = frontier_phi_37_36_ladder_1;
        _2397 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2393 = _2327;
        _2395 = _2328;
        _2397 = _2329;
    }
    uvec4 _2402 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2404 = _2402.x * 14u;
    uint _2405 = _2404 + 13u;
    float _2412 = _1073 + (-1.0);
    float _2417 = (cbLight._m0[_2405].x * _2412) + 1.0;
    float _2418 = (cbLight._m0[_2405].y * _2412) + 1.0;
    float _2419 = (cbLight._m0[_2405].z * _2412) + 1.0;
    float _2420 = (cbLight._m0[_2405].w * _2412) + 1.0;
    uint _2421 = _2404 + 5u;
    float _2427 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
    uint _2431 = _2404 + 4u;
    float _2440 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
    uint _2444 = _2404 | 1u;
    float _2455 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_896, _897, _898));
    float _2458 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_896, _897, _898));
    float _4800 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _4811 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2463 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * 0.3183098733425140380859375;
    float _2465 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * 0.3183098733425140380859375;
    float _2472 = ((cbLight._m0[_2421].x * _2427) * _2465) + (((cbLight._m0[_2431].x * _2393) * _2440) * _2463);
    float _2473 = ((_2427 * cbLight._m0[_2421].y) * _2465) + (((cbLight._m0[_2431].y * _2395) * _2440) * _2463);
    float _2474 = ((_2427 * cbLight._m0[_2421].z) * _2465) + (((cbLight._m0[_2431].z * _2397) * _2440) * _2463);
    uvec4 _2478 = floatBitsToUint(cbLight._m0[_2404 + 12u]);
    bool _2480 = _2478.x == 0u;
    float _2582;
    float _2584;
    float _2586;
    if (_2480)
    {
        _2582 = _2472;
        _2584 = _2473;
        _2586 = _2474;
    }
    else
    {
        uint _2590 = _2404 + 6u;
        float _2606 = (dot(vec3(cbLight._m0[_2404 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2607 = _2606 * _2606;
        float _4822 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2608 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2609 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2582 = (((cbLight._m0[_2590].x * 0.3183098733425140380859375) * _2608) * _2609) + _2472;
        _2584 = (((cbLight._m0[_2590].y * 0.3183098733425140380859375) * _2608) * _2609) + _2473;
        _2586 = (((cbLight._m0[_2590].z * 0.3183098733425140380859375) * _2608) * _2609) + _2474;
    }
    bool _2589 = _2478.y == 0u;
    float _2644;
    float _2646;
    float _2648;
    if (_2589)
    {
        _2644 = _2582;
        _2646 = _2584;
        _2648 = _2586;
    }
    else
    {
        uint _2817 = _2404 + 7u;
        float _2833 = (dot(vec3(cbLight._m0[_2404 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2834 = _2833 * _2833;
        float _4838 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2835 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2836 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2644 = (((cbLight._m0[_2817].x * 0.3183098733425140380859375) * _2835) * _2836) + _2582;
        _2646 = (((cbLight._m0[_2817].y * 0.3183098733425140380859375) * _2835) * _2836) + _2584;
        _2648 = (((cbLight._m0[_2817].z * 0.3183098733425140380859375) * _2835) * _2836) + _2586;
    }
    uint _2651 = _2404 + 8u;
    float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _899) * 0.949999988079071044921875);
    float _2665 = _2664 * _2664;
    float _2666 = cbLight._m0[_2404].x + _975;
    float _2667 = cbLight._m0[_2404].y + _976;
    float _2668 = cbLight._m0[_2404].z + _977;
    float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
    float _2673 = _2672 * _2666;
    float _2674 = _2672 * _2667;
    float _2675 = _2672 * _2668;
    float _2676 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2404].xyz));
    float _4854 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _4865 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2680 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _2681 = dot(vec3(_896, _897, _898), vec3(_2673, _2674, _2675));
    float _4876 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2685 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2673, _2674, _2675));
    float _4887 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2689 = _2665 * _2665;
    float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
    float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
    float _2702 = 0.959999978542327880859375 - _1054;
    float _2704 = 0.959999978542327880859375 - _1055;
    float _2705 = 0.959999978542327880859375 - _1056;
    float _2712 = 1.0 - _2665;
    float _2723 = (0.5 / (((_2680 * ((_2679 * _2712) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _2712) + _2665) * _2679))) * _2679;
    float _4898 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2725 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
    uint _2739 = _2404 + 9u;
    float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _899) * 0.949999988079071044921875);
    float _2751 = _2750 * _2750;
    float _2752 = cbLight._m0[_2444].x + _975;
    float _2753 = cbLight._m0[_2444].y + _976;
    float _2754 = cbLight._m0[_2444].z + _977;
    float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
    float _2759 = _2758 * _2752;
    float _2760 = _2758 * _2753;
    float _2761 = _2758 * _2754;
    float _2762 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2444].xyz));
    float _4909 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2765 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2766 = dot(vec3(_896, _897, _898), vec3(_2759, _2760, _2761));
    float _4920 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2770 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2759, _2760, _2761));
    float _4931 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2774 = _2751 * _2751;
    float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
    float _2785 = exp2(log2(1.0 - (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) * 5.0);
    float _2792 = 1.0 - _2751;
    float _2802 = (0.5 / (((_2680 * ((_2765 * _2792) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _2792) + _2751) * _2765))) * _2765;
    float _4942 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2804 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
    float _2814 = (((((_2785 * _2702) + _1057) * cbLight._m0[_2739].x) * _2804) * _2427) + ((((cbLight._m0[_2651].x * _2393) * ((_2701 * _2702) + _1057)) * _2725) * _2440);
    float _2815 = (((((_2785 * _2704) + _1059) * cbLight._m0[_2739].y) * _2804) * _2427) + ((((cbLight._m0[_2651].y * _2395) * ((_2701 * _2704) + _1059)) * _2725) * _2440);
    float _2816 = (((((_2785 * _2705) + _1060) * cbLight._m0[_2739].z) * _2804) * _2427) + ((((cbLight._m0[_2651].z * _2397) * ((_2701 * _2705) + _1060)) * _2725) * _2440);
    float _2872;
    float _2874;
    float _2876;
    if (_2480)
    {
        _2872 = _2814;
        _2874 = _2815;
        _2876 = _2816;
    }
    else
    {
        uint _2878 = _2404 + 2u;
        uint _2882 = _2404 + 10u;
        float _2896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2878].w)) * _899) * 0.949999988079071044921875);
        float _2897 = _2896 * _2896;
        float _2898 = cbLight._m0[_2878].x + _975;
        float _2899 = cbLight._m0[_2878].y + _976;
        float _2900 = cbLight._m0[_2878].z + _977;
        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
        float _2905 = _2904 * _2898;
        float _2906 = _2904 * _2899;
        float _2907 = _2904 * _2900;
        float _2908 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2878].xyz));
        float _4953 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
        float _2912 = dot(vec3(_896, _897, _898), vec3(_2905, _2906, _2907));
        float _4964 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2916 = dot(vec3(cbLight._m0[_2878].xyz), vec3(_2905, _2906, _2907));
        float _4975 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2920 = _2897 * _2897;
        float _2924 = ((_2915 * _2915) * (_2920 + (-1.0))) + 1.0;
        float _2931 = exp2(log2(1.0 - (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0)))) * 5.0);
        float _2938 = 1.0 - _2897;
        float _2948 = (0.5 / (((_2680 * ((_2911 * _2938) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _2938) + _2897) * _2911))) * _2911;
        float _4986 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2950 = (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2920 / ((_2924 * _2924) * 3.141590118408203125));
        float _2951 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2872 = (((((_2931 * _2702) + _1057) * cbLight._m0[_2882].x) * _2950) * _2951) + _2814;
        _2874 = (((((_2931 * _2704) + _1059) * cbLight._m0[_2882].y) * _2950) * _2951) + _2815;
        _2876 = (((((_2931 * _2705) + _1060) * cbLight._m0[_2882].z) * _2950) * _2951) + _2816;
    }
    float _2982;
    float _2984;
    float _2986;
    if (_2589)
    {
        _2982 = _2872;
        _2984 = _2874;
        _2986 = _2876;
    }
    else
    {
        uint _2993 = _2404 + 3u;
        uint _2997 = _2404 + 11u;
        float _3011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2993].w)) * _899) * 0.949999988079071044921875);
        float _3012 = _3011 * _3011;
        float _3013 = cbLight._m0[_2993].x + _975;
        float _3014 = cbLight._m0[_2993].y + _976;
        float _3015 = cbLight._m0[_2993].z + _977;
        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
        float _3020 = _3019 * _3013;
        float _3021 = _3019 * _3014;
        float _3022 = _3019 * _3015;
        float _3023 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2993].xyz));
        float _5002 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3026 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _3027 = dot(vec3(_896, _897, _898), vec3(_3020, _3021, _3022));
        float _5013 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3030 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _3031 = dot(vec3(cbLight._m0[_2993].xyz), vec3(_3020, _3021, _3022));
        float _5024 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3035 = _3012 * _3012;
        float _3039 = ((_3030 * _3030) * (_3035 + (-1.0))) + 1.0;
        float _3046 = exp2(log2(1.0 - (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0)))) * 5.0);
        float _3053 = 1.0 - _3012;
        float _3063 = (0.5 / (((_2680 * ((_3026 * _3053) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _3053) + _3012) * _3026))) * _3026;
        float _5035 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        float _3065 = (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3035 / ((_3039 * _3039) * 3.141590118408203125));
        float _3066 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2982 = (((((_3046 * _2702) + _1057) * cbLight._m0[_2997].x) * _3065) * _3066) + _2872;
        _2984 = (((((_3046 * _2704) + _1059) * cbLight._m0[_2997].y) * _3065) * _3066) + _2874;
        _2986 = (((((_3046 * _2705) + _1060) * cbLight._m0[_2997].z) * _3065) * _3066) + _2876;
    }
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_2402.y == 0u)
    {
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.x;
        uint _3099 = uint((float(_3087.y) * floor(float(uint(cbSceneParam._m0[85u].y * _996) / _3088))) + floor(float(uint(cbSceneParam._m0[85u].x * _995) / _3088)));
        float _3109 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3110 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        uint _3113 = uint(isnan(14.0) ? _3110 : (isnan(_3110) ? 14.0 : min(_3110, 14.0)));
        uvec4 _3118 = texelFetch(g_lightClusterGridBuffer, int(((_3113 << 2u) + (_3099 << 6u)) >> 2u));
        uint _3119 = _3118.x;
        uint _3120 = _3087.z;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        if (((((1u << ((_3120 >> 4u) & 15u)) + 4294967295u) & _3119) == 0u) || ((_3120 & 240u) == 0u))
        {
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
        }
        else
        {
            float _3200;
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3352 = 0.0;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            uint _3358 = 0u;
            uint _3367;
            bool _3368;
            for (;;)
            {
                _3367 = texelFetch(g_lightClassification, int((((_3113 << 5u) + (_3099 << 9u)) + (_3358 << 2u)) >> 2u)).x;
                _3368 = _3367 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3368)
                {
                    frontier_phi_71_pred = _3357;
                    frontier_phi_71_pred_1 = _3356;
                    frontier_phi_71_pred_2 = _3355;
                    frontier_phi_71_pred_3 = _3354;
                    frontier_phi_71_pred_4 = _3353;
                    frontier_phi_71_pred_5 = _3352;
                }
                else
                {
                    float _3497;
                    float _3498;
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    uint _3503;
                    _3497 = _3352;
                    _3498 = _3353;
                    _3499 = _3354;
                    _3500 = _3355;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3367;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    for (;;)
                    {
                        uint _3507 = uint(findLSB(_3503)) + (_3358 << 5u);
                        uint _3504 = (_3503 + 4294967295u) & _3503;
                        uint _3509 = _3507 * 48u;
                        vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3529 = (_3507 * 48u) + 4u;
                        vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3548 = (_3507 * 48u) + 8u;
                        vec3 _3559 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3548)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 2u)).x));
                        float _3563 = _3523.x - _2178;
                        float _3564 = _3523.y - _2179;
                        float _3565 = _3523.z - _2180;
                        float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                        float _3569 = inversesqrt(_3566);
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3573 = dot(vec3(_1014, _1017, _1020), vec3(_3570, _3571, _3572));
                        float _3578 = 1.0 - (_3566 * _3523.w);
                        float _5061 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3579 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                        float _3580 = sqrt(_3566) * _3542.w;
                        float _3583 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3573) + _3584;
                        float _3590 = _3580 * _3580;
                        float _3594 = ((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3579) / ((_3590 * 0.699999988079071044921875) + 1.0);
                        float _3598 = (-0.0) - _2178;
                        float _3599 = (-0.0) - _2179;
                        float _3600 = (-0.0) - _2180;
                        float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                        float _3605 = _3604 * _3598;
                        float _3606 = _3604 * _3599;
                        float _3607 = _3604 * _3600;
                        float _3614 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                        float _3615 = 1.0 - _1089;
                        float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                        float _3623 = _3622 * _3622;
                        float _3624 = _3623 * _3623;
                        float _3625 = _3605 + _3570;
                        float _3626 = _3606 + _3571;
                        float _3627 = _3607 + _3572;
                        float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                        float _3635 = dot(vec3(_1014, _1017, _1020), vec3(_3605, _3606, _3607));
                        float _5077 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3638 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3639 = dot(vec3(_1014, _1017, _1020), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                        float _5088 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                        float _3647 = _3583 * _3623;
                        float _3648 = _3647 * _3647;
                        float _3651 = ((1.0 - _3648) * _3573) + _3648;
                        float _5099 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3652 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3653 = 1.0 - _3623;
                        float _3663 = (0.5 / (((_3652 * ((_3638 * _3653) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3652 * _3653) + _3623) * _3638))) * _3652;
                        float _5110 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3674 = (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0)))) / ((_3646 * _3646) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125))) * _3579;
                        _3427 = (_3594 * _3542.x) + _3500;
                        _3428 = (_3594 * _3542.y) + _3501;
                        _3429 = (_3594 * _3542.z) + _3502;
                        _3424 = (_3674 * _3559.x) + _3497;
                        _3425 = (_3674 * _3559.y) + _3498;
                        _3426 = (_3674 * _3559.z) + _3499;
                        if (_3504 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3497 = _3424;
                            _3498 = _3425;
                            _3499 = _3426;
                            _3500 = _3427;
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3504;
                        }
                    }
                    frontier_phi_71_pred = _3429;
                    frontier_phi_71_pred_1 = _3428;
                    frontier_phi_71_pred_2 = _3427;
                    frontier_phi_71_pred_3 = _3426;
                    frontier_phi_71_pred_4 = _3425;
                    frontier_phi_71_pred_5 = _3424;
                }
                _3210 = frontier_phi_71_pred;
                _3208 = frontier_phi_71_pred_1;
                _3206 = frontier_phi_71_pred_2;
                _3204 = frontier_phi_71_pred_3;
                _3202 = frontier_phi_71_pred_4;
                _3200 = frontier_phi_71_pred_5;
                uint _3359 = _3358 + 1u;
                if (_3359 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3352 = _3200;
                    _3353 = _3202;
                    _3354 = _3204;
                    _3355 = _3206;
                    _3356 = _3208;
                    _3357 = _3210;
                    _3358 = _3359;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
        }
        uvec4 _3213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3214 = _3213.z;
        uint _3216 = (_3214 >> 8u) & 15u;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        if (((4294967295u << _3216) & _3119) == 0u)
        {
            _3320 = _3199;
            _3322 = _3201;
            _3324 = _3203;
            _3326 = _3205;
            _3328 = _3207;
            _3330 = _3209;
        }
        else
        {
            float _3345 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _3346 = _3345 * _2178;
            float _3347 = _3345 * _2179;
            float _3348 = _3345 * _2180;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3216 < ((_3214 >> 12u) & 15u))
            {
                float _3321;
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3480 = _3199;
                float _3481 = _3201;
                float _3482 = _3203;
                float _3483 = _3205;
                float _3484 = _3207;
                float _3485 = _3209;
                uint _3486 = _3216;
                uint _3495;
                bool _3496;
                for (;;)
                {
                    _3495 = texelFetch(g_lightClassification, int((((_3113 << 5u) + (_3099 << 9u)) + (_3486 << 2u)) >> 2u)).x;
                    _3496 = _3495 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3496)
                    {
                        frontier_phi_82_pred = _3485;
                        frontier_phi_82_pred_1 = _3484;
                        frontier_phi_82_pred_2 = _3483;
                        frontier_phi_82_pred_3 = _3482;
                        frontier_phi_82_pred_4 = _3481;
                        frontier_phi_82_pred_5 = _3480;
                    }
                    else
                    {
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3981;
                        float _3982;
                        float _3983;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3701 = _3480;
                        float _3702 = _3481;
                        float _3703 = _3482;
                        float _3704 = _3483;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        uint _3707 = _3495;
                        uint _3708;
                        vec4 _3733;
                        float _3734;
                        vec4 _3749;
                        vec3 _3761;
                        vec4 _3776;
                        vec4 _3791;
                        float _3837;
                        bool _3838;
                        for (;;)
                        {
                            uint _3718 = ((_3486 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3707));
                            _3708 = (_3707 + 4294967295u) & _3707;
                            uint _3720 = _3718 * 40u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            _3734 = _3733.w;
                            uint _3736 = (_3718 * 40u) + 4u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3718 * 40u) + 8u;
                            _3761 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x));
                            uint _3763 = (_3718 * 40u) + 16u;
                            _3776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 3u)).x));
                            uint _3778 = (_3718 * 40u) + 20u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            uint _3793 = (_3718 * 40u) + 24u;
                            vec4 _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3812 = (_3718 * 40u) + 28u;
                            vec4 _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            _3837 = fma(_2180, _3825.z, fma(_2179, _3825.y, _3825.x * _2178)) + _3825.w;
                            _3838 = !((fma(_2180, _3806.z, fma(_2179, _3806.y, _3806.x * _2178)) + _3806.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3838)
                            {
                                float _3865 = _3733.x - _2178;
                                float _3866 = _3733.y - _2179;
                                float _3867 = _3733.z - _2180;
                                float _3868 = dot(vec3(_3865, _3866, _3867), vec3(_3865, _3866, _3867));
                                float _3871 = inversesqrt(_3868);
                                float _3872 = _3871 * _3865;
                                float _3873 = _3871 * _3866;
                                float _3874 = _3871 * _3867;
                                float _3878 = 1.0 - (_3868 / (_3734 * _3734));
                                float _5121 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3879 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                                float _3883 = sqrt(_3868) * _3749.w;
                                float _3885 = 1.39999997615814208984375 / (_3883 + 1.39999997615814208984375);
                                float _3886 = _3885 * _3885;
                                float _3889 = ((1.0 - _3886) * dot(vec3(_3872, _3873, _3874), vec3(_1014, _1017, _1020))) + _3886;
                                float _3892 = _3883 * _3883;
                                float _3896 = (fma(_2180, _3776.z, fma(_2179, _3776.y, _3776.x * _2178)) + _3776.w) / _3837;
                                float _3897 = (fma(_2180, _3791.z, fma(_2179, _3791.y, _3791.x * _2178)) + _3791.w) / _3837;
                                float _3901 = 1.0 - dot(vec2(_3896, _3897), vec2(_3896, _3897));
                                float _5137 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3902 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3903 = _3902 * (((isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0))) * _3879) / ((_3892 * 0.699999988079071044921875) + 1.0));
                                float _3915 = exp2(log2(1.0 / ((_3892 * 3.5) + 5.0)) * 0.25);
                                float _3916 = 1.0 - _1089;
                                float _3923 = sqrt(1.0 - ((1.0 - (_3916 * _3916)) * (1.0 - (_3915 * _3915))));
                                float _3924 = _3923 * _3923;
                                float _3925 = _3924 * _3924;
                                float _3926 = _3872 - _3346;
                                float _3927 = _3873 - _3347;
                                float _3928 = _3874 - _3348;
                                float _3932 = inversesqrt(dot(vec3(_3926, _3927, _3928), vec3(_3926, _3927, _3928)));
                                float _3936 = dot(vec3(_1014, _1017, _1020), vec3((-0.0) - _3346, (-0.0) - _3347, (-0.0) - _3348));
                                float _5148 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3939 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3940 = dot(vec3(_1014, _1017, _1020), vec3(_3932 * _3926, _3932 * _3927, _3932 * _3928));
                                float _5159 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3943 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3947 = ((_3943 * _3943) * (_3925 + (-1.0))) + 1.0;
                                float _3948 = _3885 * _3924;
                                float _3949 = _3948 * _3948;
                                float _3955 = ((1.0 - _3949) * dot(vec3(_1014, _1017, _1020), vec3(_3872, _3873, _3874))) + _3949;
                                float _5170 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3956 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3957 = 1.0 - _3924;
                                float _3967 = (0.5 / (((_3956 * ((_3939 * _3957) + _3924)) + 9.9999999392252902907785028219223e-09) + (((_3956 * _3957) + _3924) * _3939))) * _3956;
                                float _5181 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                                float _3977 = (_3902 * _3879) * (((_3925 * 3.1415927410125732421875) * (isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0)))) / ((_3947 * _3947) * ((_3892 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3903 * _3749.z;
                                frontier_phi_88_pred_1 = _3903 * _3749.y;
                                frontier_phi_88_pred_2 = _3903 * _3749.x;
                                frontier_phi_88_pred_3 = _3977 * _3761.z;
                                frontier_phi_88_pred_4 = _3977 * _3761.y;
                                frontier_phi_88_pred_5 = _3977 * _3761.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3986 = frontier_phi_88_pred;
                            _3985 = frontier_phi_88_pred_1;
                            _3984 = frontier_phi_88_pred_2;
                            _3983 = frontier_phi_88_pred_3;
                            _3982 = frontier_phi_88_pred_4;
                            _3981 = frontier_phi_88_pred_5;
                            _3691 = _3984 + _3704;
                            _3692 = _3985 + _3705;
                            _3693 = _3986 + _3706;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3690 = _3983 + _3703;
                            if (_3708 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3708;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3693;
                        frontier_phi_82_pred_1 = _3692;
                        frontier_phi_82_pred_2 = _3691;
                        frontier_phi_82_pred_3 = _3690;
                        frontier_phi_82_pred_4 = _3689;
                        frontier_phi_82_pred_5 = _3688;
                    }
                    _3331 = frontier_phi_82_pred;
                    _3329 = frontier_phi_82_pred_1;
                    _3327 = frontier_phi_82_pred_2;
                    _3325 = frontier_phi_82_pred_3;
                    _3323 = frontier_phi_82_pred_4;
                    _3321 = frontier_phi_82_pred_5;
                    uint _3487 = _3486 + 1u;
                    if (_3487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3480 = _3321;
                        _3481 = _3323;
                        _3482 = _3325;
                        _3483 = _3327;
                        _3484 = _3329;
                        _3485 = _3331;
                        _3486 = _3487;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3327;
                frontier_phi_63_64_ladder_1 = _3331;
                frontier_phi_63_64_ladder_2 = _3329;
                frontier_phi_63_64_ladder_3 = _3325;
                frontier_phi_63_64_ladder_4 = _3323;
                frontier_phi_63_64_ladder_5 = _3321;
            }
            else
            {
                frontier_phi_63_64_ladder = _3205;
                frontier_phi_63_64_ladder_1 = _3209;
                frontier_phi_63_64_ladder_2 = _3207;
                frontier_phi_63_64_ladder_3 = _3203;
                frontier_phi_63_64_ladder_4 = _3201;
                frontier_phi_63_64_ladder_5 = _3199;
            }
            _3320 = frontier_phi_63_64_ladder_5;
            _3322 = frontier_phi_63_64_ladder_4;
            _3324 = frontier_phi_63_64_ladder_3;
            _3326 = frontier_phi_63_64_ladder;
            _3328 = frontier_phi_63_64_ladder_2;
            _3330 = frontier_phi_63_64_ladder_1;
        }
        float _3335 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
        _3132 = (_3335 * _3326) + _2644;
        _3134 = (_3335 * _3328) + _2646;
        _3136 = (_3335 * _3330) + _2648;
        _3138 = ((_3320 * _1057) * _3335) + _2982;
        _3140 = ((_3322 * _1059) * _3335) + _2984;
        _3142 = ((_3324 * _1060) * _3335) + _2986;
    }
    else
    {
        _3132 = _2644;
        _3134 = _2646;
        _3136 = _2648;
        _3138 = _2982;
        _3140 = _2984;
        _3142 = _2986;
    }
    float _5197 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _5208 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5219 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _3159 = ((isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3132 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1073))) + ((_3138 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _3160 = ((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3134 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1073))) + ((_3140 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _3161 = ((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_3136 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1073))) + ((_3142 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    uint _3162 = _291 + 6u;
    float _3170 = _995 / cbSceneParam._m0[86u].x;
    float _3171 = _996 / cbSceneParam._m0[86u].y;
    vec4 _3185 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3170, _3171, (log2((isnan(cbSceneParam._m0[77u].w) ? _918 : (isnan(_918) ? cbSceneParam._m0[77u].w : min(_918, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3187 = _3185.x;
    float _3188 = _3185.y;
    float _3189 = _3185.z;
    float _3190 = _3185.w;
    float _3262;
    float _3264;
    float _3266;
    float _3268;
    if (_918 > cbSceneParam._m0[78u].w)
    {
        float _3224 = isnan(_918) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _918 : min(cbSceneParam._m0[80u].w, _918));
        float _3225 = _3224 / _918;
        float _3236 = _3225 * _968;
        float _3237 = _969 * _3225;
        float _3238 = (-0.0) - _3237;
        float _3240 = _3225 * _970;
        float _3242 = (cbSceneParam._m0[77u].w * _3238) / _3224;
        float _3243 = _3242 + cbSceneParam._m0[79u].w;
        float _3244 = cbSceneParam._m0[79u].w - _3237;
        float _3250 = sqrt(((_3236 * _3236) + (_3237 * _3237)) + (_3240 * _3240));
        float _3253 = (1.0 - (cbSceneParam._m0[77u].w / _3224)) * _3250;
        float _3258 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3260 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3437;
        if (abs((_3238 - _3242) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3437 = ((((_3243 > 0.0) ? exp2(_3258 * _3243) : (2.0 - exp2(_3260 * _3243))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3253;
        }
        else
        {
            float _3381 = 1.0 / cbSceneParam._m0[80u].x;
            float _3382 = isnan(_3244) ? _3243 : (isnan(_3243) ? _3244 : max(_3243, _3244));
            float _3383 = isnan(_3244) ? _3243 : (isnan(_3243) ? _3244 : min(_3243, _3244));
            float _3392 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : min(_3382, 0.0));
            float _3393 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : min(_3383, 0.0));
            _3437 = ((abs(_3250 / _3238) * cbSceneParam._m0[80u].y) * ((((_3392 - _3393) * 2.0) - ((exp2(_3258 * (isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0)))) - exp2(_3258 * (isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))))) * _3381)) - ((exp2(_3260 * _3392) - exp2(_3260 * _3393)) * _3381))) + (_3253 * cbSceneParam._m0[80u].z);
        }
        vec4 _3439 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3170, _3171, 1.0), 0.0);
        float _3448 = exp2((_3437 * (-1.44269502162933349609375)) * (1.0 - _3439.w));
        float _3449 = log2(_3448);
        float _3465 = log2(_3190);
        _3262 = (exp2(_3465 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3449 * cbSceneParam._m0[78u].x)) * _3439.x) / cbSceneParam._m0[78u].x)) + _3187;
        _3264 = (exp2(_3465 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3449 * cbSceneParam._m0[78u].y)) * _3439.y) / cbSceneParam._m0[78u].y)) + _3188;
        _3266 = (exp2(_3465 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3449 * cbSceneParam._m0[78u].z)) * _3439.z) / cbSceneParam._m0[78u].z)) + _3189;
        _3268 = _3448 * _3190;
    }
    else
    {
        _3262 = _3187;
        _3264 = _3188;
        _3266 = _3189;
        _3268 = _3190;
    }
    bool _3475;
    vec4 _3278;
    vec4 _3300;
    float _3302;
    float _3306;
    float _3307;
    float _3308;
    float _3309;
    bool _3319;
    for (;;)
    {
        _3278 = cbMatDynParam._m0[0u];
        float _3280 = roundEven(_3278.y);
        bool _3281 = _3280 == 3.0;
        float _3282 = log2(_3268);
        float _3289 = exp2(_3282 * cbSceneParam._m0[78u].x) * _3159;
        float _3290 = exp2(_3282 * cbSceneParam._m0[78u].y) * _3160;
        float _3291 = exp2(_3282 * cbSceneParam._m0[78u].z) * _3161;
        float _3298 = _984 + (-0.5);
        _3300 = cbMtdParam._m0[1u];
        _3302 = _3300.y * _3298;
        float _3305 = (_3280 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3306 = _3305 * (_3281 ? _3289 : (_3289 + (cbSceneParam._m0[72u].w * _3262)));
        _3307 = _3305 * (_3281 ? _3290 : (_3290 + (cbSceneParam._m0[72u].w * _3264)));
        _3308 = _3305 * (_3281 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3266)));
        _3309 = _3298 * 0.999000012874603271484375;
        _3319 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3319)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3309) < 0.5)
            {
                _3475 = true;
                break;
            }
        }
        uint _3416 = _1033 + uint(_3278.w);
        if ((cbInstanceData._m0[_3416].w < 1.0) && ((cbInstanceData._m0[_3416].w + _3309) < 0.5))
        {
            _3475 = true;
            break;
        }
        if ((_3302 + 1.0) < _3300.x)
        {
            _3475 = true;
            break;
        }
        _3475 = false;
        break;
    }
    float _3679;
    if (_3475)
    {
        discard_state = true;
        _3679 = 0.0;
    }
    else
    {
        _3679 = cbInstanceData._m0[_3162].w;
    }
    SV_Target.x = _3306;
    SV_Target.y = _3307;
    SV_Target.z = _3308;
    SV_Target.w = _3679;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3162].w;
    discard_exit();
}


