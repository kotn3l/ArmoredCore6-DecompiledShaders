#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1589;
float _3968;
float _3969;
float _3970;
float _3971;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3980 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3991 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4002 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _434 = _432.x;
    float _446 = dot(vec4(_434, _432.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _463 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_434 - _446) * cbMtdParam._m0[23u].w) + _446) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4013 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _471 = (_464 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _472 = (_464 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _473 = (_464 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _512 = _510.x;
    float _522 = dot(vec4(_512, _510.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _536 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_512 - _522) * cbMtdParam._m0[23u].w) + _522) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4024 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _544 = (_537 * ((_490.x * cbMtdParam._m0[13u].x) - _471)) + _471;
    float _545 = (_537 * ((_490.y * cbMtdParam._m0[13u].y) - _472)) + _472;
    float _546 = (_537 * ((_490.z * cbMtdParam._m0[13u].z) - _473)) + _473;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _584 = _582.x;
    float _594 = dot(vec4(_584, _582.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _606 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _397.z) * 2.0) - ((((_584 - _594) * cbMtdParam._m0[23u].w) + _594) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4035 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _614 = (_607 * ((_565.x * cbMtdParam._m0[14u].x) - _544)) + _544;
    float _615 = (_607 * ((_565.y * cbMtdParam._m0[14u].y) - _545)) + _545;
    float _616 = (_607 * ((_565.z * cbMtdParam._m0[14u].z) - _546)) + _546;
    float _620 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _614;
    float _623 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _615;
    float _626 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _616;
    float _633 = ((_614 - _620) * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) + _620;
    float _634 = ((_615 - _623) * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) + _623;
    float _635 = ((_616 - _626) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _689 = _687.x;
    float _690 = _687.y;
    float _691 = _687.z;
    float _698 = ((_670.x - _689) * _464) + _689;
    float _699 = ((_670.y - _690) * _464) + _690;
    float _700 = ((_670.z - _691) * _464) + _691;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _723 = ((_712.x - _698) * _537) + _698;
    float _724 = ((_712.y - _699) * _537) + _699;
    float _725 = ((_712.z - _700) * _537) + _700;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _750 = ((_737.z - _725) * _607) + _725;
    float _753 = ((((_737.x - _723) * _607) + _723) * 2.0) + (-1.0);
    float _754 = ((((_737.y - _724) * _607) + _724) * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _4046 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _760 = sqrt(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))));
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _792 = (_753 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_647.x * 2.0) + (-1.0)))) + (((_780.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _793 = (_754 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_647.y * 2.0) + (-1.0)))) + (((_780.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _807 = _805.x;
    float _808 = 1.0 - _807;
    float _836 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_807 - _808) * cbMtdParam._m0[24u].w) + _808) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4057 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _845 = ((((cbMtdParam._m0[10u].x - _633) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _837) + _633;
    float _846 = ((((cbMtdParam._m0[10u].y - _634) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _837) + _634;
    float _847 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _635)) * _837) + _635;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _875 = _873.x;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _875) * _464) + _875;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _893) * _537) + _893;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _314) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _315) + cbTextureTilingScale._m0[10u].w)).x - _911) * _607) + _911;
    float _932 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _928) * cbMtdParam._m0[19u].z) + _928;
    float _934 = _932 - (_932 * _837);
    float _939 = (((_647.z - _750) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _750;
    float _943 = ((_780.z - _939) * cbMtdParam._m0[19u].w) + _939;
    float _947 = ((cbMtdParam._m0[23u].x - _943) * _837) + _943;
    vec4 _968 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _974 = (_968.x * 2.0) + (-1.0);
    float _975 = (_968.y * 2.0) + (-1.0);
    float _976 = dot(vec2(_974, _975), vec2(_974, _975));
    float _4068 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _992 = (_837 * (((cbMtdParam._m0[22u].z * _792) - _792) + _974)) + _792;
    float _993 = (_837 * (((cbMtdParam._m0[22u].z * _793) - _793) + _975)) + _793;
    float _994 = (_837 * (sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) - _760)) + _760;
    float _996 = cbMtdParam._m0[22u].x + _780.w;
    float _999 = fma(_994, _263 * NORMAL.x, fma(_993, _270 * TANGENT.x, (_256 * _248) * _992));
    float _1002 = fma(_994, _263 * NORMAL.y, fma(_993, _270 * TANGENT.y, (_256 * _249) * _992));
    float _1005 = fma(_994, _263 * NORMAL.z, fma(_993, _270 * TANGENT.z, (_256 * _250) * _992));
    float _1009 = inversesqrt(dot(vec3(_999, _1002, _1005), vec3(_999, _1002, _1005)));
    float _1010 = _1009 * _999;
    float _1011 = _1009 * _1002;
    float _1012 = _1009 * _1005;
    float _4079 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _1013 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4101 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4112 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4123 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4134 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _1018 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _1032 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1082 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1072);
    float _1083 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1072);
    float _1084 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1072);
    float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
    float _1089 = _1082 * _1088;
    float _1090 = _1083 * _1088;
    float _1091 = _1084 * _1088;
    vec4 _1096 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1098 = _1096.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1270 = sqrt(((_1082 * _1082) + (_1083 * _1083)) + (_1084 * _1084));
        float _1276 = (cbMatDynParam._m0[5u].x * _1270) + cbMatDynParam._m0[5u].y;
        float _4145 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1281 = (cbMatDynParam._m0[5u].z * _1270) + cbMatDynParam._m0[5u].w;
        float _4156 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) - _1277)) + _1277) < ((_1098 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1109 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1110 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1128 = fma(_1012, cbSceneParam._m0[5u].z, fma(_1011, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1010));
    float _1131 = fma(_1012, cbSceneParam._m0[6u].z, fma(_1011, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1010));
    float _1134 = fma(_1012, cbSceneParam._m0[7u].z, fma(_1011, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1010));
    uint _1147 = _295 + 9u;
    uint _1148 = _1147 + uint(cbMatDynParam._m0[0u].w);
    float _1154 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_1148].x;
    float _1155 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_1148].y;
    float _1156 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_1148].z;
    float _4167 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1157 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _1160 = 1.0 - _1018;
    float _1161 = _1157 * _1160;
    float _1162 = _1158 * _1160;
    float _1163 = _1159 * _1160;
    float _1168 = (_1157 + (-0.039999999105930328369140625)) * _1018;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1018;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1018;
    float _1171 = _1168 + 0.039999999105930328369140625;
    float _1173 = _1169 + 0.039999999105930328369140625;
    float _1174 = _1170 + 0.039999999105930328369140625;
    vec4 _1183 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1109, cbSceneParam._m0[86u].y * _1110));
    float _1187 = ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * TEXCOORD_5.w) * _1183.x;
    float _1188 = dot(vec3(_1010, _1011, _1012), vec3(_1089, _1090, _1091));
    float _1191 = _1188 * 2.0;
    float _1195 = (_1191 * _1010) - _1089;
    float _1196 = (_1191 * _1011) - _1090;
    float _1197 = (_1191 * _1012) - _1091;
    float _1201 = abs(dot(vec3(_1089, _1090, _1091), vec3(_1010, _1011, _1012)));
    float _4200 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1203 = sqrt(_1013);
    float _1216 = exp2((_1203 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1203 * 3.0));
    float _1222 = (1.0 - _1216) * ((_1203 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1223 = _1216 * _1203;
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1588;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1313 = fma(_1259, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251));
        float _1317 = fma(_1259, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251));
        float _1321 = fma(_1259, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251));
        float _1346 = _1251 + _1010;
        float _1347 = _1255 + _1011;
        float _1348 = _1259 + _1012;
        float _1358 = fma(_1348, cbModelParam._m0[26u].z, fma(_1347, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1346)) - _1313;
        float _1359 = fma(_1348, cbModelParam._m0[27u].z, fma(_1347, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1346)) - _1317;
        float _1360 = fma(_1348, cbModelParam._m0[28u].z, fma(_1347, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1346)) - _1321;
        float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
        float _1377 = ((_1364 * _1358) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1313 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1364 * _1359) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1317 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1364 * _1360) / cbModelParam._m0[34u].z) + ((((((_1321 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        float _1416 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1382.x + (-0.5));
        float _1418 = _1416 * (_1382.y + (-0.5));
        float _1419 = _1416 * (_1382.z + (-0.5));
        float _1426 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1389.x + (-0.5));
        float _1428 = _1426 * (_1389.y + (-0.5));
        float _1429 = _1426 * (_1389.z + (-0.5));
        float _1436 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1396.x + (-0.5));
        float _1438 = _1436 * (_1396.y + (-0.5));
        float _1439 = _1436 * (_1396.z + (-0.5));
        float _1446 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1403.x + (-0.5));
        float _1448 = _1446 * (_1403.y + (-0.5));
        float _1449 = _1446 * (_1403.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1470 = (dot(vec3(_1010, _1011, _1012), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1480 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4248 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1482 + 1.0))) + _1487) * _1450;
        float _1497 = _1418 * 0.5;
        float _1498 = _1428 * 0.5;
        float _1499 = _1438 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_1010, _1011, _1012), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4281 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1524 + 1.0))) + _1529) * _1451;
        float _1539 = _1419 * 0.5;
        float _1540 = _1429 * 0.5;
        float _1541 = _1439 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_1010, _1011, _1012), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4314 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1566 + 1.0))) + _1571) * _1452;
        _1588 = _1419;
        _1590 = _1418;
        _1591 = _1417;
        _1592 = _1429;
        _1593 = _1428;
        _1594 = _1427;
        _1595 = _1439;
        _1596 = _1438;
        _1597 = _1437;
        _1598 = _1452;
        _1599 = _1451;
        _1600 = _1450;
        _1601 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1602 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1603 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1589;
        _1590 = _1589;
        _1591 = _1589;
        _1592 = _1589;
        _1593 = _1589;
        _1594 = _1589;
        _1595 = _1589;
        _1596 = _1589;
        _1597 = _1589;
        _1598 = _1589;
        _1599 = _1589;
        _1600 = _1589;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1629 = fma(_1259, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251));
        float _1633 = fma(_1259, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251));
        float _1637 = fma(_1259, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251));
        float _1660 = _1251 + _1010;
        float _1661 = _1255 + _1011;
        float _1662 = _1259 + _1012;
        float _1672 = fma(_1662, cbModelParam._m0[30u].z, fma(_1661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1660)) - _1629;
        float _1673 = fma(_1662, cbModelParam._m0[31u].z, fma(_1661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1660)) - _1633;
        float _1674 = fma(_1662, cbModelParam._m0[32u].z, fma(_1661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1660)) - _1637;
        float _1678 = inversesqrt(dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674)));
        float _1691 = ((_1678 * _1672) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1629 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1692 = ((_1678 * _1673) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1633 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1693 = ((_1678 * _1674) / cbModelParam._m0[35u].z) + ((((((_1637 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        float _1728 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1695.x + (-0.5));
        float _1730 = _1728 * (_1695.y + (-0.5));
        float _1731 = _1728 * (_1695.z + (-0.5));
        float _1738 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1702.x + (-0.5));
        float _1740 = _1738 * (_1702.y + (-0.5));
        float _1741 = _1738 * (_1702.z + (-0.5));
        float _1748 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1709.x + (-0.5));
        float _1750 = _1748 * (_1709.y + (-0.5));
        float _1751 = _1748 * (_1709.z + (-0.5));
        float _1758 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1716.x + (-0.5));
        float _1760 = _1758 * (_1716.y + (-0.5));
        float _1761 = _1758 * (_1716.z + (-0.5));
        float _1762 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1765 = _1729 * 0.5;
        float _1766 = _1739 * 0.5;
        float _1767 = _1749 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_1010, _1011, _1012), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1762 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4377 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1792 + 1.0))) + _1797) * _1762;
        float _1807 = _1730 * 0.5;
        float _1808 = _1740 * 0.5;
        float _1809 = _1750 * 0.5;
        float _1810 = dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809));
        float _1815 = (_1810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1810);
        float _1823 = (dot(vec3(_1010, _1011, _1012), vec3(_1815 * _1807, _1815 * _1808, _1815 * _1809)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = sqrt(((_1808 * _1808) + (_1807 * _1807)) + (_1809 * _1809)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1834 = _1833 * 2.0;
        float _1838 = (1.0 - _1833) / (_1833 + 1.0);
        float _4410 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1848 = ((((1.0 - _1839) * (_1834 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1834 + 1.0))) + _1839) * _1763;
        float _1849 = _1731 * 0.5;
        float _1850 = _1741 * 0.5;
        float _1851 = _1751 * 0.5;
        float _1852 = dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851));
        float _1857 = (_1852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1852);
        float _1865 = (dot(vec3(_1010, _1011, _1012), vec3(_1857 * _1849, _1857 * _1850, _1857 * _1851)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1874 = sqrt(((_1850 * _1850) + (_1849 * _1849)) + (_1851 * _1851)) / (_1764 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1876 = _1875 * 2.0;
        float _1880 = (1.0 - _1875) / (_1875 + 1.0);
        float _4443 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1890 = ((((1.0 - _1881) * (_1876 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1876 + 1.0))) + _1881) * _1764;
        _1898 = _1731;
        _1899 = _1730;
        _1900 = _1729;
        _1901 = _1741;
        _1902 = _1740;
        _1903 = _1739;
        _1904 = _1751;
        _1905 = _1750;
        _1906 = _1749;
        _1907 = _1764;
        _1908 = _1763;
        _1909 = _1762;
        _1910 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
        _1911 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)));
        _1912 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)));
    }
    else
    {
        _1898 = _1589;
        _1899 = _1589;
        _1900 = _1589;
        _1901 = _1589;
        _1902 = _1589;
        _1903 = _1589;
        _1904 = _1589;
        _1905 = _1589;
        _1906 = _1589;
        _1907 = _1589;
        _1908 = _1589;
        _1909 = _1589;
        _1910 = 0.0;
        _1911 = 0.0;
        _1912 = 0.0;
    }
    float _1922 = (cbModelParam._m0[1u].x * (_1910 - _1601)) + _1601;
    float _1923 = (cbModelParam._m0[1u].x * (_1911 - _1602)) + _1602;
    float _1924 = (cbModelParam._m0[1u].x * (_1912 - _1603)) + _1603;
    float _1945 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1923, cbSceneParam._m0[89u].y, _1922 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1923, cbSceneParam._m0[90u].y, _1922 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1923, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1922));
    float _1966 = _1195 * 0.5;
    float _1967 = _1196 * 0.5;
    float _1968 = _1197 * 0.5;
    float _1969 = dot(vec4(_1966, _1967, _1968, 1.0), vec4(_1900, _1903, _1906, _1909));
    float _1972 = dot(vec4(_1966, _1967, _1968, 1.0), vec4(_1899, _1902, _1905, _1908));
    float _1975 = dot(vec4(_1966, _1967, _1968, 1.0), vec4(_1898, _1901, _1904, _1907));
    float _2009;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1982 = dot(vec4(_1966, _1967, _1968, 1.0), vec4(_1588, _1592, _1595, _1598));
        float _1986 = dot(vec4(_1966, _1967, _1968, 1.0), vec4(_1590, _1593, _1596, _1599));
        float _1990 = dot(vec4(_1966, _1967, _1968, 1.0), vec4(_1591, _1594, _1597, _1600));
        float _1997 = dot(vec4(cbModelParam._m0[39u]), vec4(_1966, _1967, _1968, 1.0));
        _2009 = dot(vec3(isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0)), isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1997) ? 0.0 : (isnan(0.0) ? _1997 : max(0.0, _1997))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2009 = 1.0;
    }
    float _2020;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2011 = dot(vec4(cbModelParam._m0[40u]), vec4(_1966, _1967, _1968, 1.0));
        _2020 = dot(vec3(isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2011) ? 0.0 : (isnan(0.0) ? _2011 : max(0.0, _2011))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2020 = 1.0;
    }
    float _2024 = (_2020 * cbModelParam._m0[1u].x) + (_2009 * (1.0 - cbModelParam._m0[1u].x));
    float _2034 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1013);
    float _2035 = isnan(_2034) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2034 : min(cbModelParam._m0[25u].z, _2034));
    float _2116;
    float _2118;
    float _2120;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2083 = fma(_1259, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251)) + cbModelParam._m0[13u].w;
        float _2087 = fma(_1259, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251)) + cbModelParam._m0[14u].w;
        float _2091 = fma(_1259, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251)) + cbModelParam._m0[15u].w;
        float _2094 = fma(_1197, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195));
        float _2097 = fma(_1197, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195));
        float _2100 = fma(_1197, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195));
        float _2128;
        if (_2094 > 0.0)
        {
            _2128 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2128 = frontier_phi_17_15_ladder;
        }
        float _2331;
        if (_2097 > 0.0)
        {
            _2331 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2331 = frontier_phi_26_22_ladder;
        }
        float _2585;
        if (_2100 > 0.0)
        {
            _2585 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2585 = frontier_phi_38_33_ladder;
        }
        float _2587 = isnan(_2331) ? _2128 : (isnan(_2128) ? _2331 : min(_2128, _2331));
        float _2588 = isnan(_2585) ? _2587 : (isnan(_2587) ? _2585 : min(_2587, _2585));
        float _2592 = (_2588 * _2094) + _2083;
        float _2593 = (_2588 * _2097) + _2087;
        float _2594 = (_2588 * _2100) + _2091;
        float _2595 = _2588 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2595;
        float _2599 = _2595 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 > _2599) || ((_2593 < _2597) || ((_2592 < _2597) || (_2592 > _2599))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2594, cbModelParam._m0[9u].z, fma(_2593, cbModelParam._m0[9u].y, _2592 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2594, cbModelParam._m0[10u].z, fma(_2593, cbModelParam._m0[10u].y, _2592 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2594, cbModelParam._m0[11u].z, fma(_2593, cbModelParam._m0[11u].y, _2592 * cbModelParam._m0[11u].x))), _2035);
            frontier_phi_16_38_ladder = _2722.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2722.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2722.x * cbModelParam._m0[1u].y;
        }
        _2116 = frontier_phi_16_38_ladder_2;
        _2118 = frontier_phi_16_38_ladder_1;
        _2120 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1195, _1196, _1197), _2035);
        _2116 = _2104.x * cbModelParam._m0[1u].y;
        _2118 = _2104.y * cbModelParam._m0[1u].y;
        _2120 = _2104.z * cbModelParam._m0[1u].y;
    }
    float _2124 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1013);
    float _2125 = isnan(_2124) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2124 : min(cbModelParam._m0[25u].w, _2124));
    float _2215;
    float _2217;
    float _2219;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2179 = fma(_1259, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251)) + cbModelParam._m0[21u].w;
        float _2183 = fma(_1259, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251)) + cbModelParam._m0[22u].w;
        float _2187 = fma(_1259, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251)) + cbModelParam._m0[23u].w;
        float _2190 = fma(_1197, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195));
        float _2193 = fma(_1197, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195));
        float _2196 = fma(_1197, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195));
        float _2336;
        if (_2190 > 0.0)
        {
            _2336 = abs((1.0 - _2179) / _2190);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2190 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2179 + 1.0) / _2190);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2336 = frontier_phi_28_24_ladder;
        }
        float _2612;
        if (_2193 > 0.0)
        {
            _2612 = abs((1.0 - _2183) / _2193);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2193 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2183 + 1.0) / _2193);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2612 = frontier_phi_40_35_ladder;
        }
        float _2825;
        if (_2196 > 0.0)
        {
            _2825 = abs((1.0 - _2187) / _2196);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2187 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2825 = frontier_phi_49_46_ladder;
        }
        float _2827 = isnan(_2612) ? _2336 : (isnan(_2336) ? _2612 : min(_2336, _2612));
        float _2828 = isnan(_2825) ? _2827 : (isnan(_2827) ? _2825 : min(_2827, _2825));
        float _2832 = (_2828 * _2190) + _2179;
        float _2833 = (_2828 * _2193) + _2183;
        float _2834 = (_2828 * _2196) + _2187;
        float _2835 = _2828 * 9.9999997473787516355514526367188e-05;
        float _2836 = (-1.0) - _2835;
        float _2838 = _2835 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2834 > _2838) || ((_2834 < _2836) || ((_2833 > _2838) || ((_2833 < _2836) || ((_2832 < _2836) || (_2832 > _2838))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2834, cbModelParam._m0[17u].z, fma(_2833, cbModelParam._m0[17u].y, _2832 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2834, cbModelParam._m0[18u].z, fma(_2833, cbModelParam._m0[18u].y, _2832 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2834, cbModelParam._m0[19u].z, fma(_2833, cbModelParam._m0[19u].y, _2832 * cbModelParam._m0[19u].x))), _2125);
            frontier_phi_25_49_ladder = _3033.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3033.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3033.x * cbModelParam._m0[1u].z;
        }
        _2215 = frontier_phi_25_49_ladder_2;
        _2217 = frontier_phi_25_49_ladder_1;
        _2219 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2199 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1195, _1196, _1197), _2125);
        _2215 = _2199.x * cbModelParam._m0[1u].z;
        _2217 = _2199.y * cbModelParam._m0[1u].z;
        _2219 = _2199.z * cbModelParam._m0[1u].z;
    }
    float _2232 = (((_1222 * _1171) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2215 - _2116)) + _2116);
    float _2234 = (((_1222 * _1173) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2236 = (((_1222 * _1174) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2219 - _2120)) + _2120);
    float _2239 = fma(_2236, cbSceneParam._m0[89u].z, fma(_2234, cbSceneParam._m0[89u].y, _2232 * cbSceneParam._m0[89u].x));
    float _2242 = fma(_2236, cbSceneParam._m0[90u].z, fma(_2234, cbSceneParam._m0[90u].y, _2232 * cbSceneParam._m0[90u].x));
    float _2245 = fma(_2236, cbSceneParam._m0[91u].z, fma(_2234, cbSceneParam._m0[91u].y, _2232 * cbSceneParam._m0[91u].x));
    uvec4 _2255 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2257 = _2255.x * 14u;
    uint _2258 = _2257 + 13u;
    float _2265 = _1187 + (-1.0);
    float _2270 = (cbLight._m0[_2258].x * _2265) + 1.0;
    float _2271 = (cbLight._m0[_2258].y * _2265) + 1.0;
    float _2272 = (cbLight._m0[_2258].z * _2265) + 1.0;
    float _2273 = (cbLight._m0[_2258].w * _2265) + 1.0;
    uint _2274 = _2257 + 5u;
    float _2280 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2284 = _2257 + 4u;
    float _2290 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2294 = _2257 | 1u;
    float _2305 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_1010, _1011, _1012));
    float _2308 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_1010, _1011, _1012));
    float _4579 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _4590 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2315 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2322 = ((cbLight._m0[_2274].x * _2280) * _2315) + ((cbLight._m0[_2284].x * _2290) * _2313);
    float _2323 = ((_2280 * cbLight._m0[_2274].y) * _2315) + ((_2290 * cbLight._m0[_2284].y) * _2313);
    float _2324 = ((_2280 * cbLight._m0[_2274].z) * _2315) + ((_2290 * cbLight._m0[_2284].z) * _2313);
    uvec4 _2328 = floatBitsToUint(cbLight._m0[_2257 + 12u]);
    bool _2330 = _2328.x == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2330)
    {
        _2341 = _2322;
        _2343 = _2323;
        _2345 = _2324;
    }
    else
    {
        uint _2349 = _2257 + 6u;
        float _2365 = (dot(vec3(cbLight._m0[_2257 + 2u].xyz), vec3(_1010, _1011, _1012)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4601 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2368 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2341 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2322;
        _2343 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2323;
        _2345 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2324;
    }
    bool _2348 = _2328.y == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2348)
    {
        _2386 = _2341;
        _2388 = _2343;
        _2390 = _2345;
    }
    else
    {
        uint _2556 = _2257 + 7u;
        float _2572 = (dot(vec3(cbLight._m0[_2257 + 3u].xyz), vec3(_1010, _1011, _1012)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4617 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2575 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2386 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2341;
        _2388 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2343;
        _2390 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2345;
    }
    uint _2393 = _2257 + 8u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _1013) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2257].x + _1089;
    float _2409 = cbLight._m0[_2257].y + _1090;
    float _2410 = cbLight._m0[_2257].z + _1091;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2257].xyz));
    float _4633 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _4644 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _2422 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2423 = dot(vec3(_1010, _1011, _1012), vec3(_2415, _2416, _2417));
    float _4655 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2415, _2416, _2417));
    float _4666 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2407 * _2407;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
    float _2444 = 0.959999978542327880859375 - _1168;
    float _2446 = 0.959999978542327880859375 - _1169;
    float _2447 = 0.959999978542327880859375 - _1170;
    float _2454 = 1.0 - _2407;
    float _2465 = (0.5 / (((_2422 * ((_2421 * _2454) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2454) + _2407) * _2421))) * _2421;
    float _4677 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    uint _2478 = _2257 + 9u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _1013) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2294].x + _1089;
    float _2492 = cbLight._m0[_2294].y + _1090;
    float _2493 = cbLight._m0[_2294].z + _1091;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2294].xyz));
    float _4688 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2505 = dot(vec3(_1010, _1011, _1012), vec3(_2498, _2499, _2500));
    float _4699 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2498, _2499, _2500));
    float _4710 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2490 * _2490;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0);
    float _2531 = 1.0 - _2490;
    float _2541 = (0.5 / (((_2422 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2531) + _2490) * _2504))) * _2504;
    float _4721 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    float _2553 = (((((_2524 * _2444) + _1171) * cbLight._m0[_2478].x) * _2543) * _2280) + (((((_2443 * _2444) + _1171) * cbLight._m0[_2393].x) * _2467) * _2290);
    float _2554 = (((((_2524 * _2446) + _1173) * cbLight._m0[_2478].y) * _2543) * _2280) + (((((_2443 * _2446) + _1173) * cbLight._m0[_2393].y) * _2467) * _2290);
    float _2555 = (((((_2524 * _2447) + _1174) * cbLight._m0[_2478].z) * _2543) * _2280) + (((((_2443 * _2447) + _1174) * cbLight._m0[_2393].z) * _2467) * _2290);
    float _2617;
    float _2619;
    float _2621;
    if (_2330)
    {
        _2617 = _2553;
        _2619 = _2554;
        _2621 = _2555;
    }
    else
    {
        uint _2623 = _2257 + 2u;
        uint _2627 = _2257 + 10u;
        float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _1013) * 0.949999988079071044921875);
        float _2642 = _2641 * _2641;
        float _2643 = cbLight._m0[_2623].x + _1089;
        float _2644 = cbLight._m0[_2623].y + _1090;
        float _2645 = cbLight._m0[_2623].z + _1091;
        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
        float _2650 = _2649 * _2643;
        float _2651 = _2649 * _2644;
        float _2652 = _2649 * _2645;
        float _2653 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2623].xyz));
        float _4732 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2657 = dot(vec3(_1010, _1011, _1012), vec3(_2650, _2651, _2652));
        float _4743 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2661 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2650, _2651, _2652));
        float _4754 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2665 = _2642 * _2642;
        float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
        float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
        float _2683 = 1.0 - _2642;
        float _2693 = (0.5 / (((_2422 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2683) + _2642) * _2656))) * _2656;
        float _4765 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2617 = (((((_2676 * _2444) + _1171) * cbLight._m0[_2627].x) * _2695) * _2696) + _2553;
        _2619 = (((((_2676 * _2446) + _1173) * cbLight._m0[_2627].y) * _2695) * _2696) + _2554;
        _2621 = (((((_2676 * _2447) + _1174) * cbLight._m0[_2627].z) * _2695) * _2696) + _2555;
    }
    float _2731;
    float _2733;
    float _2735;
    if (_2348)
    {
        _2731 = _2617;
        _2733 = _2619;
        _2735 = _2621;
    }
    else
    {
        uint _2742 = _2257 + 3u;
        uint _2746 = _2257 + 11u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _1013) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _1089;
        float _2763 = cbLight._m0[_2742].y + _1090;
        float _2764 = cbLight._m0[_2742].z + _1091;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2742].xyz));
        float _4781 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2776 = dot(vec3(_1010, _1011, _1012), vec3(_2769, _2770, _2771));
        float _4792 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4803 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
        float _2802 = 1.0 - _2761;
        float _2812 = (0.5 / (((_2422 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2802) + _2761) * _2775))) * _2775;
        float _4814 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2814 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2815 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2731 = (((((_2795 * _2444) + _1171) * cbLight._m0[_2746].x) * _2814) * _2815) + _2617;
        _2733 = (((((_2795 * _2446) + _1173) * cbLight._m0[_2746].y) * _2814) * _2815) + _2619;
        _2735 = (((((_2795 * _2447) + _1174) * cbLight._m0[_2746].z) * _2814) * _2815) + _2621;
    }
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_2255.y == 0u)
    {
        float _2890 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2891 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2890;
        float _2892 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2890;
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2890;
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.x;
        uint _2917 = uint((float(_2905.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1110) / _2906))) + floor(float(uint(cbSceneParam._m0[85u].x * _1109) / _2906)));
        float _2927 = (log2(_2893 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2928 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        uint _2931 = uint(isnan(14.0) ? _2928 : (isnan(_2928) ? 14.0 : min(_2928, 14.0)));
        uvec4 _2936 = texelFetch(g_lightClusterGridBuffer, int(((_2931 << 2u) + (_2917 << 6u)) >> 2u));
        uint _2937 = _2936.x;
        uint _2938 = _2905.z;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((((1u << ((_2938 >> 4u) & 15u)) + 4294967295u) & _2937) == 0u) || ((_2938 & 240u) == 0u))
        {
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
        }
        else
        {
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3207)
                {
                    frontier_phi_66_pred = _3191;
                    frontier_phi_66_pred_1 = _3196;
                    frontier_phi_66_pred_2 = _3195;
                    frontier_phi_66_pred_3 = _3194;
                    frontier_phi_66_pred_4 = _3193;
                    frontier_phi_66_pred_5 = _3192;
                }
                else
                {
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    uint _3342;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3206;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3346 = uint(findLSB(_3342)) + (_3197 << 5u);
                        uint _3343 = (_3342 + 4294967295u) & _3342;
                        uint _3348 = _3346 * 48u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3368 = (_3346 * 48u) + 4u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3387 = (_3346 * 48u) + 8u;
                        vec3 _3398 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x));
                        float _3402 = _3362.x - _2891;
                        float _3403 = _3362.y - _2892;
                        float _3404 = _3362.z - _2893;
                        float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                        float _3408 = inversesqrt(_3405);
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3412 = dot(vec3(_1128, _1131, _1134), vec3(_3409, _3410, _3411));
                        float _3417 = 1.0 - (_3405 * _3362.w);
                        float _4840 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3419 = sqrt(_3405) * _3381.w;
                        float _3422 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3412) + _3423;
                        float _3429 = _3419 * _3419;
                        float _3433 = ((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3418) / ((_3429 * 0.699999988079071044921875) + 1.0);
                        float _3437 = (-0.0) - _2891;
                        float _3438 = (-0.0) - _2892;
                        float _3439 = (-0.0) - _2893;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3454 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                        float _3455 = 1.0 - _1203;
                        float _3462 = sqrt(1.0 - ((1.0 - (_3455 * _3455)) * (1.0 - (_3454 * _3454))));
                        float _3463 = _3462 * _3462;
                        float _3464 = _3463 * _3463;
                        float _3465 = _3444 + _3409;
                        float _3466 = _3445 + _3410;
                        float _3467 = _3446 + _3411;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3475 = dot(vec3(_1128, _1131, _1134), vec3(_3444, _3445, _3446));
                        float _4856 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3479 = dot(vec3(_1128, _1131, _1134), vec3(_3471 * _3465, _3471 * _3466, _3471 * _3467));
                        float _4867 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3482 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3486 = ((_3482 * _3482) * (_3464 + (-1.0))) + 1.0;
                        float _3487 = _3422 * _3463;
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3412) + _3488;
                        float _4878 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3492 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3493 = 1.0 - _3463;
                        float _3503 = (0.5 / (((_3492 * ((_3478 * _3493) + _3463)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3463) * _3478))) * _3492;
                        float _4889 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3514 = (((_3464 * 3.1415927410125732421875) * (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) / ((_3486 * _3486) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125))) * _3418;
                        _3266 = (_3433 * _3381.x) + _3339;
                        _3267 = (_3433 * _3381.y) + _3340;
                        _3268 = (_3433 * _3381.z) + _3341;
                        _3263 = (_3514 * _3398.x) + _3336;
                        _3264 = (_3514 * _3398.y) + _3337;
                        _3265 = (_3514 * _3398.z) + _3338;
                        if (_3343 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3343;
                        }
                    }
                    frontier_phi_66_pred = _3263;
                    frontier_phi_66_pred_1 = _3268;
                    frontier_phi_66_pred_2 = _3267;
                    frontier_phi_66_pred_3 = _3266;
                    frontier_phi_66_pred_4 = _3265;
                    frontier_phi_66_pred_5 = _3264;
                }
                _3039 = frontier_phi_66_pred;
                _3049 = frontier_phi_66_pred_1;
                _3047 = frontier_phi_66_pred_2;
                _3045 = frontier_phi_66_pred_3;
                _3043 = frontier_phi_66_pred_4;
                _3041 = frontier_phi_66_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3039;
                    _3192 = _3041;
                    _3193 = _3043;
                    _3194 = _3045;
                    _3195 = _3047;
                    _3196 = _3049;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
        }
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.z;
        uint _3055 = (_3053 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3055) & _2937) == 0u)
        {
            _3159 = _3038;
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
            float _3185 = _3184 * _2891;
            float _3186 = _3184 * _2892;
            float _3187 = _3184 * _2893;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3055 < ((_3053 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3319 = _3038;
                float _3320 = _3040;
                float _3321 = _3042;
                float _3322 = _3044;
                float _3323 = _3046;
                float _3324 = _3048;
                uint _3325 = _3055;
                uint _3334;
                bool _3335;
                for (;;)
                {
                    _3334 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3325 << 2u)) >> 2u)).x;
                    _3335 = _3334 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3335)
                    {
                        frontier_phi_77_pred = _3324;
                        frontier_phi_77_pred_1 = _3323;
                        frontier_phi_77_pred_2 = _3322;
                        frontier_phi_77_pred_3 = _3321;
                        frontier_phi_77_pred_4 = _3320;
                        frontier_phi_77_pred_5 = _3319;
                    }
                    else
                    {
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3541 = _3319;
                        float _3542 = _3320;
                        float _3543 = _3321;
                        float _3544 = _3322;
                        float _3545 = _3323;
                        float _3546 = _3324;
                        uint _3547 = _3334;
                        uint _3548;
                        vec4 _3573;
                        float _3574;
                        vec4 _3589;
                        vec3 _3601;
                        vec4 _3616;
                        vec4 _3631;
                        float _3677;
                        bool _3678;
                        for (;;)
                        {
                            uint _3558 = ((_3325 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3547));
                            _3548 = (_3547 + 4294967295u) & _3547;
                            uint _3560 = _3558 * 40u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3574 = _3573.w;
                            uint _3576 = (_3558 * 40u) + 4u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3558 * 40u) + 8u;
                            _3601 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x));
                            uint _3603 = (_3558 * 40u) + 16u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3558 * 40u) + 20u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3633 = (_3558 * 40u) + 24u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3652 = (_3558 * 40u) + 28u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3677 = fma(_2893, _3665.z, fma(_2892, _3665.y, _3665.x * _2891)) + _3665.w;
                            _3678 = !((fma(_2893, _3646.z, fma(_2892, _3646.y, _3646.x * _2891)) + _3646.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3678)
                            {
                                float _3705 = _3573.x - _2891;
                                float _3706 = _3573.y - _2892;
                                float _3707 = _3573.z - _2893;
                                float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                                float _3711 = inversesqrt(_3708);
                                float _3712 = _3711 * _3705;
                                float _3713 = _3711 * _3706;
                                float _3714 = _3711 * _3707;
                                float _3718 = 1.0 - (_3708 / (_3574 * _3574));
                                float _4900 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3723 = sqrt(_3708) * _3589.w;
                                float _3725 = 1.39999997615814208984375 / (_3723 + 1.39999997615814208984375);
                                float _3726 = _3725 * _3725;
                                float _3729 = ((1.0 - _3726) * dot(vec3(_3712, _3713, _3714), vec3(_1128, _1131, _1134))) + _3726;
                                float _3732 = _3723 * _3723;
                                float _3736 = (fma(_2893, _3616.z, fma(_2892, _3616.y, _3616.x * _2891)) + _3616.w) / _3677;
                                float _3737 = (fma(_2893, _3631.z, fma(_2892, _3631.y, _3631.x * _2891)) + _3631.w) / _3677;
                                float _3741 = 1.0 - dot(vec2(_3736, _3737), vec2(_3736, _3737));
                                float _4916 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3743 = _3742 * (((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3719) / ((_3732 * 0.699999988079071044921875) + 1.0));
                                float _3755 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                                float _3756 = 1.0 - _1203;
                                float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                                float _3764 = _3763 * _3763;
                                float _3765 = _3764 * _3764;
                                float _3766 = _3712 - _3185;
                                float _3767 = _3713 - _3186;
                                float _3768 = _3714 - _3187;
                                float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                                float _3776 = dot(vec3(_1128, _1131, _1134), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4927 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3780 = dot(vec3(_1128, _1131, _1134), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                                float _4938 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                                float _3788 = _3725 * _3764;
                                float _3789 = _3788 * _3788;
                                float _3795 = ((1.0 - _3789) * dot(vec3(_1128, _1131, _1134), vec3(_3712, _3713, _3714))) + _3789;
                                float _4949 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3797 = 1.0 - _3764;
                                float _3807 = (0.5 / (((_3796 * ((_3779 * _3797) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3764) * _3779))) * _3796;
                                float _4960 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3817 = (_3742 * _3719) * (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3787 * _3787) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3743 * _3589.y;
                                frontier_phi_83_pred_1 = _3743 * _3589.x;
                                frontier_phi_83_pred_2 = _3817 * _3601.z;
                                frontier_phi_83_pred_3 = _3817 * _3601.y;
                                frontier_phi_83_pred_4 = _3817 * _3601.x;
                                frontier_phi_83_pred_5 = _3743 * _3589.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_83_pred;
                            _3824 = frontier_phi_83_pred_1;
                            _3823 = frontier_phi_83_pred_2;
                            _3822 = frontier_phi_83_pred_3;
                            _3821 = frontier_phi_83_pred_4;
                            _3826 = frontier_phi_83_pred_5;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            if (_3548 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3548;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3533;
                        frontier_phi_77_pred_1 = _3532;
                        frontier_phi_77_pred_2 = _3531;
                        frontier_phi_77_pred_3 = _3530;
                        frontier_phi_77_pred_4 = _3529;
                        frontier_phi_77_pred_5 = _3528;
                    }
                    _3170 = frontier_phi_77_pred;
                    _3168 = frontier_phi_77_pred_1;
                    _3166 = frontier_phi_77_pred_2;
                    _3164 = frontier_phi_77_pred_3;
                    _3162 = frontier_phi_77_pred_4;
                    _3160 = frontier_phi_77_pred_5;
                    uint _3326 = _3325 + 1u;
                    if (_3326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3319 = _3160;
                        _3320 = _3162;
                        _3321 = _3164;
                        _3322 = _3166;
                        _3323 = _3168;
                        _3324 = _3170;
                        _3325 = _3326;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3164;
                frontier_phi_58_59_ladder_1 = _3170;
                frontier_phi_58_59_ladder_2 = _3168;
                frontier_phi_58_59_ladder_3 = _3166;
                frontier_phi_58_59_ladder_4 = _3162;
                frontier_phi_58_59_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_58_59_ladder = _3042;
                frontier_phi_58_59_ladder_1 = _3048;
                frontier_phi_58_59_ladder_2 = _3046;
                frontier_phi_58_59_ladder_3 = _3044;
                frontier_phi_58_59_ladder_4 = _3040;
                frontier_phi_58_59_ladder_5 = _3038;
            }
            _3159 = frontier_phi_58_59_ladder_5;
            _3161 = frontier_phi_58_59_ladder_4;
            _3163 = frontier_phi_58_59_ladder;
            _3165 = frontier_phi_58_59_ladder_3;
            _3167 = frontier_phi_58_59_ladder_2;
            _3169 = frontier_phi_58_59_ladder_1;
        }
        float _3174 = isnan(1.0) ? _1187 : (isnan(_1187) ? 1.0 : min(_1187, 1.0));
        _2950 = (_3174 * _3165) + _2386;
        _2952 = (_3174 * _3167) + _2388;
        _2954 = (_3174 * _3169) + _2390;
        _2956 = ((_3159 * _1171) * _3174) + _2731;
        _2958 = ((_3161 * _1173) * _3174) + _2733;
        _2960 = ((_3163 * _1174) * _3174) + _2735;
    }
    else
    {
        _2950 = _2386;
        _2952 = _2388;
        _2954 = _2390;
        _2956 = _2731;
        _2958 = _2733;
        _2960 = _2735;
    }
    float _4976 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _4987 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _4998 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _2977 = ((isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2950 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1187))) + ((_2956 + ((isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))) * _2024)) * cbPerFrame._m0[3u].x);
    float _2978 = ((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2952 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1187))) + ((_2958 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _2024)) * cbPerFrame._m0[3u].x);
    float _2979 = ((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2954 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1187))) + ((_2960 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2024)) * cbPerFrame._m0[3u].x);
    uint _2980 = _295 + 6u;
    float _2988 = _1109 / cbSceneParam._m0[86u].x;
    float _2989 = _1110 / cbSceneParam._m0[86u].y;
    vec4 _3003 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, (log2((isnan(cbSceneParam._m0[77u].w) ? _1032 : (isnan(_1032) ? cbSceneParam._m0[77u].w : min(_1032, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3005 = _3003.x;
    float _3006 = _3003.y;
    float _3007 = _3003.z;
    float _3008 = _3003.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_1032 > cbSceneParam._m0[78u].w)
    {
        float _3063 = isnan(_1032) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1032 : min(cbSceneParam._m0[80u].w, _1032));
        float _3064 = _3063 / _1032;
        float _3075 = _3064 * _1082;
        float _3076 = _1083 * _3064;
        float _3077 = (-0.0) - _3076;
        float _3079 = _3064 * _1084;
        float _3081 = (cbSceneParam._m0[77u].w * _3077) / _3063;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3076;
        float _3089 = sqrt(((_3075 * _3075) + (_3076 * _3076)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3063)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3077 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3222 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3276 = ((abs(_3089 / _3077) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3099 * _3231) - exp2(_3099 * _3232)) * _3220))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3008);
        _3101 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3005;
        _3103 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3006;
        _3105 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3007;
        _3107 = _3287 * _3008;
    }
    else
    {
        _3101 = _3005;
        _3103 = _3006;
        _3105 = _3007;
        _3107 = _3008;
    }
    bool _3314;
    vec4 _3117;
    vec4 _3139;
    float _3141;
    float _3145;
    float _3146;
    float _3147;
    float _3148;
    bool _3158;
    for (;;)
    {
        _3117 = cbMatDynParam._m0[0u];
        float _3119 = roundEven(_3117.y);
        bool _3120 = _3119 == 3.0;
        float _3121 = log2(_3107);
        float _3128 = exp2(_3121 * cbSceneParam._m0[78u].x) * _2977;
        float _3129 = exp2(_3121 * cbSceneParam._m0[78u].y) * _2978;
        float _3130 = exp2(_3121 * cbSceneParam._m0[78u].z) * _2979;
        float _3137 = _1098 + (-0.5);
        _3139 = cbMtdParam._m0[1u];
        _3141 = _3139.y * _3137;
        float _3144 = (_3119 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3145 = _3144 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3101)));
        _3146 = _3144 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3103)));
        _3147 = _3144 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3105)));
        _3148 = _3137 * 0.999000012874603271484375;
        _3158 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3158)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3148) < 0.5)
            {
                _3314 = true;
                break;
            }
        }
        uint _3255 = _1147 + uint(_3117.w);
        if ((cbInstanceData._m0[_3255].w < 1.0) && ((cbInstanceData._m0[_3255].w + _3148) < 0.5))
        {
            _3314 = true;
            break;
        }
        if ((_3141 + 1.0) < _3139.x)
        {
            _3314 = true;
            break;
        }
        _3314 = false;
        break;
    }
    float _3519;
    if (_3314)
    {
        discard_state = true;
        _3519 = 0.0;
    }
    else
    {
        _3519 = cbInstanceData._m0[_2980].w;
    }
    SV_Target.x = _3145;
    SV_Target.y = _3146;
    SV_Target.z = _3147;
    SV_Target.w = _3519;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2980].w;
    discard_exit();
}


