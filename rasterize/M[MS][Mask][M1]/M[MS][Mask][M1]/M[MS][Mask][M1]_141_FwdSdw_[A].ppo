#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1519;
float _4179;
float _4180;
float _4181;
float _4182;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _348.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4191 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _426 = (_419 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _427 = (_419 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _428 = (_419 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _348.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4202 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _561 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _348.z) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[23u].w) + _549) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4213 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _569 = (_562 * ((_520.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _570 = (_562 * ((_520.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _571 = (_562 * ((_520.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    float _637 = ((_609.x - _628) * _419) + _628;
    float _638 = ((_609.y - _629) * _419) + _629;
    float _639 = ((_609.z - _630) * _419) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _662 = ((_651.x - _637) * _492) + _637;
    float _663 = ((_651.y - _638) * _492) + _638;
    float _664 = ((_651.z - _639) * _492) + _639;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _689 = ((_676.z - _664) * _562) + _664;
    float _692 = ((((_676.x - _662) * _562) + _662) * 2.0) + (-1.0);
    float _694 = ((((_676.y - _663) * _562) + _663) * 2.0) + (-1.0);
    float _695 = dot(vec2(_692, _694), vec2(_692, _694));
    float _4224 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _726 = (((_714.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    float _727 = (((_714.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _730 = fma(_700, _248, fma(_727, _255, _726 * _241));
    float _733 = fma(_700, _249, fma(_727, _256, _726 * _242));
    float _736 = fma(_700, _250, fma(_727, _257, _726 * _243));
    float _740 = inversesqrt(dot(vec3(_730, _733, _736), vec3(_730, _733, _736)));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _769 = _767.x;
    float _770 = 1.0 - _769;
    float _778 = (cbMtdParam._m0[19u].x + dot(vec4(_740 * _730, _740 * _733, _740 * _736, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_769 - _770) * cbMtdParam._m0[24u].z) + _770) * cbMtdParam._m0[21u].z);
    float _4235 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _786 = (_779 * ((_589.x * cbMtdParam._m0[18u].x) - _569)) + _569;
    float _787 = (_779 * ((_589.y * cbMtdParam._m0[18u].y) - _570)) + _570;
    float _788 = (_779 * ((_589.z * cbMtdParam._m0[18u].z) - _571)) + _571;
    vec4 _814 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _816 = _814.x;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _816) * _419) + _816;
    float _851 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _834) * _492) + _834;
    float _869 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _851) * _562) + _851;
    float _873 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _869) * cbMtdParam._m0[19u].z) + _869;
    float _875 = _873 - (_873 * _779);
    float _879 = (cbMtdParam._m0[19u].w * (_714.z - _689)) + _689;
    vec4 _892 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _899 = (_892.x * 2.0) + (-1.0);
    float _900 = (_892.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _4246 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _909 = ((_892.z - _879) * _779) + _879;
    float _919 = ((sqrt(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) - _700) * _779) + _700;
    float _922 = (((_899 - _726) * _779) + _726) + (cbMtdParam._m0[21u].x * _726);
    float _923 = (((_900 - _727) * _779) + _727) + (cbMtdParam._m0[21u].x * _727);
    float _925 = cbMtdParam._m0[22u].x + _714.w;
    float _928 = fma(_919, _248, fma(_923, _255, _922 * _241));
    float _931 = fma(_919, _249, fma(_923, _256, _922 * _242));
    float _934 = fma(_919, _250, fma(_923, _257, _922 * _243));
    float _938 = inversesqrt(dot(vec3(_928, _931, _934), vec3(_928, _931, _934)));
    float _939 = _938 * _928;
    float _940 = _938 * _931;
    float _941 = _938 * _934;
    float _4257 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _942 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4279 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4290 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4301 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4312 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _947 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _961 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    vec4 _1025 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1027 = _1025.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1199 = sqrt(((_1011 * _1011) + (_1012 * _1012)) + (_1013 * _1013));
        float _1205 = (cbMatDynParam._m0[5u].x * _1199) + cbMatDynParam._m0[5u].y;
        float _4323 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1210 = (cbMatDynParam._m0[5u].z * _1199) + cbMatDynParam._m0[5u].w;
        float _4334 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) - _1206)) + _1206) < ((_1027 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1038 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1039 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1057 = fma(_941, cbSceneParam._m0[5u].z, fma(_940, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _939));
    float _1060 = fma(_941, cbSceneParam._m0[6u].z, fma(_940, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _939));
    float _1063 = fma(_941, cbSceneParam._m0[7u].z, fma(_940, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _939));
    uint _1076 = _260 + 9u;
    uint _1077 = _1076 + uint(cbMatDynParam._m0[0u].w);
    float _1083 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * cbInstanceData._m0[_1077].x;
    float _1084 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * cbInstanceData._m0[_1077].y;
    float _1085 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * cbInstanceData._m0[_1077].z;
    float _4345 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _4356 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _1089 = 1.0 - _947;
    float _1090 = _1086 * _1089;
    float _1091 = _1087 * _1089;
    float _1092 = _1088 * _1089;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _947;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _947;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _947;
    float _1100 = _1097 + 0.039999999105930328369140625;
    float _1102 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1038, cbSceneParam._m0[86u].y * _1039));
    float _1116 = ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_939, _940, _941), vec3(_1018, _1019, _1020));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _939) - _1018;
    float _1125 = (_1120 * _940) - _1019;
    float _1126 = (_1120 * _941) - _1020;
    float _1130 = abs(dot(vec3(_1018, _1019, _1020), vec3(_939, _940, _941)));
    float _4378 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_942);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1151 = (1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1152 = _1145 * _1132;
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1518;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1243 = fma(_1188, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180));
        float _1247 = fma(_1188, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180));
        float _1251 = fma(_1188, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180));
        float _1276 = _1180 + _939;
        float _1277 = _1184 + _940;
        float _1278 = _1188 + _941;
        float _1288 = fma(_1278, cbModelParam._m0[26u].z, fma(_1277, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1276)) - _1243;
        float _1289 = fma(_1278, cbModelParam._m0[27u].z, fma(_1277, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1276)) - _1247;
        float _1290 = fma(_1278, cbModelParam._m0[28u].z, fma(_1277, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1276)) - _1251;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1307 = ((_1294 * _1288) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1243 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1289) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1247 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1294 * _1290) / cbModelParam._m0[34u].z) + ((((((_1251 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1346 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1312.x + (-0.5));
        float _1348 = _1346 * (_1312.y + (-0.5));
        float _1349 = _1346 * (_1312.z + (-0.5));
        float _1356 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1319.x + (-0.5));
        float _1358 = _1356 * (_1319.y + (-0.5));
        float _1359 = _1356 * (_1319.z + (-0.5));
        float _1366 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1326.x + (-0.5));
        float _1368 = _1366 * (_1326.y + (-0.5));
        float _1369 = _1366 * (_1326.z + (-0.5));
        float _1376 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1333.x + (-0.5));
        float _1378 = _1376 * (_1333.y + (-0.5));
        float _1379 = _1376 * (_1333.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1400 = (dot(vec3(_939, _940, _941), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1410 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4426 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1412 + 1.0))) + _1417) * _1380;
        float _1427 = _1348 * 0.5;
        float _1428 = _1358 * 0.5;
        float _1429 = _1368 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_939, _940, _941), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4459 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1454 + 1.0))) + _1459) * _1381;
        float _1469 = _1349 * 0.5;
        float _1470 = _1359 * 0.5;
        float _1471 = _1369 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_939, _940, _941), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4492 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1496 + 1.0))) + _1501) * _1382;
        _1518 = _1349;
        _1520 = _1348;
        _1521 = _1347;
        _1522 = _1359;
        _1523 = _1358;
        _1524 = _1357;
        _1525 = _1369;
        _1526 = _1368;
        _1527 = _1367;
        _1528 = _1382;
        _1529 = _1381;
        _1530 = _1380;
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1519;
        _1520 = _1519;
        _1521 = _1519;
        _1522 = _1519;
        _1523 = _1519;
        _1524 = _1519;
        _1525 = _1519;
        _1526 = _1519;
        _1527 = _1519;
        _1528 = _1519;
        _1529 = _1519;
        _1530 = _1519;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1559 = fma(_1188, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180));
        float _1563 = fma(_1188, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180));
        float _1567 = fma(_1188, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180));
        float _1590 = _1180 + _939;
        float _1591 = _1184 + _940;
        float _1592 = _1188 + _941;
        float _1602 = fma(_1592, cbModelParam._m0[30u].z, fma(_1591, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1590)) - _1559;
        float _1603 = fma(_1592, cbModelParam._m0[31u].z, fma(_1591, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1590)) - _1563;
        float _1604 = fma(_1592, cbModelParam._m0[32u].z, fma(_1591, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1590)) - _1567;
        float _1608 = inversesqrt(dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604)));
        float _1621 = ((_1608 * _1602) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1559 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1622 = ((_1608 * _1603) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1563 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1623 = ((_1608 * _1604) / cbModelParam._m0[35u].z) + ((((((_1567 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        float _1658 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1625.x + (-0.5));
        float _1660 = _1658 * (_1625.y + (-0.5));
        float _1661 = _1658 * (_1625.z + (-0.5));
        float _1668 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1632.x + (-0.5));
        float _1670 = _1668 * (_1632.y + (-0.5));
        float _1671 = _1668 * (_1632.z + (-0.5));
        float _1678 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1639.x + (-0.5));
        float _1680 = _1678 * (_1639.y + (-0.5));
        float _1681 = _1678 * (_1639.z + (-0.5));
        float _1688 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1646.x + (-0.5));
        float _1690 = _1688 * (_1646.y + (-0.5));
        float _1691 = _1688 * (_1646.z + (-0.5));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = _1659 * 0.5;
        float _1696 = _1669 * 0.5;
        float _1697 = _1679 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_939, _940, _941), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4533 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4544 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4555 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_1722 + 1.0))) + _1727) * _1692;
        float _1737 = _1660 * 0.5;
        float _1738 = _1670 * 0.5;
        float _1739 = _1680 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_939, _940, _941), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4566 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1693 + 9.9999997473787516355514526367188e-06);
        float _4577 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4588 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_1764 + 1.0))) + _1769) * _1693;
        float _1779 = _1661 * 0.5;
        float _1780 = _1671 * 0.5;
        float _1781 = _1681 * 0.5;
        float _1782 = dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781));
        float _1787 = (_1782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1782);
        float _1795 = (dot(vec3(_939, _940, _941), vec3(_1787 * _1779, _1787 * _1780, _1787 * _1781)) + 1.0) * 0.5;
        float _4599 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1804 = sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4610 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1806 = _1805 * 2.0;
        float _1810 = (1.0 - _1805) / (_1805 + 1.0);
        float _4621 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1820 = ((((1.0 - _1811) * (_1806 + 2.0)) * exp2(log2(isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_1806 + 1.0))) + _1811) * _1694;
        _1828 = _1661;
        _1829 = _1660;
        _1830 = _1659;
        _1831 = _1671;
        _1832 = _1670;
        _1833 = _1669;
        _1834 = _1681;
        _1835 = _1680;
        _1836 = _1679;
        _1837 = _1694;
        _1838 = _1693;
        _1839 = _1692;
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1841 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)));
    }
    else
    {
        _1828 = _1519;
        _1829 = _1519;
        _1830 = _1519;
        _1831 = _1519;
        _1832 = _1519;
        _1833 = _1519;
        _1834 = _1519;
        _1835 = _1519;
        _1836 = _1519;
        _1837 = _1519;
        _1838 = _1519;
        _1839 = _1519;
        _1840 = 0.0;
        _1841 = 0.0;
        _1842 = 0.0;
    }
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1531)) + _1531;
    float _1853 = (cbModelParam._m0[1u].x * (_1841 - _1532)) + _1532;
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1533)) + _1533;
    float _1875 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1852 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1852 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1852));
    float _1896 = _1124 * 0.5;
    float _1897 = _1125 * 0.5;
    float _1898 = _1126 * 0.5;
    float _1899 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1902 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1829, _1832, _1835, _1838));
    float _1905 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1939;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1912 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1518, _1522, _1525, _1528));
        float _1916 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1520, _1523, _1526, _1529));
        float _1920 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1521, _1524, _1527, _1530));
        float _1927 = dot(vec4(cbModelParam._m0[39u]), vec4(_1896, _1897, _1898, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1950;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1941 = dot(vec4(cbModelParam._m0[40u]), vec4(_1896, _1897, _1898, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1954 = (_1950 * cbModelParam._m0[1u].x) + (_1939 * (1.0 - cbModelParam._m0[1u].x));
    float _1964 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _942);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1964 : min(cbModelParam._m0[25u].z, _1964));
    float _2045;
    float _2047;
    float _2049;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2012 = fma(_1188, cbModelParam._m0[13u].z, fma(_1184, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1180)) + cbModelParam._m0[13u].w;
        float _2016 = fma(_1188, cbModelParam._m0[14u].z, fma(_1184, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1180)) + cbModelParam._m0[14u].w;
        float _2020 = fma(_1188, cbModelParam._m0[15u].z, fma(_1184, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1180)) + cbModelParam._m0[15u].w;
        float _2023 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _2026 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _2029 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2057;
        if (_2023 > 0.0)
        {
            _2057 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2057 = frontier_phi_17_15_ladder;
        }
        float _2228;
        if (_2026 > 0.0)
        {
            _2228 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2228 = frontier_phi_26_22_ladder;
        }
        float _2523;
        if (_2029 > 0.0)
        {
            _2523 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2523 = frontier_phi_38_33_ladder;
        }
        float _2525 = isnan(_2228) ? _2057 : (isnan(_2057) ? _2228 : min(_2057, _2228));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _2023) + _2012;
        float _2531 = (_2526 * _2026) + _2016;
        float _2532 = (_2526 * _2029) + _2020;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2533;
        float _2537 = _2533 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 > _2537) || ((_2531 < _2535) || ((_2530 < _2535) || (_2530 > _2537))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2532, cbModelParam._m0[9u].z, fma(_2531, cbModelParam._m0[9u].y, _2530 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2532, cbModelParam._m0[10u].z, fma(_2531, cbModelParam._m0[10u].y, _2530 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2532, cbModelParam._m0[11u].z, fma(_2531, cbModelParam._m0[11u].y, _2530 * cbModelParam._m0[11u].x))), _1965);
            frontier_phi_16_38_ladder = _2677.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2677.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2677.x * cbModelParam._m0[1u].y;
        }
        _2045 = frontier_phi_16_38_ladder_2;
        _2047 = frontier_phi_16_38_ladder_1;
        _2049 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1965);
        _2045 = _2033.x * cbModelParam._m0[1u].y;
        _2047 = _2033.y * cbModelParam._m0[1u].y;
        _2049 = _2033.z * cbModelParam._m0[1u].y;
    }
    float _2053 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _942);
    float _2054 = isnan(_2053) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2053 : min(cbModelParam._m0[25u].w, _2053));
    float _2143;
    float _2145;
    float _2147;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2107 = fma(_1188, cbModelParam._m0[21u].z, fma(_1184, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1180)) + cbModelParam._m0[21u].w;
        float _2111 = fma(_1188, cbModelParam._m0[22u].z, fma(_1184, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1180)) + cbModelParam._m0[22u].w;
        float _2115 = fma(_1188, cbModelParam._m0[23u].z, fma(_1184, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1180)) + cbModelParam._m0[23u].w;
        float _2118 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2121 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2124 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2233;
        if (_2118 > 0.0)
        {
            _2233 = abs((1.0 - _2107) / _2118);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2107 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2233 = frontier_phi_28_24_ladder;
        }
        float _2550;
        if (_2121 > 0.0)
        {
            _2550 = abs((1.0 - _2111) / _2121);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2111 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2550 = frontier_phi_40_35_ladder;
        }
        float _2888;
        if (_2124 > 0.0)
        {
            _2888 = abs((1.0 - _2115) / _2124);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2115 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2888 = frontier_phi_50_47_ladder;
        }
        float _2890 = isnan(_2550) ? _2233 : (isnan(_2233) ? _2550 : min(_2233, _2550));
        float _2891 = isnan(_2888) ? _2890 : (isnan(_2890) ? _2888 : min(_2890, _2888));
        float _2895 = (_2891 * _2118) + _2107;
        float _2896 = (_2891 * _2121) + _2111;
        float _2897 = (_2891 * _2124) + _2115;
        float _2898 = _2891 * 9.9999997473787516355514526367188e-05;
        float _2899 = (-1.0) - _2898;
        float _2901 = _2898 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2897 > _2901) || ((_2897 < _2899) || ((_2896 > _2901) || ((_2896 < _2899) || ((_2895 < _2899) || (_2895 > _2901))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2897, cbModelParam._m0[17u].z, fma(_2896, cbModelParam._m0[17u].y, _2895 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2897, cbModelParam._m0[18u].z, fma(_2896, cbModelParam._m0[18u].y, _2895 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2897, cbModelParam._m0[19u].z, fma(_2896, cbModelParam._m0[19u].y, _2895 * cbModelParam._m0[19u].x))), _2054);
            frontier_phi_25_50_ladder = _3019.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3019.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3019.x * cbModelParam._m0[1u].z;
        }
        _2143 = frontier_phi_25_50_ladder_2;
        _2145 = frontier_phi_25_50_ladder_1;
        _2147 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2127 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2054);
        _2143 = _2127.x * cbModelParam._m0[1u].z;
        _2145 = _2127.y * cbModelParam._m0[1u].z;
        _2147 = _2127.z * cbModelParam._m0[1u].z;
    }
    float _2160 = (((_1151 * _1100) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2162 = (((_1151 * _1102) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2164 = (((_1151 * _1103) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2167 = fma(_2164, cbSceneParam._m0[89u].z, fma(_2162, cbSceneParam._m0[89u].y, _2160 * cbSceneParam._m0[89u].x));
    float _2170 = fma(_2164, cbSceneParam._m0[90u].z, fma(_2162, cbSceneParam._m0[90u].y, _2160 * cbSceneParam._m0[90u].x));
    float _2173 = fma(_2164, cbSceneParam._m0[91u].z, fma(_2162, cbSceneParam._m0[91u].y, _2160 * cbSceneParam._m0[91u].x));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2219 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2220 = _2207 / _2219;
    float _2221 = _2211 / _2219;
    float _2222 = _2215 / _2219;
    float _2369;
    float _2370;
    float _2371;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2249 = ((uint(_2222 > cbSceneParam._m0[59u].y) + uint(_2222 > cbSceneParam._m0[59u].x)) + uint(_2222 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2250 = _2249 + 43u;
        uint _2258 = _2249 + 44u;
        uint _2266 = _2249 + 45u;
        uint _2274 = _2249 + 46u;
        float _2285 = fma(_2219, cbSceneParam._m0[_2250].w, fma(_2215, cbSceneParam._m0[_2250].z, fma(_2211, cbSceneParam._m0[_2250].y, _2207 * cbSceneParam._m0[_2250].x)));
        float _2289 = fma(_2219, cbSceneParam._m0[_2258].w, fma(_2215, cbSceneParam._m0[_2258].z, fma(_2211, cbSceneParam._m0[_2258].y, _2207 * cbSceneParam._m0[_2258].x)));
        float _2297 = fma(_2219, cbSceneParam._m0[_2274].w, fma(_2215, cbSceneParam._m0[_2274].z, fma(_2211, cbSceneParam._m0[_2274].y, _2207 * cbSceneParam._m0[_2274].x)));
        float _2302 = cbSceneParam._m0[33u].z * _2297;
        float _2304 = cbSceneParam._m0[33u].w * _2297;
        float _2307 = fma(_2219, cbSceneParam._m0[_2266].w, fma(_2215, cbSceneParam._m0[_2266].z, fma(_2211, cbSceneParam._m0[_2266].y, _2207 * cbSceneParam._m0[_2266].x))) / _2297;
        float _2355 = (cbSceneParam._m0[33u].x - sqrt(((_2221 * _2221) + (_2220 * _2220)) + (_2222 * _2222))) * cbSceneParam._m0[33u].y;
        float _4747 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2362 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2302 + _2285) / _2297, (_2304 + _2289) / _2297), _2307), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2304 + _2285) / _2297, (_2289 - _2302) / _2297), _2307), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 - _2302) / _2297, (_2289 - _2304) / _2297), _2307), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 - _2304) / _2297, (_2302 + _2289) / _2297), _2307), 0.0)).x), vec4(0.25)));
        _2369 = 1.0 - (_2362 * cbSceneParam._m0[34u].x);
        _2370 = 1.0 - (_2362 * cbSceneParam._m0[34u].y);
        _2371 = 1.0 - (_2362 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2369 = 1.0;
        _2370 = 1.0;
        _2371 = 1.0;
    }
    float _2435;
    float _2437;
    float _2439;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2423 = fma(_2219, cbSceneParam._m0[63u].w, fma(_2215, cbSceneParam._m0[63u].z, fma(_2211, cbSceneParam._m0[63u].y, _2207 * cbSceneParam._m0[63u].x)));
        float _2424 = fma(_2219, cbSceneParam._m0[60u].w, fma(_2215, cbSceneParam._m0[60u].z, fma(_2211, cbSceneParam._m0[60u].y, _2207 * cbSceneParam._m0[60u].x))) / _2423;
        float _2425 = fma(_2219, cbSceneParam._m0[61u].w, fma(_2215, cbSceneParam._m0[61u].z, fma(_2211, cbSceneParam._m0[61u].y, _2207 * cbSceneParam._m0[61u].x))) / _2423;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2424 >= cbSceneParam._m0[64u].x) && (_2425 >= cbSceneParam._m0[64u].y)) && (_2424 <= cbSceneParam._m0[64u].z)) && (_2425 <= cbSceneParam._m0[64u].w))
        {
            float _2563 = fma(_2219, cbSceneParam._m0[62u].w, fma(_2215, cbSceneParam._m0[62u].z, fma(_2211, cbSceneParam._m0[62u].y, _2207 * cbSceneParam._m0[62u].x))) / _2423;
            float _2567 = isnan(cbSceneParam._m0[41u].w) ? _2563 : (isnan(_2563) ? cbSceneParam._m0[41u].w : max(_2563, cbSceneParam._m0[41u].w));
            float _2610 = (cbSceneParam._m0[33u].x - sqrt(((_2221 * _2221) + (_2220 * _2220)) + (_2222 * _2222))) * cbSceneParam._m0[33u].y;
            float _4763 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
            float _2617 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2424, cbSceneParam._m0[33u].w + _2425), _2567), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2424, _2425 - cbSceneParam._m0[33u].z), _2567), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2424 - cbSceneParam._m0[33u].z, _2425 - cbSceneParam._m0[33u].w), _2567), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2424 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2425), _2567), 0.0)).x), vec4(0.25)));
            float _2621 = 1.0 - (_2617 * cbSceneParam._m0[34u].x);
            float _2622 = 1.0 - (_2617 * cbSceneParam._m0[34u].y);
            float _2623 = 1.0 - (_2617 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2623) ? _2371 : (isnan(_2371) ? _2623 : min(_2371, _2623));
            frontier_phi_37_36_ladder_1 = isnan(_2622) ? _2370 : (isnan(_2370) ? _2622 : min(_2370, _2622));
            frontier_phi_37_36_ladder_2 = isnan(_2621) ? _2369 : (isnan(_2369) ? _2621 : min(_2369, _2621));
        }
        else
        {
            frontier_phi_37_36_ladder = _2371;
            frontier_phi_37_36_ladder_1 = _2370;
            frontier_phi_37_36_ladder_2 = _2369;
        }
        _2435 = frontier_phi_37_36_ladder_2;
        _2437 = frontier_phi_37_36_ladder_1;
        _2439 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2435 = _2369;
        _2437 = _2370;
        _2439 = _2371;
    }
    uvec4 _2444 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2446 = _2444.x * 14u;
    uint _2447 = _2446 + 13u;
    float _2454 = _1116 + (-1.0);
    float _2459 = (cbLight._m0[_2447].x * _2454) + 1.0;
    float _2460 = (cbLight._m0[_2447].y * _2454) + 1.0;
    float _2461 = (cbLight._m0[_2447].z * _2454) + 1.0;
    float _2462 = (cbLight._m0[_2447].w * _2454) + 1.0;
    uint _2463 = _2446 + 5u;
    float _2469 = isnan(1.0) ? _2460 : (isnan(_2460) ? 1.0 : min(_2460, 1.0));
    uint _2473 = _2446 + 4u;
    float _2482 = isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0));
    uint _2486 = _2446 | 1u;
    float _2497 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_939, _940, _941));
    float _2500 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_939, _940, _941));
    float _4799 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _4810 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2505 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * 0.3183098733425140380859375;
    float _2507 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * 0.3183098733425140380859375;
    float _2514 = ((cbLight._m0[_2463].x * _2469) * _2507) + (((cbLight._m0[_2473].x * _2435) * _2482) * _2505);
    float _2515 = ((_2469 * cbLight._m0[_2463].y) * _2507) + (((cbLight._m0[_2473].y * _2437) * _2482) * _2505);
    float _2516 = ((_2469 * cbLight._m0[_2463].z) * _2507) + (((cbLight._m0[_2473].z * _2439) * _2482) * _2505);
    uvec4 _2520 = floatBitsToUint(cbLight._m0[_2446 + 12u]);
    bool _2522 = _2520.x == 0u;
    float _2624;
    float _2626;
    float _2628;
    if (_2522)
    {
        _2624 = _2514;
        _2626 = _2515;
        _2628 = _2516;
    }
    else
    {
        uint _2632 = _2446 + 6u;
        float _2648 = (dot(vec3(cbLight._m0[_2446 + 2u].xyz), vec3(_939, _940, _941)) * 0.5) + 0.5;
        float _2649 = _2648 * _2648;
        float _4821 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2650 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2651 = isnan(1.0) ? _2461 : (isnan(_2461) ? 1.0 : min(_2461, 1.0));
        _2624 = (((cbLight._m0[_2632].x * 0.3183098733425140380859375) * _2650) * _2651) + _2514;
        _2626 = (((cbLight._m0[_2632].y * 0.3183098733425140380859375) * _2650) * _2651) + _2515;
        _2628 = (((cbLight._m0[_2632].z * 0.3183098733425140380859375) * _2650) * _2651) + _2516;
    }
    bool _2631 = _2520.y == 0u;
    float _2686;
    float _2688;
    float _2690;
    if (_2631)
    {
        _2686 = _2624;
        _2688 = _2626;
        _2690 = _2628;
    }
    else
    {
        uint _2859 = _2446 + 7u;
        float _2875 = (dot(vec3(cbLight._m0[_2446 + 3u].xyz), vec3(_939, _940, _941)) * 0.5) + 0.5;
        float _2876 = _2875 * _2875;
        float _4837 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2877 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2878 = isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0));
        _2686 = (((cbLight._m0[_2859].x * 0.3183098733425140380859375) * _2877) * _2878) + _2624;
        _2688 = (((cbLight._m0[_2859].y * 0.3183098733425140380859375) * _2877) * _2878) + _2626;
        _2690 = (((cbLight._m0[_2859].z * 0.3183098733425140380859375) * _2877) * _2878) + _2628;
    }
    uint _2693 = _2446 + 8u;
    float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _942) * 0.949999988079071044921875);
    float _2707 = _2706 * _2706;
    float _2708 = cbLight._m0[_2446].x + _1018;
    float _2709 = cbLight._m0[_2446].y + _1019;
    float _2710 = cbLight._m0[_2446].z + _1020;
    float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
    float _2715 = _2714 * _2708;
    float _2716 = _2714 * _2709;
    float _2717 = _2714 * _2710;
    float _2718 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2446].xyz));
    float _4853 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
    float _4864 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2722 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _2723 = dot(vec3(_939, _940, _941), vec3(_2715, _2716, _2717));
    float _4875 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2726 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _2727 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2715, _2716, _2717));
    float _4886 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2731 = _2707 * _2707;
    float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
    float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0);
    float _2744 = 0.959999978542327880859375 - _1097;
    float _2746 = 0.959999978542327880859375 - _1098;
    float _2747 = 0.959999978542327880859375 - _1099;
    float _2754 = 1.0 - _2707;
    float _2765 = (0.5 / (((_2722 * ((_2721 * _2754) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2754) + _2707) * _2721))) * _2721;
    float _4897 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2767 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
    uint _2781 = _2446 + 9u;
    float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _942) * 0.949999988079071044921875);
    float _2793 = _2792 * _2792;
    float _2794 = cbLight._m0[_2486].x + _1018;
    float _2795 = cbLight._m0[_2486].y + _1019;
    float _2796 = cbLight._m0[_2486].z + _1020;
    float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
    float _2801 = _2800 * _2794;
    float _2802 = _2800 * _2795;
    float _2803 = _2800 * _2796;
    float _2804 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2486].xyz));
    float _4908 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2807 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _2808 = dot(vec3(_939, _940, _941), vec3(_2801, _2802, _2803));
    float _4919 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2811 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    float _2812 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2801, _2802, _2803));
    float _4930 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2816 = _2793 * _2793;
    float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
    float _2827 = exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0);
    float _2834 = 1.0 - _2793;
    float _2844 = (0.5 / (((_2722 * ((_2807 * _2834) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2834) + _2793) * _2807))) * _2807;
    float _4941 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    float _2846 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
    float _2856 = (((((_2827 * _2744) + _1100) * cbLight._m0[_2781].x) * _2846) * _2469) + ((((cbLight._m0[_2693].x * _2435) * ((_2743 * _2744) + _1100)) * _2767) * _2482);
    float _2857 = (((((_2827 * _2746) + _1102) * cbLight._m0[_2781].y) * _2846) * _2469) + ((((cbLight._m0[_2693].y * _2437) * ((_2743 * _2746) + _1102)) * _2767) * _2482);
    float _2858 = (((((_2827 * _2747) + _1103) * cbLight._m0[_2781].z) * _2846) * _2469) + ((((cbLight._m0[_2693].z * _2439) * ((_2743 * _2747) + _1103)) * _2767) * _2482);
    float _2914;
    float _2916;
    float _2918;
    if (_2522)
    {
        _2914 = _2856;
        _2916 = _2857;
        _2918 = _2858;
    }
    else
    {
        uint _2920 = _2446 + 2u;
        uint _2924 = _2446 + 10u;
        float _2938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2920].w)) * _942) * 0.949999988079071044921875);
        float _2939 = _2938 * _2938;
        float _2940 = cbLight._m0[_2920].x + _1018;
        float _2941 = cbLight._m0[_2920].y + _1019;
        float _2942 = cbLight._m0[_2920].z + _1020;
        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
        float _2947 = _2946 * _2940;
        float _2948 = _2946 * _2941;
        float _2949 = _2946 * _2942;
        float _2950 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2920].xyz));
        float _4952 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
        float _2954 = dot(vec3(_939, _940, _941), vec3(_2947, _2948, _2949));
        float _4963 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
        float _2958 = dot(vec3(cbLight._m0[_2920].xyz), vec3(_2947, _2948, _2949));
        float _4974 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2962 = _2939 * _2939;
        float _2966 = ((_2957 * _2957) * (_2962 + (-1.0))) + 1.0;
        float _2973 = exp2(log2(1.0 - (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) * 5.0);
        float _2980 = 1.0 - _2939;
        float _2990 = (0.5 / (((_2722 * ((_2953 * _2980) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2980) + _2939) * _2953))) * _2953;
        float _4985 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2992 = (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2962 / ((_2966 * _2966) * 3.141590118408203125));
        float _2993 = isnan(1.0) ? _2461 : (isnan(_2461) ? 1.0 : min(_2461, 1.0));
        _2914 = (((((_2973 * _2744) + _1100) * cbLight._m0[_2924].x) * _2992) * _2993) + _2856;
        _2916 = (((((_2973 * _2746) + _1102) * cbLight._m0[_2924].y) * _2992) * _2993) + _2857;
        _2918 = (((((_2973 * _2747) + _1103) * cbLight._m0[_2924].z) * _2992) * _2993) + _2858;
    }
    float _3024;
    float _3026;
    float _3028;
    if (_2631)
    {
        _3024 = _2914;
        _3026 = _2916;
        _3028 = _2918;
    }
    else
    {
        uint _3035 = _2446 + 3u;
        uint _3039 = _2446 + 11u;
        float _3053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3035].w)) * _942) * 0.949999988079071044921875);
        float _3054 = _3053 * _3053;
        float _3055 = cbLight._m0[_3035].x + _1018;
        float _3056 = cbLight._m0[_3035].y + _1019;
        float _3057 = cbLight._m0[_3035].z + _1020;
        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
        float _3062 = _3061 * _3055;
        float _3063 = _3061 * _3056;
        float _3064 = _3061 * _3057;
        float _3065 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_3035].xyz));
        float _5001 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
        float _3069 = dot(vec3(_939, _940, _941), vec3(_3062, _3063, _3064));
        float _5012 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3072 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
        float _3073 = dot(vec3(cbLight._m0[_3035].xyz), vec3(_3062, _3063, _3064));
        float _5023 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3077 = _3054 * _3054;
        float _3081 = ((_3072 * _3072) * (_3077 + (-1.0))) + 1.0;
        float _3088 = exp2(log2(1.0 - (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) * 5.0);
        float _3095 = 1.0 - _3054;
        float _3105 = (0.5 / (((_2722 * ((_3068 * _3095) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _3095) + _3054) * _3068))) * _3068;
        float _5034 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        float _3107 = (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3077 / ((_3081 * _3081) * 3.141590118408203125));
        float _3108 = isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0));
        _3024 = (((((_3088 * _2744) + _1100) * cbLight._m0[_3039].x) * _3107) * _3108) + _2914;
        _3026 = (((((_3088 * _2746) + _1102) * cbLight._m0[_3039].y) * _3107) * _3108) + _2916;
        _3028 = (((((_3088 * _2747) + _1103) * cbLight._m0[_3039].z) * _3107) * _3108) + _2918;
    }
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    if (_2444.y == 0u)
    {
        uvec4 _3129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3130 = _3129.x;
        uint _3141 = uint((float(_3129.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1039) / _3130))) + floor(float(uint(cbSceneParam._m0[85u].x * _1038) / _3130)));
        float _3151 = (log2(_2222 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3152 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
        uint _3155 = uint(isnan(14.0) ? _3152 : (isnan(_3152) ? 14.0 : min(_3152, 14.0)));
        uvec4 _3160 = texelFetch(g_lightClusterGridBuffer, int(((_3155 << 2u) + (_3141 << 6u)) >> 2u));
        uint _3161 = _3160.x;
        uint _3162 = _3129.z;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        if (((((1u << ((_3162 >> 4u) & 15u)) + 4294967295u) & _3161) == 0u) || ((_3162 & 240u) == 0u))
        {
            _3241 = 0.0;
            _3243 = 0.0;
            _3245 = 0.0;
            _3247 = 0.0;
            _3249 = 0.0;
            _3251 = 0.0;
        }
        else
        {
            float _3242;
            float _3244;
            float _3246;
            float _3248;
            float _3250;
            float _3252;
            float _3394 = 0.0;
            float _3395 = 0.0;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            uint _3400 = 0u;
            uint _3409;
            bool _3410;
            for (;;)
            {
                _3409 = texelFetch(g_lightClassification, int((((_3155 << 5u) + (_3141 << 9u)) + (_3400 << 2u)) >> 2u)).x;
                _3410 = _3409 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3410)
                {
                    frontier_phi_71_pred = _3399;
                    frontier_phi_71_pred_1 = _3398;
                    frontier_phi_71_pred_2 = _3397;
                    frontier_phi_71_pred_3 = _3396;
                    frontier_phi_71_pred_4 = _3395;
                    frontier_phi_71_pred_5 = _3394;
                }
                else
                {
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    uint _3545;
                    _3539 = _3394;
                    _3540 = _3395;
                    _3541 = _3396;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3399;
                    _3545 = _3409;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    for (;;)
                    {
                        uint _3549 = uint(findLSB(_3545)) + (_3400 << 5u);
                        uint _3546 = (_3545 + 4294967295u) & _3545;
                        uint _3551 = _3549 * 48u;
                        vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3551)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 3u)).x));
                        uint _3571 = (_3549 * 48u) + 4u;
                        vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3571)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 3u)).x));
                        uint _3590 = (_3549 * 48u) + 8u;
                        vec3 _3601 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3590)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 2u)).x));
                        float _3605 = _3565.x - _2220;
                        float _3606 = _3565.y - _2221;
                        float _3607 = _3565.z - _2222;
                        float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                        float _3611 = inversesqrt(_3608);
                        float _3612 = _3611 * _3605;
                        float _3613 = _3611 * _3606;
                        float _3614 = _3611 * _3607;
                        float _3615 = dot(vec3(_1057, _1060, _1063), vec3(_3612, _3613, _3614));
                        float _3620 = 1.0 - (_3608 * _3565.w);
                        float _5060 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3621 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                        float _3622 = sqrt(_3608) * _3584.w;
                        float _3625 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                        float _3626 = _3625 * _3625;
                        float _3629 = ((1.0 - _3626) * _3615) + _3626;
                        float _3632 = _3622 * _3622;
                        float _3636 = ((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3621) / ((_3632 * 0.699999988079071044921875) + 1.0);
                        float _3640 = (-0.0) - _2220;
                        float _3641 = (-0.0) - _2221;
                        float _3642 = (-0.0) - _2222;
                        float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                        float _3647 = _3646 * _3640;
                        float _3648 = _3646 * _3641;
                        float _3649 = _3646 * _3642;
                        float _3656 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                        float _3657 = 1.0 - _1132;
                        float _3664 = sqrt(1.0 - ((1.0 - (_3657 * _3657)) * (1.0 - (_3656 * _3656))));
                        float _3665 = _3664 * _3664;
                        float _3666 = _3665 * _3665;
                        float _3667 = _3647 + _3612;
                        float _3668 = _3648 + _3613;
                        float _3669 = _3649 + _3614;
                        float _3673 = inversesqrt(dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669)));
                        float _3677 = dot(vec3(_1057, _1060, _1063), vec3(_3647, _3648, _3649));
                        float _5076 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3680 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                        float _3681 = dot(vec3(_1057, _1060, _1063), vec3(_3673 * _3667, _3673 * _3668, _3673 * _3669));
                        float _5087 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                        float _3684 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3688 = ((_3684 * _3684) * (_3666 + (-1.0))) + 1.0;
                        float _3689 = _3625 * _3665;
                        float _3690 = _3689 * _3689;
                        float _3693 = ((1.0 - _3690) * _3615) + _3690;
                        float _5098 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                        float _3694 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                        float _3695 = 1.0 - _3665;
                        float _3705 = (0.5 / (((_3694 * ((_3680 * _3695) + _3665)) + 9.9999999392252902907785028219223e-09) + (((_3694 * _3695) + _3665) * _3680))) * _3694;
                        float _5109 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                        float _3716 = (((_3666 * 3.1415927410125732421875) * (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0)))) / ((_3688 * _3688) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125))) * _3621;
                        _3469 = (_3636 * _3584.x) + _3542;
                        _3470 = (_3636 * _3584.y) + _3543;
                        _3471 = (_3636 * _3584.z) + _3544;
                        _3466 = (_3716 * _3601.x) + _3539;
                        _3467 = (_3716 * _3601.y) + _3540;
                        _3468 = (_3716 * _3601.z) + _3541;
                        if (_3546 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3539 = _3466;
                            _3540 = _3467;
                            _3541 = _3468;
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3471;
                            _3545 = _3546;
                        }
                    }
                    frontier_phi_71_pred = _3471;
                    frontier_phi_71_pred_1 = _3470;
                    frontier_phi_71_pred_2 = _3469;
                    frontier_phi_71_pred_3 = _3468;
                    frontier_phi_71_pred_4 = _3467;
                    frontier_phi_71_pred_5 = _3466;
                }
                _3252 = frontier_phi_71_pred;
                _3250 = frontier_phi_71_pred_1;
                _3248 = frontier_phi_71_pred_2;
                _3246 = frontier_phi_71_pred_3;
                _3244 = frontier_phi_71_pred_4;
                _3242 = frontier_phi_71_pred_5;
                uint _3401 = _3400 + 1u;
                if (_3401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3394 = _3242;
                    _3395 = _3244;
                    _3396 = _3246;
                    _3397 = _3248;
                    _3398 = _3250;
                    _3399 = _3252;
                    _3400 = _3401;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3241 = _3242;
            _3243 = _3244;
            _3245 = _3246;
            _3247 = _3248;
            _3249 = _3250;
            _3251 = _3252;
        }
        uvec4 _3255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3256 = _3255.z;
        uint _3258 = (_3256 >> 8u) & 15u;
        float _3362;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        float _3372;
        if (((4294967295u << _3258) & _3161) == 0u)
        {
            _3362 = _3241;
            _3364 = _3243;
            _3366 = _3245;
            _3368 = _3247;
            _3370 = _3249;
            _3372 = _3251;
        }
        else
        {
            float _3387 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
            float _3388 = _3387 * _2220;
            float _3389 = _3387 * _2221;
            float _3390 = _3387 * _2222;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3258 < ((_3256 >> 12u) & 15u))
            {
                float _3363;
                float _3365;
                float _3367;
                float _3369;
                float _3371;
                float _3373;
                float _3522 = _3241;
                float _3523 = _3243;
                float _3524 = _3245;
                float _3525 = _3247;
                float _3526 = _3249;
                float _3527 = _3251;
                uint _3528 = _3258;
                uint _3537;
                bool _3538;
                for (;;)
                {
                    _3537 = texelFetch(g_lightClassification, int((((_3155 << 5u) + (_3141 << 9u)) + (_3528 << 2u)) >> 2u)).x;
                    _3538 = _3537 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3538)
                    {
                        frontier_phi_82_pred = _3527;
                        frontier_phi_82_pred_1 = _3526;
                        frontier_phi_82_pred_2 = _3525;
                        frontier_phi_82_pred_3 = _3524;
                        frontier_phi_82_pred_4 = _3523;
                        frontier_phi_82_pred_5 = _3522;
                    }
                    else
                    {
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _4023;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _3743 = _3522;
                        float _3744 = _3523;
                        float _3745 = _3524;
                        float _3746 = _3525;
                        float _3747 = _3526;
                        float _3748 = _3527;
                        uint _3749 = _3537;
                        uint _3750;
                        vec4 _3775;
                        float _3776;
                        vec4 _3791;
                        vec3 _3803;
                        vec4 _3818;
                        vec4 _3833;
                        float _3879;
                        bool _3880;
                        for (;;)
                        {
                            uint _3760 = ((_3528 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3749));
                            _3750 = (_3749 + 4294967295u) & _3749;
                            uint _3762 = _3760 * 40u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3776 = _3775.w;
                            uint _3778 = (_3760 * 40u) + 4u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            uint _3793 = (_3760 * 40u) + 8u;
                            _3803 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x));
                            uint _3805 = (_3760 * 40u) + 16u;
                            _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3820 = (_3760 * 40u) + 20u;
                            _3833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 3u)).x));
                            uint _3835 = (_3760 * 40u) + 24u;
                            vec4 _3848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 3u)).x));
                            uint _3854 = (_3760 * 40u) + 28u;
                            vec4 _3867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 3u)).x));
                            _3879 = fma(_2222, _3867.z, fma(_2221, _3867.y, _3867.x * _2220)) + _3867.w;
                            _3880 = !((fma(_2222, _3848.z, fma(_2221, _3848.y, _3848.x * _2220)) + _3848.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3880)
                            {
                                float _3907 = _3775.x - _2220;
                                float _3908 = _3775.y - _2221;
                                float _3909 = _3775.z - _2222;
                                float _3910 = dot(vec3(_3907, _3908, _3909), vec3(_3907, _3908, _3909));
                                float _3913 = inversesqrt(_3910);
                                float _3914 = _3913 * _3907;
                                float _3915 = _3913 * _3908;
                                float _3916 = _3913 * _3909;
                                float _3920 = 1.0 - (_3910 / (_3776 * _3776));
                                float _5120 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3921 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                                float _3925 = sqrt(_3910) * _3791.w;
                                float _3927 = 1.39999997615814208984375 / (_3925 + 1.39999997615814208984375);
                                float _3928 = _3927 * _3927;
                                float _3931 = ((1.0 - _3928) * dot(vec3(_3914, _3915, _3916), vec3(_1057, _1060, _1063))) + _3928;
                                float _3934 = _3925 * _3925;
                                float _3938 = (fma(_2222, _3818.z, fma(_2221, _3818.y, _3818.x * _2220)) + _3818.w) / _3879;
                                float _3939 = (fma(_2222, _3833.z, fma(_2221, _3833.y, _3833.x * _2220)) + _3833.w) / _3879;
                                float _3943 = 1.0 - dot(vec2(_3938, _3939), vec2(_3938, _3939));
                                float _5136 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3944 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                                float _3945 = _3944 * (((isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0))) * _3921) / ((_3934 * 0.699999988079071044921875) + 1.0));
                                float _3957 = exp2(log2(1.0 / ((_3934 * 3.5) + 5.0)) * 0.25);
                                float _3958 = 1.0 - _1132;
                                float _3965 = sqrt(1.0 - ((1.0 - (_3958 * _3958)) * (1.0 - (_3957 * _3957))));
                                float _3966 = _3965 * _3965;
                                float _3967 = _3966 * _3966;
                                float _3968 = _3914 - _3388;
                                float _3969 = _3915 - _3389;
                                float _3970 = _3916 - _3390;
                                float _3974 = inversesqrt(dot(vec3(_3968, _3969, _3970), vec3(_3968, _3969, _3970)));
                                float _3978 = dot(vec3(_1057, _1060, _1063), vec3((-0.0) - _3388, (-0.0) - _3389, (-0.0) - _3390));
                                float _5147 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3981 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3982 = dot(vec3(_1057, _1060, _1063), vec3(_3974 * _3968, _3974 * _3969, _3974 * _3970));
                                float _5158 = isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0));
                                float _3985 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3989 = ((_3985 * _3985) * (_3967 + (-1.0))) + 1.0;
                                float _3990 = _3927 * _3966;
                                float _3991 = _3990 * _3990;
                                float _3997 = ((1.0 - _3991) * dot(vec3(_1057, _1060, _1063), vec3(_3914, _3915, _3916))) + _3991;
                                float _5169 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _3998 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                                float _3999 = 1.0 - _3966;
                                float _4009 = (0.5 / (((_3998 * ((_3981 * _3999) + _3966)) + 9.9999999392252902907785028219223e-09) + (((_3998 * _3999) + _3966) * _3981))) * _3998;
                                float _5180 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4019 = (_3944 * _3921) * (((_3967 * 3.1415927410125732421875) * (isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0)))) / ((_3989 * _3989) * ((_3934 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3945 * _3791.z;
                                frontier_phi_88_pred_1 = _3945 * _3791.y;
                                frontier_phi_88_pred_2 = _3945 * _3791.x;
                                frontier_phi_88_pred_3 = _4019 * _3803.z;
                                frontier_phi_88_pred_4 = _4019 * _3803.y;
                                frontier_phi_88_pred_5 = _4019 * _3803.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4028 = frontier_phi_88_pred;
                            _4027 = frontier_phi_88_pred_1;
                            _4026 = frontier_phi_88_pred_2;
                            _4025 = frontier_phi_88_pred_3;
                            _4024 = frontier_phi_88_pred_4;
                            _4023 = frontier_phi_88_pred_5;
                            _3733 = _4026 + _3746;
                            _3734 = _4027 + _3747;
                            _3735 = _4028 + _3748;
                            _3730 = _4023 + _3743;
                            _3731 = _4024 + _3744;
                            _3732 = _4025 + _3745;
                            if (_3750 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3750;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3735;
                        frontier_phi_82_pred_1 = _3734;
                        frontier_phi_82_pred_2 = _3733;
                        frontier_phi_82_pred_3 = _3732;
                        frontier_phi_82_pred_4 = _3731;
                        frontier_phi_82_pred_5 = _3730;
                    }
                    _3373 = frontier_phi_82_pred;
                    _3371 = frontier_phi_82_pred_1;
                    _3369 = frontier_phi_82_pred_2;
                    _3367 = frontier_phi_82_pred_3;
                    _3365 = frontier_phi_82_pred_4;
                    _3363 = frontier_phi_82_pred_5;
                    uint _3529 = _3528 + 1u;
                    if (_3529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3522 = _3363;
                        _3523 = _3365;
                        _3524 = _3367;
                        _3525 = _3369;
                        _3526 = _3371;
                        _3527 = _3373;
                        _3528 = _3529;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3369;
                frontier_phi_63_64_ladder_1 = _3373;
                frontier_phi_63_64_ladder_2 = _3371;
                frontier_phi_63_64_ladder_3 = _3367;
                frontier_phi_63_64_ladder_4 = _3365;
                frontier_phi_63_64_ladder_5 = _3363;
            }
            else
            {
                frontier_phi_63_64_ladder = _3247;
                frontier_phi_63_64_ladder_1 = _3251;
                frontier_phi_63_64_ladder_2 = _3249;
                frontier_phi_63_64_ladder_3 = _3245;
                frontier_phi_63_64_ladder_4 = _3243;
                frontier_phi_63_64_ladder_5 = _3241;
            }
            _3362 = frontier_phi_63_64_ladder_5;
            _3364 = frontier_phi_63_64_ladder_4;
            _3366 = frontier_phi_63_64_ladder_3;
            _3368 = frontier_phi_63_64_ladder;
            _3370 = frontier_phi_63_64_ladder_2;
            _3372 = frontier_phi_63_64_ladder_1;
        }
        float _3377 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3174 = (_3377 * _3368) + _2686;
        _3176 = (_3377 * _3370) + _2688;
        _3178 = (_3377 * _3372) + _2690;
        _3180 = ((_3362 * _1100) * _3377) + _3024;
        _3182 = ((_3364 * _1102) * _3377) + _3026;
        _3184 = ((_3366 * _1103) * _3377) + _3028;
    }
    else
    {
        _3174 = _2686;
        _3176 = _2688;
        _3178 = _2690;
        _3180 = _3024;
        _3182 = _3026;
        _3184 = _3028;
    }
    float _5196 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _5207 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _5218 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _3201 = ((isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0))) * (_3174 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1116))) + ((_3180 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1954)) * cbPerFrame._m0[3u].x);
    float _3202 = ((isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_3176 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1116))) + ((_3182 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1954)) * cbPerFrame._m0[3u].x);
    float _3203 = ((isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0))) * (_3178 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1116))) + ((_3184 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1954)) * cbPerFrame._m0[3u].x);
    uint _3204 = _260 + 6u;
    float _3212 = _1038 / cbSceneParam._m0[86u].x;
    float _3213 = _1039 / cbSceneParam._m0[86u].y;
    vec4 _3227 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3212, _3213, (log2((isnan(cbSceneParam._m0[77u].w) ? _961 : (isnan(_961) ? cbSceneParam._m0[77u].w : min(_961, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3229 = _3227.x;
    float _3230 = _3227.y;
    float _3231 = _3227.z;
    float _3232 = _3227.w;
    float _3304;
    float _3306;
    float _3308;
    float _3310;
    if (_961 > cbSceneParam._m0[78u].w)
    {
        float _3266 = isnan(_961) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _961 : min(cbSceneParam._m0[80u].w, _961));
        float _3267 = _3266 / _961;
        float _3278 = _3267 * _1011;
        float _3279 = _1012 * _3267;
        float _3280 = (-0.0) - _3279;
        float _3282 = _3267 * _1013;
        float _3284 = (cbSceneParam._m0[77u].w * _3280) / _3266;
        float _3285 = _3284 + cbSceneParam._m0[79u].w;
        float _3286 = cbSceneParam._m0[79u].w - _3279;
        float _3292 = sqrt(((_3278 * _3278) + (_3279 * _3279)) + (_3282 * _3282));
        float _3295 = (1.0 - (cbSceneParam._m0[77u].w / _3266)) * _3292;
        float _3300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3302 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3479;
        if (abs((_3280 - _3284) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3479 = ((((_3285 > 0.0) ? exp2(_3300 * _3285) : (2.0 - exp2(_3302 * _3285))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3295;
        }
        else
        {
            float _3423 = 1.0 / cbSceneParam._m0[80u].x;
            float _3424 = isnan(_3286) ? _3285 : (isnan(_3285) ? _3286 : max(_3285, _3286));
            float _3425 = isnan(_3286) ? _3285 : (isnan(_3285) ? _3286 : min(_3285, _3286));
            float _3434 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : min(_3424, 0.0));
            float _3435 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : min(_3425, 0.0));
            _3479 = ((abs(_3292 / _3280) * cbSceneParam._m0[80u].y) * ((((_3434 - _3435) * 2.0) - ((exp2(_3300 * (isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0)))) - exp2(_3300 * (isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))))) * _3423)) - ((exp2(_3302 * _3434) - exp2(_3302 * _3435)) * _3423))) + (_3295 * cbSceneParam._m0[80u].z);
        }
        vec4 _3481 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3212, _3213, 1.0), 0.0);
        float _3490 = exp2((_3479 * (-1.44269502162933349609375)) * (1.0 - _3481.w));
        float _3491 = log2(_3490);
        float _3507 = log2(_3232);
        _3304 = (exp2(_3507 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].x)) * _3481.x) / cbSceneParam._m0[78u].x)) + _3229;
        _3306 = (exp2(_3507 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].y)) * _3481.y) / cbSceneParam._m0[78u].y)) + _3230;
        _3308 = (exp2(_3507 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].z)) * _3481.z) / cbSceneParam._m0[78u].z)) + _3231;
        _3310 = _3490 * _3232;
    }
    else
    {
        _3304 = _3229;
        _3306 = _3230;
        _3308 = _3231;
        _3310 = _3232;
    }
    bool _3517;
    vec4 _3320;
    vec4 _3342;
    float _3344;
    float _3348;
    float _3349;
    float _3350;
    float _3351;
    bool _3361;
    for (;;)
    {
        _3320 = cbMatDynParam._m0[0u];
        float _3322 = roundEven(_3320.y);
        bool _3323 = _3322 == 3.0;
        float _3324 = log2(_3310);
        float _3331 = exp2(_3324 * cbSceneParam._m0[78u].x) * _3201;
        float _3332 = exp2(_3324 * cbSceneParam._m0[78u].y) * _3202;
        float _3333 = exp2(_3324 * cbSceneParam._m0[78u].z) * _3203;
        float _3340 = _1027 + (-0.5);
        _3342 = cbMtdParam._m0[1u];
        _3344 = _3342.y * _3340;
        float _3347 = (_3322 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3348 = _3347 * (_3323 ? _3331 : (_3331 + (cbSceneParam._m0[72u].w * _3304)));
        _3349 = _3347 * (_3323 ? _3332 : (_3332 + (cbSceneParam._m0[72u].w * _3306)));
        _3350 = _3347 * (_3323 ? _3333 : (_3333 + (cbSceneParam._m0[72u].w * _3308)));
        _3351 = _3340 * 0.999000012874603271484375;
        _3361 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3361)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3351) < 0.5)
            {
                _3517 = true;
                break;
            }
        }
        uint _3458 = _1076 + uint(_3320.w);
        if ((cbInstanceData._m0[_3458].w < 1.0) && ((cbInstanceData._m0[_3458].w + _3351) < 0.5))
        {
            _3517 = true;
            break;
        }
        if ((_3344 + 1.0) < _3342.x)
        {
            _3517 = true;
            break;
        }
        _3517 = false;
        break;
    }
    float _3721;
    if (_3517)
    {
        discard_state = true;
        _3721 = 0.0;
    }
    else
    {
        _3721 = cbInstanceData._m0[_3204].w;
    }
    SV_Target.x = _3348;
    SV_Target.y = _3349;
    SV_Target.z = _3350;
    SV_Target.w = _3721;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3204].w;
    discard_exit();
}


