#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1626;
float _4005;
float _4006;
float _4007;
float _4008;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4017 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4028 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4039 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4050 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _491 = (_484 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _492 = (_484 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _493 = (_484 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4061 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _567 = (_349.x * cbMtdParam._m0[9u].x) * ((_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491);
    float _568 = (_349.y * cbMtdParam._m0[9u].y) * ((_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492);
    float _569 = (_349.z * cbMtdParam._m0[9u].z) * ((_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493);
    float _573 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _567;
    float _576 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _568;
    float _579 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _569;
    float _587 = (((_567 - _573) * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) + _573) * 4.55000019073486328125;
    float _589 = (((_568 - _576) * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) + _576) * 4.55000019073486328125;
    float _591 = (((_569 - _579) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) + _579) * 4.55000019073486328125;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _652 = _650.x;
    float _653 = _650.y;
    float _654 = _650.z;
    float _661 = ((_633.x - _652) * _484) + _652;
    float _662 = ((_633.y - _653) * _484) + _653;
    float _663 = ((_633.z - _654) * _484) + _654;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _688 = ((_675.z - _663) * _557) + _663;
    float _691 = ((((_675.x - _661) * _557) + _661) * 2.0) + (-1.0);
    float _692 = ((((_675.y - _662) * _557) + _662) * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4072 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _728 = (_691 + ((((_608.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _729 = (_692 + ((((_608.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _732 = fma(_698, _262, fma(_729, _269, _728 * _255));
    float _735 = fma(_698, _263, fma(_729, _270, _728 * _256));
    float _738 = fma(_698, _264, fma(_729, _271, _728 * _257));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _771 = _769.x;
    float _772 = 1.0 - _771;
    float _781 = (cbMtdParam._m0[19u].x + dot(vec4(_742 * _732, _742 * _735, _742 * _738, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_771 - _772) * cbMtdParam._m0[24u].z) + _772) * cbMtdParam._m0[21u].z);
    float _4083 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _782 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _784 = (-0.0) - cbMtdParam._m0[24u].x;
    float _786 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _786 : (isnan(_786) ? 1.0 : min(_786, 1.0));
    float _794 = _782 - ((_782 * TEXCOORD_8.x) * _787);
    float _795 = _782 - ((_782 * TEXCOORD_8.y) * _787);
    float _796 = _782 - ((_782 * TEXCOORD_8.z) * _787);
    float _803 = (_794 * (cbMtdParam._m0[17u].x - _587)) + _587;
    float _804 = (_795 * (cbMtdParam._m0[17u].y - _589)) + _589;
    float _805 = (_796 * (cbMtdParam._m0[17u].z - _591)) + _591;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _819 = _817.x;
    float _820 = 1.0 - _819;
    float _846 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_819 - _820) * cbMtdParam._m0[24u].w) + _820) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4104 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _847 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _855 = ((((cbMtdParam._m0[10u].x - _803) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _847) + _803;
    float _856 = ((((cbMtdParam._m0[10u].y - _804) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _847) + _804;
    float _857 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _805)) * _847) + _805;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _885 = _883.x;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _885) * _484) + _885;
    float _919 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _902) * _557) + _902;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _919) * cbMtdParam._m0[19u].z) + _919;
    float _925 = _923 - (_923 * _794);
    float _927 = _925 - (_925 * _847);
    float _932 = (((_608.z - _688) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _688;
    float _936 = ((_716.z - _932) * cbMtdParam._m0[19u].w) + _932;
    vec4 _950 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _957 = (_950.x * 2.0) + (-1.0);
    float _958 = (_950.y * 2.0) + (-1.0);
    float _959 = dot(vec2(_957, _958), vec2(_957, _958));
    float _4115 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _967 = ((_950.z - _936) * _794) + _936;
    float _970 = ((cbMtdParam._m0[23u].x - _967) * _847) + _967;
    vec4 _991 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _997 = (_991.x * 2.0) + (-1.0);
    float _998 = (_991.y * 2.0) + (-1.0);
    float _999 = dot(vec2(_997, _998), vec2(_997, _998));
    float _4126 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1014 = ((sqrt(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) - _698) * _796) + _698;
    float _1017 = (((_957 - _728) * _794) + _728) + (cbMtdParam._m0[21u].x * _728);
    float _1018 = (((_958 - _729) * _795) + _729) + (cbMtdParam._m0[21u].x * _729);
    float _1029 = (((_997 - _1017) + (_1017 * cbMtdParam._m0[22u].z)) * _847) + _1017;
    float _1030 = (((_998 - _1018) + (_1018 * cbMtdParam._m0[22u].z)) * _847) + _1018;
    float _1031 = (_847 * (sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) - _1014)) + _1014;
    float _1033 = cbMtdParam._m0[22u].x + _716.w;
    float _1036 = fma(_1031, _262, fma(_1030, _269, _1029 * _255));
    float _1039 = fma(_1031, _263, fma(_1030, _270, _1029 * _256));
    float _1042 = fma(_1031, _264, fma(_1030, _271, _1029 * _257));
    float _1046 = inversesqrt(dot(vec3(_1036, _1039, _1042), vec3(_1036, _1039, _1042)));
    float _1047 = _1046 * _1036;
    float _1048 = _1046 * _1039;
    float _1049 = _1046 * _1042;
    float _4137 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _1050 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4159 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4170 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4181 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4192 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _1055 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _1069 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1119 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1109);
    float _1120 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1109);
    float _1121 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1109);
    float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
    float _1126 = _1119 * _1125;
    float _1127 = _1120 * _1125;
    float _1128 = _1121 * _1125;
    vec4 _1133 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1135 = _1133.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1307 = sqrt(((_1119 * _1119) + (_1120 * _1120)) + (_1121 * _1121));
        float _1313 = (cbMatDynParam._m0[5u].x * _1307) + cbMatDynParam._m0[5u].y;
        float _4203 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1318 = (cbMatDynParam._m0[5u].z * _1307) + cbMatDynParam._m0[5u].w;
        float _4214 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) - _1314)) + _1314) < ((_1135 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1146 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1147 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1165 = fma(_1049, cbSceneParam._m0[5u].z, fma(_1048, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1047));
    float _1168 = fma(_1049, cbSceneParam._m0[6u].z, fma(_1048, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1047));
    float _1171 = fma(_1049, cbSceneParam._m0[7u].z, fma(_1048, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1047));
    uint _1184 = _293 + 9u;
    uint _1185 = _1184 + uint(cbMatDynParam._m0[0u].w);
    float _1191 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_1185].x;
    float _1192 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_1185].y;
    float _1193 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_1185].z;
    float _4225 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _1197 = 1.0 - _1055;
    float _1198 = _1194 * _1197;
    float _1199 = _1195 * _1197;
    float _1200 = _1196 * _1197;
    float _1205 = (_1194 + (-0.039999999105930328369140625)) * _1055;
    float _1206 = (_1195 + (-0.039999999105930328369140625)) * _1055;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1055;
    float _1208 = _1205 + 0.039999999105930328369140625;
    float _1210 = _1206 + 0.039999999105930328369140625;
    float _1211 = _1207 + 0.039999999105930328369140625;
    vec4 _1220 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1146, cbSceneParam._m0[86u].y * _1147));
    float _1224 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * TEXCOORD_5.w) * _1220.x;
    float _1225 = dot(vec3(_1047, _1048, _1049), vec3(_1126, _1127, _1128));
    float _1228 = _1225 * 2.0;
    float _1232 = (_1228 * _1047) - _1126;
    float _1233 = (_1228 * _1048) - _1127;
    float _1234 = (_1228 * _1049) - _1128;
    float _1238 = abs(dot(vec3(_1126, _1127, _1128), vec3(_1047, _1048, _1049)));
    float _4258 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1240 = sqrt(_1050);
    float _1253 = exp2((_1240 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1240 * 3.0));
    float _1259 = (1.0 - _1253) * ((_1240 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1260 = _1253 * _1240;
    float _1288 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1625;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1350 = fma(_1296, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288));
        float _1354 = fma(_1296, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288));
        float _1358 = fma(_1296, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288));
        float _1383 = _1288 + _1047;
        float _1384 = _1292 + _1048;
        float _1385 = _1296 + _1049;
        float _1395 = fma(_1385, cbModelParam._m0[26u].z, fma(_1384, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1383)) - _1350;
        float _1396 = fma(_1385, cbModelParam._m0[27u].z, fma(_1384, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1383)) - _1354;
        float _1397 = fma(_1385, cbModelParam._m0[28u].z, fma(_1384, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1383)) - _1358;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1350 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1354 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[34u].z) + ((((((_1358 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1453 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1419.x + (-0.5));
        float _1455 = _1453 * (_1419.y + (-0.5));
        float _1456 = _1453 * (_1419.z + (-0.5));
        float _1463 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1426.x + (-0.5));
        float _1465 = _1463 * (_1426.y + (-0.5));
        float _1466 = _1463 * (_1426.z + (-0.5));
        float _1473 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1433.x + (-0.5));
        float _1475 = _1473 * (_1433.y + (-0.5));
        float _1476 = _1473 * (_1433.z + (-0.5));
        float _1483 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1440.x + (-0.5));
        float _1485 = _1483 * (_1440.y + (-0.5));
        float _1486 = _1483 * (_1440.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1507 = (dot(vec3(_1047, _1048, _1049), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1517 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4306 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1519 + 1.0))) + _1524) * _1487;
        float _1534 = _1455 * 0.5;
        float _1535 = _1465 * 0.5;
        float _1536 = _1475 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1047, _1048, _1049), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4339 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1561 + 1.0))) + _1566) * _1488;
        float _1576 = _1456 * 0.5;
        float _1577 = _1466 * 0.5;
        float _1578 = _1476 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_1047, _1048, _1049), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4372 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1603 + 1.0))) + _1608) * _1489;
        _1625 = _1456;
        _1627 = _1455;
        _1628 = _1454;
        _1629 = _1466;
        _1630 = _1465;
        _1631 = _1464;
        _1632 = _1476;
        _1633 = _1475;
        _1634 = _1474;
        _1635 = _1489;
        _1636 = _1488;
        _1637 = _1487;
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1639 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1626;
        _1627 = _1626;
        _1628 = _1626;
        _1629 = _1626;
        _1630 = _1626;
        _1631 = _1626;
        _1632 = _1626;
        _1633 = _1626;
        _1634 = _1626;
        _1635 = _1626;
        _1636 = _1626;
        _1637 = _1626;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1667 = fma(_1296, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288));
        float _1671 = fma(_1296, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288));
        float _1675 = fma(_1296, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288));
        float _1698 = _1288 + _1047;
        float _1699 = _1292 + _1048;
        float _1700 = _1296 + _1049;
        float _1710 = fma(_1700, cbModelParam._m0[30u].z, fma(_1699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1698)) - _1667;
        float _1711 = fma(_1700, cbModelParam._m0[31u].z, fma(_1699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1698)) - _1671;
        float _1712 = fma(_1700, cbModelParam._m0[32u].z, fma(_1699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1698)) - _1675;
        float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
        float _1729 = ((_1716 * _1710) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1667 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1730 = ((_1716 * _1711) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1671 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1731 = ((_1716 * _1712) / cbModelParam._m0[35u].z) + ((((((_1675 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1747 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        float _1766 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1733.x + (-0.5));
        float _1768 = _1766 * (_1733.y + (-0.5));
        float _1769 = _1766 * (_1733.z + (-0.5));
        float _1776 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1740.x + (-0.5));
        float _1778 = _1776 * (_1740.y + (-0.5));
        float _1779 = _1776 * (_1740.z + (-0.5));
        float _1786 = exp2((_1747.w + (-0.5)) * 20.0) * 2.0;
        float _1787 = _1786 * (_1747.x + (-0.5));
        float _1788 = _1786 * (_1747.y + (-0.5));
        float _1789 = _1786 * (_1747.z + (-0.5));
        float _1796 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1797 = _1796 * (_1754.x + (-0.5));
        float _1798 = _1796 * (_1754.y + (-0.5));
        float _1799 = _1796 * (_1754.z + (-0.5));
        float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = _1767 * 0.5;
        float _1804 = _1777 * 0.5;
        float _1805 = _1787 * 0.5;
        float _1806 = dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805));
        float _1811 = (_1806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1806);
        float _1819 = (dot(vec3(_1047, _1048, _1049), vec3(_1811 * _1803, _1811 * _1804, _1811 * _1805)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1828 = sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805)) / (_1800 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1830 = _1829 * 2.0;
        float _1834 = (1.0 - _1829) / (_1829 + 1.0);
        float _4435 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1844 = ((((1.0 - _1835) * (_1830 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1830 + 1.0))) + _1835) * _1800;
        float _1845 = _1768 * 0.5;
        float _1846 = _1778 * 0.5;
        float _1847 = _1788 * 0.5;
        float _1848 = dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847));
        float _1853 = (_1848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1848);
        float _1861 = (dot(vec3(_1047, _1048, _1049), vec3(_1853 * _1845, _1853 * _1846, _1853 * _1847)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1870 = sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1872 = _1871 * 2.0;
        float _1876 = (1.0 - _1871) / (_1871 + 1.0);
        float _4468 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1886 = ((((1.0 - _1877) * (_1872 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1872 + 1.0))) + _1877) * _1801;
        float _1887 = _1769 * 0.5;
        float _1888 = _1779 * 0.5;
        float _1889 = _1789 * 0.5;
        float _1890 = dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889));
        float _1895 = (_1890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1890);
        float _1903 = (dot(vec3(_1047, _1048, _1049), vec3(_1895 * _1887, _1895 * _1888, _1895 * _1889)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1912 = sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1914 = _1913 * 2.0;
        float _1918 = (1.0 - _1913) / (_1913 + 1.0);
        float _4501 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1928 = ((((1.0 - _1919) * (_1914 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1914 + 1.0))) + _1919) * _1802;
        _1936 = _1769;
        _1937 = _1768;
        _1938 = _1767;
        _1939 = _1779;
        _1940 = _1778;
        _1941 = _1777;
        _1942 = _1789;
        _1943 = _1788;
        _1944 = _1787;
        _1945 = _1802;
        _1946 = _1801;
        _1947 = _1800;
        _1948 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)));
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)));
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)));
    }
    else
    {
        _1936 = _1626;
        _1937 = _1626;
        _1938 = _1626;
        _1939 = _1626;
        _1940 = _1626;
        _1941 = _1626;
        _1942 = _1626;
        _1943 = _1626;
        _1944 = _1626;
        _1945 = _1626;
        _1946 = _1626;
        _1947 = _1626;
        _1948 = 0.0;
        _1949 = 0.0;
        _1950 = 0.0;
    }
    float _1960 = (cbModelParam._m0[1u].x * (_1948 - _1638)) + _1638;
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1639)) + _1639;
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1640)) + _1640;
    float _1983 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1960));
    float _2004 = _1232 * 0.5;
    float _2005 = _1233 * 0.5;
    float _2006 = _1234 * 0.5;
    float _2007 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2010 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2013 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1936, _1939, _1942, _1945));
    float _2047;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2020 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1625, _1629, _1632, _1635));
        float _2024 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1627, _1630, _1633, _1636));
        float _2028 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1628, _1631, _1634, _1637));
        float _2035 = dot(vec4(cbModelParam._m0[39u]), vec4(_2004, _2005, _2006, 1.0));
        _2047 = dot(vec3(isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2035) ? 0.0 : (isnan(0.0) ? _2035 : max(0.0, _2035))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2047 = 1.0;
    }
    float _2058;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2049 = dot(vec4(cbModelParam._m0[40u]), vec4(_2004, _2005, _2006, 1.0));
        _2058 = dot(vec3(isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2049) ? 0.0 : (isnan(0.0) ? _2049 : max(0.0, _2049))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2058 = 1.0;
    }
    float _2062 = (_2058 * cbModelParam._m0[1u].x) + (_2047 * (1.0 - cbModelParam._m0[1u].x));
    float _2072 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1050);
    float _2073 = isnan(_2072) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2072 : min(cbModelParam._m0[25u].z, _2072));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2121 = fma(_1296, cbModelParam._m0[13u].z, fma(_1292, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1288)) + cbModelParam._m0[13u].w;
        float _2125 = fma(_1296, cbModelParam._m0[14u].z, fma(_1292, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1288)) + cbModelParam._m0[14u].w;
        float _2129 = fma(_1296, cbModelParam._m0[15u].z, fma(_1292, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1288)) + cbModelParam._m0[15u].w;
        float _2132 = fma(_1234, cbModelParam._m0[13u].z, fma(_1233, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1232));
        float _2135 = fma(_1234, cbModelParam._m0[14u].z, fma(_1233, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1232));
        float _2138 = fma(_1234, cbModelParam._m0[15u].z, fma(_1233, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1232));
        float _2166;
        if (_2132 > 0.0)
        {
            _2166 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2166 = frontier_phi_17_15_ladder;
        }
        float _2369;
        if (_2135 > 0.0)
        {
            _2369 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2369 = frontier_phi_26_22_ladder;
        }
        float _2623;
        if (_2138 > 0.0)
        {
            _2623 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2623 = frontier_phi_38_33_ladder;
        }
        float _2625 = isnan(_2369) ? _2166 : (isnan(_2166) ? _2369 : min(_2166, _2369));
        float _2626 = isnan(_2623) ? _2625 : (isnan(_2625) ? _2623 : min(_2625, _2623));
        float _2630 = (_2626 * _2132) + _2121;
        float _2631 = (_2626 * _2135) + _2125;
        float _2632 = (_2626 * _2138) + _2129;
        float _2633 = _2626 * 9.9999997473787516355514526367188e-05;
        float _2635 = (-1.0) - _2633;
        float _2637 = _2633 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2632 > _2637) || ((_2632 < _2635) || ((_2631 > _2637) || ((_2631 < _2635) || ((_2630 < _2635) || (_2630 > _2637))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2632, cbModelParam._m0[9u].z, fma(_2631, cbModelParam._m0[9u].y, _2630 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2632, cbModelParam._m0[10u].z, fma(_2631, cbModelParam._m0[10u].y, _2630 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2632, cbModelParam._m0[11u].z, fma(_2631, cbModelParam._m0[11u].y, _2630 * cbModelParam._m0[11u].x))), _2073);
            frontier_phi_16_38_ladder = _2760.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2760.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2760.x * cbModelParam._m0[1u].y;
        }
        _2154 = frontier_phi_16_38_ladder_2;
        _2156 = frontier_phi_16_38_ladder_1;
        _2158 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1232, _1233, _1234), _2073);
        _2154 = _2142.x * cbModelParam._m0[1u].y;
        _2156 = _2142.y * cbModelParam._m0[1u].y;
        _2158 = _2142.z * cbModelParam._m0[1u].y;
    }
    float _2162 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1050);
    float _2163 = isnan(_2162) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2162 : min(cbModelParam._m0[25u].w, _2162));
    float _2253;
    float _2255;
    float _2257;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2217 = fma(_1296, cbModelParam._m0[21u].z, fma(_1292, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1288)) + cbModelParam._m0[21u].w;
        float _2221 = fma(_1296, cbModelParam._m0[22u].z, fma(_1292, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1288)) + cbModelParam._m0[22u].w;
        float _2225 = fma(_1296, cbModelParam._m0[23u].z, fma(_1292, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1288)) + cbModelParam._m0[23u].w;
        float _2228 = fma(_1234, cbModelParam._m0[21u].z, fma(_1233, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1232));
        float _2231 = fma(_1234, cbModelParam._m0[22u].z, fma(_1233, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1232));
        float _2234 = fma(_1234, cbModelParam._m0[23u].z, fma(_1233, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1232));
        float _2374;
        if (_2228 > 0.0)
        {
            _2374 = abs((1.0 - _2217) / _2228);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2217 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2374 = frontier_phi_28_24_ladder;
        }
        float _2650;
        if (_2231 > 0.0)
        {
            _2650 = abs((1.0 - _2221) / _2231);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2221 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2650 = frontier_phi_40_35_ladder;
        }
        float _2863;
        if (_2234 > 0.0)
        {
            _2863 = abs((1.0 - _2225) / _2234);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2234 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2225 + 1.0) / _2234);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2863 = frontier_phi_49_46_ladder;
        }
        float _2865 = isnan(_2650) ? _2374 : (isnan(_2374) ? _2650 : min(_2374, _2650));
        float _2866 = isnan(_2863) ? _2865 : (isnan(_2865) ? _2863 : min(_2865, _2863));
        float _2870 = (_2866 * _2228) + _2217;
        float _2871 = (_2866 * _2231) + _2221;
        float _2872 = (_2866 * _2234) + _2225;
        float _2873 = _2866 * 9.9999997473787516355514526367188e-05;
        float _2874 = (-1.0) - _2873;
        float _2876 = _2873 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2872 > _2876) || ((_2872 < _2874) || ((_2871 > _2876) || ((_2871 < _2874) || ((_2870 < _2874) || (_2870 > _2876))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2872, cbModelParam._m0[17u].z, fma(_2871, cbModelParam._m0[17u].y, _2870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2872, cbModelParam._m0[18u].z, fma(_2871, cbModelParam._m0[18u].y, _2870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2872, cbModelParam._m0[19u].z, fma(_2871, cbModelParam._m0[19u].y, _2870 * cbModelParam._m0[19u].x))), _2163);
            frontier_phi_25_49_ladder = _3071.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3071.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3071.x * cbModelParam._m0[1u].z;
        }
        _2253 = frontier_phi_25_49_ladder_2;
        _2255 = frontier_phi_25_49_ladder_1;
        _2257 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1232, _1233, _1234), _2163);
        _2253 = _2237.x * cbModelParam._m0[1u].z;
        _2255 = _2237.y * cbModelParam._m0[1u].z;
        _2257 = _2237.z * cbModelParam._m0[1u].z;
    }
    float _2270 = (((_1259 * _1208) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2253 - _2154)) + _2154);
    float _2272 = (((_1259 * _1210) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2255 - _2156)) + _2156);
    float _2274 = (((_1259 * _1211) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2257 - _2158)) + _2158);
    float _2277 = fma(_2274, cbSceneParam._m0[89u].z, fma(_2272, cbSceneParam._m0[89u].y, _2270 * cbSceneParam._m0[89u].x));
    float _2280 = fma(_2274, cbSceneParam._m0[90u].z, fma(_2272, cbSceneParam._m0[90u].y, _2270 * cbSceneParam._m0[90u].x));
    float _2283 = fma(_2274, cbSceneParam._m0[91u].z, fma(_2272, cbSceneParam._m0[91u].y, _2270 * cbSceneParam._m0[91u].x));
    uvec4 _2293 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2295 = _2293.x * 14u;
    uint _2296 = _2295 + 13u;
    float _2303 = _1224 + (-1.0);
    float _2308 = (cbLight._m0[_2296].x * _2303) + 1.0;
    float _2309 = (cbLight._m0[_2296].y * _2303) + 1.0;
    float _2310 = (cbLight._m0[_2296].z * _2303) + 1.0;
    float _2311 = (cbLight._m0[_2296].w * _2303) + 1.0;
    uint _2312 = _2295 + 5u;
    float _2318 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2322 = _2295 + 4u;
    float _2328 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
    uint _2332 = _2295 | 1u;
    float _2343 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_1047, _1048, _1049));
    float _2346 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_1047, _1048, _1049));
    float _4637 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _4648 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2353 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2360 = ((cbLight._m0[_2312].x * _2318) * _2353) + ((cbLight._m0[_2322].x * _2328) * _2351);
    float _2361 = ((_2318 * cbLight._m0[_2312].y) * _2353) + ((_2328 * cbLight._m0[_2322].y) * _2351);
    float _2362 = ((_2318 * cbLight._m0[_2312].z) * _2353) + ((_2328 * cbLight._m0[_2322].z) * _2351);
    uvec4 _2366 = floatBitsToUint(cbLight._m0[_2295 + 12u]);
    bool _2368 = _2366.x == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2368)
    {
        _2379 = _2360;
        _2381 = _2361;
        _2383 = _2362;
    }
    else
    {
        uint _2387 = _2295 + 6u;
        float _2403 = (dot(vec3(cbLight._m0[_2295 + 2u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4659 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2406 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2379 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2360;
        _2381 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2361;
        _2383 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2362;
    }
    bool _2386 = _2366.y == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2386)
    {
        _2424 = _2379;
        _2426 = _2381;
        _2428 = _2383;
    }
    else
    {
        uint _2594 = _2295 + 7u;
        float _2610 = (dot(vec3(cbLight._m0[_2295 + 3u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2611 = _2610 * _2610;
        float _4675 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2612 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2613 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2424 = (((cbLight._m0[_2594].x * 0.3183098733425140380859375) * _2612) * _2613) + _2379;
        _2426 = (((cbLight._m0[_2594].y * 0.3183098733425140380859375) * _2612) * _2613) + _2381;
        _2428 = (((cbLight._m0[_2594].z * 0.3183098733425140380859375) * _2612) * _2613) + _2383;
    }
    uint _2431 = _2295 + 8u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _1050) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2295].x + _1126;
    float _2447 = cbLight._m0[_2295].y + _1127;
    float _2448 = cbLight._m0[_2295].z + _1128;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2295].xyz));
    float _4691 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _4702 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _2460 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2461 = dot(vec3(_1047, _1048, _1049), vec3(_2453, _2454, _2455));
    float _4713 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2453, _2454, _2455));
    float _4724 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2445 * _2445;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
    float _2482 = 0.959999978542327880859375 - _1205;
    float _2484 = 0.959999978542327880859375 - _1206;
    float _2485 = 0.959999978542327880859375 - _1207;
    float _2492 = 1.0 - _2445;
    float _2503 = (0.5 / (((_2460 * ((_2459 * _2492) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2492) + _2445) * _2459))) * _2459;
    float _4735 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    uint _2516 = _2295 + 9u;
    float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _1050) * 0.949999988079071044921875);
    float _2528 = _2527 * _2527;
    float _2529 = cbLight._m0[_2332].x + _1126;
    float _2530 = cbLight._m0[_2332].y + _1127;
    float _2531 = cbLight._m0[_2332].z + _1128;
    float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
    float _2536 = _2535 * _2529;
    float _2537 = _2535 * _2530;
    float _2538 = _2535 * _2531;
    float _2539 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2332].xyz));
    float _4746 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2543 = dot(vec3(_1047, _1048, _1049), vec3(_2536, _2537, _2538));
    float _4757 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2536, _2537, _2538));
    float _4768 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2528 * _2528;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
    float _2569 = 1.0 - _2528;
    float _2579 = (0.5 / (((_2460 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2569) + _2528) * _2542))) * _2542;
    float _4779 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2581 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    float _2591 = (((((_2562 * _2482) + _1208) * cbLight._m0[_2516].x) * _2581) * _2318) + (((((_2481 * _2482) + _1208) * cbLight._m0[_2431].x) * _2505) * _2328);
    float _2592 = (((((_2562 * _2484) + _1210) * cbLight._m0[_2516].y) * _2581) * _2318) + (((((_2481 * _2484) + _1210) * cbLight._m0[_2431].y) * _2505) * _2328);
    float _2593 = (((((_2562 * _2485) + _1211) * cbLight._m0[_2516].z) * _2581) * _2318) + (((((_2481 * _2485) + _1211) * cbLight._m0[_2431].z) * _2505) * _2328);
    float _2655;
    float _2657;
    float _2659;
    if (_2368)
    {
        _2655 = _2591;
        _2657 = _2592;
        _2659 = _2593;
    }
    else
    {
        uint _2661 = _2295 + 2u;
        uint _2665 = _2295 + 10u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _1050) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _1126;
        float _2682 = cbLight._m0[_2661].y + _1127;
        float _2683 = cbLight._m0[_2661].z + _1128;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2661].xyz));
        float _4790 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2695 = dot(vec3(_1047, _1048, _1049), vec3(_2688, _2689, _2690));
        float _4801 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4812 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2721 = 1.0 - _2680;
        float _2731 = (0.5 / (((_2460 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2721) + _2680) * _2694))) * _2694;
        float _4823 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2655 = (((((_2714 * _2482) + _1208) * cbLight._m0[_2665].x) * _2733) * _2734) + _2591;
        _2657 = (((((_2714 * _2484) + _1210) * cbLight._m0[_2665].y) * _2733) * _2734) + _2592;
        _2659 = (((((_2714 * _2485) + _1211) * cbLight._m0[_2665].z) * _2733) * _2734) + _2593;
    }
    float _2769;
    float _2771;
    float _2773;
    if (_2386)
    {
        _2769 = _2655;
        _2771 = _2657;
        _2773 = _2659;
    }
    else
    {
        uint _2780 = _2295 + 3u;
        uint _2784 = _2295 + 11u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _1050) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _1126;
        float _2801 = cbLight._m0[_2780].y + _1127;
        float _2802 = cbLight._m0[_2780].z + _1128;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2780].xyz));
        float _4839 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2814 = dot(vec3(_1047, _1048, _1049), vec3(_2807, _2808, _2809));
        float _4850 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4861 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2460 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2840) + _2799) * _2813))) * _2813;
        float _4872 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2769 = (((((_2833 * _2482) + _1208) * cbLight._m0[_2784].x) * _2852) * _2853) + _2655;
        _2771 = (((((_2833 * _2484) + _1210) * cbLight._m0[_2784].y) * _2852) * _2853) + _2657;
        _2773 = (((((_2833 * _2485) + _1211) * cbLight._m0[_2784].z) * _2852) * _2853) + _2659;
    }
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_2293.y == 0u)
    {
        float _2928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2928;
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2928;
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2928;
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.x;
        uint _2955 = uint((float(_2943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1147) / _2944))) + floor(float(uint(cbSceneParam._m0[85u].x * _1146) / _2944)));
        float _2965 = (log2(_2931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2966 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        uint _2969 = uint(isnan(14.0) ? _2966 : (isnan(_2966) ? 14.0 : min(_2966, 14.0)));
        uvec4 _2974 = texelFetch(g_lightClusterGridBuffer, int(((_2969 << 2u) + (_2955 << 6u)) >> 2u));
        uint _2975 = _2974.x;
        uint _2976 = _2943.z;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((((1u << ((_2976 >> 4u) & 15u)) + 4294967295u) & _2975) == 0u) || ((_2976 & 240u) == 0u))
        {
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
        }
        else
        {
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            uint _3234 = 0u;
            uint _3243;
            bool _3244;
            for (;;)
            {
                _3243 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                _3244 = _3243 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3244)
                {
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3233;
                    frontier_phi_66_pred_2 = _3232;
                    frontier_phi_66_pred_3 = _3231;
                    frontier_phi_66_pred_4 = _3230;
                    frontier_phi_66_pred_5 = _3229;
                }
                else
                {
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    uint _3379;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3243;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    for (;;)
                    {
                        uint _3383 = uint(findLSB(_3379)) + (_3234 << 5u);
                        uint _3380 = (_3379 + 4294967295u) & _3379;
                        uint _3385 = _3383 * 48u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3405 = (_3383 * 48u) + 4u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3424 = (_3383 * 48u) + 8u;
                        vec3 _3435 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x));
                        float _3439 = _3399.x - _2929;
                        float _3440 = _3399.y - _2930;
                        float _3441 = _3399.z - _2931;
                        float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                        float _3445 = inversesqrt(_3442);
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3449 = dot(vec3(_1165, _1168, _1171), vec3(_3446, _3447, _3448));
                        float _3454 = 1.0 - (_3442 * _3399.w);
                        float _4898 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3456 = sqrt(_3442) * _3418.w;
                        float _3459 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3449) + _3460;
                        float _3466 = _3456 * _3456;
                        float _3470 = ((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3455) / ((_3466 * 0.699999988079071044921875) + 1.0);
                        float _3474 = (-0.0) - _2929;
                        float _3475 = (-0.0) - _2930;
                        float _3476 = (-0.0) - _2931;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3491 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                        float _3492 = 1.0 - _1240;
                        float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                        float _3500 = _3499 * _3499;
                        float _3501 = _3500 * _3500;
                        float _3502 = _3481 + _3446;
                        float _3503 = _3482 + _3447;
                        float _3504 = _3483 + _3448;
                        float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                        float _3512 = dot(vec3(_1165, _1168, _1171), vec3(_3481, _3482, _3483));
                        float _4914 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3515 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3516 = dot(vec3(_1165, _1168, _1171), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                        float _4925 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3519 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                        float _3524 = _3459 * _3500;
                        float _3525 = _3524 * _3524;
                        float _3528 = ((1.0 - _3525) * _3449) + _3525;
                        float _4936 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3529 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3530 = 1.0 - _3500;
                        float _3540 = (0.5 / (((_3529 * ((_3515 * _3530) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3500) * _3515))) * _3529;
                        float _4947 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3551 = (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) / ((_3523 * _3523) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125))) * _3455;
                        _3303 = (_3470 * _3418.x) + _3376;
                        _3304 = (_3470 * _3418.y) + _3377;
                        _3305 = (_3470 * _3418.z) + _3378;
                        _3300 = (_3551 * _3435.x) + _3373;
                        _3301 = (_3551 * _3435.y) + _3374;
                        _3302 = (_3551 * _3435.z) + _3375;
                        if (_3380 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3380;
                        }
                    }
                    frontier_phi_66_pred = _3300;
                    frontier_phi_66_pred_1 = _3305;
                    frontier_phi_66_pred_2 = _3304;
                    frontier_phi_66_pred_3 = _3303;
                    frontier_phi_66_pred_4 = _3302;
                    frontier_phi_66_pred_5 = _3301;
                }
                _3077 = frontier_phi_66_pred;
                _3087 = frontier_phi_66_pred_1;
                _3085 = frontier_phi_66_pred_2;
                _3083 = frontier_phi_66_pred_3;
                _3081 = frontier_phi_66_pred_4;
                _3079 = frontier_phi_66_pred_5;
                uint _3235 = _3234 + 1u;
                if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3228 = _3077;
                    _3229 = _3079;
                    _3230 = _3081;
                    _3231 = _3083;
                    _3232 = _3085;
                    _3233 = _3087;
                    _3234 = _3235;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
        }
        uvec4 _3090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3091 = _3090.z;
        uint _3093 = (_3091 >> 8u) & 15u;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        if (((4294967295u << _3093) & _2975) == 0u)
        {
            _3196 = _3076;
            _3198 = _3078;
            _3200 = _3080;
            _3202 = _3082;
            _3204 = _3084;
            _3206 = _3086;
        }
        else
        {
            float _3221 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
            float _3222 = _3221 * _2929;
            float _3223 = _3221 * _2930;
            float _3224 = _3221 * _2931;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3093 < ((_3091 >> 12u) & 15u))
            {
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3356 = _3076;
                float _3357 = _3078;
                float _3358 = _3080;
                float _3359 = _3082;
                float _3360 = _3084;
                float _3361 = _3086;
                uint _3362 = _3093;
                uint _3371;
                bool _3372;
                for (;;)
                {
                    _3371 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                    _3372 = _3371 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3372)
                    {
                        frontier_phi_77_pred = _3361;
                        frontier_phi_77_pred_1 = _3360;
                        frontier_phi_77_pred_2 = _3359;
                        frontier_phi_77_pred_3 = _3358;
                        frontier_phi_77_pred_4 = _3357;
                        frontier_phi_77_pred_5 = _3356;
                    }
                    else
                    {
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        uint _3584 = _3371;
                        uint _3585;
                        vec4 _3610;
                        float _3611;
                        vec4 _3626;
                        vec3 _3638;
                        vec4 _3653;
                        vec4 _3668;
                        float _3714;
                        bool _3715;
                        for (;;)
                        {
                            uint _3595 = ((_3362 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3584));
                            _3585 = (_3584 + 4294967295u) & _3584;
                            uint _3597 = _3595 * 40u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3611 = _3610.w;
                            uint _3613 = (_3595 * 40u) + 4u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3628 = (_3595 * 40u) + 8u;
                            _3638 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x));
                            uint _3640 = (_3595 * 40u) + 16u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3595 * 40u) + 20u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3670 = (_3595 * 40u) + 24u;
                            vec4 _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3689 = (_3595 * 40u) + 28u;
                            vec4 _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            _3714 = fma(_2931, _3702.z, fma(_2930, _3702.y, _3702.x * _2929)) + _3702.w;
                            _3715 = !((fma(_2931, _3683.z, fma(_2930, _3683.y, _3683.x * _2929)) + _3683.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3715)
                            {
                                float _3742 = _3610.x - _2929;
                                float _3743 = _3610.y - _2930;
                                float _3744 = _3610.z - _2931;
                                float _3745 = dot(vec3(_3742, _3743, _3744), vec3(_3742, _3743, _3744));
                                float _3748 = inversesqrt(_3745);
                                float _3749 = _3748 * _3742;
                                float _3750 = _3748 * _3743;
                                float _3751 = _3748 * _3744;
                                float _3755 = 1.0 - (_3745 / (_3611 * _3611));
                                float _4958 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3760 = sqrt(_3745) * _3626.w;
                                float _3762 = 1.39999997615814208984375 / (_3760 + 1.39999997615814208984375);
                                float _3763 = _3762 * _3762;
                                float _3766 = ((1.0 - _3763) * dot(vec3(_3749, _3750, _3751), vec3(_1165, _1168, _1171))) + _3763;
                                float _3769 = _3760 * _3760;
                                float _3773 = (fma(_2931, _3653.z, fma(_2930, _3653.y, _3653.x * _2929)) + _3653.w) / _3714;
                                float _3774 = (fma(_2931, _3668.z, fma(_2930, _3668.y, _3668.x * _2929)) + _3668.w) / _3714;
                                float _3778 = 1.0 - dot(vec2(_3773, _3774), vec2(_3773, _3774));
                                float _4974 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3780 = _3779 * (((isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0))) * _3756) / ((_3769 * 0.699999988079071044921875) + 1.0));
                                float _3792 = exp2(log2(1.0 / ((_3769 * 3.5) + 5.0)) * 0.25);
                                float _3793 = 1.0 - _1240;
                                float _3800 = sqrt(1.0 - ((1.0 - (_3793 * _3793)) * (1.0 - (_3792 * _3792))));
                                float _3801 = _3800 * _3800;
                                float _3802 = _3801 * _3801;
                                float _3803 = _3749 - _3222;
                                float _3804 = _3750 - _3223;
                                float _3805 = _3751 - _3224;
                                float _3809 = inversesqrt(dot(vec3(_3803, _3804, _3805), vec3(_3803, _3804, _3805)));
                                float _3813 = dot(vec3(_1165, _1168, _1171), vec3((-0.0) - _3222, (-0.0) - _3223, (-0.0) - _3224));
                                float _4985 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3816 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3817 = dot(vec3(_1165, _1168, _1171), vec3(_3809 * _3803, _3809 * _3804, _3809 * _3805));
                                float _4996 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3824 = ((_3820 * _3820) * (_3802 + (-1.0))) + 1.0;
                                float _3825 = _3762 * _3801;
                                float _3826 = _3825 * _3825;
                                float _3832 = ((1.0 - _3826) * dot(vec3(_1165, _1168, _1171), vec3(_3749, _3750, _3751))) + _3826;
                                float _5007 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3833 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3834 = 1.0 - _3801;
                                float _3844 = (0.5 / (((_3833 * ((_3816 * _3834) + _3801)) + 9.9999999392252902907785028219223e-09) + (((_3833 * _3834) + _3801) * _3816))) * _3833;
                                float _5018 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3854 = (_3779 * _3756) * (((_3802 * 3.1415927410125732421875) * (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) / ((_3824 * _3824) * ((_3769 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3780 * _3626.y;
                                frontier_phi_83_pred_1 = _3780 * _3626.x;
                                frontier_phi_83_pred_2 = _3854 * _3638.z;
                                frontier_phi_83_pred_3 = _3854 * _3638.y;
                                frontier_phi_83_pred_4 = _3854 * _3638.x;
                                frontier_phi_83_pred_5 = _3780 * _3626.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3862 = frontier_phi_83_pred;
                            _3861 = frontier_phi_83_pred_1;
                            _3860 = frontier_phi_83_pred_2;
                            _3859 = frontier_phi_83_pred_3;
                            _3858 = frontier_phi_83_pred_4;
                            _3863 = frontier_phi_83_pred_5;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            if (_3585 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3585;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3570;
                        frontier_phi_77_pred_1 = _3569;
                        frontier_phi_77_pred_2 = _3568;
                        frontier_phi_77_pred_3 = _3567;
                        frontier_phi_77_pred_4 = _3566;
                        frontier_phi_77_pred_5 = _3565;
                    }
                    _3207 = frontier_phi_77_pred;
                    _3205 = frontier_phi_77_pred_1;
                    _3203 = frontier_phi_77_pred_2;
                    _3201 = frontier_phi_77_pred_3;
                    _3199 = frontier_phi_77_pred_4;
                    _3197 = frontier_phi_77_pred_5;
                    uint _3363 = _3362 + 1u;
                    if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3356 = _3197;
                        _3357 = _3199;
                        _3358 = _3201;
                        _3359 = _3203;
                        _3360 = _3205;
                        _3361 = _3207;
                        _3362 = _3363;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3201;
                frontier_phi_58_59_ladder_1 = _3207;
                frontier_phi_58_59_ladder_2 = _3205;
                frontier_phi_58_59_ladder_3 = _3203;
                frontier_phi_58_59_ladder_4 = _3199;
                frontier_phi_58_59_ladder_5 = _3197;
            }
            else
            {
                frontier_phi_58_59_ladder = _3080;
                frontier_phi_58_59_ladder_1 = _3086;
                frontier_phi_58_59_ladder_2 = _3084;
                frontier_phi_58_59_ladder_3 = _3082;
                frontier_phi_58_59_ladder_4 = _3078;
                frontier_phi_58_59_ladder_5 = _3076;
            }
            _3196 = frontier_phi_58_59_ladder_5;
            _3198 = frontier_phi_58_59_ladder_4;
            _3200 = frontier_phi_58_59_ladder;
            _3202 = frontier_phi_58_59_ladder_3;
            _3204 = frontier_phi_58_59_ladder_2;
            _3206 = frontier_phi_58_59_ladder_1;
        }
        float _3211 = isnan(1.0) ? _1224 : (isnan(_1224) ? 1.0 : min(_1224, 1.0));
        _2988 = (_3211 * _3202) + _2424;
        _2990 = (_3211 * _3204) + _2426;
        _2992 = (_3211 * _3206) + _2428;
        _2994 = ((_3196 * _1208) * _3211) + _2769;
        _2996 = ((_3198 * _1210) * _3211) + _2771;
        _2998 = ((_3200 * _1211) * _3211) + _2773;
    }
    else
    {
        _2988 = _2424;
        _2990 = _2426;
        _2992 = _2428;
        _2994 = _2769;
        _2996 = _2771;
        _2998 = _2773;
    }
    float _5034 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _5045 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _5056 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _3015 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_2988 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1224))) + ((_2994 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    float _3016 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_2990 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1224))) + ((_2996 + ((isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    float _3017 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_2992 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1224))) + ((_2998 + ((isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    uint _3018 = _293 + 6u;
    float _3026 = _1146 / cbSceneParam._m0[86u].x;
    float _3027 = _1147 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _1069 : (isnan(_1069) ? cbSceneParam._m0[77u].w : min(_1069, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_1069 > cbSceneParam._m0[78u].w)
    {
        float _3101 = isnan(_1069) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1069 : min(cbSceneParam._m0[80u].w, _1069));
        float _3102 = _3101 / _1069;
        float _3113 = _3102 * _1119;
        float _3114 = _1120 * _3102;
        float _3115 = (-0.0) - _3114;
        float _3116 = _3102 * _1121;
        float _3118 = (cbSceneParam._m0[77u].w * _3115) / _3101;
        float _3119 = _3118 + cbSceneParam._m0[79u].w;
        float _3120 = cbSceneParam._m0[79u].w - _3114;
        float _3126 = sqrt(((_3113 * _3113) + (_3114 * _3114)) + (_3116 * _3116));
        float _3129 = (1.0 - (cbSceneParam._m0[77u].w / _3101)) * _3126;
        float _3134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3313;
        if (abs((_3115 - _3118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3313 = ((((_3119 > 0.0) ? exp2(_3134 * _3119) : (2.0 - exp2(_3136 * _3119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3129;
        }
        else
        {
            float _3257 = 1.0 / cbSceneParam._m0[80u].x;
            float _3258 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : max(_3119, _3120));
            float _3259 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : min(_3119, _3120));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            _3313 = ((abs(_3126 / _3115) * cbSceneParam._m0[80u].y) * ((((_3268 - _3269) * 2.0) - ((exp2(_3134 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0)))) - exp2(_3134 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))))) * _3257)) - ((exp2(_3136 * _3268) - exp2(_3136 * _3269)) * _3257))) + (_3129 * cbSceneParam._m0[80u].z);
        }
        vec4 _3315 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3324 = exp2((_3313 * (-1.44269502162933349609375)) * (1.0 - _3315.w));
        float _3325 = log2(_3324);
        float _3341 = log2(_3046);
        _3138 = (exp2(_3341 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].x)) * _3315.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3140 = (exp2(_3341 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].y)) * _3315.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3142 = (exp2(_3341 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].z)) * _3315.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3144 = _3324 * _3046;
    }
    else
    {
        _3138 = _3043;
        _3140 = _3044;
        _3142 = _3045;
        _3144 = _3046;
    }
    bool _3351;
    vec4 _3154;
    vec4 _3176;
    float _3178;
    float _3182;
    float _3183;
    float _3184;
    float _3185;
    bool _3195;
    for (;;)
    {
        _3154 = cbMatDynParam._m0[0u];
        float _3156 = roundEven(_3154.y);
        bool _3157 = _3156 == 3.0;
        float _3158 = log2(_3144);
        float _3165 = exp2(_3158 * cbSceneParam._m0[78u].x) * _3015;
        float _3166 = exp2(_3158 * cbSceneParam._m0[78u].y) * _3016;
        float _3167 = exp2(_3158 * cbSceneParam._m0[78u].z) * _3017;
        float _3174 = _1135 + (-0.5);
        _3176 = cbMtdParam._m0[1u];
        _3178 = _3176.y * _3174;
        float _3181 = (_3156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3182 = _3181 * (_3157 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3138)));
        _3183 = _3181 * (_3157 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3140)));
        _3184 = _3181 * (_3157 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3142)));
        _3185 = _3174 * 0.999000012874603271484375;
        _3195 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3195)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3185) < 0.5)
            {
                _3351 = true;
                break;
            }
        }
        uint _3292 = _1184 + uint(_3154.w);
        if ((cbInstanceData._m0[_3292].w < 1.0) && ((cbInstanceData._m0[_3292].w + _3185) < 0.5))
        {
            _3351 = true;
            break;
        }
        if ((_3178 + 1.0) < _3176.x)
        {
            _3351 = true;
            break;
        }
        _3351 = false;
        break;
    }
    float _3556;
    if (_3351)
    {
        discard_state = true;
        _3556 = 0.0;
    }
    else
    {
        _3556 = cbInstanceData._m0[_3018].w;
    }
    SV_Target.x = _3182;
    SV_Target.y = _3183;
    SV_Target.z = _3184;
    SV_Target.w = _3556;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3018].w;
    discard_exit();
}


