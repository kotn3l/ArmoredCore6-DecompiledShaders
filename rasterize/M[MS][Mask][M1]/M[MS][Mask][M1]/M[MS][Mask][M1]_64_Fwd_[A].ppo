#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1482;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3874 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3885 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3896 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3907 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _480 = (_473 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _481 = (_473 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _482 = (_473 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[23u].w) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3918 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _556 = (_338.x * cbMtdParam._m0[9u].x) * ((_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480);
    float _557 = (_338.y * cbMtdParam._m0[9u].y) * ((_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481);
    float _558 = (_338.z * cbMtdParam._m0[9u].z) * ((_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482);
    float _562 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _556;
    float _565 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _557;
    float _568 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _558;
    float _576 = (((_556 - _562) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _562) * 4.55000019073486328125;
    float _578 = (((_557 - _565) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _565) * 4.55000019073486328125;
    float _580 = (((_558 - _568) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _568) * 4.55000019073486328125;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _473) + _639;
    float _649 = ((_620.y - _640) * _473) + _640;
    float _650 = ((_620.z - _641) * _473) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_662.z - _650) * _546) + _650;
    float _678 = ((((_662.x - _648) * _546) + _648) * 2.0) + (-1.0);
    float _679 = ((((_662.y - _649) * _546) + _649) * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3929 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _726 = _724.x;
    float _727 = 1.0 - _726;
    float _743 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_726 - _727) * cbMtdParam._m0[24u].z) + _727) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3940 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _744 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _751 = (_744 * (cbMtdParam._m0[17u].x - _576)) + _576;
    float _752 = (_744 * (cbMtdParam._m0[17u].y - _578)) + _578;
    float _753 = (_744 * (cbMtdParam._m0[17u].z - _580)) + _580;
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _781 = _779.x;
    float _798 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _781) * _473) + _781;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _798) * _546) + _798;
    float _819 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _815) * cbMtdParam._m0[19u].z) + _815;
    float _821 = _819 - (_819 * _744);
    float _826 = (((_597.z - _675) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _675;
    float _830 = ((_699.z - _826) * cbMtdParam._m0[19u].w) + _826;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _850 = (_843.x * 2.0) + (-1.0);
    float _851 = (_843.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _3951 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _860 = (_744 * (_843.z - _830)) + _830;
    float _869 = (_678 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_597.x * 2.0) + (-1.0)))) + (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _870 = (_679 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_597.y * 2.0) + (-1.0)))) + (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _882 = (((_850 - _869) + (cbMtdParam._m0[21u].x * _869)) * _744) + _869;
    float _883 = (((_851 - _870) + (cbMtdParam._m0[21u].x * _870)) * _744) + _870;
    float _884 = (_744 * (sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) - _685)) + _685;
    float _888 = cbMtdParam._m0[22u].x + _699.w;
    float _891 = fma(_884, _248 * NORMAL.x, fma(_883, _255 * TANGENT.x, (_241 * _233) * _882));
    float _894 = fma(_884, _248 * NORMAL.y, fma(_883, _255 * TANGENT.y, (_241 * _234) * _882));
    float _897 = fma(_884, _248 * NORMAL.z, fma(_883, _255 * TANGENT.z, (_241 * _235) * _882));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    float _3962 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _905 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _3984 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _3995 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4006 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4017 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _910 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _924 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _975 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _965);
    float _976 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _965);
    float _977 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _965);
    float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
    float _982 = _975 * _981;
    float _983 = _976 * _981;
    float _984 = _977 * _981;
    vec4 _989 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _991 = _989.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1163 = sqrt(((_975 * _975) + (_976 * _976)) + (_977 * _977));
        float _1169 = (cbMatDynParam._m0[5u].x * _1163) + cbMatDynParam._m0[5u].y;
        float _4028 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1174 = (cbMatDynParam._m0[5u].z * _1163) + cbMatDynParam._m0[5u].w;
        float _4039 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) - _1170)) + _1170) < ((_991 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1002 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1003 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1021 = fma(_904, cbSceneParam._m0[5u].z, fma(_903, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _902));
    float _1024 = fma(_904, cbSceneParam._m0[6u].z, fma(_903, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _902));
    float _1027 = fma(_904, cbSceneParam._m0[7u].z, fma(_903, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _902));
    uint _1040 = _282 + 9u;
    uint _1041 = _1040 + uint(cbMatDynParam._m0[0u].w);
    float _1047 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_1041].x;
    float _1048 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_1041].y;
    float _1049 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1041].z;
    float _4050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1053 = 1.0 - _910;
    float _1054 = _1050 * _1053;
    float _1055 = _1051 * _1053;
    float _1056 = _1052 * _1053;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _910;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _910;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _910;
    float _1064 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    vec4 _1076 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1002, cbSceneParam._m0[86u].y * _1003));
    float _1080 = ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * TEXCOORD_5.w) * _1076.x;
    float _1081 = dot(vec3(_902, _903, _904), vec3(_982, _983, _984));
    float _1084 = _1081 * 2.0;
    float _1088 = (_1084 * _902) - _982;
    float _1089 = (_1084 * _903) - _983;
    float _1090 = (_1084 * _904) - _984;
    float _1094 = abs(dot(vec3(_982, _983, _984), vec3(_902, _903, _904)));
    float _4083 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1096 = sqrt(_905);
    float _1109 = exp2((_1096 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1096 * 3.0));
    float _1115 = (1.0 - _1109) * ((_1096 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1116 = _1109 * _1096;
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1481;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1206 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1210 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1214 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1239 = _1144 + _902;
        float _1240 = _1148 + _903;
        float _1241 = _1152 + _904;
        float _1251 = fma(_1241, cbModelParam._m0[26u].z, fma(_1240, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1239)) - _1206;
        float _1252 = fma(_1241, cbModelParam._m0[27u].z, fma(_1240, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1239)) - _1210;
        float _1253 = fma(_1241, cbModelParam._m0[28u].z, fma(_1240, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1239)) - _1214;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1206 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1210 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[34u].z) + ((((((_1214 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1309 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1275.x + (-0.5));
        float _1311 = _1309 * (_1275.y + (-0.5));
        float _1312 = _1309 * (_1275.z + (-0.5));
        float _1319 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1282.x + (-0.5));
        float _1321 = _1319 * (_1282.y + (-0.5));
        float _1322 = _1319 * (_1282.z + (-0.5));
        float _1329 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1289.x + (-0.5));
        float _1331 = _1329 * (_1289.y + (-0.5));
        float _1332 = _1329 * (_1289.z + (-0.5));
        float _1339 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1296.x + (-0.5));
        float _1341 = _1339 * (_1296.y + (-0.5));
        float _1342 = _1339 * (_1296.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1363 = (dot(vec3(_902, _903, _904), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1373 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4131 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1375 + 1.0))) + _1380) * _1343;
        float _1390 = _1311 * 0.5;
        float _1391 = _1321 * 0.5;
        float _1392 = _1331 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_902, _903, _904), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4164 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1417 + 1.0))) + _1422) * _1344;
        float _1432 = _1312 * 0.5;
        float _1433 = _1322 * 0.5;
        float _1434 = _1332 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_902, _903, _904), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4197 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1459 + 1.0))) + _1464) * _1345;
        _1481 = _1312;
        _1483 = _1311;
        _1484 = _1310;
        _1485 = _1322;
        _1486 = _1321;
        _1487 = _1320;
        _1488 = _1332;
        _1489 = _1331;
        _1490 = _1330;
        _1491 = _1345;
        _1492 = _1344;
        _1493 = _1343;
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1482;
        _1483 = _1482;
        _1484 = _1482;
        _1485 = _1482;
        _1486 = _1482;
        _1487 = _1482;
        _1488 = _1482;
        _1489 = _1482;
        _1490 = _1482;
        _1491 = _1482;
        _1492 = _1482;
        _1493 = _1482;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1523 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1527 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1531 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1554 = _1144 + _902;
        float _1555 = _1148 + _903;
        float _1556 = _1152 + _904;
        float _1566 = fma(_1556, cbModelParam._m0[30u].z, fma(_1555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1554)) - _1523;
        float _1567 = fma(_1556, cbModelParam._m0[31u].z, fma(_1555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1554)) - _1527;
        float _1568 = fma(_1556, cbModelParam._m0[32u].z, fma(_1555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1554)) - _1531;
        float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
        float _1585 = ((_1572 * _1566) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1523 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1572 * _1567) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1527 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1572 * _1568) / cbModelParam._m0[35u].z) + ((((((_1531 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        float _1622 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1589.x + (-0.5));
        float _1624 = _1622 * (_1589.y + (-0.5));
        float _1625 = _1622 * (_1589.z + (-0.5));
        float _1632 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1596.x + (-0.5));
        float _1634 = _1632 * (_1596.y + (-0.5));
        float _1635 = _1632 * (_1596.z + (-0.5));
        float _1642 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1603.x + (-0.5));
        float _1644 = _1642 * (_1603.y + (-0.5));
        float _1645 = _1642 * (_1603.z + (-0.5));
        float _1652 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1610.x + (-0.5));
        float _1654 = _1652 * (_1610.y + (-0.5));
        float _1655 = _1652 * (_1610.z + (-0.5));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = _1623 * 0.5;
        float _1660 = _1633 * 0.5;
        float _1661 = _1643 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_902, _903, _904), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4260 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1686 + 1.0))) + _1691) * _1656;
        float _1701 = _1624 * 0.5;
        float _1702 = _1634 * 0.5;
        float _1703 = _1644 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_902, _903, _904), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4293 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1728 + 1.0))) + _1733) * _1657;
        float _1743 = _1625 * 0.5;
        float _1744 = _1635 * 0.5;
        float _1745 = _1645 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_902, _903, _904), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4326 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1770 + 1.0))) + _1775) * _1658;
        _1792 = _1625;
        _1793 = _1624;
        _1794 = _1623;
        _1795 = _1635;
        _1796 = _1634;
        _1797 = _1633;
        _1798 = _1645;
        _1799 = _1644;
        _1800 = _1643;
        _1801 = _1658;
        _1802 = _1657;
        _1803 = _1656;
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
    }
    else
    {
        _1792 = _1482;
        _1793 = _1482;
        _1794 = _1482;
        _1795 = _1482;
        _1796 = _1482;
        _1797 = _1482;
        _1798 = _1482;
        _1799 = _1482;
        _1800 = _1482;
        _1801 = _1482;
        _1802 = _1482;
        _1803 = _1482;
        _1804 = 0.0;
        _1805 = 0.0;
        _1806 = 0.0;
    }
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1494)) + _1494;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1495)) + _1495;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1496)) + _1496;
    float _1839 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1816));
    float _1860 = _1088 * 0.5;
    float _1861 = _1089 * 0.5;
    float _1862 = _1090 * 0.5;
    float _1863 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1866 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1869 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1903;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1876 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1481, _1485, _1488, _1491));
        float _1880 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1884 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1891 = dot(vec4(cbModelParam._m0[39u]), vec4(_1860, _1861, _1862, 1.0));
        _1903 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1903 = 1.0;
    }
    float _1914;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1905 = dot(vec4(cbModelParam._m0[40u]), vec4(_1860, _1861, _1862, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1905) ? 0.0 : (isnan(0.0) ? _1905 : max(0.0, _1905))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1918 = (_1914 * cbModelParam._m0[1u].x) + (_1903 * (1.0 - cbModelParam._m0[1u].x));
    float _1928 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _905);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1928 : min(cbModelParam._m0[25u].z, _1928));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1090, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088));
        float _1991 = fma(_1090, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088));
        float _1994 = fma(_1090, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2022 = frontier_phi_17_15_ladder;
        }
        float _2225;
        if (_1991 > 0.0)
        {
            _2225 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2225 = frontier_phi_26_22_ladder;
        }
        float _2479;
        if (_1994 > 0.0)
        {
            _2479 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2479 = frontier_phi_38_33_ladder;
        }
        float _2481 = isnan(_2225) ? _2022 : (isnan(_2022) ? _2225 : min(_2022, _2225));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1988) + _1977;
        float _2487 = (_2482 * _1991) + _1981;
        float _2488 = (_2482 * _1994) + _1985;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2489;
        float _2493 = _2489 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 > _2493) || ((_2487 < _2491) || ((_2486 < _2491) || (_2486 > _2493))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2488, cbModelParam._m0[9u].z, fma(_2487, cbModelParam._m0[9u].y, _2486 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2488, cbModelParam._m0[10u].z, fma(_2487, cbModelParam._m0[10u].y, _2486 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2488, cbModelParam._m0[11u].z, fma(_2487, cbModelParam._m0[11u].y, _2486 * cbModelParam._m0[11u].x))), _1929);
            frontier_phi_16_38_ladder = _2616.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2616.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2616.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_16_38_ladder_2;
        _2012 = frontier_phi_16_38_ladder_1;
        _2014 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1088, _1089, _1090), _1929);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _905);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2073 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2077 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2081 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2084 = fma(_1090, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088));
        float _2087 = fma(_1090, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088));
        float _2090 = fma(_1090, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088));
        float _2230;
        if (_2084 > 0.0)
        {
            _2230 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2230 = frontier_phi_28_24_ladder;
        }
        float _2506;
        if (_2087 > 0.0)
        {
            _2506 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2506 = frontier_phi_40_35_ladder;
        }
        float _2719;
        if (_2090 > 0.0)
        {
            _2719 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2719 = frontier_phi_49_46_ladder;
        }
        float _2721 = isnan(_2506) ? _2230 : (isnan(_2230) ? _2506 : min(_2230, _2506));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2084) + _2073;
        float _2727 = (_2722 * _2087) + _2077;
        float _2728 = (_2722 * _2090) + _2081;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_25_49_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2109 = frontier_phi_25_49_ladder_2;
        _2111 = frontier_phi_25_49_ladder_1;
        _2113 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1088, _1089, _1090), _2019);
        _2109 = _2093.x * cbModelParam._m0[1u].z;
        _2111 = _2093.y * cbModelParam._m0[1u].z;
        _2113 = _2093.z * cbModelParam._m0[1u].z;
    }
    float _2126 = (((_1115 * _1064) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2128 = (((_1115 * _1066) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2130 = (((_1115 * _1067) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2133 = fma(_2130, cbSceneParam._m0[89u].z, fma(_2128, cbSceneParam._m0[89u].y, _2126 * cbSceneParam._m0[89u].x));
    float _2136 = fma(_2130, cbSceneParam._m0[90u].z, fma(_2128, cbSceneParam._m0[90u].y, _2126 * cbSceneParam._m0[90u].x));
    float _2139 = fma(_2130, cbSceneParam._m0[91u].z, fma(_2128, cbSceneParam._m0[91u].y, _2126 * cbSceneParam._m0[91u].x));
    uvec4 _2149 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2151 = _2149.x * 14u;
    uint _2152 = _2151 + 13u;
    float _2159 = _1080 + (-1.0);
    float _2164 = (cbLight._m0[_2152].x * _2159) + 1.0;
    float _2165 = (cbLight._m0[_2152].y * _2159) + 1.0;
    float _2166 = (cbLight._m0[_2152].z * _2159) + 1.0;
    float _2167 = (cbLight._m0[_2152].w * _2159) + 1.0;
    uint _2168 = _2151 + 5u;
    float _2174 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2178 = _2151 + 4u;
    float _2184 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2188 = _2151 | 1u;
    float _2199 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_902, _903, _904));
    float _2202 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_902, _903, _904));
    float _4462 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _4473 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2207 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2209 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2216 = ((cbLight._m0[_2168].x * _2174) * _2209) + ((cbLight._m0[_2178].x * _2184) * _2207);
    float _2217 = ((_2174 * cbLight._m0[_2168].y) * _2209) + ((_2184 * cbLight._m0[_2178].y) * _2207);
    float _2218 = ((_2174 * cbLight._m0[_2168].z) * _2209) + ((_2184 * cbLight._m0[_2178].z) * _2207);
    uvec4 _2222 = floatBitsToUint(cbLight._m0[_2151 + 12u]);
    bool _2224 = _2222.x == 0u;
    float _2235;
    float _2237;
    float _2239;
    if (_2224)
    {
        _2235 = _2216;
        _2237 = _2217;
        _2239 = _2218;
    }
    else
    {
        uint _2243 = _2151 + 6u;
        float _2259 = (dot(vec3(cbLight._m0[_2151 + 2u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4484 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2262 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2235 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2216;
        _2237 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2217;
        _2239 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2218;
    }
    bool _2242 = _2222.y == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2242)
    {
        _2280 = _2235;
        _2282 = _2237;
        _2284 = _2239;
    }
    else
    {
        uint _2450 = _2151 + 7u;
        float _2466 = (dot(vec3(cbLight._m0[_2151 + 3u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2467 = _2466 * _2466;
        float _4500 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2468 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2469 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2280 = (((cbLight._m0[_2450].x * 0.3183098733425140380859375) * _2468) * _2469) + _2235;
        _2282 = (((cbLight._m0[_2450].y * 0.3183098733425140380859375) * _2468) * _2469) + _2237;
        _2284 = (((cbLight._m0[_2450].z * 0.3183098733425140380859375) * _2468) * _2469) + _2239;
    }
    uint _2287 = _2151 + 8u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _905) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2151].x + _982;
    float _2303 = cbLight._m0[_2151].y + _983;
    float _2304 = cbLight._m0[_2151].z + _984;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2151].xyz));
    float _4516 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _4527 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2316 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2317 = dot(vec3(_902, _903, _904), vec3(_2309, _2310, _2311));
    float _4538 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2309, _2310, _2311));
    float _4549 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2301 * _2301;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
    float _2338 = 0.959999978542327880859375 - _1061;
    float _2340 = 0.959999978542327880859375 - _1062;
    float _2341 = 0.959999978542327880859375 - _1063;
    float _2348 = 1.0 - _2301;
    float _2359 = (0.5 / (((_2316 * ((_2315 * _2348) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2348) + _2301) * _2315))) * _2315;
    float _4560 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2361 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    uint _2372 = _2151 + 9u;
    float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _905) * 0.949999988079071044921875);
    float _2384 = _2383 * _2383;
    float _2385 = cbLight._m0[_2188].x + _982;
    float _2386 = cbLight._m0[_2188].y + _983;
    float _2387 = cbLight._m0[_2188].z + _984;
    float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
    float _2392 = _2391 * _2385;
    float _2393 = _2391 * _2386;
    float _2394 = _2391 * _2387;
    float _2395 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2188].xyz));
    float _4571 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2399 = dot(vec3(_902, _903, _904), vec3(_2392, _2393, _2394));
    float _4582 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2392, _2393, _2394));
    float _4593 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2384 * _2384;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
    float _2425 = 1.0 - _2384;
    float _2435 = (0.5 / (((_2316 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2425) + _2384) * _2398))) * _2398;
    float _4604 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2437 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    float _2447 = (((((_2418 * _2338) + _1064) * cbLight._m0[_2372].x) * _2437) * _2174) + (((((_2337 * _2338) + _1064) * cbLight._m0[_2287].x) * _2361) * _2184);
    float _2448 = (((((_2418 * _2340) + _1066) * cbLight._m0[_2372].y) * _2437) * _2174) + (((((_2337 * _2340) + _1066) * cbLight._m0[_2287].y) * _2361) * _2184);
    float _2449 = (((((_2418 * _2341) + _1067) * cbLight._m0[_2372].z) * _2437) * _2174) + (((((_2337 * _2341) + _1067) * cbLight._m0[_2287].z) * _2361) * _2184);
    float _2511;
    float _2513;
    float _2515;
    if (_2224)
    {
        _2511 = _2447;
        _2513 = _2448;
        _2515 = _2449;
    }
    else
    {
        uint _2517 = _2151 + 2u;
        uint _2521 = _2151 + 10u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _905) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _982;
        float _2538 = cbLight._m0[_2517].y + _983;
        float _2539 = cbLight._m0[_2517].z + _984;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2517].xyz));
        float _4615 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2551 = dot(vec3(_902, _903, _904), vec3(_2544, _2545, _2546));
        float _4626 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4637 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
        float _2577 = 1.0 - _2536;
        float _2587 = (0.5 / (((_2316 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2577) + _2536) * _2550))) * _2550;
        float _4648 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2511 = (((((_2570 * _2338) + _1064) * cbLight._m0[_2521].x) * _2589) * _2590) + _2447;
        _2513 = (((((_2570 * _2340) + _1066) * cbLight._m0[_2521].y) * _2589) * _2590) + _2448;
        _2515 = (((((_2570 * _2341) + _1067) * cbLight._m0[_2521].z) * _2589) * _2590) + _2449;
    }
    float _2625;
    float _2627;
    float _2629;
    if (_2242)
    {
        _2625 = _2511;
        _2627 = _2513;
        _2629 = _2515;
    }
    else
    {
        uint _2636 = _2151 + 3u;
        uint _2640 = _2151 + 11u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _905) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _982;
        float _2657 = cbLight._m0[_2636].y + _983;
        float _2658 = cbLight._m0[_2636].z + _984;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2636].xyz));
        float _4664 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2670 = dot(vec3(_902, _903, _904), vec3(_2663, _2664, _2665));
        float _4675 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4686 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0);
        float _2696 = 1.0 - _2655;
        float _2706 = (0.5 / (((_2316 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2696) + _2655) * _2669))) * _2669;
        float _4697 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2625 = (((((_2689 * _2338) + _1064) * cbLight._m0[_2640].x) * _2708) * _2709) + _2511;
        _2627 = (((((_2689 * _2340) + _1066) * cbLight._m0[_2640].y) * _2708) * _2709) + _2513;
        _2629 = (((((_2689 * _2341) + _1067) * cbLight._m0[_2640].z) * _2708) * _2709) + _2515;
    }
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_2149.y == 0u)
    {
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2784;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2784;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2784;
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1003) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _1002) / _2800)));
        float _2821 = (log2(_2787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            uint _3091 = 0u;
            uint _3100;
            bool _3101;
            for (;;)
            {
                _3100 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                _3101 = _3100 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3101)
                {
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                else
                {
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    uint _3236;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3100;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    for (;;)
                    {
                        uint _3240 = uint(findLSB(_3236)) + (_3091 << 5u);
                        uint _3237 = (_3236 + 4294967295u) & _3236;
                        uint _3242 = _3240 * 48u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3262 = (_3240 * 48u) + 4u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3281 = (_3240 * 48u) + 8u;
                        vec3 _3292 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x));
                        float _3296 = _3256.x - _2785;
                        float _3297 = _3256.y - _2786;
                        float _3298 = _3256.z - _2787;
                        float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                        float _3302 = inversesqrt(_3299);
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3306 = dot(vec3(_1021, _1024, _1027), vec3(_3303, _3304, _3305));
                        float _3311 = 1.0 - (_3299 * _3256.w);
                        float _4723 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3313 = sqrt(_3299) * _3275.w;
                        float _3316 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3306) + _3317;
                        float _3323 = _3313 * _3313;
                        float _3327 = ((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3312) / ((_3323 * 0.699999988079071044921875) + 1.0);
                        float _3331 = (-0.0) - _2785;
                        float _3332 = (-0.0) - _2786;
                        float _3333 = (-0.0) - _2787;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3348 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _1096;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_1021, _1024, _1027), vec3(_3338, _3339, _3340));
                        float _4739 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3373 = dot(vec3(_1021, _1024, _1027), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4750 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3316 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3306) + _3382;
                        float _4761 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4772 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3380 * _3380) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125))) * _3312;
                        _3160 = (_3327 * _3275.x) + _3233;
                        _3161 = (_3327 * _3275.y) + _3234;
                        _3162 = (_3327 * _3275.z) + _3235;
                        _3157 = (_3408 * _3292.x) + _3230;
                        _3158 = (_3408 * _3292.y) + _3231;
                        _3159 = (_3408 * _3292.z) + _3232;
                        if (_3237 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3237;
                        }
                    }
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                _2933 = frontier_phi_66_pred;
                _2943 = frontier_phi_66_pred_1;
                _2941 = frontier_phi_66_pred_2;
                _2939 = frontier_phi_66_pred_3;
                _2937 = frontier_phi_66_pred_4;
                _2935 = frontier_phi_66_pred_5;
                uint _3092 = _3091 + 1u;
                if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3085 = _2933;
                    _3086 = _2935;
                    _3087 = _2937;
                    _3088 = _2939;
                    _3089 = _2941;
                    _3090 = _2943;
                    _3091 = _3092;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((4294967295u << _2949) & _2831) == 0u)
        {
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
            _3061 = _2940;
            _3063 = _2942;
        }
        else
        {
            float _3078 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
            float _3079 = _3078 * _2785;
            float _3080 = _3078 * _2786;
            float _3081 = _3078 * _2787;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3213 = _2932;
                float _3214 = _2934;
                float _3215 = _2936;
                float _3216 = _2938;
                float _3217 = _2940;
                float _3218 = _2942;
                uint _3219 = _2949;
                uint _3228;
                bool _3229;
                for (;;)
                {
                    _3228 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                    _3229 = _3228 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3229)
                    {
                        frontier_phi_77_pred = _3218;
                        frontier_phi_77_pred_1 = _3217;
                        frontier_phi_77_pred_2 = _3216;
                        frontier_phi_77_pred_3 = _3215;
                        frontier_phi_77_pred_4 = _3214;
                        frontier_phi_77_pred_5 = _3213;
                    }
                    else
                    {
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        uint _3441 = _3228;
                        uint _3442;
                        vec4 _3467;
                        float _3468;
                        vec4 _3483;
                        vec3 _3495;
                        vec4 _3510;
                        vec4 _3525;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3452 = ((_3219 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3441));
                            _3442 = (_3441 + 4294967295u) & _3441;
                            uint _3454 = _3452 * 40u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3468 = _3467.w;
                            uint _3470 = (_3452 * 40u) + 4u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3452 * 40u) + 8u;
                            _3495 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x));
                            uint _3497 = (_3452 * 40u) + 16u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3452 * 40u) + 20u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3452 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3452 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_2787, _3559.z, fma(_2786, _3559.y, _3559.x * _2785)) + _3559.w;
                            _3572 = !((fma(_2787, _3540.z, fma(_2786, _3540.y, _3540.x * _2785)) + _3540.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3467.x - _2785;
                                float _3600 = _3467.y - _2786;
                                float _3601 = _3467.z - _2787;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3468 * _3468));
                                float _4783 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3617 = sqrt(_3602) * _3483.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_1021, _1024, _1027))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_2787, _3510.z, fma(_2786, _3510.y, _3510.x * _2785)) + _3510.w) / _3571;
                                float _3631 = (fma(_2787, _3525.z, fma(_2786, _3525.y, _3525.x * _2785)) + _3525.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4799 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _1096;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3079;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_1021, _1024, _1027), vec3((-0.0) - _3079, (-0.0) - _3080, (-0.0) - _3081));
                                float _4810 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3674 = dot(vec3(_1021, _1024, _1027), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4821 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_1021, _1024, _1027), vec3(_3606, _3607, _3608))) + _3683;
                                float _4832 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4843 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3637 * _3483.y;
                                frontier_phi_83_pred_1 = _3637 * _3483.x;
                                frontier_phi_83_pred_2 = _3711 * _3495.z;
                                frontier_phi_83_pred_3 = _3711 * _3495.y;
                                frontier_phi_83_pred_4 = _3711 * _3495.x;
                                frontier_phi_83_pred_5 = _3637 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_83_pred;
                            _3718 = frontier_phi_83_pred_1;
                            _3717 = frontier_phi_83_pred_2;
                            _3716 = frontier_phi_83_pred_3;
                            _3715 = frontier_phi_83_pred_4;
                            _3720 = frontier_phi_83_pred_5;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            if (_3442 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3442;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3427;
                        frontier_phi_77_pred_1 = _3426;
                        frontier_phi_77_pred_2 = _3425;
                        frontier_phi_77_pred_3 = _3424;
                        frontier_phi_77_pred_4 = _3423;
                        frontier_phi_77_pred_5 = _3422;
                    }
                    _3064 = frontier_phi_77_pred;
                    _3062 = frontier_phi_77_pred_1;
                    _3060 = frontier_phi_77_pred_2;
                    _3058 = frontier_phi_77_pred_3;
                    _3056 = frontier_phi_77_pred_4;
                    _3054 = frontier_phi_77_pred_5;
                    uint _3220 = _3219 + 1u;
                    if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3213 = _3054;
                        _3214 = _3056;
                        _3215 = _3058;
                        _3216 = _3060;
                        _3217 = _3062;
                        _3218 = _3064;
                        _3219 = _3220;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3058;
                frontier_phi_58_59_ladder_1 = _3064;
                frontier_phi_58_59_ladder_2 = _3062;
                frontier_phi_58_59_ladder_3 = _3060;
                frontier_phi_58_59_ladder_4 = _3056;
                frontier_phi_58_59_ladder_5 = _3054;
            }
            else
            {
                frontier_phi_58_59_ladder = _2936;
                frontier_phi_58_59_ladder_1 = _2942;
                frontier_phi_58_59_ladder_2 = _2940;
                frontier_phi_58_59_ladder_3 = _2938;
                frontier_phi_58_59_ladder_4 = _2934;
                frontier_phi_58_59_ladder_5 = _2932;
            }
            _3053 = frontier_phi_58_59_ladder_5;
            _3055 = frontier_phi_58_59_ladder_4;
            _3057 = frontier_phi_58_59_ladder;
            _3059 = frontier_phi_58_59_ladder_3;
            _3061 = frontier_phi_58_59_ladder_2;
            _3063 = frontier_phi_58_59_ladder_1;
        }
        float _3068 = isnan(1.0) ? _1080 : (isnan(_1080) ? 1.0 : min(_1080, 1.0));
        _2844 = (_3068 * _3059) + _2280;
        _2846 = (_3068 * _3061) + _2282;
        _2848 = (_3068 * _3063) + _2284;
        _2850 = ((_3053 * _1064) * _3068) + _2625;
        _2852 = ((_3055 * _1066) * _3068) + _2627;
        _2854 = ((_3057 * _1067) * _3068) + _2629;
    }
    else
    {
        _2844 = _2280;
        _2846 = _2282;
        _2848 = _2284;
        _2850 = _2625;
        _2852 = _2627;
        _2854 = _2629;
    }
    float _4859 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4870 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _4881 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _2871 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2844 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1080))) + ((_2850 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1918)) * cbPerFrame._m0[3u].x);
    float _2872 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2846 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1080))) + ((_2852 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1918)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2848 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1080))) + ((_2854 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1918)) * cbPerFrame._m0[3u].x);
    uint _2874 = _282 + 6u;
    float _2882 = _1002 / cbSceneParam._m0[86u].x;
    float _2883 = _1003 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _924 : (isnan(_924) ? cbSceneParam._m0[77u].w : min(_924, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_924 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_924) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _924 : min(cbSceneParam._m0[80u].w, _924));
        float _2958 = _2957 / _924;
        float _2969 = _2958 * _975;
        float _2970 = _976 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2973 = _2958 * _977;
        float _2975 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2976 = _2975 + cbSceneParam._m0[79u].w;
        float _2977 = cbSceneParam._m0[79u].w - _2970;
        float _2983 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2973 * _2973));
        float _2986 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2983;
        float _2991 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2993 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3170;
        if (abs((_2971 - _2975) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3170 = ((((_2976 > 0.0) ? exp2(_2991 * _2976) : (2.0 - exp2(_2993 * _2976))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2986;
        }
        else
        {
            float _3114 = 1.0 / cbSceneParam._m0[80u].x;
            float _3115 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : max(_2976, _2977));
            float _3116 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : min(_2976, _2977));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            _3170 = ((abs(_2983 / _2971) * cbSceneParam._m0[80u].y) * ((((_3125 - _3126) * 2.0) - ((exp2(_2991 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0)))) - exp2(_2991 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))))) * _3114)) - ((exp2(_2993 * _3125) - exp2(_2993 * _3126)) * _3114))) + (_2986 * cbSceneParam._m0[80u].z);
        }
        vec4 _3172 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3181 = exp2((_3170 * (-1.44269502162933349609375)) * (1.0 - _3172.w));
        float _3182 = log2(_3181);
        float _3198 = log2(_2902);
        _2995 = (exp2(_3198 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].x)) * _3172.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2997 = (exp2(_3198 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].y)) * _3172.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2999 = (exp2(_3198 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].z)) * _3172.z) / cbSceneParam._m0[78u].z)) + _2901;
        _3001 = _3181 * _2902;
    }
    else
    {
        _2995 = _2899;
        _2997 = _2900;
        _2999 = _2901;
        _3001 = _2902;
    }
    bool _3208;
    vec4 _3011;
    vec4 _3033;
    float _3035;
    float _3039;
    float _3040;
    float _3041;
    float _3042;
    bool _3052;
    for (;;)
    {
        _3011 = cbMatDynParam._m0[0u];
        float _3013 = roundEven(_3011.y);
        bool _3014 = _3013 == 3.0;
        float _3015 = log2(_3001);
        float _3022 = exp2(_3015 * cbSceneParam._m0[78u].x) * _2871;
        float _3023 = exp2(_3015 * cbSceneParam._m0[78u].y) * _2872;
        float _3024 = exp2(_3015 * cbSceneParam._m0[78u].z) * _2873;
        float _3031 = _991 + (-0.5);
        _3033 = cbMtdParam._m0[1u];
        _3035 = _3033.y * _3031;
        float _3038 = (_3013 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3039 = _3038 * (_3014 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2995)));
        _3040 = _3038 * (_3014 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2997)));
        _3041 = _3038 * (_3014 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2999)));
        _3042 = _3031 * 0.999000012874603271484375;
        _3052 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3052)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3042) < 0.5)
            {
                _3208 = true;
                break;
            }
        }
        uint _3149 = _1040 + uint(_3011.w);
        if ((cbInstanceData._m0[_3149].w < 1.0) && ((cbInstanceData._m0[_3149].w + _3042) < 0.5))
        {
            _3208 = true;
            break;
        }
        if ((_3035 + 1.0) < _3033.x)
        {
            _3208 = true;
            break;
        }
        _3208 = false;
        break;
    }
    float _3413;
    if (_3208)
    {
        discard_state = true;
        _3413 = 0.0;
    }
    else
    {
        _3413 = cbInstanceData._m0[_2874].w;
    }
    SV_Target.x = _3039;
    SV_Target.y = _3040;
    SV_Target.z = _3041;
    SV_Target.w = _3413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
    discard_exit();
}


