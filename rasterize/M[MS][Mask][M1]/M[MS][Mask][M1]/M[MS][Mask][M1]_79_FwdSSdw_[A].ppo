#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1628;
float _4031;
float _4032;
float _4033;
float _4034;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _257 = _256 * _248;
    float _258 = _256 * _249;
    float _259 = _256 * _250;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4043 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4054 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4065 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4076 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _493 = (_486 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _494 = (_486 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _495 = (_486 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4087 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _569 = (_351.x * cbMtdParam._m0[9u].x) * ((_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493);
    float _570 = (_351.y * cbMtdParam._m0[9u].y) * ((_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494);
    float _571 = (_351.z * cbMtdParam._m0[9u].z) * ((_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495);
    float _575 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _569;
    float _578 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _570;
    float _581 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _571;
    float _589 = (((_569 - _575) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) + _575) * 4.55000019073486328125;
    float _591 = (((_570 - _578) * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) + _578) * 4.55000019073486328125;
    float _593 = (((_571 - _581) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) + _581) * 4.55000019073486328125;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _654 = _652.x;
    float _655 = _652.y;
    float _656 = _652.z;
    float _663 = ((_635.x - _654) * _486) + _654;
    float _664 = ((_635.y - _655) * _486) + _655;
    float _665 = ((_635.z - _656) * _486) + _656;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _690 = ((_677.z - _665) * _559) + _665;
    float _693 = ((((_677.x - _663) * _559) + _663) * 2.0) + (-1.0);
    float _694 = ((((_677.y - _664) * _559) + _664) * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _4098 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _730 = (_693 + ((((_610.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_718.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _731 = (_694 + ((((_610.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_718.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _734 = fma(_700, _264, fma(_731, _271, _730 * _257));
    float _737 = fma(_700, _265, fma(_731, _272, _730 * _258));
    float _740 = fma(_700, _266, fma(_731, _273, _730 * _259));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _773 = _771.x;
    float _774 = 1.0 - _773;
    float _783 = (cbMtdParam._m0[19u].x + dot(vec4(_744 * _734, _744 * _737, _744 * _740, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_773 - _774) * cbMtdParam._m0[24u].z) + _774) * cbMtdParam._m0[21u].z);
    float _4109 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _784 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _786 = (-0.0) - cbMtdParam._m0[24u].x;
    float _788 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
    float _796 = _784 - ((_784 * TEXCOORD_8.x) * _789);
    float _797 = _784 - ((_784 * TEXCOORD_8.y) * _789);
    float _798 = _784 - ((_784 * TEXCOORD_8.z) * _789);
    float _805 = (_796 * (cbMtdParam._m0[17u].x - _589)) + _589;
    float _806 = (_797 * (cbMtdParam._m0[17u].y - _591)) + _591;
    float _807 = (_798 * (cbMtdParam._m0[17u].z - _593)) + _593;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _821 = _819.x;
    float _822 = 1.0 - _821;
    float _848 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_821 - _822) * cbMtdParam._m0[24u].w) + _822) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4130 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _849 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _857 = ((((cbMtdParam._m0[10u].x - _805) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _849) + _805;
    float _858 = ((((cbMtdParam._m0[10u].y - _806) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _849) + _806;
    float _859 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _807)) * _849) + _807;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _887 = _885.x;
    float _904 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _887) * _486) + _887;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _904) * _559) + _904;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _921) * cbMtdParam._m0[19u].z) + _921;
    float _927 = _925 - (_925 * _796);
    float _929 = _927 - (_927 * _849);
    float _934 = (((_610.z - _690) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _690;
    float _938 = ((_718.z - _934) * cbMtdParam._m0[19u].w) + _934;
    vec4 _952 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _959 = (_952.x * 2.0) + (-1.0);
    float _960 = (_952.y * 2.0) + (-1.0);
    float _961 = dot(vec2(_959, _960), vec2(_959, _960));
    float _4141 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _969 = ((_952.z - _938) * _796) + _938;
    float _972 = ((cbMtdParam._m0[23u].x - _969) * _849) + _969;
    vec4 _993 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _999 = (_993.x * 2.0) + (-1.0);
    float _1000 = (_993.y * 2.0) + (-1.0);
    float _1001 = dot(vec2(_999, _1000), vec2(_999, _1000));
    float _4152 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1016 = ((sqrt(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) - _700) * _798) + _700;
    float _1019 = (((_959 - _730) * _796) + _730) + (cbMtdParam._m0[21u].x * _730);
    float _1020 = (((_960 - _731) * _797) + _731) + (cbMtdParam._m0[21u].x * _731);
    float _1031 = (((_999 - _1019) + (_1019 * cbMtdParam._m0[22u].z)) * _849) + _1019;
    float _1032 = (((_1000 - _1020) + (_1020 * cbMtdParam._m0[22u].z)) * _849) + _1020;
    float _1033 = (_849 * (sqrt(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) - _1016)) + _1016;
    float _1035 = cbMtdParam._m0[22u].x + _718.w;
    float _1038 = fma(_1033, _264, fma(_1032, _271, _1031 * _257));
    float _1041 = fma(_1033, _265, fma(_1032, _272, _1031 * _258));
    float _1044 = fma(_1033, _266, fma(_1032, _273, _1031 * _259));
    float _1048 = inversesqrt(dot(vec3(_1038, _1041, _1044), vec3(_1038, _1041, _1044)));
    float _1049 = _1048 * _1038;
    float _1050 = _1048 * _1041;
    float _1051 = _1048 * _1044;
    float _4163 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _1052 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4185 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4196 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4207 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4218 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1057 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _1071 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1121 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1111);
    float _1122 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1111);
    float _1123 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1111);
    float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
    float _1128 = _1121 * _1127;
    float _1129 = _1122 * _1127;
    float _1130 = _1123 * _1127;
    vec4 _1135 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1137 = _1135.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1309 = sqrt(((_1121 * _1121) + (_1122 * _1122)) + (_1123 * _1123));
        float _1315 = (cbMatDynParam._m0[5u].x * _1309) + cbMatDynParam._m0[5u].y;
        float _4229 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1320 = (cbMatDynParam._m0[5u].z * _1309) + cbMatDynParam._m0[5u].w;
        float _4240 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) - _1316)) + _1316) < ((_1137 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1148 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1149 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1167 = fma(_1051, cbSceneParam._m0[5u].z, fma(_1050, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1049));
    float _1170 = fma(_1051, cbSceneParam._m0[6u].z, fma(_1050, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1049));
    float _1173 = fma(_1051, cbSceneParam._m0[7u].z, fma(_1050, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1049));
    uint _1186 = _295 + 9u;
    uint _1187 = _1186 + uint(cbMatDynParam._m0[0u].w);
    float _1193 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * cbInstanceData._m0[_1187].x;
    float _1194 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * cbInstanceData._m0[_1187].y;
    float _1195 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * cbInstanceData._m0[_1187].z;
    float _4251 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _1199 = 1.0 - _1057;
    float _1200 = _1196 * _1199;
    float _1201 = _1197 * _1199;
    float _1202 = _1198 * _1199;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1057;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1057;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1057;
    float _1210 = _1207 + 0.039999999105930328369140625;
    float _1212 = _1208 + 0.039999999105930328369140625;
    float _1213 = _1209 + 0.039999999105930328369140625;
    vec4 _1222 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1148, cbSceneParam._m0[86u].y * _1149));
    float _1226 = ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * TEXCOORD_5.w) * _1222.x;
    float _1227 = dot(vec3(_1049, _1050, _1051), vec3(_1128, _1129, _1130));
    float _1230 = _1227 * 2.0;
    float _1234 = (_1230 * _1049) - _1128;
    float _1235 = (_1230 * _1050) - _1129;
    float _1236 = (_1230 * _1051) - _1130;
    float _1240 = abs(dot(vec3(_1128, _1129, _1130), vec3(_1049, _1050, _1051)));
    float _4284 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1242 = sqrt(_1052);
    float _1255 = exp2((_1242 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1242 * 3.0));
    float _1261 = (1.0 - _1255) * ((_1242 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1262 = _1255 * _1242;
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1627;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1352 = fma(_1298, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290));
        float _1356 = fma(_1298, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290));
        float _1360 = fma(_1298, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290));
        float _1385 = _1290 + _1049;
        float _1386 = _1294 + _1050;
        float _1387 = _1298 + _1051;
        float _1397 = fma(_1387, cbModelParam._m0[26u].z, fma(_1386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1385)) - _1352;
        float _1398 = fma(_1387, cbModelParam._m0[27u].z, fma(_1386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1385)) - _1356;
        float _1399 = fma(_1387, cbModelParam._m0[28u].z, fma(_1386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1385)) - _1360;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1352 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1356 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[34u].z) + ((((((_1360 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1455 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1421.x + (-0.5));
        float _1457 = _1455 * (_1421.y + (-0.5));
        float _1458 = _1455 * (_1421.z + (-0.5));
        float _1465 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1428.x + (-0.5));
        float _1467 = _1465 * (_1428.y + (-0.5));
        float _1468 = _1465 * (_1428.z + (-0.5));
        float _1475 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1435.x + (-0.5));
        float _1477 = _1475 * (_1435.y + (-0.5));
        float _1478 = _1475 * (_1435.z + (-0.5));
        float _1485 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1442.x + (-0.5));
        float _1487 = _1485 * (_1442.y + (-0.5));
        float _1488 = _1485 * (_1442.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1509 = (dot(vec3(_1049, _1050, _1051), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1519 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4332 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1521 + 1.0))) + _1526) * _1489;
        float _1536 = _1457 * 0.5;
        float _1537 = _1467 * 0.5;
        float _1538 = _1477 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_1049, _1050, _1051), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4365 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1563 + 1.0))) + _1568) * _1490;
        float _1578 = _1458 * 0.5;
        float _1579 = _1468 * 0.5;
        float _1580 = _1478 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_1049, _1050, _1051), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4398 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1605 + 1.0))) + _1610) * _1491;
        _1627 = _1458;
        _1629 = _1457;
        _1630 = _1456;
        _1631 = _1468;
        _1632 = _1467;
        _1633 = _1466;
        _1634 = _1478;
        _1635 = _1477;
        _1636 = _1476;
        _1637 = _1491;
        _1638 = _1490;
        _1639 = _1489;
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1641 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1628;
        _1629 = _1628;
        _1630 = _1628;
        _1631 = _1628;
        _1632 = _1628;
        _1633 = _1628;
        _1634 = _1628;
        _1635 = _1628;
        _1636 = _1628;
        _1637 = _1628;
        _1638 = _1628;
        _1639 = _1628;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1669 = fma(_1298, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290));
        float _1673 = fma(_1298, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290));
        float _1677 = fma(_1298, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290));
        float _1700 = _1290 + _1049;
        float _1701 = _1294 + _1050;
        float _1702 = _1298 + _1051;
        float _1712 = fma(_1702, cbModelParam._m0[30u].z, fma(_1701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1700)) - _1669;
        float _1713 = fma(_1702, cbModelParam._m0[31u].z, fma(_1701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1700)) - _1673;
        float _1714 = fma(_1702, cbModelParam._m0[32u].z, fma(_1701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1700)) - _1677;
        float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
        float _1731 = ((_1718 * _1712) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1669 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1732 = ((_1718 * _1713) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1673 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1733 = ((_1718 * _1714) / cbModelParam._m0[35u].z) + ((((((_1677 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        float _1768 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1735.x + (-0.5));
        float _1770 = _1768 * (_1735.y + (-0.5));
        float _1771 = _1768 * (_1735.z + (-0.5));
        float _1778 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1742.x + (-0.5));
        float _1780 = _1778 * (_1742.y + (-0.5));
        float _1781 = _1778 * (_1742.z + (-0.5));
        float _1788 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1789 = _1788 * (_1749.x + (-0.5));
        float _1790 = _1788 * (_1749.y + (-0.5));
        float _1791 = _1788 * (_1749.z + (-0.5));
        float _1798 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1799 = _1798 * (_1756.x + (-0.5));
        float _1800 = _1798 * (_1756.y + (-0.5));
        float _1801 = _1798 * (_1756.z + (-0.5));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1805 = _1769 * 0.5;
        float _1806 = _1779 * 0.5;
        float _1807 = _1789 * 0.5;
        float _1808 = dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807));
        float _1813 = (_1808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1808);
        float _1821 = (dot(vec3(_1049, _1050, _1051), vec3(_1813 * _1805, _1813 * _1806, _1813 * _1807)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1830 = sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1832 = _1831 * 2.0;
        float _1836 = (1.0 - _1831) / (_1831 + 1.0);
        float _4461 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1846 = ((((1.0 - _1837) * (_1832 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1832 + 1.0))) + _1837) * _1802;
        float _1847 = _1770 * 0.5;
        float _1848 = _1780 * 0.5;
        float _1849 = _1790 * 0.5;
        float _1850 = dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849));
        float _1855 = (_1850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1850);
        float _1863 = (dot(vec3(_1049, _1050, _1051), vec3(_1855 * _1847, _1855 * _1848, _1855 * _1849)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1872 = sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1874 = _1873 * 2.0;
        float _1878 = (1.0 - _1873) / (_1873 + 1.0);
        float _4494 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1888 = ((((1.0 - _1879) * (_1874 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1874 + 1.0))) + _1879) * _1803;
        float _1889 = _1771 * 0.5;
        float _1890 = _1781 * 0.5;
        float _1891 = _1791 * 0.5;
        float _1892 = dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891));
        float _1897 = (_1892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1892);
        float _1905 = (dot(vec3(_1049, _1050, _1051), vec3(_1897 * _1889, _1897 * _1890, _1897 * _1891)) + 1.0) * 0.5;
        float _4505 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1914 = sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891)) / (_1804 + 9.9999997473787516355514526367188e-06);
        float _4516 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1916 = _1915 * 2.0;
        float _1920 = (1.0 - _1915) / (_1915 + 1.0);
        float _4527 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1930 = ((((1.0 - _1921) * (_1916 + 2.0)) * exp2(log2(isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_1916 + 1.0))) + _1921) * _1804;
        _1938 = _1771;
        _1939 = _1770;
        _1940 = _1769;
        _1941 = _1781;
        _1942 = _1780;
        _1943 = _1779;
        _1944 = _1791;
        _1945 = _1790;
        _1946 = _1789;
        _1947 = _1804;
        _1948 = _1803;
        _1949 = _1802;
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)));
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)));
        _1952 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)));
    }
    else
    {
        _1938 = _1628;
        _1939 = _1628;
        _1940 = _1628;
        _1941 = _1628;
        _1942 = _1628;
        _1943 = _1628;
        _1944 = _1628;
        _1945 = _1628;
        _1946 = _1628;
        _1947 = _1628;
        _1948 = _1628;
        _1949 = _1628;
        _1950 = 0.0;
        _1951 = 0.0;
        _1952 = 0.0;
    }
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1640)) + _1640;
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1641)) + _1641;
    float _1964 = (cbModelParam._m0[1u].x * (_1952 - _1642)) + _1642;
    float _1985 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1962));
    float _2006 = _1234 * 0.5;
    float _2007 = _1235 * 0.5;
    float _2008 = _1236 * 0.5;
    float _2009 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1940, _1943, _1946, _1949));
    float _2012 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2015 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2049;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2022 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1627, _1631, _1634, _1637));
        float _2026 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1629, _1632, _1635, _1638));
        float _2030 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1630, _1633, _1636, _1639));
        float _2037 = dot(vec4(cbModelParam._m0[39u]), vec4(_2006, _2007, _2008, 1.0));
        _2049 = dot(vec3(isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)), isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2037) ? 0.0 : (isnan(0.0) ? _2037 : max(0.0, _2037))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2049 = 1.0;
    }
    float _2060;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2051 = dot(vec4(cbModelParam._m0[40u]), vec4(_2006, _2007, _2008, 1.0));
        _2060 = dot(vec3(isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2051) ? 0.0 : (isnan(0.0) ? _2051 : max(0.0, _2051))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2060 = 1.0;
    }
    float _2064 = (_2060 * cbModelParam._m0[1u].x) + (_2049 * (1.0 - cbModelParam._m0[1u].x));
    float _2074 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1052);
    float _2075 = isnan(_2074) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2074 : min(cbModelParam._m0[25u].z, _2074));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2123 = fma(_1298, cbModelParam._m0[13u].z, fma(_1294, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1290)) + cbModelParam._m0[13u].w;
        float _2127 = fma(_1298, cbModelParam._m0[14u].z, fma(_1294, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1290)) + cbModelParam._m0[14u].w;
        float _2131 = fma(_1298, cbModelParam._m0[15u].z, fma(_1294, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1290)) + cbModelParam._m0[15u].w;
        float _2134 = fma(_1236, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1234));
        float _2137 = fma(_1236, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1234));
        float _2140 = fma(_1236, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1234));
        float _2168;
        if (_2134 > 0.0)
        {
            _2168 = abs((1.0 - _2123) / _2134);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2123 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2168 = frontier_phi_17_15_ladder;
        }
        float _2392;
        if (_2137 > 0.0)
        {
            _2392 = abs((1.0 - _2127) / _2137);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2127 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2392 = frontier_phi_26_22_ladder;
        }
        float _2649;
        if (_2140 > 0.0)
        {
            _2649 = abs((1.0 - _2131) / _2140);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2131 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2649 = frontier_phi_38_33_ladder;
        }
        float _2651 = isnan(_2392) ? _2168 : (isnan(_2168) ? _2392 : min(_2168, _2392));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _2134) + _2123;
        float _2657 = (_2652 * _2137) + _2127;
        float _2658 = (_2652 * _2140) + _2131;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2659;
        float _2663 = _2659 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 > _2663) || ((_2657 < _2661) || ((_2656 < _2661) || (_2656 > _2663))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2658, cbModelParam._m0[9u].z, fma(_2657, cbModelParam._m0[9u].y, _2656 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2658, cbModelParam._m0[10u].z, fma(_2657, cbModelParam._m0[10u].y, _2656 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2658, cbModelParam._m0[11u].z, fma(_2657, cbModelParam._m0[11u].y, _2656 * cbModelParam._m0[11u].x))), _2075);
            frontier_phi_16_38_ladder = _2786.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2786.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2786.x * cbModelParam._m0[1u].y;
        }
        _2156 = frontier_phi_16_38_ladder_2;
        _2158 = frontier_phi_16_38_ladder_1;
        _2160 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2144 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1234, _1235, _1236), _2075);
        _2156 = _2144.x * cbModelParam._m0[1u].y;
        _2158 = _2144.y * cbModelParam._m0[1u].y;
        _2160 = _2144.z * cbModelParam._m0[1u].y;
    }
    float _2164 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1052);
    float _2165 = isnan(_2164) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2164 : min(cbModelParam._m0[25u].w, _2164));
    float _2255;
    float _2257;
    float _2259;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2219 = fma(_1298, cbModelParam._m0[21u].z, fma(_1294, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1290)) + cbModelParam._m0[21u].w;
        float _2223 = fma(_1298, cbModelParam._m0[22u].z, fma(_1294, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1290)) + cbModelParam._m0[22u].w;
        float _2227 = fma(_1298, cbModelParam._m0[23u].z, fma(_1294, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1290)) + cbModelParam._m0[23u].w;
        float _2230 = fma(_1236, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1234));
        float _2233 = fma(_1236, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1234));
        float _2236 = fma(_1236, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1234));
        float _2397;
        if (_2230 > 0.0)
        {
            _2397 = abs((1.0 - _2219) / _2230);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2219 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2397 = frontier_phi_28_24_ladder;
        }
        float _2676;
        if (_2233 > 0.0)
        {
            _2676 = abs((1.0 - _2223) / _2233);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2223 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2676 = frontier_phi_40_35_ladder;
        }
        float _2889;
        if (_2236 > 0.0)
        {
            _2889 = abs((1.0 - _2227) / _2236);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2236 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2227 + 1.0) / _2236);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2889 = frontier_phi_49_46_ladder;
        }
        float _2891 = isnan(_2676) ? _2397 : (isnan(_2397) ? _2676 : min(_2397, _2676));
        float _2892 = isnan(_2889) ? _2891 : (isnan(_2891) ? _2889 : min(_2891, _2889));
        float _2896 = (_2892 * _2230) + _2219;
        float _2897 = (_2892 * _2233) + _2223;
        float _2898 = (_2892 * _2236) + _2227;
        float _2899 = _2892 * 9.9999997473787516355514526367188e-05;
        float _2900 = (-1.0) - _2899;
        float _2902 = _2899 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2898 > _2902) || ((_2898 < _2900) || ((_2897 > _2902) || ((_2897 < _2900) || ((_2896 < _2900) || (_2896 > _2902))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2898, cbModelParam._m0[17u].z, fma(_2897, cbModelParam._m0[17u].y, _2896 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2898, cbModelParam._m0[18u].z, fma(_2897, cbModelParam._m0[18u].y, _2896 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2898, cbModelParam._m0[19u].z, fma(_2897, cbModelParam._m0[19u].y, _2896 * cbModelParam._m0[19u].x))), _2165);
            frontier_phi_25_49_ladder = _3097.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3097.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3097.x * cbModelParam._m0[1u].z;
        }
        _2255 = frontier_phi_25_49_ladder_2;
        _2257 = frontier_phi_25_49_ladder_1;
        _2259 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2239 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1234, _1235, _1236), _2165);
        _2255 = _2239.x * cbModelParam._m0[1u].z;
        _2257 = _2239.y * cbModelParam._m0[1u].z;
        _2259 = _2239.z * cbModelParam._m0[1u].z;
    }
    float _2272 = (((_1261 * _1210) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2255 - _2156)) + _2156);
    float _2274 = (((_1261 * _1212) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2257 - _2158)) + _2158);
    float _2276 = (((_1261 * _1213) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2259 - _2160)) + _2160);
    float _2279 = fma(_2276, cbSceneParam._m0[89u].z, fma(_2274, cbSceneParam._m0[89u].y, _2272 * cbSceneParam._m0[89u].x));
    float _2282 = fma(_2276, cbSceneParam._m0[90u].z, fma(_2274, cbSceneParam._m0[90u].y, _2272 * cbSceneParam._m0[90u].x));
    float _2285 = fma(_2276, cbSceneParam._m0[91u].z, fma(_2274, cbSceneParam._m0[91u].y, _2272 * cbSceneParam._m0[91u].x));
    vec4 _2293 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1148, _1149));
    float _2295 = _2293.w;
    float _2307 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2295);
    float _2308 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2295);
    float _2309 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2295);
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2323 = _1226 + (-1.0);
    float _2328 = (cbLight._m0[_2316].x * _2323) + 1.0;
    float _2329 = (cbLight._m0[_2316].y * _2323) + 1.0;
    float _2330 = (cbLight._m0[_2316].z * _2323) + 1.0;
    float _2331 = (cbLight._m0[_2316].w * _2323) + 1.0;
    uint _2332 = _2315 + 5u;
    float _2338 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2342 = _2315 + 4u;
    float _2351 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2355 = _2315 | 1u;
    float _2366 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_1049, _1050, _1051));
    float _2369 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_1049, _1050, _1051));
    float _4663 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _4674 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * 0.3183098733425140380859375;
    float _2376 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2383 = ((cbLight._m0[_2332].x * _2338) * _2376) + (((cbLight._m0[_2342].x * _2307) * _2351) * _2374);
    float _2384 = ((_2338 * cbLight._m0[_2332].y) * _2376) + (((cbLight._m0[_2342].y * _2308) * _2351) * _2374);
    float _2385 = ((_2338 * cbLight._m0[_2332].z) * _2376) + (((cbLight._m0[_2342].z * _2309) * _2351) * _2374);
    uvec4 _2389 = floatBitsToUint(cbLight._m0[_2315 + 12u]);
    bool _2391 = _2389.x == 0u;
    float _2402;
    float _2404;
    float _2406;
    if (_2391)
    {
        _2402 = _2383;
        _2404 = _2384;
        _2406 = _2385;
    }
    else
    {
        uint _2410 = _2315 + 6u;
        float _2426 = (dot(vec3(cbLight._m0[_2315 + 2u].xyz), vec3(_1049, _1050, _1051)) * 0.5) + 0.5;
        float _2427 = _2426 * _2426;
        float _4685 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2428 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2429 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2402 = (((cbLight._m0[_2410].x * 0.3183098733425140380859375) * _2428) * _2429) + _2383;
        _2404 = (((cbLight._m0[_2410].y * 0.3183098733425140380859375) * _2428) * _2429) + _2384;
        _2406 = (((cbLight._m0[_2410].z * 0.3183098733425140380859375) * _2428) * _2429) + _2385;
    }
    bool _2409 = _2389.y == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2409)
    {
        _2447 = _2402;
        _2449 = _2404;
        _2451 = _2406;
    }
    else
    {
        uint _2620 = _2315 + 7u;
        float _2636 = (dot(vec3(cbLight._m0[_2315 + 3u].xyz), vec3(_1049, _1050, _1051)) * 0.5) + 0.5;
        float _2637 = _2636 * _2636;
        float _4701 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2638 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2639 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2447 = (((cbLight._m0[_2620].x * 0.3183098733425140380859375) * _2638) * _2639) + _2402;
        _2449 = (((cbLight._m0[_2620].y * 0.3183098733425140380859375) * _2638) * _2639) + _2404;
        _2451 = (((cbLight._m0[_2620].z * 0.3183098733425140380859375) * _2638) * _2639) + _2406;
    }
    uint _2454 = _2315 + 8u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _1052) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2315].x + _1128;
    float _2470 = cbLight._m0[_2315].y + _1129;
    float _2471 = cbLight._m0[_2315].z + _1130;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2315].xyz));
    float _4717 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _4728 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _2483 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2484 = dot(vec3(_1049, _1050, _1051), vec3(_2476, _2477, _2478));
    float _4739 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2476, _2477, _2478));
    float _4750 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2468 * _2468;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
    float _2505 = 0.959999978542327880859375 - _1207;
    float _2507 = 0.959999978542327880859375 - _1208;
    float _2508 = 0.959999978542327880859375 - _1209;
    float _2515 = 1.0 - _2468;
    float _2526 = (0.5 / (((_2483 * ((_2482 * _2515) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2515) + _2468) * _2482))) * _2482;
    float _4761 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    uint _2542 = _2315 + 9u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _1052) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2355].x + _1128;
    float _2556 = cbLight._m0[_2355].y + _1129;
    float _2557 = cbLight._m0[_2355].z + _1130;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2355].xyz));
    float _4772 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2569 = dot(vec3(_1049, _1050, _1051), vec3(_2562, _2563, _2564));
    float _4783 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2562, _2563, _2564));
    float _4794 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2554 * _2554;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
    float _2595 = 1.0 - _2554;
    float _2605 = (0.5 / (((_2483 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2595) + _2554) * _2568))) * _2568;
    float _4805 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    float _2617 = (((((_2588 * _2505) + _1210) * cbLight._m0[_2542].x) * _2607) * _2338) + ((((cbLight._m0[_2454].x * _2307) * ((_2504 * _2505) + _1210)) * _2528) * _2351);
    float _2618 = (((((_2588 * _2507) + _1212) * cbLight._m0[_2542].y) * _2607) * _2338) + ((((cbLight._m0[_2454].y * _2308) * ((_2504 * _2507) + _1212)) * _2528) * _2351);
    float _2619 = (((((_2588 * _2508) + _1213) * cbLight._m0[_2542].z) * _2607) * _2338) + ((((cbLight._m0[_2454].z * _2309) * ((_2504 * _2508) + _1213)) * _2528) * _2351);
    float _2681;
    float _2683;
    float _2685;
    if (_2391)
    {
        _2681 = _2617;
        _2683 = _2618;
        _2685 = _2619;
    }
    else
    {
        uint _2687 = _2315 + 2u;
        uint _2691 = _2315 + 10u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _1052) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _1128;
        float _2708 = cbLight._m0[_2687].y + _1129;
        float _2709 = cbLight._m0[_2687].z + _1130;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2687].xyz));
        float _4816 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2721 = dot(vec3(_1049, _1050, _1051), vec3(_2714, _2715, _2716));
        float _4827 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4838 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2747 = 1.0 - _2706;
        float _2757 = (0.5 / (((_2483 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2747) + _2706) * _2720))) * _2720;
        float _4849 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2681 = (((((_2740 * _2505) + _1210) * cbLight._m0[_2691].x) * _2759) * _2760) + _2617;
        _2683 = (((((_2740 * _2507) + _1212) * cbLight._m0[_2691].y) * _2759) * _2760) + _2618;
        _2685 = (((((_2740 * _2508) + _1213) * cbLight._m0[_2691].z) * _2759) * _2760) + _2619;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2409)
    {
        _2795 = _2681;
        _2797 = _2683;
        _2799 = _2685;
    }
    else
    {
        uint _2806 = _2315 + 3u;
        uint _2810 = _2315 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _1052) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _1128;
        float _2827 = cbLight._m0[_2806].y + _1129;
        float _2828 = cbLight._m0[_2806].z + _1130;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2806].xyz));
        float _4865 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2840 = dot(vec3(_1049, _1050, _1051), vec3(_2833, _2834, _2835));
        float _4876 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4887 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2483 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2866) + _2825) * _2839))) * _2839;
        float _4898 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2795 = (((((_2859 * _2505) + _1210) * cbLight._m0[_2810].x) * _2878) * _2879) + _2681;
        _2797 = (((((_2859 * _2507) + _1212) * cbLight._m0[_2810].y) * _2878) * _2879) + _2683;
        _2799 = (((((_2859 * _2508) + _1213) * cbLight._m0[_2810].z) * _2878) * _2879) + _2685;
    }
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_2313.y == 0u)
    {
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2955 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2954;
        float _2956 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2954;
        float _2957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2954;
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.x;
        uint _2981 = uint((float(_2969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1149) / _2970))) + floor(float(uint(cbSceneParam._m0[85u].x * _1148) / _2970)));
        float _2991 = (log2(_2957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2992 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        uint _2995 = uint(isnan(14.0) ? _2992 : (isnan(_2992) ? 14.0 : min(_2992, 14.0)));
        uvec4 _3000 = texelFetch(g_lightClusterGridBuffer, int(((_2995 << 2u) + (_2981 << 6u)) >> 2u));
        uint _3001 = _3000.x;
        uint _3002 = _2969.z;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((((1u << ((_3002 >> 4u) & 15u)) + 4294967295u) & _3001) == 0u) || ((_3002 & 240u) == 0u))
        {
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
        }
        else
        {
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            uint _3260 = 0u;
            uint _3269;
            bool _3270;
            for (;;)
            {
                _3269 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                _3270 = _3269 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3270)
                {
                    frontier_phi_66_pred = _3254;
                    frontier_phi_66_pred_1 = _3259;
                    frontier_phi_66_pred_2 = _3258;
                    frontier_phi_66_pred_3 = _3257;
                    frontier_phi_66_pred_4 = _3256;
                    frontier_phi_66_pred_5 = _3255;
                }
                else
                {
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    uint _3405;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3269;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    for (;;)
                    {
                        uint _3409 = uint(findLSB(_3405)) + (_3260 << 5u);
                        uint _3406 = (_3405 + 4294967295u) & _3405;
                        uint _3411 = _3409 * 48u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 3u)).x));
                        uint _3431 = (_3409 * 48u) + 4u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3450 = (_3409 * 48u) + 8u;
                        vec3 _3461 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x));
                        float _3465 = _3425.x - _2955;
                        float _3466 = _3425.y - _2956;
                        float _3467 = _3425.z - _2957;
                        float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                        float _3471 = inversesqrt(_3468);
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3475 = dot(vec3(_1167, _1170, _1173), vec3(_3472, _3473, _3474));
                        float _3480 = 1.0 - (_3468 * _3425.w);
                        float _4924 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3482 = sqrt(_3468) * _3444.w;
                        float _3485 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3475) + _3486;
                        float _3492 = _3482 * _3482;
                        float _3496 = ((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3481) / ((_3492 * 0.699999988079071044921875) + 1.0);
                        float _3500 = (-0.0) - _2955;
                        float _3501 = (-0.0) - _2956;
                        float _3502 = (-0.0) - _2957;
                        float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                        float _3507 = _3506 * _3500;
                        float _3508 = _3506 * _3501;
                        float _3509 = _3506 * _3502;
                        float _3517 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                        float _3518 = 1.0 - _1242;
                        float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                        float _3526 = _3525 * _3525;
                        float _3527 = _3526 * _3526;
                        float _3528 = _3507 + _3472;
                        float _3529 = _3508 + _3473;
                        float _3530 = _3509 + _3474;
                        float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                        float _3538 = dot(vec3(_1167, _1170, _1173), vec3(_3507, _3508, _3509));
                        float _4940 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3541 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3542 = dot(vec3(_1167, _1170, _1173), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                        float _4951 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                        float _3550 = _3485 * _3526;
                        float _3551 = _3550 * _3550;
                        float _3554 = ((1.0 - _3551) * _3475) + _3551;
                        float _4962 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3555 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3556 = 1.0 - _3526;
                        float _3566 = (0.5 / (((_3555 * ((_3541 * _3556) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3526) * _3541))) * _3555;
                        float _4973 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3577 = (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) / ((_3549 * _3549) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125))) * _3481;
                        _3329 = (_3496 * _3444.x) + _3402;
                        _3330 = (_3496 * _3444.y) + _3403;
                        _3331 = (_3496 * _3444.z) + _3404;
                        _3326 = (_3577 * _3461.x) + _3399;
                        _3327 = (_3577 * _3461.y) + _3400;
                        _3328 = (_3577 * _3461.z) + _3401;
                        if (_3406 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3406;
                        }
                    }
                    frontier_phi_66_pred = _3326;
                    frontier_phi_66_pred_1 = _3331;
                    frontier_phi_66_pred_2 = _3330;
                    frontier_phi_66_pred_3 = _3329;
                    frontier_phi_66_pred_4 = _3328;
                    frontier_phi_66_pred_5 = _3327;
                }
                _3103 = frontier_phi_66_pred;
                _3113 = frontier_phi_66_pred_1;
                _3111 = frontier_phi_66_pred_2;
                _3109 = frontier_phi_66_pred_3;
                _3107 = frontier_phi_66_pred_4;
                _3105 = frontier_phi_66_pred_5;
                uint _3261 = _3260 + 1u;
                if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3254 = _3103;
                    _3255 = _3105;
                    _3256 = _3107;
                    _3257 = _3109;
                    _3258 = _3111;
                    _3259 = _3113;
                    _3260 = _3261;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
        }
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.z;
        uint _3119 = (_3117 >> 8u) & 15u;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        if (((4294967295u << _3119) & _3001) == 0u)
        {
            _3222 = _3102;
            _3224 = _3104;
            _3226 = _3106;
            _3228 = _3108;
            _3230 = _3110;
            _3232 = _3112;
        }
        else
        {
            float _3247 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
            float _3248 = _3247 * _2955;
            float _3249 = _3247 * _2956;
            float _3250 = _3247 * _2957;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3119 < ((_3117 >> 12u) & 15u))
            {
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3382 = _3102;
                float _3383 = _3104;
                float _3384 = _3106;
                float _3385 = _3108;
                float _3386 = _3110;
                float _3387 = _3112;
                uint _3388 = _3119;
                uint _3397;
                bool _3398;
                for (;;)
                {
                    _3397 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3388 << 2u)) >> 2u)).x;
                    _3398 = _3397 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3398)
                    {
                        frontier_phi_77_pred = _3387;
                        frontier_phi_77_pred_1 = _3386;
                        frontier_phi_77_pred_2 = _3385;
                        frontier_phi_77_pred_3 = _3384;
                        frontier_phi_77_pred_4 = _3383;
                        frontier_phi_77_pred_5 = _3382;
                    }
                    else
                    {
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        float _3607 = _3385;
                        float _3608 = _3386;
                        float _3609 = _3387;
                        uint _3610 = _3397;
                        uint _3611;
                        vec4 _3636;
                        float _3637;
                        vec4 _3652;
                        vec3 _3664;
                        vec4 _3679;
                        vec4 _3694;
                        float _3740;
                        bool _3741;
                        for (;;)
                        {
                            uint _3621 = ((_3388 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3610));
                            _3611 = (_3610 + 4294967295u) & _3610;
                            uint _3623 = _3621 * 40u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3637 = _3636.w;
                            uint _3639 = (_3621 * 40u) + 4u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3621 * 40u) + 8u;
                            _3664 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x));
                            uint _3666 = (_3621 * 40u) + 16u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3621 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3621 * 40u) + 24u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3715 = (_3621 * 40u) + 28u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3740 = fma(_2957, _3728.z, fma(_2956, _3728.y, _3728.x * _2955)) + _3728.w;
                            _3741 = !((fma(_2957, _3709.z, fma(_2956, _3709.y, _3709.x * _2955)) + _3709.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3741)
                            {
                                float _3768 = _3636.x - _2955;
                                float _3769 = _3636.y - _2956;
                                float _3770 = _3636.z - _2957;
                                float _3771 = dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770));
                                float _3774 = inversesqrt(_3771);
                                float _3775 = _3774 * _3768;
                                float _3776 = _3774 * _3769;
                                float _3777 = _3774 * _3770;
                                float _3781 = 1.0 - (_3771 / (_3637 * _3637));
                                float _4984 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3786 = sqrt(_3771) * _3652.w;
                                float _3788 = 1.39999997615814208984375 / (_3786 + 1.39999997615814208984375);
                                float _3789 = _3788 * _3788;
                                float _3792 = ((1.0 - _3789) * dot(vec3(_3775, _3776, _3777), vec3(_1167, _1170, _1173))) + _3789;
                                float _3795 = _3786 * _3786;
                                float _3799 = (fma(_2957, _3679.z, fma(_2956, _3679.y, _3679.x * _2955)) + _3679.w) / _3740;
                                float _3800 = (fma(_2957, _3694.z, fma(_2956, _3694.y, _3694.x * _2955)) + _3694.w) / _3740;
                                float _3804 = 1.0 - dot(vec2(_3799, _3800), vec2(_3799, _3800));
                                float _5000 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3806 = _3805 * (((isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0))) * _3782) / ((_3795 * 0.699999988079071044921875) + 1.0));
                                float _3818 = exp2(log2(1.0 / ((_3795 * 3.5) + 5.0)) * 0.25);
                                float _3819 = 1.0 - _1242;
                                float _3826 = sqrt(1.0 - ((1.0 - (_3819 * _3819)) * (1.0 - (_3818 * _3818))));
                                float _3827 = _3826 * _3826;
                                float _3828 = _3827 * _3827;
                                float _3829 = _3775 - _3248;
                                float _3830 = _3776 - _3249;
                                float _3831 = _3777 - _3250;
                                float _3835 = inversesqrt(dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831)));
                                float _3839 = dot(vec3(_1167, _1170, _1173), vec3((-0.0) - _3248, (-0.0) - _3249, (-0.0) - _3250));
                                float _5011 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3843 = dot(vec3(_1167, _1170, _1173), vec3(_3835 * _3829, _3835 * _3830, _3835 * _3831));
                                float _5022 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3850 = ((_3846 * _3846) * (_3828 + (-1.0))) + 1.0;
                                float _3851 = _3788 * _3827;
                                float _3852 = _3851 * _3851;
                                float _3858 = ((1.0 - _3852) * dot(vec3(_1167, _1170, _1173), vec3(_3775, _3776, _3777))) + _3852;
                                float _5033 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3860 = 1.0 - _3827;
                                float _3870 = (0.5 / (((_3859 * ((_3842 * _3860) + _3827)) + 9.9999999392252902907785028219223e-09) + (((_3859 * _3860) + _3827) * _3842))) * _3859;
                                float _5044 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3880 = (_3805 * _3782) * (((_3828 * 3.1415927410125732421875) * (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0)))) / ((_3850 * _3850) * ((_3795 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3806 * _3652.y;
                                frontier_phi_83_pred_1 = _3806 * _3652.x;
                                frontier_phi_83_pred_2 = _3880 * _3664.z;
                                frontier_phi_83_pred_3 = _3880 * _3664.y;
                                frontier_phi_83_pred_4 = _3880 * _3664.x;
                                frontier_phi_83_pred_5 = _3806 * _3652.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3888 = frontier_phi_83_pred;
                            _3887 = frontier_phi_83_pred_1;
                            _3886 = frontier_phi_83_pred_2;
                            _3885 = frontier_phi_83_pred_3;
                            _3884 = frontier_phi_83_pred_4;
                            _3889 = frontier_phi_83_pred_5;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            if (_3611 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3611;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3596;
                        frontier_phi_77_pred_1 = _3595;
                        frontier_phi_77_pred_2 = _3594;
                        frontier_phi_77_pred_3 = _3593;
                        frontier_phi_77_pred_4 = _3592;
                        frontier_phi_77_pred_5 = _3591;
                    }
                    _3233 = frontier_phi_77_pred;
                    _3231 = frontier_phi_77_pred_1;
                    _3229 = frontier_phi_77_pred_2;
                    _3227 = frontier_phi_77_pred_3;
                    _3225 = frontier_phi_77_pred_4;
                    _3223 = frontier_phi_77_pred_5;
                    uint _3389 = _3388 + 1u;
                    if (_3389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3382 = _3223;
                        _3383 = _3225;
                        _3384 = _3227;
                        _3385 = _3229;
                        _3386 = _3231;
                        _3387 = _3233;
                        _3388 = _3389;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3227;
                frontier_phi_58_59_ladder_1 = _3233;
                frontier_phi_58_59_ladder_2 = _3231;
                frontier_phi_58_59_ladder_3 = _3229;
                frontier_phi_58_59_ladder_4 = _3225;
                frontier_phi_58_59_ladder_5 = _3223;
            }
            else
            {
                frontier_phi_58_59_ladder = _3106;
                frontier_phi_58_59_ladder_1 = _3112;
                frontier_phi_58_59_ladder_2 = _3110;
                frontier_phi_58_59_ladder_3 = _3108;
                frontier_phi_58_59_ladder_4 = _3104;
                frontier_phi_58_59_ladder_5 = _3102;
            }
            _3222 = frontier_phi_58_59_ladder_5;
            _3224 = frontier_phi_58_59_ladder_4;
            _3226 = frontier_phi_58_59_ladder;
            _3228 = frontier_phi_58_59_ladder_3;
            _3230 = frontier_phi_58_59_ladder_2;
            _3232 = frontier_phi_58_59_ladder_1;
        }
        float _3237 = isnan(1.0) ? _1226 : (isnan(_1226) ? 1.0 : min(_1226, 1.0));
        _3014 = (_3237 * _3228) + _2447;
        _3016 = (_3237 * _3230) + _2449;
        _3018 = (_3237 * _3232) + _2451;
        _3020 = ((_3222 * _1210) * _3237) + _2795;
        _3022 = ((_3224 * _1212) * _3237) + _2797;
        _3024 = ((_3226 * _1213) * _3237) + _2799;
    }
    else
    {
        _3014 = _2447;
        _3016 = _2449;
        _3018 = _2451;
        _3020 = _2795;
        _3022 = _2797;
        _3024 = _2799;
    }
    float _5060 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _5071 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _5082 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _3041 = ((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3014 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1226))) + ((_3020 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    float _3042 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3016 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1226))) + ((_3022 + ((isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    float _3043 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3018 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1226))) + ((_3024 + ((isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    uint _3044 = _295 + 6u;
    float _3052 = _1148 / cbSceneParam._m0[86u].x;
    float _3053 = _1149 / cbSceneParam._m0[86u].y;
    vec4 _3067 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3052, _3053, (log2((isnan(cbSceneParam._m0[77u].w) ? _1071 : (isnan(_1071) ? cbSceneParam._m0[77u].w : min(_1071, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3069 = _3067.x;
    float _3070 = _3067.y;
    float _3071 = _3067.z;
    float _3072 = _3067.w;
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    if (_1071 > cbSceneParam._m0[78u].w)
    {
        float _3127 = isnan(_1071) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1071 : min(cbSceneParam._m0[80u].w, _1071));
        float _3128 = _3127 / _1071;
        float _3139 = _3128 * _1121;
        float _3140 = _1122 * _3128;
        float _3141 = (-0.0) - _3140;
        float _3142 = _3128 * _1123;
        float _3144 = (cbSceneParam._m0[77u].w * _3141) / _3127;
        float _3145 = _3144 + cbSceneParam._m0[79u].w;
        float _3146 = cbSceneParam._m0[79u].w - _3140;
        float _3152 = sqrt(((_3139 * _3139) + (_3140 * _3140)) + (_3142 * _3142));
        float _3155 = (1.0 - (cbSceneParam._m0[77u].w / _3127)) * _3152;
        float _3160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3339;
        if (abs((_3141 - _3144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3339 = ((((_3145 > 0.0) ? exp2(_3160 * _3145) : (2.0 - exp2(_3162 * _3145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3155;
        }
        else
        {
            float _3283 = 1.0 / cbSceneParam._m0[80u].x;
            float _3284 = isnan(_3146) ? _3145 : (isnan(_3145) ? _3146 : max(_3145, _3146));
            float _3285 = isnan(_3146) ? _3145 : (isnan(_3145) ? _3146 : min(_3145, _3146));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            _3339 = ((abs(_3152 / _3141) * cbSceneParam._m0[80u].y) * ((((_3294 - _3295) * 2.0) - ((exp2(_3160 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0)))) - exp2(_3160 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))))) * _3283)) - ((exp2(_3162 * _3294) - exp2(_3162 * _3295)) * _3283))) + (_3155 * cbSceneParam._m0[80u].z);
        }
        vec4 _3341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3052, _3053, 1.0), 0.0);
        float _3350 = exp2((_3339 * (-1.44269502162933349609375)) * (1.0 - _3341.w));
        float _3351 = log2(_3350);
        float _3367 = log2(_3072);
        _3164 = (exp2(_3367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].x)) * _3341.x) / cbSceneParam._m0[78u].x)) + _3069;
        _3166 = (exp2(_3367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].y)) * _3341.y) / cbSceneParam._m0[78u].y)) + _3070;
        _3168 = (exp2(_3367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].z)) * _3341.z) / cbSceneParam._m0[78u].z)) + _3071;
        _3170 = _3350 * _3072;
    }
    else
    {
        _3164 = _3069;
        _3166 = _3070;
        _3168 = _3071;
        _3170 = _3072;
    }
    bool _3377;
    vec4 _3180;
    vec4 _3202;
    float _3204;
    float _3208;
    float _3209;
    float _3210;
    float _3211;
    bool _3221;
    for (;;)
    {
        _3180 = cbMatDynParam._m0[0u];
        float _3182 = roundEven(_3180.y);
        bool _3183 = _3182 == 3.0;
        float _3184 = log2(_3170);
        float _3191 = exp2(_3184 * cbSceneParam._m0[78u].x) * _3041;
        float _3192 = exp2(_3184 * cbSceneParam._m0[78u].y) * _3042;
        float _3193 = exp2(_3184 * cbSceneParam._m0[78u].z) * _3043;
        float _3200 = _1137 + (-0.5);
        _3202 = cbMtdParam._m0[1u];
        _3204 = _3202.y * _3200;
        float _3207 = (_3182 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3208 = _3207 * (_3183 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3164)));
        _3209 = _3207 * (_3183 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3166)));
        _3210 = _3207 * (_3183 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3168)));
        _3211 = _3200 * 0.999000012874603271484375;
        _3221 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3221)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3211) < 0.5)
            {
                _3377 = true;
                break;
            }
        }
        uint _3318 = _1186 + uint(_3180.w);
        if ((cbInstanceData._m0[_3318].w < 1.0) && ((cbInstanceData._m0[_3318].w + _3211) < 0.5))
        {
            _3377 = true;
            break;
        }
        if ((_3204 + 1.0) < _3202.x)
        {
            _3377 = true;
            break;
        }
        _3377 = false;
        break;
    }
    float _3582;
    if (_3377)
    {
        discard_state = true;
        _3582 = 0.0;
    }
    else
    {
        _3582 = cbInstanceData._m0[_3044].w;
    }
    SV_Target.x = _3208;
    SV_Target.y = _3209;
    SV_Target.z = _3210;
    SV_Target.w = _3582;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3044].w;
    discard_exit();
}


