#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1695;
float _4354;
float _4355;
float _4356;
float _4357;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _249 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _250 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _251 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _257 = inversesqrt(dot(vec3(_249, _250, _251), vec3(_249, _250, _251)));
    float _258 = _257 * _249;
    float _259 = _257 * _250;
    float _260 = _257 * _251;
    float _264 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = _264 * NORMAL.x;
    float _266 = _264 * NORMAL.y;
    float _267 = _264 * NORMAL.z;
    float _271 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = _271 * TANGENT.x;
    float _273 = _271 * TANGENT.y;
    float _274 = _271 * TANGENT.z;
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _291 = cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x;
    float _293 = cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x;
    float _295 = sqrt((_291 + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + _293);
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[23u].w) + _438) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4366 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _463 = (_456 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _464 = (_456 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _465 = (_456 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[23u].w) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4377 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _296) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _297) + cbTextureTilingScale._m0[24u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _576 = _574.x;
    float _586 = dot(vec4(_576, _574.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _598 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _385.z) * 2.0) - ((((_576 - _586) * cbMtdParam._m0[23u].w) + _586) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4388 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _612 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _316.x) * ((_599 * ((_557.x * cbMtdParam._m0[14u].x) - _536)) + _536);
    float _615 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _316.y) * ((_599 * ((_557.y * cbMtdParam._m0[14u].y) - _537)) + _537);
    float _618 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _316.z) * ((_599 * ((_557.z * cbMtdParam._m0[14u].z) - _538)) + _538);
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _296) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _297) + cbTextureTilingScale._m0[14u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _456) + _675;
    float _685 = ((_656.y - _676) * _456) + _676;
    float _686 = ((_656.z - _677) * _456) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _709 = ((_698.x - _684) * _529) + _684;
    float _710 = ((_698.y - _685) * _529) + _685;
    float _711 = ((_698.z - _686) * _529) + _686;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _296) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _297) + cbTextureTilingScale._m0[23u].w));
    float _736 = ((_723.z - _711) * _599) + _711;
    float _739 = ((((_723.x - _709) * _599) + _709) * 2.0) + (-1.0);
    float _741 = ((((_723.y - _710) * _599) + _710) * 2.0) + (-1.0);
    float _742 = dot(vec2(_739, _741), vec2(_739, _741));
    float _4399 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))));
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _773 = (((_761.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _739;
    float _774 = (((_761.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _741;
    float _777 = fma(_747, _265, fma(_774, _272, _773 * _258));
    float _780 = fma(_747, _266, fma(_774, _273, _773 * _259));
    float _783 = fma(_747, _267, fma(_774, _274, _773 * _260));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    vec4 _814 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _816 = _814.x;
    float _817 = 1.0 - _816;
    float _825 = (cbMtdParam._m0[19u].x + dot(vec4(_787 * _777, _787 * _780, _787 * _783, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_816 - _817) * cbMtdParam._m0[24u].z) + _817) * cbMtdParam._m0[21u].z);
    float _4410 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _828 = (-0.0) - cbMtdParam._m0[24u].x;
    float _830 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _830 : (isnan(_830) ? 1.0 : min(_830, 1.0));
    float _838 = _826 - ((_826 * TEXCOORD_8.x) * _831);
    float _839 = _826 - ((_826 * TEXCOORD_8.y) * _831);
    float _840 = _826 - ((_826 * TEXCOORD_8.z) * _831);
    float _847 = (_838 * ((_636.x * cbMtdParam._m0[18u].x) - _612)) + _612;
    float _848 = (_839 * ((_636.y * cbMtdParam._m0[18u].y) - _615)) + _615;
    float _849 = (_840 * ((_636.z * cbMtdParam._m0[18u].z) - _618)) + _618;
    float _856 = sqrt((_291 + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + _293);
    float _857 = _856 * TEXCOORD.z;
    float _858 = _856 * TEXCOORD.w;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _857) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _858) + cbTextureTilingScale._m0[19u].w));
    float _872 = _870.x;
    float _873 = 1.0 - _872;
    float _899 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_872 - _873) * cbMtdParam._m0[24u].w) + _873) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4431 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _900 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _908 = ((((cbMtdParam._m0[10u].x - _847) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _900) + _847;
    float _909 = ((((cbMtdParam._m0[10u].y - _848) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _900) + _848;
    float _910 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _849)) * _900) + _849;
    vec4 _936 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _938 = _936.x;
    float _955 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _938) * _456) + _938;
    float _972 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _296) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _297) + cbTextureTilingScale._m0[21u].w)).x - _955) * _529) + _955;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _296) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _297) + cbTextureTilingScale._m0[10u].w)).x - _972) * _599) + _972;
    float _993 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _989) * cbMtdParam._m0[19u].z) + _989;
    float _995 = _993 - (_993 * _838);
    float _997 = _995 - (_995 * _900);
    float _1001 = (cbMtdParam._m0[19u].w * (_761.z - _736)) + _736;
    vec4 _1017 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _1024 = (_1017.x * 2.0) + (-1.0);
    float _1025 = (_1017.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4442 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1034 = ((_1017.z - _1001) * _838) + _1001;
    float _1037 = ((cbMtdParam._m0[23u].x - _1034) * _900) + _1034;
    vec4 _1060 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _857) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _858) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1066 = (_1060.x * 2.0) + (-1.0);
    float _1067 = (_1060.y * 2.0) + (-1.0);
    float _1068 = dot(vec2(_1066, _1067), vec2(_1066, _1067));
    float _4453 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1083 = ((sqrt(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) - _747) * _840) + _747;
    float _1086 = (((_1024 - _773) * _838) + _773) + (cbMtdParam._m0[21u].x * _773);
    float _1087 = (((_1025 - _774) * _839) + _774) + (cbMtdParam._m0[21u].x * _774);
    float _1098 = (((_1066 - _1086) + (_1086 * cbMtdParam._m0[22u].z)) * _900) + _1086;
    float _1099 = (((_1067 - _1087) + (_1087 * cbMtdParam._m0[22u].z)) * _900) + _1087;
    float _1100 = (_900 * (sqrt(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) - _1083)) + _1083;
    float _1102 = cbMtdParam._m0[22u].x + _761.w;
    float _1105 = fma(_1100, _265, fma(_1099, _272, _1098 * _258));
    float _1108 = fma(_1100, _266, fma(_1099, _273, _1098 * _259));
    float _1111 = fma(_1100, _267, fma(_1099, _274, _1098 * _260));
    float _1115 = inversesqrt(dot(vec3(_1105, _1108, _1111), vec3(_1105, _1108, _1111)));
    float _1116 = _1115 * _1105;
    float _1117 = _1115 * _1108;
    float _1118 = _1115 * _1111;
    float _4464 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1119 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4486 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4497 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4508 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4519 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1124 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _1138 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1188 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1178);
    float _1189 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1178);
    float _1190 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1178);
    float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
    float _1195 = _1188 * _1194;
    float _1196 = _1189 * _1194;
    float _1197 = _1190 * _1194;
    vec4 _1202 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1204 = _1202.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1376 = sqrt(((_1188 * _1188) + (_1189 * _1189)) + (_1190 * _1190));
        float _1382 = (cbMatDynParam._m0[5u].x * _1376) + cbMatDynParam._m0[5u].y;
        float _4530 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1387 = (cbMatDynParam._m0[5u].z * _1376) + cbMatDynParam._m0[5u].w;
        float _4541 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) - _1383)) + _1383) < ((_1204 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1215 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1216 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1234 = fma(_1118, cbSceneParam._m0[5u].z, fma(_1117, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1116));
    float _1237 = fma(_1118, cbSceneParam._m0[6u].z, fma(_1117, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1116));
    float _1240 = fma(_1118, cbSceneParam._m0[7u].z, fma(_1117, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1116));
    uint _1253 = _277 + 9u;
    uint _1254 = _1253 + uint(cbMatDynParam._m0[0u].w);
    float _1260 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * cbInstanceData._m0[_1254].x;
    float _1261 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * cbInstanceData._m0[_1254].y;
    float _1262 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * cbInstanceData._m0[_1254].z;
    float _4552 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1263 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _1264 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _4574 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1265 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _1266 = 1.0 - _1124;
    float _1267 = _1263 * _1266;
    float _1268 = _1264 * _1266;
    float _1269 = _1265 * _1266;
    float _1274 = (_1263 + (-0.039999999105930328369140625)) * _1124;
    float _1275 = (_1264 + (-0.039999999105930328369140625)) * _1124;
    float _1276 = (_1265 + (-0.039999999105930328369140625)) * _1124;
    float _1277 = _1274 + 0.039999999105930328369140625;
    float _1279 = _1275 + 0.039999999105930328369140625;
    float _1280 = _1276 + 0.039999999105930328369140625;
    vec4 _1289 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1215, cbSceneParam._m0[86u].y * _1216));
    float _1293 = ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * TEXCOORD_5.w) * _1289.x;
    float _1294 = dot(vec3(_1116, _1117, _1118), vec3(_1195, _1196, _1197));
    float _1297 = _1294 * 2.0;
    float _1301 = (_1297 * _1116) - _1195;
    float _1302 = (_1297 * _1117) - _1196;
    float _1303 = (_1297 * _1118) - _1197;
    float _1307 = abs(dot(vec3(_1195, _1196, _1197), vec3(_1116, _1117, _1118)));
    float _4585 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
    float _1309 = sqrt(_1119);
    float _1322 = exp2((_1309 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1309 * 3.0));
    float _1328 = (1.0 - _1322) * ((_1309 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1329 = _1322 * _1309;
    float _1357 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1361 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1365 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1694;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1419 = fma(_1365, cbModelParam._m0[26u].z, fma(_1361, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1357));
        float _1423 = fma(_1365, cbModelParam._m0[27u].z, fma(_1361, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1357));
        float _1427 = fma(_1365, cbModelParam._m0[28u].z, fma(_1361, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1357));
        float _1452 = _1357 + _1116;
        float _1453 = _1361 + _1117;
        float _1454 = _1365 + _1118;
        float _1464 = fma(_1454, cbModelParam._m0[26u].z, fma(_1453, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1452)) - _1419;
        float _1465 = fma(_1454, cbModelParam._m0[27u].z, fma(_1453, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1452)) - _1423;
        float _1466 = fma(_1454, cbModelParam._m0[28u].z, fma(_1453, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1452)) - _1427;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1419 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1423 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[34u].z) + ((((((_1427 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1522 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1488.x + (-0.5));
        float _1524 = _1522 * (_1488.y + (-0.5));
        float _1525 = _1522 * (_1488.z + (-0.5));
        float _1532 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1495.x + (-0.5));
        float _1534 = _1532 * (_1495.y + (-0.5));
        float _1535 = _1532 * (_1495.z + (-0.5));
        float _1542 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1502.x + (-0.5));
        float _1544 = _1542 * (_1502.y + (-0.5));
        float _1545 = _1542 * (_1502.z + (-0.5));
        float _1552 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1509.x + (-0.5));
        float _1554 = _1552 * (_1509.y + (-0.5));
        float _1555 = _1552 * (_1509.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1576 = (dot(vec3(_1116, _1117, _1118), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1586 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4633 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1588 + 1.0))) + _1593) * _1556;
        float _1603 = _1524 * 0.5;
        float _1604 = _1534 * 0.5;
        float _1605 = _1544 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_1116, _1117, _1118), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4644 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4655 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4666 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_1630 + 1.0))) + _1635) * _1557;
        float _1645 = _1525 * 0.5;
        float _1646 = _1535 * 0.5;
        float _1647 = _1545 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_1116, _1117, _1118), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4677 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4688 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4699 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_1672 + 1.0))) + _1677) * _1558;
        _1694 = _1525;
        _1696 = _1524;
        _1697 = _1523;
        _1698 = _1535;
        _1699 = _1534;
        _1700 = _1533;
        _1701 = _1545;
        _1702 = _1544;
        _1703 = _1543;
        _1704 = _1558;
        _1705 = _1557;
        _1706 = _1556;
        _1707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1708 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
    }
    else
    {
        _1694 = _1695;
        _1696 = _1695;
        _1697 = _1695;
        _1698 = _1695;
        _1699 = _1695;
        _1700 = _1695;
        _1701 = _1695;
        _1702 = _1695;
        _1703 = _1695;
        _1704 = _1695;
        _1705 = _1695;
        _1706 = _1695;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1735 = fma(_1365, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357));
        float _1739 = fma(_1365, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357));
        float _1743 = fma(_1365, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357));
        float _1766 = _1357 + _1116;
        float _1767 = _1361 + _1117;
        float _1768 = _1365 + _1118;
        float _1778 = fma(_1768, cbModelParam._m0[30u].z, fma(_1767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1766)) - _1735;
        float _1779 = fma(_1768, cbModelParam._m0[31u].z, fma(_1767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1766)) - _1739;
        float _1780 = fma(_1768, cbModelParam._m0[32u].z, fma(_1767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1766)) - _1743;
        float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
        float _1797 = ((_1784 * _1778) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1735 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1798 = ((_1784 * _1779) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1739 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1799 = ((_1784 * _1780) / cbModelParam._m0[35u].z) + ((((((_1743 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1801 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        vec4 _1808 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        vec4 _1815 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        vec4 _1822 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        float _1834 = exp2((_1801.w + (-0.5)) * 20.0) * 2.0;
        float _1835 = _1834 * (_1801.x + (-0.5));
        float _1836 = _1834 * (_1801.y + (-0.5));
        float _1837 = _1834 * (_1801.z + (-0.5));
        float _1844 = exp2((_1808.w + (-0.5)) * 20.0) * 2.0;
        float _1845 = _1844 * (_1808.x + (-0.5));
        float _1846 = _1844 * (_1808.y + (-0.5));
        float _1847 = _1844 * (_1808.z + (-0.5));
        float _1854 = exp2((_1815.w + (-0.5)) * 20.0) * 2.0;
        float _1855 = _1854 * (_1815.x + (-0.5));
        float _1856 = _1854 * (_1815.y + (-0.5));
        float _1857 = _1854 * (_1815.z + (-0.5));
        float _1864 = exp2((_1822.w + (-0.5)) * 20.0) * 2.0;
        float _1865 = _1864 * (_1822.x + (-0.5));
        float _1866 = _1864 * (_1822.y + (-0.5));
        float _1867 = _1864 * (_1822.z + (-0.5));
        float _1868 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1869 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1870 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1871 = _1835 * 0.5;
        float _1872 = _1845 * 0.5;
        float _1873 = _1855 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1116, _1117, _1118), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4740 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1868 + 9.9999997473787516355514526367188e-06);
        float _4751 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4762 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_1898 + 1.0))) + _1903) * _1868;
        float _1913 = _1836 * 0.5;
        float _1914 = _1846 * 0.5;
        float _1915 = _1856 * 0.5;
        float _1916 = dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915));
        float _1921 = (_1916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1916);
        float _1929 = (dot(vec3(_1116, _1117, _1118), vec3(_1921 * _1913, _1921 * _1914, _1921 * _1915)) + 1.0) * 0.5;
        float _4773 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1938 = sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915)) / (_1869 + 9.9999997473787516355514526367188e-06);
        float _4784 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _1940 = _1939 * 2.0;
        float _1944 = (1.0 - _1939) / (_1939 + 1.0);
        float _4795 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _1954 = ((((1.0 - _1945) * (_1940 + 2.0)) * exp2(log2(isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_1940 + 1.0))) + _1945) * _1869;
        float _1955 = _1837 * 0.5;
        float _1956 = _1847 * 0.5;
        float _1957 = _1857 * 0.5;
        float _1958 = dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957));
        float _1963 = (_1958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1958);
        float _1971 = (dot(vec3(_1116, _1117, _1118), vec3(_1963 * _1955, _1963 * _1956, _1963 * _1957)) + 1.0) * 0.5;
        float _4806 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1980 = sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957)) / (_1870 + 9.9999997473787516355514526367188e-06);
        float _4817 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _1982 = _1981 * 2.0;
        float _1986 = (1.0 - _1981) / (_1981 + 1.0);
        float _4828 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _1996 = ((((1.0 - _1987) * (_1982 + 2.0)) * exp2(log2(isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_1982 + 1.0))) + _1987) * _1870;
        _2004 = _1837;
        _2005 = _1836;
        _2006 = _1835;
        _2007 = _1847;
        _2008 = _1846;
        _2009 = _1845;
        _2010 = _1857;
        _2011 = _1856;
        _2012 = _1855;
        _2013 = _1870;
        _2014 = _1869;
        _2015 = _1868;
        _2016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
        _2017 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)));
        _2018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)));
    }
    else
    {
        _2004 = _1695;
        _2005 = _1695;
        _2006 = _1695;
        _2007 = _1695;
        _2008 = _1695;
        _2009 = _1695;
        _2010 = _1695;
        _2011 = _1695;
        _2012 = _1695;
        _2013 = _1695;
        _2014 = _1695;
        _2015 = _1695;
        _2016 = 0.0;
        _2017 = 0.0;
        _2018 = 0.0;
    }
    float _2028 = (cbModelParam._m0[1u].x * (_2016 - _1707)) + _1707;
    float _2029 = (cbModelParam._m0[1u].x * (_2017 - _1708)) + _1708;
    float _2030 = (cbModelParam._m0[1u].x * (_2018 - _1709)) + _1709;
    float _2051 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2028));
    float _2072 = _1301 * 0.5;
    float _2073 = _1302 * 0.5;
    float _2074 = _1303 * 0.5;
    float _2075 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_2006, _2009, _2012, _2015));
    float _2078 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_2005, _2008, _2011, _2014));
    float _2081 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_2004, _2007, _2010, _2013));
    float _2115;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2088 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_1694, _1698, _1701, _1704));
        float _2092 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_1696, _1699, _1702, _1705));
        float _2096 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_1697, _1700, _1703, _1706));
        float _2103 = dot(vec4(cbModelParam._m0[39u]), vec4(_2072, _2073, _2074, 1.0));
        _2115 = dot(vec3(isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)), isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0)), isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2103) ? 0.0 : (isnan(0.0) ? _2103 : max(0.0, _2103))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2115 = 1.0;
    }
    float _2126;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2117 = dot(vec4(cbModelParam._m0[40u]), vec4(_2072, _2073, _2074, 1.0));
        _2126 = dot(vec3(isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)), isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0)), isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2117) ? 0.0 : (isnan(0.0) ? _2117 : max(0.0, _2117))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2126 = 1.0;
    }
    float _2130 = (_2126 * cbModelParam._m0[1u].x) + (_2115 * (1.0 - cbModelParam._m0[1u].x));
    float _2140 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1119);
    float _2141 = isnan(_2140) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2140 : min(cbModelParam._m0[25u].z, _2140));
    float _2221;
    float _2223;
    float _2225;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2188 = fma(_1365, cbModelParam._m0[13u].z, fma(_1361, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1357)) + cbModelParam._m0[13u].w;
        float _2192 = fma(_1365, cbModelParam._m0[14u].z, fma(_1361, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1357)) + cbModelParam._m0[14u].w;
        float _2196 = fma(_1365, cbModelParam._m0[15u].z, fma(_1361, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1357)) + cbModelParam._m0[15u].w;
        float _2199 = fma(_1303, cbModelParam._m0[13u].z, fma(_1302, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1301));
        float _2202 = fma(_1303, cbModelParam._m0[14u].z, fma(_1302, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1301));
        float _2205 = fma(_1303, cbModelParam._m0[15u].z, fma(_1302, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1301));
        float _2233;
        if (_2199 > 0.0)
        {
            _2233 = abs((1.0 - _2188) / _2199);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2188 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2233 = frontier_phi_17_15_ladder;
        }
        float _2404;
        if (_2202 > 0.0)
        {
            _2404 = abs((1.0 - _2192) / _2202);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2202 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2192 + 1.0) / _2202);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2404 = frontier_phi_26_22_ladder;
        }
        float _2699;
        if (_2205 > 0.0)
        {
            _2699 = abs((1.0 - _2196) / _2205);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2196 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2699 = frontier_phi_38_33_ladder;
        }
        float _2701 = isnan(_2404) ? _2233 : (isnan(_2233) ? _2404 : min(_2233, _2404));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _2199) + _2188;
        float _2707 = (_2702 * _2202) + _2192;
        float _2708 = (_2702 * _2205) + _2196;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2711 = (-1.0) - _2709;
        float _2713 = _2709 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2708 > _2713) || ((_2708 < _2711) || ((_2707 > _2713) || ((_2707 < _2711) || ((_2706 < _2711) || (_2706 > _2713))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2708, cbModelParam._m0[9u].z, fma(_2707, cbModelParam._m0[9u].y, _2706 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2708, cbModelParam._m0[10u].z, fma(_2707, cbModelParam._m0[10u].y, _2706 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2708, cbModelParam._m0[11u].z, fma(_2707, cbModelParam._m0[11u].y, _2706 * cbModelParam._m0[11u].x))), _2141);
            frontier_phi_16_38_ladder = _2853.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2853.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2853.x * cbModelParam._m0[1u].y;
        }
        _2221 = frontier_phi_16_38_ladder_2;
        _2223 = frontier_phi_16_38_ladder_1;
        _2225 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2209 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1301, _1302, _1303), _2141);
        _2221 = _2209.x * cbModelParam._m0[1u].y;
        _2223 = _2209.y * cbModelParam._m0[1u].y;
        _2225 = _2209.z * cbModelParam._m0[1u].y;
    }
    float _2229 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1119);
    float _2230 = isnan(_2229) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2229 : min(cbModelParam._m0[25u].w, _2229));
    float _2319;
    float _2321;
    float _2323;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2283 = fma(_1365, cbModelParam._m0[21u].z, fma(_1361, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1357)) + cbModelParam._m0[21u].w;
        float _2287 = fma(_1365, cbModelParam._m0[22u].z, fma(_1361, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1357)) + cbModelParam._m0[22u].w;
        float _2291 = fma(_1365, cbModelParam._m0[23u].z, fma(_1361, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1357)) + cbModelParam._m0[23u].w;
        float _2294 = fma(_1303, cbModelParam._m0[21u].z, fma(_1302, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1301));
        float _2297 = fma(_1303, cbModelParam._m0[22u].z, fma(_1302, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1301));
        float _2300 = fma(_1303, cbModelParam._m0[23u].z, fma(_1302, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1301));
        float _2409;
        if (_2294 > 0.0)
        {
            _2409 = abs((1.0 - _2283) / _2294);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2294 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2283 + 1.0) / _2294);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2409 = frontier_phi_28_24_ladder;
        }
        float _2726;
        if (_2297 > 0.0)
        {
            _2726 = abs((1.0 - _2287) / _2297);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2297 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2287 + 1.0) / _2297);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2726 = frontier_phi_40_35_ladder;
        }
        float _3064;
        if (_2300 > 0.0)
        {
            _3064 = abs((1.0 - _2291) / _2300);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2300 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2291 + 1.0) / _2300);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3064 = frontier_phi_50_47_ladder;
        }
        float _3066 = isnan(_2726) ? _2409 : (isnan(_2409) ? _2726 : min(_2409, _2726));
        float _3067 = isnan(_3064) ? _3066 : (isnan(_3066) ? _3064 : min(_3066, _3064));
        float _3071 = (_3067 * _2294) + _2283;
        float _3072 = (_3067 * _2297) + _2287;
        float _3073 = (_3067 * _2300) + _2291;
        float _3074 = _3067 * 9.9999997473787516355514526367188e-05;
        float _3075 = (-1.0) - _3074;
        float _3077 = _3074 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3073 > _3077) || ((_3073 < _3075) || ((_3072 > _3077) || ((_3072 < _3075) || ((_3071 < _3075) || (_3071 > _3077))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3195 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3073, cbModelParam._m0[17u].z, fma(_3072, cbModelParam._m0[17u].y, _3071 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3073, cbModelParam._m0[18u].z, fma(_3072, cbModelParam._m0[18u].y, _3071 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3073, cbModelParam._m0[19u].z, fma(_3072, cbModelParam._m0[19u].y, _3071 * cbModelParam._m0[19u].x))), _2230);
            frontier_phi_25_50_ladder = _3195.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3195.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3195.x * cbModelParam._m0[1u].z;
        }
        _2319 = frontier_phi_25_50_ladder_2;
        _2321 = frontier_phi_25_50_ladder_1;
        _2323 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1301, _1302, _1303), _2230);
        _2319 = _2303.x * cbModelParam._m0[1u].z;
        _2321 = _2303.y * cbModelParam._m0[1u].z;
        _2323 = _2303.z * cbModelParam._m0[1u].z;
    }
    float _2336 = (((_1328 * _1277) + _1329) * _1293) * ((cbModelParam._m0[1u].w * (_2319 - _2221)) + _2221);
    float _2338 = (((_1328 * _1279) + _1329) * _1293) * ((cbModelParam._m0[1u].w * (_2321 - _2223)) + _2223);
    float _2340 = (((_1328 * _1280) + _1329) * _1293) * ((cbModelParam._m0[1u].w * (_2323 - _2225)) + _2225);
    float _2343 = fma(_2340, cbSceneParam._m0[89u].z, fma(_2338, cbSceneParam._m0[89u].y, _2336 * cbSceneParam._m0[89u].x));
    float _2346 = fma(_2340, cbSceneParam._m0[90u].z, fma(_2338, cbSceneParam._m0[90u].y, _2336 * cbSceneParam._m0[90u].x));
    float _2349 = fma(_2340, cbSceneParam._m0[91u].z, fma(_2338, cbSceneParam._m0[91u].y, _2336 * cbSceneParam._m0[91u].x));
    float _2383 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2387 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2395 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2396 = _2383 / _2395;
    float _2397 = _2387 / _2395;
    float _2398 = _2391 / _2395;
    float _2545;
    float _2546;
    float _2547;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2425 = ((uint(_2398 > cbSceneParam._m0[59u].y) + uint(_2398 > cbSceneParam._m0[59u].x)) + uint(_2398 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2426 = _2425 + 43u;
        uint _2434 = _2425 + 44u;
        uint _2442 = _2425 + 45u;
        uint _2450 = _2425 + 46u;
        float _2461 = fma(_2395, cbSceneParam._m0[_2426].w, fma(_2391, cbSceneParam._m0[_2426].z, fma(_2387, cbSceneParam._m0[_2426].y, _2383 * cbSceneParam._m0[_2426].x)));
        float _2465 = fma(_2395, cbSceneParam._m0[_2434].w, fma(_2391, cbSceneParam._m0[_2434].z, fma(_2387, cbSceneParam._m0[_2434].y, _2383 * cbSceneParam._m0[_2434].x)));
        float _2473 = fma(_2395, cbSceneParam._m0[_2450].w, fma(_2391, cbSceneParam._m0[_2450].z, fma(_2387, cbSceneParam._m0[_2450].y, _2383 * cbSceneParam._m0[_2450].x)));
        float _2478 = cbSceneParam._m0[33u].z * _2473;
        float _2480 = cbSceneParam._m0[33u].w * _2473;
        float _2483 = fma(_2395, cbSceneParam._m0[_2442].w, fma(_2391, cbSceneParam._m0[_2442].z, fma(_2387, cbSceneParam._m0[_2442].y, _2383 * cbSceneParam._m0[_2442].x))) / _2473;
        float _2531 = (cbSceneParam._m0[33u].x - sqrt(((_2397 * _2397) + (_2396 * _2396)) + (_2398 * _2398))) * cbSceneParam._m0[33u].y;
        float _4954 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2538 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2478 + _2461) / _2473, (_2480 + _2465) / _2473), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2480 + _2461) / _2473, (_2465 - _2478) / _2473), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2461 - _2478) / _2473, (_2465 - _2480) / _2473), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2461 - _2480) / _2473, (_2478 + _2465) / _2473), _2483), 0.0)).x), vec4(0.25)));
        _2545 = 1.0 - (_2538 * cbSceneParam._m0[34u].x);
        _2546 = 1.0 - (_2538 * cbSceneParam._m0[34u].y);
        _2547 = 1.0 - (_2538 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2545 = 1.0;
        _2546 = 1.0;
        _2547 = 1.0;
    }
    float _2611;
    float _2613;
    float _2615;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2599 = fma(_2395, cbSceneParam._m0[63u].w, fma(_2391, cbSceneParam._m0[63u].z, fma(_2387, cbSceneParam._m0[63u].y, _2383 * cbSceneParam._m0[63u].x)));
        float _2600 = fma(_2395, cbSceneParam._m0[60u].w, fma(_2391, cbSceneParam._m0[60u].z, fma(_2387, cbSceneParam._m0[60u].y, _2383 * cbSceneParam._m0[60u].x))) / _2599;
        float _2601 = fma(_2395, cbSceneParam._m0[61u].w, fma(_2391, cbSceneParam._m0[61u].z, fma(_2387, cbSceneParam._m0[61u].y, _2383 * cbSceneParam._m0[61u].x))) / _2599;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2600 >= cbSceneParam._m0[64u].x) && (_2601 >= cbSceneParam._m0[64u].y)) && (_2600 <= cbSceneParam._m0[64u].z)) && (_2601 <= cbSceneParam._m0[64u].w))
        {
            float _2739 = fma(_2395, cbSceneParam._m0[62u].w, fma(_2391, cbSceneParam._m0[62u].z, fma(_2387, cbSceneParam._m0[62u].y, _2383 * cbSceneParam._m0[62u].x))) / _2599;
            float _2743 = isnan(cbSceneParam._m0[41u].w) ? _2739 : (isnan(_2739) ? cbSceneParam._m0[41u].w : max(_2739, cbSceneParam._m0[41u].w));
            float _2786 = (cbSceneParam._m0[33u].x - sqrt(((_2397 * _2397) + (_2396 * _2396)) + (_2398 * _2398))) * cbSceneParam._m0[33u].y;
            float _4970 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
            float _2793 = (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2600, cbSceneParam._m0[33u].w + _2601), _2743), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2600, _2601 - cbSceneParam._m0[33u].z), _2743), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2600 - cbSceneParam._m0[33u].z, _2601 - cbSceneParam._m0[33u].w), _2743), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2600 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2601), _2743), 0.0)).x), vec4(0.25)));
            float _2797 = 1.0 - (_2793 * cbSceneParam._m0[34u].x);
            float _2798 = 1.0 - (_2793 * cbSceneParam._m0[34u].y);
            float _2799 = 1.0 - (_2793 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2799) ? _2547 : (isnan(_2547) ? _2799 : min(_2547, _2799));
            frontier_phi_37_36_ladder_1 = isnan(_2798) ? _2546 : (isnan(_2546) ? _2798 : min(_2546, _2798));
            frontier_phi_37_36_ladder_2 = isnan(_2797) ? _2545 : (isnan(_2545) ? _2797 : min(_2545, _2797));
        }
        else
        {
            frontier_phi_37_36_ladder = _2547;
            frontier_phi_37_36_ladder_1 = _2546;
            frontier_phi_37_36_ladder_2 = _2545;
        }
        _2611 = frontier_phi_37_36_ladder_2;
        _2613 = frontier_phi_37_36_ladder_1;
        _2615 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2611 = _2545;
        _2613 = _2546;
        _2615 = _2547;
    }
    uvec4 _2620 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2622 = _2620.x * 14u;
    uint _2623 = _2622 + 13u;
    float _2630 = _1293 + (-1.0);
    float _2635 = (cbLight._m0[_2623].x * _2630) + 1.0;
    float _2636 = (cbLight._m0[_2623].y * _2630) + 1.0;
    float _2637 = (cbLight._m0[_2623].z * _2630) + 1.0;
    float _2638 = (cbLight._m0[_2623].w * _2630) + 1.0;
    uint _2639 = _2622 + 5u;
    float _2645 = isnan(1.0) ? _2636 : (isnan(_2636) ? 1.0 : min(_2636, 1.0));
    uint _2649 = _2622 + 4u;
    float _2658 = isnan(1.0) ? _2635 : (isnan(_2635) ? 1.0 : min(_2635, 1.0));
    uint _2662 = _2622 | 1u;
    float _2673 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_1116, _1117, _1118));
    float _2676 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_1116, _1117, _1118));
    float _5006 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _5017 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2681 = (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * 0.3183098733425140380859375;
    float _2683 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * 0.3183098733425140380859375;
    float _2690 = ((cbLight._m0[_2639].x * _2645) * _2683) + (((cbLight._m0[_2649].x * _2611) * _2658) * _2681);
    float _2691 = ((_2645 * cbLight._m0[_2639].y) * _2683) + (((cbLight._m0[_2649].y * _2613) * _2658) * _2681);
    float _2692 = ((_2645 * cbLight._m0[_2639].z) * _2683) + (((cbLight._m0[_2649].z * _2615) * _2658) * _2681);
    uvec4 _2696 = floatBitsToUint(cbLight._m0[_2622 + 12u]);
    bool _2698 = _2696.x == 0u;
    float _2800;
    float _2802;
    float _2804;
    if (_2698)
    {
        _2800 = _2690;
        _2802 = _2691;
        _2804 = _2692;
    }
    else
    {
        uint _2808 = _2622 + 6u;
        float _2824 = (dot(vec3(cbLight._m0[_2622 + 2u].xyz), vec3(_1116, _1117, _1118)) * 0.5) + 0.5;
        float _2825 = _2824 * _2824;
        float _5028 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2826 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
        float _2827 = isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0));
        _2800 = (((cbLight._m0[_2808].x * 0.3183098733425140380859375) * _2826) * _2827) + _2690;
        _2802 = (((cbLight._m0[_2808].y * 0.3183098733425140380859375) * _2826) * _2827) + _2691;
        _2804 = (((cbLight._m0[_2808].z * 0.3183098733425140380859375) * _2826) * _2827) + _2692;
    }
    bool _2807 = _2696.y == 0u;
    float _2862;
    float _2864;
    float _2866;
    if (_2807)
    {
        _2862 = _2800;
        _2864 = _2802;
        _2866 = _2804;
    }
    else
    {
        uint _3035 = _2622 + 7u;
        float _3051 = (dot(vec3(cbLight._m0[_2622 + 3u].xyz), vec3(_1116, _1117, _1118)) * 0.5) + 0.5;
        float _3052 = _3051 * _3051;
        float _5044 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3053 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
        float _3054 = isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0));
        _2862 = (((cbLight._m0[_3035].x * 0.3183098733425140380859375) * _3053) * _3054) + _2800;
        _2864 = (((cbLight._m0[_3035].y * 0.3183098733425140380859375) * _3053) * _3054) + _2802;
        _2866 = (((cbLight._m0[_3035].z * 0.3183098733425140380859375) * _3053) * _3054) + _2804;
    }
    uint _2869 = _2622 + 8u;
    float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _1119) * 0.949999988079071044921875);
    float _2883 = _2882 * _2882;
    float _2884 = cbLight._m0[_2622].x + _1195;
    float _2885 = cbLight._m0[_2622].y + _1196;
    float _2886 = cbLight._m0[_2622].z + _1197;
    float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
    float _2891 = _2890 * _2884;
    float _2892 = _2890 * _2885;
    float _2893 = _2890 * _2886;
    float _2894 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_2622].xyz));
    float _5060 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2897 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
    float _5071 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _2898 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
    float _2899 = dot(vec3(_1116, _1117, _1118), vec3(_2891, _2892, _2893));
    float _5082 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _2902 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
    float _2903 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2891, _2892, _2893));
    float _5093 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    float _2907 = _2883 * _2883;
    float _2911 = ((_2902 * _2902) * (_2907 + (-1.0))) + 1.0;
    float _2919 = exp2(log2(1.0 - (isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0)))) * 5.0);
    float _2920 = 0.959999978542327880859375 - _1274;
    float _2922 = 0.959999978542327880859375 - _1275;
    float _2923 = 0.959999978542327880859375 - _1276;
    float _2930 = 1.0 - _2883;
    float _2941 = (0.5 / (((_2898 * ((_2897 * _2930) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _2930) + _2883) * _2897))) * _2897;
    float _5104 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
    float _2943 = (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_2907 / ((_2911 * _2911) * 3.141590118408203125));
    uint _2957 = _2622 + 9u;
    float _2968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _1119) * 0.949999988079071044921875);
    float _2969 = _2968 * _2968;
    float _2970 = cbLight._m0[_2662].x + _1195;
    float _2971 = cbLight._m0[_2662].y + _1196;
    float _2972 = cbLight._m0[_2662].z + _1197;
    float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
    float _2977 = _2976 * _2970;
    float _2978 = _2976 * _2971;
    float _2979 = _2976 * _2972;
    float _2980 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_2662].xyz));
    float _5115 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
    float _2983 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
    float _2984 = dot(vec3(_1116, _1117, _1118), vec3(_2977, _2978, _2979));
    float _5126 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
    float _2987 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
    float _2988 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2977, _2978, _2979));
    float _5137 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
    float _2992 = _2969 * _2969;
    float _2996 = ((_2987 * _2987) * (_2992 + (-1.0))) + 1.0;
    float _3003 = exp2(log2(1.0 - (isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0)))) * 5.0);
    float _3010 = 1.0 - _2969;
    float _3020 = (0.5 / (((_2898 * ((_2983 * _3010) + _2969)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _3010) + _2969) * _2983))) * _2983;
    float _5148 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
    float _3022 = (isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0))) * (_2992 / ((_2996 * _2996) * 3.141590118408203125));
    float _3032 = (((((_3003 * _2920) + _1277) * cbLight._m0[_2957].x) * _3022) * _2645) + ((((cbLight._m0[_2869].x * _2611) * ((_2919 * _2920) + _1277)) * _2943) * _2658);
    float _3033 = (((((_3003 * _2922) + _1279) * cbLight._m0[_2957].y) * _3022) * _2645) + ((((cbLight._m0[_2869].y * _2613) * ((_2919 * _2922) + _1279)) * _2943) * _2658);
    float _3034 = (((((_3003 * _2923) + _1280) * cbLight._m0[_2957].z) * _3022) * _2645) + ((((cbLight._m0[_2869].z * _2615) * ((_2919 * _2923) + _1280)) * _2943) * _2658);
    float _3090;
    float _3092;
    float _3094;
    if (_2698)
    {
        _3090 = _3032;
        _3092 = _3033;
        _3094 = _3034;
    }
    else
    {
        uint _3096 = _2622 + 2u;
        uint _3100 = _2622 + 10u;
        float _3114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3096].w)) * _1119) * 0.949999988079071044921875);
        float _3115 = _3114 * _3114;
        float _3116 = cbLight._m0[_3096].x + _1195;
        float _3117 = cbLight._m0[_3096].y + _1196;
        float _3118 = cbLight._m0[_3096].z + _1197;
        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
        float _3123 = _3122 * _3116;
        float _3124 = _3122 * _3117;
        float _3125 = _3122 * _3118;
        float _3126 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_3096].xyz));
        float _5159 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
        float _3129 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
        float _3130 = dot(vec3(_1116, _1117, _1118), vec3(_3123, _3124, _3125));
        float _5170 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
        float _3133 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
        float _3134 = dot(vec3(cbLight._m0[_3096].xyz), vec3(_3123, _3124, _3125));
        float _5181 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        float _3138 = _3115 * _3115;
        float _3142 = ((_3133 * _3133) * (_3138 + (-1.0))) + 1.0;
        float _3149 = exp2(log2(1.0 - (isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0)))) * 5.0);
        float _3156 = 1.0 - _3115;
        float _3166 = (0.5 / (((_2898 * ((_3129 * _3156) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _3156) + _3115) * _3129))) * _3129;
        float _5192 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
        float _3168 = (isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0))) * (_3138 / ((_3142 * _3142) * 3.141590118408203125));
        float _3169 = isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0));
        _3090 = (((((_3149 * _2920) + _1277) * cbLight._m0[_3100].x) * _3168) * _3169) + _3032;
        _3092 = (((((_3149 * _2922) + _1279) * cbLight._m0[_3100].y) * _3168) * _3169) + _3033;
        _3094 = (((((_3149 * _2923) + _1280) * cbLight._m0[_3100].z) * _3168) * _3169) + _3034;
    }
    float _3200;
    float _3202;
    float _3204;
    if (_2807)
    {
        _3200 = _3090;
        _3202 = _3092;
        _3204 = _3094;
    }
    else
    {
        uint _3211 = _2622 + 3u;
        uint _3215 = _2622 + 11u;
        float _3229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3211].w)) * _1119) * 0.949999988079071044921875);
        float _3230 = _3229 * _3229;
        float _3231 = cbLight._m0[_3211].x + _1195;
        float _3232 = cbLight._m0[_3211].y + _1196;
        float _3233 = cbLight._m0[_3211].z + _1197;
        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
        float _3238 = _3237 * _3231;
        float _3239 = _3237 * _3232;
        float _3240 = _3237 * _3233;
        float _3241 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_3211].xyz));
        float _5208 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
        float _3244 = isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0));
        float _3245 = dot(vec3(_1116, _1117, _1118), vec3(_3238, _3239, _3240));
        float _5219 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
        float _3248 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
        float _3249 = dot(vec3(cbLight._m0[_3211].xyz), vec3(_3238, _3239, _3240));
        float _5230 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
        float _3253 = _3230 * _3230;
        float _3257 = ((_3248 * _3248) * (_3253 + (-1.0))) + 1.0;
        float _3264 = exp2(log2(1.0 - (isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0)))) * 5.0);
        float _3271 = 1.0 - _3230;
        float _3281 = (0.5 / (((_2898 * ((_3244 * _3271) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _3271) + _3230) * _3244))) * _3244;
        float _5241 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
        float _3283 = (isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3253 / ((_3257 * _3257) * 3.141590118408203125));
        float _3284 = isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0));
        _3200 = (((((_3264 * _2920) + _1277) * cbLight._m0[_3215].x) * _3283) * _3284) + _3090;
        _3202 = (((((_3264 * _2922) + _1279) * cbLight._m0[_3215].y) * _3283) * _3284) + _3092;
        _3204 = (((((_3264 * _2923) + _1280) * cbLight._m0[_3215].z) * _3283) * _3284) + _3094;
    }
    float _3350;
    float _3352;
    float _3354;
    float _3356;
    float _3358;
    float _3360;
    if (_2620.y == 0u)
    {
        uvec4 _3305 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3306 = _3305.x;
        uint _3317 = uint((float(_3305.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1216) / _3306))) + floor(float(uint(cbSceneParam._m0[85u].x * _1215) / _3306)));
        float _3327 = (log2(_2398 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3328 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
        uint _3331 = uint(isnan(14.0) ? _3328 : (isnan(_3328) ? 14.0 : min(_3328, 14.0)));
        uvec4 _3336 = texelFetch(g_lightClusterGridBuffer, int(((_3331 << 2u) + (_3317 << 6u)) >> 2u));
        uint _3337 = _3336.x;
        uint _3338 = _3305.z;
        float _3417;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        if (((((1u << ((_3338 >> 4u) & 15u)) + 4294967295u) & _3337) == 0u) || ((_3338 & 240u) == 0u))
        {
            _3417 = 0.0;
            _3419 = 0.0;
            _3421 = 0.0;
            _3423 = 0.0;
            _3425 = 0.0;
            _3427 = 0.0;
        }
        else
        {
            float _3418;
            float _3420;
            float _3422;
            float _3424;
            float _3426;
            float _3428;
            float _3569 = 0.0;
            float _3570 = 0.0;
            float _3571 = 0.0;
            float _3572 = 0.0;
            float _3573 = 0.0;
            float _3574 = 0.0;
            uint _3575 = 0u;
            uint _3584;
            bool _3585;
            for (;;)
            {
                _3584 = texelFetch(g_lightClassification, int((((_3331 << 5u) + (_3317 << 9u)) + (_3575 << 2u)) >> 2u)).x;
                _3585 = _3584 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3585)
                {
                    frontier_phi_71_pred = _3574;
                    frontier_phi_71_pred_1 = _3573;
                    frontier_phi_71_pred_2 = _3572;
                    frontier_phi_71_pred_3 = _3571;
                    frontier_phi_71_pred_4 = _3570;
                    frontier_phi_71_pred_5 = _3569;
                }
                else
                {
                    float _3714;
                    float _3715;
                    float _3716;
                    float _3717;
                    float _3718;
                    float _3719;
                    uint _3720;
                    _3714 = _3569;
                    _3715 = _3570;
                    _3716 = _3571;
                    _3717 = _3572;
                    _3718 = _3573;
                    _3719 = _3574;
                    _3720 = _3584;
                    float _3641;
                    float _3642;
                    float _3643;
                    float _3644;
                    float _3645;
                    float _3646;
                    for (;;)
                    {
                        uint _3724 = uint(findLSB(_3720)) + (_3575 << 5u);
                        uint _3721 = (_3720 + 4294967295u) & _3720;
                        uint _3726 = _3724 * 48u;
                        vec4 _3740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3726)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 3u)).x));
                        uint _3746 = (_3724 * 48u) + 4u;
                        vec4 _3759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3746)).x, texelFetch(g_PointLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3746 + 3u)).x));
                        uint _3765 = (_3724 * 48u) + 8u;
                        vec3 _3776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3765)).x, texelFetch(g_PointLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3765 + 2u)).x));
                        float _3780 = _3740.x - _2396;
                        float _3781 = _3740.y - _2397;
                        float _3782 = _3740.z - _2398;
                        float _3783 = dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782));
                        float _3786 = inversesqrt(_3783);
                        float _3787 = _3786 * _3780;
                        float _3788 = _3786 * _3781;
                        float _3789 = _3786 * _3782;
                        float _3790 = dot(vec3(_1234, _1237, _1240), vec3(_3787, _3788, _3789));
                        float _3795 = 1.0 - (_3783 * _3740.w);
                        float _5267 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                        float _3796 = isnan(1.0) ? _5267 : (isnan(_5267) ? 1.0 : min(_5267, 1.0));
                        float _3797 = sqrt(_3783) * _3759.w;
                        float _3800 = 1.39999997615814208984375 / (_3797 + 1.39999997615814208984375);
                        float _3801 = _3800 * _3800;
                        float _3804 = ((1.0 - _3801) * _3790) + _3801;
                        float _3807 = _3797 * _3797;
                        float _3811 = ((isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0))) * _3796) / ((_3807 * 0.699999988079071044921875) + 1.0);
                        float _3815 = (-0.0) - _2396;
                        float _3816 = (-0.0) - _2397;
                        float _3817 = (-0.0) - _2398;
                        float _3821 = inversesqrt(dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817)));
                        float _3822 = _3821 * _3815;
                        float _3823 = _3821 * _3816;
                        float _3824 = _3821 * _3817;
                        float _3831 = exp2(log2(1.0 / ((_3807 * 3.5) + 5.0)) * 0.25);
                        float _3832 = 1.0 - _1309;
                        float _3839 = sqrt(1.0 - ((1.0 - (_3832 * _3832)) * (1.0 - (_3831 * _3831))));
                        float _3840 = _3839 * _3839;
                        float _3841 = _3840 * _3840;
                        float _3842 = _3822 + _3787;
                        float _3843 = _3823 + _3788;
                        float _3844 = _3824 + _3789;
                        float _3848 = inversesqrt(dot(vec3(_3842, _3843, _3844), vec3(_3842, _3843, _3844)));
                        float _3852 = dot(vec3(_1234, _1237, _1240), vec3(_3822, _3823, _3824));
                        float _5283 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                        float _3855 = isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0));
                        float _3856 = dot(vec3(_1234, _1237, _1240), vec3(_3848 * _3842, _3848 * _3843, _3848 * _3844));
                        float _5294 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                        float _3859 = isnan(1.0) ? _5294 : (isnan(_5294) ? 1.0 : min(_5294, 1.0));
                        float _3863 = ((_3859 * _3859) * (_3841 + (-1.0))) + 1.0;
                        float _3864 = _3800 * _3840;
                        float _3865 = _3864 * _3864;
                        float _3868 = ((1.0 - _3865) * _3790) + _3865;
                        float _5305 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                        float _3869 = isnan(1.0) ? _5305 : (isnan(_5305) ? 1.0 : min(_5305, 1.0));
                        float _3870 = 1.0 - _3840;
                        float _3880 = (0.5 / (((_3869 * ((_3855 * _3870) + _3840)) + 9.9999999392252902907785028219223e-09) + (((_3869 * _3870) + _3840) * _3855))) * _3869;
                        float _5316 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                        float _3891 = (((_3841 * 3.1415927410125732421875) * (isnan(1.0) ? _5316 : (isnan(_5316) ? 1.0 : min(_5316, 1.0)))) / ((_3863 * _3863) * ((_3807 * 2.1991131305694580078125) + 3.141590118408203125))) * _3796;
                        _3644 = (_3811 * _3759.x) + _3717;
                        _3645 = (_3811 * _3759.y) + _3718;
                        _3646 = (_3811 * _3759.z) + _3719;
                        _3641 = (_3891 * _3776.x) + _3714;
                        _3642 = (_3891 * _3776.y) + _3715;
                        _3643 = (_3891 * _3776.z) + _3716;
                        if (_3721 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3714 = _3641;
                            _3715 = _3642;
                            _3716 = _3643;
                            _3717 = _3644;
                            _3718 = _3645;
                            _3719 = _3646;
                            _3720 = _3721;
                        }
                    }
                    frontier_phi_71_pred = _3646;
                    frontier_phi_71_pred_1 = _3645;
                    frontier_phi_71_pred_2 = _3644;
                    frontier_phi_71_pred_3 = _3643;
                    frontier_phi_71_pred_4 = _3642;
                    frontier_phi_71_pred_5 = _3641;
                }
                _3428 = frontier_phi_71_pred;
                _3426 = frontier_phi_71_pred_1;
                _3424 = frontier_phi_71_pred_2;
                _3422 = frontier_phi_71_pred_3;
                _3420 = frontier_phi_71_pred_4;
                _3418 = frontier_phi_71_pred_5;
                uint _3576 = _3575 + 1u;
                if (_3576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3569 = _3418;
                    _3570 = _3420;
                    _3571 = _3422;
                    _3572 = _3424;
                    _3573 = _3426;
                    _3574 = _3428;
                    _3575 = _3576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3417 = _3418;
            _3419 = _3420;
            _3421 = _3422;
            _3423 = _3424;
            _3425 = _3426;
            _3427 = _3428;
        }
        uvec4 _3431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3432 = _3431.z;
        uint _3434 = (_3432 >> 8u) & 15u;
        float _3537;
        float _3539;
        float _3541;
        float _3543;
        float _3545;
        float _3547;
        if (((4294967295u << _3434) & _3337) == 0u)
        {
            _3537 = _3417;
            _3539 = _3419;
            _3541 = _3421;
            _3543 = _3423;
            _3545 = _3425;
            _3547 = _3427;
        }
        else
        {
            float _3562 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
            float _3563 = _3562 * _2396;
            float _3564 = _3562 * _2397;
            float _3565 = _3562 * _2398;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3434 < ((_3432 >> 12u) & 15u))
            {
                float _3538;
                float _3540;
                float _3542;
                float _3544;
                float _3546;
                float _3548;
                float _3697 = _3417;
                float _3698 = _3419;
                float _3699 = _3421;
                float _3700 = _3423;
                float _3701 = _3425;
                float _3702 = _3427;
                uint _3703 = _3434;
                uint _3712;
                bool _3713;
                for (;;)
                {
                    _3712 = texelFetch(g_lightClassification, int((((_3331 << 5u) + (_3317 << 9u)) + (_3703 << 2u)) >> 2u)).x;
                    _3713 = _3712 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3713)
                    {
                        frontier_phi_82_pred = _3702;
                        frontier_phi_82_pred_1 = _3701;
                        frontier_phi_82_pred_2 = _3700;
                        frontier_phi_82_pred_3 = _3699;
                        frontier_phi_82_pred_4 = _3698;
                        frontier_phi_82_pred_5 = _3697;
                    }
                    else
                    {
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _4198;
                        float _4199;
                        float _4200;
                        float _4201;
                        float _4202;
                        float _4203;
                        float _3918 = _3697;
                        float _3919 = _3698;
                        float _3920 = _3699;
                        float _3921 = _3700;
                        float _3922 = _3701;
                        float _3923 = _3702;
                        uint _3924 = _3712;
                        uint _3925;
                        vec4 _3950;
                        float _3951;
                        vec4 _3966;
                        vec3 _3978;
                        vec4 _3993;
                        vec4 _4008;
                        float _4054;
                        bool _4055;
                        for (;;)
                        {
                            uint _3935 = ((_3703 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3924));
                            _3925 = (_3924 + 4294967295u) & _3924;
                            uint _3937 = _3935 * 40u;
                            _3950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 3u)).x));
                            _3951 = _3950.w;
                            uint _3953 = (_3935 * 40u) + 4u;
                            _3966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3953 + 3u)).x));
                            uint _3968 = (_3935 * 40u) + 8u;
                            _3978 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3968 + 2u)).x));
                            uint _3980 = (_3935 * 40u) + 16u;
                            _3993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 3u)).x));
                            uint _3995 = (_3935 * 40u) + 20u;
                            _4008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3995 + 3u)).x));
                            uint _4010 = (_3935 * 40u) + 24u;
                            vec4 _4023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4010 + 3u)).x));
                            uint _4029 = (_3935 * 40u) + 28u;
                            vec4 _4042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 3u)).x));
                            _4054 = fma(_2398, _4042.z, fma(_2397, _4042.y, _4042.x * _2396)) + _4042.w;
                            _4055 = !((fma(_2398, _4023.z, fma(_2397, _4023.y, _4023.x * _2396)) + _4023.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4055)
                            {
                                float _4082 = _3950.x - _2396;
                                float _4083 = _3950.y - _2397;
                                float _4084 = _3950.z - _2398;
                                float _4085 = dot(vec3(_4082, _4083, _4084), vec3(_4082, _4083, _4084));
                                float _4088 = inversesqrt(_4085);
                                float _4089 = _4088 * _4082;
                                float _4090 = _4088 * _4083;
                                float _4091 = _4088 * _4084;
                                float _4095 = 1.0 - (_4085 / (_3951 * _3951));
                                float _5327 = isnan(0.0) ? _4095 : (isnan(_4095) ? 0.0 : max(_4095, 0.0));
                                float _4096 = isnan(1.0) ? _5327 : (isnan(_5327) ? 1.0 : min(_5327, 1.0));
                                float _4100 = sqrt(_4085) * _3966.w;
                                float _4102 = 1.39999997615814208984375 / (_4100 + 1.39999997615814208984375);
                                float _4103 = _4102 * _4102;
                                float _4106 = ((1.0 - _4103) * dot(vec3(_4089, _4090, _4091), vec3(_1234, _1237, _1240))) + _4103;
                                float _4109 = _4100 * _4100;
                                float _4113 = (fma(_2398, _3993.z, fma(_2397, _3993.y, _3993.x * _2396)) + _3993.w) / _4054;
                                float _4114 = (fma(_2398, _4008.z, fma(_2397, _4008.y, _4008.x * _2396)) + _4008.w) / _4054;
                                float _4118 = 1.0 - dot(vec2(_4113, _4114), vec2(_4113, _4114));
                                float _5343 = isnan(0.0) ? _4118 : (isnan(_4118) ? 0.0 : max(_4118, 0.0));
                                float _4119 = isnan(1.0) ? _5343 : (isnan(_5343) ? 1.0 : min(_5343, 1.0));
                                float _4120 = _4119 * (((isnan(0.0) ? _4106 : (isnan(_4106) ? 0.0 : max(_4106, 0.0))) * _4096) / ((_4109 * 0.699999988079071044921875) + 1.0));
                                float _4132 = exp2(log2(1.0 / ((_4109 * 3.5) + 5.0)) * 0.25);
                                float _4133 = 1.0 - _1309;
                                float _4140 = sqrt(1.0 - ((1.0 - (_4133 * _4133)) * (1.0 - (_4132 * _4132))));
                                float _4141 = _4140 * _4140;
                                float _4142 = _4141 * _4141;
                                float _4143 = _4089 - _3563;
                                float _4144 = _4090 - _3564;
                                float _4145 = _4091 - _3565;
                                float _4149 = inversesqrt(dot(vec3(_4143, _4144, _4145), vec3(_4143, _4144, _4145)));
                                float _4153 = dot(vec3(_1234, _1237, _1240), vec3((-0.0) - _3563, (-0.0) - _3564, (-0.0) - _3565));
                                float _5354 = isnan(0.0) ? _4153 : (isnan(_4153) ? 0.0 : max(_4153, 0.0));
                                float _4156 = isnan(1.0) ? _5354 : (isnan(_5354) ? 1.0 : min(_5354, 1.0));
                                float _4157 = dot(vec3(_1234, _1237, _1240), vec3(_4149 * _4143, _4149 * _4144, _4149 * _4145));
                                float _5365 = isnan(0.0) ? _4157 : (isnan(_4157) ? 0.0 : max(_4157, 0.0));
                                float _4160 = isnan(1.0) ? _5365 : (isnan(_5365) ? 1.0 : min(_5365, 1.0));
                                float _4164 = ((_4160 * _4160) * (_4142 + (-1.0))) + 1.0;
                                float _4165 = _4102 * _4141;
                                float _4166 = _4165 * _4165;
                                float _4172 = ((1.0 - _4166) * dot(vec3(_1234, _1237, _1240), vec3(_4089, _4090, _4091))) + _4166;
                                float _5376 = isnan(0.0) ? _4172 : (isnan(_4172) ? 0.0 : max(_4172, 0.0));
                                float _4173 = isnan(1.0) ? _5376 : (isnan(_5376) ? 1.0 : min(_5376, 1.0));
                                float _4174 = 1.0 - _4141;
                                float _4184 = (0.5 / (((_4173 * ((_4156 * _4174) + _4141)) + 9.9999999392252902907785028219223e-09) + (((_4173 * _4174) + _4141) * _4156))) * _4173;
                                float _5387 = isnan(0.0) ? _4184 : (isnan(_4184) ? 0.0 : max(_4184, 0.0));
                                float _4194 = (_4119 * _4096) * (((_4142 * 3.1415927410125732421875) * (isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0)))) / ((_4164 * _4164) * ((_4109 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4120 * _3966.z;
                                frontier_phi_88_pred_1 = _4120 * _3966.y;
                                frontier_phi_88_pred_2 = _4120 * _3966.x;
                                frontier_phi_88_pred_3 = _4194 * _3978.z;
                                frontier_phi_88_pred_4 = _4194 * _3978.y;
                                frontier_phi_88_pred_5 = _4194 * _3978.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4203 = frontier_phi_88_pred;
                            _4202 = frontier_phi_88_pred_1;
                            _4201 = frontier_phi_88_pred_2;
                            _4200 = frontier_phi_88_pred_3;
                            _4199 = frontier_phi_88_pred_4;
                            _4198 = frontier_phi_88_pred_5;
                            _3908 = _4201 + _3921;
                            _3909 = _4202 + _3922;
                            _3910 = _4203 + _3923;
                            _3905 = _4198 + _3918;
                            _3906 = _4199 + _3919;
                            _3907 = _4200 + _3920;
                            if (_3925 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3918 = _3905;
                                _3919 = _3906;
                                _3920 = _3907;
                                _3921 = _3908;
                                _3922 = _3909;
                                _3923 = _3910;
                                _3924 = _3925;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3910;
                        frontier_phi_82_pred_1 = _3909;
                        frontier_phi_82_pred_2 = _3908;
                        frontier_phi_82_pred_3 = _3907;
                        frontier_phi_82_pred_4 = _3906;
                        frontier_phi_82_pred_5 = _3905;
                    }
                    _3548 = frontier_phi_82_pred;
                    _3546 = frontier_phi_82_pred_1;
                    _3544 = frontier_phi_82_pred_2;
                    _3542 = frontier_phi_82_pred_3;
                    _3540 = frontier_phi_82_pred_4;
                    _3538 = frontier_phi_82_pred_5;
                    uint _3704 = _3703 + 1u;
                    if (_3704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3697 = _3538;
                        _3698 = _3540;
                        _3699 = _3542;
                        _3700 = _3544;
                        _3701 = _3546;
                        _3702 = _3548;
                        _3703 = _3704;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3544;
                frontier_phi_63_64_ladder_1 = _3548;
                frontier_phi_63_64_ladder_2 = _3546;
                frontier_phi_63_64_ladder_3 = _3542;
                frontier_phi_63_64_ladder_4 = _3540;
                frontier_phi_63_64_ladder_5 = _3538;
            }
            else
            {
                frontier_phi_63_64_ladder = _3423;
                frontier_phi_63_64_ladder_1 = _3427;
                frontier_phi_63_64_ladder_2 = _3425;
                frontier_phi_63_64_ladder_3 = _3421;
                frontier_phi_63_64_ladder_4 = _3419;
                frontier_phi_63_64_ladder_5 = _3417;
            }
            _3537 = frontier_phi_63_64_ladder_5;
            _3539 = frontier_phi_63_64_ladder_4;
            _3541 = frontier_phi_63_64_ladder_3;
            _3543 = frontier_phi_63_64_ladder;
            _3545 = frontier_phi_63_64_ladder_2;
            _3547 = frontier_phi_63_64_ladder_1;
        }
        float _3552 = isnan(1.0) ? _1293 : (isnan(_1293) ? 1.0 : min(_1293, 1.0));
        _3350 = (_3552 * _3543) + _2862;
        _3352 = (_3552 * _3545) + _2864;
        _3354 = (_3552 * _3547) + _2866;
        _3356 = ((_3537 * _1277) * _3552) + _3200;
        _3358 = ((_3539 * _1279) * _3552) + _3202;
        _3360 = ((_3541 * _1280) * _3552) + _3204;
    }
    else
    {
        _3350 = _2862;
        _3352 = _2864;
        _3354 = _2866;
        _3356 = _3200;
        _3358 = _3202;
        _3360 = _3204;
    }
    float _5403 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _5414 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _5425 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _3377 = ((isnan(1.0) ? _5403 : (isnan(_5403) ? 1.0 : min(_5403, 1.0))) * (_3350 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1293))) + ((_3356 + ((isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))) * _2130)) * cbPerFrame._m0[3u].x);
    float _3378 = ((isnan(1.0) ? _5414 : (isnan(_5414) ? 1.0 : min(_5414, 1.0))) * (_3352 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1293))) + ((_3358 + ((isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0))) * _2130)) * cbPerFrame._m0[3u].x);
    float _3379 = ((isnan(1.0) ? _5425 : (isnan(_5425) ? 1.0 : min(_5425, 1.0))) * (_3354 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1293))) + ((_3360 + ((isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0))) * _2130)) * cbPerFrame._m0[3u].x);
    uint _3380 = _277 + 6u;
    float _3388 = _1215 / cbSceneParam._m0[86u].x;
    float _3389 = _1216 / cbSceneParam._m0[86u].y;
    vec4 _3403 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3388, _3389, (log2((isnan(cbSceneParam._m0[77u].w) ? _1138 : (isnan(_1138) ? cbSceneParam._m0[77u].w : min(_1138, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3405 = _3403.x;
    float _3406 = _3403.y;
    float _3407 = _3403.z;
    float _3408 = _3403.w;
    float _3479;
    float _3481;
    float _3483;
    float _3485;
    if (_1138 > cbSceneParam._m0[78u].w)
    {
        float _3442 = isnan(_1138) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1138 : min(cbSceneParam._m0[80u].w, _1138));
        float _3443 = _3442 / _1138;
        float _3454 = _3443 * _1188;
        float _3455 = _1189 * _3443;
        float _3456 = (-0.0) - _3455;
        float _3457 = _3443 * _1190;
        float _3459 = (cbSceneParam._m0[77u].w * _3456) / _3442;
        float _3460 = _3459 + cbSceneParam._m0[79u].w;
        float _3461 = cbSceneParam._m0[79u].w - _3455;
        float _3467 = sqrt(((_3454 * _3454) + (_3455 * _3455)) + (_3457 * _3457));
        float _3470 = (1.0 - (cbSceneParam._m0[77u].w / _3442)) * _3467;
        float _3475 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3477 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3654;
        if (abs((_3456 - _3459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3654 = ((((_3460 > 0.0) ? exp2(_3475 * _3460) : (2.0 - exp2(_3477 * _3460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3470;
        }
        else
        {
            float _3598 = 1.0 / cbSceneParam._m0[80u].x;
            float _3599 = isnan(_3461) ? _3460 : (isnan(_3460) ? _3461 : max(_3460, _3461));
            float _3600 = isnan(_3461) ? _3460 : (isnan(_3460) ? _3461 : min(_3460, _3461));
            float _3609 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : min(_3599, 0.0));
            float _3610 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : min(_3600, 0.0));
            _3654 = ((abs(_3467 / _3456) * cbSceneParam._m0[80u].y) * ((((_3609 - _3610) * 2.0) - ((exp2(_3475 * (isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0)))) - exp2(_3475 * (isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))))) * _3598)) - ((exp2(_3477 * _3609) - exp2(_3477 * _3610)) * _3598))) + (_3470 * cbSceneParam._m0[80u].z);
        }
        vec4 _3656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3388, _3389, 1.0), 0.0);
        float _3665 = exp2((_3654 * (-1.44269502162933349609375)) * (1.0 - _3656.w));
        float _3666 = log2(_3665);
        float _3682 = log2(_3408);
        _3479 = (exp2(_3682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3666 * cbSceneParam._m0[78u].x)) * _3656.x) / cbSceneParam._m0[78u].x)) + _3405;
        _3481 = (exp2(_3682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3666 * cbSceneParam._m0[78u].y)) * _3656.y) / cbSceneParam._m0[78u].y)) + _3406;
        _3483 = (exp2(_3682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3666 * cbSceneParam._m0[78u].z)) * _3656.z) / cbSceneParam._m0[78u].z)) + _3407;
        _3485 = _3665 * _3408;
    }
    else
    {
        _3479 = _3405;
        _3481 = _3406;
        _3483 = _3407;
        _3485 = _3408;
    }
    bool _3692;
    vec4 _3495;
    vec4 _3517;
    float _3519;
    float _3523;
    float _3524;
    float _3525;
    float _3526;
    bool _3536;
    for (;;)
    {
        _3495 = cbMatDynParam._m0[0u];
        float _3497 = roundEven(_3495.y);
        bool _3498 = _3497 == 3.0;
        float _3499 = log2(_3485);
        float _3506 = exp2(_3499 * cbSceneParam._m0[78u].x) * _3377;
        float _3507 = exp2(_3499 * cbSceneParam._m0[78u].y) * _3378;
        float _3508 = exp2(_3499 * cbSceneParam._m0[78u].z) * _3379;
        float _3515 = _1204 + (-0.5);
        _3517 = cbMtdParam._m0[1u];
        _3519 = _3517.y * _3515;
        float _3522 = (_3497 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3523 = _3522 * (_3498 ? _3506 : (_3506 + (cbSceneParam._m0[72u].w * _3479)));
        _3524 = _3522 * (_3498 ? _3507 : (_3507 + (cbSceneParam._m0[72u].w * _3481)));
        _3525 = _3522 * (_3498 ? _3508 : (_3508 + (cbSceneParam._m0[72u].w * _3483)));
        _3526 = _3515 * 0.999000012874603271484375;
        _3536 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3536)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _3526) < 0.5)
            {
                _3692 = true;
                break;
            }
        }
        uint _3633 = _1253 + uint(_3495.w);
        if ((cbInstanceData._m0[_3633].w < 1.0) && ((cbInstanceData._m0[_3633].w + _3526) < 0.5))
        {
            _3692 = true;
            break;
        }
        if ((_3519 + 1.0) < _3517.x)
        {
            _3692 = true;
            break;
        }
        _3692 = false;
        break;
    }
    float _3896;
    if (_3692)
    {
        discard_state = true;
        _3896 = 0.0;
    }
    else
    {
        _3896 = cbInstanceData._m0[_3380].w;
    }
    SV_Target.x = _3523;
    SV_Target.y = _3524;
    SV_Target.z = _3525;
    SV_Target.w = _3896;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3380].w;
    discard_exit();
}


