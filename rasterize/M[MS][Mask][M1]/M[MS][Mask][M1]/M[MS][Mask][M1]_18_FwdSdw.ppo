#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1408;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4018 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4029 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4040 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4051 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _455 = (_448 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _456 = (_448 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _457 = (_448 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _461 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _455;
    float _464 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _456;
    float _467 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _457;
    float _474 = ((_455 - _461) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _461;
    float _475 = ((_456 - _464) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _464;
    float _476 = ((_457 - _467) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _467;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _448) + _540;
    float _552 = ((((_519.x - _538) * _448) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _448) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _4062 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _612 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _615 = ((isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : min(_612, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _624 = (_615 - ((((((_602 - _603) * cbMtdParam._m0[24u].z) + _603) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _615))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4083 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _632 = (_625 * (cbMtdParam._m0[17u].x - _474)) + _474;
    float _633 = (_625 * (cbMtdParam._m0[17u].y - _475)) + _475;
    float _634 = (_625 * (cbMtdParam._m0[17u].z - _476)) + _476;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _674 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4094 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _683 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _675) + _632;
    float _684 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _675) + _633;
    float _685 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _675) + _634;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _713 = _711.x;
    float _731 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _713) * _448) + _713;
    float _735 = ((_697.x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _737 = _735 - (_735 * _625);
    float _739 = _737 - (_737 * _675);
    float _744 = (((_494.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _748 = ((_575.z - _744) * cbMtdParam._m0[19u].w) + _744;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4105 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _779 = (_625 * (_762.z - _748)) + _748;
    float _782 = ((cbMtdParam._m0[23u].x - _779) * _675) + _779;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _807 = (_801.x * 2.0) + (-1.0);
    float _808 = (_801.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _4116 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _823 = (_552 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)))) + (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _824 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)))) + (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _836 = (((_769 - _823) + (cbMtdParam._m0[21u].x * _823)) * _625) + _823;
    float _837 = (((_770 - _824) + (cbMtdParam._m0[21u].x * _824)) * _625) + _824;
    float _838 = (_625 * (sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) - _559)) + _559;
    float _849 = (((_807 - _836) + (_836 * cbMtdParam._m0[22u].z)) * _675) + _836;
    float _850 = (((_808 - _837) + (_837 * cbMtdParam._m0[22u].z)) * _675) + _837;
    float _851 = ((sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) - _838) * _675) + _838;
    float _855 = cbMtdParam._m0[22u].x + _575.w;
    float _858 = fma(_851, _253 * NORMAL.x, fma(_850, _260 * TANGENT.x, (_246 * _238) * _849));
    float _861 = fma(_851, _253 * NORMAL.y, fma(_850, _260 * TANGENT.y, (_246 * _239) * _849));
    float _864 = fma(_851, _253 * NORMAL.z, fma(_850, _260 * TANGENT.z, (_246 * _240) * _849));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    float _869 = _868 * _858;
    float _870 = _868 * _861;
    float _871 = _868 * _864;
    float _4127 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _872 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4149 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4160 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4171 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4182 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _877 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _941 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _931);
    float _942 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _931);
    float _943 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _931);
    float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
    float _948 = _941 * _947;
    float _949 = _942 * _947;
    float _950 = _943 * _947;
    float _956 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _957 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _975 = fma(_871, cbSceneParam._m0[5u].z, fma(_870, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _869));
    float _978 = fma(_871, cbSceneParam._m0[6u].z, fma(_870, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _869));
    float _981 = fma(_871, cbSceneParam._m0[7u].z, fma(_870, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _869));
    uint _995 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1001 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_995].x;
    float _1002 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_995].y;
    float _1003 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_995].z;
    float _4193 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1007 = 1.0 - _877;
    float _1008 = _1004 * _1007;
    float _1009 = _1005 * _1007;
    float _1010 = _1006 * _1007;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _877;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _877;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _877;
    float _1018 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    vec4 _1030 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _956, cbSceneParam._m0[86u].y * _957));
    float _1034 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * TEXCOORD_5.w) * _1030.x;
    float _1035 = dot(vec3(_869, _870, _871), vec3(_948, _949, _950));
    float _1038 = _1035 * 2.0;
    float _1042 = (_1038 * _869) - _948;
    float _1043 = (_1038 * _870) - _949;
    float _1044 = (_1038 * _871) - _950;
    float _1048 = abs(dot(vec3(_948, _949, _950), vec3(_869, _870, _871)));
    float _4226 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1050 = sqrt(_872);
    float _1063 = exp2((_1050 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1050 * 3.0));
    float _1069 = (1.0 - _1063) * ((_1050 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1070 = _1063 * _1050;
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1407;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1106, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098));
        float _1136 = fma(_1106, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098));
        float _1140 = fma(_1106, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098));
        float _1165 = _1098 + _869;
        float _1166 = _1102 + _870;
        float _1167 = _1106 + _871;
        float _1177 = fma(_1167, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165)) - _1132;
        float _1178 = fma(_1167, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165)) - _1136;
        float _1179 = fma(_1167, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165)) - _1140;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1235 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1201.x + (-0.5));
        float _1237 = _1235 * (_1201.y + (-0.5));
        float _1238 = _1235 * (_1201.z + (-0.5));
        float _1245 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1208.x + (-0.5));
        float _1247 = _1245 * (_1208.y + (-0.5));
        float _1248 = _1245 * (_1208.z + (-0.5));
        float _1255 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1215.x + (-0.5));
        float _1257 = _1255 * (_1215.y + (-0.5));
        float _1258 = _1255 * (_1215.z + (-0.5));
        float _1265 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1222.x + (-0.5));
        float _1267 = _1265 * (_1222.y + (-0.5));
        float _1268 = _1265 * (_1222.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1289 = (dot(vec3(_869, _870, _871), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1299 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4274 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1301 + 1.0))) + _1306) * _1269;
        float _1316 = _1237 * 0.5;
        float _1317 = _1247 * 0.5;
        float _1318 = _1257 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_869, _870, _871), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4307 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1343 + 1.0))) + _1348) * _1270;
        float _1358 = _1238 * 0.5;
        float _1359 = _1248 * 0.5;
        float _1360 = _1258 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_869, _870, _871), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4340 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1385 + 1.0))) + _1390) * _1271;
        _1407 = _1238;
        _1409 = _1237;
        _1410 = _1236;
        _1411 = _1248;
        _1412 = _1247;
        _1413 = _1246;
        _1414 = _1258;
        _1415 = _1257;
        _1416 = _1256;
        _1417 = _1271;
        _1418 = _1270;
        _1419 = _1269;
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1408;
        _1409 = _1408;
        _1410 = _1408;
        _1411 = _1408;
        _1412 = _1408;
        _1413 = _1408;
        _1414 = _1408;
        _1415 = _1408;
        _1416 = _1408;
        _1417 = _1408;
        _1418 = _1408;
        _1419 = _1408;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1106, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098));
        float _1451 = fma(_1106, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098));
        float _1455 = fma(_1106, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098));
        float _1478 = _1098 + _869;
        float _1479 = _1102 + _870;
        float _1480 = _1106 + _871;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_869, _870, _871), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4403 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_869, _870, _871), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4436 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_869, _870, _871), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4469 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1408;
        _1717 = _1408;
        _1718 = _1408;
        _1719 = _1408;
        _1720 = _1408;
        _1721 = _1408;
        _1722 = _1408;
        _1723 = _1408;
        _1724 = _1408;
        _1725 = _1408;
        _1726 = _1408;
        _1727 = _1408;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1420)) + _1420;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1421)) + _1421;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1422)) + _1422;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1042 * 0.5;
    float _1785 = _1043 * 0.5;
    float _1786 = _1044 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1407, _1411, _1414, _1417));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _872);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1901 = fma(_1106, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1098)) + cbModelParam._m0[13u].w;
        float _1905 = fma(_1106, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1098)) + cbModelParam._m0[14u].w;
        float _1909 = fma(_1106, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1098)) + cbModelParam._m0[15u].w;
        float _1912 = fma(_1044, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042));
        float _1915 = fma(_1044, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042));
        float _1918 = fma(_1044, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042));
        float _1946;
        if (_1912 > 0.0)
        {
            _1946 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1946 = frontier_phi_14_12_ladder;
        }
        float _2118;
        if (_1915 > 0.0)
        {
            _2118 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2118 = frontier_phi_23_19_ladder;
        }
        float _2413;
        if (_1918 > 0.0)
        {
            _2413 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2413 = frontier_phi_35_30_ladder;
        }
        float _2415 = isnan(_2118) ? _1946 : (isnan(_1946) ? _2118 : min(_1946, _2118));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1912) + _1901;
        float _2421 = (_2416 * _1915) + _1905;
        float _2422 = (_2416 * _1918) + _1909;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2423;
        float _2427 = _2423 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 > _2427) || ((_2421 < _2425) || ((_2420 < _2425) || (_2420 > _2427))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2422, cbModelParam._m0[9u].z, fma(_2421, cbModelParam._m0[9u].y, _2420 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2422, cbModelParam._m0[10u].z, fma(_2421, cbModelParam._m0[10u].y, _2420 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2422, cbModelParam._m0[11u].z, fma(_2421, cbModelParam._m0[11u].y, _2420 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_13_35_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1934 = frontier_phi_13_35_ladder_2;
        _1936 = frontier_phi_13_35_ladder_1;
        _1938 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1042, _1043, _1044), _1853);
        _1934 = _1922.x * cbModelParam._m0[1u].y;
        _1936 = _1922.y * cbModelParam._m0[1u].y;
        _1938 = _1922.z * cbModelParam._m0[1u].y;
    }
    float _1942 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _872);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1942 : min(cbModelParam._m0[25u].w, _1942));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1106, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1098)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1106, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1098)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1106, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1098)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1044, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042));
        float _2011 = fma(_1044, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042));
        float _2014 = fma(_1044, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042));
        float _2123;
        if (_2008 > 0.0)
        {
            _2123 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2123 = frontier_phi_25_21_ladder;
        }
        float _2440;
        if (_2011 > 0.0)
        {
            _2440 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2440 = frontier_phi_37_32_ladder;
        }
        float _2778;
        if (_2014 > 0.0)
        {
            _2778 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2778 = frontier_phi_47_44_ladder;
        }
        float _2780 = isnan(_2440) ? _2123 : (isnan(_2123) ? _2440 : min(_2123, _2440));
        float _2781 = isnan(_2778) ? _2780 : (isnan(_2780) ? _2778 : min(_2780, _2778));
        float _2785 = (_2781 * _2008) + _1997;
        float _2786 = (_2781 * _2011) + _2001;
        float _2787 = (_2781 * _2014) + _2005;
        float _2788 = _2781 * 9.9999997473787516355514526367188e-05;
        float _2789 = (-1.0) - _2788;
        float _2791 = _2788 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2787 > _2791) || ((_2787 < _2789) || ((_2786 > _2791) || ((_2786 < _2789) || ((_2785 < _2789) || (_2785 > _2791))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2787, cbModelParam._m0[17u].z, fma(_2786, cbModelParam._m0[17u].y, _2785 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2787, cbModelParam._m0[18u].z, fma(_2786, cbModelParam._m0[18u].y, _2785 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2787, cbModelParam._m0[19u].z, fma(_2786, cbModelParam._m0[19u].y, _2785 * cbModelParam._m0[19u].x))), _1943);
            frontier_phi_22_47_ladder = _2909.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2909.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2909.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_22_47_ladder_2;
        _2035 = frontier_phi_22_47_ladder_1;
        _2037 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1042, _1043, _1044), _1943);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2050 = (((_1069 * _1018) + _1070) * _1034) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2052 = (((_1069 * _1020) + _1070) * _1034) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2054 = (((_1069 * _1021) + _1070) * _1034) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2110 = _2097 / _2109;
    float _2111 = _2101 / _2109;
    float _2112 = _2105 / _2109;
    float _2259;
    float _2260;
    float _2261;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2139 = ((uint(_2112 > cbSceneParam._m0[59u].y) + uint(_2112 > cbSceneParam._m0[59u].x)) + uint(_2112 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2140 = _2139 + 43u;
        uint _2148 = _2139 + 44u;
        uint _2156 = _2139 + 45u;
        uint _2164 = _2139 + 46u;
        float _2175 = fma(_2109, cbSceneParam._m0[_2140].w, fma(_2105, cbSceneParam._m0[_2140].z, fma(_2101, cbSceneParam._m0[_2140].y, _2097 * cbSceneParam._m0[_2140].x)));
        float _2179 = fma(_2109, cbSceneParam._m0[_2148].w, fma(_2105, cbSceneParam._m0[_2148].z, fma(_2101, cbSceneParam._m0[_2148].y, _2097 * cbSceneParam._m0[_2148].x)));
        float _2187 = fma(_2109, cbSceneParam._m0[_2164].w, fma(_2105, cbSceneParam._m0[_2164].z, fma(_2101, cbSceneParam._m0[_2164].y, _2097 * cbSceneParam._m0[_2164].x)));
        float _2192 = cbSceneParam._m0[33u].z * _2187;
        float _2194 = cbSceneParam._m0[33u].w * _2187;
        float _2197 = fma(_2109, cbSceneParam._m0[_2156].w, fma(_2105, cbSceneParam._m0[_2156].z, fma(_2101, cbSceneParam._m0[_2156].y, _2097 * cbSceneParam._m0[_2156].x))) / _2187;
        float _2245 = (cbSceneParam._m0[33u].x - sqrt(((_2111 * _2111) + (_2110 * _2110)) + (_2112 * _2112))) * cbSceneParam._m0[33u].y;
        float _4595 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2252 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2175) / _2187, (_2194 + _2179) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 + _2175) / _2187, (_2179 - _2192) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 - _2192) / _2187, (_2179 - _2194) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 - _2194) / _2187, (_2192 + _2179) / _2187), _2197), 0.0)).x), vec4(0.25)));
        _2259 = 1.0 - (_2252 * cbSceneParam._m0[34u].x);
        _2260 = 1.0 - (_2252 * cbSceneParam._m0[34u].y);
        _2261 = 1.0 - (_2252 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2259 = 1.0;
        _2260 = 1.0;
        _2261 = 1.0;
    }
    float _2325;
    float _2327;
    float _2329;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2313 = fma(_2109, cbSceneParam._m0[63u].w, fma(_2105, cbSceneParam._m0[63u].z, fma(_2101, cbSceneParam._m0[63u].y, _2097 * cbSceneParam._m0[63u].x)));
        float _2314 = fma(_2109, cbSceneParam._m0[60u].w, fma(_2105, cbSceneParam._m0[60u].z, fma(_2101, cbSceneParam._m0[60u].y, _2097 * cbSceneParam._m0[60u].x))) / _2313;
        float _2315 = fma(_2109, cbSceneParam._m0[61u].w, fma(_2105, cbSceneParam._m0[61u].z, fma(_2101, cbSceneParam._m0[61u].y, _2097 * cbSceneParam._m0[61u].x))) / _2313;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2314 >= cbSceneParam._m0[64u].x) && (_2315 >= cbSceneParam._m0[64u].y)) && (_2314 <= cbSceneParam._m0[64u].z)) && (_2315 <= cbSceneParam._m0[64u].w))
        {
            float _2453 = fma(_2109, cbSceneParam._m0[62u].w, fma(_2105, cbSceneParam._m0[62u].z, fma(_2101, cbSceneParam._m0[62u].y, _2097 * cbSceneParam._m0[62u].x))) / _2313;
            float _2457 = isnan(cbSceneParam._m0[41u].w) ? _2453 : (isnan(_2453) ? cbSceneParam._m0[41u].w : max(_2453, cbSceneParam._m0[41u].w));
            float _2500 = (cbSceneParam._m0[33u].x - sqrt(((_2111 * _2111) + (_2110 * _2110)) + (_2112 * _2112))) * cbSceneParam._m0[33u].y;
            float _4611 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
            float _2507 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2314, cbSceneParam._m0[33u].w + _2315), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2314, _2315 - cbSceneParam._m0[33u].z), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2314 - cbSceneParam._m0[33u].z, _2315 - cbSceneParam._m0[33u].w), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2314 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2315), _2457), 0.0)).x), vec4(0.25)));
            float _2511 = 1.0 - (_2507 * cbSceneParam._m0[34u].x);
            float _2512 = 1.0 - (_2507 * cbSceneParam._m0[34u].y);
            float _2513 = 1.0 - (_2507 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_34_33_ladder_1 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_34_33_ladder_2 = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
        }
        else
        {
            frontier_phi_34_33_ladder = _2261;
            frontier_phi_34_33_ladder_1 = _2260;
            frontier_phi_34_33_ladder_2 = _2259;
        }
        _2325 = frontier_phi_34_33_ladder_2;
        _2327 = frontier_phi_34_33_ladder_1;
        _2329 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2325 = _2259;
        _2327 = _2260;
        _2329 = _2261;
    }
    uvec4 _2334 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2336 = _2334.x * 14u;
    uint _2337 = _2336 + 13u;
    float _2344 = _1034 + (-1.0);
    float _2349 = (cbLight._m0[_2337].x * _2344) + 1.0;
    float _2350 = (cbLight._m0[_2337].y * _2344) + 1.0;
    float _2351 = (cbLight._m0[_2337].z * _2344) + 1.0;
    float _2352 = (cbLight._m0[_2337].w * _2344) + 1.0;
    uint _2353 = _2336 + 5u;
    float _2359 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2363 = _2336 + 4u;
    float _2372 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2376 = _2336 | 1u;
    float _2387 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_869, _870, _871));
    float _2390 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_869, _870, _871));
    float _4647 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _4658 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2395 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2397 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2404 = ((cbLight._m0[_2353].x * _2359) * _2397) + (((cbLight._m0[_2363].x * _2325) * _2372) * _2395);
    float _2405 = ((_2359 * cbLight._m0[_2353].y) * _2397) + (((cbLight._m0[_2363].y * _2327) * _2372) * _2395);
    float _2406 = ((_2359 * cbLight._m0[_2353].z) * _2397) + (((cbLight._m0[_2363].z * _2329) * _2372) * _2395);
    uvec4 _2410 = floatBitsToUint(cbLight._m0[_2336 + 12u]);
    bool _2412 = _2410.x == 0u;
    float _2514;
    float _2516;
    float _2518;
    if (_2412)
    {
        _2514 = _2404;
        _2516 = _2405;
        _2518 = _2406;
    }
    else
    {
        uint _2522 = _2336 + 6u;
        float _2538 = (dot(vec3(cbLight._m0[_2336 + 2u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4669 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2541 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2514 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2404;
        _2516 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2405;
        _2518 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2406;
    }
    bool _2521 = _2410.y == 0u;
    float _2576;
    float _2578;
    float _2580;
    if (_2521)
    {
        _2576 = _2514;
        _2578 = _2516;
        _2580 = _2518;
    }
    else
    {
        uint _2749 = _2336 + 7u;
        float _2765 = (dot(vec3(cbLight._m0[_2336 + 3u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2766 = _2765 * _2765;
        float _4685 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2767 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2768 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2576 = (((cbLight._m0[_2749].x * 0.3183098733425140380859375) * _2767) * _2768) + _2514;
        _2578 = (((cbLight._m0[_2749].y * 0.3183098733425140380859375) * _2767) * _2768) + _2516;
        _2580 = (((cbLight._m0[_2749].z * 0.3183098733425140380859375) * _2767) * _2768) + _2518;
    }
    uint _2583 = _2336 + 8u;
    float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _872) * 0.949999988079071044921875);
    float _2597 = _2596 * _2596;
    float _2598 = cbLight._m0[_2336].x + _948;
    float _2599 = cbLight._m0[_2336].y + _949;
    float _2600 = cbLight._m0[_2336].z + _950;
    float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
    float _2605 = _2604 * _2598;
    float _2606 = _2604 * _2599;
    float _2607 = _2604 * _2600;
    float _2608 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2336].xyz));
    float _4701 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _4712 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _2612 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2613 = dot(vec3(_869, _870, _871), vec3(_2605, _2606, _2607));
    float _4723 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2605, _2606, _2607));
    float _4734 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2597 * _2597;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
    float _2634 = 0.959999978542327880859375 - _1015;
    float _2636 = 0.959999978542327880859375 - _1016;
    float _2637 = 0.959999978542327880859375 - _1017;
    float _2644 = 1.0 - _2597;
    float _2655 = (0.5 / (((_2612 * ((_2611 * _2644) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2644) + _2597) * _2611))) * _2611;
    float _4745 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2657 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    uint _2671 = _2336 + 9u;
    float _2682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _872) * 0.949999988079071044921875);
    float _2683 = _2682 * _2682;
    float _2684 = cbLight._m0[_2376].x + _948;
    float _2685 = cbLight._m0[_2376].y + _949;
    float _2686 = cbLight._m0[_2376].z + _950;
    float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
    float _2691 = _2690 * _2684;
    float _2692 = _2690 * _2685;
    float _2693 = _2690 * _2686;
    float _2694 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2376].xyz));
    float _4756 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2697 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2698 = dot(vec3(_869, _870, _871), vec3(_2691, _2692, _2693));
    float _4767 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2702 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2691, _2692, _2693));
    float _4778 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2706 = _2683 * _2683;
    float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
    float _2717 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
    float _2724 = 1.0 - _2683;
    float _2734 = (0.5 / (((_2612 * ((_2697 * _2724) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2724) + _2683) * _2697))) * _2697;
    float _4789 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2736 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
    float _2746 = (((((_2717 * _2634) + _1018) * cbLight._m0[_2671].x) * _2736) * _2359) + ((((cbLight._m0[_2583].x * _2325) * ((_2633 * _2634) + _1018)) * _2657) * _2372);
    float _2747 = (((((_2717 * _2636) + _1020) * cbLight._m0[_2671].y) * _2736) * _2359) + ((((cbLight._m0[_2583].y * _2327) * ((_2633 * _2636) + _1020)) * _2657) * _2372);
    float _2748 = (((((_2717 * _2637) + _1021) * cbLight._m0[_2671].z) * _2736) * _2359) + ((((cbLight._m0[_2583].z * _2329) * ((_2633 * _2637) + _1021)) * _2657) * _2372);
    float _2804;
    float _2806;
    float _2808;
    if (_2412)
    {
        _2804 = _2746;
        _2806 = _2747;
        _2808 = _2748;
    }
    else
    {
        uint _2810 = _2336 + 2u;
        uint _2814 = _2336 + 10u;
        float _2828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2810].w)) * _872) * 0.949999988079071044921875);
        float _2829 = _2828 * _2828;
        float _2830 = cbLight._m0[_2810].x + _948;
        float _2831 = cbLight._m0[_2810].y + _949;
        float _2832 = cbLight._m0[_2810].z + _950;
        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
        float _2837 = _2836 * _2830;
        float _2838 = _2836 * _2831;
        float _2839 = _2836 * _2832;
        float _2840 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2810].xyz));
        float _4800 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2844 = dot(vec3(_869, _870, _871), vec3(_2837, _2838, _2839));
        float _4811 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2848 = dot(vec3(cbLight._m0[_2810].xyz), vec3(_2837, _2838, _2839));
        float _4822 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2852 = _2829 * _2829;
        float _2856 = ((_2847 * _2847) * (_2852 + (-1.0))) + 1.0;
        float _2863 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2870 = 1.0 - _2829;
        float _2880 = (0.5 / (((_2612 * ((_2843 * _2870) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2870) + _2829) * _2843))) * _2843;
        float _4833 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2882 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2852 / ((_2856 * _2856) * 3.141590118408203125));
        float _2883 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2804 = (((((_2863 * _2634) + _1018) * cbLight._m0[_2814].x) * _2882) * _2883) + _2746;
        _2806 = (((((_2863 * _2636) + _1020) * cbLight._m0[_2814].y) * _2882) * _2883) + _2747;
        _2808 = (((((_2863 * _2637) + _1021) * cbLight._m0[_2814].z) * _2882) * _2883) + _2748;
    }
    float _2914;
    float _2916;
    float _2918;
    if (_2521)
    {
        _2914 = _2804;
        _2916 = _2806;
        _2918 = _2808;
    }
    else
    {
        uint _2925 = _2336 + 3u;
        uint _2929 = _2336 + 11u;
        float _2943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2925].w)) * _872) * 0.949999988079071044921875);
        float _2944 = _2943 * _2943;
        float _2945 = cbLight._m0[_2925].x + _948;
        float _2946 = cbLight._m0[_2925].y + _949;
        float _2947 = cbLight._m0[_2925].z + _950;
        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
        float _2952 = _2951 * _2945;
        float _2953 = _2951 * _2946;
        float _2954 = _2951 * _2947;
        float _2955 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2925].xyz));
        float _4849 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2959 = dot(vec3(_869, _870, _871), vec3(_2952, _2953, _2954));
        float _4860 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2963 = dot(vec3(cbLight._m0[_2925].xyz), vec3(_2952, _2953, _2954));
        float _4871 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2967 = _2944 * _2944;
        float _2971 = ((_2962 * _2962) * (_2967 + (-1.0))) + 1.0;
        float _2978 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
        float _2985 = 1.0 - _2944;
        float _2995 = (0.5 / (((_2612 * ((_2958 * _2985) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2985) + _2944) * _2958))) * _2958;
        float _4882 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2997 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2967 / ((_2971 * _2971) * 3.141590118408203125));
        float _2998 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2914 = (((((_2978 * _2634) + _1018) * cbLight._m0[_2929].x) * _2997) * _2998) + _2804;
        _2916 = (((((_2978 * _2636) + _1020) * cbLight._m0[_2929].y) * _2997) * _2998) + _2806;
        _2918 = (((((_2978 * _2637) + _1021) * cbLight._m0[_2929].z) * _2997) * _2998) + _2808;
    }
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_2334.y == 0u)
    {
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.x;
        uint _3031 = uint((float(_3019.y) * floor(float(uint(cbSceneParam._m0[85u].y * _957) / _3020))) + floor(float(uint(cbSceneParam._m0[85u].x * _956) / _3020)));
        float _3041 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3042 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        uint _3045 = uint(isnan(14.0) ? _3042 : (isnan(_3042) ? 14.0 : min(_3042, 14.0)));
        uvec4 _3050 = texelFetch(g_lightClusterGridBuffer, int(((_3045 << 2u) + (_3031 << 6u)) >> 2u));
        uint _3051 = _3050.x;
        uint _3052 = _3019.z;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((((1u << ((_3052 >> 4u) & 15u)) + 4294967295u) & _3051) == 0u) || ((_3052 & 240u) == 0u))
        {
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
        }
        else
        {
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            uint _3282 = 0u;
            uint _3291;
            bool _3292;
            for (;;)
            {
                _3291 = texelFetch(g_lightClassification, int((((_3045 << 5u) + (_3031 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                _3292 = _3291 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3292)
                {
                    frontier_phi_66_pred = _3281;
                    frontier_phi_66_pred_1 = _3280;
                    frontier_phi_66_pred_2 = _3279;
                    frontier_phi_66_pred_3 = _3278;
                    frontier_phi_66_pred_4 = _3277;
                    frontier_phi_66_pred_5 = _3276;
                }
                else
                {
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    uint _3406;
                    _3400 = _3276;
                    _3401 = _3277;
                    _3402 = _3278;
                    _3403 = _3279;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3291;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    for (;;)
                    {
                        uint _3410 = uint(findLSB(_3406)) + (_3282 << 5u);
                        uint _3407 = (_3406 + 4294967295u) & _3406;
                        uint _3412 = _3410 * 48u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3432 = (_3410 * 48u) + 4u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 3u)).x));
                        uint _3451 = (_3410 * 48u) + 8u;
                        vec3 _3462 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x));
                        float _3466 = _3426.x - _2110;
                        float _3467 = _3426.y - _2111;
                        float _3468 = _3426.z - _2112;
                        float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                        float _3472 = inversesqrt(_3469);
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3476 = dot(vec3(_975, _978, _981), vec3(_3473, _3474, _3475));
                        float _3481 = 1.0 - (_3469 * _3426.w);
                        float _4908 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3483 = sqrt(_3469) * _3445.w;
                        float _3486 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3476) + _3487;
                        float _3493 = _3483 * _3483;
                        float _3497 = ((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3482) / ((_3493 * 0.699999988079071044921875) + 1.0);
                        float _3501 = (-0.0) - _2110;
                        float _3502 = (-0.0) - _2111;
                        float _3503 = (-0.0) - _2112;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3517 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                        float _3518 = 1.0 - _1050;
                        float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                        float _3526 = _3525 * _3525;
                        float _3527 = _3526 * _3526;
                        float _3528 = _3508 + _3473;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                        float _3538 = dot(vec3(_975, _978, _981), vec3(_3508, _3509, _3510));
                        float _4924 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3541 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3542 = dot(vec3(_975, _978, _981), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                        float _4935 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                        float _3550 = _3486 * _3526;
                        float _3551 = _3550 * _3550;
                        float _3554 = ((1.0 - _3551) * _3476) + _3551;
                        float _4946 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3555 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3556 = 1.0 - _3526;
                        float _3566 = (0.5 / (((_3555 * ((_3541 * _3556) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3526) * _3541))) * _3555;
                        float _4957 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3577 = (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3549 * _3549) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125))) * _3482;
                        _3335 = (_3497 * _3445.x) + _3403;
                        _3336 = (_3497 * _3445.y) + _3404;
                        _3337 = (_3497 * _3445.z) + _3405;
                        _3332 = (_3577 * _3462.x) + _3400;
                        _3333 = (_3577 * _3462.y) + _3401;
                        _3334 = (_3577 * _3462.z) + _3402;
                        if (_3407 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3400 = _3332;
                            _3401 = _3333;
                            _3402 = _3334;
                            _3403 = _3335;
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3407;
                        }
                    }
                    frontier_phi_66_pred = _3337;
                    frontier_phi_66_pred_1 = _3336;
                    frontier_phi_66_pred_2 = _3335;
                    frontier_phi_66_pred_3 = _3334;
                    frontier_phi_66_pred_4 = _3333;
                    frontier_phi_66_pred_5 = _3332;
                }
                _3142 = frontier_phi_66_pred;
                _3140 = frontier_phi_66_pred_1;
                _3138 = frontier_phi_66_pred_2;
                _3136 = frontier_phi_66_pred_3;
                _3134 = frontier_phi_66_pred_4;
                _3132 = frontier_phi_66_pred_5;
                uint _3283 = _3282 + 1u;
                if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3276 = _3132;
                    _3277 = _3134;
                    _3278 = _3136;
                    _3279 = _3138;
                    _3280 = _3140;
                    _3281 = _3142;
                    _3282 = _3283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
        }
        uvec4 _3145 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3146 = _3145.z;
        uint _3148 = (_3146 >> 8u) & 15u;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        if (((4294967295u << _3148) & _3051) == 0u)
        {
            _3244 = _3131;
            _3246 = _3133;
            _3248 = _3135;
            _3250 = _3137;
            _3252 = _3139;
            _3254 = _3141;
        }
        else
        {
            float _3269 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _3270 = _3269 * _2110;
            float _3271 = _3269 * _2111;
            float _3272 = _3269 * _2112;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3148 < ((_3146 >> 12u) & 15u))
            {
                float _3245;
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3383 = _3131;
                float _3384 = _3133;
                float _3385 = _3135;
                float _3386 = _3137;
                float _3387 = _3139;
                float _3388 = _3141;
                uint _3389 = _3148;
                uint _3398;
                bool _3399;
                for (;;)
                {
                    _3398 = texelFetch(g_lightClassification, int((((_3045 << 5u) + (_3031 << 9u)) + (_3389 << 2u)) >> 2u)).x;
                    _3399 = _3398 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3399)
                    {
                        frontier_phi_72_pred = _3388;
                        frontier_phi_72_pred_1 = _3387;
                        frontier_phi_72_pred_2 = _3386;
                        frontier_phi_72_pred_3 = _3385;
                        frontier_phi_72_pred_4 = _3384;
                        frontier_phi_72_pred_5 = _3383;
                    }
                    else
                    {
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3595 = _3383;
                        float _3596 = _3384;
                        float _3597 = _3385;
                        float _3598 = _3386;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        uint _3601 = _3398;
                        uint _3602;
                        vec4 _3627;
                        float _3628;
                        vec4 _3643;
                        vec3 _3655;
                        vec4 _3670;
                        vec4 _3685;
                        float _3731;
                        bool _3732;
                        for (;;)
                        {
                            uint _3612 = ((_3389 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3601));
                            _3602 = (_3601 + 4294967295u) & _3601;
                            uint _3614 = _3612 * 40u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3628 = _3627.w;
                            uint _3630 = (_3612 * 40u) + 4u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3612 * 40u) + 8u;
                            _3655 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x));
                            uint _3657 = (_3612 * 40u) + 16u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3612 * 40u) + 20u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3612 * 40u) + 24u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3706 = (_3612 * 40u) + 28u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3731 = fma(_2112, _3719.z, fma(_2111, _3719.y, _3719.x * _2110)) + _3719.w;
                            _3732 = !((fma(_2112, _3700.z, fma(_2111, _3700.y, _3700.x * _2110)) + _3700.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3732)
                            {
                                float _3759 = _3627.x - _2110;
                                float _3760 = _3627.y - _2111;
                                float _3761 = _3627.z - _2112;
                                float _3762 = dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761));
                                float _3765 = inversesqrt(_3762);
                                float _3766 = _3765 * _3759;
                                float _3767 = _3765 * _3760;
                                float _3768 = _3765 * _3761;
                                float _3772 = 1.0 - (_3762 / (_3628 * _3628));
                                float _4968 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3777 = sqrt(_3762) * _3643.w;
                                float _3779 = 1.39999997615814208984375 / (_3777 + 1.39999997615814208984375);
                                float _3780 = _3779 * _3779;
                                float _3783 = ((1.0 - _3780) * dot(vec3(_3766, _3767, _3768), vec3(_975, _978, _981))) + _3780;
                                float _3786 = _3777 * _3777;
                                float _3790 = (fma(_2112, _3670.z, fma(_2111, _3670.y, _3670.x * _2110)) + _3670.w) / _3731;
                                float _3791 = (fma(_2112, _3685.z, fma(_2111, _3685.y, _3685.x * _2110)) + _3685.w) / _3731;
                                float _3795 = 1.0 - dot(vec2(_3790, _3791), vec2(_3790, _3791));
                                float _4984 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3797 = _3796 * (((isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0))) * _3773) / ((_3786 * 0.699999988079071044921875) + 1.0));
                                float _3809 = exp2(log2(1.0 / ((_3786 * 3.5) + 5.0)) * 0.25);
                                float _3810 = 1.0 - _1050;
                                float _3817 = sqrt(1.0 - ((1.0 - (_3810 * _3810)) * (1.0 - (_3809 * _3809))));
                                float _3818 = _3817 * _3817;
                                float _3819 = _3818 * _3818;
                                float _3820 = _3766 - _3270;
                                float _3821 = _3767 - _3271;
                                float _3822 = _3768 - _3272;
                                float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                                float _3830 = dot(vec3(_975, _978, _981), vec3((-0.0) - _3270, (-0.0) - _3271, (-0.0) - _3272));
                                float _4995 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3834 = dot(vec3(_975, _978, _981), vec3(_3826 * _3820, _3826 * _3821, _3826 * _3822));
                                float _5006 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3841 = ((_3837 * _3837) * (_3819 + (-1.0))) + 1.0;
                                float _3842 = _3779 * _3818;
                                float _3843 = _3842 * _3842;
                                float _3849 = ((1.0 - _3843) * dot(vec3(_975, _978, _981), vec3(_3766, _3767, _3768))) + _3843;
                                float _5017 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3851 = 1.0 - _3818;
                                float _3861 = (0.5 / (((_3850 * ((_3833 * _3851) + _3818)) + 9.9999999392252902907785028219223e-09) + (((_3850 * _3851) + _3818) * _3833))) * _3850;
                                float _5028 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3871 = (_3796 * _3773) * (((_3819 * 3.1415927410125732421875) * (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) / ((_3841 * _3841) * ((_3786 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3797 * _3643.y;
                                frontier_phi_78_pred_1 = _3797 * _3643.x;
                                frontier_phi_78_pred_2 = _3871 * _3655.z;
                                frontier_phi_78_pred_3 = _3871 * _3655.y;
                                frontier_phi_78_pred_4 = _3871 * _3655.x;
                                frontier_phi_78_pred_5 = _3797 * _3643.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3879 = frontier_phi_78_pred;
                            _3878 = frontier_phi_78_pred_1;
                            _3877 = frontier_phi_78_pred_2;
                            _3876 = frontier_phi_78_pred_3;
                            _3875 = frontier_phi_78_pred_4;
                            _3880 = frontier_phi_78_pred_5;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            if (_3602 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3602;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3587;
                        frontier_phi_72_pred_1 = _3586;
                        frontier_phi_72_pred_2 = _3585;
                        frontier_phi_72_pred_3 = _3584;
                        frontier_phi_72_pred_4 = _3583;
                        frontier_phi_72_pred_5 = _3582;
                    }
                    _3255 = frontier_phi_72_pred;
                    _3253 = frontier_phi_72_pred_1;
                    _3251 = frontier_phi_72_pred_2;
                    _3249 = frontier_phi_72_pred_3;
                    _3247 = frontier_phi_72_pred_4;
                    _3245 = frontier_phi_72_pred_5;
                    uint _3390 = _3389 + 1u;
                    if (_3390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3383 = _3245;
                        _3384 = _3247;
                        _3385 = _3249;
                        _3386 = _3251;
                        _3387 = _3253;
                        _3388 = _3255;
                        _3389 = _3390;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3255;
                frontier_phi_60_61_ladder_1 = _3253;
                frontier_phi_60_61_ladder_2 = _3249;
                frontier_phi_60_61_ladder_3 = _3247;
                frontier_phi_60_61_ladder_4 = _3245;
                frontier_phi_60_61_ladder_5 = _3251;
            }
            else
            {
                frontier_phi_60_61_ladder = _3141;
                frontier_phi_60_61_ladder_1 = _3139;
                frontier_phi_60_61_ladder_2 = _3135;
                frontier_phi_60_61_ladder_3 = _3133;
                frontier_phi_60_61_ladder_4 = _3131;
                frontier_phi_60_61_ladder_5 = _3137;
            }
            _3244 = frontier_phi_60_61_ladder_4;
            _3246 = frontier_phi_60_61_ladder_3;
            _3248 = frontier_phi_60_61_ladder_2;
            _3250 = frontier_phi_60_61_ladder_5;
            _3252 = frontier_phi_60_61_ladder_1;
            _3254 = frontier_phi_60_61_ladder;
        }
        float _3259 = isnan(1.0) ? _1034 : (isnan(_1034) ? 1.0 : min(_1034, 1.0));
        _3064 = (_3259 * _3250) + _2576;
        _3066 = (_3259 * _3252) + _2578;
        _3068 = (_3259 * _3254) + _2580;
        _3070 = ((_3244 * _1018) * _3259) + _2914;
        _3072 = ((_3246 * _1020) * _3259) + _2916;
        _3074 = ((_3248 * _1021) * _3259) + _2918;
    }
    else
    {
        _3064 = _2576;
        _3066 = _2578;
        _3068 = _2580;
        _3070 = _2914;
        _3072 = _2916;
        _3074 = _2918;
    }
    float _5044 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5055 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5066 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    uint _3094 = _285 + 6u;
    float _3102 = _956 / cbSceneParam._m0[86u].x;
    float _3103 = _957 / cbSceneParam._m0[86u].y;
    vec4 _3117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3102, _3103, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3119 = _3117.x;
    float _3120 = _3117.y;
    float _3121 = _3117.z;
    float _3122 = _3117.w;
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _3156 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _3157 = _3156 / _891;
        float _3168 = _3157 * _941;
        float _3169 = _942 * _3157;
        float _3170 = (-0.0) - _3169;
        float _3172 = _3157 * _943;
        float _3174 = (cbSceneParam._m0[77u].w * _3170) / _3156;
        float _3175 = _3174 + cbSceneParam._m0[79u].w;
        float _3176 = cbSceneParam._m0[79u].w - _3169;
        float _3182 = sqrt(((_3168 * _3168) + (_3169 * _3169)) + (_3172 * _3172));
        float _3185 = (1.0 - (cbSceneParam._m0[77u].w / _3156)) * _3182;
        float _3190 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3192 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3345;
        if (abs((_3170 - _3174) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3345 = ((((_3175 > 0.0) ? exp2(_3190 * _3175) : (2.0 - exp2(_3192 * _3175))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3185;
        }
        else
        {
            float _3305 = 1.0 / cbSceneParam._m0[80u].x;
            float _3306 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : max(_3175, _3176));
            float _3307 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : min(_3175, _3176));
            float _3316 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : min(_3306, 0.0));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            _3345 = ((abs(_3182 / _3170) * cbSceneParam._m0[80u].y) * ((((_3316 - _3317) * 2.0) - ((exp2(_3190 * (isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0)))) - exp2(_3190 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))))) * _3305)) - ((exp2(_3192 * _3316) - exp2(_3192 * _3317)) * _3305))) + (_3185 * cbSceneParam._m0[80u].z);
        }
        vec4 _3347 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3102, _3103, 1.0), 0.0);
        float _3356 = exp2((_3345 * (-1.44269502162933349609375)) * (1.0 - _3347.w));
        float _3357 = log2(_3356);
        float _3373 = log2(_3122);
        _3194 = (exp2(_3373 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].x)) * _3347.x) / cbSceneParam._m0[78u].x)) + _3119;
        _3196 = (exp2(_3373 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].y)) * _3347.y) / cbSceneParam._m0[78u].y)) + _3120;
        _3198 = (exp2(_3373 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].z)) * _3347.z) / cbSceneParam._m0[78u].z)) + _3121;
        _3200 = _3356 * _3122;
    }
    else
    {
        _3194 = _3119;
        _3196 = _3120;
        _3198 = _3121;
        _3200 = _3122;
    }
    float _3212 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3213 = _3212 == 3.0;
    float _3214 = log2(_3200);
    float _3221 = exp2(_3214 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3064 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1034))) + ((_3070 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1842)) * cbPerFrame._m0[3u].x));
    float _3222 = exp2(_3214 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3066 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1034))) + ((_3072 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1842)) * cbPerFrame._m0[3u].x));
    float _3223 = exp2(_3214 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3068 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1034))) + ((_3074 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1842)) * cbPerFrame._m0[3u].x));
    float _3232 = (_3212 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3232 * (_3213 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3194)));
    SV_Target.y = _3232 * (_3213 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3196)));
    SV_Target.z = _3232 * (_3213 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.w = cbInstanceData._m0[_3094].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3094].w;
}


