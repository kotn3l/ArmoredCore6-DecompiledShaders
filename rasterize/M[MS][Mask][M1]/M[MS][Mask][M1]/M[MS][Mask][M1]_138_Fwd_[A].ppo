#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1717;
float _4094;
float _4095;
float _4096;
float _4097;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4106 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4117 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4128 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[23u].w) + _454) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4139 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[23u].w) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4150 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _552 = (_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479;
    float _553 = (_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480;
    float _554 = (_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[23u].w) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4161 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _622 = (_615 * ((_573.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _623 = (_615 * ((_573.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _624 = (_615 * ((_573.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _628 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _622;
    float _631 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _623;
    float _634 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _624;
    float _641 = ((_622 - _628) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) + _628;
    float _642 = ((_623 - _631) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) + _631;
    float _643 = ((_624 - _634) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) + _634;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _322) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _323) + cbTextureTilingScale._m0[14u].w));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _472) + _722;
    float _732 = ((_703.y - _723) * _472) + _723;
    float _733 = ((_703.z - _724) * _472) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _545) + _731;
    float _757 = ((_745.y - _732) * _545) + _732;
    float _758 = ((_745.z - _733) * _545) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _615) + _758;
    float _786 = ((((_770.x - _756) * _615) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _615) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4172 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _843 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _846 = ((isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : min(_843, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _855 = (_846 - ((((((_834 - _835) * cbMtdParam._m0[24u].z) + _835) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _846))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4193 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _856 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _863 = (_856 * ((_661.x * cbMtdParam._m0[18u].x) - _641)) + _641;
    float _864 = (_856 * ((_661.y * cbMtdParam._m0[18u].y) - _642)) + _642;
    float _865 = (_856 * ((_661.z * cbMtdParam._m0[18u].z) - _643)) + _643;
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _322) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _323) + cbTextureTilingScale._m0[19u].w));
    float _879 = _877.x;
    float _880 = 1.0 - _879;
    float _905 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_879 - _880) * cbMtdParam._m0[24u].w) + _880) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4204 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _906 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _914 = ((((cbMtdParam._m0[10u].x - _863) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _906) + _863;
    float _915 = ((((cbMtdParam._m0[10u].y - _864) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _906) + _864;
    float _916 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _865)) * _906) + _865;
    vec4 _942 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _944 = _942.x;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _944) * _472) + _944;
    float _979 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _962) * _545) + _962;
    float _996 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _979) * _615) + _979;
    float _1000 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _996) * cbMtdParam._m0[19u].z) + _996;
    float _1002 = _1000 - (_1000 * _856);
    float _1004 = _1002 - (_1002 * _906);
    float _1009 = (((_680.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _1013 = ((_807.z - _1009) * cbMtdParam._m0[19u].w) + _1009;
    vec4 _1029 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1036 = (_1029.x * 2.0) + (-1.0);
    float _1037 = (_1029.y * 2.0) + (-1.0);
    float _1038 = dot(vec2(_1036, _1037), vec2(_1036, _1037));
    float _4215 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1046 = (_856 * (_1029.z - _1013)) + _1013;
    float _1049 = ((cbMtdParam._m0[23u].x - _1046) * _906) + _1046;
    vec4 _1072 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _322) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _323) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1078 = (_1072.x * 2.0) + (-1.0);
    float _1079 = (_1072.y * 2.0) + (-1.0);
    float _1080 = dot(vec2(_1078, _1079), vec2(_1078, _1079));
    float _4226 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1094 = (_786 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_680.x * 2.0) + (-1.0)))) + (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1095 = (_787 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_680.y * 2.0) + (-1.0)))) + (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1107 = (((_1036 - _1094) + (cbMtdParam._m0[21u].x * _1094)) * _856) + _1094;
    float _1108 = (((_1037 - _1095) + (cbMtdParam._m0[21u].x * _1095)) * _856) + _1095;
    float _1109 = (_856 * (sqrt(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) - _793)) + _793;
    float _1120 = (((_1078 - _1107) + (_1107 * cbMtdParam._m0[22u].z)) * _906) + _1107;
    float _1121 = (((_1079 - _1108) + (_1108 * cbMtdParam._m0[22u].z)) * _906) + _1108;
    float _1122 = ((sqrt(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) - _1109) * _906) + _1109;
    float _1124 = cbMtdParam._m0[22u].x + _807.w;
    float _1127 = fma(_1122, _271 * NORMAL.x, fma(_1121, _278 * TANGENT.x, (_264 * _256) * _1120));
    float _1130 = fma(_1122, _271 * NORMAL.y, fma(_1121, _278 * TANGENT.y, (_264 * _257) * _1120));
    float _1133 = fma(_1122, _271 * NORMAL.z, fma(_1121, _278 * TANGENT.z, (_264 * _258) * _1120));
    float _1137 = inversesqrt(dot(vec3(_1127, _1130, _1133), vec3(_1127, _1130, _1133)));
    float _1138 = _1137 * _1127;
    float _1139 = _1137 * _1130;
    float _1140 = _1137 * _1133;
    float _4237 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1141 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4259 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4270 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4281 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4292 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1146 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _1160 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1210 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1200);
    float _1211 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1200);
    float _1212 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1200);
    float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
    float _1217 = _1210 * _1216;
    float _1218 = _1211 * _1216;
    float _1219 = _1212 * _1216;
    vec4 _1224 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1226 = _1224.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1398 = sqrt(((_1210 * _1210) + (_1211 * _1211)) + (_1212 * _1212));
        float _1404 = (cbMatDynParam._m0[5u].x * _1398) + cbMatDynParam._m0[5u].y;
        float _4303 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1409 = (cbMatDynParam._m0[5u].z * _1398) + cbMatDynParam._m0[5u].w;
        float _4314 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) - _1405)) + _1405) < ((_1226 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1237 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1238 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1256 = fma(_1140, cbSceneParam._m0[5u].z, fma(_1139, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1138));
    float _1259 = fma(_1140, cbSceneParam._m0[6u].z, fma(_1139, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1138));
    float _1262 = fma(_1140, cbSceneParam._m0[7u].z, fma(_1139, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1138));
    uint _1275 = _303 + 9u;
    uint _1276 = _1275 + uint(cbMatDynParam._m0[0u].w);
    float _1282 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * cbInstanceData._m0[_1276].x;
    float _1283 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * cbInstanceData._m0[_1276].y;
    float _1284 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * cbInstanceData._m0[_1276].z;
    float _4325 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
    float _1285 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
    float _1286 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
    float _1287 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _1288 = 1.0 - _1146;
    float _1289 = _1285 * _1288;
    float _1290 = _1286 * _1288;
    float _1291 = _1287 * _1288;
    float _1296 = (_1285 + (-0.039999999105930328369140625)) * _1146;
    float _1297 = (_1286 + (-0.039999999105930328369140625)) * _1146;
    float _1298 = (_1287 + (-0.039999999105930328369140625)) * _1146;
    float _1299 = _1296 + 0.039999999105930328369140625;
    float _1301 = _1297 + 0.039999999105930328369140625;
    float _1302 = _1298 + 0.039999999105930328369140625;
    vec4 _1311 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1237, cbSceneParam._m0[86u].y * _1238));
    float _1315 = ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * TEXCOORD_5.w) * _1311.x;
    float _1316 = dot(vec3(_1138, _1139, _1140), vec3(_1217, _1218, _1219));
    float _1319 = _1316 * 2.0;
    float _1323 = (_1319 * _1138) - _1217;
    float _1324 = (_1319 * _1139) - _1218;
    float _1325 = (_1319 * _1140) - _1219;
    float _1329 = abs(dot(vec3(_1217, _1218, _1219), vec3(_1138, _1139, _1140)));
    float _4358 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _1331 = sqrt(_1141);
    float _1344 = exp2((_1331 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1331 * 3.0));
    float _1350 = (1.0 - _1344) * ((_1331 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1351 = _1344 * _1331;
    float _1379 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1383 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1387 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1716;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1441 = fma(_1387, cbModelParam._m0[26u].z, fma(_1383, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1379));
        float _1445 = fma(_1387, cbModelParam._m0[27u].z, fma(_1383, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1379));
        float _1449 = fma(_1387, cbModelParam._m0[28u].z, fma(_1383, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1379));
        float _1474 = _1379 + _1138;
        float _1475 = _1383 + _1139;
        float _1476 = _1387 + _1140;
        float _1486 = fma(_1476, cbModelParam._m0[26u].z, fma(_1475, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1474)) - _1441;
        float _1487 = fma(_1476, cbModelParam._m0[27u].z, fma(_1475, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1474)) - _1445;
        float _1488 = fma(_1476, cbModelParam._m0[28u].z, fma(_1475, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1474)) - _1449;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1441 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1445 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[34u].z) + ((((((_1449 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1544 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1510.x + (-0.5));
        float _1546 = _1544 * (_1510.y + (-0.5));
        float _1547 = _1544 * (_1510.z + (-0.5));
        float _1554 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1517.x + (-0.5));
        float _1556 = _1554 * (_1517.y + (-0.5));
        float _1557 = _1554 * (_1517.z + (-0.5));
        float _1564 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1524.x + (-0.5));
        float _1566 = _1564 * (_1524.y + (-0.5));
        float _1567 = _1564 * (_1524.z + (-0.5));
        float _1574 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1531.x + (-0.5));
        float _1576 = _1574 * (_1531.y + (-0.5));
        float _1577 = _1574 * (_1531.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1598 = (dot(vec3(_1138, _1139, _1140), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1608 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4406 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1610 + 1.0))) + _1615) * _1578;
        float _1625 = _1546 * 0.5;
        float _1626 = _1556 * 0.5;
        float _1627 = _1566 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_1138, _1139, _1140), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4439 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1652 + 1.0))) + _1657) * _1579;
        float _1667 = _1547 * 0.5;
        float _1668 = _1557 * 0.5;
        float _1669 = _1567 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_1138, _1139, _1140), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4472 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1694 + 1.0))) + _1699) * _1580;
        _1716 = _1547;
        _1718 = _1546;
        _1719 = _1545;
        _1720 = _1557;
        _1721 = _1556;
        _1722 = _1555;
        _1723 = _1567;
        _1724 = _1566;
        _1725 = _1565;
        _1726 = _1580;
        _1727 = _1579;
        _1728 = _1578;
        _1729 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1730 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1731 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1717;
        _1718 = _1717;
        _1719 = _1717;
        _1720 = _1717;
        _1721 = _1717;
        _1722 = _1717;
        _1723 = _1717;
        _1724 = _1717;
        _1725 = _1717;
        _1726 = _1717;
        _1727 = _1717;
        _1728 = _1717;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _2026;
    float _2027;
    float _2028;
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1757 = fma(_1387, cbModelParam._m0[30u].z, fma(_1383, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379));
        float _1761 = fma(_1387, cbModelParam._m0[31u].z, fma(_1383, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379));
        float _1765 = fma(_1387, cbModelParam._m0[32u].z, fma(_1383, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379));
        float _1788 = _1379 + _1138;
        float _1789 = _1383 + _1139;
        float _1790 = _1387 + _1140;
        float _1800 = fma(_1790, cbModelParam._m0[30u].z, fma(_1789, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1788)) - _1757;
        float _1801 = fma(_1790, cbModelParam._m0[31u].z, fma(_1789, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1788)) - _1761;
        float _1802 = fma(_1790, cbModelParam._m0[32u].z, fma(_1789, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1788)) - _1765;
        float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
        float _1819 = ((_1806 * _1800) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1757 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1820 = ((_1806 * _1801) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1761 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1821 = ((_1806 * _1802) / cbModelParam._m0[35u].z) + ((((((_1765 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1823 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1819, _1820, _1821), 0.0);
        vec4 _1830 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1819, _1820, _1821), 0.0);
        vec4 _1837 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1819, _1820, _1821), 0.0);
        vec4 _1844 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1819, _1820, _1821), 0.0);
        float _1856 = exp2((_1823.w + (-0.5)) * 20.0) * 2.0;
        float _1857 = _1856 * (_1823.x + (-0.5));
        float _1858 = _1856 * (_1823.y + (-0.5));
        float _1859 = _1856 * (_1823.z + (-0.5));
        float _1866 = exp2((_1830.w + (-0.5)) * 20.0) * 2.0;
        float _1867 = _1866 * (_1830.x + (-0.5));
        float _1868 = _1866 * (_1830.y + (-0.5));
        float _1869 = _1866 * (_1830.z + (-0.5));
        float _1876 = exp2((_1837.w + (-0.5)) * 20.0) * 2.0;
        float _1877 = _1876 * (_1837.x + (-0.5));
        float _1878 = _1876 * (_1837.y + (-0.5));
        float _1879 = _1876 * (_1837.z + (-0.5));
        float _1886 = exp2((_1844.w + (-0.5)) * 20.0) * 2.0;
        float _1887 = _1886 * (_1844.x + (-0.5));
        float _1888 = _1886 * (_1844.y + (-0.5));
        float _1889 = _1886 * (_1844.z + (-0.5));
        float _1890 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1891 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1893 = _1857 * 0.5;
        float _1894 = _1867 * 0.5;
        float _1895 = _1877 * 0.5;
        float _1896 = dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895));
        float _1901 = (_1896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1896);
        float _1909 = (dot(vec3(_1138, _1139, _1140), vec3(_1901 * _1893, _1901 * _1894, _1901 * _1895)) + 1.0) * 0.5;
        float _4513 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1918 = sqrt(((_1894 * _1894) + (_1893 * _1893)) + (_1895 * _1895)) / (_1890 + 9.9999997473787516355514526367188e-06);
        float _4524 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1920 = _1919 * 2.0;
        float _1924 = (1.0 - _1919) / (_1919 + 1.0);
        float _4535 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1934 = ((((1.0 - _1925) * (_1920 + 2.0)) * exp2(log2(isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_1920 + 1.0))) + _1925) * _1890;
        float _1935 = _1858 * 0.5;
        float _1936 = _1868 * 0.5;
        float _1937 = _1878 * 0.5;
        float _1938 = dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937));
        float _1943 = (_1938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1938);
        float _1951 = (dot(vec3(_1138, _1139, _1140), vec3(_1943 * _1935, _1943 * _1936, _1943 * _1937)) + 1.0) * 0.5;
        float _4546 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1960 = sqrt(((_1936 * _1936) + (_1935 * _1935)) + (_1937 * _1937)) / (_1891 + 9.9999997473787516355514526367188e-06);
        float _4557 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1962 = _1961 * 2.0;
        float _1966 = (1.0 - _1961) / (_1961 + 1.0);
        float _4568 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1976 = ((((1.0 - _1967) * (_1962 + 2.0)) * exp2(log2(isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_1962 + 1.0))) + _1967) * _1891;
        float _1977 = _1859 * 0.5;
        float _1978 = _1869 * 0.5;
        float _1979 = _1879 * 0.5;
        float _1980 = dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979));
        float _1985 = (_1980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1980);
        float _1993 = (dot(vec3(_1138, _1139, _1140), vec3(_1985 * _1977, _1985 * _1978, _1985 * _1979)) + 1.0) * 0.5;
        float _4579 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _2002 = sqrt(((_1978 * _1978) + (_1977 * _1977)) + (_1979 * _1979)) / (_1892 + 9.9999997473787516355514526367188e-06);
        float _4590 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2004 = _2003 * 2.0;
        float _2008 = (1.0 - _2003) / (_2003 + 1.0);
        float _4601 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2018 = ((((1.0 - _2009) * (_2004 + 2.0)) * exp2(log2(isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2004 + 1.0))) + _2009) * _1892;
        _2026 = _1859;
        _2027 = _1858;
        _2028 = _1857;
        _2029 = _1869;
        _2030 = _1868;
        _2031 = _1867;
        _2032 = _1879;
        _2033 = _1878;
        _2034 = _1877;
        _2035 = _1892;
        _2036 = _1891;
        _2037 = _1890;
        _2038 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)));
        _2039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)));
        _2040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)));
    }
    else
    {
        _2026 = _1717;
        _2027 = _1717;
        _2028 = _1717;
        _2029 = _1717;
        _2030 = _1717;
        _2031 = _1717;
        _2032 = _1717;
        _2033 = _1717;
        _2034 = _1717;
        _2035 = _1717;
        _2036 = _1717;
        _2037 = _1717;
        _2038 = 0.0;
        _2039 = 0.0;
        _2040 = 0.0;
    }
    float _2050 = (cbModelParam._m0[1u].x * (_2038 - _1729)) + _1729;
    float _2051 = (cbModelParam._m0[1u].x * (_2039 - _1730)) + _1730;
    float _2052 = (cbModelParam._m0[1u].x * (_2040 - _1731)) + _1731;
    float _2073 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2076 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2079 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2050));
    float _2094 = _1323 * 0.5;
    float _2095 = _1324 * 0.5;
    float _2096 = _1325 * 0.5;
    float _2097 = dot(vec4(_2094, _2095, _2096, 1.0), vec4(_2028, _2031, _2034, _2037));
    float _2100 = dot(vec4(_2094, _2095, _2096, 1.0), vec4(_2027, _2030, _2033, _2036));
    float _2103 = dot(vec4(_2094, _2095, _2096, 1.0), vec4(_2026, _2029, _2032, _2035));
    float _2137;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2110 = dot(vec4(_2094, _2095, _2096, 1.0), vec4(_1716, _1720, _1723, _1726));
        float _2114 = dot(vec4(_2094, _2095, _2096, 1.0), vec4(_1718, _1721, _1724, _1727));
        float _2118 = dot(vec4(_2094, _2095, _2096, 1.0), vec4(_1719, _1722, _1725, _1728));
        float _2125 = dot(vec4(cbModelParam._m0[39u]), vec4(_2094, _2095, _2096, 1.0));
        _2137 = dot(vec3(isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)), isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0)), isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2125) ? 0.0 : (isnan(0.0) ? _2125 : max(0.0, _2125))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2137 = 1.0;
    }
    float _2148;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2139 = dot(vec4(cbModelParam._m0[40u]), vec4(_2094, _2095, _2096, 1.0));
        _2148 = dot(vec3(isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0)), isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)), isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2139) ? 0.0 : (isnan(0.0) ? _2139 : max(0.0, _2139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2148 = 1.0;
    }
    float _2152 = (_2148 * cbModelParam._m0[1u].x) + (_2137 * (1.0 - cbModelParam._m0[1u].x));
    float _2162 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1141);
    float _2163 = isnan(_2162) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2162 : min(cbModelParam._m0[25u].z, _2162));
    float _2243;
    float _2245;
    float _2247;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2210 = fma(_1387, cbModelParam._m0[13u].z, fma(_1383, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1379)) + cbModelParam._m0[13u].w;
        float _2214 = fma(_1387, cbModelParam._m0[14u].z, fma(_1383, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1379)) + cbModelParam._m0[14u].w;
        float _2218 = fma(_1387, cbModelParam._m0[15u].z, fma(_1383, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1379)) + cbModelParam._m0[15u].w;
        float _2221 = fma(_1325, cbModelParam._m0[13u].z, fma(_1324, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1323));
        float _2224 = fma(_1325, cbModelParam._m0[14u].z, fma(_1324, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1323));
        float _2227 = fma(_1325, cbModelParam._m0[15u].z, fma(_1324, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1323));
        float _2255;
        if (_2221 > 0.0)
        {
            _2255 = abs((1.0 - _2210) / _2221);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2221 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2210 + 1.0) / _2221);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2255 = frontier_phi_17_15_ladder;
        }
        float _2457;
        if (_2224 > 0.0)
        {
            _2457 = abs((1.0 - _2214) / _2224);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2214 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2457 = frontier_phi_26_22_ladder;
        }
        float _2711;
        if (_2227 > 0.0)
        {
            _2711 = abs((1.0 - _2218) / _2227);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2218 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2711 = frontier_phi_38_33_ladder;
        }
        float _2713 = isnan(_2457) ? _2255 : (isnan(_2255) ? _2457 : min(_2255, _2457));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _2221) + _2210;
        float _2719 = (_2714 * _2224) + _2214;
        float _2720 = (_2714 * _2227) + _2218;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2721;
        float _2725 = _2721 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 > _2725) || ((_2719 < _2723) || ((_2718 < _2723) || (_2718 > _2725))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2720, cbModelParam._m0[9u].z, fma(_2719, cbModelParam._m0[9u].y, _2718 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2720, cbModelParam._m0[10u].z, fma(_2719, cbModelParam._m0[10u].y, _2718 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2720, cbModelParam._m0[11u].z, fma(_2719, cbModelParam._m0[11u].y, _2718 * cbModelParam._m0[11u].x))), _2163);
            frontier_phi_16_38_ladder = _2848.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2848.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2848.x * cbModelParam._m0[1u].y;
        }
        _2243 = frontier_phi_16_38_ladder_2;
        _2245 = frontier_phi_16_38_ladder_1;
        _2247 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1323, _1324, _1325), _2163);
        _2243 = _2231.x * cbModelParam._m0[1u].y;
        _2245 = _2231.y * cbModelParam._m0[1u].y;
        _2247 = _2231.z * cbModelParam._m0[1u].y;
    }
    float _2251 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1141);
    float _2252 = isnan(_2251) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2251 : min(cbModelParam._m0[25u].w, _2251));
    float _2341;
    float _2343;
    float _2345;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2305 = fma(_1387, cbModelParam._m0[21u].z, fma(_1383, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1379)) + cbModelParam._m0[21u].w;
        float _2309 = fma(_1387, cbModelParam._m0[22u].z, fma(_1383, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1379)) + cbModelParam._m0[22u].w;
        float _2313 = fma(_1387, cbModelParam._m0[23u].z, fma(_1383, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1379)) + cbModelParam._m0[23u].w;
        float _2316 = fma(_1325, cbModelParam._m0[21u].z, fma(_1324, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1323));
        float _2319 = fma(_1325, cbModelParam._m0[22u].z, fma(_1324, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1323));
        float _2322 = fma(_1325, cbModelParam._m0[23u].z, fma(_1324, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1323));
        float _2462;
        if (_2316 > 0.0)
        {
            _2462 = abs((1.0 - _2305) / _2316);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2316 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2305 + 1.0) / _2316);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2462 = frontier_phi_28_24_ladder;
        }
        float _2738;
        if (_2319 > 0.0)
        {
            _2738 = abs((1.0 - _2309) / _2319);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2319 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2309 + 1.0) / _2319);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2738 = frontier_phi_40_35_ladder;
        }
        float _2951;
        if (_2322 > 0.0)
        {
            _2951 = abs((1.0 - _2313) / _2322);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2322 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2313 + 1.0) / _2322);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2951 = frontier_phi_49_46_ladder;
        }
        float _2953 = isnan(_2738) ? _2462 : (isnan(_2462) ? _2738 : min(_2462, _2738));
        float _2954 = isnan(_2951) ? _2953 : (isnan(_2953) ? _2951 : min(_2953, _2951));
        float _2958 = (_2954 * _2316) + _2305;
        float _2959 = (_2954 * _2319) + _2309;
        float _2960 = (_2954 * _2322) + _2313;
        float _2961 = _2954 * 9.9999997473787516355514526367188e-05;
        float _2962 = (-1.0) - _2961;
        float _2964 = _2961 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2960 > _2964) || ((_2960 < _2962) || ((_2959 > _2964) || ((_2959 < _2962) || ((_2958 < _2962) || (_2958 > _2964))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3159 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2960, cbModelParam._m0[17u].z, fma(_2959, cbModelParam._m0[17u].y, _2958 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2960, cbModelParam._m0[18u].z, fma(_2959, cbModelParam._m0[18u].y, _2958 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2960, cbModelParam._m0[19u].z, fma(_2959, cbModelParam._m0[19u].y, _2958 * cbModelParam._m0[19u].x))), _2252);
            frontier_phi_25_49_ladder = _3159.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3159.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3159.x * cbModelParam._m0[1u].z;
        }
        _2341 = frontier_phi_25_49_ladder_2;
        _2343 = frontier_phi_25_49_ladder_1;
        _2345 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1323, _1324, _1325), _2252);
        _2341 = _2325.x * cbModelParam._m0[1u].z;
        _2343 = _2325.y * cbModelParam._m0[1u].z;
        _2345 = _2325.z * cbModelParam._m0[1u].z;
    }
    float _2358 = (((_1350 * _1299) + _1351) * _1315) * ((cbModelParam._m0[1u].w * (_2341 - _2243)) + _2243);
    float _2360 = (((_1350 * _1301) + _1351) * _1315) * ((cbModelParam._m0[1u].w * (_2343 - _2245)) + _2245);
    float _2362 = (((_1350 * _1302) + _1351) * _1315) * ((cbModelParam._m0[1u].w * (_2345 - _2247)) + _2247);
    float _2365 = fma(_2362, cbSceneParam._m0[89u].z, fma(_2360, cbSceneParam._m0[89u].y, _2358 * cbSceneParam._m0[89u].x));
    float _2368 = fma(_2362, cbSceneParam._m0[90u].z, fma(_2360, cbSceneParam._m0[90u].y, _2358 * cbSceneParam._m0[90u].x));
    float _2371 = fma(_2362, cbSceneParam._m0[91u].z, fma(_2360, cbSceneParam._m0[91u].y, _2358 * cbSceneParam._m0[91u].x));
    uvec4 _2381 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2383 = _2381.x * 14u;
    uint _2384 = _2383 + 13u;
    float _2391 = _1315 + (-1.0);
    float _2396 = (cbLight._m0[_2384].x * _2391) + 1.0;
    float _2397 = (cbLight._m0[_2384].y * _2391) + 1.0;
    float _2398 = (cbLight._m0[_2384].z * _2391) + 1.0;
    float _2399 = (cbLight._m0[_2384].w * _2391) + 1.0;
    uint _2400 = _2383 + 5u;
    float _2406 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2410 = _2383 + 4u;
    float _2416 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2420 = _2383 | 1u;
    float _2431 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_1138, _1139, _1140));
    float _2434 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_1138, _1139, _1140));
    float _4737 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _4748 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2439 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * 0.3183098733425140380859375;
    float _2441 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * 0.3183098733425140380859375;
    float _2448 = ((cbLight._m0[_2400].x * _2406) * _2441) + ((cbLight._m0[_2410].x * _2416) * _2439);
    float _2449 = ((_2406 * cbLight._m0[_2400].y) * _2441) + ((_2416 * cbLight._m0[_2410].y) * _2439);
    float _2450 = ((_2406 * cbLight._m0[_2400].z) * _2441) + ((_2416 * cbLight._m0[_2410].z) * _2439);
    uvec4 _2454 = floatBitsToUint(cbLight._m0[_2383 + 12u]);
    bool _2456 = _2454.x == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2456)
    {
        _2467 = _2448;
        _2469 = _2449;
        _2471 = _2450;
    }
    else
    {
        uint _2475 = _2383 + 6u;
        float _2491 = (dot(vec3(cbLight._m0[_2383 + 2u].xyz), vec3(_1138, _1139, _1140)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4759 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2494 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2467 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2448;
        _2469 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2449;
        _2471 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2450;
    }
    bool _2474 = _2454.y == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2474)
    {
        _2512 = _2467;
        _2514 = _2469;
        _2516 = _2471;
    }
    else
    {
        uint _2682 = _2383 + 7u;
        float _2698 = (dot(vec3(cbLight._m0[_2383 + 3u].xyz), vec3(_1138, _1139, _1140)) * 0.5) + 0.5;
        float _2699 = _2698 * _2698;
        float _4775 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2700 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2701 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2512 = (((cbLight._m0[_2682].x * 0.3183098733425140380859375) * _2700) * _2701) + _2467;
        _2514 = (((cbLight._m0[_2682].y * 0.3183098733425140380859375) * _2700) * _2701) + _2469;
        _2516 = (((cbLight._m0[_2682].z * 0.3183098733425140380859375) * _2700) * _2701) + _2471;
    }
    uint _2519 = _2383 + 8u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _1141) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2383].x + _1217;
    float _2535 = cbLight._m0[_2383].y + _1218;
    float _2536 = cbLight._m0[_2383].z + _1219;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_2383].xyz));
    float _4791 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _4802 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _2548 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2549 = dot(vec3(_1138, _1139, _1140), vec3(_2541, _2542, _2543));
    float _4813 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2541, _2542, _2543));
    float _4824 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2533 * _2533;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
    float _2570 = 0.959999978542327880859375 - _1296;
    float _2572 = 0.959999978542327880859375 - _1297;
    float _2573 = 0.959999978542327880859375 - _1298;
    float _2580 = 1.0 - _2533;
    float _2591 = (0.5 / (((_2548 * ((_2547 * _2580) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2580) + _2533) * _2547))) * _2547;
    float _4835 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    uint _2604 = _2383 + 9u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _1141) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2420].x + _1217;
    float _2618 = cbLight._m0[_2420].y + _1218;
    float _2619 = cbLight._m0[_2420].z + _1219;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_2420].xyz));
    float _4846 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    float _2631 = dot(vec3(_1138, _1139, _1140), vec3(_2624, _2625, _2626));
    float _4857 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2624, _2625, _2626));
    float _4868 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2616 * _2616;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0);
    float _2657 = 1.0 - _2616;
    float _2667 = (0.5 / (((_2548 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2657) + _2616) * _2630))) * _2630;
    float _4879 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2669 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    float _2679 = (((((_2650 * _2570) + _1299) * cbLight._m0[_2604].x) * _2669) * _2406) + (((((_2569 * _2570) + _1299) * cbLight._m0[_2519].x) * _2593) * _2416);
    float _2680 = (((((_2650 * _2572) + _1301) * cbLight._m0[_2604].y) * _2669) * _2406) + (((((_2569 * _2572) + _1301) * cbLight._m0[_2519].y) * _2593) * _2416);
    float _2681 = (((((_2650 * _2573) + _1302) * cbLight._m0[_2604].z) * _2669) * _2406) + (((((_2569 * _2573) + _1302) * cbLight._m0[_2519].z) * _2593) * _2416);
    float _2743;
    float _2745;
    float _2747;
    if (_2456)
    {
        _2743 = _2679;
        _2745 = _2680;
        _2747 = _2681;
    }
    else
    {
        uint _2749 = _2383 + 2u;
        uint _2753 = _2383 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _1141) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _1217;
        float _2770 = cbLight._m0[_2749].y + _1218;
        float _2771 = cbLight._m0[_2749].z + _1219;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_2749].xyz));
        float _4890 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2783 = dot(vec3(_1138, _1139, _1140), vec3(_2776, _2777, _2778));
        float _4901 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4912 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2548 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2809) + _2768) * _2782))) * _2782;
        float _4923 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2743 = (((((_2802 * _2570) + _1299) * cbLight._m0[_2753].x) * _2821) * _2822) + _2679;
        _2745 = (((((_2802 * _2572) + _1301) * cbLight._m0[_2753].y) * _2821) * _2822) + _2680;
        _2747 = (((((_2802 * _2573) + _1302) * cbLight._m0[_2753].z) * _2821) * _2822) + _2681;
    }
    float _2857;
    float _2859;
    float _2861;
    if (_2474)
    {
        _2857 = _2743;
        _2859 = _2745;
        _2861 = _2747;
    }
    else
    {
        uint _2868 = _2383 + 3u;
        uint _2872 = _2383 + 11u;
        float _2886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2868].w)) * _1141) * 0.949999988079071044921875);
        float _2887 = _2886 * _2886;
        float _2888 = cbLight._m0[_2868].x + _1217;
        float _2889 = cbLight._m0[_2868].y + _1218;
        float _2890 = cbLight._m0[_2868].z + _1219;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2895 = _2894 * _2888;
        float _2896 = _2894 * _2889;
        float _2897 = _2894 * _2890;
        float _2898 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_2868].xyz));
        float _4939 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2902 = dot(vec3(_1138, _1139, _1140), vec3(_2895, _2896, _2897));
        float _4950 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
        float _2906 = dot(vec3(cbLight._m0[_2868].xyz), vec3(_2895, _2896, _2897));
        float _4961 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2910 = _2887 * _2887;
        float _2914 = ((_2905 * _2905) * (_2910 + (-1.0))) + 1.0;
        float _2921 = exp2(log2(1.0 - (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) * 5.0);
        float _2928 = 1.0 - _2887;
        float _2938 = (0.5 / (((_2548 * ((_2901 * _2928) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2928) + _2887) * _2901))) * _2901;
        float _4972 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2910 / ((_2914 * _2914) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2857 = (((((_2921 * _2570) + _1299) * cbLight._m0[_2872].x) * _2940) * _2941) + _2743;
        _2859 = (((((_2921 * _2572) + _1301) * cbLight._m0[_2872].y) * _2940) * _2941) + _2745;
        _2861 = (((((_2921 * _2573) + _1302) * cbLight._m0[_2872].z) * _2940) * _2941) + _2747;
    }
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_2381.y == 0u)
    {
        float _3016 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3016;
        float _3018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3016;
        float _3019 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3016;
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.x;
        uint _3043 = uint((float(_3031.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1238) / _3032))) + floor(float(uint(cbSceneParam._m0[85u].x * _1237) / _3032)));
        float _3053 = (log2(_3019 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3054 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        uint _3057 = uint(isnan(14.0) ? _3054 : (isnan(_3054) ? 14.0 : min(_3054, 14.0)));
        uvec4 _3062 = texelFetch(g_lightClusterGridBuffer, int(((_3057 << 2u) + (_3043 << 6u)) >> 2u));
        uint _3063 = _3062.x;
        uint _3064 = _3031.z;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((((1u << ((_3064 >> 4u) & 15u)) + 4294967295u) & _3063) == 0u) || ((_3064 & 240u) == 0u))
        {
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
        }
        else
        {
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            uint _3323 = 0u;
            uint _3332;
            bool _3333;
            for (;;)
            {
                _3332 = texelFetch(g_lightClassification, int((((_3057 << 5u) + (_3043 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                _3333 = _3332 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3333)
                {
                    frontier_phi_66_pred = _3317;
                    frontier_phi_66_pred_1 = _3322;
                    frontier_phi_66_pred_2 = _3321;
                    frontier_phi_66_pred_3 = _3320;
                    frontier_phi_66_pred_4 = _3319;
                    frontier_phi_66_pred_5 = _3318;
                }
                else
                {
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    uint _3468;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3332;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    for (;;)
                    {
                        uint _3472 = uint(findLSB(_3468)) + (_3323 << 5u);
                        uint _3469 = (_3468 + 4294967295u) & _3468;
                        uint _3474 = _3472 * 48u;
                        vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3494 = (_3472 * 48u) + 4u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3513 = (_3472 * 48u) + 8u;
                        vec3 _3524 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x));
                        float _3528 = _3488.x - _3017;
                        float _3529 = _3488.y - _3018;
                        float _3530 = _3488.z - _3019;
                        float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                        float _3534 = inversesqrt(_3531);
                        float _3535 = _3534 * _3528;
                        float _3536 = _3534 * _3529;
                        float _3537 = _3534 * _3530;
                        float _3538 = dot(vec3(_1256, _1259, _1262), vec3(_3535, _3536, _3537));
                        float _3543 = 1.0 - (_3531 * _3488.w);
                        float _4998 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3545 = sqrt(_3531) * _3507.w;
                        float _3548 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3538) + _3549;
                        float _3555 = _3545 * _3545;
                        float _3559 = ((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3544) / ((_3555 * 0.699999988079071044921875) + 1.0);
                        float _3563 = (-0.0) - _3017;
                        float _3564 = (-0.0) - _3018;
                        float _3565 = (-0.0) - _3019;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3580 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                        float _3581 = 1.0 - _1331;
                        float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                        float _3589 = _3588 * _3588;
                        float _3590 = _3589 * _3589;
                        float _3591 = _3570 + _3535;
                        float _3592 = _3571 + _3536;
                        float _3593 = _3572 + _3537;
                        float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                        float _3601 = dot(vec3(_1256, _1259, _1262), vec3(_3570, _3571, _3572));
                        float _5014 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3604 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                        float _3605 = dot(vec3(_1256, _1259, _1262), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                        float _5025 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                        float _3608 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                        float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                        float _3613 = _3548 * _3589;
                        float _3614 = _3613 * _3613;
                        float _3617 = ((1.0 - _3614) * _3538) + _3614;
                        float _5036 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3618 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                        float _3619 = 1.0 - _3589;
                        float _3629 = (0.5 / (((_3618 * ((_3604 * _3619) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3589) * _3604))) * _3618;
                        float _5047 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                        float _3640 = (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0)))) / ((_3612 * _3612) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125))) * _3544;
                        _3392 = (_3559 * _3507.x) + _3465;
                        _3393 = (_3559 * _3507.y) + _3466;
                        _3394 = (_3559 * _3507.z) + _3467;
                        _3389 = (_3640 * _3524.x) + _3462;
                        _3390 = (_3640 * _3524.y) + _3463;
                        _3391 = (_3640 * _3524.z) + _3464;
                        if (_3469 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3469;
                        }
                    }
                    frontier_phi_66_pred = _3389;
                    frontier_phi_66_pred_1 = _3394;
                    frontier_phi_66_pred_2 = _3393;
                    frontier_phi_66_pred_3 = _3392;
                    frontier_phi_66_pred_4 = _3391;
                    frontier_phi_66_pred_5 = _3390;
                }
                _3165 = frontier_phi_66_pred;
                _3175 = frontier_phi_66_pred_1;
                _3173 = frontier_phi_66_pred_2;
                _3171 = frontier_phi_66_pred_3;
                _3169 = frontier_phi_66_pred_4;
                _3167 = frontier_phi_66_pred_5;
                uint _3324 = _3323 + 1u;
                if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3317 = _3165;
                    _3318 = _3167;
                    _3319 = _3169;
                    _3320 = _3171;
                    _3321 = _3173;
                    _3322 = _3175;
                    _3323 = _3324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
        }
        uvec4 _3178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3179 = _3178.z;
        uint _3181 = (_3179 >> 8u) & 15u;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((4294967295u << _3181) & _3063) == 0u)
        {
            _3285 = _3164;
            _3287 = _3166;
            _3289 = _3168;
            _3291 = _3170;
            _3293 = _3172;
            _3295 = _3174;
        }
        else
        {
            float _3310 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
            float _3311 = _3310 * _3017;
            float _3312 = _3310 * _3018;
            float _3313 = _3310 * _3019;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3181 < ((_3179 >> 12u) & 15u))
            {
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3445 = _3164;
                float _3446 = _3166;
                float _3447 = _3168;
                float _3448 = _3170;
                float _3449 = _3172;
                float _3450 = _3174;
                uint _3451 = _3181;
                uint _3460;
                bool _3461;
                for (;;)
                {
                    _3460 = texelFetch(g_lightClassification, int((((_3057 << 5u) + (_3043 << 9u)) + (_3451 << 2u)) >> 2u)).x;
                    _3461 = _3460 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3461)
                    {
                        frontier_phi_77_pred = _3450;
                        frontier_phi_77_pred_1 = _3449;
                        frontier_phi_77_pred_2 = _3448;
                        frontier_phi_77_pred_3 = _3447;
                        frontier_phi_77_pred_4 = _3446;
                        frontier_phi_77_pred_5 = _3445;
                    }
                    else
                    {
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3667 = _3445;
                        float _3668 = _3446;
                        float _3669 = _3447;
                        float _3670 = _3448;
                        float _3671 = _3449;
                        float _3672 = _3450;
                        uint _3673 = _3460;
                        uint _3674;
                        vec4 _3699;
                        float _3700;
                        vec4 _3715;
                        vec3 _3727;
                        vec4 _3742;
                        vec4 _3757;
                        float _3803;
                        bool _3804;
                        for (;;)
                        {
                            uint _3684 = ((_3451 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3673));
                            _3674 = (_3673 + 4294967295u) & _3673;
                            uint _3686 = _3684 * 40u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            _3700 = _3699.w;
                            uint _3702 = (_3684 * 40u) + 4u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3684 * 40u) + 8u;
                            _3727 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x));
                            uint _3729 = (_3684 * 40u) + 16u;
                            _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3744 = (_3684 * 40u) + 20u;
                            _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            uint _3759 = (_3684 * 40u) + 24u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3778 = (_3684 * 40u) + 28u;
                            vec4 _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            _3803 = fma(_3019, _3791.z, fma(_3018, _3791.y, _3791.x * _3017)) + _3791.w;
                            _3804 = !((fma(_3019, _3772.z, fma(_3018, _3772.y, _3772.x * _3017)) + _3772.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3804)
                            {
                                float _3831 = _3699.x - _3017;
                                float _3832 = _3699.y - _3018;
                                float _3833 = _3699.z - _3019;
                                float _3834 = dot(vec3(_3831, _3832, _3833), vec3(_3831, _3832, _3833));
                                float _3837 = inversesqrt(_3834);
                                float _3838 = _3837 * _3831;
                                float _3839 = _3837 * _3832;
                                float _3840 = _3837 * _3833;
                                float _3844 = 1.0 - (_3834 / (_3700 * _3700));
                                float _5058 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3849 = sqrt(_3834) * _3715.w;
                                float _3851 = 1.39999997615814208984375 / (_3849 + 1.39999997615814208984375);
                                float _3852 = _3851 * _3851;
                                float _3855 = ((1.0 - _3852) * dot(vec3(_3838, _3839, _3840), vec3(_1256, _1259, _1262))) + _3852;
                                float _3858 = _3849 * _3849;
                                float _3862 = (fma(_3019, _3742.z, fma(_3018, _3742.y, _3742.x * _3017)) + _3742.w) / _3803;
                                float _3863 = (fma(_3019, _3757.z, fma(_3018, _3757.y, _3757.x * _3017)) + _3757.w) / _3803;
                                float _3867 = 1.0 - dot(vec2(_3862, _3863), vec2(_3862, _3863));
                                float _5074 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3869 = _3868 * (((isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0))) * _3845) / ((_3858 * 0.699999988079071044921875) + 1.0));
                                float _3881 = exp2(log2(1.0 / ((_3858 * 3.5) + 5.0)) * 0.25);
                                float _3882 = 1.0 - _1331;
                                float _3889 = sqrt(1.0 - ((1.0 - (_3882 * _3882)) * (1.0 - (_3881 * _3881))));
                                float _3890 = _3889 * _3889;
                                float _3891 = _3890 * _3890;
                                float _3892 = _3838 - _3311;
                                float _3893 = _3839 - _3312;
                                float _3894 = _3840 - _3313;
                                float _3898 = inversesqrt(dot(vec3(_3892, _3893, _3894), vec3(_3892, _3893, _3894)));
                                float _3902 = dot(vec3(_1256, _1259, _1262), vec3((-0.0) - _3311, (-0.0) - _3312, (-0.0) - _3313));
                                float _5085 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3905 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                                float _3906 = dot(vec3(_1256, _1259, _1262), vec3(_3898 * _3892, _3898 * _3893, _3898 * _3894));
                                float _5096 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3909 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                                float _3913 = ((_3909 * _3909) * (_3891 + (-1.0))) + 1.0;
                                float _3914 = _3851 * _3890;
                                float _3915 = _3914 * _3914;
                                float _3921 = ((1.0 - _3915) * dot(vec3(_1256, _1259, _1262), vec3(_3838, _3839, _3840))) + _3915;
                                float _5107 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3923 = 1.0 - _3890;
                                float _3933 = (0.5 / (((_3922 * ((_3905 * _3923) + _3890)) + 9.9999999392252902907785028219223e-09) + (((_3922 * _3923) + _3890) * _3905))) * _3922;
                                float _5118 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3943 = (_3868 * _3845) * (((_3891 * 3.1415927410125732421875) * (isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0)))) / ((_3913 * _3913) * ((_3858 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3869 * _3715.y;
                                frontier_phi_83_pred_1 = _3869 * _3715.x;
                                frontier_phi_83_pred_2 = _3943 * _3727.z;
                                frontier_phi_83_pred_3 = _3943 * _3727.y;
                                frontier_phi_83_pred_4 = _3943 * _3727.x;
                                frontier_phi_83_pred_5 = _3869 * _3715.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3951 = frontier_phi_83_pred;
                            _3950 = frontier_phi_83_pred_1;
                            _3949 = frontier_phi_83_pred_2;
                            _3948 = frontier_phi_83_pred_3;
                            _3947 = frontier_phi_83_pred_4;
                            _3952 = frontier_phi_83_pred_5;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3659 = _3952 + _3672;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            if (_3674 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3674;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3659;
                        frontier_phi_77_pred_1 = _3658;
                        frontier_phi_77_pred_2 = _3657;
                        frontier_phi_77_pred_3 = _3656;
                        frontier_phi_77_pred_4 = _3655;
                        frontier_phi_77_pred_5 = _3654;
                    }
                    _3296 = frontier_phi_77_pred;
                    _3294 = frontier_phi_77_pred_1;
                    _3292 = frontier_phi_77_pred_2;
                    _3290 = frontier_phi_77_pred_3;
                    _3288 = frontier_phi_77_pred_4;
                    _3286 = frontier_phi_77_pred_5;
                    uint _3452 = _3451 + 1u;
                    if (_3452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3445 = _3286;
                        _3446 = _3288;
                        _3447 = _3290;
                        _3448 = _3292;
                        _3449 = _3294;
                        _3450 = _3296;
                        _3451 = _3452;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3290;
                frontier_phi_58_59_ladder_1 = _3296;
                frontier_phi_58_59_ladder_2 = _3294;
                frontier_phi_58_59_ladder_3 = _3292;
                frontier_phi_58_59_ladder_4 = _3288;
                frontier_phi_58_59_ladder_5 = _3286;
            }
            else
            {
                frontier_phi_58_59_ladder = _3168;
                frontier_phi_58_59_ladder_1 = _3174;
                frontier_phi_58_59_ladder_2 = _3172;
                frontier_phi_58_59_ladder_3 = _3170;
                frontier_phi_58_59_ladder_4 = _3166;
                frontier_phi_58_59_ladder_5 = _3164;
            }
            _3285 = frontier_phi_58_59_ladder_5;
            _3287 = frontier_phi_58_59_ladder_4;
            _3289 = frontier_phi_58_59_ladder;
            _3291 = frontier_phi_58_59_ladder_3;
            _3293 = frontier_phi_58_59_ladder_2;
            _3295 = frontier_phi_58_59_ladder_1;
        }
        float _3300 = isnan(1.0) ? _1315 : (isnan(_1315) ? 1.0 : min(_1315, 1.0));
        _3076 = (_3300 * _3291) + _2512;
        _3078 = (_3300 * _3293) + _2514;
        _3080 = (_3300 * _3295) + _2516;
        _3082 = ((_3285 * _1299) * _3300) + _2857;
        _3084 = ((_3287 * _1301) * _3300) + _2859;
        _3086 = ((_3289 * _1302) * _3300) + _2861;
    }
    else
    {
        _3076 = _2512;
        _3078 = _2514;
        _3080 = _2516;
        _3082 = _2857;
        _3084 = _2859;
        _3086 = _2861;
    }
    float _5134 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _5145 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _5156 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _3103 = ((isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * (_3076 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1315))) + ((_3082 + ((isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0))) * _2152)) * cbPerFrame._m0[3u].x);
    float _3104 = ((isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0))) * (_3078 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1315))) + ((_3084 + ((isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0))) * _2152)) * cbPerFrame._m0[3u].x);
    float _3105 = ((isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0))) * (_3080 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1315))) + ((_3086 + ((isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0))) * _2152)) * cbPerFrame._m0[3u].x);
    uint _3106 = _303 + 6u;
    float _3114 = _1237 / cbSceneParam._m0[86u].x;
    float _3115 = _1238 / cbSceneParam._m0[86u].y;
    vec4 _3129 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3114, _3115, (log2((isnan(cbSceneParam._m0[77u].w) ? _1160 : (isnan(_1160) ? cbSceneParam._m0[77u].w : min(_1160, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3131 = _3129.x;
    float _3132 = _3129.y;
    float _3133 = _3129.z;
    float _3134 = _3129.w;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_1160 > cbSceneParam._m0[78u].w)
    {
        float _3189 = isnan(_1160) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1160 : min(cbSceneParam._m0[80u].w, _1160));
        float _3190 = _3189 / _1160;
        float _3201 = _3190 * _1210;
        float _3202 = _1211 * _3190;
        float _3203 = (-0.0) - _3202;
        float _3205 = _3190 * _1212;
        float _3207 = (cbSceneParam._m0[77u].w * _3203) / _3189;
        float _3208 = _3207 + cbSceneParam._m0[79u].w;
        float _3209 = cbSceneParam._m0[79u].w - _3202;
        float _3215 = sqrt(((_3201 * _3201) + (_3202 * _3202)) + (_3205 * _3205));
        float _3218 = (1.0 - (cbSceneParam._m0[77u].w / _3189)) * _3215;
        float _3223 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3225 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3402;
        if (abs((_3203 - _3207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3402 = ((((_3208 > 0.0) ? exp2(_3223 * _3208) : (2.0 - exp2(_3225 * _3208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3218;
        }
        else
        {
            float _3346 = 1.0 / cbSceneParam._m0[80u].x;
            float _3347 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : max(_3208, _3209));
            float _3348 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : min(_3208, _3209));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            _3402 = ((abs(_3215 / _3203) * cbSceneParam._m0[80u].y) * ((((_3357 - _3358) * 2.0) - ((exp2(_3223 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0)))) - exp2(_3223 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))))) * _3346)) - ((exp2(_3225 * _3357) - exp2(_3225 * _3358)) * _3346))) + (_3218 * cbSceneParam._m0[80u].z);
        }
        vec4 _3404 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3114, _3115, 1.0), 0.0);
        float _3413 = exp2((_3402 * (-1.44269502162933349609375)) * (1.0 - _3404.w));
        float _3414 = log2(_3413);
        float _3430 = log2(_3134);
        _3227 = (exp2(_3430 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].x)) * _3404.x) / cbSceneParam._m0[78u].x)) + _3131;
        _3229 = (exp2(_3430 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].y)) * _3404.y) / cbSceneParam._m0[78u].y)) + _3132;
        _3231 = (exp2(_3430 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].z)) * _3404.z) / cbSceneParam._m0[78u].z)) + _3133;
        _3233 = _3413 * _3134;
    }
    else
    {
        _3227 = _3131;
        _3229 = _3132;
        _3231 = _3133;
        _3233 = _3134;
    }
    bool _3440;
    vec4 _3243;
    vec4 _3265;
    float _3267;
    float _3271;
    float _3272;
    float _3273;
    float _3274;
    bool _3284;
    for (;;)
    {
        _3243 = cbMatDynParam._m0[0u];
        float _3245 = roundEven(_3243.y);
        bool _3246 = _3245 == 3.0;
        float _3247 = log2(_3233);
        float _3254 = exp2(_3247 * cbSceneParam._m0[78u].x) * _3103;
        float _3255 = exp2(_3247 * cbSceneParam._m0[78u].y) * _3104;
        float _3256 = exp2(_3247 * cbSceneParam._m0[78u].z) * _3105;
        float _3263 = _1226 + (-0.5);
        _3265 = cbMtdParam._m0[1u];
        _3267 = _3265.y * _3263;
        float _3270 = (_3245 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3271 = _3270 * (_3246 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3227)));
        _3272 = _3270 * (_3246 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3229)));
        _3273 = _3270 * (_3246 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3231)));
        _3274 = _3263 * 0.999000012874603271484375;
        _3284 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3284)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3274) < 0.5)
            {
                _3440 = true;
                break;
            }
        }
        uint _3381 = _1275 + uint(_3243.w);
        if ((cbInstanceData._m0[_3381].w < 1.0) && ((cbInstanceData._m0[_3381].w + _3274) < 0.5))
        {
            _3440 = true;
            break;
        }
        if ((_3267 + 1.0) < _3265.x)
        {
            _3440 = true;
            break;
        }
        _3440 = false;
        break;
    }
    float _3645;
    if (_3440)
    {
        discard_state = true;
        _3645 = 0.0;
    }
    else
    {
        _3645 = cbInstanceData._m0[_3106].w;
    }
    SV_Target.x = _3271;
    SV_Target.y = _3272;
    SV_Target.z = _3273;
    SV_Target.w = _3645;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3106].w;
    discard_exit();
}


