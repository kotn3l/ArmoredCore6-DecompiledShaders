#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1624;
float _4025;
float _4026;
float _4027;
float _4028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _315.x * cbMtdParam._m0[11u].x;
    float _322 = _315.y * cbMtdParam._m0[11u].y;
    float _323 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _361.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4037 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _439 = (_432 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _440 = (_432 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _441 = (_432 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _361.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _552 = _550.x;
    float _562 = dot(vec4(_552, _550.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _574 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _361.z) * 2.0) - ((((_552 - _562) * cbMtdParam._m0[23u].w) + _562) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4059 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _582 = (_575 * ((_533.x * cbMtdParam._m0[14u].x) - _512)) + _512;
    float _583 = (_575 * ((_533.y * cbMtdParam._m0[14u].y) - _513)) + _513;
    float _584 = (_575 * ((_533.z * cbMtdParam._m0[14u].z) - _514)) + _514;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _432) + _641;
    float _651 = ((_622.y - _642) * _432) + _642;
    float _652 = ((_622.z - _643) * _432) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_664.x - _650) * _505) + _650;
    float _676 = ((_664.y - _651) * _505) + _651;
    float _677 = ((_664.z - _652) * _505) + _652;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _702 = ((_689.z - _677) * _575) + _677;
    float _705 = ((((_689.x - _675) * _575) + _675) * 2.0) + (-1.0);
    float _707 = ((((_689.y - _676) * _575) + _676) * 2.0) + (-1.0);
    float _708 = dot(vec2(_705, _707), vec2(_705, _707));
    float _4070 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _713 = sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _754 = _752.x;
    float _755 = 1.0 - _754;
    float _763 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _766 = ((isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : min(_763, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _775 = (_766 - ((((((_754 - _755) * cbMtdParam._m0[24u].z) + _755) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _766))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4091 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _783 = (_776 * ((_602.x * cbMtdParam._m0[18u].x) - _582)) + _582;
    float _784 = (_776 * ((_602.y * cbMtdParam._m0[18u].y) - _583)) + _583;
    float _785 = (_776 * ((_602.z * cbMtdParam._m0[18u].z) - _584)) + _584;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _825 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_799 - _800) * cbMtdParam._m0[24u].w) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4102 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _834 = ((((cbMtdParam._m0[10u].x - _783) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _826) + _783;
    float _835 = ((((cbMtdParam._m0[10u].y - _784) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _826) + _784;
    float _836 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _785)) * _826) + _785;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _864 = _862.x;
    float _882 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _864) * _432) + _864;
    float _899 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _882) * _505) + _882;
    float _916 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _899) * _575) + _899;
    float _920 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _916) * cbMtdParam._m0[19u].z) + _916;
    float _922 = _920 - (_920 * _776);
    float _924 = _922 - (_922 * _826);
    float _928 = (cbMtdParam._m0[19u].w * (_727.z - _702)) + _702;
    vec4 _942 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _949 = (_942.x * 2.0) + (-1.0);
    float _950 = (_942.y * 2.0) + (-1.0);
    float _951 = dot(vec2(_949, _950), vec2(_949, _950));
    float _4113 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _959 = (_776 * (_942.z - _928)) + _928;
    float _962 = ((cbMtdParam._m0[23u].x - _959) * _826) + _959;
    vec4 _985 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _991 = (_985.x * 2.0) + (-1.0);
    float _992 = (_985.y * 2.0) + (-1.0);
    float _993 = dot(vec2(_991, _992), vec2(_991, _992));
    float _4124 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1001 = (((_727.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _1002 = (((_727.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _707;
    float _1014 = (((_949 - _1001) + (cbMtdParam._m0[21u].x * _1001)) * _776) + _1001;
    float _1015 = (((_950 - _1002) + (cbMtdParam._m0[21u].x * _1002)) * _776) + _1002;
    float _1016 = (_776 * (sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) - _713)) + _713;
    float _1027 = (((_991 - _1014) + (_1014 * cbMtdParam._m0[22u].z)) * _826) + _1014;
    float _1028 = (((_992 - _1015) + (_1015 * cbMtdParam._m0[22u].z)) * _826) + _1015;
    float _1029 = ((sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _1016) * _826) + _1016;
    float _1031 = cbMtdParam._m0[22u].x + _727.w;
    float _1034 = fma(_1029, _262 * NORMAL.x, fma(_1028, _269 * TANGENT.x, (_255 * _247) * _1027));
    float _1037 = fma(_1029, _262 * NORMAL.y, fma(_1028, _269 * TANGENT.y, (_255 * _248) * _1027));
    float _1040 = fma(_1029, _262 * NORMAL.z, fma(_1028, _269 * TANGENT.z, (_255 * _249) * _1027));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _4135 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1048 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4157 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4168 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4179 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4190 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _1053 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _1067 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1117 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1107);
    float _1118 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1107);
    float _1119 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1107);
    float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
    float _1124 = _1117 * _1123;
    float _1125 = _1118 * _1123;
    float _1126 = _1119 * _1123;
    vec4 _1131 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1133 = _1131.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1305 = sqrt(((_1117 * _1117) + (_1118 * _1118)) + (_1119 * _1119));
        float _1311 = (cbMatDynParam._m0[5u].x * _1305) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1316 = (cbMatDynParam._m0[5u].z * _1305) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1312)) + _1312) < ((_1133 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1144 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1145 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1163 = fma(_1047, cbSceneParam._m0[5u].z, fma(_1046, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1045));
    float _1166 = fma(_1047, cbSceneParam._m0[6u].z, fma(_1046, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1045));
    float _1169 = fma(_1047, cbSceneParam._m0[7u].z, fma(_1046, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1045));
    uint _1182 = _275 + 9u;
    uint _1183 = _1182 + uint(cbMatDynParam._m0[0u].w);
    float _1189 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1183].x;
    float _1190 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1183].y;
    float _1191 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1183].z;
    float _4223 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _1195 = 1.0 - _1053;
    float _1196 = _1192 * _1195;
    float _1197 = _1193 * _1195;
    float _1198 = _1194 * _1195;
    float _1203 = (_1192 + (-0.039999999105930328369140625)) * _1053;
    float _1204 = (_1193 + (-0.039999999105930328369140625)) * _1053;
    float _1205 = (_1194 + (-0.039999999105930328369140625)) * _1053;
    float _1206 = _1203 + 0.039999999105930328369140625;
    float _1208 = _1204 + 0.039999999105930328369140625;
    float _1209 = _1205 + 0.039999999105930328369140625;
    vec4 _1218 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1144, cbSceneParam._m0[86u].y * _1145));
    float _1222 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * TEXCOORD_5.w) * _1218.x;
    float _1223 = dot(vec3(_1045, _1046, _1047), vec3(_1124, _1125, _1126));
    float _1226 = _1223 * 2.0;
    float _1230 = (_1226 * _1045) - _1124;
    float _1231 = (_1226 * _1046) - _1125;
    float _1232 = (_1226 * _1047) - _1126;
    float _1236 = abs(dot(vec3(_1124, _1125, _1126), vec3(_1045, _1046, _1047)));
    float _4256 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1238 = sqrt(_1048);
    float _1251 = exp2((_1238 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1238 * 3.0));
    float _1257 = (1.0 - _1251) * ((_1238 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1258 = _1251 * _1238;
    float _1286 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1623;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1348 = fma(_1294, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286));
        float _1352 = fma(_1294, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286));
        float _1356 = fma(_1294, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286));
        float _1381 = _1286 + _1045;
        float _1382 = _1290 + _1046;
        float _1383 = _1294 + _1047;
        float _1393 = fma(_1383, cbModelParam._m0[26u].z, fma(_1382, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1381)) - _1348;
        float _1394 = fma(_1383, cbModelParam._m0[27u].z, fma(_1382, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1381)) - _1352;
        float _1395 = fma(_1383, cbModelParam._m0[28u].z, fma(_1382, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1381)) - _1356;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1348 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1352 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[34u].z) + ((((((_1356 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1451 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1417.x + (-0.5));
        float _1453 = _1451 * (_1417.y + (-0.5));
        float _1454 = _1451 * (_1417.z + (-0.5));
        float _1461 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1424.x + (-0.5));
        float _1463 = _1461 * (_1424.y + (-0.5));
        float _1464 = _1461 * (_1424.z + (-0.5));
        float _1471 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1431.x + (-0.5));
        float _1473 = _1471 * (_1431.y + (-0.5));
        float _1474 = _1471 * (_1431.z + (-0.5));
        float _1481 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1438.x + (-0.5));
        float _1483 = _1481 * (_1438.y + (-0.5));
        float _1484 = _1481 * (_1438.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1505 = (dot(vec3(_1045, _1046, _1047), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1515 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4304 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1517 + 1.0))) + _1522) * _1485;
        float _1532 = _1453 * 0.5;
        float _1533 = _1463 * 0.5;
        float _1534 = _1473 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1045, _1046, _1047), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4337 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1559 + 1.0))) + _1564) * _1486;
        float _1574 = _1454 * 0.5;
        float _1575 = _1464 * 0.5;
        float _1576 = _1474 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_1045, _1046, _1047), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4370 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1601 + 1.0))) + _1606) * _1487;
        _1623 = _1454;
        _1625 = _1453;
        _1626 = _1452;
        _1627 = _1464;
        _1628 = _1463;
        _1629 = _1462;
        _1630 = _1474;
        _1631 = _1473;
        _1632 = _1472;
        _1633 = _1487;
        _1634 = _1486;
        _1635 = _1485;
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1637 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1624;
        _1625 = _1624;
        _1626 = _1624;
        _1627 = _1624;
        _1628 = _1624;
        _1629 = _1624;
        _1630 = _1624;
        _1631 = _1624;
        _1632 = _1624;
        _1633 = _1624;
        _1634 = _1624;
        _1635 = _1624;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1664 = fma(_1294, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286));
        float _1668 = fma(_1294, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286));
        float _1672 = fma(_1294, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286));
        float _1695 = _1286 + _1045;
        float _1696 = _1290 + _1046;
        float _1697 = _1294 + _1047;
        float _1707 = fma(_1697, cbModelParam._m0[30u].z, fma(_1696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1695)) - _1664;
        float _1708 = fma(_1697, cbModelParam._m0[31u].z, fma(_1696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1695)) - _1668;
        float _1709 = fma(_1697, cbModelParam._m0[32u].z, fma(_1696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1695)) - _1672;
        float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
        float _1726 = ((_1713 * _1707) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1664 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1727 = ((_1713 * _1708) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1668 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1728 = ((_1713 * _1709) / cbModelParam._m0[35u].z) + ((((((_1672 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        float _1763 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1730.x + (-0.5));
        float _1765 = _1763 * (_1730.y + (-0.5));
        float _1766 = _1763 * (_1730.z + (-0.5));
        float _1773 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1737.x + (-0.5));
        float _1775 = _1773 * (_1737.y + (-0.5));
        float _1776 = _1773 * (_1737.z + (-0.5));
        float _1783 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1744.x + (-0.5));
        float _1785 = _1783 * (_1744.y + (-0.5));
        float _1786 = _1783 * (_1744.z + (-0.5));
        float _1793 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1751.x + (-0.5));
        float _1795 = _1793 * (_1751.y + (-0.5));
        float _1796 = _1793 * (_1751.z + (-0.5));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1800 = _1764 * 0.5;
        float _1801 = _1774 * 0.5;
        float _1802 = _1784 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1045, _1046, _1047), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4433 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1827 + 1.0))) + _1832) * _1797;
        float _1842 = _1765 * 0.5;
        float _1843 = _1775 * 0.5;
        float _1844 = _1785 * 0.5;
        float _1845 = dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844));
        float _1850 = (_1845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1845);
        float _1858 = (dot(vec3(_1045, _1046, _1047), vec3(_1850 * _1842, _1850 * _1843, _1850 * _1844)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1867 = sqrt(((_1843 * _1843) + (_1842 * _1842)) + (_1844 * _1844)) / (_1798 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1869 = _1868 * 2.0;
        float _1873 = (1.0 - _1868) / (_1868 + 1.0);
        float _4466 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1883 = ((((1.0 - _1874) * (_1869 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1869 + 1.0))) + _1874) * _1798;
        float _1884 = _1766 * 0.5;
        float _1885 = _1776 * 0.5;
        float _1886 = _1786 * 0.5;
        float _1887 = dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886));
        float _1892 = (_1887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1887);
        float _1900 = (dot(vec3(_1045, _1046, _1047), vec3(_1892 * _1884, _1892 * _1885, _1892 * _1886)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1909 = sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886)) / (_1799 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1911 = _1910 * 2.0;
        float _1915 = (1.0 - _1910) / (_1910 + 1.0);
        float _4499 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1925 = ((((1.0 - _1916) * (_1911 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1911 + 1.0))) + _1916) * _1799;
        _1933 = _1766;
        _1934 = _1765;
        _1935 = _1764;
        _1936 = _1776;
        _1937 = _1775;
        _1938 = _1774;
        _1939 = _1786;
        _1940 = _1785;
        _1941 = _1784;
        _1942 = _1799;
        _1943 = _1798;
        _1944 = _1797;
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
        _1946 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)));
        _1947 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)));
    }
    else
    {
        _1933 = _1624;
        _1934 = _1624;
        _1935 = _1624;
        _1936 = _1624;
        _1937 = _1624;
        _1938 = _1624;
        _1939 = _1624;
        _1940 = _1624;
        _1941 = _1624;
        _1942 = _1624;
        _1943 = _1624;
        _1944 = _1624;
        _1945 = 0.0;
        _1946 = 0.0;
        _1947 = 0.0;
    }
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1958 = (cbModelParam._m0[1u].x * (_1946 - _1637)) + _1637;
    float _1959 = (cbModelParam._m0[1u].x * (_1947 - _1638)) + _1638;
    float _1980 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1957));
    float _2001 = _1230 * 0.5;
    float _2002 = _1231 * 0.5;
    float _2003 = _1232 * 0.5;
    float _2004 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1935, _1938, _1941, _1944));
    float _2007 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1934, _1937, _1940, _1943));
    float _2010 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2044;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2017 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1623, _1627, _1630, _1633));
        float _2021 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1625, _1628, _1631, _1634));
        float _2025 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1626, _1629, _1632, _1635));
        float _2032 = dot(vec4(cbModelParam._m0[39u]), vec4(_2001, _2002, _2003, 1.0));
        _2044 = dot(vec3(isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2032) ? 0.0 : (isnan(0.0) ? _2032 : max(0.0, _2032))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2044 = 1.0;
    }
    float _2055;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2046 = dot(vec4(cbModelParam._m0[40u]), vec4(_2001, _2002, _2003, 1.0));
        _2055 = dot(vec3(isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2046) ? 0.0 : (isnan(0.0) ? _2046 : max(0.0, _2046))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2055 = 1.0;
    }
    float _2059 = (_2055 * cbModelParam._m0[1u].x) + (_2044 * (1.0 - cbModelParam._m0[1u].x));
    float _2069 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1048);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2069 : min(cbModelParam._m0[25u].z, _2069));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2117 = fma(_1294, cbModelParam._m0[13u].z, fma(_1290, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1286)) + cbModelParam._m0[13u].w;
        float _2121 = fma(_1294, cbModelParam._m0[14u].z, fma(_1290, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1286)) + cbModelParam._m0[14u].w;
        float _2125 = fma(_1294, cbModelParam._m0[15u].z, fma(_1290, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1286)) + cbModelParam._m0[15u].w;
        float _2128 = fma(_1232, cbModelParam._m0[13u].z, fma(_1231, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1230));
        float _2131 = fma(_1232, cbModelParam._m0[14u].z, fma(_1231, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1230));
        float _2134 = fma(_1232, cbModelParam._m0[15u].z, fma(_1231, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1230));
        float _2162;
        if (_2128 > 0.0)
        {
            _2162 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2162 = frontier_phi_17_15_ladder;
        }
        float _2385;
        if (_2131 > 0.0)
        {
            _2385 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2385 = frontier_phi_26_22_ladder;
        }
        float _2642;
        if (_2134 > 0.0)
        {
            _2642 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2642 = frontier_phi_38_33_ladder;
        }
        float _2644 = isnan(_2385) ? _2162 : (isnan(_2162) ? _2385 : min(_2162, _2385));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _2128) + _2117;
        float _2650 = (_2645 * _2131) + _2121;
        float _2651 = (_2645 * _2134) + _2125;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2652;
        float _2656 = _2652 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 > _2656) || ((_2650 < _2654) || ((_2649 < _2654) || (_2649 > _2656))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2651, cbModelParam._m0[9u].z, fma(_2650, cbModelParam._m0[9u].y, _2649 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2651, cbModelParam._m0[10u].z, fma(_2650, cbModelParam._m0[10u].y, _2649 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2651, cbModelParam._m0[11u].z, fma(_2650, cbModelParam._m0[11u].y, _2649 * cbModelParam._m0[11u].x))), _2070);
            frontier_phi_16_38_ladder = _2779.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2779.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2779.x * cbModelParam._m0[1u].y;
        }
        _2150 = frontier_phi_16_38_ladder_2;
        _2152 = frontier_phi_16_38_ladder_1;
        _2154 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1230, _1231, _1232), _2070);
        _2150 = _2138.x * cbModelParam._m0[1u].y;
        _2152 = _2138.y * cbModelParam._m0[1u].y;
        _2154 = _2138.z * cbModelParam._m0[1u].y;
    }
    float _2158 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1048);
    float _2159 = isnan(_2158) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2158 : min(cbModelParam._m0[25u].w, _2158));
    float _2248;
    float _2250;
    float _2252;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2212 = fma(_1294, cbModelParam._m0[21u].z, fma(_1290, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1286)) + cbModelParam._m0[21u].w;
        float _2216 = fma(_1294, cbModelParam._m0[22u].z, fma(_1290, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1286)) + cbModelParam._m0[22u].w;
        float _2220 = fma(_1294, cbModelParam._m0[23u].z, fma(_1290, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1286)) + cbModelParam._m0[23u].w;
        float _2223 = fma(_1232, cbModelParam._m0[21u].z, fma(_1231, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1230));
        float _2226 = fma(_1232, cbModelParam._m0[22u].z, fma(_1231, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1230));
        float _2229 = fma(_1232, cbModelParam._m0[23u].z, fma(_1231, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1230));
        float _2390;
        if (_2223 > 0.0)
        {
            _2390 = abs((1.0 - _2212) / _2223);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2212 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2390 = frontier_phi_28_24_ladder;
        }
        float _2669;
        if (_2226 > 0.0)
        {
            _2669 = abs((1.0 - _2216) / _2226);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2216 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2669 = frontier_phi_40_35_ladder;
        }
        float _2882;
        if (_2229 > 0.0)
        {
            _2882 = abs((1.0 - _2220) / _2229);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2220 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2882 = frontier_phi_49_46_ladder;
        }
        float _2884 = isnan(_2669) ? _2390 : (isnan(_2390) ? _2669 : min(_2390, _2669));
        float _2885 = isnan(_2882) ? _2884 : (isnan(_2884) ? _2882 : min(_2884, _2882));
        float _2889 = (_2885 * _2223) + _2212;
        float _2890 = (_2885 * _2226) + _2216;
        float _2891 = (_2885 * _2229) + _2220;
        float _2892 = _2885 * 9.9999997473787516355514526367188e-05;
        float _2893 = (-1.0) - _2892;
        float _2895 = _2892 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2891 > _2895) || ((_2891 < _2893) || ((_2890 > _2895) || ((_2890 < _2893) || ((_2889 < _2893) || (_2889 > _2895))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2891, cbModelParam._m0[17u].z, fma(_2890, cbModelParam._m0[17u].y, _2889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2891, cbModelParam._m0[18u].z, fma(_2890, cbModelParam._m0[18u].y, _2889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2891, cbModelParam._m0[19u].z, fma(_2890, cbModelParam._m0[19u].y, _2889 * cbModelParam._m0[19u].x))), _2159);
            frontier_phi_25_49_ladder = _3090.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3090.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3090.x * cbModelParam._m0[1u].z;
        }
        _2248 = frontier_phi_25_49_ladder_2;
        _2250 = frontier_phi_25_49_ladder_1;
        _2252 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2232 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1230, _1231, _1232), _2159);
        _2248 = _2232.x * cbModelParam._m0[1u].z;
        _2250 = _2232.y * cbModelParam._m0[1u].z;
        _2252 = _2232.z * cbModelParam._m0[1u].z;
    }
    float _2265 = (((_1257 * _1206) + _1258) * _1222) * ((cbModelParam._m0[1u].w * (_2248 - _2150)) + _2150);
    float _2267 = (((_1257 * _1208) + _1258) * _1222) * ((cbModelParam._m0[1u].w * (_2250 - _2152)) + _2152);
    float _2269 = (((_1257 * _1209) + _1258) * _1222) * ((cbModelParam._m0[1u].w * (_2252 - _2154)) + _2154);
    float _2272 = fma(_2269, cbSceneParam._m0[89u].z, fma(_2267, cbSceneParam._m0[89u].y, _2265 * cbSceneParam._m0[89u].x));
    float _2275 = fma(_2269, cbSceneParam._m0[90u].z, fma(_2267, cbSceneParam._m0[90u].y, _2265 * cbSceneParam._m0[90u].x));
    float _2278 = fma(_2269, cbSceneParam._m0[91u].z, fma(_2267, cbSceneParam._m0[91u].y, _2265 * cbSceneParam._m0[91u].x));
    vec4 _2286 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1144, _1145));
    float _2288 = _2286.w;
    float _2300 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2288);
    float _2301 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2288);
    float _2302 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2288);
    uvec4 _2306 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2308 = _2306.x * 14u;
    uint _2309 = _2308 + 13u;
    float _2316 = _1222 + (-1.0);
    float _2321 = (cbLight._m0[_2309].x * _2316) + 1.0;
    float _2322 = (cbLight._m0[_2309].y * _2316) + 1.0;
    float _2323 = (cbLight._m0[_2309].z * _2316) + 1.0;
    float _2324 = (cbLight._m0[_2309].w * _2316) + 1.0;
    uint _2325 = _2308 + 5u;
    float _2331 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2335 = _2308 + 4u;
    float _2344 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2348 = _2308 | 1u;
    float _2359 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1045, _1046, _1047));
    float _2362 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_1045, _1046, _1047));
    float _4635 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _4646 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2367 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2369 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * 0.3183098733425140380859375;
    float _2376 = ((cbLight._m0[_2325].x * _2331) * _2369) + (((cbLight._m0[_2335].x * _2300) * _2344) * _2367);
    float _2377 = ((_2331 * cbLight._m0[_2325].y) * _2369) + (((cbLight._m0[_2335].y * _2301) * _2344) * _2367);
    float _2378 = ((_2331 * cbLight._m0[_2325].z) * _2369) + (((cbLight._m0[_2335].z * _2302) * _2344) * _2367);
    uvec4 _2382 = floatBitsToUint(cbLight._m0[_2308 + 12u]);
    bool _2384 = _2382.x == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2384)
    {
        _2395 = _2376;
        _2397 = _2377;
        _2399 = _2378;
    }
    else
    {
        uint _2403 = _2308 + 6u;
        float _2419 = (dot(vec3(cbLight._m0[_2308 + 2u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4657 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2422 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2395 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2376;
        _2397 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2377;
        _2399 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2378;
    }
    bool _2402 = _2382.y == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2402)
    {
        _2440 = _2395;
        _2442 = _2397;
        _2444 = _2399;
    }
    else
    {
        uint _2613 = _2308 + 7u;
        float _2629 = (dot(vec3(cbLight._m0[_2308 + 3u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2630 = _2629 * _2629;
        float _4673 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2631 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2632 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2440 = (((cbLight._m0[_2613].x * 0.3183098733425140380859375) * _2631) * _2632) + _2395;
        _2442 = (((cbLight._m0[_2613].y * 0.3183098733425140380859375) * _2631) * _2632) + _2397;
        _2444 = (((cbLight._m0[_2613].z * 0.3183098733425140380859375) * _2631) * _2632) + _2399;
    }
    uint _2447 = _2308 + 8u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1048) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2308].x + _1124;
    float _2463 = cbLight._m0[_2308].y + _1125;
    float _2464 = cbLight._m0[_2308].z + _1126;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2308].xyz));
    float _4689 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _4700 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _2476 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2477 = dot(vec3(_1045, _1046, _1047), vec3(_2469, _2470, _2471));
    float _4711 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2469, _2470, _2471));
    float _4722 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2461 * _2461;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2498 = 0.959999978542327880859375 - _1203;
    float _2500 = 0.959999978542327880859375 - _1204;
    float _2501 = 0.959999978542327880859375 - _1205;
    float _2508 = 1.0 - _2461;
    float _2519 = (0.5 / (((_2476 * ((_2475 * _2508) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2508) + _2461) * _2475))) * _2475;
    float _4733 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2521 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    uint _2535 = _2308 + 9u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _1048) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2348].x + _1124;
    float _2549 = cbLight._m0[_2348].y + _1125;
    float _2550 = cbLight._m0[_2348].z + _1126;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2348].xyz));
    float _4744 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2562 = dot(vec3(_1045, _1046, _1047), vec3(_2555, _2556, _2557));
    float _4755 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2555, _2556, _2557));
    float _4766 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2547 * _2547;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
    float _2588 = 1.0 - _2547;
    float _2598 = (0.5 / (((_2476 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2588) + _2547) * _2561))) * _2561;
    float _4777 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    float _2610 = (((((_2581 * _2498) + _1206) * cbLight._m0[_2535].x) * _2600) * _2331) + ((((cbLight._m0[_2447].x * _2300) * ((_2497 * _2498) + _1206)) * _2521) * _2344);
    float _2611 = (((((_2581 * _2500) + _1208) * cbLight._m0[_2535].y) * _2600) * _2331) + ((((cbLight._m0[_2447].y * _2301) * ((_2497 * _2500) + _1208)) * _2521) * _2344);
    float _2612 = (((((_2581 * _2501) + _1209) * cbLight._m0[_2535].z) * _2600) * _2331) + ((((cbLight._m0[_2447].z * _2302) * ((_2497 * _2501) + _1209)) * _2521) * _2344);
    float _2674;
    float _2676;
    float _2678;
    if (_2384)
    {
        _2674 = _2610;
        _2676 = _2611;
        _2678 = _2612;
    }
    else
    {
        uint _2680 = _2308 + 2u;
        uint _2684 = _2308 + 10u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _1048) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _1124;
        float _2701 = cbLight._m0[_2680].y + _1125;
        float _2702 = cbLight._m0[_2680].z + _1126;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2680].xyz));
        float _4788 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2714 = dot(vec3(_1045, _1046, _1047), vec3(_2707, _2708, _2709));
        float _4799 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4810 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
        float _2740 = 1.0 - _2699;
        float _2750 = (0.5 / (((_2476 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2740) + _2699) * _2713))) * _2713;
        float _4821 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2674 = (((((_2733 * _2498) + _1206) * cbLight._m0[_2684].x) * _2752) * _2753) + _2610;
        _2676 = (((((_2733 * _2500) + _1208) * cbLight._m0[_2684].y) * _2752) * _2753) + _2611;
        _2678 = (((((_2733 * _2501) + _1209) * cbLight._m0[_2684].z) * _2752) * _2753) + _2612;
    }
    float _2788;
    float _2790;
    float _2792;
    if (_2402)
    {
        _2788 = _2674;
        _2790 = _2676;
        _2792 = _2678;
    }
    else
    {
        uint _2799 = _2308 + 3u;
        uint _2803 = _2308 + 11u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _1048) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _1124;
        float _2820 = cbLight._m0[_2799].y + _1125;
        float _2821 = cbLight._m0[_2799].z + _1126;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2799].xyz));
        float _4837 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2833 = dot(vec3(_1045, _1046, _1047), vec3(_2826, _2827, _2828));
        float _4848 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4859 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2852 = exp2(log2(1.0 - (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) * 5.0);
        float _2859 = 1.0 - _2818;
        float _2869 = (0.5 / (((_2476 * ((_2832 * _2859) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2859) + _2818) * _2832))) * _2832;
        float _4870 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2788 = (((((_2852 * _2498) + _1206) * cbLight._m0[_2803].x) * _2871) * _2872) + _2674;
        _2790 = (((((_2852 * _2500) + _1208) * cbLight._m0[_2803].y) * _2871) * _2872) + _2676;
        _2792 = (((((_2852 * _2501) + _1209) * cbLight._m0[_2803].z) * _2871) * _2872) + _2678;
    }
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_2306.y == 0u)
    {
        float _2947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2947;
        float _2949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2947;
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2947;
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.x;
        uint _2974 = uint((float(_2962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1145) / _2963))) + floor(float(uint(cbSceneParam._m0[85u].x * _1144) / _2963)));
        float _2984 = (log2(_2950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2985 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        uint _2988 = uint(isnan(14.0) ? _2985 : (isnan(_2985) ? 14.0 : min(_2985, 14.0)));
        uvec4 _2993 = texelFetch(g_lightClusterGridBuffer, int(((_2988 << 2u) + (_2974 << 6u)) >> 2u));
        uint _2994 = _2993.x;
        uint _2995 = _2962.z;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((((1u << ((_2995 >> 4u) & 15u)) + 4294967295u) & _2994) == 0u) || ((_2995 & 240u) == 0u))
        {
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
        }
        else
        {
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            uint _3254 = 0u;
            uint _3263;
            bool _3264;
            for (;;)
            {
                _3263 = texelFetch(g_lightClassification, int((((_2988 << 5u) + (_2974 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                _3264 = _3263 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3264)
                {
                    frontier_phi_66_pred = _3248;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                else
                {
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    uint _3399;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3263;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    for (;;)
                    {
                        uint _3403 = uint(findLSB(_3399)) + (_3254 << 5u);
                        uint _3400 = (_3399 + 4294967295u) & _3399;
                        uint _3405 = _3403 * 48u;
                        vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3425 = (_3403 * 48u) + 4u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3444 = (_3403 * 48u) + 8u;
                        vec3 _3455 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x));
                        float _3459 = _3419.x - _2948;
                        float _3460 = _3419.y - _2949;
                        float _3461 = _3419.z - _2950;
                        float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                        float _3465 = inversesqrt(_3462);
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3469 = dot(vec3(_1163, _1166, _1169), vec3(_3466, _3467, _3468));
                        float _3474 = 1.0 - (_3462 * _3419.w);
                        float _4896 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3476 = sqrt(_3462) * _3438.w;
                        float _3479 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3469) + _3480;
                        float _3486 = _3476 * _3476;
                        float _3490 = ((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3475) / ((_3486 * 0.699999988079071044921875) + 1.0);
                        float _3494 = (-0.0) - _2948;
                        float _3495 = (-0.0) - _2949;
                        float _3496 = (-0.0) - _2950;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3511 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                        float _3512 = 1.0 - _1238;
                        float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                        float _3520 = _3519 * _3519;
                        float _3521 = _3520 * _3520;
                        float _3522 = _3501 + _3466;
                        float _3523 = _3502 + _3467;
                        float _3524 = _3503 + _3468;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3532 = dot(vec3(_1163, _1166, _1169), vec3(_3501, _3502, _3503));
                        float _4912 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3536 = dot(vec3(_1163, _1166, _1169), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                        float _4923 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                        float _3544 = _3479 * _3520;
                        float _3545 = _3544 * _3544;
                        float _3548 = ((1.0 - _3545) * _3469) + _3545;
                        float _4934 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3549 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3550 = 1.0 - _3520;
                        float _3560 = (0.5 / (((_3549 * ((_3535 * _3550) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3520) * _3535))) * _3549;
                        float _4945 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3571 = (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3543 * _3543) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125))) * _3475;
                        _3323 = (_3490 * _3438.x) + _3396;
                        _3324 = (_3490 * _3438.y) + _3397;
                        _3325 = (_3490 * _3438.z) + _3398;
                        _3320 = (_3571 * _3455.x) + _3393;
                        _3321 = (_3571 * _3455.y) + _3394;
                        _3322 = (_3571 * _3455.z) + _3395;
                        if (_3400 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3400;
                        }
                    }
                    frontier_phi_66_pred = _3320;
                    frontier_phi_66_pred_1 = _3325;
                    frontier_phi_66_pred_2 = _3324;
                    frontier_phi_66_pred_3 = _3323;
                    frontier_phi_66_pred_4 = _3322;
                    frontier_phi_66_pred_5 = _3321;
                }
                _3096 = frontier_phi_66_pred;
                _3106 = frontier_phi_66_pred_1;
                _3104 = frontier_phi_66_pred_2;
                _3102 = frontier_phi_66_pred_3;
                _3100 = frontier_phi_66_pred_4;
                _3098 = frontier_phi_66_pred_5;
                uint _3255 = _3254 + 1u;
                if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3248 = _3096;
                    _3249 = _3098;
                    _3250 = _3100;
                    _3251 = _3102;
                    _3252 = _3104;
                    _3253 = _3106;
                    _3254 = _3255;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
        }
        uvec4 _3109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3110 = _3109.z;
        uint _3112 = (_3110 >> 8u) & 15u;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        if (((4294967295u << _3112) & _2994) == 0u)
        {
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
            _3222 = _3101;
            _3224 = _3103;
            _3226 = _3105;
        }
        else
        {
            float _3241 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
            float _3242 = _3241 * _2948;
            float _3243 = _3241 * _2949;
            float _3244 = _3241 * _2950;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3112 < ((_3110 >> 12u) & 15u))
            {
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3376 = _3095;
                float _3377 = _3097;
                float _3378 = _3099;
                float _3379 = _3101;
                float _3380 = _3103;
                float _3381 = _3105;
                uint _3382 = _3112;
                uint _3391;
                bool _3392;
                for (;;)
                {
                    _3391 = texelFetch(g_lightClassification, int((((_2988 << 5u) + (_2974 << 9u)) + (_3382 << 2u)) >> 2u)).x;
                    _3392 = _3391 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3392)
                    {
                        frontier_phi_77_pred = _3381;
                        frontier_phi_77_pred_1 = _3380;
                        frontier_phi_77_pred_2 = _3379;
                        frontier_phi_77_pred_3 = _3378;
                        frontier_phi_77_pred_4 = _3377;
                        frontier_phi_77_pred_5 = _3376;
                    }
                    else
                    {
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3598 = _3376;
                        float _3599 = _3377;
                        float _3600 = _3378;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        float _3603 = _3381;
                        uint _3604 = _3391;
                        uint _3605;
                        vec4 _3630;
                        float _3631;
                        vec4 _3646;
                        vec3 _3658;
                        vec4 _3673;
                        vec4 _3688;
                        float _3734;
                        bool _3735;
                        for (;;)
                        {
                            uint _3615 = ((_3382 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3604));
                            _3605 = (_3604 + 4294967295u) & _3604;
                            uint _3617 = _3615 * 40u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3631 = _3630.w;
                            uint _3633 = (_3615 * 40u) + 4u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3615 * 40u) + 8u;
                            _3658 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x));
                            uint _3660 = (_3615 * 40u) + 16u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3615 * 40u) + 20u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3615 * 40u) + 24u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3709 = (_3615 * 40u) + 28u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3734 = fma(_2950, _3722.z, fma(_2949, _3722.y, _3722.x * _2948)) + _3722.w;
                            _3735 = !((fma(_2950, _3703.z, fma(_2949, _3703.y, _3703.x * _2948)) + _3703.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3735)
                            {
                                float _3762 = _3630.x - _2948;
                                float _3763 = _3630.y - _2949;
                                float _3764 = _3630.z - _2950;
                                float _3765 = dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764));
                                float _3768 = inversesqrt(_3765);
                                float _3769 = _3768 * _3762;
                                float _3770 = _3768 * _3763;
                                float _3771 = _3768 * _3764;
                                float _3775 = 1.0 - (_3765 / (_3631 * _3631));
                                float _4956 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3780 = sqrt(_3765) * _3646.w;
                                float _3782 = 1.39999997615814208984375 / (_3780 + 1.39999997615814208984375);
                                float _3783 = _3782 * _3782;
                                float _3786 = ((1.0 - _3783) * dot(vec3(_3769, _3770, _3771), vec3(_1163, _1166, _1169))) + _3783;
                                float _3789 = _3780 * _3780;
                                float _3793 = (fma(_2950, _3673.z, fma(_2949, _3673.y, _3673.x * _2948)) + _3673.w) / _3734;
                                float _3794 = (fma(_2950, _3688.z, fma(_2949, _3688.y, _3688.x * _2948)) + _3688.w) / _3734;
                                float _3798 = 1.0 - dot(vec2(_3793, _3794), vec2(_3793, _3794));
                                float _4972 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3800 = _3799 * (((isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0))) * _3776) / ((_3789 * 0.699999988079071044921875) + 1.0));
                                float _3812 = exp2(log2(1.0 / ((_3789 * 3.5) + 5.0)) * 0.25);
                                float _3813 = 1.0 - _1238;
                                float _3820 = sqrt(1.0 - ((1.0 - (_3813 * _3813)) * (1.0 - (_3812 * _3812))));
                                float _3821 = _3820 * _3820;
                                float _3822 = _3821 * _3821;
                                float _3823 = _3769 - _3242;
                                float _3824 = _3770 - _3243;
                                float _3825 = _3771 - _3244;
                                float _3829 = inversesqrt(dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825)));
                                float _3833 = dot(vec3(_1163, _1166, _1169), vec3((-0.0) - _3242, (-0.0) - _3243, (-0.0) - _3244));
                                float _4983 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3836 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3837 = dot(vec3(_1163, _1166, _1169), vec3(_3829 * _3823, _3829 * _3824, _3829 * _3825));
                                float _4994 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3844 = ((_3840 * _3840) * (_3822 + (-1.0))) + 1.0;
                                float _3845 = _3782 * _3821;
                                float _3846 = _3845 * _3845;
                                float _3852 = ((1.0 - _3846) * dot(vec3(_1163, _1166, _1169), vec3(_3769, _3770, _3771))) + _3846;
                                float _5005 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3854 = 1.0 - _3821;
                                float _3864 = (0.5 / (((_3853 * ((_3836 * _3854) + _3821)) + 9.9999999392252902907785028219223e-09) + (((_3853 * _3854) + _3821) * _3836))) * _3853;
                                float _5016 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3874 = (_3799 * _3776) * (((_3822 * 3.1415927410125732421875) * (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) / ((_3844 * _3844) * ((_3789 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3800 * _3646.y;
                                frontier_phi_83_pred_1 = _3800 * _3646.x;
                                frontier_phi_83_pred_2 = _3874 * _3658.z;
                                frontier_phi_83_pred_3 = _3874 * _3658.y;
                                frontier_phi_83_pred_4 = _3874 * _3658.x;
                                frontier_phi_83_pred_5 = _3800 * _3646.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3882 = frontier_phi_83_pred;
                            _3881 = frontier_phi_83_pred_1;
                            _3880 = frontier_phi_83_pred_2;
                            _3879 = frontier_phi_83_pred_3;
                            _3878 = frontier_phi_83_pred_4;
                            _3883 = frontier_phi_83_pred_5;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            if (_3605 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3605;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3590;
                        frontier_phi_77_pred_1 = _3589;
                        frontier_phi_77_pred_2 = _3588;
                        frontier_phi_77_pred_3 = _3587;
                        frontier_phi_77_pred_4 = _3586;
                        frontier_phi_77_pred_5 = _3585;
                    }
                    _3227 = frontier_phi_77_pred;
                    _3225 = frontier_phi_77_pred_1;
                    _3223 = frontier_phi_77_pred_2;
                    _3221 = frontier_phi_77_pred_3;
                    _3219 = frontier_phi_77_pred_4;
                    _3217 = frontier_phi_77_pred_5;
                    uint _3383 = _3382 + 1u;
                    if (_3383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3376 = _3217;
                        _3377 = _3219;
                        _3378 = _3221;
                        _3379 = _3223;
                        _3380 = _3225;
                        _3381 = _3227;
                        _3382 = _3383;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3221;
                frontier_phi_58_59_ladder_1 = _3227;
                frontier_phi_58_59_ladder_2 = _3225;
                frontier_phi_58_59_ladder_3 = _3223;
                frontier_phi_58_59_ladder_4 = _3219;
                frontier_phi_58_59_ladder_5 = _3217;
            }
            else
            {
                frontier_phi_58_59_ladder = _3099;
                frontier_phi_58_59_ladder_1 = _3105;
                frontier_phi_58_59_ladder_2 = _3103;
                frontier_phi_58_59_ladder_3 = _3101;
                frontier_phi_58_59_ladder_4 = _3097;
                frontier_phi_58_59_ladder_5 = _3095;
            }
            _3216 = frontier_phi_58_59_ladder_5;
            _3218 = frontier_phi_58_59_ladder_4;
            _3220 = frontier_phi_58_59_ladder;
            _3222 = frontier_phi_58_59_ladder_3;
            _3224 = frontier_phi_58_59_ladder_2;
            _3226 = frontier_phi_58_59_ladder_1;
        }
        float _3231 = isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0));
        _3007 = (_3231 * _3222) + _2440;
        _3009 = (_3231 * _3224) + _2442;
        _3011 = (_3231 * _3226) + _2444;
        _3013 = ((_3216 * _1206) * _3231) + _2788;
        _3015 = ((_3218 * _1208) * _3231) + _2790;
        _3017 = ((_3220 * _1209) * _3231) + _2792;
    }
    else
    {
        _3007 = _2440;
        _3009 = _2442;
        _3011 = _2444;
        _3013 = _2788;
        _3015 = _2790;
        _3017 = _2792;
    }
    float _5032 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _5043 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _5054 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _3034 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3007 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1222))) + ((_3013 + ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    float _3035 = ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3009 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1222))) + ((_3015 + ((isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    float _3036 = ((isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_3011 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1222))) + ((_3017 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    uint _3037 = _275 + 6u;
    float _3045 = _1144 / cbSceneParam._m0[86u].x;
    float _3046 = _1145 / cbSceneParam._m0[86u].y;
    vec4 _3060 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, (log2((isnan(cbSceneParam._m0[77u].w) ? _1067 : (isnan(_1067) ? cbSceneParam._m0[77u].w : min(_1067, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3062 = _3060.x;
    float _3063 = _3060.y;
    float _3064 = _3060.z;
    float _3065 = _3060.w;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    if (_1067 > cbSceneParam._m0[78u].w)
    {
        float _3120 = isnan(_1067) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1067 : min(cbSceneParam._m0[80u].w, _1067));
        float _3121 = _3120 / _1067;
        float _3132 = _3121 * _1117;
        float _3133 = _1118 * _3121;
        float _3134 = (-0.0) - _3133;
        float _3136 = _3121 * _1119;
        float _3138 = (cbSceneParam._m0[77u].w * _3134) / _3120;
        float _3139 = _3138 + cbSceneParam._m0[79u].w;
        float _3140 = cbSceneParam._m0[79u].w - _3133;
        float _3146 = sqrt(((_3132 * _3132) + (_3133 * _3133)) + (_3136 * _3136));
        float _3149 = (1.0 - (cbSceneParam._m0[77u].w / _3120)) * _3146;
        float _3154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3333;
        if (abs((_3134 - _3138) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3333 = ((((_3139 > 0.0) ? exp2(_3154 * _3139) : (2.0 - exp2(_3156 * _3139))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3149;
        }
        else
        {
            float _3277 = 1.0 / cbSceneParam._m0[80u].x;
            float _3278 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : max(_3139, _3140));
            float _3279 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : min(_3139, _3140));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            _3333 = ((abs(_3146 / _3134) * cbSceneParam._m0[80u].y) * ((((_3288 - _3289) * 2.0) - ((exp2(_3154 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0)))) - exp2(_3154 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))))) * _3277)) - ((exp2(_3156 * _3288) - exp2(_3156 * _3289)) * _3277))) + (_3149 * cbSceneParam._m0[80u].z);
        }
        vec4 _3335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, 1.0), 0.0);
        float _3344 = exp2((_3333 * (-1.44269502162933349609375)) * (1.0 - _3335.w));
        float _3345 = log2(_3344);
        float _3361 = log2(_3065);
        _3158 = (exp2(_3361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].x)) * _3335.x) / cbSceneParam._m0[78u].x)) + _3062;
        _3160 = (exp2(_3361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].y)) * _3335.y) / cbSceneParam._m0[78u].y)) + _3063;
        _3162 = (exp2(_3361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].z)) * _3335.z) / cbSceneParam._m0[78u].z)) + _3064;
        _3164 = _3344 * _3065;
    }
    else
    {
        _3158 = _3062;
        _3160 = _3063;
        _3162 = _3064;
        _3164 = _3065;
    }
    bool _3371;
    vec4 _3174;
    vec4 _3196;
    float _3198;
    float _3202;
    float _3203;
    float _3204;
    float _3205;
    bool _3215;
    for (;;)
    {
        _3174 = cbMatDynParam._m0[0u];
        float _3176 = roundEven(_3174.y);
        bool _3177 = _3176 == 3.0;
        float _3178 = log2(_3164);
        float _3185 = exp2(_3178 * cbSceneParam._m0[78u].x) * _3034;
        float _3186 = exp2(_3178 * cbSceneParam._m0[78u].y) * _3035;
        float _3187 = exp2(_3178 * cbSceneParam._m0[78u].z) * _3036;
        float _3194 = _1133 + (-0.5);
        _3196 = cbMtdParam._m0[1u];
        _3198 = _3196.y * _3194;
        float _3201 = (_3176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3202 = _3201 * (_3177 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3158)));
        _3203 = _3201 * (_3177 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3160)));
        _3204 = _3201 * (_3177 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3162)));
        _3205 = _3194 * 0.999000012874603271484375;
        _3215 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3215)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3205) < 0.5)
            {
                _3371 = true;
                break;
            }
        }
        uint _3312 = _1182 + uint(_3174.w);
        if ((cbInstanceData._m0[_3312].w < 1.0) && ((cbInstanceData._m0[_3312].w + _3205) < 0.5))
        {
            _3371 = true;
            break;
        }
        if ((_3198 + 1.0) < _3196.x)
        {
            _3371 = true;
            break;
        }
        _3371 = false;
        break;
    }
    float _3576;
    if (_3371)
    {
        discard_state = true;
        _3576 = 0.0;
    }
    else
    {
        _3576 = cbInstanceData._m0[_3037].w;
    }
    SV_Target.x = _3202;
    SV_Target.y = _3203;
    SV_Target.z = _3204;
    SV_Target.w = _3576;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3037].w;
    discard_exit();
}


