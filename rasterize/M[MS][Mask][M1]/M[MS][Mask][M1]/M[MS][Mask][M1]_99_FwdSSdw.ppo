#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1609;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3956 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3967 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3978 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3989 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _491 = (_484 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _492 = (_484 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _493 = (_484 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4000 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _567 = (_349.x * cbMtdParam._m0[9u].x) * ((_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491);
    float _568 = (_349.y * cbMtdParam._m0[9u].y) * ((_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492);
    float _569 = (_349.z * cbMtdParam._m0[9u].z) * ((_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493);
    float _573 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _567;
    float _576 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _568;
    float _579 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _569;
    float _587 = (((_567 - _573) * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) + _573) * 4.55000019073486328125;
    float _589 = (((_568 - _576) * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) + _576) * 4.55000019073486328125;
    float _591 = (((_569 - _579) * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) + _579) * 4.55000019073486328125;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _675 = _671.z;
    float _682 = ((_654.x - _673) * _484) + _673;
    float _683 = ((_654.y - _674) * _484) + _674;
    float _684 = ((_654.z - _675) * _484) + _675;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _709 = ((_696.z - _684) * _557) + _684;
    float _712 = ((((_696.x - _682) * _557) + _682) * 2.0) + (-1.0);
    float _713 = ((((_696.y - _683) * _557) + _683) * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _4011 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _719 = sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _749 = (_712 + ((((_629.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_737.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _750 = (_713 + ((((_629.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_737.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _753 = fma(_719, _262, fma(_750, _269, _749 * _255));
    float _756 = fma(_719, _263, fma(_750, _270, _749 * _256));
    float _759 = fma(_719, _264, fma(_750, _271, _749 * _257));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _792 = _790.x;
    float _793 = 1.0 - _792;
    float _802 = (cbMtdParam._m0[19u].x + dot(vec4(_763 * _753, _763 * _756, _763 * _759, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_792 - _793) * cbMtdParam._m0[24u].z) + _793) * cbMtdParam._m0[21u].z);
    float _4022 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _803 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _805 = (-0.0) - cbMtdParam._m0[24u].x;
    float _807 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
    float _815 = _803 - ((_803 * TEXCOORD_8.x) * _808);
    float _816 = _803 - ((_803 * TEXCOORD_8.y) * _808);
    float _817 = _803 - ((_803 * TEXCOORD_8.z) * _808);
    float _824 = (_815 * ((_610.x * cbMtdParam._m0[18u].x) - _587)) + _587;
    float _825 = (_816 * ((_610.y * cbMtdParam._m0[18u].y) - _589)) + _589;
    float _826 = (_817 * ((_610.z * cbMtdParam._m0[18u].z) - _591)) + _591;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _840 = _838.x;
    float _841 = 1.0 - _840;
    float _867 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_840 - _841) * cbMtdParam._m0[24u].w) + _841) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4043 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _868 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _876 = ((((cbMtdParam._m0[10u].x - _824) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _868) + _824;
    float _877 = ((((cbMtdParam._m0[10u].y - _825) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _868) + _825;
    float _878 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _826)) * _868) + _826;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _906 = _904.x;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _906) * _484) + _906;
    float _940 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _923) * _557) + _923;
    float _944 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _940) * cbMtdParam._m0[19u].z) + _940;
    float _946 = _944 - (_944 * _815);
    float _948 = _946 - (_946 * _868);
    float _953 = (((_629.z - _709) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _709;
    float _957 = ((_737.z - _953) * cbMtdParam._m0[19u].w) + _953;
    vec4 _971 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _978 = (_971.x * 2.0) + (-1.0);
    float _979 = (_971.y * 2.0) + (-1.0);
    float _980 = dot(vec2(_978, _979), vec2(_978, _979));
    float _4054 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _988 = ((_971.z - _957) * _815) + _957;
    float _991 = ((cbMtdParam._m0[23u].x - _988) * _868) + _988;
    vec4 _1014 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1020 = (_1014.x * 2.0) + (-1.0);
    float _1021 = (_1014.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4065 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1037 = ((sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) - _719) * _817) + _719;
    float _1040 = (((_978 - _749) * _815) + _749) + (cbMtdParam._m0[21u].x * _749);
    float _1041 = (((_979 - _750) * _816) + _750) + (cbMtdParam._m0[21u].x * _750);
    float _1052 = (((_1020 - _1040) + (_1040 * cbMtdParam._m0[22u].z)) * _868) + _1040;
    float _1053 = (((_1021 - _1041) + (_1041 * cbMtdParam._m0[22u].z)) * _868) + _1041;
    float _1054 = (_868 * (sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) - _1037)) + _1037;
    float _1056 = cbMtdParam._m0[22u].x + _737.w;
    float _1059 = fma(_1054, _262, fma(_1053, _269, _1052 * _255));
    float _1062 = fma(_1054, _263, fma(_1053, _270, _1052 * _256));
    float _1065 = fma(_1054, _264, fma(_1053, _271, _1052 * _257));
    float _1069 = inversesqrt(dot(vec3(_1059, _1062, _1065), vec3(_1059, _1062, _1065)));
    float _1070 = _1069 * _1059;
    float _1071 = _1069 * _1062;
    float _1072 = _1069 * _1065;
    float _4076 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1073 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4098 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4109 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4120 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4131 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _1078 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _1092 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1142 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1132);
    float _1143 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1132);
    float _1144 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1132);
    float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
    float _1149 = _1142 * _1148;
    float _1150 = _1143 * _1148;
    float _1151 = _1144 * _1148;
    float _1157 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1158 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1176 = fma(_1072, cbSceneParam._m0[5u].z, fma(_1071, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1070));
    float _1179 = fma(_1072, cbSceneParam._m0[6u].z, fma(_1071, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1070));
    float _1182 = fma(_1072, cbSceneParam._m0[7u].z, fma(_1071, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1070));
    uint _1196 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1202 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_1196].x;
    float _1203 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_1196].y;
    float _1204 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_1196].z;
    float _4142 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1206 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1207 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1208 = 1.0 - _1078;
    float _1209 = _1205 * _1208;
    float _1210 = _1206 * _1208;
    float _1211 = _1207 * _1208;
    float _1216 = (_1205 + (-0.039999999105930328369140625)) * _1078;
    float _1217 = (_1206 + (-0.039999999105930328369140625)) * _1078;
    float _1218 = (_1207 + (-0.039999999105930328369140625)) * _1078;
    float _1219 = _1216 + 0.039999999105930328369140625;
    float _1221 = _1217 + 0.039999999105930328369140625;
    float _1222 = _1218 + 0.039999999105930328369140625;
    vec4 _1231 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1157, cbSceneParam._m0[86u].y * _1158));
    float _1235 = ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * TEXCOORD_5.w) * _1231.x;
    float _1236 = dot(vec3(_1070, _1071, _1072), vec3(_1149, _1150, _1151));
    float _1239 = _1236 * 2.0;
    float _1243 = (_1239 * _1070) - _1149;
    float _1244 = (_1239 * _1071) - _1150;
    float _1245 = (_1239 * _1072) - _1151;
    float _1249 = abs(dot(vec3(_1149, _1150, _1151), vec3(_1070, _1071, _1072)));
    float _4175 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _1251 = sqrt(_1073);
    float _1264 = exp2((_1251 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1251 * 3.0));
    float _1270 = (1.0 - _1264) * ((_1251 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1271 = _1264 * _1251;
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1303 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1608;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1333 = fma(_1307, cbModelParam._m0[26u].z, fma(_1303, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1299));
        float _1337 = fma(_1307, cbModelParam._m0[27u].z, fma(_1303, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1299));
        float _1341 = fma(_1307, cbModelParam._m0[28u].z, fma(_1303, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1299));
        float _1366 = _1299 + _1070;
        float _1367 = _1303 + _1071;
        float _1368 = _1307 + _1072;
        float _1378 = fma(_1368, cbModelParam._m0[26u].z, fma(_1367, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1366)) - _1333;
        float _1379 = fma(_1368, cbModelParam._m0[27u].z, fma(_1367, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1366)) - _1337;
        float _1380 = fma(_1368, cbModelParam._m0[28u].z, fma(_1367, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1366)) - _1341;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1333 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1337 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[34u].z) + ((((((_1341 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1436 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1402.x + (-0.5));
        float _1438 = _1436 * (_1402.y + (-0.5));
        float _1439 = _1436 * (_1402.z + (-0.5));
        float _1446 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1409.x + (-0.5));
        float _1448 = _1446 * (_1409.y + (-0.5));
        float _1449 = _1446 * (_1409.z + (-0.5));
        float _1456 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1416.x + (-0.5));
        float _1458 = _1456 * (_1416.y + (-0.5));
        float _1459 = _1456 * (_1416.z + (-0.5));
        float _1466 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1423.x + (-0.5));
        float _1468 = _1466 * (_1423.y + (-0.5));
        float _1469 = _1466 * (_1423.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1490 = (dot(vec3(_1070, _1071, _1072), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1500 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4223 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1502 + 1.0))) + _1507) * _1470;
        float _1517 = _1438 * 0.5;
        float _1518 = _1448 * 0.5;
        float _1519 = _1458 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_1070, _1071, _1072), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4256 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1544 + 1.0))) + _1549) * _1471;
        float _1559 = _1439 * 0.5;
        float _1560 = _1449 * 0.5;
        float _1561 = _1459 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1070, _1071, _1072), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4289 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1586 + 1.0))) + _1591) * _1472;
        _1608 = _1439;
        _1610 = _1438;
        _1611 = _1437;
        _1612 = _1449;
        _1613 = _1448;
        _1614 = _1447;
        _1615 = _1459;
        _1616 = _1458;
        _1617 = _1457;
        _1618 = _1472;
        _1619 = _1471;
        _1620 = _1470;
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1622 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1623 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1609;
        _1610 = _1609;
        _1611 = _1609;
        _1612 = _1609;
        _1613 = _1609;
        _1614 = _1609;
        _1615 = _1609;
        _1616 = _1609;
        _1617 = _1609;
        _1618 = _1609;
        _1619 = _1609;
        _1620 = _1609;
        _1621 = 0.0;
        _1622 = 0.0;
        _1623 = 0.0;
    }
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1647 = fma(_1307, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1299));
        float _1651 = fma(_1307, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1299));
        float _1655 = fma(_1307, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1299));
        float _1678 = _1299 + _1070;
        float _1679 = _1303 + _1071;
        float _1680 = _1307 + _1072;
        float _1690 = fma(_1680, cbModelParam._m0[30u].z, fma(_1679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1678)) - _1647;
        float _1691 = fma(_1680, cbModelParam._m0[31u].z, fma(_1679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1678)) - _1651;
        float _1692 = fma(_1680, cbModelParam._m0[32u].z, fma(_1679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1678)) - _1655;
        float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
        float _1709 = ((_1696 * _1690) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1647 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1710 = ((_1696 * _1691) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1651 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1711 = ((_1696 * _1692) / cbModelParam._m0[35u].z) + ((((((_1655 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        float _1746 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1713.x + (-0.5));
        float _1748 = _1746 * (_1713.y + (-0.5));
        float _1749 = _1746 * (_1713.z + (-0.5));
        float _1756 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1720.x + (-0.5));
        float _1758 = _1756 * (_1720.y + (-0.5));
        float _1759 = _1756 * (_1720.z + (-0.5));
        float _1766 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1727.x + (-0.5));
        float _1768 = _1766 * (_1727.y + (-0.5));
        float _1769 = _1766 * (_1727.z + (-0.5));
        float _1776 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1734.x + (-0.5));
        float _1778 = _1776 * (_1734.y + (-0.5));
        float _1779 = _1776 * (_1734.z + (-0.5));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = _1747 * 0.5;
        float _1784 = _1757 * 0.5;
        float _1785 = _1767 * 0.5;
        float _1786 = dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785));
        float _1791 = (_1786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1786);
        float _1799 = (dot(vec3(_1070, _1071, _1072), vec3(_1791 * _1783, _1791 * _1784, _1791 * _1785)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1808 = sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1810 = _1809 * 2.0;
        float _1814 = (1.0 - _1809) / (_1809 + 1.0);
        float _4352 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1824 = ((((1.0 - _1815) * (_1810 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1810 + 1.0))) + _1815) * _1780;
        float _1825 = _1748 * 0.5;
        float _1826 = _1758 * 0.5;
        float _1827 = _1768 * 0.5;
        float _1828 = dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827));
        float _1833 = (_1828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1828);
        float _1841 = (dot(vec3(_1070, _1071, _1072), vec3(_1833 * _1825, _1833 * _1826, _1833 * _1827)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827)) / (_1781 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1852 = _1851 * 2.0;
        float _1856 = (1.0 - _1851) / (_1851 + 1.0);
        float _4385 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1866 = ((((1.0 - _1857) * (_1852 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1852 + 1.0))) + _1857) * _1781;
        float _1867 = _1749 * 0.5;
        float _1868 = _1759 * 0.5;
        float _1869 = _1769 * 0.5;
        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
        float _1875 = (_1870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1870);
        float _1883 = (dot(vec3(_1070, _1071, _1072), vec3(_1875 * _1867, _1875 * _1868, _1875 * _1869)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1892 = sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1894 = _1893 * 2.0;
        float _1898 = (1.0 - _1893) / (_1893 + 1.0);
        float _4418 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1908 = ((((1.0 - _1899) * (_1894 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1894 + 1.0))) + _1899) * _1782;
        _1916 = _1749;
        _1917 = _1748;
        _1918 = _1747;
        _1919 = _1759;
        _1920 = _1758;
        _1921 = _1757;
        _1922 = _1769;
        _1923 = _1768;
        _1924 = _1767;
        _1925 = _1782;
        _1926 = _1781;
        _1927 = _1780;
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)));
        _1929 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)));
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)));
    }
    else
    {
        _1916 = _1609;
        _1917 = _1609;
        _1918 = _1609;
        _1919 = _1609;
        _1920 = _1609;
        _1921 = _1609;
        _1922 = _1609;
        _1923 = _1609;
        _1924 = _1609;
        _1925 = _1609;
        _1926 = _1609;
        _1927 = _1609;
        _1928 = 0.0;
        _1929 = 0.0;
        _1930 = 0.0;
    }
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1621)) + _1621;
    float _1941 = (cbModelParam._m0[1u].x * (_1929 - _1622)) + _1622;
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1623)) + _1623;
    float _1963 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1940));
    float _1984 = _1243 * 0.5;
    float _1985 = _1244 * 0.5;
    float _1986 = _1245 * 0.5;
    float _1987 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _1990 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1917, _1920, _1923, _1926));
    float _1993 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _2027;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2000 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1608, _1612, _1615, _1618));
        float _2004 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1610, _1613, _1616, _1619));
        float _2008 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1611, _1614, _1617, _1620));
        float _2015 = dot(vec4(cbModelParam._m0[39u]), vec4(_1984, _1985, _1986, 1.0));
        _2027 = dot(vec3(isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2015) ? 0.0 : (isnan(0.0) ? _2015 : max(0.0, _2015))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2027 = 1.0;
    }
    float _2038;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2029 = dot(vec4(cbModelParam._m0[40u]), vec4(_1984, _1985, _1986, 1.0));
        _2038 = dot(vec3(isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2029) ? 0.0 : (isnan(0.0) ? _2029 : max(0.0, _2029))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2038 = 1.0;
    }
    float _2042 = (_2038 * cbModelParam._m0[1u].x) + (_2027 * (1.0 - cbModelParam._m0[1u].x));
    float _2052 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1073);
    float _2053 = isnan(_2052) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2052 : min(cbModelParam._m0[25u].z, _2052));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2100 = fma(_1307, cbModelParam._m0[13u].z, fma(_1303, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1299)) + cbModelParam._m0[13u].w;
        float _2104 = fma(_1307, cbModelParam._m0[14u].z, fma(_1303, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1299)) + cbModelParam._m0[14u].w;
        float _2108 = fma(_1307, cbModelParam._m0[15u].z, fma(_1303, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1299)) + cbModelParam._m0[15u].w;
        float _2111 = fma(_1245, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1243));
        float _2114 = fma(_1245, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1243));
        float _2117 = fma(_1245, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1243));
        float _2145;
        if (_2111 > 0.0)
        {
            _2145 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2145 = frontier_phi_14_12_ladder;
        }
        float _2368;
        if (_2114 > 0.0)
        {
            _2368 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2368 = frontier_phi_23_19_ladder;
        }
        float _2625;
        if (_2117 > 0.0)
        {
            _2625 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2625 = frontier_phi_35_30_ladder;
        }
        float _2627 = isnan(_2368) ? _2145 : (isnan(_2145) ? _2368 : min(_2145, _2368));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _2111) + _2100;
        float _2633 = (_2628 * _2114) + _2104;
        float _2634 = (_2628 * _2117) + _2108;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2635;
        float _2639 = _2635 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 > _2639) || ((_2633 < _2637) || ((_2632 < _2637) || (_2632 > _2639))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2634, cbModelParam._m0[9u].z, fma(_2633, cbModelParam._m0[9u].y, _2632 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2634, cbModelParam._m0[10u].z, fma(_2633, cbModelParam._m0[10u].y, _2632 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2634, cbModelParam._m0[11u].z, fma(_2633, cbModelParam._m0[11u].y, _2632 * cbModelParam._m0[11u].x))), _2053);
            frontier_phi_13_35_ladder = _2762.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2762.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2762.x * cbModelParam._m0[1u].y;
        }
        _2133 = frontier_phi_13_35_ladder_2;
        _2135 = frontier_phi_13_35_ladder_1;
        _2137 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1243, _1244, _1245), _2053);
        _2133 = _2121.x * cbModelParam._m0[1u].y;
        _2135 = _2121.y * cbModelParam._m0[1u].y;
        _2137 = _2121.z * cbModelParam._m0[1u].y;
    }
    float _2141 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1073);
    float _2142 = isnan(_2141) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2141 : min(cbModelParam._m0[25u].w, _2141));
    float _2231;
    float _2233;
    float _2235;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2195 = fma(_1307, cbModelParam._m0[21u].z, fma(_1303, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1299)) + cbModelParam._m0[21u].w;
        float _2199 = fma(_1307, cbModelParam._m0[22u].z, fma(_1303, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1299)) + cbModelParam._m0[22u].w;
        float _2203 = fma(_1307, cbModelParam._m0[23u].z, fma(_1303, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1299)) + cbModelParam._m0[23u].w;
        float _2206 = fma(_1245, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1243));
        float _2209 = fma(_1245, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1243));
        float _2212 = fma(_1245, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1243));
        float _2373;
        if (_2206 > 0.0)
        {
            _2373 = abs((1.0 - _2195) / _2206);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2195 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2373 = frontier_phi_25_21_ladder;
        }
        float _2652;
        if (_2209 > 0.0)
        {
            _2652 = abs((1.0 - _2199) / _2209);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2199 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2652 = frontier_phi_37_32_ladder;
        }
        float _2865;
        if (_2212 > 0.0)
        {
            _2865 = abs((1.0 - _2203) / _2212);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2203 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2865 = frontier_phi_46_43_ladder;
        }
        float _2867 = isnan(_2652) ? _2373 : (isnan(_2373) ? _2652 : min(_2373, _2652));
        float _2868 = isnan(_2865) ? _2867 : (isnan(_2867) ? _2865 : min(_2867, _2865));
        float _2872 = (_2868 * _2206) + _2195;
        float _2873 = (_2868 * _2209) + _2199;
        float _2874 = (_2868 * _2212) + _2203;
        float _2875 = _2868 * 9.9999997473787516355514526367188e-05;
        float _2876 = (-1.0) - _2875;
        float _2878 = _2875 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2874 > _2878) || ((_2874 < _2876) || ((_2873 > _2878) || ((_2873 < _2876) || ((_2872 < _2876) || (_2872 > _2878))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2874, cbModelParam._m0[17u].z, fma(_2873, cbModelParam._m0[17u].y, _2872 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2874, cbModelParam._m0[18u].z, fma(_2873, cbModelParam._m0[18u].y, _2872 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2874, cbModelParam._m0[19u].z, fma(_2873, cbModelParam._m0[19u].y, _2872 * cbModelParam._m0[19u].x))), _2142);
            frontier_phi_22_46_ladder = _3073.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3073.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3073.x * cbModelParam._m0[1u].z;
        }
        _2231 = frontier_phi_22_46_ladder_2;
        _2233 = frontier_phi_22_46_ladder_1;
        _2235 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1243, _1244, _1245), _2142);
        _2231 = _2215.x * cbModelParam._m0[1u].z;
        _2233 = _2215.y * cbModelParam._m0[1u].z;
        _2235 = _2215.z * cbModelParam._m0[1u].z;
    }
    float _2248 = (((_1270 * _1219) + _1271) * _1235) * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2250 = (((_1270 * _1221) + _1271) * _1235) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2252 = (((_1270 * _1222) + _1271) * _1235) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2255 = fma(_2252, cbSceneParam._m0[89u].z, fma(_2250, cbSceneParam._m0[89u].y, _2248 * cbSceneParam._m0[89u].x));
    float _2258 = fma(_2252, cbSceneParam._m0[90u].z, fma(_2250, cbSceneParam._m0[90u].y, _2248 * cbSceneParam._m0[90u].x));
    float _2261 = fma(_2252, cbSceneParam._m0[91u].z, fma(_2250, cbSceneParam._m0[91u].y, _2248 * cbSceneParam._m0[91u].x));
    vec4 _2269 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1157, _1158));
    float _2271 = _2269.w;
    float _2283 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2271);
    float _2284 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2271);
    float _2285 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2271);
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _1235 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2327 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2331 = _2291 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_1070, _1071, _1072));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_1070, _1071, _1072));
    float _4554 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4565 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2308].x * _2314) * _2352) + (((cbLight._m0[_2318].x * _2283) * _2327) * _2350);
    float _2360 = ((_2314 * cbLight._m0[_2308].y) * _2352) + (((cbLight._m0[_2318].y * _2284) * _2327) * _2350);
    float _2361 = ((_2314 * cbLight._m0[_2308].z) * _2352) + (((cbLight._m0[_2318].z * _2285) * _2327) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2367)
    {
        _2378 = _2359;
        _2380 = _2360;
        _2382 = _2361;
    }
    else
    {
        uint _2386 = _2291 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_1070, _1071, _1072)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4576 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2405 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2359;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2360;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2361;
    }
    bool _2385 = _2365.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2385)
    {
        _2423 = _2378;
        _2425 = _2380;
        _2427 = _2382;
    }
    else
    {
        uint _2596 = _2291 + 7u;
        float _2612 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_1070, _1071, _1072)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4592 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2615 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2423 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2378;
        _2425 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2380;
        _2427 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2382;
    }
    uint _2430 = _2291 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _1073) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2291].x + _1149;
    float _2446 = cbLight._m0[_2291].y + _1150;
    float _2447 = cbLight._m0[_2291].z + _1151;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2291].xyz));
    float _4608 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _4619 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _2459 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2460 = dot(vec3(_1070, _1071, _1072), vec3(_2452, _2453, _2454));
    float _4630 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2452, _2453, _2454));
    float _4641 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _1216;
    float _2483 = 0.959999978542327880859375 - _1217;
    float _2484 = 0.959999978542327880859375 - _1218;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4652 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2518 = _2291 + 9u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _1073) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2331].x + _1149;
    float _2532 = cbLight._m0[_2331].y + _1150;
    float _2533 = cbLight._m0[_2331].z + _1151;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2331].xyz));
    float _4663 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2545 = dot(vec3(_1070, _1071, _1072), vec3(_2538, _2539, _2540));
    float _4674 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2538, _2539, _2540));
    float _4685 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2530 * _2530;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
    float _2571 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2459 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2571) + _2530) * _2544))) * _2544;
    float _4696 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    float _2593 = (((((_2564 * _2481) + _1219) * cbLight._m0[_2518].x) * _2583) * _2314) + ((((cbLight._m0[_2430].x * _2283) * ((_2480 * _2481) + _1219)) * _2504) * _2327);
    float _2594 = (((((_2564 * _2483) + _1221) * cbLight._m0[_2518].y) * _2583) * _2314) + ((((cbLight._m0[_2430].y * _2284) * ((_2480 * _2483) + _1221)) * _2504) * _2327);
    float _2595 = (((((_2564 * _2484) + _1222) * cbLight._m0[_2518].z) * _2583) * _2314) + ((((cbLight._m0[_2430].z * _2285) * ((_2480 * _2484) + _1222)) * _2504) * _2327);
    float _2657;
    float _2659;
    float _2661;
    if (_2367)
    {
        _2657 = _2593;
        _2659 = _2594;
        _2661 = _2595;
    }
    else
    {
        uint _2663 = _2291 + 2u;
        uint _2667 = _2291 + 10u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _1073) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _1149;
        float _2684 = cbLight._m0[_2663].y + _1150;
        float _2685 = cbLight._m0[_2663].z + _1151;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2663].xyz));
        float _4707 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2697 = dot(vec3(_1070, _1071, _1072), vec3(_2690, _2691, _2692));
        float _4718 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4729 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2459 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2723) + _2682) * _2696))) * _2696;
        float _4740 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2657 = (((((_2716 * _2481) + _1219) * cbLight._m0[_2667].x) * _2735) * _2736) + _2593;
        _2659 = (((((_2716 * _2483) + _1221) * cbLight._m0[_2667].y) * _2735) * _2736) + _2594;
        _2661 = (((((_2716 * _2484) + _1222) * cbLight._m0[_2667].z) * _2735) * _2736) + _2595;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2385)
    {
        _2771 = _2657;
        _2773 = _2659;
        _2775 = _2661;
    }
    else
    {
        uint _2782 = _2291 + 3u;
        uint _2786 = _2291 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _1073) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _1149;
        float _2803 = cbLight._m0[_2782].y + _1150;
        float _2804 = cbLight._m0[_2782].z + _1151;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2782].xyz));
        float _4756 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _2816 = dot(vec3(_1070, _1071, _1072), vec3(_2809, _2810, _2811));
        float _4767 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4778 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2459 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2842) + _2801) * _2815))) * _2815;
        float _4789 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2771 = (((((_2835 * _2481) + _1219) * cbLight._m0[_2786].x) * _2854) * _2855) + _2657;
        _2773 = (((((_2835 * _2483) + _1221) * cbLight._m0[_2786].y) * _2854) * _2855) + _2659;
        _2775 = (((((_2835 * _2484) + _1222) * cbLight._m0[_2786].z) * _2854) * _2855) + _2661;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2289.y == 0u)
    {
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2930;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2930;
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2930;
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1158) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _1157) / _2946)));
        float _2967 = (log2(_2933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3238)
                {
                    frontier_phi_61_pred = _3222;
                    frontier_phi_61_pred_1 = _3227;
                    frontier_phi_61_pred_2 = _3226;
                    frontier_phi_61_pred_3 = _3225;
                    frontier_phi_61_pred_4 = _3224;
                    frontier_phi_61_pred_5 = _3223;
                }
                else
                {
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    uint _3352;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3237;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    for (;;)
                    {
                        uint _3356 = uint(findLSB(_3352)) + (_3228 << 5u);
                        uint _3353 = (_3352 + 4294967295u) & _3352;
                        uint _3358 = _3356 * 48u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3378 = (_3356 * 48u) + 4u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3397 = (_3356 * 48u) + 8u;
                        vec3 _3408 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x));
                        float _3412 = _3372.x - _2931;
                        float _3413 = _3372.y - _2932;
                        float _3414 = _3372.z - _2933;
                        float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                        float _3418 = inversesqrt(_3415);
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3422 = dot(vec3(_1176, _1179, _1182), vec3(_3419, _3420, _3421));
                        float _3427 = 1.0 - (_3415 * _3372.w);
                        float _4815 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3429 = sqrt(_3415) * _3391.w;
                        float _3432 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3422) + _3433;
                        float _3439 = _3429 * _3429;
                        float _3443 = ((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3428) / ((_3439 * 0.699999988079071044921875) + 1.0);
                        float _3447 = (-0.0) - _2931;
                        float _3448 = (-0.0) - _2932;
                        float _3449 = (-0.0) - _2933;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3464 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                        float _3465 = 1.0 - _1251;
                        float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                        float _3473 = _3472 * _3472;
                        float _3474 = _3473 * _3473;
                        float _3475 = _3454 + _3419;
                        float _3476 = _3455 + _3420;
                        float _3477 = _3456 + _3421;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3485 = dot(vec3(_1176, _1179, _1182), vec3(_3454, _3455, _3456));
                        float _4831 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3489 = dot(vec3(_1176, _1179, _1182), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                        float _4842 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                        float _3497 = _3432 * _3473;
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3422) + _3498;
                        float _4853 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3503 = 1.0 - _3473;
                        float _3513 = (0.5 / (((_3502 * ((_3488 * _3503) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3473) * _3488))) * _3502;
                        float _4864 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3524 = (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) / ((_3496 * _3496) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125))) * _3428;
                        _3281 = (_3443 * _3391.x) + _3349;
                        _3282 = (_3443 * _3391.y) + _3350;
                        _3283 = (_3443 * _3391.z) + _3351;
                        _3278 = (_3524 * _3408.x) + _3346;
                        _3279 = (_3524 * _3408.y) + _3347;
                        _3280 = (_3524 * _3408.z) + _3348;
                        if (_3353 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3353;
                        }
                    }
                    frontier_phi_61_pred = _3278;
                    frontier_phi_61_pred_1 = _3283;
                    frontier_phi_61_pred_2 = _3282;
                    frontier_phi_61_pred_3 = _3281;
                    frontier_phi_61_pred_4 = _3280;
                    frontier_phi_61_pred_5 = _3279;
                }
                _3079 = frontier_phi_61_pred;
                _3089 = frontier_phi_61_pred_1;
                _3087 = frontier_phi_61_pred_2;
                _3085 = frontier_phi_61_pred_3;
                _3083 = frontier_phi_61_pred_4;
                _3081 = frontier_phi_61_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3079;
                    _3223 = _3081;
                    _3224 = _3083;
                    _3225 = _3085;
                    _3226 = _3087;
                    _3227 = _3089;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3095) & _2977) == 0u)
        {
            _3190 = _3078;
            _3192 = _3080;
            _3194 = _3082;
            _3196 = _3084;
            _3198 = _3086;
            _3200 = _3088;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
            float _3216 = _3215 * _2931;
            float _3217 = _3215 * _2932;
            float _3218 = _3215 * _2933;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3329 = _3078;
                float _3330 = _3080;
                float _3331 = _3082;
                float _3332 = _3084;
                float _3333 = _3086;
                float _3334 = _3088;
                uint _3335 = _3095;
                uint _3344;
                bool _3345;
                for (;;)
                {
                    _3344 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                    _3345 = _3344 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3345)
                    {
                        frontier_phi_67_pred = _3332;
                        frontier_phi_67_pred_1 = _3333;
                        frontier_phi_67_pred_2 = _3334;
                        frontier_phi_67_pred_3 = _3331;
                        frontier_phi_67_pred_4 = _3330;
                        frontier_phi_67_pred_5 = _3329;
                    }
                    else
                    {
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3542 = _3329;
                        float _3543 = _3330;
                        float _3544 = _3331;
                        float _3545 = _3332;
                        float _3546 = _3333;
                        float _3547 = _3334;
                        uint _3548 = _3344;
                        uint _3549;
                        vec4 _3574;
                        float _3575;
                        vec4 _3590;
                        vec3 _3602;
                        vec4 _3617;
                        vec4 _3632;
                        float _3678;
                        bool _3679;
                        for (;;)
                        {
                            uint _3559 = ((_3335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3548));
                            _3549 = (_3548 + 4294967295u) & _3548;
                            uint _3561 = _3559 * 40u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3575 = _3574.w;
                            uint _3577 = (_3559 * 40u) + 4u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3559 * 40u) + 8u;
                            _3602 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x));
                            uint _3604 = (_3559 * 40u) + 16u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3559 * 40u) + 20u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3559 * 40u) + 24u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3653 = (_3559 * 40u) + 28u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3678 = fma(_2933, _3666.z, fma(_2932, _3666.y, _3666.x * _2931)) + _3666.w;
                            _3679 = !((fma(_2933, _3647.z, fma(_2932, _3647.y, _3647.x * _2931)) + _3647.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3679)
                            {
                                float _3706 = _3574.x - _2931;
                                float _3707 = _3574.y - _2932;
                                float _3708 = _3574.z - _2933;
                                float _3709 = dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708));
                                float _3712 = inversesqrt(_3709);
                                float _3713 = _3712 * _3706;
                                float _3714 = _3712 * _3707;
                                float _3715 = _3712 * _3708;
                                float _3719 = 1.0 - (_3709 / (_3575 * _3575));
                                float _4875 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3724 = sqrt(_3709) * _3590.w;
                                float _3726 = 1.39999997615814208984375 / (_3724 + 1.39999997615814208984375);
                                float _3727 = _3726 * _3726;
                                float _3730 = ((1.0 - _3727) * dot(vec3(_3713, _3714, _3715), vec3(_1176, _1179, _1182))) + _3727;
                                float _3733 = _3724 * _3724;
                                float _3737 = (fma(_2933, _3617.z, fma(_2932, _3617.y, _3617.x * _2931)) + _3617.w) / _3678;
                                float _3738 = (fma(_2933, _3632.z, fma(_2932, _3632.y, _3632.x * _2931)) + _3632.w) / _3678;
                                float _3742 = 1.0 - dot(vec2(_3737, _3738), vec2(_3737, _3738));
                                float _4891 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3744 = _3743 * (((isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0))) * _3720) / ((_3733 * 0.699999988079071044921875) + 1.0));
                                float _3756 = exp2(log2(1.0 / ((_3733 * 3.5) + 5.0)) * 0.25);
                                float _3757 = 1.0 - _1251;
                                float _3764 = sqrt(1.0 - ((1.0 - (_3757 * _3757)) * (1.0 - (_3756 * _3756))));
                                float _3765 = _3764 * _3764;
                                float _3766 = _3765 * _3765;
                                float _3767 = _3713 - _3216;
                                float _3768 = _3714 - _3217;
                                float _3769 = _3715 - _3218;
                                float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                                float _3777 = dot(vec3(_1176, _1179, _1182), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4902 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3780 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3781 = dot(vec3(_1176, _1179, _1182), vec3(_3773 * _3767, _3773 * _3768, _3773 * _3769));
                                float _4913 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3784 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3788 = ((_3784 * _3784) * (_3766 + (-1.0))) + 1.0;
                                float _3789 = _3726 * _3765;
                                float _3790 = _3789 * _3789;
                                float _3796 = ((1.0 - _3790) * dot(vec3(_1176, _1179, _1182), vec3(_3713, _3714, _3715))) + _3790;
                                float _4924 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3798 = 1.0 - _3765;
                                float _3808 = (0.5 / (((_3797 * ((_3780 * _3798) + _3765)) + 9.9999999392252902907785028219223e-09) + (((_3797 * _3798) + _3765) * _3780))) * _3797;
                                float _4935 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3818 = (_3743 * _3720) * (((_3766 * 3.1415927410125732421875) * (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) / ((_3788 * _3788) * ((_3733 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3818 * _3602.x;
                                frontier_phi_73_pred_1 = _3818 * _3602.y;
                                frontier_phi_73_pred_2 = _3744 * _3590.z;
                                frontier_phi_73_pred_3 = _3744 * _3590.y;
                                frontier_phi_73_pred_4 = _3744 * _3590.x;
                                frontier_phi_73_pred_5 = _3818 * _3602.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3822 = frontier_phi_73_pred;
                            _3823 = frontier_phi_73_pred_1;
                            _3827 = frontier_phi_73_pred_2;
                            _3826 = frontier_phi_73_pred_3;
                            _3825 = frontier_phi_73_pred_4;
                            _3824 = frontier_phi_73_pred_5;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            if (_3549 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3549;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3532;
                        frontier_phi_67_pred_1 = _3533;
                        frontier_phi_67_pred_2 = _3534;
                        frontier_phi_67_pred_3 = _3531;
                        frontier_phi_67_pred_4 = _3530;
                        frontier_phi_67_pred_5 = _3529;
                    }
                    _3197 = frontier_phi_67_pred;
                    _3199 = frontier_phi_67_pred_1;
                    _3201 = frontier_phi_67_pred_2;
                    _3195 = frontier_phi_67_pred_3;
                    _3193 = frontier_phi_67_pred_4;
                    _3191 = frontier_phi_67_pred_5;
                    uint _3336 = _3335 + 1u;
                    if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3329 = _3191;
                        _3330 = _3193;
                        _3331 = _3195;
                        _3332 = _3197;
                        _3333 = _3199;
                        _3334 = _3201;
                        _3335 = _3336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3199;
                frontier_phi_55_56_ladder_1 = _3201;
                frontier_phi_55_56_ladder_2 = _3197;
                frontier_phi_55_56_ladder_3 = _3195;
                frontier_phi_55_56_ladder_4 = _3193;
                frontier_phi_55_56_ladder_5 = _3191;
            }
            else
            {
                frontier_phi_55_56_ladder = _3086;
                frontier_phi_55_56_ladder_1 = _3088;
                frontier_phi_55_56_ladder_2 = _3084;
                frontier_phi_55_56_ladder_3 = _3082;
                frontier_phi_55_56_ladder_4 = _3080;
                frontier_phi_55_56_ladder_5 = _3078;
            }
            _3190 = frontier_phi_55_56_ladder_5;
            _3192 = frontier_phi_55_56_ladder_4;
            _3194 = frontier_phi_55_56_ladder_3;
            _3196 = frontier_phi_55_56_ladder_2;
            _3198 = frontier_phi_55_56_ladder;
            _3200 = frontier_phi_55_56_ladder_1;
        }
        float _3205 = isnan(1.0) ? _1235 : (isnan(_1235) ? 1.0 : min(_1235, 1.0));
        _2990 = (_3205 * _3196) + _2423;
        _2992 = (_3205 * _3198) + _2425;
        _2994 = (_3205 * _3200) + _2427;
        _2996 = ((_3190 * _1219) * _3205) + _2771;
        _2998 = ((_3192 * _1221) * _3205) + _2773;
        _3000 = ((_3194 * _1222) * _3205) + _2775;
    }
    else
    {
        _2990 = _2423;
        _2992 = _2425;
        _2994 = _2427;
        _2996 = _2771;
        _2998 = _2773;
        _3000 = _2775;
    }
    float _4951 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _4962 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _4973 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    uint _3020 = _293 + 6u;
    float _3028 = _1157 / cbSceneParam._m0[86u].x;
    float _3029 = _1158 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _1092 : (isnan(_1092) ? cbSceneParam._m0[77u].w : min(_1092, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_1092 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_1092) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1092 : min(cbSceneParam._m0[80u].w, _1092));
        float _3104 = _3103 / _1092;
        float _3115 = _3104 * _1142;
        float _3116 = _1143 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3118 = _3104 * _1144;
        float _3120 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3116;
        float _3128 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3291;
        if (abs((_3117 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3291 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3253 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3291 = ((abs(_3128 / _3117) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3138 * _3262) - exp2(_3138 * _3263)) * _3251))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3293 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3302 = exp2((_3291 * (-1.44269502162933349609375)) * (1.0 - _3293.w));
        float _3303 = log2(_3302);
        float _3319 = log2(_3048);
        _3140 = (exp2(_3319 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].x)) * _3293.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3142 = (exp2(_3319 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].y)) * _3293.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3144 = (exp2(_3319 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].z)) * _3293.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3146 = _3302 * _3048;
    }
    else
    {
        _3140 = _3045;
        _3142 = _3046;
        _3144 = _3047;
        _3146 = _3048;
    }
    float _3158 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3159 = _3158 == 3.0;
    float _3160 = log2(_3146);
    float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2990 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1235))) + ((_2996 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2042)) * cbPerFrame._m0[3u].x));
    float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2992 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1235))) + ((_2998 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2042)) * cbPerFrame._m0[3u].x));
    float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2994 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1235))) + ((_3000 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2042)) * cbPerFrame._m0[3u].x));
    float _3178 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3178 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
    SV_Target.y = _3178 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
    SV_Target.z = _3178 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
    SV_Target.w = cbInstanceData._m0[_3020].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3020].w;
}


