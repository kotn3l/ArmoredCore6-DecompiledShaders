#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1210;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[23u].w) + _373) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3536 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _398 = (_391 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _399 = (_391 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _400 = (_391 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _469 = ((_439.z - _460) * _391) + _460;
    float _472 = ((((_439.x - _458) * _391) + _458) * 2.0) + (-1.0);
    float _474 = ((((_439.y - _459) * _391) + _459) * 2.0) + (-1.0);
    float _475 = dot(vec2(_472, _474), vec2(_472, _474));
    float _3547 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _523 = _521.x;
    float _524 = 1.0 - _523;
    float _540 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_523 - _524) * cbMtdParam._m0[24u].z) + _524) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3558 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _548 = (_541 * ((_419.x * cbMtdParam._m0[18u].x) - _398)) + _398;
    float _549 = (_541 * ((_419.y * cbMtdParam._m0[18u].y) - _399)) + _399;
    float _550 = (_541 * ((_419.z * cbMtdParam._m0[18u].z) - _400)) + _400;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _578 = _576.x;
    float _596 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _578) * _391) + _578;
    float _600 = ((_562.x - _596) * cbMtdParam._m0[19u].z) + _596;
    float _602 = _600 - (_600 * _541);
    float _606 = (cbMtdParam._m0[19u].w * (_496.z - _469)) + _469;
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _626 = (_619.x * 2.0) + (-1.0);
    float _627 = (_619.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3569 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _636 = (_541 * (_619.z - _606)) + _606;
    float _639 = (((_496.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _472;
    float _640 = (((_496.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _474;
    float _652 = (((_626 - _639) + (cbMtdParam._m0[21u].x * _639)) * _541) + _639;
    float _653 = (((_627 - _640) + (cbMtdParam._m0[21u].x * _640)) * _541) + _640;
    float _654 = (_541 * (sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) - _480)) + _480;
    float _656 = cbMtdParam._m0[22u].x + _496.w;
    float _659 = fma(_654, _225 * NORMAL.x, fma(_653, _232 * TANGENT.x, (_218 * _210) * _652));
    float _662 = fma(_654, _225 * NORMAL.y, fma(_653, _232 * TANGENT.y, (_218 * _211) * _652));
    float _665 = fma(_654, _225 * NORMAL.z, fma(_653, _232 * TANGENT.z, (_218 * _212) * _652));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3580 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _673 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3602 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3613 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3624 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3635 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _678 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _780 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _783 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _797 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _803 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_797].x;
    float _804 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_797].y;
    float _805 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_797].z;
    float _3646 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _809 = 1.0 - _678;
    float _810 = _806 * _809;
    float _811 = _807 * _809;
    float _812 = _808 * _809;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _678;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _678;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _678;
    float _820 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _836 = ((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * TEXCOORD_5.w) * _832.x;
    float _837 = dot(vec3(_670, _671, _672), vec3(_750, _751, _752));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _670) - _750;
    float _845 = (_840 * _671) - _751;
    float _846 = (_840 * _672) - _752;
    float _850 = abs(dot(vec3(_750, _751, _752), vec3(_670, _671, _672)));
    float _3679 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_673);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _871 = (1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _872 = _865 * _852;
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_908, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900));
        float _938 = fma(_908, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900));
        float _942 = fma(_908, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900));
        float _967 = _900 + _670;
        float _968 = _904 + _671;
        float _969 = _908 + _672;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_670, _671, _672), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3727 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_670, _671, _672), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3760 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_670, _671, _672), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3793 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1249 = fma(_908, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900));
        float _1253 = fma(_908, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900));
        float _1257 = fma(_908, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900));
        float _1280 = _900 + _670;
        float _1281 = _904 + _671;
        float _1282 = _908 + _672;
        float _1292 = fma(_1282, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1280)) - _1249;
        float _1293 = fma(_1282, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1280)) - _1253;
        float _1294 = fma(_1282, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1280)) - _1257;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1249 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1253 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[35u].z) + ((((((_1257 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_670, _671, _672), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3856 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_670, _671, _672), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3889 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_670, _671, _672), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3922 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1210;
        _1519 = _1210;
        _1520 = _1210;
        _1521 = _1210;
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = _1210;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1222)) + _1222;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1223)) + _1223;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1224)) + _1224;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _844 * 0.5;
    float _1587 = _845 * 0.5;
    float _1588 = _846 * 0.5;
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1654 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1654 : min(cbModelParam._m0[25u].z, _1654));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_908, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_908, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_908, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1716 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1719 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1747 = frontier_phi_14_12_ladder;
        }
        float _1949;
        if (_1716 > 0.0)
        {
            _1949 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1949 = frontier_phi_23_19_ladder;
        }
        float _2203;
        if (_1719 > 0.0)
        {
            _2203 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2203 = frontier_phi_35_30_ladder;
        }
        float _2205 = isnan(_1949) ? _1747 : (isnan(_1747) ? _1949 : min(_1747, _1949));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1713) + _1702;
        float _2211 = (_2206 * _1716) + _1706;
        float _2212 = (_2206 * _1719) + _1710;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1655);
            frontier_phi_13_35_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_13_35_ladder_2;
        _1737 = frontier_phi_13_35_ladder_1;
        _1739 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1655);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_908, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_908, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_908, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1811 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1814 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1954;
        if (_1808 > 0.0)
        {
            _1954 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1954 = frontier_phi_25_21_ladder;
        }
        float _2230;
        if (_1811 > 0.0)
        {
            _2230 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2230 = frontier_phi_37_32_ladder;
        }
        float _2443;
        if (_1814 > 0.0)
        {
            _2443 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2443 = frontier_phi_46_43_ladder;
        }
        float _2445 = isnan(_2230) ? _1954 : (isnan(_1954) ? _2230 : min(_1954, _2230));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1808) + _1797;
        float _2451 = (_2446 * _1811) + _1801;
        float _2452 = (_2446 * _1814) + _1805;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_22_46_ladder = _2651.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2651.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2651.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_46_ladder_2;
        _1835 = frontier_phi_22_46_ladder_1;
        _1837 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1744);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1850 = (((_871 * _820) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1833 - _1735)) + _1735);
    float _1852 = (((_871 * _822) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1835 - _1737)) + _1737);
    float _1854 = (((_871 * _823) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1857 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _836 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1908 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1912 = _1875 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_670, _671, _672));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_670, _671, _672));
    float _4058 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _4069 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1892].x * _1898) * _1933) + ((cbLight._m0[_1902].x * _1908) * _1931);
    float _1941 = ((_1898 * cbLight._m0[_1892].y) * _1933) + ((_1908 * cbLight._m0[_1902].y) * _1931);
    float _1942 = ((_1898 * cbLight._m0[_1892].z) * _1933) + ((_1908 * cbLight._m0[_1902].z) * _1931);
    uvec4 _1946 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1948 = _1946.x == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1948)
    {
        _1959 = _1940;
        _1961 = _1941;
        _1963 = _1942;
    }
    else
    {
        uint _1967 = _1875 + 6u;
        float _1983 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _1984 = _1983 * _1983;
        float _4080 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1986 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _1959 = (((cbLight._m0[_1967].x * 0.3183098733425140380859375) * _1985) * _1986) + _1940;
        _1961 = (((cbLight._m0[_1967].y * 0.3183098733425140380859375) * _1985) * _1986) + _1941;
        _1963 = (((cbLight._m0[_1967].z * 0.3183098733425140380859375) * _1985) * _1986) + _1942;
    }
    bool _1966 = _1946.y == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1966)
    {
        _2004 = _1959;
        _2006 = _1961;
        _2008 = _1963;
    }
    else
    {
        uint _2174 = _1875 + 7u;
        float _2190 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4096 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2193 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2004 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _1959;
        _2006 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _1961;
        _2008 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _1963;
    }
    uint _2011 = _1875 + 8u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _673) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1875].x + _750;
    float _2027 = cbLight._m0[_1875].y + _751;
    float _2028 = cbLight._m0[_1875].z + _752;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1875].xyz));
    float _4112 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2040 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2041 = dot(vec3(_670, _671, _672), vec3(_2033, _2034, _2035));
    float _4134 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2033, _2034, _2035));
    float _4145 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2025 * _2025;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2061 = exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0);
    float _2062 = 0.959999978542327880859375 - _817;
    float _2064 = 0.959999978542327880859375 - _818;
    float _2065 = 0.959999978542327880859375 - _819;
    float _2072 = 1.0 - _2025;
    float _2083 = (0.5 / (((_2040 * ((_2039 * _2072) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2072) + _2025) * _2039))) * _2039;
    float _4156 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    uint _2096 = _1875 + 9u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _673) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1912].x + _750;
    float _2110 = cbLight._m0[_1912].y + _751;
    float _2111 = cbLight._m0[_1912].z + _752;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1912].xyz));
    float _4167 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2123 = dot(vec3(_670, _671, _672), vec3(_2116, _2117, _2118));
    float _4178 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2116, _2117, _2118));
    float _4189 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2108 * _2108;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0);
    float _2149 = 1.0 - _2108;
    float _2159 = (0.5 / (((_2040 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2149) + _2108) * _2122))) * _2122;
    float _4200 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    float _2171 = (((((_2142 * _2062) + _820) * cbLight._m0[_2096].x) * _2161) * _1898) + (((((_2061 * _2062) + _820) * cbLight._m0[_2011].x) * _2085) * _1908);
    float _2172 = (((((_2142 * _2064) + _822) * cbLight._m0[_2096].y) * _2161) * _1898) + (((((_2061 * _2064) + _822) * cbLight._m0[_2011].y) * _2085) * _1908);
    float _2173 = (((((_2142 * _2065) + _823) * cbLight._m0[_2096].z) * _2161) * _1898) + (((((_2061 * _2065) + _823) * cbLight._m0[_2011].z) * _2085) * _1908);
    float _2235;
    float _2237;
    float _2239;
    if (_1948)
    {
        _2235 = _2171;
        _2237 = _2172;
        _2239 = _2173;
    }
    else
    {
        uint _2241 = _1875 + 2u;
        uint _2245 = _1875 + 10u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _673) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _750;
        float _2262 = cbLight._m0[_2241].y + _751;
        float _2263 = cbLight._m0[_2241].z + _752;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2241].xyz));
        float _4211 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2275 = dot(vec3(_670, _671, _672), vec3(_2268, _2269, _2270));
        float _4222 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4233 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
        float _2301 = 1.0 - _2260;
        float _2311 = (0.5 / (((_2040 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2301) + _2260) * _2274))) * _2274;
        float _4244 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2235 = (((((_2294 * _2062) + _820) * cbLight._m0[_2245].x) * _2313) * _2314) + _2171;
        _2237 = (((((_2294 * _2064) + _822) * cbLight._m0[_2245].y) * _2313) * _2314) + _2172;
        _2239 = (((((_2294 * _2065) + _823) * cbLight._m0[_2245].z) * _2313) * _2314) + _2173;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1966)
    {
        _2349 = _2235;
        _2351 = _2237;
        _2353 = _2239;
    }
    else
    {
        uint _2360 = _1875 + 3u;
        uint _2364 = _1875 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _673) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _750;
        float _2381 = cbLight._m0[_2360].y + _751;
        float _2382 = cbLight._m0[_2360].z + _752;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2360].xyz));
        float _4260 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2394 = dot(vec3(_670, _671, _672), vec3(_2387, _2388, _2389));
        float _4271 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4282 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
        float _2420 = 1.0 - _2379;
        float _2430 = (0.5 / (((_2040 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2420) + _2379) * _2393))) * _2393;
        float _4293 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2349 = (((((_2413 * _2062) + _820) * cbLight._m0[_2364].x) * _2432) * _2433) + _2235;
        _2351 = (((((_2413 * _2064) + _822) * cbLight._m0[_2364].y) * _2432) * _2433) + _2237;
        _2353 = (((((_2413 * _2065) + _823) * cbLight._m0[_2364].z) * _2432) * _2433) + _2239;
    }
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_1873.y == 0u)
    {
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2508;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2508;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2508;
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.x;
        uint _2535 = uint((float(_2523.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2524))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2524)));
        float _2545 = (log2(_2511 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2546 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        uint _2549 = uint(isnan(14.0) ? _2546 : (isnan(_2546) ? 14.0 : min(_2546, 14.0)));
        uvec4 _2554 = texelFetch(g_lightClusterGridBuffer, int(((_2549 << 2u) + (_2535 << 6u)) >> 2u));
        uint _2555 = _2554.x;
        uint _2556 = _2523.z;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((((1u << ((_2556 >> 4u) & 15u)) + 4294967295u) & _2555) == 0u) || ((_2556 & 240u) == 0u))
        {
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
        }
        else
        {
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2817)
                {
                    frontier_phi_61_pred = _2801;
                    frontier_phi_61_pred_1 = _2806;
                    frontier_phi_61_pred_2 = _2805;
                    frontier_phi_61_pred_3 = _2804;
                    frontier_phi_61_pred_4 = _2803;
                    frontier_phi_61_pred_5 = _2802;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2816;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2807 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _2509;
                        float _2992 = _2951.y - _2510;
                        float _2993 = _2951.z - _2511;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_777, _780, _783), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4319 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _2509;
                        float _3027 = (-0.0) - _2510;
                        float _3028 = (-0.0) - _2511;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3043 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _852;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_777, _780, _783), vec3(_3033, _3034, _3035));
                        float _4335 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3068 = dot(vec3(_777, _780, _783), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4346 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3011 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3001) + _3077;
                        float _4357 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4368 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3075 * _3075) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2860 = (_3022 * _2970.x) + _2928;
                        _2861 = (_3022 * _2970.y) + _2929;
                        _2862 = (_3022 * _2970.z) + _2930;
                        _2857 = (_3103 * _2987.x) + _2925;
                        _2858 = (_3103 * _2987.y) + _2926;
                        _2859 = (_3103 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_61_pred = _2857;
                    frontier_phi_61_pred_1 = _2862;
                    frontier_phi_61_pred_2 = _2861;
                    frontier_phi_61_pred_3 = _2860;
                    frontier_phi_61_pred_4 = _2859;
                    frontier_phi_61_pred_5 = _2858;
                }
                _2657 = frontier_phi_61_pred;
                _2667 = frontier_phi_61_pred_1;
                _2665 = frontier_phi_61_pred_2;
                _2663 = frontier_phi_61_pred_3;
                _2661 = frontier_phi_61_pred_4;
                _2659 = frontier_phi_61_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2657;
                    _2802 = _2659;
                    _2803 = _2661;
                    _2804 = _2663;
                    _2805 = _2665;
                    _2806 = _2667;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
        }
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.z;
        uint _2673 = (_2671 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2673) & _2555) == 0u)
        {
            _2769 = _2656;
            _2771 = _2658;
            _2773 = _2660;
            _2775 = _2662;
            _2777 = _2664;
            _2779 = _2666;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
            float _2795 = _2794 * _2509;
            float _2796 = _2794 * _2510;
            float _2797 = _2794 * _2511;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2673 < ((_2671 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2908 = _2656;
                float _2909 = _2658;
                float _2910 = _2660;
                float _2911 = _2662;
                float _2912 = _2664;
                float _2913 = _2666;
                uint _2914 = _2673;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2924)
                    {
                        frontier_phi_67_pred = _2911;
                        frontier_phi_67_pred_1 = _2912;
                        frontier_phi_67_pred_2 = _2913;
                        frontier_phi_67_pred_3 = _2910;
                        frontier_phi_67_pred_4 = _2909;
                        frontier_phi_67_pred_5 = _2908;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        uint _3127 = _2923;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3212;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3138 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3138 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3138 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3138 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2511, _3246.z, fma(_2510, _3246.y, _3246.x * _2509)) + _3246.w;
                            _3259 = !((fma(_2511, _3227.z, fma(_2510, _3227.y, _3227.x * _2509)) + _3227.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3153.x - _2509;
                                float _3287 = _3153.y - _2510;
                                float _3288 = _3153.z - _2511;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3154 * _3154));
                                float _4379 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3304 = sqrt(_3289) * _3169.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_777, _780, _783))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2511, _3196.z, fma(_2510, _3196.y, _3196.x * _2509)) + _3196.w) / _3258;
                                float _3318 = (fma(_2511, _3212.z, fma(_2510, _3212.y, _3212.x * _2509)) + _3212.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4395 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _852;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2795;
                                float _3348 = _3294 - _2796;
                                float _3349 = _3295 - _2797;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4406 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3361 = dot(vec3(_777, _780, _783), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4417 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_777, _780, _783), vec3(_3293, _3294, _3295))) + _3370;
                                float _4428 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4439 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3398 * _3181.x;
                                frontier_phi_73_pred_1 = _3398 * _3181.y;
                                frontier_phi_73_pred_2 = _3324 * _3169.z;
                                frontier_phi_73_pred_3 = _3324 * _3169.y;
                                frontier_phi_73_pred_4 = _3324 * _3169.x;
                                frontier_phi_73_pred_5 = _3398 * _3181.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_73_pred;
                            _3403 = frontier_phi_73_pred_1;
                            _3407 = frontier_phi_73_pred_2;
                            _3406 = frontier_phi_73_pred_3;
                            _3405 = frontier_phi_73_pred_4;
                            _3404 = frontier_phi_73_pred_5;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3111;
                        frontier_phi_67_pred_1 = _3112;
                        frontier_phi_67_pred_2 = _3113;
                        frontier_phi_67_pred_3 = _3110;
                        frontier_phi_67_pred_4 = _3109;
                        frontier_phi_67_pred_5 = _3108;
                    }
                    _2776 = frontier_phi_67_pred;
                    _2778 = frontier_phi_67_pred_1;
                    _2780 = frontier_phi_67_pred_2;
                    _2774 = frontier_phi_67_pred_3;
                    _2772 = frontier_phi_67_pred_4;
                    _2770 = frontier_phi_67_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2770;
                        _2909 = _2772;
                        _2910 = _2774;
                        _2911 = _2776;
                        _2912 = _2778;
                        _2913 = _2780;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2778;
                frontier_phi_55_56_ladder_1 = _2780;
                frontier_phi_55_56_ladder_2 = _2776;
                frontier_phi_55_56_ladder_3 = _2774;
                frontier_phi_55_56_ladder_4 = _2772;
                frontier_phi_55_56_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_55_56_ladder = _2664;
                frontier_phi_55_56_ladder_1 = _2666;
                frontier_phi_55_56_ladder_2 = _2662;
                frontier_phi_55_56_ladder_3 = _2660;
                frontier_phi_55_56_ladder_4 = _2658;
                frontier_phi_55_56_ladder_5 = _2656;
            }
            _2769 = frontier_phi_55_56_ladder_5;
            _2771 = frontier_phi_55_56_ladder_4;
            _2773 = frontier_phi_55_56_ladder_3;
            _2775 = frontier_phi_55_56_ladder_2;
            _2777 = frontier_phi_55_56_ladder;
            _2779 = frontier_phi_55_56_ladder_1;
        }
        float _2784 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2568 = (_2784 * _2775) + _2004;
        _2570 = (_2784 * _2777) + _2006;
        _2572 = (_2784 * _2779) + _2008;
        _2574 = ((_2769 * _820) * _2784) + _2349;
        _2576 = ((_2771 * _822) * _2784) + _2351;
        _2578 = ((_2773 * _823) * _2784) + _2353;
    }
    else
    {
        _2568 = _2004;
        _2570 = _2006;
        _2572 = _2008;
        _2574 = _2349;
        _2576 = _2351;
        _2578 = _2353;
    }
    float _4455 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4466 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4477 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    uint _2598 = _238 + 6u;
    float _2606 = _758 / cbSceneParam._m0[86u].x;
    float _2607 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2621 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2623 = _2621.x;
    float _2624 = _2621.y;
    float _2625 = _2621.z;
    float _2626 = _2621.w;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2681 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2682 = _2681 / _692;
        float _2693 = _2682 * _743;
        float _2694 = _744 * _2682;
        float _2695 = (-0.0) - _2694;
        float _2697 = _2682 * _745;
        float _2699 = (cbSceneParam._m0[77u].w * _2695) / _2681;
        float _2700 = _2699 + cbSceneParam._m0[79u].w;
        float _2701 = cbSceneParam._m0[79u].w - _2694;
        float _2707 = sqrt(((_2693 * _2693) + (_2694 * _2694)) + (_2697 * _2697));
        float _2710 = (1.0 - (cbSceneParam._m0[77u].w / _2681)) * _2707;
        float _2715 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2717 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2695 - _2699) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2700 > 0.0) ? exp2(_2715 * _2700) : (2.0 - exp2(_2717 * _2700))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2710;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : max(_2700, _2701));
            float _2832 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : min(_2700, _2701));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2870 = ((abs(_2707 / _2695) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2715 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2715 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2717 * _2841) - exp2(_2717 * _2842)) * _2830))) + (_2710 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2626);
        _2719 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2623;
        _2721 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2624;
        _2723 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2625;
        _2725 = _2881 * _2626;
    }
    else
    {
        _2719 = _2623;
        _2721 = _2624;
        _2723 = _2625;
        _2725 = _2626;
    }
    float _2737 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2738 = _2737 == 3.0;
    float _2739 = log2(_2725);
    float _2746 = exp2(_2739 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2568 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _836))) + ((_2574 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2747 = exp2(_2739 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2570 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _836))) + ((_2576 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2739 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2572 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _836))) + ((_2578 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2757 = (_2737 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2757 * (_2738 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.y = _2757 * (_2738 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.z = _2757 * (_2738 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.w = cbInstanceData._m0[_2598].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2598].w;
}


