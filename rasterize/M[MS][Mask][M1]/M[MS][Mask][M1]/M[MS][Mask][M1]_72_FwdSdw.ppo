#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1363;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3972 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _433 = (_426 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _434 = (_426 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _435 = (_426 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3983 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _512 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433);
    float _515 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434);
    float _518 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435);
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _564 = ((_536.x - _555) * _426) + _555;
    float _565 = ((_536.y - _556) * _426) + _556;
    float _566 = ((_536.z - _557) * _426) + _557;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _591 = ((_578.z - _566) * _499) + _566;
    float _594 = ((((_578.x - _564) * _499) + _564) * 2.0) + (-1.0);
    float _596 = ((((_578.y - _565) * _499) + _565) * 2.0) + (-1.0);
    float _597 = dot(vec2(_594, _596), vec2(_594, _596));
    float _3994 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _602 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _628 = (((_616.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _594;
    float _629 = (((_616.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _632 = fma(_602, _236, fma(_629, _243, _628 * _229));
    float _635 = fma(_602, _237, fma(_629, _244, _628 * _230));
    float _638 = fma(_602, _238, fma(_629, _245, _628 * _231));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _681 = (cbMtdParam._m0[19u].x + dot(vec4(_642 * _632, _642 * _635, _642 * _638, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_671 - _672) * cbMtdParam._m0[24u].z) + _672) * cbMtdParam._m0[21u].z);
    float _4005 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _689 = (_682 * (cbMtdParam._m0[17u].x - _512)) + _512;
    float _690 = (_682 * (cbMtdParam._m0[17u].y - _515)) + _515;
    float _691 = (_682 * (cbMtdParam._m0[17u].z - _518)) + _518;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _736 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _719) * _426) + _719;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _736) * _499) + _736;
    float _757 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _759 = _757 - (_757 * _682);
    float _763 = (cbMtdParam._m0[19u].w * (_616.z - _591)) + _591;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _783 = (_776.x * 2.0) + (-1.0);
    float _784 = (_776.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _4016 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _793 = ((_776.z - _763) * _682) + _763;
    float _803 = ((sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _602) * _682) + _602;
    float _806 = (((_783 - _628) * _682) + _628) + (cbMtdParam._m0[21u].x * _628);
    float _807 = (((_784 - _629) * _682) + _629) + (cbMtdParam._m0[21u].x * _629);
    float _809 = cbMtdParam._m0[22u].x + _616.w;
    float _812 = fma(_803, _236, fma(_807, _243, _806 * _229));
    float _815 = fma(_803, _237, fma(_807, _244, _806 * _230));
    float _818 = fma(_803, _238, fma(_807, _245, _806 * _231));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _4027 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _826 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4049 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4060 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4071 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4082 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _831 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _845 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    float _911 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _912 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _930 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _933 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _936 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _950 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_950].z;
    float _4093 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _962 = 1.0 - _831;
    float _963 = _959 * _962;
    float _964 = _960 * _962;
    float _965 = _961 * _962;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _831;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _831;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _831;
    float _973 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _911, cbSceneParam._m0[86u].y * _912));
    float _989 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _985.x;
    float _990 = dot(vec3(_823, _824, _825), vec3(_903, _904, _905));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _823) - _903;
    float _998 = (_993 * _824) - _904;
    float _999 = (_993 * _825) - _905;
    float _1003 = abs(dot(vec3(_903, _904, _905), vec3(_823, _824, _825)));
    float _4126 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_826);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1024 = (1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1025 = _1018 * _1005;
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1091 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1095 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1120 = _1053 + _823;
        float _1121 = _1057 + _824;
        float _1122 = _1061 + _825;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_823, _824, _825), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4174 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_823, _824, _825), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4207 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_823, _824, _825), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4240 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1405 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1409 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1432 = _1053 + _823;
        float _1433 = _1057 + _824;
        float _1434 = _1061 + _825;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_823, _824, _825), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4303 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_823, _824, _825), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4336 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_823, _824, _825), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4369 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1363;
        _1671 = _1363;
        _1672 = _1363;
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1375)) + _1375;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1376)) + _1376;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1377)) + _1377;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _997 * 0.5;
    float _1739 = _998 * 0.5;
    float _1740 = _999 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1869 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1872 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1900 = frontier_phi_14_12_ladder;
        }
        float _2072;
        if (_1869 > 0.0)
        {
            _2072 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2072 = frontier_phi_23_19_ladder;
        }
        float _2367;
        if (_1872 > 0.0)
        {
            _2367 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2367 = frontier_phi_35_30_ladder;
        }
        float _2369 = isnan(_2072) ? _1900 : (isnan(_1900) ? _2072 : min(_1900, _2072));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1866) + _1855;
        float _2375 = (_2370 * _1869) + _1859;
        float _2376 = (_2370 * _1872) + _1863;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_13_35_ladder = _2521.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2521.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2521.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_13_35_ladder_2;
        _1890 = frontier_phi_13_35_ladder_1;
        _1892 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1807);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1965 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _1968 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2077;
        if (_1962 > 0.0)
        {
            _2077 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2077 = frontier_phi_25_21_ladder;
        }
        float _2394;
        if (_1965 > 0.0)
        {
            _2394 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2394 = frontier_phi_37_32_ladder;
        }
        float _2732;
        if (_1968 > 0.0)
        {
            _2732 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2732 = frontier_phi_47_44_ladder;
        }
        float _2734 = isnan(_2394) ? _2077 : (isnan(_2077) ? _2394 : min(_2077, _2394));
        float _2735 = isnan(_2732) ? _2734 : (isnan(_2734) ? _2732 : min(_2734, _2732));
        float _2739 = (_2735 * _1962) + _1951;
        float _2740 = (_2735 * _1965) + _1955;
        float _2741 = (_2735 * _1968) + _1959;
        float _2742 = _2735 * 9.9999997473787516355514526367188e-05;
        float _2743 = (-1.0) - _2742;
        float _2745 = _2742 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2741 > _2745) || ((_2741 < _2743) || ((_2740 > _2745) || ((_2740 < _2743) || ((_2739 < _2743) || (_2739 > _2745))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2741, cbModelParam._m0[17u].z, fma(_2740, cbModelParam._m0[17u].y, _2739 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2741, cbModelParam._m0[18u].z, fma(_2740, cbModelParam._m0[18u].y, _2739 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2741, cbModelParam._m0[19u].z, fma(_2740, cbModelParam._m0[19u].y, _2739 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_22_47_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_22_47_ladder_2;
        _1989 = frontier_phi_22_47_ladder_1;
        _1991 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1897);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2004 = (((_1024 * _973) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2006 = (((_1024 * _975) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2008 = (((_1024 * _976) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2006, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2006, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2006, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2064 = _2051 / _2063;
    float _2065 = _2055 / _2063;
    float _2066 = _2059 / _2063;
    float _2213;
    float _2214;
    float _2215;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2093 = ((uint(_2066 > cbSceneParam._m0[59u].y) + uint(_2066 > cbSceneParam._m0[59u].x)) + uint(_2066 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2094 = _2093 + 43u;
        uint _2102 = _2093 + 44u;
        uint _2110 = _2093 + 45u;
        uint _2118 = _2093 + 46u;
        float _2129 = fma(_2063, cbSceneParam._m0[_2094].w, fma(_2059, cbSceneParam._m0[_2094].z, fma(_2055, cbSceneParam._m0[_2094].y, _2051 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2063, cbSceneParam._m0[_2102].w, fma(_2059, cbSceneParam._m0[_2102].z, fma(_2055, cbSceneParam._m0[_2102].y, _2051 * cbSceneParam._m0[_2102].x)));
        float _2141 = fma(_2063, cbSceneParam._m0[_2118].w, fma(_2059, cbSceneParam._m0[_2118].z, fma(_2055, cbSceneParam._m0[_2118].y, _2051 * cbSceneParam._m0[_2118].x)));
        float _2146 = cbSceneParam._m0[33u].z * _2141;
        float _2148 = cbSceneParam._m0[33u].w * _2141;
        float _2151 = fma(_2063, cbSceneParam._m0[_2110].w, fma(_2059, cbSceneParam._m0[_2110].z, fma(_2055, cbSceneParam._m0[_2110].y, _2051 * cbSceneParam._m0[_2110].x))) / _2141;
        float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
        float _4495 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2206 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2129) / _2141, (_2148 + _2133) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2129) / _2141, (_2133 - _2146) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2146) / _2141, (_2133 - _2148) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2148) / _2141, (_2146 + _2133) / _2141), _2151), 0.0)).x), vec4(0.25)));
        _2213 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
        _2214 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
        _2215 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2213 = 1.0;
        _2214 = 1.0;
        _2215 = 1.0;
    }
    float _2279;
    float _2281;
    float _2283;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2267 = fma(_2063, cbSceneParam._m0[63u].w, fma(_2059, cbSceneParam._m0[63u].z, fma(_2055, cbSceneParam._m0[63u].y, _2051 * cbSceneParam._m0[63u].x)));
        float _2268 = fma(_2063, cbSceneParam._m0[60u].w, fma(_2059, cbSceneParam._m0[60u].z, fma(_2055, cbSceneParam._m0[60u].y, _2051 * cbSceneParam._m0[60u].x))) / _2267;
        float _2269 = fma(_2063, cbSceneParam._m0[61u].w, fma(_2059, cbSceneParam._m0[61u].z, fma(_2055, cbSceneParam._m0[61u].y, _2051 * cbSceneParam._m0[61u].x))) / _2267;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2268 >= cbSceneParam._m0[64u].x) && (_2269 >= cbSceneParam._m0[64u].y)) && (_2268 <= cbSceneParam._m0[64u].z)) && (_2269 <= cbSceneParam._m0[64u].w))
        {
            float _2407 = fma(_2063, cbSceneParam._m0[62u].w, fma(_2059, cbSceneParam._m0[62u].z, fma(_2055, cbSceneParam._m0[62u].y, _2051 * cbSceneParam._m0[62u].x))) / _2267;
            float _2411 = isnan(cbSceneParam._m0[41u].w) ? _2407 : (isnan(_2407) ? cbSceneParam._m0[41u].w : max(_2407, cbSceneParam._m0[41u].w));
            float _2454 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
            float _4511 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
            float _2461 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2268, cbSceneParam._m0[33u].w + _2269), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2268, _2269 - cbSceneParam._m0[33u].z), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].z, _2269 - cbSceneParam._m0[33u].w), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2269), _2411), 0.0)).x), vec4(0.25)));
            float _2465 = 1.0 - (_2461 * cbSceneParam._m0[34u].x);
            float _2466 = 1.0 - (_2461 * cbSceneParam._m0[34u].y);
            float _2467 = 1.0 - (_2461 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
            frontier_phi_34_33_ladder_1 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
            frontier_phi_34_33_ladder_2 = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
        }
        else
        {
            frontier_phi_34_33_ladder = _2215;
            frontier_phi_34_33_ladder_1 = _2214;
            frontier_phi_34_33_ladder_2 = _2213;
        }
        _2279 = frontier_phi_34_33_ladder_2;
        _2281 = frontier_phi_34_33_ladder_1;
        _2283 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2279 = _2213;
        _2281 = _2214;
        _2283 = _2215;
    }
    uvec4 _2288 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2290 = _2288.x * 14u;
    uint _2291 = _2290 + 13u;
    float _2298 = _989 + (-1.0);
    float _2303 = (cbLight._m0[_2291].x * _2298) + 1.0;
    float _2304 = (cbLight._m0[_2291].y * _2298) + 1.0;
    float _2305 = (cbLight._m0[_2291].z * _2298) + 1.0;
    float _2306 = (cbLight._m0[_2291].w * _2298) + 1.0;
    uint _2307 = _2290 + 5u;
    float _2313 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2317 = _2290 + 4u;
    float _2326 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2330 = _2290 | 1u;
    float _2341 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_823, _824, _825));
    float _2344 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_823, _824, _825));
    float _4547 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _4558 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2349 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2351 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2358 = ((cbLight._m0[_2307].x * _2313) * _2351) + (((cbLight._m0[_2317].x * _2279) * _2326) * _2349);
    float _2359 = ((_2313 * cbLight._m0[_2307].y) * _2351) + (((cbLight._m0[_2317].y * _2281) * _2326) * _2349);
    float _2360 = ((_2313 * cbLight._m0[_2307].z) * _2351) + (((cbLight._m0[_2317].z * _2283) * _2326) * _2349);
    uvec4 _2364 = floatBitsToUint(cbLight._m0[_2290 + 12u]);
    bool _2366 = _2364.x == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2366)
    {
        _2468 = _2358;
        _2470 = _2359;
        _2472 = _2360;
    }
    else
    {
        uint _2476 = _2290 + 6u;
        float _2492 = (dot(vec3(cbLight._m0[_2290 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4569 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2495 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2468 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2358;
        _2470 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2359;
        _2472 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2360;
    }
    bool _2475 = _2364.y == 0u;
    float _2530;
    float _2532;
    float _2534;
    if (_2475)
    {
        _2530 = _2468;
        _2532 = _2470;
        _2534 = _2472;
    }
    else
    {
        uint _2703 = _2290 + 7u;
        float _2719 = (dot(vec3(cbLight._m0[_2290 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2720 = _2719 * _2719;
        float _4585 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2721 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2722 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2530 = (((cbLight._m0[_2703].x * 0.3183098733425140380859375) * _2721) * _2722) + _2468;
        _2532 = (((cbLight._m0[_2703].y * 0.3183098733425140380859375) * _2721) * _2722) + _2470;
        _2534 = (((cbLight._m0[_2703].z * 0.3183098733425140380859375) * _2721) * _2722) + _2472;
    }
    uint _2537 = _2290 + 8u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _826) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2290].x + _903;
    float _2553 = cbLight._m0[_2290].y + _904;
    float _2554 = cbLight._m0[_2290].z + _905;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2290].xyz));
    float _4601 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _4612 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2566 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2567 = dot(vec3(_823, _824, _825), vec3(_2559, _2560, _2561));
    float _4623 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2559, _2560, _2561));
    float _4634 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2551 * _2551;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2588 = 0.959999978542327880859375 - _970;
    float _2590 = 0.959999978542327880859375 - _971;
    float _2591 = 0.959999978542327880859375 - _972;
    float _2598 = 1.0 - _2551;
    float _2609 = (0.5 / (((_2566 * ((_2565 * _2598) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2598) + _2551) * _2565))) * _2565;
    float _4645 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    uint _2625 = _2290 + 9u;
    float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _826) * 0.949999988079071044921875);
    float _2637 = _2636 * _2636;
    float _2638 = cbLight._m0[_2330].x + _903;
    float _2639 = cbLight._m0[_2330].y + _904;
    float _2640 = cbLight._m0[_2330].z + _905;
    float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
    float _2645 = _2644 * _2638;
    float _2646 = _2644 * _2639;
    float _2647 = _2644 * _2640;
    float _2648 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2330].xyz));
    float _4656 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2652 = dot(vec3(_823, _824, _825), vec3(_2645, _2646, _2647));
    float _4667 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2656 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2645, _2646, _2647));
    float _4678 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2660 = _2637 * _2637;
    float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
    float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2678 = 1.0 - _2637;
    float _2688 = (0.5 / (((_2566 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2678) + _2637) * _2651))) * _2651;
    float _4689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2690 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
    float _2700 = (((((_2671 * _2588) + _973) * cbLight._m0[_2625].x) * _2690) * _2313) + ((((cbLight._m0[_2537].x * _2279) * ((_2587 * _2588) + _973)) * _2611) * _2326);
    float _2701 = (((((_2671 * _2590) + _975) * cbLight._m0[_2625].y) * _2690) * _2313) + ((((cbLight._m0[_2537].y * _2281) * ((_2587 * _2590) + _975)) * _2611) * _2326);
    float _2702 = (((((_2671 * _2591) + _976) * cbLight._m0[_2625].z) * _2690) * _2313) + ((((cbLight._m0[_2537].z * _2283) * ((_2587 * _2591) + _976)) * _2611) * _2326);
    float _2758;
    float _2760;
    float _2762;
    if (_2366)
    {
        _2758 = _2700;
        _2760 = _2701;
        _2762 = _2702;
    }
    else
    {
        uint _2764 = _2290 + 2u;
        uint _2768 = _2290 + 10u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _826) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _903;
        float _2785 = cbLight._m0[_2764].y + _904;
        float _2786 = cbLight._m0[_2764].z + _905;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2764].xyz));
        float _4700 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2798 = dot(vec3(_823, _824, _825), vec3(_2791, _2792, _2793));
        float _4711 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4722 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
        float _2824 = 1.0 - _2783;
        float _2834 = (0.5 / (((_2566 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2824) + _2783) * _2797))) * _2797;
        float _4733 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2836 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2837 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2758 = (((((_2817 * _2588) + _973) * cbLight._m0[_2768].x) * _2836) * _2837) + _2700;
        _2760 = (((((_2817 * _2590) + _975) * cbLight._m0[_2768].y) * _2836) * _2837) + _2701;
        _2762 = (((((_2817 * _2591) + _976) * cbLight._m0[_2768].z) * _2836) * _2837) + _2702;
    }
    float _2868;
    float _2870;
    float _2872;
    if (_2475)
    {
        _2868 = _2758;
        _2870 = _2760;
        _2872 = _2762;
    }
    else
    {
        uint _2879 = _2290 + 3u;
        uint _2883 = _2290 + 11u;
        float _2897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2879].w)) * _826) * 0.949999988079071044921875);
        float _2898 = _2897 * _2897;
        float _2899 = cbLight._m0[_2879].x + _903;
        float _2900 = cbLight._m0[_2879].y + _904;
        float _2901 = cbLight._m0[_2879].z + _905;
        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
        float _2906 = _2905 * _2899;
        float _2907 = _2905 * _2900;
        float _2908 = _2905 * _2901;
        float _2909 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2879].xyz));
        float _4749 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2913 = dot(vec3(_823, _824, _825), vec3(_2906, _2907, _2908));
        float _4760 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2917 = dot(vec3(cbLight._m0[_2879].xyz), vec3(_2906, _2907, _2908));
        float _4771 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2921 = _2898 * _2898;
        float _2925 = ((_2916 * _2916) * (_2921 + (-1.0))) + 1.0;
        float _2932 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2939 = 1.0 - _2898;
        float _2949 = (0.5 / (((_2566 * ((_2912 * _2939) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2939) + _2898) * _2912))) * _2912;
        float _4782 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2921 / ((_2925 * _2925) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2868 = (((((_2932 * _2588) + _973) * cbLight._m0[_2883].x) * _2951) * _2952) + _2758;
        _2870 = (((((_2932 * _2590) + _975) * cbLight._m0[_2883].y) * _2951) * _2952) + _2760;
        _2872 = (((((_2932 * _2591) + _976) * cbLight._m0[_2883].z) * _2951) * _2952) + _2762;
    }
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_2288.y == 0u)
    {
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.x;
        uint _2985 = uint((float(_2973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _912) / _2974))) + floor(float(uint(cbSceneParam._m0[85u].x * _911) / _2974)));
        float _2995 = (log2(_2066 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2996 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        uint _2999 = uint(isnan(14.0) ? _2996 : (isnan(_2996) ? 14.0 : min(_2996, 14.0)));
        uvec4 _3004 = texelFetch(g_lightClusterGridBuffer, int(((_2999 << 2u) + (_2985 << 6u)) >> 2u));
        uint _3005 = _3004.x;
        uint _3006 = _2973.z;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((((1u << ((_3006 >> 4u) & 15u)) + 4294967295u) & _3005) == 0u) || ((_3006 & 240u) == 0u))
        {
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
        }
        else
        {
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            uint _3236 = 0u;
            uint _3245;
            bool _3246;
            for (;;)
            {
                _3245 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                _3246 = _3245 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3246)
                {
                    frontier_phi_66_pred = _3235;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                else
                {
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    uint _3360;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3245;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    for (;;)
                    {
                        uint _3364 = uint(findLSB(_3360)) + (_3236 << 5u);
                        uint _3361 = (_3360 + 4294967295u) & _3360;
                        uint _3366 = _3364 * 48u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 3u)).x));
                        uint _3386 = (_3364 * 48u) + 4u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 3u)).x));
                        uint _3405 = (_3364 * 48u) + 8u;
                        vec3 _3416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x));
                        float _3420 = _3380.x - _2064;
                        float _3421 = _3380.y - _2065;
                        float _3422 = _3380.z - _2066;
                        float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                        float _3426 = inversesqrt(_3423);
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3430 = dot(vec3(_930, _933, _936), vec3(_3427, _3428, _3429));
                        float _3435 = 1.0 - (_3423 * _3380.w);
                        float _4808 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3437 = sqrt(_3423) * _3399.w;
                        float _3440 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3430) + _3441;
                        float _3447 = _3437 * _3437;
                        float _3451 = ((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3436) / ((_3447 * 0.699999988079071044921875) + 1.0);
                        float _3455 = (-0.0) - _2064;
                        float _3456 = (-0.0) - _2065;
                        float _3457 = (-0.0) - _2066;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3471 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                        float _3472 = 1.0 - _1005;
                        float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                        float _3480 = _3479 * _3479;
                        float _3481 = _3480 * _3480;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3484 = _3464 + _3429;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3492 = dot(vec3(_930, _933, _936), vec3(_3462, _3463, _3464));
                        float _4824 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3496 = dot(vec3(_930, _933, _936), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                        float _4835 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3499 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                        float _3504 = _3440 * _3480;
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3430) + _3505;
                        float _4846 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3509 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3510 = 1.0 - _3480;
                        float _3520 = (0.5 / (((_3509 * ((_3495 * _3510) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3480) * _3495))) * _3509;
                        float _4857 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3531 = (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3503 * _3503) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125))) * _3436;
                        _3289 = (_3451 * _3399.x) + _3357;
                        _3290 = (_3451 * _3399.y) + _3358;
                        _3291 = (_3451 * _3399.z) + _3359;
                        _3286 = (_3531 * _3416.x) + _3354;
                        _3287 = (_3531 * _3416.y) + _3355;
                        _3288 = (_3531 * _3416.z) + _3356;
                        if (_3361 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3361;
                        }
                    }
                    frontier_phi_66_pred = _3291;
                    frontier_phi_66_pred_1 = _3290;
                    frontier_phi_66_pred_2 = _3289;
                    frontier_phi_66_pred_3 = _3288;
                    frontier_phi_66_pred_4 = _3287;
                    frontier_phi_66_pred_5 = _3286;
                }
                _3096 = frontier_phi_66_pred;
                _3094 = frontier_phi_66_pred_1;
                _3092 = frontier_phi_66_pred_2;
                _3090 = frontier_phi_66_pred_3;
                _3088 = frontier_phi_66_pred_4;
                _3086 = frontier_phi_66_pred_5;
                uint _3237 = _3236 + 1u;
                if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3230 = _3086;
                    _3231 = _3088;
                    _3232 = _3090;
                    _3233 = _3092;
                    _3234 = _3094;
                    _3235 = _3096;
                    _3236 = _3237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
        }
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.z;
        uint _3102 = (_3100 >> 8u) & 15u;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((4294967295u << _3102) & _3005) == 0u)
        {
            _3198 = _3085;
            _3200 = _3087;
            _3202 = _3089;
            _3204 = _3091;
            _3206 = _3093;
            _3208 = _3095;
        }
        else
        {
            float _3223 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
            float _3224 = _3223 * _2064;
            float _3225 = _3223 * _2065;
            float _3226 = _3223 * _2066;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3102 < ((_3100 >> 12u) & 15u))
            {
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3337 = _3085;
                float _3338 = _3087;
                float _3339 = _3089;
                float _3340 = _3091;
                float _3341 = _3093;
                float _3342 = _3095;
                uint _3343 = _3102;
                uint _3352;
                bool _3353;
                for (;;)
                {
                    _3352 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3343 << 2u)) >> 2u)).x;
                    _3353 = _3352 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3353)
                    {
                        frontier_phi_72_pred = _3342;
                        frontier_phi_72_pred_1 = _3341;
                        frontier_phi_72_pred_2 = _3340;
                        frontier_phi_72_pred_3 = _3339;
                        frontier_phi_72_pred_4 = _3338;
                        frontier_phi_72_pred_5 = _3337;
                    }
                    else
                    {
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        uint _3555 = _3352;
                        uint _3556;
                        vec4 _3581;
                        float _3582;
                        vec4 _3597;
                        vec3 _3609;
                        vec4 _3624;
                        vec4 _3639;
                        float _3685;
                        bool _3686;
                        for (;;)
                        {
                            uint _3566 = ((_3343 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3555));
                            _3556 = (_3555 + 4294967295u) & _3555;
                            uint _3568 = _3566 * 40u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3582 = _3581.w;
                            uint _3584 = (_3566 * 40u) + 4u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3566 * 40u) + 8u;
                            _3609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x));
                            uint _3611 = (_3566 * 40u) + 16u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3566 * 40u) + 20u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3566 * 40u) + 24u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3660 = (_3566 * 40u) + 28u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3685 = fma(_2066, _3673.z, fma(_2065, _3673.y, _3673.x * _2064)) + _3673.w;
                            _3686 = !((fma(_2066, _3654.z, fma(_2065, _3654.y, _3654.x * _2064)) + _3654.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3686)
                            {
                                float _3713 = _3581.x - _2064;
                                float _3714 = _3581.y - _2065;
                                float _3715 = _3581.z - _2066;
                                float _3716 = dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715));
                                float _3719 = inversesqrt(_3716);
                                float _3720 = _3719 * _3713;
                                float _3721 = _3719 * _3714;
                                float _3722 = _3719 * _3715;
                                float _3726 = 1.0 - (_3716 / (_3582 * _3582));
                                float _4868 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3731 = sqrt(_3716) * _3597.w;
                                float _3733 = 1.39999997615814208984375 / (_3731 + 1.39999997615814208984375);
                                float _3734 = _3733 * _3733;
                                float _3737 = ((1.0 - _3734) * dot(vec3(_3720, _3721, _3722), vec3(_930, _933, _936))) + _3734;
                                float _3740 = _3731 * _3731;
                                float _3744 = (fma(_2066, _3624.z, fma(_2065, _3624.y, _3624.x * _2064)) + _3624.w) / _3685;
                                float _3745 = (fma(_2066, _3639.z, fma(_2065, _3639.y, _3639.x * _2064)) + _3639.w) / _3685;
                                float _3749 = 1.0 - dot(vec2(_3744, _3745), vec2(_3744, _3745));
                                float _4884 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3751 = _3750 * (((isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0))) * _3727) / ((_3740 * 0.699999988079071044921875) + 1.0));
                                float _3763 = exp2(log2(1.0 / ((_3740 * 3.5) + 5.0)) * 0.25);
                                float _3764 = 1.0 - _1005;
                                float _3771 = sqrt(1.0 - ((1.0 - (_3764 * _3764)) * (1.0 - (_3763 * _3763))));
                                float _3772 = _3771 * _3771;
                                float _3773 = _3772 * _3772;
                                float _3774 = _3720 - _3224;
                                float _3775 = _3721 - _3225;
                                float _3776 = _3722 - _3226;
                                float _3780 = inversesqrt(dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776)));
                                float _3784 = dot(vec3(_930, _933, _936), vec3((-0.0) - _3224, (-0.0) - _3225, (-0.0) - _3226));
                                float _4895 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3788 = dot(vec3(_930, _933, _936), vec3(_3780 * _3774, _3780 * _3775, _3780 * _3776));
                                float _4906 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3795 = ((_3791 * _3791) * (_3773 + (-1.0))) + 1.0;
                                float _3796 = _3733 * _3772;
                                float _3797 = _3796 * _3796;
                                float _3803 = ((1.0 - _3797) * dot(vec3(_930, _933, _936), vec3(_3720, _3721, _3722))) + _3797;
                                float _4917 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3805 = 1.0 - _3772;
                                float _3815 = (0.5 / (((_3804 * ((_3787 * _3805) + _3772)) + 9.9999999392252902907785028219223e-09) + (((_3804 * _3805) + _3772) * _3787))) * _3804;
                                float _4928 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3825 = (_3750 * _3727) * (((_3773 * 3.1415927410125732421875) * (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) / ((_3795 * _3795) * ((_3740 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3751 * _3597.y;
                                frontier_phi_78_pred_1 = _3751 * _3597.x;
                                frontier_phi_78_pred_2 = _3825 * _3609.z;
                                frontier_phi_78_pred_3 = _3825 * _3609.y;
                                frontier_phi_78_pred_4 = _3825 * _3609.x;
                                frontier_phi_78_pred_5 = _3751 * _3597.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_78_pred;
                            _3832 = frontier_phi_78_pred_1;
                            _3831 = frontier_phi_78_pred_2;
                            _3830 = frontier_phi_78_pred_3;
                            _3829 = frontier_phi_78_pred_4;
                            _3834 = frontier_phi_78_pred_5;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            if (_3556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3556;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3541;
                        frontier_phi_72_pred_1 = _3540;
                        frontier_phi_72_pred_2 = _3539;
                        frontier_phi_72_pred_3 = _3538;
                        frontier_phi_72_pred_4 = _3537;
                        frontier_phi_72_pred_5 = _3536;
                    }
                    _3209 = frontier_phi_72_pred;
                    _3207 = frontier_phi_72_pred_1;
                    _3205 = frontier_phi_72_pred_2;
                    _3203 = frontier_phi_72_pred_3;
                    _3201 = frontier_phi_72_pred_4;
                    _3199 = frontier_phi_72_pred_5;
                    uint _3344 = _3343 + 1u;
                    if (_3344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3337 = _3199;
                        _3338 = _3201;
                        _3339 = _3203;
                        _3340 = _3205;
                        _3341 = _3207;
                        _3342 = _3209;
                        _3343 = _3344;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3209;
                frontier_phi_60_61_ladder_1 = _3207;
                frontier_phi_60_61_ladder_2 = _3203;
                frontier_phi_60_61_ladder_3 = _3201;
                frontier_phi_60_61_ladder_4 = _3199;
                frontier_phi_60_61_ladder_5 = _3205;
            }
            else
            {
                frontier_phi_60_61_ladder = _3095;
                frontier_phi_60_61_ladder_1 = _3093;
                frontier_phi_60_61_ladder_2 = _3089;
                frontier_phi_60_61_ladder_3 = _3087;
                frontier_phi_60_61_ladder_4 = _3085;
                frontier_phi_60_61_ladder_5 = _3091;
            }
            _3198 = frontier_phi_60_61_ladder_4;
            _3200 = frontier_phi_60_61_ladder_3;
            _3202 = frontier_phi_60_61_ladder_2;
            _3204 = frontier_phi_60_61_ladder_5;
            _3206 = frontier_phi_60_61_ladder_1;
            _3208 = frontier_phi_60_61_ladder;
        }
        float _3213 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _3018 = (_3213 * _3204) + _2530;
        _3020 = (_3213 * _3206) + _2532;
        _3022 = (_3213 * _3208) + _2534;
        _3024 = ((_3198 * _973) * _3213) + _2868;
        _3026 = ((_3200 * _975) * _3213) + _2870;
        _3028 = ((_3202 * _976) * _3213) + _2872;
    }
    else
    {
        _3018 = _2530;
        _3020 = _2532;
        _3022 = _2534;
        _3024 = _2868;
        _3026 = _2870;
        _3028 = _2872;
    }
    float _4944 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4955 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4966 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    uint _3048 = _248 + 6u;
    float _3056 = _911 / cbSceneParam._m0[86u].x;
    float _3057 = _912 / cbSceneParam._m0[86u].y;
    vec4 _3071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, (log2((isnan(cbSceneParam._m0[77u].w) ? _845 : (isnan(_845) ? cbSceneParam._m0[77u].w : min(_845, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3073 = _3071.x;
    float _3074 = _3071.y;
    float _3075 = _3071.z;
    float _3076 = _3071.w;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_845 > cbSceneParam._m0[78u].w)
    {
        float _3110 = isnan(_845) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _845 : min(cbSceneParam._m0[80u].w, _845));
        float _3111 = _3110 / _845;
        float _3122 = _3111 * _896;
        float _3123 = _897 * _3111;
        float _3124 = (-0.0) - _3123;
        float _3126 = _3111 * _898;
        float _3128 = (cbSceneParam._m0[77u].w * _3124) / _3110;
        float _3129 = _3128 + cbSceneParam._m0[79u].w;
        float _3130 = cbSceneParam._m0[79u].w - _3123;
        float _3136 = sqrt(((_3122 * _3122) + (_3123 * _3123)) + (_3126 * _3126));
        float _3139 = (1.0 - (cbSceneParam._m0[77u].w / _3110)) * _3136;
        float _3144 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3146 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3299;
        if (abs((_3124 - _3128) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3299 = ((((_3129 > 0.0) ? exp2(_3144 * _3129) : (2.0 - exp2(_3146 * _3129))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3139;
        }
        else
        {
            float _3259 = 1.0 / cbSceneParam._m0[80u].x;
            float _3260 = isnan(_3130) ? _3129 : (isnan(_3129) ? _3130 : max(_3129, _3130));
            float _3261 = isnan(_3130) ? _3129 : (isnan(_3129) ? _3130 : min(_3129, _3130));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            _3299 = ((abs(_3136 / _3124) * cbSceneParam._m0[80u].y) * ((((_3270 - _3271) * 2.0) - ((exp2(_3144 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0)))) - exp2(_3144 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))))) * _3259)) - ((exp2(_3146 * _3270) - exp2(_3146 * _3271)) * _3259))) + (_3139 * cbSceneParam._m0[80u].z);
        }
        vec4 _3301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, 1.0), 0.0);
        float _3310 = exp2((_3299 * (-1.44269502162933349609375)) * (1.0 - _3301.w));
        float _3311 = log2(_3310);
        float _3327 = log2(_3076);
        _3148 = (exp2(_3327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].x)) * _3301.x) / cbSceneParam._m0[78u].x)) + _3073;
        _3150 = (exp2(_3327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].y)) * _3301.y) / cbSceneParam._m0[78u].y)) + _3074;
        _3152 = (exp2(_3327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].z)) * _3301.z) / cbSceneParam._m0[78u].z)) + _3075;
        _3154 = _3310 * _3076;
    }
    else
    {
        _3148 = _3073;
        _3150 = _3074;
        _3152 = _3075;
        _3154 = _3076;
    }
    float _3166 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3167 = _3166 == 3.0;
    float _3168 = log2(_3154);
    float _3175 = exp2(_3168 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_3018 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _989))) + ((_3024 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3176 = exp2(_3168 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_3020 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _989))) + ((_3026 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3177 = exp2(_3168 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_3022 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _989))) + ((_3028 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3186 = (_3166 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3186 * (_3167 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3148)));
    SV_Target.y = _3186 * (_3167 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3150)));
    SV_Target.z = _3186 * (_3167 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3152)));
    SV_Target.w = cbInstanceData._m0[_3048].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3048].w;
}


