#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1775;
float _4435;
float _4436;
float _4437;
float _4438;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _267 = _266 * _258;
    float _268 = _266 * _259;
    float _269 = _266 * _260;
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = _273 * NORMAL.x;
    float _275 = _273 * NORMAL.y;
    float _276 = _273 * NORMAL.z;
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = _280 * TANGENT.x;
    float _282 = _280 * TANGENT.y;
    float _283 = _280 * TANGENT.z;
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4447 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4458 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4469 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _392 = _387.x * cbMtdParam._m0[11u].x;
    float _393 = _387.y * cbMtdParam._m0[11u].y;
    float _394 = _387.z * cbMtdParam._m0[11u].z;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _481 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _498 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _432.x) * 2.0) - ((((_469 - _481) * cbMtdParam._m0[23u].w) + _481) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4480 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _506 = (_499 * ((_413.x * cbMtdParam._m0[12u].x) - _392)) + _392;
    float _507 = (_499 * ((_413.y * cbMtdParam._m0[12u].y) - _393)) + _393;
    float _508 = (_499 * ((_413.z * cbMtdParam._m0[12u].z) - _394)) + _394;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _571 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _432.y) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[23u].w) + _557) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4491 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _579 = (_572 * ((_525.x * cbMtdParam._m0[13u].x) - _506)) + _506;
    float _580 = (_572 * ((_525.y * cbMtdParam._m0[13u].y) - _507)) + _507;
    float _581 = (_572 * ((_525.z * cbMtdParam._m0[13u].z) - _508)) + _508;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _629 = dot(vec4(_619, _617.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _641 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _432.z) * 2.0) - ((((_619 - _629) * cbMtdParam._m0[23u].w) + _629) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4502 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _652 = (_361.x * cbMtdParam._m0[9u].x) * ((_642 * ((_600.x * cbMtdParam._m0[14u].x) - _579)) + _579);
    float _653 = (_361.y * cbMtdParam._m0[9u].y) * ((_642 * ((_600.y * cbMtdParam._m0[14u].y) - _580)) + _580);
    float _654 = (_361.z * cbMtdParam._m0[9u].z) * ((_642 * ((_600.z * cbMtdParam._m0[14u].z) - _581)) + _581);
    float _658 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _652;
    float _661 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _653;
    float _664 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _654;
    float _672 = (((_652 - _658) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) + _658) * 4.55000019073486328125;
    float _674 = (((_653 - _661) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) + _661) * 4.55000019073486328125;
    float _676 = (((_654 - _664) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) + _664) * 4.55000019073486328125;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _737 = _735.x;
    float _738 = _735.y;
    float _739 = _735.z;
    float _746 = ((_718.x - _737) * _499) + _737;
    float _747 = ((_718.y - _738) * _499) + _738;
    float _748 = ((_718.z - _739) * _499) + _739;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _771 = ((_760.x - _746) * _572) + _746;
    float _772 = ((_760.y - _747) * _572) + _747;
    float _773 = ((_760.z - _748) * _572) + _748;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _798 = ((_785.z - _773) * _642) + _773;
    float _801 = ((((_785.x - _771) * _642) + _771) * 2.0) + (-1.0);
    float _802 = ((((_785.y - _772) * _642) + _772) * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _4513 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _808 = sqrt(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))));
    vec4 _826 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _838 = (_801 + ((((_693.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_826.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _839 = (_802 + ((((_693.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_826.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = fma(_808, _274, fma(_839, _281, _838 * _267));
    float _845 = fma(_808, _275, fma(_839, _282, _838 * _268));
    float _848 = fma(_808, _276, fma(_839, _283, _838 * _269));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    vec4 _879 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _881 = _879.x;
    float _882 = 1.0 - _881;
    float _890 = (cbMtdParam._m0[19u].x + dot(vec4(_852 * _842, _852 * _845, _852 * _848, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_881 - _882) * cbMtdParam._m0[24u].z) + _882) * cbMtdParam._m0[21u].z);
    float _4524 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _891 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _893 = (-0.0) - cbMtdParam._m0[24u].x;
    float _895 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
    float _903 = _891 - ((_891 * TEXCOORD_8.x) * _896);
    float _904 = _891 - ((_891 * TEXCOORD_8.y) * _896);
    float _905 = _891 - ((_891 * TEXCOORD_8.z) * _896);
    float _912 = (_903 * (cbMtdParam._m0[17u].x - _672)) + _672;
    float _913 = (_904 * (cbMtdParam._m0[17u].y - _674)) + _674;
    float _914 = (_905 * (cbMtdParam._m0[17u].z - _676)) + _676;
    float _929 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _930 = _929 * TEXCOORD.z;
    float _931 = _929 * TEXCOORD.w;
    vec4 _943 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _930) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _931) + cbTextureTilingScale._m0[19u].w));
    float _945 = _943.x;
    float _946 = 1.0 - _945;
    float _972 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_945 - _946) * cbMtdParam._m0[24u].w) + _946) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4545 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _973 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _981 = ((((cbMtdParam._m0[10u].x - _912) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _973) + _912;
    float _982 = ((((cbMtdParam._m0[10u].y - _913) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _973) + _913;
    float _983 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _914)) * _973) + _914;
    vec4 _1009 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1011 = _1009.x;
    float _1028 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _1011) * _499) + _1011;
    float _1045 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _1028) * _572) + _1028;
    float _1062 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _1045) * _642) + _1045;
    float _1068 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1062) * cbMtdParam._m0[19u].z) + _1062;
    float _1070 = _1068 - (_1068 * _903);
    float _1072 = _1070 - (_1070 * _973);
    float _1077 = (((_693.z - _798) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _798;
    float _1081 = ((_826.z - _1077) * cbMtdParam._m0[19u].w) + _1077;
    vec4 _1097 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1104 = (_1097.x * 2.0) + (-1.0);
    float _1105 = (_1097.y * 2.0) + (-1.0);
    float _1106 = dot(vec2(_1104, _1105), vec2(_1104, _1105));
    float _4556 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1114 = ((_1097.z - _1081) * _903) + _1081;
    float _1117 = ((cbMtdParam._m0[23u].x - _1114) * _973) + _1114;
    vec4 _1140 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _930) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _931) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1146 = (_1140.x * 2.0) + (-1.0);
    float _1147 = (_1140.y * 2.0) + (-1.0);
    float _1148 = dot(vec2(_1146, _1147), vec2(_1146, _1147));
    float _4567 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1163 = ((sqrt(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) - _808) * _905) + _808;
    float _1166 = (((_1104 - _838) * _903) + _838) + (cbMtdParam._m0[21u].x * _838);
    float _1167 = (((_1105 - _839) * _904) + _839) + (cbMtdParam._m0[21u].x * _839);
    float _1178 = (((_1146 - _1166) + (_1166 * cbMtdParam._m0[22u].z)) * _973) + _1166;
    float _1179 = (((_1147 - _1167) + (_1167 * cbMtdParam._m0[22u].z)) * _973) + _1167;
    float _1180 = (_973 * (sqrt(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) - _1163)) + _1163;
    float _1182 = cbMtdParam._m0[22u].x + _826.w;
    float _1185 = fma(_1180, _274, fma(_1179, _281, _1178 * _267));
    float _1188 = fma(_1180, _275, fma(_1179, _282, _1178 * _268));
    float _1191 = fma(_1180, _276, fma(_1179, _283, _1178 * _269));
    float _1195 = inversesqrt(dot(vec3(_1185, _1188, _1191), vec3(_1185, _1188, _1191)));
    float _1196 = _1195 * _1185;
    float _1197 = _1195 * _1188;
    float _1198 = _1195 * _1191;
    float _4578 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1199 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _4600 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4611 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4622 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4633 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1204 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _1218 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1258);
    float _1269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1258);
    float _1270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1258);
    float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
    float _1275 = _1268 * _1274;
    float _1276 = _1269 * _1274;
    float _1277 = _1270 * _1274;
    vec4 _1282 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1284 = _1282.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1456 = sqrt(((_1268 * _1268) + (_1269 * _1269)) + (_1270 * _1270));
        float _1462 = (cbMatDynParam._m0[5u].x * _1456) + cbMatDynParam._m0[5u].y;
        float _4644 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1467 = (cbMatDynParam._m0[5u].z * _1456) + cbMatDynParam._m0[5u].w;
        float _4655 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) - _1463)) + _1463) < ((_1284 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1295 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1296 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1314 = fma(_1198, cbSceneParam._m0[5u].z, fma(_1197, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1196));
    float _1317 = fma(_1198, cbSceneParam._m0[6u].z, fma(_1197, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1196));
    float _1320 = fma(_1198, cbSceneParam._m0[7u].z, fma(_1197, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1196));
    uint _1333 = _305 + 9u;
    uint _1334 = _1333 + uint(cbMatDynParam._m0[0u].w);
    float _1340 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * cbInstanceData._m0[_1334].x;
    float _1341 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * cbInstanceData._m0[_1334].y;
    float _1342 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * cbInstanceData._m0[_1334].z;
    float _4666 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _1343 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _4677 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _1344 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _4688 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
    float _1345 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _1346 = 1.0 - _1204;
    float _1347 = _1343 * _1346;
    float _1348 = _1344 * _1346;
    float _1349 = _1345 * _1346;
    float _1354 = (_1343 + (-0.039999999105930328369140625)) * _1204;
    float _1355 = (_1344 + (-0.039999999105930328369140625)) * _1204;
    float _1356 = (_1345 + (-0.039999999105930328369140625)) * _1204;
    float _1357 = _1354 + 0.039999999105930328369140625;
    float _1359 = _1355 + 0.039999999105930328369140625;
    float _1360 = _1356 + 0.039999999105930328369140625;
    vec4 _1369 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1295, cbSceneParam._m0[86u].y * _1296));
    float _1373 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * TEXCOORD_5.w) * _1369.x;
    float _1374 = dot(vec3(_1196, _1197, _1198), vec3(_1275, _1276, _1277));
    float _1377 = _1374 * 2.0;
    float _1381 = (_1377 * _1196) - _1275;
    float _1382 = (_1377 * _1197) - _1276;
    float _1383 = (_1377 * _1198) - _1277;
    float _1387 = abs(dot(vec3(_1275, _1276, _1277), vec3(_1196, _1197, _1198)));
    float _4699 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1389 = sqrt(_1199);
    float _1402 = exp2((_1389 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1389 * 3.0));
    float _1408 = (1.0 - _1402) * ((_1389 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1409 = _1402 * _1389;
    float _1437 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1441 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1445 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1774;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1499 = fma(_1445, cbModelParam._m0[26u].z, fma(_1441, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1437));
        float _1503 = fma(_1445, cbModelParam._m0[27u].z, fma(_1441, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1437));
        float _1507 = fma(_1445, cbModelParam._m0[28u].z, fma(_1441, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1437));
        float _1532 = _1437 + _1196;
        float _1533 = _1441 + _1197;
        float _1534 = _1445 + _1198;
        float _1544 = fma(_1534, cbModelParam._m0[26u].z, fma(_1533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1532)) - _1499;
        float _1545 = fma(_1534, cbModelParam._m0[27u].z, fma(_1533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1532)) - _1503;
        float _1546 = fma(_1534, cbModelParam._m0[28u].z, fma(_1533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1532)) - _1507;
        float _1550 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
        float _1563 = ((_1550 * _1544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1550 * _1545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1550 * _1546) / cbModelParam._m0[34u].z) + ((((((_1507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        float _1602 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1568.x + (-0.5));
        float _1604 = _1602 * (_1568.y + (-0.5));
        float _1605 = _1602 * (_1568.z + (-0.5));
        float _1612 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1575.x + (-0.5));
        float _1614 = _1612 * (_1575.y + (-0.5));
        float _1615 = _1612 * (_1575.z + (-0.5));
        float _1622 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1582.x + (-0.5));
        float _1624 = _1622 * (_1582.y + (-0.5));
        float _1625 = _1622 * (_1582.z + (-0.5));
        float _1632 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1589.x + (-0.5));
        float _1634 = _1632 * (_1589.y + (-0.5));
        float _1635 = _1632 * (_1589.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1656 = (dot(vec3(_1196, _1197, _1198), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4725 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1666 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4736 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4747 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_1668 + 1.0))) + _1673) * _1636;
        float _1683 = _1604 * 0.5;
        float _1684 = _1614 * 0.5;
        float _1685 = _1624 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_1196, _1197, _1198), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4758 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4769 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4780 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_1710 + 1.0))) + _1715) * _1637;
        float _1725 = _1605 * 0.5;
        float _1726 = _1615 * 0.5;
        float _1727 = _1625 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_1196, _1197, _1198), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4791 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4802 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4813 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_1752 + 1.0))) + _1757) * _1638;
        _1774 = _1605;
        _1776 = _1604;
        _1777 = _1603;
        _1778 = _1615;
        _1779 = _1614;
        _1780 = _1613;
        _1781 = _1625;
        _1782 = _1624;
        _1783 = _1623;
        _1784 = _1638;
        _1785 = _1637;
        _1786 = _1636;
        _1787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
    }
    else
    {
        _1774 = _1775;
        _1776 = _1775;
        _1777 = _1775;
        _1778 = _1775;
        _1779 = _1775;
        _1780 = _1775;
        _1781 = _1775;
        _1782 = _1775;
        _1783 = _1775;
        _1784 = _1775;
        _1785 = _1775;
        _1786 = _1775;
        _1787 = 0.0;
        _1788 = 0.0;
        _1789 = 0.0;
    }
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    float _2091;
    float _2092;
    float _2093;
    float _2094;
    float _2095;
    float _2096;
    float _2097;
    float _2098;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1815 = fma(_1445, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437));
        float _1819 = fma(_1445, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437));
        float _1823 = fma(_1445, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437));
        float _1846 = _1437 + _1196;
        float _1847 = _1441 + _1197;
        float _1848 = _1445 + _1198;
        float _1858 = fma(_1848, cbModelParam._m0[30u].z, fma(_1847, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1846)) - _1815;
        float _1859 = fma(_1848, cbModelParam._m0[31u].z, fma(_1847, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1846)) - _1819;
        float _1860 = fma(_1848, cbModelParam._m0[32u].z, fma(_1847, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1846)) - _1823;
        float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
        float _1877 = ((_1864 * _1858) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1815 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1878 = ((_1864 * _1859) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1819 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1879 = ((_1864 * _1860) / cbModelParam._m0[35u].z) + ((((((_1823 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1881 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1877, _1878, _1879), 0.0);
        vec4 _1888 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1877, _1878, _1879), 0.0);
        vec4 _1895 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1877, _1878, _1879), 0.0);
        vec4 _1902 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1877, _1878, _1879), 0.0);
        float _1914 = exp2((_1881.w + (-0.5)) * 20.0) * 2.0;
        float _1915 = _1914 * (_1881.x + (-0.5));
        float _1916 = _1914 * (_1881.y + (-0.5));
        float _1917 = _1914 * (_1881.z + (-0.5));
        float _1924 = exp2((_1888.w + (-0.5)) * 20.0) * 2.0;
        float _1925 = _1924 * (_1888.x + (-0.5));
        float _1926 = _1924 * (_1888.y + (-0.5));
        float _1927 = _1924 * (_1888.z + (-0.5));
        float _1934 = exp2((_1895.w + (-0.5)) * 20.0) * 2.0;
        float _1935 = _1934 * (_1895.x + (-0.5));
        float _1936 = _1934 * (_1895.y + (-0.5));
        float _1937 = _1934 * (_1895.z + (-0.5));
        float _1944 = exp2((_1902.w + (-0.5)) * 20.0) * 2.0;
        float _1945 = _1944 * (_1902.x + (-0.5));
        float _1946 = _1944 * (_1902.y + (-0.5));
        float _1947 = _1944 * (_1902.z + (-0.5));
        float _1948 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1949 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1950 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1951 = _1915 * 0.5;
        float _1952 = _1925 * 0.5;
        float _1953 = _1935 * 0.5;
        float _1954 = dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953));
        float _1959 = (_1954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1954);
        float _1967 = (dot(vec3(_1196, _1197, _1198), vec3(_1959 * _1951, _1959 * _1952, _1959 * _1953)) + 1.0) * 0.5;
        float _4854 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1976 = sqrt(((_1952 * _1952) + (_1951 * _1951)) + (_1953 * _1953)) / (_1948 + 9.9999997473787516355514526367188e-06);
        float _4865 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _1978 = _1977 * 2.0;
        float _1982 = (1.0 - _1977) / (_1977 + 1.0);
        float _4876 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _1992 = ((((1.0 - _1983) * (_1978 + 2.0)) * exp2(log2(isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_1978 + 1.0))) + _1983) * _1948;
        float _1993 = _1916 * 0.5;
        float _1994 = _1926 * 0.5;
        float _1995 = _1936 * 0.5;
        float _1996 = dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995));
        float _2001 = (_1996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1996);
        float _2009 = (dot(vec3(_1196, _1197, _1198), vec3(_2001 * _1993, _2001 * _1994, _2001 * _1995)) + 1.0) * 0.5;
        float _4887 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2018 = sqrt(((_1994 * _1994) + (_1993 * _1993)) + (_1995 * _1995)) / (_1949 + 9.9999997473787516355514526367188e-06);
        float _4898 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _2020 = _2019 * 2.0;
        float _2024 = (1.0 - _2019) / (_2019 + 1.0);
        float _4909 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _2034 = ((((1.0 - _2025) * (_2020 + 2.0)) * exp2(log2(isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2020 + 1.0))) + _2025) * _1949;
        float _2035 = _1917 * 0.5;
        float _2036 = _1927 * 0.5;
        float _2037 = _1937 * 0.5;
        float _2038 = dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037));
        float _2043 = (_2038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2038);
        float _2051 = (dot(vec3(_1196, _1197, _1198), vec3(_2043 * _2035, _2043 * _2036, _2043 * _2037)) + 1.0) * 0.5;
        float _4920 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2060 = sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037)) / (_1950 + 9.9999997473787516355514526367188e-06);
        float _4931 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2061 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _2062 = _2061 * 2.0;
        float _2066 = (1.0 - _2061) / (_2061 + 1.0);
        float _4942 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2076 = ((((1.0 - _2067) * (_2062 + 2.0)) * exp2(log2(isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2062 + 1.0))) + _2067) * _1950;
        _2084 = _1917;
        _2085 = _1916;
        _2086 = _1915;
        _2087 = _1927;
        _2088 = _1926;
        _2089 = _1925;
        _2090 = _1937;
        _2091 = _1936;
        _2092 = _1935;
        _2093 = _1950;
        _2094 = _1949;
        _2095 = _1948;
        _2096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)));
        _2097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)));
        _2098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)));
    }
    else
    {
        _2084 = _1775;
        _2085 = _1775;
        _2086 = _1775;
        _2087 = _1775;
        _2088 = _1775;
        _2089 = _1775;
        _2090 = _1775;
        _2091 = _1775;
        _2092 = _1775;
        _2093 = _1775;
        _2094 = _1775;
        _2095 = _1775;
        _2096 = 0.0;
        _2097 = 0.0;
        _2098 = 0.0;
    }
    float _2108 = (cbModelParam._m0[1u].x * (_2096 - _1787)) + _1787;
    float _2109 = (cbModelParam._m0[1u].x * (_2097 - _1788)) + _1788;
    float _2110 = (cbModelParam._m0[1u].x * (_2098 - _1789)) + _1789;
    float _2131 = fma(_2110, cbSceneParam._m0[89u].z, fma(_2109, cbSceneParam._m0[89u].y, _2108 * cbSceneParam._m0[89u].x));
    float _2134 = fma(_2110, cbSceneParam._m0[90u].z, fma(_2109, cbSceneParam._m0[90u].y, _2108 * cbSceneParam._m0[90u].x));
    float _2137 = fma(_2110, cbSceneParam._m0[91u].z, fma(_2109, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2108));
    float _2152 = _1381 * 0.5;
    float _2153 = _1382 * 0.5;
    float _2154 = _1383 * 0.5;
    float _2155 = dot(vec4(_2152, _2153, _2154, 1.0), vec4(_2086, _2089, _2092, _2095));
    float _2158 = dot(vec4(_2152, _2153, _2154, 1.0), vec4(_2085, _2088, _2091, _2094));
    float _2161 = dot(vec4(_2152, _2153, _2154, 1.0), vec4(_2084, _2087, _2090, _2093));
    float _2195;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2168 = dot(vec4(_2152, _2153, _2154, 1.0), vec4(_1774, _1778, _1781, _1784));
        float _2172 = dot(vec4(_2152, _2153, _2154, 1.0), vec4(_1776, _1779, _1782, _1785));
        float _2176 = dot(vec4(_2152, _2153, _2154, 1.0), vec4(_1777, _1780, _1783, _1786));
        float _2183 = dot(vec4(cbModelParam._m0[39u]), vec4(_2152, _2153, _2154, 1.0));
        _2195 = dot(vec3(isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0)), isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0)), isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2183) ? 0.0 : (isnan(0.0) ? _2183 : max(0.0, _2183))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2195 = 1.0;
    }
    float _2206;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2197 = dot(vec4(cbModelParam._m0[40u]), vec4(_2152, _2153, _2154, 1.0));
        _2206 = dot(vec3(isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)), isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)), isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2197) ? 0.0 : (isnan(0.0) ? _2197 : max(0.0, _2197))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2206 = 1.0;
    }
    float _2210 = (_2206 * cbModelParam._m0[1u].x) + (_2195 * (1.0 - cbModelParam._m0[1u].x));
    float _2220 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1199);
    float _2221 = isnan(_2220) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2220 : min(cbModelParam._m0[25u].z, _2220));
    float _2301;
    float _2303;
    float _2305;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2268 = fma(_1445, cbModelParam._m0[13u].z, fma(_1441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1437)) + cbModelParam._m0[13u].w;
        float _2272 = fma(_1445, cbModelParam._m0[14u].z, fma(_1441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1437)) + cbModelParam._m0[14u].w;
        float _2276 = fma(_1445, cbModelParam._m0[15u].z, fma(_1441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1437)) + cbModelParam._m0[15u].w;
        float _2279 = fma(_1383, cbModelParam._m0[13u].z, fma(_1382, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1381));
        float _2282 = fma(_1383, cbModelParam._m0[14u].z, fma(_1382, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1381));
        float _2285 = fma(_1383, cbModelParam._m0[15u].z, fma(_1382, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1381));
        float _2313;
        if (_2279 > 0.0)
        {
            _2313 = abs((1.0 - _2268) / _2279);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2279 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2268 + 1.0) / _2279);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2313 = frontier_phi_17_15_ladder;
        }
        float _2485;
        if (_2282 > 0.0)
        {
            _2485 = abs((1.0 - _2272) / _2282);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2282 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2272 + 1.0) / _2282);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2485 = frontier_phi_26_22_ladder;
        }
        float _2780;
        if (_2285 > 0.0)
        {
            _2780 = abs((1.0 - _2276) / _2285);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2285 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2276 + 1.0) / _2285);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2780 = frontier_phi_38_33_ladder;
        }
        float _2782 = isnan(_2485) ? _2313 : (isnan(_2313) ? _2485 : min(_2313, _2485));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2279) + _2268;
        float _2788 = (_2783 * _2282) + _2272;
        float _2789 = (_2783 * _2285) + _2276;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2792 = (-1.0) - _2790;
        float _2794 = _2790 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2789 > _2794) || ((_2789 < _2792) || ((_2788 > _2794) || ((_2788 < _2792) || ((_2787 < _2792) || (_2787 > _2794))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2789, cbModelParam._m0[9u].z, fma(_2788, cbModelParam._m0[9u].y, _2787 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2789, cbModelParam._m0[10u].z, fma(_2788, cbModelParam._m0[10u].y, _2787 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2789, cbModelParam._m0[11u].z, fma(_2788, cbModelParam._m0[11u].y, _2787 * cbModelParam._m0[11u].x))), _2221);
            frontier_phi_16_38_ladder = _2934.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2934.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2934.x * cbModelParam._m0[1u].y;
        }
        _2301 = frontier_phi_16_38_ladder_2;
        _2303 = frontier_phi_16_38_ladder_1;
        _2305 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1381, _1382, _1383), _2221);
        _2301 = _2289.x * cbModelParam._m0[1u].y;
        _2303 = _2289.y * cbModelParam._m0[1u].y;
        _2305 = _2289.z * cbModelParam._m0[1u].y;
    }
    float _2309 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1199);
    float _2310 = isnan(_2309) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2309 : min(cbModelParam._m0[25u].w, _2309));
    float _2400;
    float _2402;
    float _2404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2364 = fma(_1445, cbModelParam._m0[21u].z, fma(_1441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1437)) + cbModelParam._m0[21u].w;
        float _2368 = fma(_1445, cbModelParam._m0[22u].z, fma(_1441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1437)) + cbModelParam._m0[22u].w;
        float _2372 = fma(_1445, cbModelParam._m0[23u].z, fma(_1441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1437)) + cbModelParam._m0[23u].w;
        float _2375 = fma(_1383, cbModelParam._m0[21u].z, fma(_1382, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1381));
        float _2378 = fma(_1383, cbModelParam._m0[22u].z, fma(_1382, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1381));
        float _2381 = fma(_1383, cbModelParam._m0[23u].z, fma(_1382, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1381));
        float _2490;
        if (_2375 > 0.0)
        {
            _2490 = abs((1.0 - _2364) / _2375);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2375 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2364 + 1.0) / _2375);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2490 = frontier_phi_28_24_ladder;
        }
        float _2807;
        if (_2378 > 0.0)
        {
            _2807 = abs((1.0 - _2368) / _2378);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2378 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2368 + 1.0) / _2378);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2807 = frontier_phi_40_35_ladder;
        }
        float _3145;
        if (_2381 > 0.0)
        {
            _3145 = abs((1.0 - _2372) / _2381);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2381 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2372 + 1.0) / _2381);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3145 = frontier_phi_50_47_ladder;
        }
        float _3147 = isnan(_2807) ? _2490 : (isnan(_2490) ? _2807 : min(_2490, _2807));
        float _3148 = isnan(_3145) ? _3147 : (isnan(_3147) ? _3145 : min(_3147, _3145));
        float _3152 = (_3148 * _2375) + _2364;
        float _3153 = (_3148 * _2378) + _2368;
        float _3154 = (_3148 * _2381) + _2372;
        float _3155 = _3148 * 9.9999997473787516355514526367188e-05;
        float _3156 = (-1.0) - _3155;
        float _3158 = _3155 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3154 > _3158) || ((_3154 < _3156) || ((_3153 > _3158) || ((_3153 < _3156) || ((_3152 < _3156) || (_3152 > _3158))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3276 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3154, cbModelParam._m0[17u].z, fma(_3153, cbModelParam._m0[17u].y, _3152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3154, cbModelParam._m0[18u].z, fma(_3153, cbModelParam._m0[18u].y, _3152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3154, cbModelParam._m0[19u].z, fma(_3153, cbModelParam._m0[19u].y, _3152 * cbModelParam._m0[19u].x))), _2310);
            frontier_phi_25_50_ladder = _3276.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3276.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3276.x * cbModelParam._m0[1u].z;
        }
        _2400 = frontier_phi_25_50_ladder_2;
        _2402 = frontier_phi_25_50_ladder_1;
        _2404 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1381, _1382, _1383), _2310);
        _2400 = _2384.x * cbModelParam._m0[1u].z;
        _2402 = _2384.y * cbModelParam._m0[1u].z;
        _2404 = _2384.z * cbModelParam._m0[1u].z;
    }
    float _2417 = (((_1408 * _1357) + _1409) * _1373) * ((cbModelParam._m0[1u].w * (_2400 - _2301)) + _2301);
    float _2419 = (((_1408 * _1359) + _1409) * _1373) * ((cbModelParam._m0[1u].w * (_2402 - _2303)) + _2303);
    float _2421 = (((_1408 * _1360) + _1409) * _1373) * ((cbModelParam._m0[1u].w * (_2404 - _2305)) + _2305);
    float _2424 = fma(_2421, cbSceneParam._m0[89u].z, fma(_2419, cbSceneParam._m0[89u].y, _2417 * cbSceneParam._m0[89u].x));
    float _2427 = fma(_2421, cbSceneParam._m0[90u].z, fma(_2419, cbSceneParam._m0[90u].y, _2417 * cbSceneParam._m0[90u].x));
    float _2430 = fma(_2421, cbSceneParam._m0[91u].z, fma(_2419, cbSceneParam._m0[91u].y, _2417 * cbSceneParam._m0[91u].x));
    float _2464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2468 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2476 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2477 = _2464 / _2476;
    float _2478 = _2468 / _2476;
    float _2479 = _2472 / _2476;
    float _2626;
    float _2627;
    float _2628;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2506 = ((uint(_2479 > cbSceneParam._m0[59u].y) + uint(_2479 > cbSceneParam._m0[59u].x)) + uint(_2479 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2507 = _2506 + 43u;
        uint _2515 = _2506 + 44u;
        uint _2523 = _2506 + 45u;
        uint _2531 = _2506 + 46u;
        float _2542 = fma(_2476, cbSceneParam._m0[_2507].w, fma(_2472, cbSceneParam._m0[_2507].z, fma(_2468, cbSceneParam._m0[_2507].y, _2464 * cbSceneParam._m0[_2507].x)));
        float _2546 = fma(_2476, cbSceneParam._m0[_2515].w, fma(_2472, cbSceneParam._m0[_2515].z, fma(_2468, cbSceneParam._m0[_2515].y, _2464 * cbSceneParam._m0[_2515].x)));
        float _2554 = fma(_2476, cbSceneParam._m0[_2531].w, fma(_2472, cbSceneParam._m0[_2531].z, fma(_2468, cbSceneParam._m0[_2531].y, _2464 * cbSceneParam._m0[_2531].x)));
        float _2559 = cbSceneParam._m0[33u].z * _2554;
        float _2561 = cbSceneParam._m0[33u].w * _2554;
        float _2564 = fma(_2476, cbSceneParam._m0[_2523].w, fma(_2472, cbSceneParam._m0[_2523].z, fma(_2468, cbSceneParam._m0[_2523].y, _2464 * cbSceneParam._m0[_2523].x))) / _2554;
        float _2612 = (cbSceneParam._m0[33u].x - sqrt(((_2478 * _2478) + (_2477 * _2477)) + (_2479 * _2479))) * cbSceneParam._m0[33u].y;
        float _5068 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2619 = (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2559 + _2542) / _2554, (_2561 + _2546) / _2554), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2561 + _2542) / _2554, (_2546 - _2559) / _2554), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2542 - _2559) / _2554, (_2546 - _2561) / _2554), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2542 - _2561) / _2554, (_2559 + _2546) / _2554), _2564), 0.0)).x), vec4(0.25)));
        _2626 = 1.0 - (_2619 * cbSceneParam._m0[34u].x);
        _2627 = 1.0 - (_2619 * cbSceneParam._m0[34u].y);
        _2628 = 1.0 - (_2619 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2626 = 1.0;
        _2627 = 1.0;
        _2628 = 1.0;
    }
    float _2692;
    float _2694;
    float _2696;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2680 = fma(_2476, cbSceneParam._m0[63u].w, fma(_2472, cbSceneParam._m0[63u].z, fma(_2468, cbSceneParam._m0[63u].y, _2464 * cbSceneParam._m0[63u].x)));
        float _2681 = fma(_2476, cbSceneParam._m0[60u].w, fma(_2472, cbSceneParam._m0[60u].z, fma(_2468, cbSceneParam._m0[60u].y, _2464 * cbSceneParam._m0[60u].x))) / _2680;
        float _2682 = fma(_2476, cbSceneParam._m0[61u].w, fma(_2472, cbSceneParam._m0[61u].z, fma(_2468, cbSceneParam._m0[61u].y, _2464 * cbSceneParam._m0[61u].x))) / _2680;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2681 >= cbSceneParam._m0[64u].x) && (_2682 >= cbSceneParam._m0[64u].y)) && (_2681 <= cbSceneParam._m0[64u].z)) && (_2682 <= cbSceneParam._m0[64u].w))
        {
            float _2820 = fma(_2476, cbSceneParam._m0[62u].w, fma(_2472, cbSceneParam._m0[62u].z, fma(_2468, cbSceneParam._m0[62u].y, _2464 * cbSceneParam._m0[62u].x))) / _2680;
            float _2824 = isnan(cbSceneParam._m0[41u].w) ? _2820 : (isnan(_2820) ? cbSceneParam._m0[41u].w : max(_2820, cbSceneParam._m0[41u].w));
            float _2867 = (cbSceneParam._m0[33u].x - sqrt(((_2478 * _2478) + (_2477 * _2477)) + (_2479 * _2479))) * cbSceneParam._m0[33u].y;
            float _5084 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
            float _2874 = (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2681, cbSceneParam._m0[33u].w + _2682), _2824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2681, _2682 - cbSceneParam._m0[33u].z), _2824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2681 - cbSceneParam._m0[33u].z, _2682 - cbSceneParam._m0[33u].w), _2824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2681 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2682), _2824), 0.0)).x), vec4(0.25)));
            float _2878 = 1.0 - (_2874 * cbSceneParam._m0[34u].x);
            float _2879 = 1.0 - (_2874 * cbSceneParam._m0[34u].y);
            float _2880 = 1.0 - (_2874 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2880) ? _2628 : (isnan(_2628) ? _2880 : min(_2628, _2880));
            frontier_phi_37_36_ladder_1 = isnan(_2879) ? _2627 : (isnan(_2627) ? _2879 : min(_2627, _2879));
            frontier_phi_37_36_ladder_2 = isnan(_2878) ? _2626 : (isnan(_2626) ? _2878 : min(_2626, _2878));
        }
        else
        {
            frontier_phi_37_36_ladder = _2628;
            frontier_phi_37_36_ladder_1 = _2627;
            frontier_phi_37_36_ladder_2 = _2626;
        }
        _2692 = frontier_phi_37_36_ladder_2;
        _2694 = frontier_phi_37_36_ladder_1;
        _2696 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2692 = _2626;
        _2694 = _2627;
        _2696 = _2628;
    }
    uvec4 _2701 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2703 = _2701.x * 14u;
    uint _2704 = _2703 + 13u;
    float _2711 = _1373 + (-1.0);
    float _2716 = (cbLight._m0[_2704].x * _2711) + 1.0;
    float _2717 = (cbLight._m0[_2704].y * _2711) + 1.0;
    float _2718 = (cbLight._m0[_2704].z * _2711) + 1.0;
    float _2719 = (cbLight._m0[_2704].w * _2711) + 1.0;
    uint _2720 = _2703 + 5u;
    float _2726 = isnan(1.0) ? _2717 : (isnan(_2717) ? 1.0 : min(_2717, 1.0));
    uint _2730 = _2703 + 4u;
    float _2739 = isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0));
    uint _2743 = _2703 | 1u;
    float _2754 = dot(vec3(cbLight._m0[_2703].xyz), vec3(_1196, _1197, _1198));
    float _2757 = dot(vec3(cbLight._m0[_2743].xyz), vec3(_1196, _1197, _1198));
    float _5120 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _5131 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2762 = (isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * 0.3183098733425140380859375;
    float _2764 = (isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0))) * 0.3183098733425140380859375;
    float _2771 = ((cbLight._m0[_2720].x * _2726) * _2764) + (((cbLight._m0[_2730].x * _2692) * _2739) * _2762);
    float _2772 = ((_2726 * cbLight._m0[_2720].y) * _2764) + (((cbLight._m0[_2730].y * _2694) * _2739) * _2762);
    float _2773 = ((_2726 * cbLight._m0[_2720].z) * _2764) + (((cbLight._m0[_2730].z * _2696) * _2739) * _2762);
    uvec4 _2777 = floatBitsToUint(cbLight._m0[_2703 + 12u]);
    bool _2779 = _2777.x == 0u;
    float _2881;
    float _2883;
    float _2885;
    if (_2779)
    {
        _2881 = _2771;
        _2883 = _2772;
        _2885 = _2773;
    }
    else
    {
        uint _2889 = _2703 + 6u;
        float _2905 = (dot(vec3(cbLight._m0[_2703 + 2u].xyz), vec3(_1196, _1197, _1198)) * 0.5) + 0.5;
        float _2906 = _2905 * _2905;
        float _5142 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2907 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
        float _2908 = isnan(1.0) ? _2718 : (isnan(_2718) ? 1.0 : min(_2718, 1.0));
        _2881 = (((cbLight._m0[_2889].x * 0.3183098733425140380859375) * _2907) * _2908) + _2771;
        _2883 = (((cbLight._m0[_2889].y * 0.3183098733425140380859375) * _2907) * _2908) + _2772;
        _2885 = (((cbLight._m0[_2889].z * 0.3183098733425140380859375) * _2907) * _2908) + _2773;
    }
    bool _2888 = _2777.y == 0u;
    float _2943;
    float _2945;
    float _2947;
    if (_2888)
    {
        _2943 = _2881;
        _2945 = _2883;
        _2947 = _2885;
    }
    else
    {
        uint _3116 = _2703 + 7u;
        float _3132 = (dot(vec3(cbLight._m0[_2703 + 3u].xyz), vec3(_1196, _1197, _1198)) * 0.5) + 0.5;
        float _3133 = _3132 * _3132;
        float _5158 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
        float _3134 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
        float _3135 = isnan(1.0) ? _2719 : (isnan(_2719) ? 1.0 : min(_2719, 1.0));
        _2943 = (((cbLight._m0[_3116].x * 0.3183098733425140380859375) * _3134) * _3135) + _2881;
        _2945 = (((cbLight._m0[_3116].y * 0.3183098733425140380859375) * _3134) * _3135) + _2883;
        _2947 = (((cbLight._m0[_3116].z * 0.3183098733425140380859375) * _3134) * _3135) + _2885;
    }
    uint _2950 = _2703 + 8u;
    float _2963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2703].w)) * _1199) * 0.949999988079071044921875);
    float _2964 = _2963 * _2963;
    float _2965 = cbLight._m0[_2703].x + _1275;
    float _2966 = cbLight._m0[_2703].y + _1276;
    float _2967 = cbLight._m0[_2703].z + _1277;
    float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
    float _2972 = _2971 * _2965;
    float _2973 = _2971 * _2966;
    float _2974 = _2971 * _2967;
    float _2975 = dot(vec3(_1196, _1197, _1198), vec3(cbLight._m0[_2703].xyz));
    float _5174 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
    float _2978 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
    float _5185 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
    float _2979 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
    float _2980 = dot(vec3(_1196, _1197, _1198), vec3(_2972, _2973, _2974));
    float _5196 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
    float _2983 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
    float _2984 = dot(vec3(cbLight._m0[_2703].xyz), vec3(_2972, _2973, _2974));
    float _5207 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
    float _2988 = _2964 * _2964;
    float _2992 = ((_2983 * _2983) * (_2988 + (-1.0))) + 1.0;
    float _3000 = exp2(log2(1.0 - (isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0)))) * 5.0);
    float _3001 = 0.959999978542327880859375 - _1354;
    float _3003 = 0.959999978542327880859375 - _1355;
    float _3004 = 0.959999978542327880859375 - _1356;
    float _3011 = 1.0 - _2964;
    float _3022 = (0.5 / (((_2979 * ((_2978 * _3011) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _3011) + _2964) * _2978))) * _2978;
    float _5218 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
    float _3024 = (isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0))) * (_2988 / ((_2992 * _2992) * 3.141590118408203125));
    uint _3038 = _2703 + 9u;
    float _3049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2743].w)) * _1199) * 0.949999988079071044921875);
    float _3050 = _3049 * _3049;
    float _3051 = cbLight._m0[_2743].x + _1275;
    float _3052 = cbLight._m0[_2743].y + _1276;
    float _3053 = cbLight._m0[_2743].z + _1277;
    float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
    float _3058 = _3057 * _3051;
    float _3059 = _3057 * _3052;
    float _3060 = _3057 * _3053;
    float _3061 = dot(vec3(_1196, _1197, _1198), vec3(cbLight._m0[_2743].xyz));
    float _5229 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
    float _3064 = isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0));
    float _3065 = dot(vec3(_1196, _1197, _1198), vec3(_3058, _3059, _3060));
    float _5240 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
    float _3068 = isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0));
    float _3069 = dot(vec3(cbLight._m0[_2743].xyz), vec3(_3058, _3059, _3060));
    float _5251 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
    float _3073 = _3050 * _3050;
    float _3077 = ((_3068 * _3068) * (_3073 + (-1.0))) + 1.0;
    float _3084 = exp2(log2(1.0 - (isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0)))) * 5.0);
    float _3091 = 1.0 - _3050;
    float _3101 = (0.5 / (((_2979 * ((_3064 * _3091) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _3091) + _3050) * _3064))) * _3064;
    float _5262 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
    float _3103 = (isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0))) * (_3073 / ((_3077 * _3077) * 3.141590118408203125));
    float _3113 = (((((_3084 * _3001) + _1357) * cbLight._m0[_3038].x) * _3103) * _2726) + ((((cbLight._m0[_2950].x * _2692) * ((_3000 * _3001) + _1357)) * _3024) * _2739);
    float _3114 = (((((_3084 * _3003) + _1359) * cbLight._m0[_3038].y) * _3103) * _2726) + ((((cbLight._m0[_2950].y * _2694) * ((_3000 * _3003) + _1359)) * _3024) * _2739);
    float _3115 = (((((_3084 * _3004) + _1360) * cbLight._m0[_3038].z) * _3103) * _2726) + ((((cbLight._m0[_2950].z * _2696) * ((_3000 * _3004) + _1360)) * _3024) * _2739);
    float _3171;
    float _3173;
    float _3175;
    if (_2779)
    {
        _3171 = _3113;
        _3173 = _3114;
        _3175 = _3115;
    }
    else
    {
        uint _3177 = _2703 + 2u;
        uint _3181 = _2703 + 10u;
        float _3195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3177].w)) * _1199) * 0.949999988079071044921875);
        float _3196 = _3195 * _3195;
        float _3197 = cbLight._m0[_3177].x + _1275;
        float _3198 = cbLight._m0[_3177].y + _1276;
        float _3199 = cbLight._m0[_3177].z + _1277;
        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
        float _3204 = _3203 * _3197;
        float _3205 = _3203 * _3198;
        float _3206 = _3203 * _3199;
        float _3207 = dot(vec3(_1196, _1197, _1198), vec3(cbLight._m0[_3177].xyz));
        float _5273 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
        float _3210 = isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0));
        float _3211 = dot(vec3(_1196, _1197, _1198), vec3(_3204, _3205, _3206));
        float _5284 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
        float _3214 = isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0));
        float _3215 = dot(vec3(cbLight._m0[_3177].xyz), vec3(_3204, _3205, _3206));
        float _5295 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        float _3219 = _3196 * _3196;
        float _3223 = ((_3214 * _3214) * (_3219 + (-1.0))) + 1.0;
        float _3230 = exp2(log2(1.0 - (isnan(1.0) ? _5295 : (isnan(_5295) ? 1.0 : min(_5295, 1.0)))) * 5.0);
        float _3237 = 1.0 - _3196;
        float _3247 = (0.5 / (((_2979 * ((_3210 * _3237) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _3237) + _3196) * _3210))) * _3210;
        float _5306 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
        float _3249 = (isnan(1.0) ? _5306 : (isnan(_5306) ? 1.0 : min(_5306, 1.0))) * (_3219 / ((_3223 * _3223) * 3.141590118408203125));
        float _3250 = isnan(1.0) ? _2718 : (isnan(_2718) ? 1.0 : min(_2718, 1.0));
        _3171 = (((((_3230 * _3001) + _1357) * cbLight._m0[_3181].x) * _3249) * _3250) + _3113;
        _3173 = (((((_3230 * _3003) + _1359) * cbLight._m0[_3181].y) * _3249) * _3250) + _3114;
        _3175 = (((((_3230 * _3004) + _1360) * cbLight._m0[_3181].z) * _3249) * _3250) + _3115;
    }
    float _3281;
    float _3283;
    float _3285;
    if (_2888)
    {
        _3281 = _3171;
        _3283 = _3173;
        _3285 = _3175;
    }
    else
    {
        uint _3292 = _2703 + 3u;
        uint _3296 = _2703 + 11u;
        float _3310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3292].w)) * _1199) * 0.949999988079071044921875);
        float _3311 = _3310 * _3310;
        float _3312 = cbLight._m0[_3292].x + _1275;
        float _3313 = cbLight._m0[_3292].y + _1276;
        float _3314 = cbLight._m0[_3292].z + _1277;
        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
        float _3319 = _3318 * _3312;
        float _3320 = _3318 * _3313;
        float _3321 = _3318 * _3314;
        float _3322 = dot(vec3(_1196, _1197, _1198), vec3(cbLight._m0[_3292].xyz));
        float _5322 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
        float _3325 = isnan(1.0) ? _5322 : (isnan(_5322) ? 1.0 : min(_5322, 1.0));
        float _3326 = dot(vec3(_1196, _1197, _1198), vec3(_3319, _3320, _3321));
        float _5333 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
        float _3329 = isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0));
        float _3330 = dot(vec3(cbLight._m0[_3292].xyz), vec3(_3319, _3320, _3321));
        float _5344 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
        float _3334 = _3311 * _3311;
        float _3338 = ((_3329 * _3329) * (_3334 + (-1.0))) + 1.0;
        float _3345 = exp2(log2(1.0 - (isnan(1.0) ? _5344 : (isnan(_5344) ? 1.0 : min(_5344, 1.0)))) * 5.0);
        float _3352 = 1.0 - _3311;
        float _3362 = (0.5 / (((_2979 * ((_3325 * _3352) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _3352) + _3311) * _3325))) * _3325;
        float _5355 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
        float _3364 = (isnan(1.0) ? _5355 : (isnan(_5355) ? 1.0 : min(_5355, 1.0))) * (_3334 / ((_3338 * _3338) * 3.141590118408203125));
        float _3365 = isnan(1.0) ? _2719 : (isnan(_2719) ? 1.0 : min(_2719, 1.0));
        _3281 = (((((_3345 * _3001) + _1357) * cbLight._m0[_3296].x) * _3364) * _3365) + _3171;
        _3283 = (((((_3345 * _3003) + _1359) * cbLight._m0[_3296].y) * _3364) * _3365) + _3173;
        _3285 = (((((_3345 * _3004) + _1360) * cbLight._m0[_3296].z) * _3364) * _3365) + _3175;
    }
    float _3431;
    float _3433;
    float _3435;
    float _3437;
    float _3439;
    float _3441;
    if (_2701.y == 0u)
    {
        uvec4 _3386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3387 = _3386.x;
        uint _3398 = uint((float(_3386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1296) / _3387))) + floor(float(uint(cbSceneParam._m0[85u].x * _1295) / _3387)));
        float _3408 = (log2(_2479 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3409 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
        uint _3412 = uint(isnan(14.0) ? _3409 : (isnan(_3409) ? 14.0 : min(_3409, 14.0)));
        uvec4 _3417 = texelFetch(g_lightClusterGridBuffer, int(((_3412 << 2u) + (_3398 << 6u)) >> 2u));
        uint _3418 = _3417.x;
        uint _3419 = _3386.z;
        float _3498;
        float _3500;
        float _3502;
        float _3504;
        float _3506;
        float _3508;
        if (((((1u << ((_3419 >> 4u) & 15u)) + 4294967295u) & _3418) == 0u) || ((_3419 & 240u) == 0u))
        {
            _3498 = 0.0;
            _3500 = 0.0;
            _3502 = 0.0;
            _3504 = 0.0;
            _3506 = 0.0;
            _3508 = 0.0;
        }
        else
        {
            float _3499;
            float _3501;
            float _3503;
            float _3505;
            float _3507;
            float _3509;
            float _3650 = 0.0;
            float _3651 = 0.0;
            float _3652 = 0.0;
            float _3653 = 0.0;
            float _3654 = 0.0;
            float _3655 = 0.0;
            uint _3656 = 0u;
            uint _3665;
            bool _3666;
            for (;;)
            {
                _3665 = texelFetch(g_lightClassification, int((((_3412 << 5u) + (_3398 << 9u)) + (_3656 << 2u)) >> 2u)).x;
                _3666 = _3665 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3666)
                {
                    frontier_phi_71_pred = _3655;
                    frontier_phi_71_pred_1 = _3654;
                    frontier_phi_71_pred_2 = _3653;
                    frontier_phi_71_pred_3 = _3652;
                    frontier_phi_71_pred_4 = _3651;
                    frontier_phi_71_pred_5 = _3650;
                }
                else
                {
                    float _3795;
                    float _3796;
                    float _3797;
                    float _3798;
                    float _3799;
                    float _3800;
                    uint _3801;
                    _3795 = _3650;
                    _3796 = _3651;
                    _3797 = _3652;
                    _3798 = _3653;
                    _3799 = _3654;
                    _3800 = _3655;
                    _3801 = _3665;
                    float _3722;
                    float _3723;
                    float _3724;
                    float _3725;
                    float _3726;
                    float _3727;
                    for (;;)
                    {
                        uint _3805 = uint(findLSB(_3801)) + (_3656 << 5u);
                        uint _3802 = (_3801 + 4294967295u) & _3801;
                        uint _3807 = _3805 * 48u;
                        vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3807)).x, texelFetch(g_PointLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3807 + 3u)).x));
                        uint _3827 = (_3805 * 48u) + 4u;
                        vec4 _3840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3827)).x, texelFetch(g_PointLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3827 + 3u)).x));
                        uint _3846 = (_3805 * 48u) + 8u;
                        vec3 _3857 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3846)).x, texelFetch(g_PointLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3846 + 2u)).x));
                        float _3861 = _3821.x - _2477;
                        float _3862 = _3821.y - _2478;
                        float _3863 = _3821.z - _2479;
                        float _3864 = dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863));
                        float _3867 = inversesqrt(_3864);
                        float _3868 = _3867 * _3861;
                        float _3869 = _3867 * _3862;
                        float _3870 = _3867 * _3863;
                        float _3871 = dot(vec3(_1314, _1317, _1320), vec3(_3868, _3869, _3870));
                        float _3876 = 1.0 - (_3864 * _3821.w);
                        float _5381 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                        float _3877 = isnan(1.0) ? _5381 : (isnan(_5381) ? 1.0 : min(_5381, 1.0));
                        float _3878 = sqrt(_3864) * _3840.w;
                        float _3881 = 1.39999997615814208984375 / (_3878 + 1.39999997615814208984375);
                        float _3882 = _3881 * _3881;
                        float _3885 = ((1.0 - _3882) * _3871) + _3882;
                        float _3888 = _3878 * _3878;
                        float _3892 = ((isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0))) * _3877) / ((_3888 * 0.699999988079071044921875) + 1.0);
                        float _3896 = (-0.0) - _2477;
                        float _3897 = (-0.0) - _2478;
                        float _3898 = (-0.0) - _2479;
                        float _3902 = inversesqrt(dot(vec3(_3896, _3897, _3898), vec3(_3896, _3897, _3898)));
                        float _3903 = _3902 * _3896;
                        float _3904 = _3902 * _3897;
                        float _3905 = _3902 * _3898;
                        float _3912 = exp2(log2(1.0 / ((_3888 * 3.5) + 5.0)) * 0.25);
                        float _3913 = 1.0 - _1389;
                        float _3920 = sqrt(1.0 - ((1.0 - (_3913 * _3913)) * (1.0 - (_3912 * _3912))));
                        float _3921 = _3920 * _3920;
                        float _3922 = _3921 * _3921;
                        float _3923 = _3903 + _3868;
                        float _3924 = _3904 + _3869;
                        float _3925 = _3905 + _3870;
                        float _3929 = inversesqrt(dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925)));
                        float _3933 = dot(vec3(_1314, _1317, _1320), vec3(_3903, _3904, _3905));
                        float _5397 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                        float _3936 = isnan(1.0) ? _5397 : (isnan(_5397) ? 1.0 : min(_5397, 1.0));
                        float _3937 = dot(vec3(_1314, _1317, _1320), vec3(_3929 * _3923, _3929 * _3924, _3929 * _3925));
                        float _5408 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                        float _3940 = isnan(1.0) ? _5408 : (isnan(_5408) ? 1.0 : min(_5408, 1.0));
                        float _3944 = ((_3940 * _3940) * (_3922 + (-1.0))) + 1.0;
                        float _3945 = _3881 * _3921;
                        float _3946 = _3945 * _3945;
                        float _3949 = ((1.0 - _3946) * _3871) + _3946;
                        float _5419 = isnan(0.0) ? _3949 : (isnan(_3949) ? 0.0 : max(_3949, 0.0));
                        float _3950 = isnan(1.0) ? _5419 : (isnan(_5419) ? 1.0 : min(_5419, 1.0));
                        float _3951 = 1.0 - _3921;
                        float _3961 = (0.5 / (((_3950 * ((_3936 * _3951) + _3921)) + 9.9999999392252902907785028219223e-09) + (((_3950 * _3951) + _3921) * _3936))) * _3950;
                        float _5430 = isnan(0.0) ? _3961 : (isnan(_3961) ? 0.0 : max(_3961, 0.0));
                        float _3972 = (((_3922 * 3.1415927410125732421875) * (isnan(1.0) ? _5430 : (isnan(_5430) ? 1.0 : min(_5430, 1.0)))) / ((_3944 * _3944) * ((_3888 * 2.1991131305694580078125) + 3.141590118408203125))) * _3877;
                        _3725 = (_3892 * _3840.x) + _3798;
                        _3726 = (_3892 * _3840.y) + _3799;
                        _3727 = (_3892 * _3840.z) + _3800;
                        _3722 = (_3972 * _3857.x) + _3795;
                        _3723 = (_3972 * _3857.y) + _3796;
                        _3724 = (_3972 * _3857.z) + _3797;
                        if (_3802 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3795 = _3722;
                            _3796 = _3723;
                            _3797 = _3724;
                            _3798 = _3725;
                            _3799 = _3726;
                            _3800 = _3727;
                            _3801 = _3802;
                        }
                    }
                    frontier_phi_71_pred = _3727;
                    frontier_phi_71_pred_1 = _3726;
                    frontier_phi_71_pred_2 = _3725;
                    frontier_phi_71_pred_3 = _3724;
                    frontier_phi_71_pred_4 = _3723;
                    frontier_phi_71_pred_5 = _3722;
                }
                _3509 = frontier_phi_71_pred;
                _3507 = frontier_phi_71_pred_1;
                _3505 = frontier_phi_71_pred_2;
                _3503 = frontier_phi_71_pred_3;
                _3501 = frontier_phi_71_pred_4;
                _3499 = frontier_phi_71_pred_5;
                uint _3657 = _3656 + 1u;
                if (_3657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3650 = _3499;
                    _3651 = _3501;
                    _3652 = _3503;
                    _3653 = _3505;
                    _3654 = _3507;
                    _3655 = _3509;
                    _3656 = _3657;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3498 = _3499;
            _3500 = _3501;
            _3502 = _3503;
            _3504 = _3505;
            _3506 = _3507;
            _3508 = _3509;
        }
        uvec4 _3512 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3513 = _3512.z;
        uint _3515 = (_3513 >> 8u) & 15u;
        float _3618;
        float _3620;
        float _3622;
        float _3624;
        float _3626;
        float _3628;
        if (((4294967295u << _3515) & _3418) == 0u)
        {
            _3618 = _3498;
            _3620 = _3500;
            _3622 = _3502;
            _3624 = _3504;
            _3626 = _3506;
            _3628 = _3508;
        }
        else
        {
            float _3643 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
            float _3644 = _3643 * _2477;
            float _3645 = _3643 * _2478;
            float _3646 = _3643 * _2479;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3515 < ((_3513 >> 12u) & 15u))
            {
                float _3619;
                float _3621;
                float _3623;
                float _3625;
                float _3627;
                float _3629;
                float _3778 = _3498;
                float _3779 = _3500;
                float _3780 = _3502;
                float _3781 = _3504;
                float _3782 = _3506;
                float _3783 = _3508;
                uint _3784 = _3515;
                uint _3793;
                bool _3794;
                for (;;)
                {
                    _3793 = texelFetch(g_lightClassification, int((((_3412 << 5u) + (_3398 << 9u)) + (_3784 << 2u)) >> 2u)).x;
                    _3794 = _3793 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3794)
                    {
                        frontier_phi_82_pred = _3783;
                        frontier_phi_82_pred_1 = _3782;
                        frontier_phi_82_pred_2 = _3781;
                        frontier_phi_82_pred_3 = _3780;
                        frontier_phi_82_pred_4 = _3779;
                        frontier_phi_82_pred_5 = _3778;
                    }
                    else
                    {
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3989;
                        float _3990;
                        float _3991;
                        float _4279;
                        float _4280;
                        float _4281;
                        float _4282;
                        float _4283;
                        float _4284;
                        float _3999 = _3778;
                        float _4000 = _3779;
                        float _4001 = _3780;
                        float _4002 = _3781;
                        float _4003 = _3782;
                        float _4004 = _3783;
                        uint _4005 = _3793;
                        uint _4006;
                        vec4 _4031;
                        float _4032;
                        vec4 _4047;
                        vec3 _4059;
                        vec4 _4074;
                        vec4 _4089;
                        float _4135;
                        bool _4136;
                        for (;;)
                        {
                            uint _4016 = ((_3784 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4005));
                            _4006 = (_4005 + 4294967295u) & _4005;
                            uint _4018 = _4016 * 40u;
                            _4031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4018 + 3u)).x));
                            _4032 = _4031.w;
                            uint _4034 = (_4016 * 40u) + 4u;
                            _4047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4034 + 3u)).x));
                            uint _4049 = (_4016 * 40u) + 8u;
                            _4059 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4049 + 2u)).x));
                            uint _4061 = (_4016 * 40u) + 16u;
                            _4074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4061 + 3u)).x));
                            uint _4076 = (_4016 * 40u) + 20u;
                            _4089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4076 + 3u)).x));
                            uint _4091 = (_4016 * 40u) + 24u;
                            vec4 _4104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4091 + 3u)).x));
                            uint _4110 = (_4016 * 40u) + 28u;
                            vec4 _4123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4110 + 3u)).x));
                            _4135 = fma(_2479, _4123.z, fma(_2478, _4123.y, _4123.x * _2477)) + _4123.w;
                            _4136 = !((fma(_2479, _4104.z, fma(_2478, _4104.y, _4104.x * _2477)) + _4104.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4136)
                            {
                                float _4163 = _4031.x - _2477;
                                float _4164 = _4031.y - _2478;
                                float _4165 = _4031.z - _2479;
                                float _4166 = dot(vec3(_4163, _4164, _4165), vec3(_4163, _4164, _4165));
                                float _4169 = inversesqrt(_4166);
                                float _4170 = _4169 * _4163;
                                float _4171 = _4169 * _4164;
                                float _4172 = _4169 * _4165;
                                float _4176 = 1.0 - (_4166 / (_4032 * _4032));
                                float _5441 = isnan(0.0) ? _4176 : (isnan(_4176) ? 0.0 : max(_4176, 0.0));
                                float _4177 = isnan(1.0) ? _5441 : (isnan(_5441) ? 1.0 : min(_5441, 1.0));
                                float _4181 = sqrt(_4166) * _4047.w;
                                float _4183 = 1.39999997615814208984375 / (_4181 + 1.39999997615814208984375);
                                float _4184 = _4183 * _4183;
                                float _4187 = ((1.0 - _4184) * dot(vec3(_4170, _4171, _4172), vec3(_1314, _1317, _1320))) + _4184;
                                float _4190 = _4181 * _4181;
                                float _4194 = (fma(_2479, _4074.z, fma(_2478, _4074.y, _4074.x * _2477)) + _4074.w) / _4135;
                                float _4195 = (fma(_2479, _4089.z, fma(_2478, _4089.y, _4089.x * _2477)) + _4089.w) / _4135;
                                float _4199 = 1.0 - dot(vec2(_4194, _4195), vec2(_4194, _4195));
                                float _5457 = isnan(0.0) ? _4199 : (isnan(_4199) ? 0.0 : max(_4199, 0.0));
                                float _4200 = isnan(1.0) ? _5457 : (isnan(_5457) ? 1.0 : min(_5457, 1.0));
                                float _4201 = _4200 * (((isnan(0.0) ? _4187 : (isnan(_4187) ? 0.0 : max(_4187, 0.0))) * _4177) / ((_4190 * 0.699999988079071044921875) + 1.0));
                                float _4213 = exp2(log2(1.0 / ((_4190 * 3.5) + 5.0)) * 0.25);
                                float _4214 = 1.0 - _1389;
                                float _4221 = sqrt(1.0 - ((1.0 - (_4214 * _4214)) * (1.0 - (_4213 * _4213))));
                                float _4222 = _4221 * _4221;
                                float _4223 = _4222 * _4222;
                                float _4224 = _4170 - _3644;
                                float _4225 = _4171 - _3645;
                                float _4226 = _4172 - _3646;
                                float _4230 = inversesqrt(dot(vec3(_4224, _4225, _4226), vec3(_4224, _4225, _4226)));
                                float _4234 = dot(vec3(_1314, _1317, _1320), vec3((-0.0) - _3644, (-0.0) - _3645, (-0.0) - _3646));
                                float _5468 = isnan(0.0) ? _4234 : (isnan(_4234) ? 0.0 : max(_4234, 0.0));
                                float _4237 = isnan(1.0) ? _5468 : (isnan(_5468) ? 1.0 : min(_5468, 1.0));
                                float _4238 = dot(vec3(_1314, _1317, _1320), vec3(_4230 * _4224, _4230 * _4225, _4230 * _4226));
                                float _5479 = isnan(0.0) ? _4238 : (isnan(_4238) ? 0.0 : max(_4238, 0.0));
                                float _4241 = isnan(1.0) ? _5479 : (isnan(_5479) ? 1.0 : min(_5479, 1.0));
                                float _4245 = ((_4241 * _4241) * (_4223 + (-1.0))) + 1.0;
                                float _4246 = _4183 * _4222;
                                float _4247 = _4246 * _4246;
                                float _4253 = ((1.0 - _4247) * dot(vec3(_1314, _1317, _1320), vec3(_4170, _4171, _4172))) + _4247;
                                float _5490 = isnan(0.0) ? _4253 : (isnan(_4253) ? 0.0 : max(_4253, 0.0));
                                float _4254 = isnan(1.0) ? _5490 : (isnan(_5490) ? 1.0 : min(_5490, 1.0));
                                float _4255 = 1.0 - _4222;
                                float _4265 = (0.5 / (((_4254 * ((_4237 * _4255) + _4222)) + 9.9999999392252902907785028219223e-09) + (((_4254 * _4255) + _4222) * _4237))) * _4254;
                                float _5501 = isnan(0.0) ? _4265 : (isnan(_4265) ? 0.0 : max(_4265, 0.0));
                                float _4275 = (_4200 * _4177) * (((_4223 * 3.1415927410125732421875) * (isnan(1.0) ? _5501 : (isnan(_5501) ? 1.0 : min(_5501, 1.0)))) / ((_4245 * _4245) * ((_4190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4201 * _4047.z;
                                frontier_phi_88_pred_1 = _4201 * _4047.y;
                                frontier_phi_88_pred_2 = _4201 * _4047.x;
                                frontier_phi_88_pred_3 = _4275 * _4059.z;
                                frontier_phi_88_pred_4 = _4275 * _4059.y;
                                frontier_phi_88_pred_5 = _4275 * _4059.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4284 = frontier_phi_88_pred;
                            _4283 = frontier_phi_88_pred_1;
                            _4282 = frontier_phi_88_pred_2;
                            _4281 = frontier_phi_88_pred_3;
                            _4280 = frontier_phi_88_pred_4;
                            _4279 = frontier_phi_88_pred_5;
                            _3989 = _4282 + _4002;
                            _3990 = _4283 + _4003;
                            _3991 = _4284 + _4004;
                            _3986 = _4279 + _3999;
                            _3987 = _4280 + _4000;
                            _3988 = _4281 + _4001;
                            if (_4006 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3999 = _3986;
                                _4000 = _3987;
                                _4001 = _3988;
                                _4002 = _3989;
                                _4003 = _3990;
                                _4004 = _3991;
                                _4005 = _4006;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3991;
                        frontier_phi_82_pred_1 = _3990;
                        frontier_phi_82_pred_2 = _3989;
                        frontier_phi_82_pred_3 = _3988;
                        frontier_phi_82_pred_4 = _3987;
                        frontier_phi_82_pred_5 = _3986;
                    }
                    _3629 = frontier_phi_82_pred;
                    _3627 = frontier_phi_82_pred_1;
                    _3625 = frontier_phi_82_pred_2;
                    _3623 = frontier_phi_82_pred_3;
                    _3621 = frontier_phi_82_pred_4;
                    _3619 = frontier_phi_82_pred_5;
                    uint _3785 = _3784 + 1u;
                    if (_3785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3778 = _3619;
                        _3779 = _3621;
                        _3780 = _3623;
                        _3781 = _3625;
                        _3782 = _3627;
                        _3783 = _3629;
                        _3784 = _3785;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3625;
                frontier_phi_63_64_ladder_1 = _3629;
                frontier_phi_63_64_ladder_2 = _3627;
                frontier_phi_63_64_ladder_3 = _3623;
                frontier_phi_63_64_ladder_4 = _3621;
                frontier_phi_63_64_ladder_5 = _3619;
            }
            else
            {
                frontier_phi_63_64_ladder = _3504;
                frontier_phi_63_64_ladder_1 = _3508;
                frontier_phi_63_64_ladder_2 = _3506;
                frontier_phi_63_64_ladder_3 = _3502;
                frontier_phi_63_64_ladder_4 = _3500;
                frontier_phi_63_64_ladder_5 = _3498;
            }
            _3618 = frontier_phi_63_64_ladder_5;
            _3620 = frontier_phi_63_64_ladder_4;
            _3622 = frontier_phi_63_64_ladder_3;
            _3624 = frontier_phi_63_64_ladder;
            _3626 = frontier_phi_63_64_ladder_2;
            _3628 = frontier_phi_63_64_ladder_1;
        }
        float _3633 = isnan(1.0) ? _1373 : (isnan(_1373) ? 1.0 : min(_1373, 1.0));
        _3431 = (_3633 * _3624) + _2943;
        _3433 = (_3633 * _3626) + _2945;
        _3435 = (_3633 * _3628) + _2947;
        _3437 = ((_3618 * _1357) * _3633) + _3281;
        _3439 = ((_3620 * _1359) * _3633) + _3283;
        _3441 = ((_3622 * _1360) * _3633) + _3285;
    }
    else
    {
        _3431 = _2943;
        _3433 = _2945;
        _3435 = _2947;
        _3437 = _3281;
        _3439 = _3283;
        _3441 = _3285;
    }
    float _5517 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _5528 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _5539 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
    float _3458 = ((isnan(1.0) ? _5517 : (isnan(_5517) ? 1.0 : min(_5517, 1.0))) * (_3431 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1373))) + ((_3437 + ((isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0))) * _2210)) * cbPerFrame._m0[3u].x);
    float _3459 = ((isnan(1.0) ? _5528 : (isnan(_5528) ? 1.0 : min(_5528, 1.0))) * (_3433 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1373))) + ((_3439 + ((isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0))) * _2210)) * cbPerFrame._m0[3u].x);
    float _3460 = ((isnan(1.0) ? _5539 : (isnan(_5539) ? 1.0 : min(_5539, 1.0))) * (_3435 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1373))) + ((_3441 + ((isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0))) * _2210)) * cbPerFrame._m0[3u].x);
    uint _3461 = _305 + 6u;
    float _3469 = _1295 / cbSceneParam._m0[86u].x;
    float _3470 = _1296 / cbSceneParam._m0[86u].y;
    vec4 _3484 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3469, _3470, (log2((isnan(cbSceneParam._m0[77u].w) ? _1218 : (isnan(_1218) ? cbSceneParam._m0[77u].w : min(_1218, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3486 = _3484.x;
    float _3487 = _3484.y;
    float _3488 = _3484.z;
    float _3489 = _3484.w;
    float _3560;
    float _3562;
    float _3564;
    float _3566;
    if (_1218 > cbSceneParam._m0[78u].w)
    {
        float _3523 = isnan(_1218) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1218 : min(cbSceneParam._m0[80u].w, _1218));
        float _3524 = _3523 / _1218;
        float _3535 = _3524 * _1268;
        float _3536 = _1269 * _3524;
        float _3537 = (-0.0) - _3536;
        float _3538 = _3524 * _1270;
        float _3540 = (cbSceneParam._m0[77u].w * _3537) / _3523;
        float _3541 = _3540 + cbSceneParam._m0[79u].w;
        float _3542 = cbSceneParam._m0[79u].w - _3536;
        float _3548 = sqrt(((_3535 * _3535) + (_3536 * _3536)) + (_3538 * _3538));
        float _3551 = (1.0 - (cbSceneParam._m0[77u].w / _3523)) * _3548;
        float _3556 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3558 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3735;
        if (abs((_3537 - _3540) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3735 = ((((_3541 > 0.0) ? exp2(_3556 * _3541) : (2.0 - exp2(_3558 * _3541))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3551;
        }
        else
        {
            float _3679 = 1.0 / cbSceneParam._m0[80u].x;
            float _3680 = isnan(_3542) ? _3541 : (isnan(_3541) ? _3542 : max(_3541, _3542));
            float _3681 = isnan(_3542) ? _3541 : (isnan(_3541) ? _3542 : min(_3541, _3542));
            float _3690 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : min(_3680, 0.0));
            float _3691 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : min(_3681, 0.0));
            _3735 = ((abs(_3548 / _3537) * cbSceneParam._m0[80u].y) * ((((_3690 - _3691) * 2.0) - ((exp2(_3556 * (isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0)))) - exp2(_3556 * (isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))))) * _3679)) - ((exp2(_3558 * _3690) - exp2(_3558 * _3691)) * _3679))) + (_3551 * cbSceneParam._m0[80u].z);
        }
        vec4 _3737 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3469, _3470, 1.0), 0.0);
        float _3746 = exp2((_3735 * (-1.44269502162933349609375)) * (1.0 - _3737.w));
        float _3747 = log2(_3746);
        float _3763 = log2(_3489);
        _3560 = (exp2(_3763 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3747 * cbSceneParam._m0[78u].x)) * _3737.x) / cbSceneParam._m0[78u].x)) + _3486;
        _3562 = (exp2(_3763 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3747 * cbSceneParam._m0[78u].y)) * _3737.y) / cbSceneParam._m0[78u].y)) + _3487;
        _3564 = (exp2(_3763 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3747 * cbSceneParam._m0[78u].z)) * _3737.z) / cbSceneParam._m0[78u].z)) + _3488;
        _3566 = _3746 * _3489;
    }
    else
    {
        _3560 = _3486;
        _3562 = _3487;
        _3564 = _3488;
        _3566 = _3489;
    }
    bool _3773;
    vec4 _3576;
    vec4 _3598;
    float _3600;
    float _3604;
    float _3605;
    float _3606;
    float _3607;
    bool _3617;
    for (;;)
    {
        _3576 = cbMatDynParam._m0[0u];
        float _3578 = roundEven(_3576.y);
        bool _3579 = _3578 == 3.0;
        float _3580 = log2(_3566);
        float _3587 = exp2(_3580 * cbSceneParam._m0[78u].x) * _3458;
        float _3588 = exp2(_3580 * cbSceneParam._m0[78u].y) * _3459;
        float _3589 = exp2(_3580 * cbSceneParam._m0[78u].z) * _3460;
        float _3596 = _1284 + (-0.5);
        _3598 = cbMtdParam._m0[1u];
        _3600 = _3598.y * _3596;
        float _3603 = (_3578 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3604 = _3603 * (_3579 ? _3587 : (_3587 + (cbSceneParam._m0[72u].w * _3560)));
        _3605 = _3603 * (_3579 ? _3588 : (_3588 + (cbSceneParam._m0[72u].w * _3562)));
        _3606 = _3603 * (_3579 ? _3589 : (_3589 + (cbSceneParam._m0[72u].w * _3564)));
        _3607 = _3596 * 0.999000012874603271484375;
        _3617 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3617)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3607) < 0.5)
            {
                _3773 = true;
                break;
            }
        }
        uint _3714 = _1333 + uint(_3576.w);
        if ((cbInstanceData._m0[_3714].w < 1.0) && ((cbInstanceData._m0[_3714].w + _3607) < 0.5))
        {
            _3773 = true;
            break;
        }
        if ((_3600 + 1.0) < _3598.x)
        {
            _3773 = true;
            break;
        }
        _3773 = false;
        break;
    }
    float _3977;
    if (_3773)
    {
        discard_state = true;
        _3977 = 0.0;
    }
    else
    {
        _3977 = cbInstanceData._m0[_3461].w;
    }
    SV_Target.x = _3604;
    SV_Target.y = _3605;
    SV_Target.z = _3606;
    SV_Target.w = _3977;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3461].w;
    discard_exit();
}


