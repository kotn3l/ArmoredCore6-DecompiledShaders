#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1661;
float _4321;
float _4322;
float _4323;
float _4324;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _251 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _252 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _253 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _259 = inversesqrt(dot(vec3(_251, _252, _253), vec3(_251, _252, _253)));
    float _266 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _273 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _428 = _426.x;
    float _440 = dot(vec4(_428, _426.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _457 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_428 - _440) * cbMtdParam._m0[23u].w) + _440) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4333 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _465 = (_458 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _466 = (_458 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _467 = (_458 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _298) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _299) + cbTextureTilingScale._m0[3u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _506 = _504.x;
    float _516 = dot(vec4(_506, _504.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _530 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_506 - _516) * cbMtdParam._m0[23u].w) + _516) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4344 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _538 = (_531 * ((_484.x * cbMtdParam._m0[13u].x) - _465)) + _465;
    float _539 = (_531 * ((_484.y * cbMtdParam._m0[13u].y) - _466)) + _466;
    float _540 = (_531 * ((_484.z * cbMtdParam._m0[13u].z) - _467)) + _467;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _298) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _299) + cbTextureTilingScale._m0[24u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _578 = _576.x;
    float _588 = dot(vec4(_578, _576.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _600 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _387.z) * 2.0) - ((((_578 - _588) * cbMtdParam._m0[23u].w) + _588) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4355 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _614 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _318.x) * ((_601 * ((_559.x * cbMtdParam._m0[14u].x) - _538)) + _538);
    float _617 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _318.y) * ((_601 * ((_559.y * cbMtdParam._m0[14u].y) - _539)) + _539);
    float _620 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _318.z) * ((_601 * ((_559.z * cbMtdParam._m0[14u].z) - _540)) + _540);
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _677 = _675.x;
    float _678 = _675.y;
    float _679 = _675.z;
    float _686 = ((_658.x - _677) * _458) + _677;
    float _687 = ((_658.y - _678) * _458) + _678;
    float _688 = ((_658.z - _679) * _458) + _679;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _298) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _299) + cbTextureTilingScale._m0[2u].w));
    float _711 = ((_700.x - _686) * _531) + _686;
    float _712 = ((_700.y - _687) * _531) + _687;
    float _713 = ((_700.z - _688) * _531) + _688;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _298) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _299) + cbTextureTilingScale._m0[23u].w));
    float _738 = ((_725.z - _713) * _601) + _713;
    float _741 = ((((_725.x - _711) * _601) + _711) * 2.0) + (-1.0);
    float _743 = ((((_725.y - _712) * _601) + _712) * 2.0) + (-1.0);
    float _744 = dot(vec2(_741, _743), vec2(_741, _743));
    float _4366 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _749 = sqrt(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))));
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _790 = _788.x;
    float _791 = 1.0 - _790;
    float _799 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _802 = ((isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : min(_799, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _811 = (_802 - ((((((_790 - _791) * cbMtdParam._m0[24u].z) + _791) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _802))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4387 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _819 = (_812 * ((_638.x * cbMtdParam._m0[18u].x) - _614)) + _614;
    float _820 = (_812 * ((_638.y * cbMtdParam._m0[18u].y) - _617)) + _617;
    float _821 = (_812 * ((_638.z * cbMtdParam._m0[18u].z) - _620)) + _620;
    vec4 _833 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _835 = _833.x;
    float _836 = 1.0 - _835;
    float _861 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_835 - _836) * cbMtdParam._m0[24u].w) + _836) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4398 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _862 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _870 = ((((cbMtdParam._m0[10u].x - _819) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _862) + _819;
    float _871 = ((((cbMtdParam._m0[10u].y - _820) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _862) + _820;
    float _872 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _821)) * _862) + _821;
    vec4 _898 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _900 = _898.x;
    float _917 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _900) * _458) + _900;
    float _934 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _298) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _299) + cbTextureTilingScale._m0[21u].w)).x - _917) * _531) + _917;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _298) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _299) + cbTextureTilingScale._m0[10u].w)).x - _934) * _601) + _934;
    float _955 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _951) * cbMtdParam._m0[19u].z) + _951;
    float _957 = _955 - (_955 * _812);
    float _959 = _957 - (_957 * _862);
    float _963 = (cbMtdParam._m0[19u].w * (_763.z - _738)) + _738;
    vec4 _979 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _986 = (_979.x * 2.0) + (-1.0);
    float _987 = (_979.y * 2.0) + (-1.0);
    float _988 = dot(vec2(_986, _987), vec2(_986, _987));
    float _4409 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _996 = (_812 * (_979.z - _963)) + _963;
    float _999 = ((cbMtdParam._m0[23u].x - _996) * _862) + _996;
    vec4 _1022 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1028 = (_1022.x * 2.0) + (-1.0);
    float _1029 = (_1022.y * 2.0) + (-1.0);
    float _1030 = dot(vec2(_1028, _1029), vec2(_1028, _1029));
    float _4420 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1038 = (((_763.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _741;
    float _1039 = (((_763.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _743;
    float _1051 = (((_986 - _1038) + (cbMtdParam._m0[21u].x * _1038)) * _812) + _1038;
    float _1052 = (((_987 - _1039) + (cbMtdParam._m0[21u].x * _1039)) * _812) + _1039;
    float _1053 = (_812 * (sqrt(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) - _749)) + _749;
    float _1064 = (((_1028 - _1051) + (_1051 * cbMtdParam._m0[22u].z)) * _862) + _1051;
    float _1065 = (((_1029 - _1052) + (_1052 * cbMtdParam._m0[22u].z)) * _862) + _1052;
    float _1066 = ((sqrt(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) - _1053) * _862) + _1053;
    float _1068 = cbMtdParam._m0[22u].x + _763.w;
    float _1071 = fma(_1066, _266 * NORMAL.x, fma(_1065, _273 * TANGENT.x, (_259 * _251) * _1064));
    float _1074 = fma(_1066, _266 * NORMAL.y, fma(_1065, _273 * TANGENT.y, (_259 * _252) * _1064));
    float _1077 = fma(_1066, _266 * NORMAL.z, fma(_1065, _273 * TANGENT.z, (_259 * _253) * _1064));
    float _1081 = inversesqrt(dot(vec3(_1071, _1074, _1077), vec3(_1071, _1074, _1077)));
    float _1082 = _1081 * _1071;
    float _1083 = _1081 * _1074;
    float _1084 = _1081 * _1077;
    float _4431 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1085 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4453 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4464 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4475 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4486 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _1090 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _1104 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1154 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1144);
    float _1155 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1144);
    float _1156 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1144);
    float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
    float _1161 = _1154 * _1160;
    float _1162 = _1155 * _1160;
    float _1163 = _1156 * _1160;
    vec4 _1168 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1170 = _1168.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1342 = sqrt(((_1154 * _1154) + (_1155 * _1155)) + (_1156 * _1156));
        float _1348 = (cbMatDynParam._m0[5u].x * _1342) + cbMatDynParam._m0[5u].y;
        float _4497 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1353 = (cbMatDynParam._m0[5u].z * _1342) + cbMatDynParam._m0[5u].w;
        float _4508 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) - _1349)) + _1349) < ((_1170 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1181 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1182 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1200 = fma(_1084, cbSceneParam._m0[5u].z, fma(_1083, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1082));
    float _1203 = fma(_1084, cbSceneParam._m0[6u].z, fma(_1083, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1082));
    float _1206 = fma(_1084, cbSceneParam._m0[7u].z, fma(_1083, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1082));
    uint _1219 = _279 + 9u;
    uint _1220 = _1219 + uint(cbMatDynParam._m0[0u].w);
    float _1226 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * cbInstanceData._m0[_1220].x;
    float _1227 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * cbInstanceData._m0[_1220].y;
    float _1228 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * cbInstanceData._m0[_1220].z;
    float _4519 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1229 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1230 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _4541 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1231 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _1232 = 1.0 - _1090;
    float _1233 = _1229 * _1232;
    float _1234 = _1230 * _1232;
    float _1235 = _1231 * _1232;
    float _1240 = (_1229 + (-0.039999999105930328369140625)) * _1090;
    float _1241 = (_1230 + (-0.039999999105930328369140625)) * _1090;
    float _1242 = (_1231 + (-0.039999999105930328369140625)) * _1090;
    float _1243 = _1240 + 0.039999999105930328369140625;
    float _1245 = _1241 + 0.039999999105930328369140625;
    float _1246 = _1242 + 0.039999999105930328369140625;
    vec4 _1255 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1181, cbSceneParam._m0[86u].y * _1182));
    float _1259 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * TEXCOORD_5.w) * _1255.x;
    float _1260 = dot(vec3(_1082, _1083, _1084), vec3(_1161, _1162, _1163));
    float _1263 = _1260 * 2.0;
    float _1267 = (_1263 * _1082) - _1161;
    float _1268 = (_1263 * _1083) - _1162;
    float _1269 = (_1263 * _1084) - _1163;
    float _1273 = abs(dot(vec3(_1161, _1162, _1163), vec3(_1082, _1083, _1084)));
    float _4552 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1275 = sqrt(_1085);
    float _1288 = exp2((_1275 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1275 * 3.0));
    float _1294 = (1.0 - _1288) * ((_1275 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1295 = _1288 * _1275;
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1327 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1331 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1660;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1385 = fma(_1331, cbModelParam._m0[26u].z, fma(_1327, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1323));
        float _1389 = fma(_1331, cbModelParam._m0[27u].z, fma(_1327, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1323));
        float _1393 = fma(_1331, cbModelParam._m0[28u].z, fma(_1327, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1323));
        float _1418 = _1323 + _1082;
        float _1419 = _1327 + _1083;
        float _1420 = _1331 + _1084;
        float _1430 = fma(_1420, cbModelParam._m0[26u].z, fma(_1419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1418)) - _1385;
        float _1431 = fma(_1420, cbModelParam._m0[27u].z, fma(_1419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1418)) - _1389;
        float _1432 = fma(_1420, cbModelParam._m0[28u].z, fma(_1419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1418)) - _1393;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1385 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1389 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[34u].z) + ((((((_1393 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1488 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1454.x + (-0.5));
        float _1490 = _1488 * (_1454.y + (-0.5));
        float _1491 = _1488 * (_1454.z + (-0.5));
        float _1498 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1461.x + (-0.5));
        float _1500 = _1498 * (_1461.y + (-0.5));
        float _1501 = _1498 * (_1461.z + (-0.5));
        float _1508 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1468.x + (-0.5));
        float _1510 = _1508 * (_1468.y + (-0.5));
        float _1511 = _1508 * (_1468.z + (-0.5));
        float _1518 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1475.x + (-0.5));
        float _1520 = _1518 * (_1475.y + (-0.5));
        float _1521 = _1518 * (_1475.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1542 = (dot(vec3(_1082, _1083, _1084), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1552 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4600 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1554 + 1.0))) + _1559) * _1522;
        float _1569 = _1490 * 0.5;
        float _1570 = _1500 * 0.5;
        float _1571 = _1510 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_1082, _1083, _1084), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4633 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1596 + 1.0))) + _1601) * _1523;
        float _1611 = _1491 * 0.5;
        float _1612 = _1501 * 0.5;
        float _1613 = _1511 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_1082, _1083, _1084), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4644 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4655 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4666 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_1638 + 1.0))) + _1643) * _1524;
        _1660 = _1491;
        _1662 = _1490;
        _1663 = _1489;
        _1664 = _1501;
        _1665 = _1500;
        _1666 = _1499;
        _1667 = _1511;
        _1668 = _1510;
        _1669 = _1509;
        _1670 = _1524;
        _1671 = _1523;
        _1672 = _1522;
        _1673 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1674 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1675 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
    }
    else
    {
        _1660 = _1661;
        _1662 = _1661;
        _1663 = _1661;
        _1664 = _1661;
        _1665 = _1661;
        _1666 = _1661;
        _1667 = _1661;
        _1668 = _1661;
        _1669 = _1661;
        _1670 = _1661;
        _1671 = _1661;
        _1672 = _1661;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    float _1983;
    float _1984;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1701 = fma(_1331, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323));
        float _1705 = fma(_1331, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323));
        float _1709 = fma(_1331, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323));
        float _1732 = _1323 + _1082;
        float _1733 = _1327 + _1083;
        float _1734 = _1331 + _1084;
        float _1744 = fma(_1734, cbModelParam._m0[30u].z, fma(_1733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1732)) - _1701;
        float _1745 = fma(_1734, cbModelParam._m0[31u].z, fma(_1733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1732)) - _1705;
        float _1746 = fma(_1734, cbModelParam._m0[32u].z, fma(_1733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1732)) - _1709;
        float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
        float _1763 = ((_1750 * _1744) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1701 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1764 = ((_1750 * _1745) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1705 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1765 = ((_1750 * _1746) / cbModelParam._m0[35u].z) + ((((((_1709 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1767 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        vec4 _1774 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        vec4 _1781 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        vec4 _1788 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        float _1800 = exp2((_1767.w + (-0.5)) * 20.0) * 2.0;
        float _1801 = _1800 * (_1767.x + (-0.5));
        float _1802 = _1800 * (_1767.y + (-0.5));
        float _1803 = _1800 * (_1767.z + (-0.5));
        float _1810 = exp2((_1774.w + (-0.5)) * 20.0) * 2.0;
        float _1811 = _1810 * (_1774.x + (-0.5));
        float _1812 = _1810 * (_1774.y + (-0.5));
        float _1813 = _1810 * (_1774.z + (-0.5));
        float _1820 = exp2((_1781.w + (-0.5)) * 20.0) * 2.0;
        float _1821 = _1820 * (_1781.x + (-0.5));
        float _1822 = _1820 * (_1781.y + (-0.5));
        float _1823 = _1820 * (_1781.z + (-0.5));
        float _1830 = exp2((_1788.w + (-0.5)) * 20.0) * 2.0;
        float _1831 = _1830 * (_1788.x + (-0.5));
        float _1832 = _1830 * (_1788.y + (-0.5));
        float _1833 = _1830 * (_1788.z + (-0.5));
        float _1834 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1835 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1836 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1837 = _1801 * 0.5;
        float _1838 = _1811 * 0.5;
        float _1839 = _1821 * 0.5;
        float _1840 = dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839));
        float _1845 = (_1840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1840);
        float _1853 = (dot(vec3(_1082, _1083, _1084), vec3(_1845 * _1837, _1845 * _1838, _1845 * _1839)) + 1.0) * 0.5;
        float _4707 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839)) / (_1834 + 9.9999997473787516355514526367188e-06);
        float _4718 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _1864 = _1863 * 2.0;
        float _1868 = (1.0 - _1863) / (_1863 + 1.0);
        float _4729 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _1878 = ((((1.0 - _1869) * (_1864 + 2.0)) * exp2(log2(isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_1864 + 1.0))) + _1869) * _1834;
        float _1879 = _1802 * 0.5;
        float _1880 = _1812 * 0.5;
        float _1881 = _1822 * 0.5;
        float _1882 = dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881));
        float _1887 = (_1882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1882);
        float _1895 = (dot(vec3(_1082, _1083, _1084), vec3(_1887 * _1879, _1887 * _1880, _1887 * _1881)) + 1.0) * 0.5;
        float _4740 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1904 = sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881)) / (_1835 + 9.9999997473787516355514526367188e-06);
        float _4751 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _1906 = _1905 * 2.0;
        float _1910 = (1.0 - _1905) / (_1905 + 1.0);
        float _4762 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _1920 = ((((1.0 - _1911) * (_1906 + 2.0)) * exp2(log2(isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_1906 + 1.0))) + _1911) * _1835;
        float _1921 = _1803 * 0.5;
        float _1922 = _1813 * 0.5;
        float _1923 = _1823 * 0.5;
        float _1924 = dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923));
        float _1929 = (_1924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1924);
        float _1937 = (dot(vec3(_1082, _1083, _1084), vec3(_1929 * _1921, _1929 * _1922, _1929 * _1923)) + 1.0) * 0.5;
        float _4773 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1946 = sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923)) / (_1836 + 9.9999997473787516355514526367188e-06);
        float _4784 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _1948 = _1947 * 2.0;
        float _1952 = (1.0 - _1947) / (_1947 + 1.0);
        float _4795 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _1962 = ((((1.0 - _1953) * (_1948 + 2.0)) * exp2(log2(isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_1948 + 1.0))) + _1953) * _1836;
        _1970 = _1803;
        _1971 = _1802;
        _1972 = _1801;
        _1973 = _1813;
        _1974 = _1812;
        _1975 = _1811;
        _1976 = _1823;
        _1977 = _1822;
        _1978 = _1821;
        _1979 = _1836;
        _1980 = _1835;
        _1981 = _1834;
        _1982 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)));
        _1983 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)));
        _1984 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)));
    }
    else
    {
        _1970 = _1661;
        _1971 = _1661;
        _1972 = _1661;
        _1973 = _1661;
        _1974 = _1661;
        _1975 = _1661;
        _1976 = _1661;
        _1977 = _1661;
        _1978 = _1661;
        _1979 = _1661;
        _1980 = _1661;
        _1981 = _1661;
        _1982 = 0.0;
        _1983 = 0.0;
        _1984 = 0.0;
    }
    float _1994 = (cbModelParam._m0[1u].x * (_1982 - _1673)) + _1673;
    float _1995 = (cbModelParam._m0[1u].x * (_1983 - _1674)) + _1674;
    float _1996 = (cbModelParam._m0[1u].x * (_1984 - _1675)) + _1675;
    float _2017 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1994));
    float _2038 = _1267 * 0.5;
    float _2039 = _1268 * 0.5;
    float _2040 = _1269 * 0.5;
    float _2041 = dot(vec4(_2038, _2039, _2040, 1.0), vec4(_1972, _1975, _1978, _1981));
    float _2044 = dot(vec4(_2038, _2039, _2040, 1.0), vec4(_1971, _1974, _1977, _1980));
    float _2047 = dot(vec4(_2038, _2039, _2040, 1.0), vec4(_1970, _1973, _1976, _1979));
    float _2081;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2054 = dot(vec4(_2038, _2039, _2040, 1.0), vec4(_1660, _1664, _1667, _1670));
        float _2058 = dot(vec4(_2038, _2039, _2040, 1.0), vec4(_1662, _1665, _1668, _1671));
        float _2062 = dot(vec4(_2038, _2039, _2040, 1.0), vec4(_1663, _1666, _1669, _1672));
        float _2069 = dot(vec4(cbModelParam._m0[39u]), vec4(_2038, _2039, _2040, 1.0));
        _2081 = dot(vec3(isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)), isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0)), isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2069) ? 0.0 : (isnan(0.0) ? _2069 : max(0.0, _2069))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2081 = 1.0;
    }
    float _2092;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2083 = dot(vec4(cbModelParam._m0[40u]), vec4(_2038, _2039, _2040, 1.0));
        _2092 = dot(vec3(isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)), isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)), isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2083) ? 0.0 : (isnan(0.0) ? _2083 : max(0.0, _2083))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2092 = 1.0;
    }
    float _2096 = (_2092 * cbModelParam._m0[1u].x) + (_2081 * (1.0 - cbModelParam._m0[1u].x));
    float _2106 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1085);
    float _2107 = isnan(_2106) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2106 : min(cbModelParam._m0[25u].z, _2106));
    float _2187;
    float _2189;
    float _2191;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2154 = fma(_1331, cbModelParam._m0[13u].z, fma(_1327, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1323)) + cbModelParam._m0[13u].w;
        float _2158 = fma(_1331, cbModelParam._m0[14u].z, fma(_1327, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1323)) + cbModelParam._m0[14u].w;
        float _2162 = fma(_1331, cbModelParam._m0[15u].z, fma(_1327, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1323)) + cbModelParam._m0[15u].w;
        float _2165 = fma(_1269, cbModelParam._m0[13u].z, fma(_1268, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267));
        float _2168 = fma(_1269, cbModelParam._m0[14u].z, fma(_1268, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267));
        float _2171 = fma(_1269, cbModelParam._m0[15u].z, fma(_1268, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267));
        float _2199;
        if (_2165 > 0.0)
        {
            _2199 = abs((1.0 - _2154) / _2165);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2154 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2199 = frontier_phi_17_15_ladder;
        }
        float _2370;
        if (_2168 > 0.0)
        {
            _2370 = abs((1.0 - _2158) / _2168);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2168 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2158 + 1.0) / _2168);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2370 = frontier_phi_26_22_ladder;
        }
        float _2665;
        if (_2171 > 0.0)
        {
            _2665 = abs((1.0 - _2162) / _2171);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2171 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2162 + 1.0) / _2171);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2665 = frontier_phi_38_33_ladder;
        }
        float _2667 = isnan(_2370) ? _2199 : (isnan(_2199) ? _2370 : min(_2199, _2370));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _2165) + _2154;
        float _2673 = (_2668 * _2168) + _2158;
        float _2674 = (_2668 * _2171) + _2162;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2675;
        float _2679 = _2675 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 > _2679) || ((_2673 < _2677) || ((_2672 < _2677) || (_2672 > _2679))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2674, cbModelParam._m0[9u].z, fma(_2673, cbModelParam._m0[9u].y, _2672 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2674, cbModelParam._m0[10u].z, fma(_2673, cbModelParam._m0[10u].y, _2672 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2674, cbModelParam._m0[11u].z, fma(_2673, cbModelParam._m0[11u].y, _2672 * cbModelParam._m0[11u].x))), _2107);
            frontier_phi_16_38_ladder = _2819.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2819.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2819.x * cbModelParam._m0[1u].y;
        }
        _2187 = frontier_phi_16_38_ladder_2;
        _2189 = frontier_phi_16_38_ladder_1;
        _2191 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2175 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1267, _1268, _1269), _2107);
        _2187 = _2175.x * cbModelParam._m0[1u].y;
        _2189 = _2175.y * cbModelParam._m0[1u].y;
        _2191 = _2175.z * cbModelParam._m0[1u].y;
    }
    float _2195 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1085);
    float _2196 = isnan(_2195) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2195 : min(cbModelParam._m0[25u].w, _2195));
    float _2285;
    float _2287;
    float _2289;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2249 = fma(_1331, cbModelParam._m0[21u].z, fma(_1327, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1323)) + cbModelParam._m0[21u].w;
        float _2253 = fma(_1331, cbModelParam._m0[22u].z, fma(_1327, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1323)) + cbModelParam._m0[22u].w;
        float _2257 = fma(_1331, cbModelParam._m0[23u].z, fma(_1327, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1323)) + cbModelParam._m0[23u].w;
        float _2260 = fma(_1269, cbModelParam._m0[21u].z, fma(_1268, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267));
        float _2263 = fma(_1269, cbModelParam._m0[22u].z, fma(_1268, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267));
        float _2266 = fma(_1269, cbModelParam._m0[23u].z, fma(_1268, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267));
        float _2375;
        if (_2260 > 0.0)
        {
            _2375 = abs((1.0 - _2249) / _2260);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2260 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2249 + 1.0) / _2260);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2375 = frontier_phi_28_24_ladder;
        }
        float _2692;
        if (_2263 > 0.0)
        {
            _2692 = abs((1.0 - _2253) / _2263);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2263 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2253 + 1.0) / _2263);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2692 = frontier_phi_40_35_ladder;
        }
        float _3030;
        if (_2266 > 0.0)
        {
            _3030 = abs((1.0 - _2257) / _2266);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2266 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2257 + 1.0) / _2266);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3030 = frontier_phi_50_47_ladder;
        }
        float _3032 = isnan(_2692) ? _2375 : (isnan(_2375) ? _2692 : min(_2375, _2692));
        float _3033 = isnan(_3030) ? _3032 : (isnan(_3032) ? _3030 : min(_3032, _3030));
        float _3037 = (_3033 * _2260) + _2249;
        float _3038 = (_3033 * _2263) + _2253;
        float _3039 = (_3033 * _2266) + _2257;
        float _3040 = _3033 * 9.9999997473787516355514526367188e-05;
        float _3041 = (-1.0) - _3040;
        float _3043 = _3040 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3039 > _3043) || ((_3039 < _3041) || ((_3038 > _3043) || ((_3038 < _3041) || ((_3037 < _3041) || (_3037 > _3043))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3039, cbModelParam._m0[17u].z, fma(_3038, cbModelParam._m0[17u].y, _3037 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3039, cbModelParam._m0[18u].z, fma(_3038, cbModelParam._m0[18u].y, _3037 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3039, cbModelParam._m0[19u].z, fma(_3038, cbModelParam._m0[19u].y, _3037 * cbModelParam._m0[19u].x))), _2196);
            frontier_phi_25_50_ladder = _3161.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3161.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3161.x * cbModelParam._m0[1u].z;
        }
        _2285 = frontier_phi_25_50_ladder_2;
        _2287 = frontier_phi_25_50_ladder_1;
        _2289 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2269 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1267, _1268, _1269), _2196);
        _2285 = _2269.x * cbModelParam._m0[1u].z;
        _2287 = _2269.y * cbModelParam._m0[1u].z;
        _2289 = _2269.z * cbModelParam._m0[1u].z;
    }
    float _2302 = (((_1294 * _1243) + _1295) * _1259) * ((cbModelParam._m0[1u].w * (_2285 - _2187)) + _2187);
    float _2304 = (((_1294 * _1245) + _1295) * _1259) * ((cbModelParam._m0[1u].w * (_2287 - _2189)) + _2189);
    float _2306 = (((_1294 * _1246) + _1295) * _1259) * ((cbModelParam._m0[1u].w * (_2289 - _2191)) + _2191);
    float _2309 = fma(_2306, cbSceneParam._m0[89u].z, fma(_2304, cbSceneParam._m0[89u].y, _2302 * cbSceneParam._m0[89u].x));
    float _2312 = fma(_2306, cbSceneParam._m0[90u].z, fma(_2304, cbSceneParam._m0[90u].y, _2302 * cbSceneParam._m0[90u].x));
    float _2315 = fma(_2306, cbSceneParam._m0[91u].z, fma(_2304, cbSceneParam._m0[91u].y, _2302 * cbSceneParam._m0[91u].x));
    float _2349 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2353 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2361 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2362 = _2349 / _2361;
    float _2363 = _2353 / _2361;
    float _2364 = _2357 / _2361;
    float _2511;
    float _2512;
    float _2513;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2391 = ((uint(_2364 > cbSceneParam._m0[59u].y) + uint(_2364 > cbSceneParam._m0[59u].x)) + uint(_2364 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2392 = _2391 + 43u;
        uint _2400 = _2391 + 44u;
        uint _2408 = _2391 + 45u;
        uint _2416 = _2391 + 46u;
        float _2427 = fma(_2361, cbSceneParam._m0[_2392].w, fma(_2357, cbSceneParam._m0[_2392].z, fma(_2353, cbSceneParam._m0[_2392].y, _2349 * cbSceneParam._m0[_2392].x)));
        float _2431 = fma(_2361, cbSceneParam._m0[_2400].w, fma(_2357, cbSceneParam._m0[_2400].z, fma(_2353, cbSceneParam._m0[_2400].y, _2349 * cbSceneParam._m0[_2400].x)));
        float _2439 = fma(_2361, cbSceneParam._m0[_2416].w, fma(_2357, cbSceneParam._m0[_2416].z, fma(_2353, cbSceneParam._m0[_2416].y, _2349 * cbSceneParam._m0[_2416].x)));
        float _2444 = cbSceneParam._m0[33u].z * _2439;
        float _2446 = cbSceneParam._m0[33u].w * _2439;
        float _2449 = fma(_2361, cbSceneParam._m0[_2408].w, fma(_2357, cbSceneParam._m0[_2408].z, fma(_2353, cbSceneParam._m0[_2408].y, _2349 * cbSceneParam._m0[_2408].x))) / _2439;
        float _2497 = (cbSceneParam._m0[33u].x - sqrt(((_2363 * _2363) + (_2362 * _2362)) + (_2364 * _2364))) * cbSceneParam._m0[33u].y;
        float _4921 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2504 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2444 + _2427) / _2439, (_2446 + _2431) / _2439), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2446 + _2427) / _2439, (_2431 - _2444) / _2439), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2427 - _2444) / _2439, (_2431 - _2446) / _2439), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2427 - _2446) / _2439, (_2444 + _2431) / _2439), _2449), 0.0)).x), vec4(0.25)));
        _2511 = 1.0 - (_2504 * cbSceneParam._m0[34u].x);
        _2512 = 1.0 - (_2504 * cbSceneParam._m0[34u].y);
        _2513 = 1.0 - (_2504 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2511 = 1.0;
        _2512 = 1.0;
        _2513 = 1.0;
    }
    float _2577;
    float _2579;
    float _2581;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2565 = fma(_2361, cbSceneParam._m0[63u].w, fma(_2357, cbSceneParam._m0[63u].z, fma(_2353, cbSceneParam._m0[63u].y, _2349 * cbSceneParam._m0[63u].x)));
        float _2566 = fma(_2361, cbSceneParam._m0[60u].w, fma(_2357, cbSceneParam._m0[60u].z, fma(_2353, cbSceneParam._m0[60u].y, _2349 * cbSceneParam._m0[60u].x))) / _2565;
        float _2567 = fma(_2361, cbSceneParam._m0[61u].w, fma(_2357, cbSceneParam._m0[61u].z, fma(_2353, cbSceneParam._m0[61u].y, _2349 * cbSceneParam._m0[61u].x))) / _2565;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2566 >= cbSceneParam._m0[64u].x) && (_2567 >= cbSceneParam._m0[64u].y)) && (_2566 <= cbSceneParam._m0[64u].z)) && (_2567 <= cbSceneParam._m0[64u].w))
        {
            float _2705 = fma(_2361, cbSceneParam._m0[62u].w, fma(_2357, cbSceneParam._m0[62u].z, fma(_2353, cbSceneParam._m0[62u].y, _2349 * cbSceneParam._m0[62u].x))) / _2565;
            float _2709 = isnan(cbSceneParam._m0[41u].w) ? _2705 : (isnan(_2705) ? cbSceneParam._m0[41u].w : max(_2705, cbSceneParam._m0[41u].w));
            float _2752 = (cbSceneParam._m0[33u].x - sqrt(((_2363 * _2363) + (_2362 * _2362)) + (_2364 * _2364))) * cbSceneParam._m0[33u].y;
            float _4937 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
            float _2759 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2566, cbSceneParam._m0[33u].w + _2567), _2709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2566, _2567 - cbSceneParam._m0[33u].z), _2709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2566 - cbSceneParam._m0[33u].z, _2567 - cbSceneParam._m0[33u].w), _2709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2566 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2567), _2709), 0.0)).x), vec4(0.25)));
            float _2763 = 1.0 - (_2759 * cbSceneParam._m0[34u].x);
            float _2764 = 1.0 - (_2759 * cbSceneParam._m0[34u].y);
            float _2765 = 1.0 - (_2759 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2765) ? _2513 : (isnan(_2513) ? _2765 : min(_2513, _2765));
            frontier_phi_37_36_ladder_1 = isnan(_2764) ? _2512 : (isnan(_2512) ? _2764 : min(_2512, _2764));
            frontier_phi_37_36_ladder_2 = isnan(_2763) ? _2511 : (isnan(_2511) ? _2763 : min(_2511, _2763));
        }
        else
        {
            frontier_phi_37_36_ladder = _2513;
            frontier_phi_37_36_ladder_1 = _2512;
            frontier_phi_37_36_ladder_2 = _2511;
        }
        _2577 = frontier_phi_37_36_ladder_2;
        _2579 = frontier_phi_37_36_ladder_1;
        _2581 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2577 = _2511;
        _2579 = _2512;
        _2581 = _2513;
    }
    uvec4 _2586 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2588 = _2586.x * 14u;
    uint _2589 = _2588 + 13u;
    float _2596 = _1259 + (-1.0);
    float _2601 = (cbLight._m0[_2589].x * _2596) + 1.0;
    float _2602 = (cbLight._m0[_2589].y * _2596) + 1.0;
    float _2603 = (cbLight._m0[_2589].z * _2596) + 1.0;
    float _2604 = (cbLight._m0[_2589].w * _2596) + 1.0;
    uint _2605 = _2588 + 5u;
    float _2611 = isnan(1.0) ? _2602 : (isnan(_2602) ? 1.0 : min(_2602, 1.0));
    uint _2615 = _2588 + 4u;
    float _2624 = isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0));
    uint _2628 = _2588 | 1u;
    float _2639 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_1082, _1083, _1084));
    float _2642 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_1082, _1083, _1084));
    float _4973 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _4984 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2647 = (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * 0.3183098733425140380859375;
    float _2649 = (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * 0.3183098733425140380859375;
    float _2656 = ((cbLight._m0[_2605].x * _2611) * _2649) + (((cbLight._m0[_2615].x * _2577) * _2624) * _2647);
    float _2657 = ((_2611 * cbLight._m0[_2605].y) * _2649) + (((cbLight._m0[_2615].y * _2579) * _2624) * _2647);
    float _2658 = ((_2611 * cbLight._m0[_2605].z) * _2649) + (((cbLight._m0[_2615].z * _2581) * _2624) * _2647);
    uvec4 _2662 = floatBitsToUint(cbLight._m0[_2588 + 12u]);
    bool _2664 = _2662.x == 0u;
    float _2766;
    float _2768;
    float _2770;
    if (_2664)
    {
        _2766 = _2656;
        _2768 = _2657;
        _2770 = _2658;
    }
    else
    {
        uint _2774 = _2588 + 6u;
        float _2790 = (dot(vec3(cbLight._m0[_2588 + 2u].xyz), vec3(_1082, _1083, _1084)) * 0.5) + 0.5;
        float _2791 = _2790 * _2790;
        float _4995 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2792 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _2793 = isnan(1.0) ? _2603 : (isnan(_2603) ? 1.0 : min(_2603, 1.0));
        _2766 = (((cbLight._m0[_2774].x * 0.3183098733425140380859375) * _2792) * _2793) + _2656;
        _2768 = (((cbLight._m0[_2774].y * 0.3183098733425140380859375) * _2792) * _2793) + _2657;
        _2770 = (((cbLight._m0[_2774].z * 0.3183098733425140380859375) * _2792) * _2793) + _2658;
    }
    bool _2773 = _2662.y == 0u;
    float _2828;
    float _2830;
    float _2832;
    if (_2773)
    {
        _2828 = _2766;
        _2830 = _2768;
        _2832 = _2770;
    }
    else
    {
        uint _3001 = _2588 + 7u;
        float _3017 = (dot(vec3(cbLight._m0[_2588 + 3u].xyz), vec3(_1082, _1083, _1084)) * 0.5) + 0.5;
        float _3018 = _3017 * _3017;
        float _5011 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3019 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
        float _3020 = isnan(1.0) ? _2604 : (isnan(_2604) ? 1.0 : min(_2604, 1.0));
        _2828 = (((cbLight._m0[_3001].x * 0.3183098733425140380859375) * _3019) * _3020) + _2766;
        _2830 = (((cbLight._m0[_3001].y * 0.3183098733425140380859375) * _3019) * _3020) + _2768;
        _2832 = (((cbLight._m0[_3001].z * 0.3183098733425140380859375) * _3019) * _3020) + _2770;
    }
    uint _2835 = _2588 + 8u;
    float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _1085) * 0.949999988079071044921875);
    float _2849 = _2848 * _2848;
    float _2850 = cbLight._m0[_2588].x + _1161;
    float _2851 = cbLight._m0[_2588].y + _1162;
    float _2852 = cbLight._m0[_2588].z + _1163;
    float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
    float _2857 = _2856 * _2850;
    float _2858 = _2856 * _2851;
    float _2859 = _2856 * _2852;
    float _2860 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_2588].xyz));
    float _5027 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2863 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
    float _5038 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _2864 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
    float _2865 = dot(vec3(_1082, _1083, _1084), vec3(_2857, _2858, _2859));
    float _5049 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
    float _2868 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
    float _2869 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2857, _2858, _2859));
    float _5060 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2873 = _2849 * _2849;
    float _2877 = ((_2868 * _2868) * (_2873 + (-1.0))) + 1.0;
    float _2885 = exp2(log2(1.0 - (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0)))) * 5.0);
    float _2886 = 0.959999978542327880859375 - _1240;
    float _2888 = 0.959999978542327880859375 - _1241;
    float _2889 = 0.959999978542327880859375 - _1242;
    float _2896 = 1.0 - _2849;
    float _2907 = (0.5 / (((_2864 * ((_2863 * _2896) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2864 * _2896) + _2849) * _2863))) * _2863;
    float _5071 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2909 = (isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_2873 / ((_2877 * _2877) * 3.141590118408203125));
    uint _2923 = _2588 + 9u;
    float _2934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2628].w)) * _1085) * 0.949999988079071044921875);
    float _2935 = _2934 * _2934;
    float _2936 = cbLight._m0[_2628].x + _1161;
    float _2937 = cbLight._m0[_2628].y + _1162;
    float _2938 = cbLight._m0[_2628].z + _1163;
    float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
    float _2943 = _2942 * _2936;
    float _2944 = _2942 * _2937;
    float _2945 = _2942 * _2938;
    float _2946 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_2628].xyz));
    float _5082 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
    float _2949 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
    float _2950 = dot(vec3(_1082, _1083, _1084), vec3(_2943, _2944, _2945));
    float _5093 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2953 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
    float _2954 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_2943, _2944, _2945));
    float _5104 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
    float _2958 = _2935 * _2935;
    float _2962 = ((_2953 * _2953) * (_2958 + (-1.0))) + 1.0;
    float _2969 = exp2(log2(1.0 - (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0)))) * 5.0);
    float _2976 = 1.0 - _2935;
    float _2986 = (0.5 / (((_2864 * ((_2949 * _2976) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2864 * _2976) + _2935) * _2949))) * _2949;
    float _5115 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
    float _2988 = (isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0))) * (_2958 / ((_2962 * _2962) * 3.141590118408203125));
    float _2998 = (((((_2969 * _2886) + _1243) * cbLight._m0[_2923].x) * _2988) * _2611) + ((((cbLight._m0[_2835].x * _2577) * ((_2885 * _2886) + _1243)) * _2909) * _2624);
    float _2999 = (((((_2969 * _2888) + _1245) * cbLight._m0[_2923].y) * _2988) * _2611) + ((((cbLight._m0[_2835].y * _2579) * ((_2885 * _2888) + _1245)) * _2909) * _2624);
    float _3000 = (((((_2969 * _2889) + _1246) * cbLight._m0[_2923].z) * _2988) * _2611) + ((((cbLight._m0[_2835].z * _2581) * ((_2885 * _2889) + _1246)) * _2909) * _2624);
    float _3056;
    float _3058;
    float _3060;
    if (_2664)
    {
        _3056 = _2998;
        _3058 = _2999;
        _3060 = _3000;
    }
    else
    {
        uint _3062 = _2588 + 2u;
        uint _3066 = _2588 + 10u;
        float _3080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3062].w)) * _1085) * 0.949999988079071044921875);
        float _3081 = _3080 * _3080;
        float _3082 = cbLight._m0[_3062].x + _1161;
        float _3083 = cbLight._m0[_3062].y + _1162;
        float _3084 = cbLight._m0[_3062].z + _1163;
        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
        float _3089 = _3088 * _3082;
        float _3090 = _3088 * _3083;
        float _3091 = _3088 * _3084;
        float _3092 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_3062].xyz));
        float _5126 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        float _3095 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
        float _3096 = dot(vec3(_1082, _1083, _1084), vec3(_3089, _3090, _3091));
        float _5137 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3099 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
        float _3100 = dot(vec3(cbLight._m0[_3062].xyz), vec3(_3089, _3090, _3091));
        float _5148 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3104 = _3081 * _3081;
        float _3108 = ((_3099 * _3099) * (_3104 + (-1.0))) + 1.0;
        float _3115 = exp2(log2(1.0 - (isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0)))) * 5.0);
        float _3122 = 1.0 - _3081;
        float _3132 = (0.5 / (((_2864 * ((_3095 * _3122) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_2864 * _3122) + _3081) * _3095))) * _3095;
        float _5159 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
        float _3134 = (isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3104 / ((_3108 * _3108) * 3.141590118408203125));
        float _3135 = isnan(1.0) ? _2603 : (isnan(_2603) ? 1.0 : min(_2603, 1.0));
        _3056 = (((((_3115 * _2886) + _1243) * cbLight._m0[_3066].x) * _3134) * _3135) + _2998;
        _3058 = (((((_3115 * _2888) + _1245) * cbLight._m0[_3066].y) * _3134) * _3135) + _2999;
        _3060 = (((((_3115 * _2889) + _1246) * cbLight._m0[_3066].z) * _3134) * _3135) + _3000;
    }
    float _3166;
    float _3168;
    float _3170;
    if (_2773)
    {
        _3166 = _3056;
        _3168 = _3058;
        _3170 = _3060;
    }
    else
    {
        uint _3177 = _2588 + 3u;
        uint _3181 = _2588 + 11u;
        float _3195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3177].w)) * _1085) * 0.949999988079071044921875);
        float _3196 = _3195 * _3195;
        float _3197 = cbLight._m0[_3177].x + _1161;
        float _3198 = cbLight._m0[_3177].y + _1162;
        float _3199 = cbLight._m0[_3177].z + _1163;
        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
        float _3204 = _3203 * _3197;
        float _3205 = _3203 * _3198;
        float _3206 = _3203 * _3199;
        float _3207 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_3177].xyz));
        float _5175 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
        float _3210 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
        float _3211 = dot(vec3(_1082, _1083, _1084), vec3(_3204, _3205, _3206));
        float _5186 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
        float _3214 = isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0));
        float _3215 = dot(vec3(cbLight._m0[_3177].xyz), vec3(_3204, _3205, _3206));
        float _5197 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        float _3219 = _3196 * _3196;
        float _3223 = ((_3214 * _3214) * (_3219 + (-1.0))) + 1.0;
        float _3230 = exp2(log2(1.0 - (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0)))) * 5.0);
        float _3237 = 1.0 - _3196;
        float _3247 = (0.5 / (((_2864 * ((_3210 * _3237) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_2864 * _3237) + _3196) * _3210))) * _3210;
        float _5208 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
        float _3249 = (isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3219 / ((_3223 * _3223) * 3.141590118408203125));
        float _3250 = isnan(1.0) ? _2604 : (isnan(_2604) ? 1.0 : min(_2604, 1.0));
        _3166 = (((((_3230 * _2886) + _1243) * cbLight._m0[_3181].x) * _3249) * _3250) + _3056;
        _3168 = (((((_3230 * _2888) + _1245) * cbLight._m0[_3181].y) * _3249) * _3250) + _3058;
        _3170 = (((((_3230 * _2889) + _1246) * cbLight._m0[_3181].z) * _3249) * _3250) + _3060;
    }
    float _3316;
    float _3318;
    float _3320;
    float _3322;
    float _3324;
    float _3326;
    if (_2586.y == 0u)
    {
        uvec4 _3271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3272 = _3271.x;
        uint _3283 = uint((float(_3271.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1182) / _3272))) + floor(float(uint(cbSceneParam._m0[85u].x * _1181) / _3272)));
        float _3293 = (log2(_2364 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3294 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
        uint _3297 = uint(isnan(14.0) ? _3294 : (isnan(_3294) ? 14.0 : min(_3294, 14.0)));
        uvec4 _3302 = texelFetch(g_lightClusterGridBuffer, int(((_3297 << 2u) + (_3283 << 6u)) >> 2u));
        uint _3303 = _3302.x;
        uint _3304 = _3271.z;
        float _3383;
        float _3385;
        float _3387;
        float _3389;
        float _3391;
        float _3393;
        if (((((1u << ((_3304 >> 4u) & 15u)) + 4294967295u) & _3303) == 0u) || ((_3304 & 240u) == 0u))
        {
            _3383 = 0.0;
            _3385 = 0.0;
            _3387 = 0.0;
            _3389 = 0.0;
            _3391 = 0.0;
            _3393 = 0.0;
        }
        else
        {
            float _3384;
            float _3386;
            float _3388;
            float _3390;
            float _3392;
            float _3394;
            float _3536 = 0.0;
            float _3537 = 0.0;
            float _3538 = 0.0;
            float _3539 = 0.0;
            float _3540 = 0.0;
            float _3541 = 0.0;
            uint _3542 = 0u;
            uint _3551;
            bool _3552;
            for (;;)
            {
                _3551 = texelFetch(g_lightClassification, int((((_3297 << 5u) + (_3283 << 9u)) + (_3542 << 2u)) >> 2u)).x;
                _3552 = _3551 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3552)
                {
                    frontier_phi_71_pred = _3541;
                    frontier_phi_71_pred_1 = _3540;
                    frontier_phi_71_pred_2 = _3539;
                    frontier_phi_71_pred_3 = _3538;
                    frontier_phi_71_pred_4 = _3537;
                    frontier_phi_71_pred_5 = _3536;
                }
                else
                {
                    float _3681;
                    float _3682;
                    float _3683;
                    float _3684;
                    float _3685;
                    float _3686;
                    uint _3687;
                    _3681 = _3536;
                    _3682 = _3537;
                    _3683 = _3538;
                    _3684 = _3539;
                    _3685 = _3540;
                    _3686 = _3541;
                    _3687 = _3551;
                    float _3608;
                    float _3609;
                    float _3610;
                    float _3611;
                    float _3612;
                    float _3613;
                    for (;;)
                    {
                        uint _3691 = uint(findLSB(_3687)) + (_3542 << 5u);
                        uint _3688 = (_3687 + 4294967295u) & _3687;
                        uint _3693 = _3691 * 48u;
                        vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3693)).x, texelFetch(g_PointLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3693 + 3u)).x));
                        uint _3713 = (_3691 * 48u) + 4u;
                        vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3713)).x, texelFetch(g_PointLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3713 + 3u)).x));
                        uint _3732 = (_3691 * 48u) + 8u;
                        vec3 _3743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3732)).x, texelFetch(g_PointLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3732 + 2u)).x));
                        float _3747 = _3707.x - _2362;
                        float _3748 = _3707.y - _2363;
                        float _3749 = _3707.z - _2364;
                        float _3750 = dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749));
                        float _3753 = inversesqrt(_3750);
                        float _3754 = _3753 * _3747;
                        float _3755 = _3753 * _3748;
                        float _3756 = _3753 * _3749;
                        float _3757 = dot(vec3(_1200, _1203, _1206), vec3(_3754, _3755, _3756));
                        float _3762 = 1.0 - (_3750 * _3707.w);
                        float _5234 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3763 = isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0));
                        float _3764 = sqrt(_3750) * _3726.w;
                        float _3767 = 1.39999997615814208984375 / (_3764 + 1.39999997615814208984375);
                        float _3768 = _3767 * _3767;
                        float _3771 = ((1.0 - _3768) * _3757) + _3768;
                        float _3774 = _3764 * _3764;
                        float _3778 = ((isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0))) * _3763) / ((_3774 * 0.699999988079071044921875) + 1.0);
                        float _3782 = (-0.0) - _2362;
                        float _3783 = (-0.0) - _2363;
                        float _3784 = (-0.0) - _2364;
                        float _3788 = inversesqrt(dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784)));
                        float _3789 = _3788 * _3782;
                        float _3790 = _3788 * _3783;
                        float _3791 = _3788 * _3784;
                        float _3798 = exp2(log2(1.0 / ((_3774 * 3.5) + 5.0)) * 0.25);
                        float _3799 = 1.0 - _1275;
                        float _3806 = sqrt(1.0 - ((1.0 - (_3799 * _3799)) * (1.0 - (_3798 * _3798))));
                        float _3807 = _3806 * _3806;
                        float _3808 = _3807 * _3807;
                        float _3809 = _3789 + _3754;
                        float _3810 = _3790 + _3755;
                        float _3811 = _3791 + _3756;
                        float _3815 = inversesqrt(dot(vec3(_3809, _3810, _3811), vec3(_3809, _3810, _3811)));
                        float _3819 = dot(vec3(_1200, _1203, _1206), vec3(_3789, _3790, _3791));
                        float _5250 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                        float _3822 = isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0));
                        float _3823 = dot(vec3(_1200, _1203, _1206), vec3(_3815 * _3809, _3815 * _3810, _3815 * _3811));
                        float _5261 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                        float _3826 = isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0));
                        float _3830 = ((_3826 * _3826) * (_3808 + (-1.0))) + 1.0;
                        float _3831 = _3767 * _3807;
                        float _3832 = _3831 * _3831;
                        float _3835 = ((1.0 - _3832) * _3757) + _3832;
                        float _5272 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                        float _3836 = isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0));
                        float _3837 = 1.0 - _3807;
                        float _3847 = (0.5 / (((_3836 * ((_3822 * _3837) + _3807)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3807) * _3822))) * _3836;
                        float _5283 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                        float _3858 = (((_3808 * 3.1415927410125732421875) * (isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0)))) / ((_3830 * _3830) * ((_3774 * 2.1991131305694580078125) + 3.141590118408203125))) * _3763;
                        _3611 = (_3778 * _3726.x) + _3684;
                        _3612 = (_3778 * _3726.y) + _3685;
                        _3613 = (_3778 * _3726.z) + _3686;
                        _3608 = (_3858 * _3743.x) + _3681;
                        _3609 = (_3858 * _3743.y) + _3682;
                        _3610 = (_3858 * _3743.z) + _3683;
                        if (_3688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3681 = _3608;
                            _3682 = _3609;
                            _3683 = _3610;
                            _3684 = _3611;
                            _3685 = _3612;
                            _3686 = _3613;
                            _3687 = _3688;
                        }
                    }
                    frontier_phi_71_pred = _3613;
                    frontier_phi_71_pred_1 = _3612;
                    frontier_phi_71_pred_2 = _3611;
                    frontier_phi_71_pred_3 = _3610;
                    frontier_phi_71_pred_4 = _3609;
                    frontier_phi_71_pred_5 = _3608;
                }
                _3394 = frontier_phi_71_pred;
                _3392 = frontier_phi_71_pred_1;
                _3390 = frontier_phi_71_pred_2;
                _3388 = frontier_phi_71_pred_3;
                _3386 = frontier_phi_71_pred_4;
                _3384 = frontier_phi_71_pred_5;
                uint _3543 = _3542 + 1u;
                if (_3543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3536 = _3384;
                    _3537 = _3386;
                    _3538 = _3388;
                    _3539 = _3390;
                    _3540 = _3392;
                    _3541 = _3394;
                    _3542 = _3543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3383 = _3384;
            _3385 = _3386;
            _3387 = _3388;
            _3389 = _3390;
            _3391 = _3392;
            _3393 = _3394;
        }
        uvec4 _3397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3398 = _3397.z;
        uint _3400 = (_3398 >> 8u) & 15u;
        float _3504;
        float _3506;
        float _3508;
        float _3510;
        float _3512;
        float _3514;
        if (((4294967295u << _3400) & _3303) == 0u)
        {
            _3504 = _3383;
            _3506 = _3385;
            _3508 = _3387;
            _3510 = _3389;
            _3512 = _3391;
            _3514 = _3393;
        }
        else
        {
            float _3529 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
            float _3530 = _3529 * _2362;
            float _3531 = _3529 * _2363;
            float _3532 = _3529 * _2364;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3400 < ((_3398 >> 12u) & 15u))
            {
                float _3505;
                float _3507;
                float _3509;
                float _3511;
                float _3513;
                float _3515;
                float _3664 = _3383;
                float _3665 = _3385;
                float _3666 = _3387;
                float _3667 = _3389;
                float _3668 = _3391;
                float _3669 = _3393;
                uint _3670 = _3400;
                uint _3679;
                bool _3680;
                for (;;)
                {
                    _3679 = texelFetch(g_lightClassification, int((((_3297 << 5u) + (_3283 << 9u)) + (_3670 << 2u)) >> 2u)).x;
                    _3680 = _3679 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3680)
                    {
                        frontier_phi_82_pred = _3669;
                        frontier_phi_82_pred_1 = _3668;
                        frontier_phi_82_pred_2 = _3667;
                        frontier_phi_82_pred_3 = _3666;
                        frontier_phi_82_pred_4 = _3665;
                        frontier_phi_82_pred_5 = _3664;
                    }
                    else
                    {
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _4165;
                        float _4166;
                        float _4167;
                        float _4168;
                        float _4169;
                        float _4170;
                        float _3885 = _3664;
                        float _3886 = _3665;
                        float _3887 = _3666;
                        float _3888 = _3667;
                        float _3889 = _3668;
                        float _3890 = _3669;
                        uint _3891 = _3679;
                        uint _3892;
                        vec4 _3917;
                        float _3918;
                        vec4 _3933;
                        vec3 _3945;
                        vec4 _3960;
                        vec4 _3975;
                        float _4021;
                        bool _4022;
                        for (;;)
                        {
                            uint _3902 = ((_3670 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3891));
                            _3892 = (_3891 + 4294967295u) & _3891;
                            uint _3904 = _3902 * 40u;
                            _3917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 3u)).x));
                            _3918 = _3917.w;
                            uint _3920 = (_3902 * 40u) + 4u;
                            _3933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 3u)).x));
                            uint _3935 = (_3902 * 40u) + 8u;
                            _3945 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 2u)).x));
                            uint _3947 = (_3902 * 40u) + 16u;
                            _3960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 3u)).x));
                            uint _3962 = (_3902 * 40u) + 20u;
                            _3975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 3u)).x));
                            uint _3977 = (_3902 * 40u) + 24u;
                            vec4 _3990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3977 + 3u)).x));
                            uint _3996 = (_3902 * 40u) + 28u;
                            vec4 _4009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3996 + 3u)).x));
                            _4021 = fma(_2364, _4009.z, fma(_2363, _4009.y, _4009.x * _2362)) + _4009.w;
                            _4022 = !((fma(_2364, _3990.z, fma(_2363, _3990.y, _3990.x * _2362)) + _3990.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4022)
                            {
                                float _4049 = _3917.x - _2362;
                                float _4050 = _3917.y - _2363;
                                float _4051 = _3917.z - _2364;
                                float _4052 = dot(vec3(_4049, _4050, _4051), vec3(_4049, _4050, _4051));
                                float _4055 = inversesqrt(_4052);
                                float _4056 = _4055 * _4049;
                                float _4057 = _4055 * _4050;
                                float _4058 = _4055 * _4051;
                                float _4062 = 1.0 - (_4052 / (_3918 * _3918));
                                float _5294 = isnan(0.0) ? _4062 : (isnan(_4062) ? 0.0 : max(_4062, 0.0));
                                float _4063 = isnan(1.0) ? _5294 : (isnan(_5294) ? 1.0 : min(_5294, 1.0));
                                float _4067 = sqrt(_4052) * _3933.w;
                                float _4069 = 1.39999997615814208984375 / (_4067 + 1.39999997615814208984375);
                                float _4070 = _4069 * _4069;
                                float _4073 = ((1.0 - _4070) * dot(vec3(_4056, _4057, _4058), vec3(_1200, _1203, _1206))) + _4070;
                                float _4076 = _4067 * _4067;
                                float _4080 = (fma(_2364, _3960.z, fma(_2363, _3960.y, _3960.x * _2362)) + _3960.w) / _4021;
                                float _4081 = (fma(_2364, _3975.z, fma(_2363, _3975.y, _3975.x * _2362)) + _3975.w) / _4021;
                                float _4085 = 1.0 - dot(vec2(_4080, _4081), vec2(_4080, _4081));
                                float _5310 = isnan(0.0) ? _4085 : (isnan(_4085) ? 0.0 : max(_4085, 0.0));
                                float _4086 = isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0));
                                float _4087 = _4086 * (((isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0))) * _4063) / ((_4076 * 0.699999988079071044921875) + 1.0));
                                float _4099 = exp2(log2(1.0 / ((_4076 * 3.5) + 5.0)) * 0.25);
                                float _4100 = 1.0 - _1275;
                                float _4107 = sqrt(1.0 - ((1.0 - (_4100 * _4100)) * (1.0 - (_4099 * _4099))));
                                float _4108 = _4107 * _4107;
                                float _4109 = _4108 * _4108;
                                float _4110 = _4056 - _3530;
                                float _4111 = _4057 - _3531;
                                float _4112 = _4058 - _3532;
                                float _4116 = inversesqrt(dot(vec3(_4110, _4111, _4112), vec3(_4110, _4111, _4112)));
                                float _4120 = dot(vec3(_1200, _1203, _1206), vec3((-0.0) - _3530, (-0.0) - _3531, (-0.0) - _3532));
                                float _5321 = isnan(0.0) ? _4120 : (isnan(_4120) ? 0.0 : max(_4120, 0.0));
                                float _4123 = isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0));
                                float _4124 = dot(vec3(_1200, _1203, _1206), vec3(_4116 * _4110, _4116 * _4111, _4116 * _4112));
                                float _5332 = isnan(0.0) ? _4124 : (isnan(_4124) ? 0.0 : max(_4124, 0.0));
                                float _4127 = isnan(1.0) ? _5332 : (isnan(_5332) ? 1.0 : min(_5332, 1.0));
                                float _4131 = ((_4127 * _4127) * (_4109 + (-1.0))) + 1.0;
                                float _4132 = _4069 * _4108;
                                float _4133 = _4132 * _4132;
                                float _4139 = ((1.0 - _4133) * dot(vec3(_1200, _1203, _1206), vec3(_4056, _4057, _4058))) + _4133;
                                float _5343 = isnan(0.0) ? _4139 : (isnan(_4139) ? 0.0 : max(_4139, 0.0));
                                float _4140 = isnan(1.0) ? _5343 : (isnan(_5343) ? 1.0 : min(_5343, 1.0));
                                float _4141 = 1.0 - _4108;
                                float _4151 = (0.5 / (((_4140 * ((_4123 * _4141) + _4108)) + 9.9999999392252902907785028219223e-09) + (((_4140 * _4141) + _4108) * _4123))) * _4140;
                                float _5354 = isnan(0.0) ? _4151 : (isnan(_4151) ? 0.0 : max(_4151, 0.0));
                                float _4161 = (_4086 * _4063) * (((_4109 * 3.1415927410125732421875) * (isnan(1.0) ? _5354 : (isnan(_5354) ? 1.0 : min(_5354, 1.0)))) / ((_4131 * _4131) * ((_4076 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4087 * _3933.z;
                                frontier_phi_88_pred_1 = _4087 * _3933.y;
                                frontier_phi_88_pred_2 = _4087 * _3933.x;
                                frontier_phi_88_pred_3 = _4161 * _3945.z;
                                frontier_phi_88_pred_4 = _4161 * _3945.y;
                                frontier_phi_88_pred_5 = _4161 * _3945.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4170 = frontier_phi_88_pred;
                            _4169 = frontier_phi_88_pred_1;
                            _4168 = frontier_phi_88_pred_2;
                            _4167 = frontier_phi_88_pred_3;
                            _4166 = frontier_phi_88_pred_4;
                            _4165 = frontier_phi_88_pred_5;
                            _3875 = _4168 + _3888;
                            _3876 = _4169 + _3889;
                            _3877 = _4170 + _3890;
                            _3872 = _4165 + _3885;
                            _3873 = _4166 + _3886;
                            _3874 = _4167 + _3887;
                            if (_3892 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3885 = _3872;
                                _3886 = _3873;
                                _3887 = _3874;
                                _3888 = _3875;
                                _3889 = _3876;
                                _3890 = _3877;
                                _3891 = _3892;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3877;
                        frontier_phi_82_pred_1 = _3876;
                        frontier_phi_82_pred_2 = _3875;
                        frontier_phi_82_pred_3 = _3874;
                        frontier_phi_82_pred_4 = _3873;
                        frontier_phi_82_pred_5 = _3872;
                    }
                    _3515 = frontier_phi_82_pred;
                    _3513 = frontier_phi_82_pred_1;
                    _3511 = frontier_phi_82_pred_2;
                    _3509 = frontier_phi_82_pred_3;
                    _3507 = frontier_phi_82_pred_4;
                    _3505 = frontier_phi_82_pred_5;
                    uint _3671 = _3670 + 1u;
                    if (_3671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3664 = _3505;
                        _3665 = _3507;
                        _3666 = _3509;
                        _3667 = _3511;
                        _3668 = _3513;
                        _3669 = _3515;
                        _3670 = _3671;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3511;
                frontier_phi_63_64_ladder_1 = _3515;
                frontier_phi_63_64_ladder_2 = _3513;
                frontier_phi_63_64_ladder_3 = _3509;
                frontier_phi_63_64_ladder_4 = _3507;
                frontier_phi_63_64_ladder_5 = _3505;
            }
            else
            {
                frontier_phi_63_64_ladder = _3389;
                frontier_phi_63_64_ladder_1 = _3393;
                frontier_phi_63_64_ladder_2 = _3391;
                frontier_phi_63_64_ladder_3 = _3387;
                frontier_phi_63_64_ladder_4 = _3385;
                frontier_phi_63_64_ladder_5 = _3383;
            }
            _3504 = frontier_phi_63_64_ladder_5;
            _3506 = frontier_phi_63_64_ladder_4;
            _3508 = frontier_phi_63_64_ladder_3;
            _3510 = frontier_phi_63_64_ladder;
            _3512 = frontier_phi_63_64_ladder_2;
            _3514 = frontier_phi_63_64_ladder_1;
        }
        float _3519 = isnan(1.0) ? _1259 : (isnan(_1259) ? 1.0 : min(_1259, 1.0));
        _3316 = (_3519 * _3510) + _2828;
        _3318 = (_3519 * _3512) + _2830;
        _3320 = (_3519 * _3514) + _2832;
        _3322 = ((_3504 * _1243) * _3519) + _3166;
        _3324 = ((_3506 * _1245) * _3519) + _3168;
        _3326 = ((_3508 * _1246) * _3519) + _3170;
    }
    else
    {
        _3316 = _2828;
        _3318 = _2830;
        _3320 = _2832;
        _3322 = _3166;
        _3324 = _3168;
        _3326 = _3170;
    }
    float _5370 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _5381 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _5392 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _3343 = ((isnan(1.0) ? _5370 : (isnan(_5370) ? 1.0 : min(_5370, 1.0))) * (_3316 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1259))) + ((_3322 + ((isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))) * _2096)) * cbPerFrame._m0[3u].x);
    float _3344 = ((isnan(1.0) ? _5381 : (isnan(_5381) ? 1.0 : min(_5381, 1.0))) * (_3318 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1259))) + ((_3324 + ((isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0))) * _2096)) * cbPerFrame._m0[3u].x);
    float _3345 = ((isnan(1.0) ? _5392 : (isnan(_5392) ? 1.0 : min(_5392, 1.0))) * (_3320 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1259))) + ((_3326 + ((isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0))) * _2096)) * cbPerFrame._m0[3u].x);
    uint _3346 = _279 + 6u;
    float _3354 = _1181 / cbSceneParam._m0[86u].x;
    float _3355 = _1182 / cbSceneParam._m0[86u].y;
    vec4 _3369 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3354, _3355, (log2((isnan(cbSceneParam._m0[77u].w) ? _1104 : (isnan(_1104) ? cbSceneParam._m0[77u].w : min(_1104, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3371 = _3369.x;
    float _3372 = _3369.y;
    float _3373 = _3369.z;
    float _3374 = _3369.w;
    float _3446;
    float _3448;
    float _3450;
    float _3452;
    if (_1104 > cbSceneParam._m0[78u].w)
    {
        float _3408 = isnan(_1104) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1104 : min(cbSceneParam._m0[80u].w, _1104));
        float _3409 = _3408 / _1104;
        float _3420 = _3409 * _1154;
        float _3421 = _1155 * _3409;
        float _3422 = (-0.0) - _3421;
        float _3424 = _3409 * _1156;
        float _3426 = (cbSceneParam._m0[77u].w * _3422) / _3408;
        float _3427 = _3426 + cbSceneParam._m0[79u].w;
        float _3428 = cbSceneParam._m0[79u].w - _3421;
        float _3434 = sqrt(((_3420 * _3420) + (_3421 * _3421)) + (_3424 * _3424));
        float _3437 = (1.0 - (cbSceneParam._m0[77u].w / _3408)) * _3434;
        float _3442 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3444 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3621;
        if (abs((_3422 - _3426) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3621 = ((((_3427 > 0.0) ? exp2(_3442 * _3427) : (2.0 - exp2(_3444 * _3427))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3437;
        }
        else
        {
            float _3565 = 1.0 / cbSceneParam._m0[80u].x;
            float _3566 = isnan(_3428) ? _3427 : (isnan(_3427) ? _3428 : max(_3427, _3428));
            float _3567 = isnan(_3428) ? _3427 : (isnan(_3427) ? _3428 : min(_3427, _3428));
            float _3576 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : min(_3566, 0.0));
            float _3577 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : min(_3567, 0.0));
            _3621 = ((abs(_3434 / _3422) * cbSceneParam._m0[80u].y) * ((((_3576 - _3577) * 2.0) - ((exp2(_3442 * (isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0)))) - exp2(_3442 * (isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))))) * _3565)) - ((exp2(_3444 * _3576) - exp2(_3444 * _3577)) * _3565))) + (_3437 * cbSceneParam._m0[80u].z);
        }
        vec4 _3623 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3354, _3355, 1.0), 0.0);
        float _3632 = exp2((_3621 * (-1.44269502162933349609375)) * (1.0 - _3623.w));
        float _3633 = log2(_3632);
        float _3649 = log2(_3374);
        _3446 = (exp2(_3649 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3633 * cbSceneParam._m0[78u].x)) * _3623.x) / cbSceneParam._m0[78u].x)) + _3371;
        _3448 = (exp2(_3649 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3633 * cbSceneParam._m0[78u].y)) * _3623.y) / cbSceneParam._m0[78u].y)) + _3372;
        _3450 = (exp2(_3649 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3633 * cbSceneParam._m0[78u].z)) * _3623.z) / cbSceneParam._m0[78u].z)) + _3373;
        _3452 = _3632 * _3374;
    }
    else
    {
        _3446 = _3371;
        _3448 = _3372;
        _3450 = _3373;
        _3452 = _3374;
    }
    bool _3659;
    vec4 _3462;
    vec4 _3484;
    float _3486;
    float _3490;
    float _3491;
    float _3492;
    float _3493;
    bool _3503;
    for (;;)
    {
        _3462 = cbMatDynParam._m0[0u];
        float _3464 = roundEven(_3462.y);
        bool _3465 = _3464 == 3.0;
        float _3466 = log2(_3452);
        float _3473 = exp2(_3466 * cbSceneParam._m0[78u].x) * _3343;
        float _3474 = exp2(_3466 * cbSceneParam._m0[78u].y) * _3344;
        float _3475 = exp2(_3466 * cbSceneParam._m0[78u].z) * _3345;
        float _3482 = _1170 + (-0.5);
        _3484 = cbMtdParam._m0[1u];
        _3486 = _3484.y * _3482;
        float _3489 = (_3464 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3490 = _3489 * (_3465 ? _3473 : (_3473 + (cbSceneParam._m0[72u].w * _3446)));
        _3491 = _3489 * (_3465 ? _3474 : (_3474 + (cbSceneParam._m0[72u].w * _3448)));
        _3492 = _3489 * (_3465 ? _3475 : (_3475 + (cbSceneParam._m0[72u].w * _3450)));
        _3493 = _3482 * 0.999000012874603271484375;
        _3503 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3503)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _3493) < 0.5)
            {
                _3659 = true;
                break;
            }
        }
        uint _3600 = _1219 + uint(_3462.w);
        if ((cbInstanceData._m0[_3600].w < 1.0) && ((cbInstanceData._m0[_3600].w + _3493) < 0.5))
        {
            _3659 = true;
            break;
        }
        if ((_3486 + 1.0) < _3484.x)
        {
            _3659 = true;
            break;
        }
        _3659 = false;
        break;
    }
    float _3863;
    if (_3659)
    {
        discard_state = true;
        _3863 = 0.0;
    }
    else
    {
        _3863 = cbInstanceData._m0[_3346].w;
    }
    SV_Target.x = _3490;
    SV_Target.y = _3491;
    SV_Target.z = _3492;
    SV_Target.w = _3863;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3346].w;
    discard_exit();
}


