#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1392;
float _4055;
float _4056;
float _4057;
float _4058;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4067 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4078 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _570 = ((_542.x - _561) * _432) + _561;
    float _571 = ((_542.y - _562) * _432) + _562;
    float _572 = ((_542.z - _563) * _432) + _563;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _597 = ((_584.z - _572) * _505) + _572;
    float _600 = ((((_584.x - _570) * _505) + _570) * 2.0) + (-1.0);
    float _602 = ((((_584.y - _571) * _505) + _571) * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _4089 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _666 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_649 - _650) * cbMtdParam._m0[24u].z) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4100 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _674 = (_667 * (cbMtdParam._m0[17u].x - _518)) + _518;
    float _675 = (_667 * (cbMtdParam._m0[17u].y - _521)) + _521;
    float _676 = (_667 * (cbMtdParam._m0[17u].z - _524)) + _524;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _704 = _702.x;
    float _721 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _704) * _432) + _704;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _721) * _505) + _721;
    float _742 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _738) * cbMtdParam._m0[19u].z) + _738;
    float _744 = _742 - (_742 * _667);
    float _748 = (cbMtdParam._m0[19u].w * (_622.z - _597)) + _597;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4111 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _778 = (_667 * (_761.z - _748)) + _748;
    float _781 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _782 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _794 = (((_768 - _781) + (cbMtdParam._m0[21u].x * _781)) * _667) + _781;
    float _795 = (((_769 - _782) + (cbMtdParam._m0[21u].x * _782)) * _667) + _782;
    float _796 = (_667 * (sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _608)) + _608;
    float _798 = cbMtdParam._m0[22u].x + _622.w;
    float _801 = fma(_796, _241 * NORMAL.x, fma(_795, _248 * TANGENT.x, (_234 * _226) * _794));
    float _804 = fma(_796, _241 * NORMAL.y, fma(_795, _248 * TANGENT.y, (_234 * _227) * _794));
    float _807 = fma(_796, _241 * NORMAL.z, fma(_795, _248 * TANGENT.z, (_234 * _228) * _794));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _4122 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _815 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4144 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4155 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4166 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4177 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _820 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _885 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _875);
    float _886 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _875);
    float _887 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _875);
    float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
    float _892 = _885 * _891;
    float _893 = _886 * _891;
    float _894 = _887 * _891;
    vec4 _899 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _901 = _899.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1073 = sqrt(((_885 * _885) + (_886 * _886)) + (_887 * _887));
        float _1079 = (cbMatDynParam._m0[5u].x * _1073) + cbMatDynParam._m0[5u].y;
        float _4188 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1084 = (cbMatDynParam._m0[5u].z * _1073) + cbMatDynParam._m0[5u].w;
        float _4199 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) - _1080)) + _1080) < ((_901 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _934 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _937 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _950 = _254 + 9u;
    uint _951 = _950 + uint(cbMatDynParam._m0[0u].w);
    float _957 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_951].x;
    float _958 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_951].y;
    float _959 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_951].z;
    float _4210 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _963 = 1.0 - _820;
    float _964 = _960 * _963;
    float _965 = _961 * _963;
    float _966 = _962 * _963;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _820;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _820;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _820;
    float _974 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    vec4 _986 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _990 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * TEXCOORD_5.w) * _986.x;
    float _991 = dot(vec3(_812, _813, _814), vec3(_892, _893, _894));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _812) - _892;
    float _999 = (_994 * _813) - _893;
    float _1000 = (_994 * _814) - _894;
    float _1004 = abs(dot(vec3(_892, _893, _894), vec3(_812, _813, _814)));
    float _4243 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_815);
    float _1019 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1025 = (1.0 - _1019) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1026 = _1019 * _1006;
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1391;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1116 = fma(_1062, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054));
        float _1120 = fma(_1062, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054));
        float _1124 = fma(_1062, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054));
        float _1149 = _1054 + _812;
        float _1150 = _1058 + _813;
        float _1151 = _1062 + _814;
        float _1161 = fma(_1151, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1149)) - _1116;
        float _1162 = fma(_1151, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1149)) - _1120;
        float _1163 = fma(_1151, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1149)) - _1124;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1116 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1120 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[34u].z) + ((((((_1124 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1219 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1185.x + (-0.5));
        float _1221 = _1219 * (_1185.y + (-0.5));
        float _1222 = _1219 * (_1185.z + (-0.5));
        float _1229 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1192.x + (-0.5));
        float _1231 = _1229 * (_1192.y + (-0.5));
        float _1232 = _1229 * (_1192.z + (-0.5));
        float _1239 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1199.x + (-0.5));
        float _1241 = _1239 * (_1199.y + (-0.5));
        float _1242 = _1239 * (_1199.z + (-0.5));
        float _1249 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1206.x + (-0.5));
        float _1251 = _1249 * (_1206.y + (-0.5));
        float _1252 = _1249 * (_1206.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1273 = (dot(vec3(_812, _813, _814), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1283 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4291 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1285 + 1.0))) + _1290) * _1253;
        float _1300 = _1221 * 0.5;
        float _1301 = _1231 * 0.5;
        float _1302 = _1241 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_812, _813, _814), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4324 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1327 + 1.0))) + _1332) * _1254;
        float _1342 = _1222 * 0.5;
        float _1343 = _1232 * 0.5;
        float _1344 = _1242 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_812, _813, _814), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4357 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1369 + 1.0))) + _1374) * _1255;
        _1391 = _1222;
        _1393 = _1221;
        _1394 = _1220;
        _1395 = _1232;
        _1396 = _1231;
        _1397 = _1230;
        _1398 = _1242;
        _1399 = _1241;
        _1400 = _1240;
        _1401 = _1255;
        _1402 = _1254;
        _1403 = _1253;
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1392;
        _1393 = _1392;
        _1394 = _1392;
        _1395 = _1392;
        _1396 = _1392;
        _1397 = _1392;
        _1398 = _1392;
        _1399 = _1392;
        _1400 = _1392;
        _1401 = _1392;
        _1402 = _1392;
        _1403 = _1392;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1433 = fma(_1062, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054));
        float _1437 = fma(_1062, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054));
        float _1441 = fma(_1062, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054));
        float _1464 = _1054 + _812;
        float _1465 = _1058 + _813;
        float _1466 = _1062 + _814;
        float _1476 = fma(_1466, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1464)) - _1433;
        float _1477 = fma(_1466, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1464)) - _1437;
        float _1478 = fma(_1466, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1464)) - _1441;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1495 = ((_1482 * _1476) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1433 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1477) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1437 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1482 * _1478) / cbModelParam._m0[35u].z) + ((((((_1441 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        float _1532 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1499.x + (-0.5));
        float _1534 = _1532 * (_1499.y + (-0.5));
        float _1535 = _1532 * (_1499.z + (-0.5));
        float _1542 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1506.x + (-0.5));
        float _1544 = _1542 * (_1506.y + (-0.5));
        float _1545 = _1542 * (_1506.z + (-0.5));
        float _1552 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1513.x + (-0.5));
        float _1554 = _1552 * (_1513.y + (-0.5));
        float _1555 = _1552 * (_1513.z + (-0.5));
        float _1562 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1520.x + (-0.5));
        float _1564 = _1562 * (_1520.y + (-0.5));
        float _1565 = _1562 * (_1520.z + (-0.5));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = _1533 * 0.5;
        float _1570 = _1543 * 0.5;
        float _1571 = _1553 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_812, _813, _814), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4420 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1596 + 1.0))) + _1601) * _1566;
        float _1611 = _1534 * 0.5;
        float _1612 = _1544 * 0.5;
        float _1613 = _1554 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_812, _813, _814), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4453 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1638 + 1.0))) + _1643) * _1567;
        float _1653 = _1535 * 0.5;
        float _1654 = _1545 * 0.5;
        float _1655 = _1555 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_812, _813, _814), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4486 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1680 + 1.0))) + _1685) * _1568;
        _1702 = _1535;
        _1703 = _1534;
        _1704 = _1533;
        _1705 = _1545;
        _1706 = _1544;
        _1707 = _1543;
        _1708 = _1555;
        _1709 = _1554;
        _1710 = _1553;
        _1711 = _1568;
        _1712 = _1567;
        _1713 = _1566;
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
    }
    else
    {
        _1702 = _1392;
        _1703 = _1392;
        _1704 = _1392;
        _1705 = _1392;
        _1706 = _1392;
        _1707 = _1392;
        _1708 = _1392;
        _1709 = _1392;
        _1710 = _1392;
        _1711 = _1392;
        _1712 = _1392;
        _1713 = _1392;
        _1714 = 0.0;
        _1715 = 0.0;
        _1716 = 0.0;
    }
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1404)) + _1404;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1405)) + _1405;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1406)) + _1406;
    float _1749 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1726));
    float _1770 = _998 * 0.5;
    float _1771 = _999 * 0.5;
    float _1772 = _1000 * 0.5;
    float _1773 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1776 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1779 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1813;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1786 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1391, _1395, _1398, _1401));
        float _1790 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1794 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1801 = dot(vec4(cbModelParam._m0[39u]), vec4(_1770, _1771, _1772, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1824;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1815 = dot(vec4(cbModelParam._m0[40u]), vec4(_1770, _1771, _1772, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1828 = (_1824 * cbModelParam._m0[1u].x) + (_1813 * (1.0 - cbModelParam._m0[1u].x));
    float _1838 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1838 : min(cbModelParam._m0[25u].z, _1838));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1062, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1062, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1062, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1901 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1904 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1932 = frontier_phi_17_15_ladder;
        }
        float _2104;
        if (_1901 > 0.0)
        {
            _2104 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2104 = frontier_phi_26_22_ladder;
        }
        float _2399;
        if (_1904 > 0.0)
        {
            _2399 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2399 = frontier_phi_38_33_ladder;
        }
        float _2401 = isnan(_2104) ? _1932 : (isnan(_1932) ? _2104 : min(_1932, _2104));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1898) + _1887;
        float _2407 = (_2402 * _1901) + _1891;
        float _2408 = (_2402 * _1904) + _1895;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2409;
        float _2413 = _2409 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 > _2413) || ((_2407 < _2411) || ((_2406 < _2411) || (_2406 > _2413))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1839);
            frontier_phi_16_38_ladder = _2553.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2553.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2553.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_16_38_ladder_2;
        _1922 = frontier_phi_16_38_ladder_1;
        _1924 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1839);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1983 = fma(_1062, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054)) + cbModelParam._m0[21u].w;
        float _1987 = fma(_1062, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054)) + cbModelParam._m0[22u].w;
        float _1991 = fma(_1062, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054)) + cbModelParam._m0[23u].w;
        float _1994 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1997 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _2000 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2109;
        if (_1994 > 0.0)
        {
            _2109 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2109 = frontier_phi_28_24_ladder;
        }
        float _2426;
        if (_1997 > 0.0)
        {
            _2426 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2426 = frontier_phi_40_35_ladder;
        }
        float _2764;
        if (_2000 > 0.0)
        {
            _2764 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2764 = frontier_phi_50_47_ladder;
        }
        float _2766 = isnan(_2426) ? _2109 : (isnan(_2109) ? _2426 : min(_2109, _2426));
        float _2767 = isnan(_2764) ? _2766 : (isnan(_2766) ? _2764 : min(_2766, _2764));
        float _2771 = (_2767 * _1994) + _1983;
        float _2772 = (_2767 * _1997) + _1987;
        float _2773 = (_2767 * _2000) + _1991;
        float _2774 = _2767 * 9.9999997473787516355514526367188e-05;
        float _2775 = (-1.0) - _2774;
        float _2777 = _2774 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2773 > _2777) || ((_2773 < _2775) || ((_2772 > _2777) || ((_2772 < _2775) || ((_2771 < _2775) || (_2771 > _2777))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2773, cbModelParam._m0[17u].z, fma(_2772, cbModelParam._m0[17u].y, _2771 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2773, cbModelParam._m0[18u].z, fma(_2772, cbModelParam._m0[18u].y, _2771 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2773, cbModelParam._m0[19u].z, fma(_2772, cbModelParam._m0[19u].y, _2771 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_25_50_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2019 = frontier_phi_25_50_ladder_2;
        _2021 = frontier_phi_25_50_ladder_1;
        _2023 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1929);
        _2019 = _2003.x * cbModelParam._m0[1u].z;
        _2021 = _2003.y * cbModelParam._m0[1u].z;
        _2023 = _2003.z * cbModelParam._m0[1u].z;
    }
    float _2036 = (((_1025 * _974) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2038 = (((_1025 * _976) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2040 = (((_1025 * _977) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2043 = fma(_2040, cbSceneParam._m0[89u].z, fma(_2038, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2046 = fma(_2040, cbSceneParam._m0[90u].z, fma(_2038, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2049 = fma(_2040, cbSceneParam._m0[91u].z, fma(_2038, cbSceneParam._m0[91u].y, _2036 * cbSceneParam._m0[91u].x));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2096 = _2083 / _2095;
    float _2097 = _2087 / _2095;
    float _2098 = _2091 / _2095;
    float _2245;
    float _2246;
    float _2247;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2125 = ((uint(_2098 > cbSceneParam._m0[59u].y) + uint(_2098 > cbSceneParam._m0[59u].x)) + uint(_2098 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2126 = _2125 + 43u;
        uint _2134 = _2125 + 44u;
        uint _2142 = _2125 + 45u;
        uint _2150 = _2125 + 46u;
        float _2161 = fma(_2095, cbSceneParam._m0[_2126].w, fma(_2091, cbSceneParam._m0[_2126].z, fma(_2087, cbSceneParam._m0[_2126].y, _2083 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2095, cbSceneParam._m0[_2134].w, fma(_2091, cbSceneParam._m0[_2134].z, fma(_2087, cbSceneParam._m0[_2134].y, _2083 * cbSceneParam._m0[_2134].x)));
        float _2173 = fma(_2095, cbSceneParam._m0[_2150].w, fma(_2091, cbSceneParam._m0[_2150].z, fma(_2087, cbSceneParam._m0[_2150].y, _2083 * cbSceneParam._m0[_2150].x)));
        float _2178 = cbSceneParam._m0[33u].z * _2173;
        float _2180 = cbSceneParam._m0[33u].w * _2173;
        float _2183 = fma(_2095, cbSceneParam._m0[_2142].w, fma(_2091, cbSceneParam._m0[_2142].z, fma(_2087, cbSceneParam._m0[_2142].y, _2083 * cbSceneParam._m0[_2142].x))) / _2173;
        float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_2097 * _2097) + (_2096 * _2096)) + (_2098 * _2098))) * cbSceneParam._m0[33u].y;
        float _4612 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2238 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 + _2161) / _2173, (_2180 + _2165) / _2173), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 + _2161) / _2173, (_2165 - _2178) / _2173), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 - _2178) / _2173, (_2165 - _2180) / _2173), _2183), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 - _2180) / _2173, (_2178 + _2165) / _2173), _2183), 0.0)).x), vec4(0.25)));
        _2245 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
        _2246 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
        _2247 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2245 = 1.0;
        _2246 = 1.0;
        _2247 = 1.0;
    }
    float _2311;
    float _2313;
    float _2315;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2299 = fma(_2095, cbSceneParam._m0[63u].w, fma(_2091, cbSceneParam._m0[63u].z, fma(_2087, cbSceneParam._m0[63u].y, _2083 * cbSceneParam._m0[63u].x)));
        float _2300 = fma(_2095, cbSceneParam._m0[60u].w, fma(_2091, cbSceneParam._m0[60u].z, fma(_2087, cbSceneParam._m0[60u].y, _2083 * cbSceneParam._m0[60u].x))) / _2299;
        float _2301 = fma(_2095, cbSceneParam._m0[61u].w, fma(_2091, cbSceneParam._m0[61u].z, fma(_2087, cbSceneParam._m0[61u].y, _2083 * cbSceneParam._m0[61u].x))) / _2299;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2300 >= cbSceneParam._m0[64u].x) && (_2301 >= cbSceneParam._m0[64u].y)) && (_2300 <= cbSceneParam._m0[64u].z)) && (_2301 <= cbSceneParam._m0[64u].w))
        {
            float _2439 = fma(_2095, cbSceneParam._m0[62u].w, fma(_2091, cbSceneParam._m0[62u].z, fma(_2087, cbSceneParam._m0[62u].y, _2083 * cbSceneParam._m0[62u].x))) / _2299;
            float _2443 = isnan(cbSceneParam._m0[41u].w) ? _2439 : (isnan(_2439) ? cbSceneParam._m0[41u].w : max(_2439, cbSceneParam._m0[41u].w));
            float _2486 = (cbSceneParam._m0[33u].x - sqrt(((_2097 * _2097) + (_2096 * _2096)) + (_2098 * _2098))) * cbSceneParam._m0[33u].y;
            float _4628 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
            float _2493 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2300, cbSceneParam._m0[33u].w + _2301), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2300, _2301 - cbSceneParam._m0[33u].z), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2300 - cbSceneParam._m0[33u].z, _2301 - cbSceneParam._m0[33u].w), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2300 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2301), _2443), 0.0)).x), vec4(0.25)));
            float _2497 = 1.0 - (_2493 * cbSceneParam._m0[34u].x);
            float _2498 = 1.0 - (_2493 * cbSceneParam._m0[34u].y);
            float _2499 = 1.0 - (_2493 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
            frontier_phi_37_36_ladder_1 = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
            frontier_phi_37_36_ladder_2 = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
        }
        else
        {
            frontier_phi_37_36_ladder = _2247;
            frontier_phi_37_36_ladder_1 = _2246;
            frontier_phi_37_36_ladder_2 = _2245;
        }
        _2311 = frontier_phi_37_36_ladder_2;
        _2313 = frontier_phi_37_36_ladder_1;
        _2315 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2311 = _2245;
        _2313 = _2246;
        _2315 = _2247;
    }
    uvec4 _2320 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2322 = _2320.x * 14u;
    uint _2323 = _2322 + 13u;
    float _2330 = _990 + (-1.0);
    float _2335 = (cbLight._m0[_2323].x * _2330) + 1.0;
    float _2336 = (cbLight._m0[_2323].y * _2330) + 1.0;
    float _2337 = (cbLight._m0[_2323].z * _2330) + 1.0;
    float _2338 = (cbLight._m0[_2323].w * _2330) + 1.0;
    uint _2339 = _2322 + 5u;
    float _2345 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2349 = _2322 + 4u;
    float _2358 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
    uint _2362 = _2322 | 1u;
    float _2373 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_812, _813, _814));
    float _2376 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_812, _813, _814));
    float _4664 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _4675 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2381 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2383 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2390 = ((cbLight._m0[_2339].x * _2345) * _2383) + (((cbLight._m0[_2349].x * _2311) * _2358) * _2381);
    float _2391 = ((_2345 * cbLight._m0[_2339].y) * _2383) + (((cbLight._m0[_2349].y * _2313) * _2358) * _2381);
    float _2392 = ((_2345 * cbLight._m0[_2339].z) * _2383) + (((cbLight._m0[_2349].z * _2315) * _2358) * _2381);
    uvec4 _2396 = floatBitsToUint(cbLight._m0[_2322 + 12u]);
    bool _2398 = _2396.x == 0u;
    float _2500;
    float _2502;
    float _2504;
    if (_2398)
    {
        _2500 = _2390;
        _2502 = _2391;
        _2504 = _2392;
    }
    else
    {
        uint _2508 = _2322 + 6u;
        float _2524 = (dot(vec3(cbLight._m0[_2322 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4686 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2527 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2500 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2390;
        _2502 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2391;
        _2504 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2392;
    }
    bool _2507 = _2396.y == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2507)
    {
        _2562 = _2500;
        _2564 = _2502;
        _2566 = _2504;
    }
    else
    {
        uint _2735 = _2322 + 7u;
        float _2751 = (dot(vec3(cbLight._m0[_2322 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2752 = _2751 * _2751;
        float _4702 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2753 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2754 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2562 = (((cbLight._m0[_2735].x * 0.3183098733425140380859375) * _2753) * _2754) + _2500;
        _2564 = (((cbLight._m0[_2735].y * 0.3183098733425140380859375) * _2753) * _2754) + _2502;
        _2566 = (((cbLight._m0[_2735].z * 0.3183098733425140380859375) * _2753) * _2754) + _2504;
    }
    uint _2569 = _2322 + 8u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _815) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2322].x + _892;
    float _2585 = cbLight._m0[_2322].y + _893;
    float _2586 = cbLight._m0[_2322].z + _894;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2322].xyz));
    float _4718 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _4729 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2598 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2599 = dot(vec3(_812, _813, _814), vec3(_2591, _2592, _2593));
    float _4740 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2603 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2591, _2592, _2593));
    float _4751 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = _2583 * _2583;
    float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
    float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
    float _2620 = 0.959999978542327880859375 - _971;
    float _2622 = 0.959999978542327880859375 - _972;
    float _2623 = 0.959999978542327880859375 - _973;
    float _2630 = 1.0 - _2583;
    float _2641 = (0.5 / (((_2598 * ((_2597 * _2630) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2630) + _2583) * _2597))) * _2597;
    float _4762 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
    uint _2657 = _2322 + 9u;
    float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _815) * 0.949999988079071044921875);
    float _2669 = _2668 * _2668;
    float _2670 = cbLight._m0[_2362].x + _892;
    float _2671 = cbLight._m0[_2362].y + _893;
    float _2672 = cbLight._m0[_2362].z + _894;
    float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
    float _2677 = _2676 * _2670;
    float _2678 = _2676 * _2671;
    float _2679 = _2676 * _2672;
    float _2680 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2362].xyz));
    float _4773 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2684 = dot(vec3(_812, _813, _814), vec3(_2677, _2678, _2679));
    float _4784 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2688 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2677, _2678, _2679));
    float _4795 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2692 = _2669 * _2669;
    float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
    float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
    float _2710 = 1.0 - _2669;
    float _2720 = (0.5 / (((_2598 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2710) + _2669) * _2683))) * _2683;
    float _4806 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2722 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
    float _2732 = (((((_2703 * _2620) + _974) * cbLight._m0[_2657].x) * _2722) * _2345) + ((((cbLight._m0[_2569].x * _2311) * ((_2619 * _2620) + _974)) * _2643) * _2358);
    float _2733 = (((((_2703 * _2622) + _976) * cbLight._m0[_2657].y) * _2722) * _2345) + ((((cbLight._m0[_2569].y * _2313) * ((_2619 * _2622) + _976)) * _2643) * _2358);
    float _2734 = (((((_2703 * _2623) + _977) * cbLight._m0[_2657].z) * _2722) * _2345) + ((((cbLight._m0[_2569].z * _2315) * ((_2619 * _2623) + _977)) * _2643) * _2358);
    float _2790;
    float _2792;
    float _2794;
    if (_2398)
    {
        _2790 = _2732;
        _2792 = _2733;
        _2794 = _2734;
    }
    else
    {
        uint _2796 = _2322 + 2u;
        uint _2800 = _2322 + 10u;
        float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2796].w)) * _815) * 0.949999988079071044921875);
        float _2815 = _2814 * _2814;
        float _2816 = cbLight._m0[_2796].x + _892;
        float _2817 = cbLight._m0[_2796].y + _893;
        float _2818 = cbLight._m0[_2796].z + _894;
        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
        float _2823 = _2822 * _2816;
        float _2824 = _2822 * _2817;
        float _2825 = _2822 * _2818;
        float _2826 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2796].xyz));
        float _4817 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2830 = dot(vec3(_812, _813, _814), vec3(_2823, _2824, _2825));
        float _4828 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2834 = dot(vec3(cbLight._m0[_2796].xyz), vec3(_2823, _2824, _2825));
        float _4839 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2838 = _2815 * _2815;
        float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
        float _2849 = exp2(log2(1.0 - (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) * 5.0);
        float _2856 = 1.0 - _2815;
        float _2866 = (0.5 / (((_2598 * ((_2829 * _2856) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2856) + _2815) * _2829))) * _2829;
        float _4850 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2868 = (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
        float _2869 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2790 = (((((_2849 * _2620) + _974) * cbLight._m0[_2800].x) * _2868) * _2869) + _2732;
        _2792 = (((((_2849 * _2622) + _976) * cbLight._m0[_2800].y) * _2868) * _2869) + _2733;
        _2794 = (((((_2849 * _2623) + _977) * cbLight._m0[_2800].z) * _2868) * _2869) + _2734;
    }
    float _2900;
    float _2902;
    float _2904;
    if (_2507)
    {
        _2900 = _2790;
        _2902 = _2792;
        _2904 = _2794;
    }
    else
    {
        uint _2911 = _2322 + 3u;
        uint _2915 = _2322 + 11u;
        float _2929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2911].w)) * _815) * 0.949999988079071044921875);
        float _2930 = _2929 * _2929;
        float _2931 = cbLight._m0[_2911].x + _892;
        float _2932 = cbLight._m0[_2911].y + _893;
        float _2933 = cbLight._m0[_2911].z + _894;
        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
        float _2938 = _2937 * _2931;
        float _2939 = _2937 * _2932;
        float _2940 = _2937 * _2933;
        float _2941 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2911].xyz));
        float _4866 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2945 = dot(vec3(_812, _813, _814), vec3(_2938, _2939, _2940));
        float _4877 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2949 = dot(vec3(cbLight._m0[_2911].xyz), vec3(_2938, _2939, _2940));
        float _4888 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2953 = _2930 * _2930;
        float _2957 = ((_2948 * _2948) * (_2953 + (-1.0))) + 1.0;
        float _2964 = exp2(log2(1.0 - (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) * 5.0);
        float _2971 = 1.0 - _2930;
        float _2981 = (0.5 / (((_2598 * ((_2944 * _2971) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2971) + _2930) * _2944))) * _2944;
        float _4899 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2983 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2953 / ((_2957 * _2957) * 3.141590118408203125));
        float _2984 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2900 = (((((_2964 * _2620) + _974) * cbLight._m0[_2915].x) * _2983) * _2984) + _2790;
        _2902 = (((((_2964 * _2622) + _976) * cbLight._m0[_2915].y) * _2983) * _2984) + _2792;
        _2904 = (((((_2964 * _2623) + _977) * cbLight._m0[_2915].z) * _2983) * _2984) + _2794;
    }
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_2320.y == 0u)
    {
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.x;
        uint _3017 = uint((float(_3005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _3006))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _3006)));
        float _3027 = (log2(_2098 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3028 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        uint _3031 = uint(isnan(14.0) ? _3028 : (isnan(_3028) ? 14.0 : min(_3028, 14.0)));
        uvec4 _3036 = texelFetch(g_lightClusterGridBuffer, int(((_3031 << 2u) + (_3017 << 6u)) >> 2u));
        uint _3037 = _3036.x;
        uint _3038 = _3005.z;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((((1u << ((_3038 >> 4u) & 15u)) + 4294967295u) & _3037) == 0u) || ((_3038 & 240u) == 0u))
        {
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
        }
        else
        {
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            uint _3276 = 0u;
            uint _3285;
            bool _3286;
            for (;;)
            {
                _3285 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3276 << 2u)) >> 2u)).x;
                _3286 = _3285 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3286)
                {
                    frontier_phi_71_pred = _3275;
                    frontier_phi_71_pred_1 = _3274;
                    frontier_phi_71_pred_2 = _3273;
                    frontier_phi_71_pred_3 = _3272;
                    frontier_phi_71_pred_4 = _3271;
                    frontier_phi_71_pred_5 = _3270;
                }
                else
                {
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    uint _3421;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3285;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    for (;;)
                    {
                        uint _3425 = uint(findLSB(_3421)) + (_3276 << 5u);
                        uint _3422 = (_3421 + 4294967295u) & _3421;
                        uint _3427 = _3425 * 48u;
                        vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 3u)).x));
                        uint _3447 = (_3425 * 48u) + 4u;
                        vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 3u)).x));
                        uint _3466 = (_3425 * 48u) + 8u;
                        vec3 _3477 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3466)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 2u)).x));
                        float _3481 = _3441.x - _2096;
                        float _3482 = _3441.y - _2097;
                        float _3483 = _3441.z - _2098;
                        float _3484 = dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483));
                        float _3487 = inversesqrt(_3484);
                        float _3488 = _3487 * _3481;
                        float _3489 = _3487 * _3482;
                        float _3490 = _3487 * _3483;
                        float _3491 = dot(vec3(_931, _934, _937), vec3(_3488, _3489, _3490));
                        float _3496 = 1.0 - (_3484 * _3441.w);
                        float _4925 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3497 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3498 = sqrt(_3484) * _3460.w;
                        float _3501 = 1.39999997615814208984375 / (_3498 + 1.39999997615814208984375);
                        float _3502 = _3501 * _3501;
                        float _3505 = ((1.0 - _3502) * _3491) + _3502;
                        float _3508 = _3498 * _3498;
                        float _3512 = ((isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0))) * _3497) / ((_3508 * 0.699999988079071044921875) + 1.0);
                        float _3516 = (-0.0) - _2096;
                        float _3517 = (-0.0) - _2097;
                        float _3518 = (-0.0) - _2098;
                        float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                        float _3523 = _3522 * _3516;
                        float _3524 = _3522 * _3517;
                        float _3525 = _3522 * _3518;
                        float _3532 = exp2(log2(1.0 / ((_3508 * 3.5) + 5.0)) * 0.25);
                        float _3533 = 1.0 - _1006;
                        float _3540 = sqrt(1.0 - ((1.0 - (_3533 * _3533)) * (1.0 - (_3532 * _3532))));
                        float _3541 = _3540 * _3540;
                        float _3542 = _3541 * _3541;
                        float _3543 = _3523 + _3488;
                        float _3544 = _3524 + _3489;
                        float _3545 = _3525 + _3490;
                        float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                        float _3553 = dot(vec3(_931, _934, _937), vec3(_3523, _3524, _3525));
                        float _4941 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3556 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3557 = dot(vec3(_931, _934, _937), vec3(_3549 * _3543, _3549 * _3544, _3549 * _3545));
                        float _4952 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3560 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3564 = ((_3560 * _3560) * (_3542 + (-1.0))) + 1.0;
                        float _3565 = _3501 * _3541;
                        float _3566 = _3565 * _3565;
                        float _3569 = ((1.0 - _3566) * _3491) + _3566;
                        float _4963 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3570 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3571 = 1.0 - _3541;
                        float _3581 = (0.5 / (((_3570 * ((_3556 * _3571) + _3541)) + 9.9999999392252902907785028219223e-09) + (((_3570 * _3571) + _3541) * _3556))) * _3570;
                        float _4974 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3592 = (((_3542 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3564 * _3564) * ((_3508 * 2.1991131305694580078125) + 3.141590118408203125))) * _3497;
                        _3345 = (_3512 * _3460.x) + _3418;
                        _3346 = (_3512 * _3460.y) + _3419;
                        _3347 = (_3512 * _3460.z) + _3420;
                        _3342 = (_3592 * _3477.x) + _3415;
                        _3343 = (_3592 * _3477.y) + _3416;
                        _3344 = (_3592 * _3477.z) + _3417;
                        if (_3422 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3422;
                        }
                    }
                    frontier_phi_71_pred = _3347;
                    frontier_phi_71_pred_1 = _3346;
                    frontier_phi_71_pred_2 = _3345;
                    frontier_phi_71_pred_3 = _3344;
                    frontier_phi_71_pred_4 = _3343;
                    frontier_phi_71_pred_5 = _3342;
                }
                _3128 = frontier_phi_71_pred;
                _3126 = frontier_phi_71_pred_1;
                _3124 = frontier_phi_71_pred_2;
                _3122 = frontier_phi_71_pred_3;
                _3120 = frontier_phi_71_pred_4;
                _3118 = frontier_phi_71_pred_5;
                uint _3277 = _3276 + 1u;
                if (_3277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3270 = _3118;
                    _3271 = _3120;
                    _3272 = _3122;
                    _3273 = _3124;
                    _3274 = _3126;
                    _3275 = _3128;
                    _3276 = _3277;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
        }
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.z;
        uint _3134 = (_3132 >> 8u) & 15u;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        float _3248;
        if (((4294967295u << _3134) & _3037) == 0u)
        {
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
            _3244 = _3123;
            _3246 = _3125;
            _3248 = _3127;
        }
        else
        {
            float _3263 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
            float _3264 = _3263 * _2096;
            float _3265 = _3263 * _2097;
            float _3266 = _3263 * _2098;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3134 < ((_3132 >> 12u) & 15u))
            {
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3247;
                float _3249;
                float _3398 = _3117;
                float _3399 = _3119;
                float _3400 = _3121;
                float _3401 = _3123;
                float _3402 = _3125;
                float _3403 = _3127;
                uint _3404 = _3134;
                uint _3413;
                bool _3414;
                for (;;)
                {
                    _3413 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3404 << 2u)) >> 2u)).x;
                    _3414 = _3413 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3414)
                    {
                        frontier_phi_82_pred = _3403;
                        frontier_phi_82_pred_1 = _3402;
                        frontier_phi_82_pred_2 = _3401;
                        frontier_phi_82_pred_3 = _3400;
                        frontier_phi_82_pred_4 = _3399;
                        frontier_phi_82_pred_5 = _3398;
                    }
                    else
                    {
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3619 = _3398;
                        float _3620 = _3399;
                        float _3621 = _3400;
                        float _3622 = _3401;
                        float _3623 = _3402;
                        float _3624 = _3403;
                        uint _3625 = _3413;
                        uint _3626;
                        vec4 _3651;
                        float _3652;
                        vec4 _3667;
                        vec3 _3679;
                        vec4 _3694;
                        vec4 _3709;
                        float _3755;
                        bool _3756;
                        for (;;)
                        {
                            uint _3636 = ((_3404 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3625));
                            _3626 = (_3625 + 4294967295u) & _3625;
                            uint _3638 = _3636 * 40u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            _3652 = _3651.w;
                            uint _3654 = (_3636 * 40u) + 4u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3636 * 40u) + 8u;
                            _3679 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x));
                            uint _3681 = (_3636 * 40u) + 16u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3636 * 40u) + 20u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3636 * 40u) + 24u;
                            vec4 _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3730 = (_3636 * 40u) + 28u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            _3755 = fma(_2098, _3743.z, fma(_2097, _3743.y, _3743.x * _2096)) + _3743.w;
                            _3756 = !((fma(_2098, _3724.z, fma(_2097, _3724.y, _3724.x * _2096)) + _3724.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3756)
                            {
                                float _3783 = _3651.x - _2096;
                                float _3784 = _3651.y - _2097;
                                float _3785 = _3651.z - _2098;
                                float _3786 = dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785));
                                float _3789 = inversesqrt(_3786);
                                float _3790 = _3789 * _3783;
                                float _3791 = _3789 * _3784;
                                float _3792 = _3789 * _3785;
                                float _3796 = 1.0 - (_3786 / (_3652 * _3652));
                                float _4985 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3801 = sqrt(_3786) * _3667.w;
                                float _3803 = 1.39999997615814208984375 / (_3801 + 1.39999997615814208984375);
                                float _3804 = _3803 * _3803;
                                float _3807 = ((1.0 - _3804) * dot(vec3(_3790, _3791, _3792), vec3(_931, _934, _937))) + _3804;
                                float _3810 = _3801 * _3801;
                                float _3814 = (fma(_2098, _3694.z, fma(_2097, _3694.y, _3694.x * _2096)) + _3694.w) / _3755;
                                float _3815 = (fma(_2098, _3709.z, fma(_2097, _3709.y, _3709.x * _2096)) + _3709.w) / _3755;
                                float _3819 = 1.0 - dot(vec2(_3814, _3815), vec2(_3814, _3815));
                                float _5001 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3821 = _3820 * (((isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0))) * _3797) / ((_3810 * 0.699999988079071044921875) + 1.0));
                                float _3833 = exp2(log2(1.0 / ((_3810 * 3.5) + 5.0)) * 0.25);
                                float _3834 = 1.0 - _1006;
                                float _3841 = sqrt(1.0 - ((1.0 - (_3834 * _3834)) * (1.0 - (_3833 * _3833))));
                                float _3842 = _3841 * _3841;
                                float _3843 = _3842 * _3842;
                                float _3844 = _3790 - _3264;
                                float _3845 = _3791 - _3265;
                                float _3846 = _3792 - _3266;
                                float _3850 = inversesqrt(dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846)));
                                float _3854 = dot(vec3(_931, _934, _937), vec3((-0.0) - _3264, (-0.0) - _3265, (-0.0) - _3266));
                                float _5012 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3858 = dot(vec3(_931, _934, _937), vec3(_3850 * _3844, _3850 * _3845, _3850 * _3846));
                                float _5023 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3865 = ((_3861 * _3861) * (_3843 + (-1.0))) + 1.0;
                                float _3866 = _3803 * _3842;
                                float _3867 = _3866 * _3866;
                                float _3873 = ((1.0 - _3867) * dot(vec3(_931, _934, _937), vec3(_3790, _3791, _3792))) + _3867;
                                float _5034 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3875 = 1.0 - _3842;
                                float _3885 = (0.5 / (((_3874 * ((_3857 * _3875) + _3842)) + 9.9999999392252902907785028219223e-09) + (((_3874 * _3875) + _3842) * _3857))) * _3874;
                                float _5045 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3895 = (_3820 * _3797) * (((_3843 * 3.1415927410125732421875) * (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)))) / ((_3865 * _3865) * ((_3810 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3821 * _3667.z;
                                frontier_phi_88_pred_1 = _3821 * _3667.y;
                                frontier_phi_88_pred_2 = _3821 * _3667.x;
                                frontier_phi_88_pred_3 = _3895 * _3679.z;
                                frontier_phi_88_pred_4 = _3895 * _3679.y;
                                frontier_phi_88_pred_5 = _3895 * _3679.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3904 = frontier_phi_88_pred;
                            _3903 = frontier_phi_88_pred_1;
                            _3902 = frontier_phi_88_pred_2;
                            _3901 = frontier_phi_88_pred_3;
                            _3900 = frontier_phi_88_pred_4;
                            _3899 = frontier_phi_88_pred_5;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            if (_3626 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3626;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3611;
                        frontier_phi_82_pred_1 = _3610;
                        frontier_phi_82_pred_2 = _3609;
                        frontier_phi_82_pred_3 = _3608;
                        frontier_phi_82_pred_4 = _3607;
                        frontier_phi_82_pred_5 = _3606;
                    }
                    _3249 = frontier_phi_82_pred;
                    _3247 = frontier_phi_82_pred_1;
                    _3245 = frontier_phi_82_pred_2;
                    _3243 = frontier_phi_82_pred_3;
                    _3241 = frontier_phi_82_pred_4;
                    _3239 = frontier_phi_82_pred_5;
                    uint _3405 = _3404 + 1u;
                    if (_3405 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3398 = _3239;
                        _3399 = _3241;
                        _3400 = _3243;
                        _3401 = _3245;
                        _3402 = _3247;
                        _3403 = _3249;
                        _3404 = _3405;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3245;
                frontier_phi_63_64_ladder_1 = _3249;
                frontier_phi_63_64_ladder_2 = _3247;
                frontier_phi_63_64_ladder_3 = _3243;
                frontier_phi_63_64_ladder_4 = _3241;
                frontier_phi_63_64_ladder_5 = _3239;
            }
            else
            {
                frontier_phi_63_64_ladder = _3123;
                frontier_phi_63_64_ladder_1 = _3127;
                frontier_phi_63_64_ladder_2 = _3125;
                frontier_phi_63_64_ladder_3 = _3121;
                frontier_phi_63_64_ladder_4 = _3119;
                frontier_phi_63_64_ladder_5 = _3117;
            }
            _3238 = frontier_phi_63_64_ladder_5;
            _3240 = frontier_phi_63_64_ladder_4;
            _3242 = frontier_phi_63_64_ladder_3;
            _3244 = frontier_phi_63_64_ladder;
            _3246 = frontier_phi_63_64_ladder_2;
            _3248 = frontier_phi_63_64_ladder_1;
        }
        float _3253 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3050 = (_3253 * _3244) + _2562;
        _3052 = (_3253 * _3246) + _2564;
        _3054 = (_3253 * _3248) + _2566;
        _3056 = ((_3238 * _974) * _3253) + _2900;
        _3058 = ((_3240 * _976) * _3253) + _2902;
        _3060 = ((_3242 * _977) * _3253) + _2904;
    }
    else
    {
        _3050 = _2562;
        _3052 = _2564;
        _3054 = _2566;
        _3056 = _2900;
        _3058 = _2902;
        _3060 = _2904;
    }
    float _5061 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _5072 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _5083 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _3077 = ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3050 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _990))) + ((_3056 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    float _3078 = ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3052 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _990))) + ((_3058 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    float _3079 = ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3054 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _990))) + ((_3060 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    uint _3080 = _254 + 6u;
    float _3088 = _912 / cbSceneParam._m0[86u].x;
    float _3089 = _913 / cbSceneParam._m0[86u].y;
    vec4 _3103 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3105 = _3103.x;
    float _3106 = _3103.y;
    float _3107 = _3103.z;
    float _3108 = _3103.w;
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _3142 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _3143 = _3142 / _834;
        float _3154 = _3143 * _885;
        float _3155 = _886 * _3143;
        float _3156 = (-0.0) - _3155;
        float _3158 = _3143 * _887;
        float _3160 = (cbSceneParam._m0[77u].w * _3156) / _3142;
        float _3161 = _3160 + cbSceneParam._m0[79u].w;
        float _3162 = cbSceneParam._m0[79u].w - _3155;
        float _3168 = sqrt(((_3154 * _3154) + (_3155 * _3155)) + (_3158 * _3158));
        float _3171 = (1.0 - (cbSceneParam._m0[77u].w / _3142)) * _3168;
        float _3176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3355;
        if (abs((_3156 - _3160) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3355 = ((((_3161 > 0.0) ? exp2(_3176 * _3161) : (2.0 - exp2(_3178 * _3161))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3171;
        }
        else
        {
            float _3299 = 1.0 / cbSceneParam._m0[80u].x;
            float _3300 = isnan(_3162) ? _3161 : (isnan(_3161) ? _3162 : max(_3161, _3162));
            float _3301 = isnan(_3162) ? _3161 : (isnan(_3161) ? _3162 : min(_3161, _3162));
            float _3310 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : min(_3300, 0.0));
            float _3311 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : min(_3301, 0.0));
            _3355 = ((abs(_3168 / _3156) * cbSceneParam._m0[80u].y) * ((((_3310 - _3311) * 2.0) - ((exp2(_3176 * (isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0)))) - exp2(_3176 * (isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))))) * _3299)) - ((exp2(_3178 * _3310) - exp2(_3178 * _3311)) * _3299))) + (_3171 * cbSceneParam._m0[80u].z);
        }
        vec4 _3357 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, 1.0), 0.0);
        float _3366 = exp2((_3355 * (-1.44269502162933349609375)) * (1.0 - _3357.w));
        float _3367 = log2(_3366);
        float _3383 = log2(_3108);
        _3180 = (exp2(_3383 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3367 * cbSceneParam._m0[78u].x)) * _3357.x) / cbSceneParam._m0[78u].x)) + _3105;
        _3182 = (exp2(_3383 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3367 * cbSceneParam._m0[78u].y)) * _3357.y) / cbSceneParam._m0[78u].y)) + _3106;
        _3184 = (exp2(_3383 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3367 * cbSceneParam._m0[78u].z)) * _3357.z) / cbSceneParam._m0[78u].z)) + _3107;
        _3186 = _3366 * _3108;
    }
    else
    {
        _3180 = _3105;
        _3182 = _3106;
        _3184 = _3107;
        _3186 = _3108;
    }
    bool _3393;
    vec4 _3196;
    vec4 _3218;
    float _3220;
    float _3224;
    float _3225;
    float _3226;
    float _3227;
    bool _3237;
    for (;;)
    {
        _3196 = cbMatDynParam._m0[0u];
        float _3198 = roundEven(_3196.y);
        bool _3199 = _3198 == 3.0;
        float _3200 = log2(_3186);
        float _3207 = exp2(_3200 * cbSceneParam._m0[78u].x) * _3077;
        float _3208 = exp2(_3200 * cbSceneParam._m0[78u].y) * _3078;
        float _3209 = exp2(_3200 * cbSceneParam._m0[78u].z) * _3079;
        float _3216 = _901 + (-0.5);
        _3218 = cbMtdParam._m0[1u];
        _3220 = _3218.y * _3216;
        float _3223 = (_3198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3224 = _3223 * (_3199 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3180)));
        _3225 = _3223 * (_3199 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3182)));
        _3226 = _3223 * (_3199 ? _3209 : (_3209 + (cbSceneParam._m0[72u].w * _3184)));
        _3227 = _3216 * 0.999000012874603271484375;
        _3237 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3237)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3227) < 0.5)
            {
                _3393 = true;
                break;
            }
        }
        uint _3334 = _950 + uint(_3196.w);
        if ((cbInstanceData._m0[_3334].w < 1.0) && ((cbInstanceData._m0[_3334].w + _3227) < 0.5))
        {
            _3393 = true;
            break;
        }
        if ((_3220 + 1.0) < _3218.x)
        {
            _3393 = true;
            break;
        }
        _3393 = false;
        break;
    }
    float _3597;
    if (_3393)
    {
        discard_state = true;
        _3597 = 0.0;
    }
    else
    {
        _3597 = cbInstanceData._m0[_3080].w;
    }
    SV_Target.x = _3224;
    SV_Target.y = _3225;
    SV_Target.z = _3226;
    SV_Target.w = _3597;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3080].w;
    discard_exit();
}


