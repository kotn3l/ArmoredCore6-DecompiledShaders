#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1575;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3899 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3910 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3921 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = _366.x * cbMtdParam._m0[11u].x;
    float _372 = _366.y * cbMtdParam._m0[11u].y;
    float _373 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _448 = _446.x;
    float _460 = dot(vec4(_448, _446.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _477 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _411.x) * 2.0) - ((((_448 - _460) * cbMtdParam._m0[23u].w) + _460) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3932 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _485 = (_478 * ((_392.x * cbMtdParam._m0[12u].x) - _371)) + _371;
    float _486 = (_478 * ((_392.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _487 = (_478 * ((_392.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _526 = _524.x;
    float _536 = dot(vec4(_526, _524.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _550 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _411.y) * 2.0) - ((((_526 - _536) * cbMtdParam._m0[23u].w) + _536) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3943 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _558 = (_551 * ((_504.x * cbMtdParam._m0[13u].x) - _485)) + _485;
    float _559 = (_551 * ((_504.y * cbMtdParam._m0[13u].y) - _486)) + _486;
    float _560 = (_551 * ((_504.z * cbMtdParam._m0[13u].z) - _487)) + _487;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _598 = _596.x;
    float _608 = dot(vec4(_598, _596.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _620 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _411.z) * 2.0) - ((((_598 - _608) * cbMtdParam._m0[23u].w) + _608) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3954 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _631 = (_340.x * cbMtdParam._m0[9u].x) * ((_621 * ((_579.x * cbMtdParam._m0[14u].x) - _558)) + _558);
    float _632 = (_340.y * cbMtdParam._m0[9u].y) * ((_621 * ((_579.y * cbMtdParam._m0[14u].y) - _559)) + _559);
    float _633 = (_340.z * cbMtdParam._m0[9u].z) * ((_621 * ((_579.z * cbMtdParam._m0[14u].z) - _560)) + _560);
    float _637 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _631;
    float _640 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _632;
    float _643 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _633;
    float _651 = (((_631 - _637) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _637) * 4.55000019073486328125;
    float _653 = (((_632 - _640) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _640) * 4.55000019073486328125;
    float _655 = (((_633 - _643) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) + _643) * 4.55000019073486328125;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    float _725 = ((_697.x - _716) * _478) + _716;
    float _726 = ((_697.y - _717) * _478) + _717;
    float _727 = ((_697.z - _718) * _478) + _718;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _750 = ((_739.x - _725) * _551) + _725;
    float _751 = ((_739.y - _726) * _551) + _726;
    float _752 = ((_739.z - _727) * _551) + _727;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _777 = ((_764.z - _752) * _621) + _752;
    float _780 = ((((_764.x - _750) * _621) + _750) * 2.0) + (-1.0);
    float _781 = ((((_764.y - _751) * _621) + _751) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3965 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _817 = (_780 + ((((_672.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_805.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _818 = (_781 + ((((_672.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_805.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _821 = fma(_787, _251, fma(_818, _258, _817 * _244));
    float _824 = fma(_787, _252, fma(_818, _259, _817 * _245));
    float _827 = fma(_787, _253, fma(_818, _260, _817 * _246));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _860 = _858.x;
    float _861 = 1.0 - _860;
    float _869 = (cbMtdParam._m0[19u].x + dot(vec4(_831 * _821, _831 * _824, _831 * _827, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_860 - _861) * cbMtdParam._m0[24u].z) + _861) * cbMtdParam._m0[21u].z);
    float _3976 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _870 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _877 = (_870 * (cbMtdParam._m0[17u].x - _651)) + _651;
    float _878 = (_870 * (cbMtdParam._m0[17u].y - _653)) + _653;
    float _879 = (_870 * (cbMtdParam._m0[17u].z - _655)) + _655;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _907 = _905.x;
    float _924 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _907) * _478) + _907;
    float _941 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _924) * _551) + _924;
    float _959 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _303) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _304) + cbTextureTilingScale._m0[10u].w)).x - _941) * _621) + _941;
    float _963 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _959) * cbMtdParam._m0[19u].z) + _959;
    float _965 = _963 - (_963 * _870);
    float _970 = (((_672.z - _777) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _777;
    float _974 = ((_805.z - _970) * cbMtdParam._m0[19u].w) + _970;
    vec4 _987 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _994 = (_987.x * 2.0) + (-1.0);
    float _995 = (_987.y * 2.0) + (-1.0);
    float _996 = dot(vec2(_994, _995), vec2(_994, _995));
    float _3987 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _1004 = ((_987.z - _974) * _870) + _974;
    float _1014 = ((sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) - _787) * _870) + _787;
    float _1017 = (((_994 - _817) * _870) + _817) + (cbMtdParam._m0[21u].x * _817);
    float _1018 = (((_995 - _818) * _870) + _818) + (cbMtdParam._m0[21u].x * _818);
    float _1022 = cbMtdParam._m0[22u].x + _805.w;
    float _1025 = fma(_1014, _251, fma(_1018, _258, _1017 * _244));
    float _1028 = fma(_1014, _252, fma(_1018, _259, _1017 * _245));
    float _1031 = fma(_1014, _253, fma(_1018, _260, _1017 * _246));
    float _1035 = inversesqrt(dot(vec3(_1025, _1028, _1031), vec3(_1025, _1028, _1031)));
    float _1036 = _1035 * _1025;
    float _1037 = _1035 * _1028;
    float _1038 = _1035 * _1031;
    float _3998 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1039 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4020 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4031 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4042 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4053 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _1044 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1058 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1108 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1098);
    float _1109 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1098);
    float _1110 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1098);
    float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
    float _1115 = _1108 * _1114;
    float _1116 = _1109 * _1114;
    float _1117 = _1110 * _1114;
    float _1123 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1124 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1142 = fma(_1038, cbSceneParam._m0[5u].z, fma(_1037, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1036));
    float _1145 = fma(_1038, cbSceneParam._m0[6u].z, fma(_1037, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1036));
    float _1148 = fma(_1038, cbSceneParam._m0[7u].z, fma(_1037, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1036));
    uint _1162 = (_284 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1168 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_1162].x;
    float _1169 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1162].y;
    float _1170 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_1162].z;
    float _4064 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1174 = 1.0 - _1044;
    float _1175 = _1171 * _1174;
    float _1176 = _1172 * _1174;
    float _1177 = _1173 * _1174;
    float _1182 = (_1171 + (-0.039999999105930328369140625)) * _1044;
    float _1183 = (_1172 + (-0.039999999105930328369140625)) * _1044;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1044;
    float _1185 = _1182 + 0.039999999105930328369140625;
    float _1187 = _1183 + 0.039999999105930328369140625;
    float _1188 = _1184 + 0.039999999105930328369140625;
    vec4 _1197 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1123, cbSceneParam._m0[86u].y * _1124));
    float _1201 = ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * TEXCOORD_5.w) * _1197.x;
    float _1202 = dot(vec3(_1036, _1037, _1038), vec3(_1115, _1116, _1117));
    float _1205 = _1202 * 2.0;
    float _1209 = (_1205 * _1036) - _1115;
    float _1210 = (_1205 * _1037) - _1116;
    float _1211 = (_1205 * _1038) - _1117;
    float _1215 = abs(dot(vec3(_1115, _1116, _1117), vec3(_1036, _1037, _1038)));
    float _4097 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1217 = sqrt(_1039);
    float _1230 = exp2((_1217 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1217 * 3.0));
    float _1236 = (1.0 - _1230) * ((_1217 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1237 = _1230 * _1217;
    float _1265 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1574;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1299 = fma(_1273, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265));
        float _1303 = fma(_1273, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265));
        float _1307 = fma(_1273, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265));
        float _1332 = _1265 + _1036;
        float _1333 = _1269 + _1037;
        float _1334 = _1273 + _1038;
        float _1344 = fma(_1334, cbModelParam._m0[26u].z, fma(_1333, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1332)) - _1299;
        float _1345 = fma(_1334, cbModelParam._m0[27u].z, fma(_1333, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1332)) - _1303;
        float _1346 = fma(_1334, cbModelParam._m0[28u].z, fma(_1333, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1332)) - _1307;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1299 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1303 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[34u].z) + ((((((_1307 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1402 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1368.x + (-0.5));
        float _1404 = _1402 * (_1368.y + (-0.5));
        float _1405 = _1402 * (_1368.z + (-0.5));
        float _1412 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1375.x + (-0.5));
        float _1414 = _1412 * (_1375.y + (-0.5));
        float _1415 = _1412 * (_1375.z + (-0.5));
        float _1422 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1382.x + (-0.5));
        float _1424 = _1422 * (_1382.y + (-0.5));
        float _1425 = _1422 * (_1382.z + (-0.5));
        float _1432 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1389.x + (-0.5));
        float _1434 = _1432 * (_1389.y + (-0.5));
        float _1435 = _1432 * (_1389.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1456 = (dot(vec3(_1036, _1037, _1038), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1466 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4145 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1468 + 1.0))) + _1473) * _1436;
        float _1483 = _1404 * 0.5;
        float _1484 = _1414 * 0.5;
        float _1485 = _1424 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_1036, _1037, _1038), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4178 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1510 + 1.0))) + _1515) * _1437;
        float _1525 = _1405 * 0.5;
        float _1526 = _1415 * 0.5;
        float _1527 = _1425 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_1036, _1037, _1038), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4211 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1552 + 1.0))) + _1557) * _1438;
        _1574 = _1405;
        _1576 = _1404;
        _1577 = _1403;
        _1578 = _1415;
        _1579 = _1414;
        _1580 = _1413;
        _1581 = _1425;
        _1582 = _1424;
        _1583 = _1423;
        _1584 = _1438;
        _1585 = _1437;
        _1586 = _1436;
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1575;
        _1576 = _1575;
        _1577 = _1575;
        _1578 = _1575;
        _1579 = _1575;
        _1580 = _1575;
        _1581 = _1575;
        _1582 = _1575;
        _1583 = _1575;
        _1584 = _1575;
        _1585 = _1575;
        _1586 = _1575;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1612 = fma(_1273, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265));
        float _1616 = fma(_1273, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265));
        float _1620 = fma(_1273, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265));
        float _1643 = _1265 + _1036;
        float _1644 = _1269 + _1037;
        float _1645 = _1273 + _1038;
        float _1655 = fma(_1645, cbModelParam._m0[30u].z, fma(_1644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1643)) - _1612;
        float _1656 = fma(_1645, cbModelParam._m0[31u].z, fma(_1644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1643)) - _1616;
        float _1657 = fma(_1645, cbModelParam._m0[32u].z, fma(_1644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1643)) - _1620;
        float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
        float _1674 = ((_1661 * _1655) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1612 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1675 = ((_1661 * _1656) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1616 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1676 = ((_1661 * _1657) / cbModelParam._m0[35u].z) + ((((((_1620 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        float _1711 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1678.x + (-0.5));
        float _1713 = _1711 * (_1678.y + (-0.5));
        float _1714 = _1711 * (_1678.z + (-0.5));
        float _1721 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1685.x + (-0.5));
        float _1723 = _1721 * (_1685.y + (-0.5));
        float _1724 = _1721 * (_1685.z + (-0.5));
        float _1731 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1692.x + (-0.5));
        float _1733 = _1731 * (_1692.y + (-0.5));
        float _1734 = _1731 * (_1692.z + (-0.5));
        float _1741 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1699.x + (-0.5));
        float _1743 = _1741 * (_1699.y + (-0.5));
        float _1744 = _1741 * (_1699.z + (-0.5));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = _1712 * 0.5;
        float _1749 = _1722 * 0.5;
        float _1750 = _1732 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_1036, _1037, _1038), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4274 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1775 + 1.0))) + _1780) * _1745;
        float _1790 = _1713 * 0.5;
        float _1791 = _1723 * 0.5;
        float _1792 = _1733 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_1036, _1037, _1038), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4307 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1817 + 1.0))) + _1822) * _1746;
        float _1832 = _1714 * 0.5;
        float _1833 = _1724 * 0.5;
        float _1834 = _1734 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_1036, _1037, _1038), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4340 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1859 + 1.0))) + _1864) * _1747;
        _1881 = _1714;
        _1882 = _1713;
        _1883 = _1712;
        _1884 = _1724;
        _1885 = _1723;
        _1886 = _1722;
        _1887 = _1734;
        _1888 = _1733;
        _1889 = _1732;
        _1890 = _1747;
        _1891 = _1746;
        _1892 = _1745;
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
    }
    else
    {
        _1881 = _1575;
        _1882 = _1575;
        _1883 = _1575;
        _1884 = _1575;
        _1885 = _1575;
        _1886 = _1575;
        _1887 = _1575;
        _1888 = _1575;
        _1889 = _1575;
        _1890 = _1575;
        _1891 = _1575;
        _1892 = _1575;
        _1893 = 0.0;
        _1894 = 0.0;
        _1895 = 0.0;
    }
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1587)) + _1587;
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1588)) + _1588;
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1589)) + _1589;
    float _1928 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1905));
    float _1949 = _1209 * 0.5;
    float _1950 = _1210 * 0.5;
    float _1951 = _1211 * 0.5;
    float _1952 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1955 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1958 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1992;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1965 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1574, _1578, _1581, _1584));
        float _1969 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1576, _1579, _1582, _1585));
        float _1973 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1577, _1580, _1583, _1586));
        float _1980 = dot(vec4(cbModelParam._m0[39u]), vec4(_1949, _1950, _1951, 1.0));
        _1992 = dot(vec3(isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1992 = 1.0;
    }
    float _2003;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1994 = dot(vec4(cbModelParam._m0[40u]), vec4(_1949, _1950, _1951, 1.0));
        _2003 = dot(vec3(isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1994) ? 0.0 : (isnan(0.0) ? _1994 : max(0.0, _1994))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2003 = 1.0;
    }
    float _2007 = (_2003 * cbModelParam._m0[1u].x) + (_1992 * (1.0 - cbModelParam._m0[1u].x));
    float _2017 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1039);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2017 : min(cbModelParam._m0[25u].z, _2017));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2065 = fma(_1273, cbModelParam._m0[13u].z, fma(_1269, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1265)) + cbModelParam._m0[13u].w;
        float _2069 = fma(_1273, cbModelParam._m0[14u].z, fma(_1269, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1265)) + cbModelParam._m0[14u].w;
        float _2073 = fma(_1273, cbModelParam._m0[15u].z, fma(_1269, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1265)) + cbModelParam._m0[15u].w;
        float _2076 = fma(_1211, cbModelParam._m0[13u].z, fma(_1210, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1209));
        float _2079 = fma(_1211, cbModelParam._m0[14u].z, fma(_1210, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1209));
        float _2082 = fma(_1211, cbModelParam._m0[15u].z, fma(_1210, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1209));
        float _2110;
        if (_2076 > 0.0)
        {
            _2110 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2110 = frontier_phi_14_12_ladder;
        }
        float _2313;
        if (_2079 > 0.0)
        {
            _2313 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2313 = frontier_phi_23_19_ladder;
        }
        float _2567;
        if (_2082 > 0.0)
        {
            _2567 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2567 = frontier_phi_35_30_ladder;
        }
        float _2569 = isnan(_2313) ? _2110 : (isnan(_2110) ? _2313 : min(_2110, _2313));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _2076) + _2065;
        float _2575 = (_2570 * _2079) + _2069;
        float _2576 = (_2570 * _2082) + _2073;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2577;
        float _2581 = _2577 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 > _2581) || ((_2575 < _2579) || ((_2574 < _2579) || (_2574 > _2581))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2576, cbModelParam._m0[9u].z, fma(_2575, cbModelParam._m0[9u].y, _2574 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2576, cbModelParam._m0[10u].z, fma(_2575, cbModelParam._m0[10u].y, _2574 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2576, cbModelParam._m0[11u].z, fma(_2575, cbModelParam._m0[11u].y, _2574 * cbModelParam._m0[11u].x))), _2018);
            frontier_phi_13_35_ladder = _2704.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2704.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2704.x * cbModelParam._m0[1u].y;
        }
        _2098 = frontier_phi_13_35_ladder_2;
        _2100 = frontier_phi_13_35_ladder_1;
        _2102 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1209, _1210, _1211), _2018);
        _2098 = _2086.x * cbModelParam._m0[1u].y;
        _2100 = _2086.y * cbModelParam._m0[1u].y;
        _2102 = _2086.z * cbModelParam._m0[1u].y;
    }
    float _2106 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1039);
    float _2107 = isnan(_2106) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2106 : min(cbModelParam._m0[25u].w, _2106));
    float _2197;
    float _2199;
    float _2201;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2161 = fma(_1273, cbModelParam._m0[21u].z, fma(_1269, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1265)) + cbModelParam._m0[21u].w;
        float _2165 = fma(_1273, cbModelParam._m0[22u].z, fma(_1269, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1265)) + cbModelParam._m0[22u].w;
        float _2169 = fma(_1273, cbModelParam._m0[23u].z, fma(_1269, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1265)) + cbModelParam._m0[23u].w;
        float _2172 = fma(_1211, cbModelParam._m0[21u].z, fma(_1210, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1209));
        float _2175 = fma(_1211, cbModelParam._m0[22u].z, fma(_1210, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1209));
        float _2178 = fma(_1211, cbModelParam._m0[23u].z, fma(_1210, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1209));
        float _2318;
        if (_2172 > 0.0)
        {
            _2318 = abs((1.0 - _2161) / _2172);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2161 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2318 = frontier_phi_25_21_ladder;
        }
        float _2594;
        if (_2175 > 0.0)
        {
            _2594 = abs((1.0 - _2165) / _2175);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2165 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2594 = frontier_phi_37_32_ladder;
        }
        float _2807;
        if (_2178 > 0.0)
        {
            _2807 = abs((1.0 - _2169) / _2178);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2169 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2807 = frontier_phi_46_43_ladder;
        }
        float _2809 = isnan(_2594) ? _2318 : (isnan(_2318) ? _2594 : min(_2318, _2594));
        float _2810 = isnan(_2807) ? _2809 : (isnan(_2809) ? _2807 : min(_2809, _2807));
        float _2814 = (_2810 * _2172) + _2161;
        float _2815 = (_2810 * _2175) + _2165;
        float _2816 = (_2810 * _2178) + _2169;
        float _2817 = _2810 * 9.9999997473787516355514526367188e-05;
        float _2818 = (-1.0) - _2817;
        float _2820 = _2817 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2816 > _2820) || ((_2816 < _2818) || ((_2815 > _2820) || ((_2815 < _2818) || ((_2814 < _2818) || (_2814 > _2820))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2816, cbModelParam._m0[17u].z, fma(_2815, cbModelParam._m0[17u].y, _2814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2816, cbModelParam._m0[18u].z, fma(_2815, cbModelParam._m0[18u].y, _2814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2816, cbModelParam._m0[19u].z, fma(_2815, cbModelParam._m0[19u].y, _2814 * cbModelParam._m0[19u].x))), _2107);
            frontier_phi_22_46_ladder = _3015.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3015.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3015.x * cbModelParam._m0[1u].z;
        }
        _2197 = frontier_phi_22_46_ladder_2;
        _2199 = frontier_phi_22_46_ladder_1;
        _2201 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1209, _1210, _1211), _2107);
        _2197 = _2181.x * cbModelParam._m0[1u].z;
        _2199 = _2181.y * cbModelParam._m0[1u].z;
        _2201 = _2181.z * cbModelParam._m0[1u].z;
    }
    float _2214 = (((_1236 * _1185) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2197 - _2098)) + _2098);
    float _2216 = (((_1236 * _1187) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2199 - _2100)) + _2100);
    float _2218 = (((_1236 * _1188) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2221 = fma(_2218, cbSceneParam._m0[89u].z, fma(_2216, cbSceneParam._m0[89u].y, _2214 * cbSceneParam._m0[89u].x));
    float _2224 = fma(_2218, cbSceneParam._m0[90u].z, fma(_2216, cbSceneParam._m0[90u].y, _2214 * cbSceneParam._m0[90u].x));
    float _2227 = fma(_2218, cbSceneParam._m0[91u].z, fma(_2216, cbSceneParam._m0[91u].y, _2214 * cbSceneParam._m0[91u].x));
    uvec4 _2237 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2239 = _2237.x * 14u;
    uint _2240 = _2239 + 13u;
    float _2247 = _1201 + (-1.0);
    float _2252 = (cbLight._m0[_2240].x * _2247) + 1.0;
    float _2253 = (cbLight._m0[_2240].y * _2247) + 1.0;
    float _2254 = (cbLight._m0[_2240].z * _2247) + 1.0;
    float _2255 = (cbLight._m0[_2240].w * _2247) + 1.0;
    uint _2256 = _2239 + 5u;
    float _2262 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
    uint _2266 = _2239 + 4u;
    float _2272 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2276 = _2239 | 1u;
    float _2287 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_1036, _1037, _1038));
    float _2290 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_1036, _1037, _1038));
    float _4476 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _4487 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2295 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2297 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2304 = ((cbLight._m0[_2256].x * _2262) * _2297) + ((cbLight._m0[_2266].x * _2272) * _2295);
    float _2305 = ((_2262 * cbLight._m0[_2256].y) * _2297) + ((_2272 * cbLight._m0[_2266].y) * _2295);
    float _2306 = ((_2262 * cbLight._m0[_2256].z) * _2297) + ((_2272 * cbLight._m0[_2266].z) * _2295);
    uvec4 _2310 = floatBitsToUint(cbLight._m0[_2239 + 12u]);
    bool _2312 = _2310.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2312)
    {
        _2323 = _2304;
        _2325 = _2305;
        _2327 = _2306;
    }
    else
    {
        uint _2331 = _2239 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2239 + 2u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4498 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2350 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2304;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2305;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2306;
    }
    bool _2330 = _2310.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2330)
    {
        _2368 = _2323;
        _2370 = _2325;
        _2372 = _2327;
    }
    else
    {
        uint _2538 = _2239 + 7u;
        float _2554 = (dot(vec3(cbLight._m0[_2239 + 3u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4514 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2557 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2368 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2323;
        _2370 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2325;
        _2372 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2327;
    }
    uint _2375 = _2239 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _1039) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2239].x + _1115;
    float _2391 = cbLight._m0[_2239].y + _1116;
    float _2392 = cbLight._m0[_2239].z + _1117;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2239].xyz));
    float _4530 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _4541 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _2404 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2405 = dot(vec3(_1036, _1037, _1038), vec3(_2397, _2398, _2399));
    float _4552 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2397, _2398, _2399));
    float _4563 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
    float _2426 = 0.959999978542327880859375 - _1182;
    float _2428 = 0.959999978542327880859375 - _1183;
    float _2429 = 0.959999978542327880859375 - _1184;
    float _2436 = 1.0 - _2389;
    float _2447 = (0.5 / (((_2404 * ((_2403 * _2436) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2436) + _2389) * _2403))) * _2403;
    float _4574 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2460 = _2239 + 9u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _1039) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2276].x + _1115;
    float _2474 = cbLight._m0[_2276].y + _1116;
    float _2475 = cbLight._m0[_2276].z + _1117;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2276].xyz));
    float _4585 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2487 = dot(vec3(_1036, _1037, _1038), vec3(_2480, _2481, _2482));
    float _4596 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2480, _2481, _2482));
    float _4607 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2472 * _2472;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
    float _2513 = 1.0 - _2472;
    float _2523 = (0.5 / (((_2404 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2513) + _2472) * _2486))) * _2486;
    float _4618 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    float _2535 = (((((_2506 * _2426) + _1185) * cbLight._m0[_2460].x) * _2525) * _2262) + (((((_2425 * _2426) + _1185) * cbLight._m0[_2375].x) * _2449) * _2272);
    float _2536 = (((((_2506 * _2428) + _1187) * cbLight._m0[_2460].y) * _2525) * _2262) + (((((_2425 * _2428) + _1187) * cbLight._m0[_2375].y) * _2449) * _2272);
    float _2537 = (((((_2506 * _2429) + _1188) * cbLight._m0[_2460].z) * _2525) * _2262) + (((((_2425 * _2429) + _1188) * cbLight._m0[_2375].z) * _2449) * _2272);
    float _2599;
    float _2601;
    float _2603;
    if (_2312)
    {
        _2599 = _2535;
        _2601 = _2536;
        _2603 = _2537;
    }
    else
    {
        uint _2605 = _2239 + 2u;
        uint _2609 = _2239 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _1039) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _1115;
        float _2626 = cbLight._m0[_2605].y + _1116;
        float _2627 = cbLight._m0[_2605].z + _1117;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2605].xyz));
        float _4629 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2639 = dot(vec3(_1036, _1037, _1038), vec3(_2632, _2633, _2634));
        float _4640 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4651 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2404 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2665) + _2624) * _2638))) * _2638;
        float _4662 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2599 = (((((_2658 * _2426) + _1185) * cbLight._m0[_2609].x) * _2677) * _2678) + _2535;
        _2601 = (((((_2658 * _2428) + _1187) * cbLight._m0[_2609].y) * _2677) * _2678) + _2536;
        _2603 = (((((_2658 * _2429) + _1188) * cbLight._m0[_2609].z) * _2677) * _2678) + _2537;
    }
    float _2713;
    float _2715;
    float _2717;
    if (_2330)
    {
        _2713 = _2599;
        _2715 = _2601;
        _2717 = _2603;
    }
    else
    {
        uint _2724 = _2239 + 3u;
        uint _2728 = _2239 + 11u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _1039) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _1115;
        float _2745 = cbLight._m0[_2724].y + _1116;
        float _2746 = cbLight._m0[_2724].z + _1117;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2724].xyz));
        float _4678 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2758 = dot(vec3(_1036, _1037, _1038), vec3(_2751, _2752, _2753));
        float _4689 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4700 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
        float _2784 = 1.0 - _2743;
        float _2794 = (0.5 / (((_2404 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2784) + _2743) * _2757))) * _2757;
        float _4711 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2713 = (((((_2777 * _2426) + _1185) * cbLight._m0[_2728].x) * _2796) * _2797) + _2599;
        _2715 = (((((_2777 * _2428) + _1187) * cbLight._m0[_2728].y) * _2796) * _2797) + _2601;
        _2717 = (((((_2777 * _2429) + _1188) * cbLight._m0[_2728].z) * _2796) * _2797) + _2603;
    }
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_2237.y == 0u)
    {
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2873 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2872;
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2872;
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2872;
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.x;
        uint _2899 = uint((float(_2887.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1124) / _2888))) + floor(float(uint(cbSceneParam._m0[85u].x * _1123) / _2888)));
        float _2909 = (log2(_2875 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2910 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        uint _2913 = uint(isnan(14.0) ? _2910 : (isnan(_2910) ? 14.0 : min(_2910, 14.0)));
        uvec4 _2918 = texelFetch(g_lightClusterGridBuffer, int(((_2913 << 2u) + (_2899 << 6u)) >> 2u));
        uint _2919 = _2918.x;
        uint _2920 = _2887.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2920 >> 4u) & 15u)) + 4294967295u) & _2919) == 0u) || ((_2920 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            uint _3171 = 0u;
            uint _3180;
            bool _3181;
            for (;;)
            {
                _3180 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                _3181 = _3180 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3181)
                {
                    frontier_phi_61_pred = _3165;
                    frontier_phi_61_pred_1 = _3170;
                    frontier_phi_61_pred_2 = _3169;
                    frontier_phi_61_pred_3 = _3168;
                    frontier_phi_61_pred_4 = _3167;
                    frontier_phi_61_pred_5 = _3166;
                }
                else
                {
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    uint _3295;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3180;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    for (;;)
                    {
                        uint _3299 = uint(findLSB(_3295)) + (_3171 << 5u);
                        uint _3296 = (_3295 + 4294967295u) & _3295;
                        uint _3301 = _3299 * 48u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 3u)).x));
                        uint _3321 = (_3299 * 48u) + 4u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3340 = (_3299 * 48u) + 8u;
                        vec3 _3351 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x));
                        float _3355 = _3315.x - _2873;
                        float _3356 = _3315.y - _2874;
                        float _3357 = _3315.z - _2875;
                        float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                        float _3361 = inversesqrt(_3358);
                        float _3362 = _3361 * _3355;
                        float _3363 = _3361 * _3356;
                        float _3364 = _3361 * _3357;
                        float _3365 = dot(vec3(_1142, _1145, _1148), vec3(_3362, _3363, _3364));
                        float _3370 = 1.0 - (_3358 * _3315.w);
                        float _4737 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3372 = sqrt(_3358) * _3334.w;
                        float _3375 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3365) + _3376;
                        float _3382 = _3372 * _3372;
                        float _3386 = ((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3371) / ((_3382 * 0.699999988079071044921875) + 1.0);
                        float _3390 = (-0.0) - _2873;
                        float _3391 = (-0.0) - _2874;
                        float _3392 = (-0.0) - _2875;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3407 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                        float _3408 = 1.0 - _1217;
                        float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                        float _3416 = _3415 * _3415;
                        float _3417 = _3416 * _3416;
                        float _3418 = _3397 + _3362;
                        float _3419 = _3398 + _3363;
                        float _3420 = _3399 + _3364;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3428 = dot(vec3(_1142, _1145, _1148), vec3(_3397, _3398, _3399));
                        float _4753 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3432 = dot(vec3(_1142, _1145, _1148), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                        float _4764 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                        float _3440 = _3375 * _3416;
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3365) + _3441;
                        float _4775 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3445 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3446 = 1.0 - _3416;
                        float _3456 = (0.5 / (((_3445 * ((_3431 * _3446) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3416) * _3431))) * _3445;
                        float _4786 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3467 = (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) / ((_3439 * _3439) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125))) * _3371;
                        _3224 = (_3386 * _3334.x) + _3292;
                        _3225 = (_3386 * _3334.y) + _3293;
                        _3226 = (_3386 * _3334.z) + _3294;
                        _3221 = (_3467 * _3351.x) + _3289;
                        _3222 = (_3467 * _3351.y) + _3290;
                        _3223 = (_3467 * _3351.z) + _3291;
                        if (_3296 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3296;
                        }
                    }
                    frontier_phi_61_pred = _3221;
                    frontier_phi_61_pred_1 = _3226;
                    frontier_phi_61_pred_2 = _3225;
                    frontier_phi_61_pred_3 = _3224;
                    frontier_phi_61_pred_4 = _3223;
                    frontier_phi_61_pred_5 = _3222;
                }
                _3021 = frontier_phi_61_pred;
                _3031 = frontier_phi_61_pred_1;
                _3029 = frontier_phi_61_pred_2;
                _3027 = frontier_phi_61_pred_3;
                _3025 = frontier_phi_61_pred_4;
                _3023 = frontier_phi_61_pred_5;
                uint _3172 = _3171 + 1u;
                if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3165 = _3021;
                    _3166 = _3023;
                    _3167 = _3025;
                    _3168 = _3027;
                    _3169 = _3029;
                    _3170 = _3031;
                    _3171 = _3172;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((4294967295u << _3037) & _2919) == 0u)
        {
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
        }
        else
        {
            float _3158 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
            float _3159 = _3158 * _2873;
            float _3160 = _3158 * _2874;
            float _3161 = _3158 * _2875;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3272 = _3020;
                float _3273 = _3022;
                float _3274 = _3024;
                float _3275 = _3026;
                float _3276 = _3028;
                float _3277 = _3030;
                uint _3278 = _3037;
                uint _3287;
                bool _3288;
                for (;;)
                {
                    _3287 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3278 << 2u)) >> 2u)).x;
                    _3288 = _3287 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3288)
                    {
                        frontier_phi_67_pred = _3275;
                        frontier_phi_67_pred_1 = _3276;
                        frontier_phi_67_pred_2 = _3277;
                        frontier_phi_67_pred_3 = _3274;
                        frontier_phi_67_pred_4 = _3273;
                        frontier_phi_67_pred_5 = _3272;
                    }
                    else
                    {
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3485 = _3272;
                        float _3486 = _3273;
                        float _3487 = _3274;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        uint _3491 = _3287;
                        uint _3492;
                        vec4 _3517;
                        float _3518;
                        vec4 _3533;
                        vec3 _3545;
                        vec4 _3560;
                        vec4 _3575;
                        float _3621;
                        bool _3622;
                        for (;;)
                        {
                            uint _3502 = ((_3278 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3491));
                            _3492 = (_3491 + 4294967295u) & _3491;
                            uint _3504 = _3502 * 40u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3518 = _3517.w;
                            uint _3520 = (_3502 * 40u) + 4u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3502 * 40u) + 8u;
                            _3545 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x));
                            uint _3547 = (_3502 * 40u) + 16u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3502 * 40u) + 20u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3502 * 40u) + 24u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3596 = (_3502 * 40u) + 28u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3621 = fma(_2875, _3609.z, fma(_2874, _3609.y, _3609.x * _2873)) + _3609.w;
                            _3622 = !((fma(_2875, _3590.z, fma(_2874, _3590.y, _3590.x * _2873)) + _3590.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3622)
                            {
                                float _3649 = _3517.x - _2873;
                                float _3650 = _3517.y - _2874;
                                float _3651 = _3517.z - _2875;
                                float _3652 = dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651));
                                float _3655 = inversesqrt(_3652);
                                float _3656 = _3655 * _3649;
                                float _3657 = _3655 * _3650;
                                float _3658 = _3655 * _3651;
                                float _3662 = 1.0 - (_3652 / (_3518 * _3518));
                                float _4797 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3667 = sqrt(_3652) * _3533.w;
                                float _3669 = 1.39999997615814208984375 / (_3667 + 1.39999997615814208984375);
                                float _3670 = _3669 * _3669;
                                float _3673 = ((1.0 - _3670) * dot(vec3(_3656, _3657, _3658), vec3(_1142, _1145, _1148))) + _3670;
                                float _3676 = _3667 * _3667;
                                float _3680 = (fma(_2875, _3560.z, fma(_2874, _3560.y, _3560.x * _2873)) + _3560.w) / _3621;
                                float _3681 = (fma(_2875, _3575.z, fma(_2874, _3575.y, _3575.x * _2873)) + _3575.w) / _3621;
                                float _3685 = 1.0 - dot(vec2(_3680, _3681), vec2(_3680, _3681));
                                float _4813 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3687 = _3686 * (((isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0))) * _3663) / ((_3676 * 0.699999988079071044921875) + 1.0));
                                float _3699 = exp2(log2(1.0 / ((_3676 * 3.5) + 5.0)) * 0.25);
                                float _3700 = 1.0 - _1217;
                                float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                                float _3708 = _3707 * _3707;
                                float _3709 = _3708 * _3708;
                                float _3710 = _3656 - _3159;
                                float _3711 = _3657 - _3160;
                                float _3712 = _3658 - _3161;
                                float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                                float _3720 = dot(vec3(_1142, _1145, _1148), vec3((-0.0) - _3159, (-0.0) - _3160, (-0.0) - _3161));
                                float _4824 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3724 = dot(vec3(_1142, _1145, _1148), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                                float _4835 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                                float _3732 = _3669 * _3708;
                                float _3733 = _3732 * _3732;
                                float _3739 = ((1.0 - _3733) * dot(vec3(_1142, _1145, _1148), vec3(_3656, _3657, _3658))) + _3733;
                                float _4846 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3741 = 1.0 - _3708;
                                float _3751 = (0.5 / (((_3740 * ((_3723 * _3741) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3740 * _3741) + _3708) * _3723))) * _3740;
                                float _4857 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3761 = (_3686 * _3663) * (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3731 * _3731) * ((_3676 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3761 * _3545.x;
                                frontier_phi_73_pred_1 = _3761 * _3545.y;
                                frontier_phi_73_pred_2 = _3687 * _3533.z;
                                frontier_phi_73_pred_3 = _3687 * _3533.y;
                                frontier_phi_73_pred_4 = _3687 * _3533.x;
                                frontier_phi_73_pred_5 = _3761 * _3545.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_73_pred;
                            _3766 = frontier_phi_73_pred_1;
                            _3770 = frontier_phi_73_pred_2;
                            _3769 = frontier_phi_73_pred_3;
                            _3768 = frontier_phi_73_pred_4;
                            _3767 = frontier_phi_73_pred_5;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            if (_3492 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3492;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3475;
                        frontier_phi_67_pred_1 = _3476;
                        frontier_phi_67_pred_2 = _3477;
                        frontier_phi_67_pred_3 = _3474;
                        frontier_phi_67_pred_4 = _3473;
                        frontier_phi_67_pred_5 = _3472;
                    }
                    _3140 = frontier_phi_67_pred;
                    _3142 = frontier_phi_67_pred_1;
                    _3144 = frontier_phi_67_pred_2;
                    _3138 = frontier_phi_67_pred_3;
                    _3136 = frontier_phi_67_pred_4;
                    _3134 = frontier_phi_67_pred_5;
                    uint _3279 = _3278 + 1u;
                    if (_3279 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3272 = _3134;
                        _3273 = _3136;
                        _3274 = _3138;
                        _3275 = _3140;
                        _3276 = _3142;
                        _3277 = _3144;
                        _3278 = _3279;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3142;
                frontier_phi_55_56_ladder_1 = _3144;
                frontier_phi_55_56_ladder_2 = _3140;
                frontier_phi_55_56_ladder_3 = _3138;
                frontier_phi_55_56_ladder_4 = _3136;
                frontier_phi_55_56_ladder_5 = _3134;
            }
            else
            {
                frontier_phi_55_56_ladder = _3028;
                frontier_phi_55_56_ladder_1 = _3030;
                frontier_phi_55_56_ladder_2 = _3026;
                frontier_phi_55_56_ladder_3 = _3024;
                frontier_phi_55_56_ladder_4 = _3022;
                frontier_phi_55_56_ladder_5 = _3020;
            }
            _3133 = frontier_phi_55_56_ladder_5;
            _3135 = frontier_phi_55_56_ladder_4;
            _3137 = frontier_phi_55_56_ladder_3;
            _3139 = frontier_phi_55_56_ladder_2;
            _3141 = frontier_phi_55_56_ladder;
            _3143 = frontier_phi_55_56_ladder_1;
        }
        float _3148 = isnan(1.0) ? _1201 : (isnan(_1201) ? 1.0 : min(_1201, 1.0));
        _2932 = (_3148 * _3139) + _2368;
        _2934 = (_3148 * _3141) + _2370;
        _2936 = (_3148 * _3143) + _2372;
        _2938 = ((_3133 * _1185) * _3148) + _2713;
        _2940 = ((_3135 * _1187) * _3148) + _2715;
        _2942 = ((_3137 * _1188) * _3148) + _2717;
    }
    else
    {
        _2932 = _2368;
        _2934 = _2370;
        _2936 = _2372;
        _2938 = _2713;
        _2940 = _2715;
        _2942 = _2717;
    }
    float _4873 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _4884 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _4895 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    uint _2962 = _284 + 6u;
    float _2970 = _1123 / cbSceneParam._m0[86u].x;
    float _2971 = _1124 / cbSceneParam._m0[86u].y;
    vec4 _2985 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, (log2((isnan(cbSceneParam._m0[77u].w) ? _1058 : (isnan(_1058) ? cbSceneParam._m0[77u].w : min(_1058, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2987 = _2985.x;
    float _2988 = _2985.y;
    float _2989 = _2985.z;
    float _2990 = _2985.w;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_1058 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_1058) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1058 : min(cbSceneParam._m0[80u].w, _1058));
        float _3046 = _3045 / _1058;
        float _3057 = _3046 * _1108;
        float _3058 = _1109 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3061 = _3046 * _1110;
        float _3063 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3064 = _3063 + cbSceneParam._m0[79u].w;
        float _3065 = cbSceneParam._m0[79u].w - _3058;
        float _3071 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3061 * _3061));
        float _3074 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3071;
        float _3079 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3081 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3234;
        if (abs((_3059 - _3063) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3234 = ((((_3064 > 0.0) ? exp2(_3079 * _3064) : (2.0 - exp2(_3081 * _3064))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3074;
        }
        else
        {
            float _3194 = 1.0 / cbSceneParam._m0[80u].x;
            float _3195 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : max(_3064, _3065));
            float _3196 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : min(_3064, _3065));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            _3234 = ((abs(_3071 / _3059) * cbSceneParam._m0[80u].y) * ((((_3205 - _3206) * 2.0) - ((exp2(_3079 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0)))) - exp2(_3079 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))))) * _3194)) - ((exp2(_3081 * _3205) - exp2(_3081 * _3206)) * _3194))) + (_3074 * cbSceneParam._m0[80u].z);
        }
        vec4 _3236 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, 1.0), 0.0);
        float _3245 = exp2((_3234 * (-1.44269502162933349609375)) * (1.0 - _3236.w));
        float _3246 = log2(_3245);
        float _3262 = log2(_2990);
        _3083 = (exp2(_3262 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].x)) * _3236.x) / cbSceneParam._m0[78u].x)) + _2987;
        _3085 = (exp2(_3262 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].y)) * _3236.y) / cbSceneParam._m0[78u].y)) + _2988;
        _3087 = (exp2(_3262 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].z)) * _3236.z) / cbSceneParam._m0[78u].z)) + _2989;
        _3089 = _3245 * _2990;
    }
    else
    {
        _3083 = _2987;
        _3085 = _2988;
        _3087 = _2989;
        _3089 = _2990;
    }
    float _3101 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3102 = _3101 == 3.0;
    float _3103 = log2(_3089);
    float _3110 = exp2(_3103 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2932 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1201))) + ((_2938 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _2007)) * cbPerFrame._m0[3u].x));
    float _3111 = exp2(_3103 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2934 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1201))) + ((_2940 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2007)) * cbPerFrame._m0[3u].x));
    float _3112 = exp2(_3103 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2936 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1201))) + ((_2942 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2007)) * cbPerFrame._m0[3u].x));
    float _3121 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3121 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3083)));
    SV_Target.y = _3121 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.z = _3121 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.w = cbInstanceData._m0[_2962].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2962].w;
}


