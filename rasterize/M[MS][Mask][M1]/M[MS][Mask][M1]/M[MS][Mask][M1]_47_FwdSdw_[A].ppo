#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1435;
float _4097;
float _4098;
float _4099;
float _4100;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[23u].w) + _416) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4109 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _447 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_434 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329);
    float _450 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_434 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330);
    float _453 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_434 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331);
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _434) + _513;
    float _525 = ((((_492.x - _511) * _434) + _511) * 2.0) + (-1.0);
    float _527 = ((((_492.y - _512) * _434) + _512) * 2.0) + (-1.0);
    float _528 = dot(vec2(_525, _527), vec2(_525, _527));
    float _4120 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _561 = (((_549.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _525;
    float _562 = (((_549.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _527;
    float _565 = fma(_533, _249, fma(_562, _256, _561 * _242));
    float _568 = fma(_533, _250, fma(_562, _257, _561 * _243));
    float _571 = fma(_533, _251, fma(_562, _258, _561 * _244));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _604 = _602.x;
    float _605 = 1.0 - _604;
    float _614 = (cbMtdParam._m0[19u].x + dot(vec4(_575 * _565, _575 * _568, _575 * _571, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_604 - _605) * cbMtdParam._m0[24u].z) + _605) * cbMtdParam._m0[21u].z);
    float _4131 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _617 = (-0.0) - cbMtdParam._m0[24u].x;
    float _619 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _619 : (isnan(_619) ? 1.0 : min(_619, 1.0));
    float _627 = _615 - ((_615 * TEXCOORD_8.x) * _620);
    float _628 = _615 - ((_615 * TEXCOORD_8.y) * _620);
    float _629 = _615 - ((_615 * TEXCOORD_8.z) * _620);
    float _636 = (_627 * ((_472.x * cbMtdParam._m0[18u].x) - _447)) + _447;
    float _637 = (_628 * ((_472.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _638 = (_629 * ((_472.z * cbMtdParam._m0[18u].z) - _453)) + _453;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _652 = _650.x;
    float _653 = 1.0 - _652;
    float _679 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_652 - _653) * cbMtdParam._m0[24u].w) + _653) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4152 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _688 = ((((cbMtdParam._m0[10u].x - _636) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _680) + _636;
    float _689 = ((((cbMtdParam._m0[10u].y - _637) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _680) + _637;
    float _690 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _638)) * _680) + _638;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _718 = _716.x;
    float _735 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _718) * _434) + _718;
    float _739 = ((_702.x - _735) * cbMtdParam._m0[19u].z) + _735;
    float _741 = _739 - (_739 * _627);
    float _743 = _741 - (_741 * _680);
    float _747 = (cbMtdParam._m0[19u].w * (_549.z - _522)) + _522;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4163 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _778 = ((_761.z - _747) * _627) + _747;
    float _781 = ((cbMtdParam._m0[23u].x - _778) * _680) + _778;
    vec4 _800 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _806 = (_800.x * 2.0) + (-1.0);
    float _807 = (_800.y * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4174 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _823 = ((sqrt(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) - _533) * _629) + _533;
    float _826 = (((_768 - _561) * _627) + _561) + (cbMtdParam._m0[21u].x * _561);
    float _827 = (((_769 - _562) * _628) + _562) + (cbMtdParam._m0[21u].x * _562);
    float _838 = (((_806 - _826) + (_826 * cbMtdParam._m0[22u].z)) * _680) + _826;
    float _839 = (((_807 - _827) + (_827 * cbMtdParam._m0[22u].z)) * _680) + _827;
    float _840 = (_680 * (sqrt(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) - _823)) + _823;
    float _842 = cbMtdParam._m0[22u].x + _549.w;
    float _845 = fma(_840, _249, fma(_839, _256, _838 * _242));
    float _848 = fma(_840, _250, fma(_839, _257, _838 * _243));
    float _851 = fma(_840, _251, fma(_839, _258, _838 * _244));
    float _855 = inversesqrt(dot(vec3(_845, _848, _851), vec3(_845, _848, _851)));
    float _856 = _855 * _845;
    float _857 = _855 * _848;
    float _858 = _855 * _851;
    float _4185 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _859 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4207 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4218 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4229 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4240 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _864 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _878 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _928 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _918);
    float _929 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _918);
    float _930 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _918);
    float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
    float _935 = _928 * _934;
    float _936 = _929 * _934;
    float _937 = _930 * _934;
    vec4 _942 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _944 = _942.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1116 = sqrt(((_928 * _928) + (_929 * _929)) + (_930 * _930));
        float _1122 = (cbMatDynParam._m0[5u].x * _1116) + cbMatDynParam._m0[5u].y;
        float _4251 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1127 = (cbMatDynParam._m0[5u].z * _1116) + cbMatDynParam._m0[5u].w;
        float _4262 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) - _1123)) + _1123) < ((_944 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_858, cbSceneParam._m0[5u].z, fma(_857, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _856));
    float _977 = fma(_858, cbSceneParam._m0[6u].z, fma(_857, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _856));
    float _980 = fma(_858, cbSceneParam._m0[7u].z, fma(_857, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _856));
    uint _993 = _261 + 9u;
    uint _994 = _993 + uint(cbMatDynParam._m0[0u].w);
    float _1000 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * cbInstanceData._m0[_994].x;
    float _1001 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * cbInstanceData._m0[_994].y;
    float _1002 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * cbInstanceData._m0[_994].z;
    float _4273 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _4284 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _1006 = 1.0 - _864;
    float _1007 = _1003 * _1006;
    float _1008 = _1004 * _1006;
    float _1009 = _1005 * _1006;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _864;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _864;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _864;
    float _1017 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    vec4 _1029 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1033 = ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * TEXCOORD_5.w) * _1029.x;
    float _1034 = dot(vec3(_856, _857, _858), vec3(_935, _936, _937));
    float _1037 = _1034 * 2.0;
    float _1041 = (_1037 * _856) - _935;
    float _1042 = (_1037 * _857) - _936;
    float _1043 = (_1037 * _858) - _937;
    float _1047 = abs(dot(vec3(_935, _936, _937), vec3(_856, _857, _858)));
    float _4306 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1049 = sqrt(_859);
    float _1062 = exp2((_1049 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1049 * 3.0));
    float _1068 = (1.0 - _1062) * ((_1049 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1069 = _1062 * _1049;
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1434;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1159 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1163 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1167 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1192 = _1097 + _856;
        float _1193 = _1101 + _857;
        float _1194 = _1105 + _858;
        float _1204 = fma(_1194, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192)) - _1159;
        float _1205 = fma(_1194, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192)) - _1163;
        float _1206 = fma(_1194, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192)) - _1167;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1159 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1163 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[34u].z) + ((((((_1167 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1262 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1228.x + (-0.5));
        float _1264 = _1262 * (_1228.y + (-0.5));
        float _1265 = _1262 * (_1228.z + (-0.5));
        float _1272 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1235.x + (-0.5));
        float _1274 = _1272 * (_1235.y + (-0.5));
        float _1275 = _1272 * (_1235.z + (-0.5));
        float _1282 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1242.x + (-0.5));
        float _1284 = _1282 * (_1242.y + (-0.5));
        float _1285 = _1282 * (_1242.z + (-0.5));
        float _1292 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1249.x + (-0.5));
        float _1294 = _1292 * (_1249.y + (-0.5));
        float _1295 = _1292 * (_1249.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1316 = (dot(vec3(_856, _857, _858), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1326 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4354 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1328 + 1.0))) + _1333) * _1296;
        float _1343 = _1264 * 0.5;
        float _1344 = _1274 * 0.5;
        float _1345 = _1284 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_856, _857, _858), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4387 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1370 + 1.0))) + _1375) * _1297;
        float _1385 = _1265 * 0.5;
        float _1386 = _1275 * 0.5;
        float _1387 = _1285 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_856, _857, _858), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4420 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1412 + 1.0))) + _1417) * _1298;
        _1434 = _1265;
        _1436 = _1264;
        _1437 = _1263;
        _1438 = _1275;
        _1439 = _1274;
        _1440 = _1273;
        _1441 = _1285;
        _1442 = _1284;
        _1443 = _1283;
        _1444 = _1298;
        _1445 = _1297;
        _1446 = _1296;
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1435;
        _1436 = _1435;
        _1437 = _1435;
        _1438 = _1435;
        _1439 = _1435;
        _1440 = _1435;
        _1441 = _1435;
        _1442 = _1435;
        _1443 = _1435;
        _1444 = _1435;
        _1445 = _1435;
        _1446 = _1435;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1477 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1481 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1485 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1508 = _1097 + _856;
        float _1509 = _1101 + _857;
        float _1510 = _1105 + _858;
        float _1520 = fma(_1510, cbModelParam._m0[30u].z, fma(_1509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1508)) - _1477;
        float _1521 = fma(_1510, cbModelParam._m0[31u].z, fma(_1509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1508)) - _1481;
        float _1522 = fma(_1510, cbModelParam._m0[32u].z, fma(_1509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1508)) - _1485;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1539 = ((_1526 * _1520) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1477 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1526 * _1521) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1481 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1526 * _1522) / cbModelParam._m0[35u].z) + ((((((_1485 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        float _1576 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1543.x + (-0.5));
        float _1578 = _1576 * (_1543.y + (-0.5));
        float _1579 = _1576 * (_1543.z + (-0.5));
        float _1586 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1550.x + (-0.5));
        float _1588 = _1586 * (_1550.y + (-0.5));
        float _1589 = _1586 * (_1550.z + (-0.5));
        float _1596 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1557.x + (-0.5));
        float _1598 = _1596 * (_1557.y + (-0.5));
        float _1599 = _1596 * (_1557.z + (-0.5));
        float _1606 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1564.x + (-0.5));
        float _1608 = _1606 * (_1564.y + (-0.5));
        float _1609 = _1606 * (_1564.z + (-0.5));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = _1577 * 0.5;
        float _1614 = _1587 * 0.5;
        float _1615 = _1597 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_856, _857, _858), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4483 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1640 + 1.0))) + _1645) * _1610;
        float _1655 = _1578 * 0.5;
        float _1656 = _1588 * 0.5;
        float _1657 = _1598 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_856, _857, _858), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4516 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1682 + 1.0))) + _1687) * _1611;
        float _1697 = _1579 * 0.5;
        float _1698 = _1589 * 0.5;
        float _1699 = _1599 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_856, _857, _858), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4549 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1724 + 1.0))) + _1729) * _1612;
        _1746 = _1579;
        _1747 = _1578;
        _1748 = _1577;
        _1749 = _1589;
        _1750 = _1588;
        _1751 = _1587;
        _1752 = _1599;
        _1753 = _1598;
        _1754 = _1597;
        _1755 = _1612;
        _1756 = _1611;
        _1757 = _1610;
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
    }
    else
    {
        _1746 = _1435;
        _1747 = _1435;
        _1748 = _1435;
        _1749 = _1435;
        _1750 = _1435;
        _1751 = _1435;
        _1752 = _1435;
        _1753 = _1435;
        _1754 = _1435;
        _1755 = _1435;
        _1756 = _1435;
        _1757 = _1435;
        _1758 = 0.0;
        _1759 = 0.0;
        _1760 = 0.0;
    }
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1447)) + _1447;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1448)) + _1448;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1449)) + _1449;
    float _1793 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1770));
    float _1814 = _1041 * 0.5;
    float _1815 = _1042 * 0.5;
    float _1816 = _1043 * 0.5;
    float _1817 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1820 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1823 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1857;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1830 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1434, _1438, _1441, _1444));
        float _1834 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1838 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1845 = dot(vec4(cbModelParam._m0[39u]), vec4(_1814, _1815, _1816, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1868;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1859 = dot(vec4(cbModelParam._m0[40u]), vec4(_1814, _1815, _1816, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1872 = (_1868 * cbModelParam._m0[1u].x) + (_1857 * (1.0 - cbModelParam._m0[1u].x));
    float _1882 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _859);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1882 : min(cbModelParam._m0[25u].z, _1882));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1930 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1934 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1938 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1941 = fma(_1043, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041));
        float _1944 = fma(_1043, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041));
        float _1947 = fma(_1043, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041));
        float _1975;
        if (_1941 > 0.0)
        {
            _1975 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1975 = frontier_phi_17_15_ladder;
        }
        float _2146;
        if (_1944 > 0.0)
        {
            _2146 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2146 = frontier_phi_26_22_ladder;
        }
        float _2441;
        if (_1947 > 0.0)
        {
            _2441 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2441 = frontier_phi_38_33_ladder;
        }
        float _2443 = isnan(_2146) ? _1975 : (isnan(_1975) ? _2146 : min(_1975, _2146));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1941) + _1930;
        float _2449 = (_2444 * _1944) + _1934;
        float _2450 = (_2444 * _1947) + _1938;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1883);
            frontier_phi_16_38_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _1963 = frontier_phi_16_38_ladder_2;
        _1965 = frontier_phi_16_38_ladder_1;
        _1967 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1041, _1042, _1043), _1883);
        _1963 = _1951.x * cbModelParam._m0[1u].y;
        _1965 = _1951.y * cbModelParam._m0[1u].y;
        _1967 = _1951.z * cbModelParam._m0[1u].y;
    }
    float _1971 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _859);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1971 : min(cbModelParam._m0[25u].w, _1971));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2025 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _2029 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2033 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2036 = fma(_1043, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041));
        float _2039 = fma(_1043, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041));
        float _2042 = fma(_1043, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041));
        float _2151;
        if (_2036 > 0.0)
        {
            _2151 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2151 = frontier_phi_28_24_ladder;
        }
        float _2468;
        if (_2039 > 0.0)
        {
            _2468 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2468 = frontier_phi_40_35_ladder;
        }
        float _2806;
        if (_2042 > 0.0)
        {
            _2806 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2806 = frontier_phi_50_47_ladder;
        }
        float _2808 = isnan(_2468) ? _2151 : (isnan(_2151) ? _2468 : min(_2151, _2468));
        float _2809 = isnan(_2806) ? _2808 : (isnan(_2808) ? _2806 : min(_2808, _2806));
        float _2813 = (_2809 * _2036) + _2025;
        float _2814 = (_2809 * _2039) + _2029;
        float _2815 = (_2809 * _2042) + _2033;
        float _2816 = _2809 * 9.9999997473787516355514526367188e-05;
        float _2817 = (-1.0) - _2816;
        float _2819 = _2816 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2815 > _2819) || ((_2815 < _2817) || ((_2814 > _2819) || ((_2814 < _2817) || ((_2813 < _2817) || (_2813 > _2819))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2815, cbModelParam._m0[17u].z, fma(_2814, cbModelParam._m0[17u].y, _2813 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2815, cbModelParam._m0[18u].z, fma(_2814, cbModelParam._m0[18u].y, _2813 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2815, cbModelParam._m0[19u].z, fma(_2814, cbModelParam._m0[19u].y, _2813 * cbModelParam._m0[19u].x))), _1972);
            frontier_phi_25_50_ladder = _2937.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2937.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2937.x * cbModelParam._m0[1u].z;
        }
        _2061 = frontier_phi_25_50_ladder_2;
        _2063 = frontier_phi_25_50_ladder_1;
        _2065 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1041, _1042, _1043), _1972);
        _2061 = _2045.x * cbModelParam._m0[1u].z;
        _2063 = _2045.y * cbModelParam._m0[1u].z;
        _2065 = _2045.z * cbModelParam._m0[1u].z;
    }
    float _2078 = (((_1068 * _1017) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2061 - _1963)) + _1963);
    float _2080 = (((_1068 * _1019) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2063 - _1965)) + _1965);
    float _2082 = (((_1068 * _1020) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2085 = fma(_2082, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2078 * cbSceneParam._m0[89u].x));
    float _2088 = fma(_2082, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2078 * cbSceneParam._m0[90u].x));
    float _2091 = fma(_2082, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, _2078 * cbSceneParam._m0[91u].x));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2137 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2138 = _2125 / _2137;
    float _2139 = _2129 / _2137;
    float _2140 = _2133 / _2137;
    float _2287;
    float _2288;
    float _2289;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2167 = ((uint(_2140 > cbSceneParam._m0[59u].y) + uint(_2140 > cbSceneParam._m0[59u].x)) + uint(_2140 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2168 = _2167 + 43u;
        uint _2176 = _2167 + 44u;
        uint _2184 = _2167 + 45u;
        uint _2192 = _2167 + 46u;
        float _2203 = fma(_2137, cbSceneParam._m0[_2168].w, fma(_2133, cbSceneParam._m0[_2168].z, fma(_2129, cbSceneParam._m0[_2168].y, _2125 * cbSceneParam._m0[_2168].x)));
        float _2207 = fma(_2137, cbSceneParam._m0[_2176].w, fma(_2133, cbSceneParam._m0[_2176].z, fma(_2129, cbSceneParam._m0[_2176].y, _2125 * cbSceneParam._m0[_2176].x)));
        float _2215 = fma(_2137, cbSceneParam._m0[_2192].w, fma(_2133, cbSceneParam._m0[_2192].z, fma(_2129, cbSceneParam._m0[_2192].y, _2125 * cbSceneParam._m0[_2192].x)));
        float _2220 = cbSceneParam._m0[33u].z * _2215;
        float _2222 = cbSceneParam._m0[33u].w * _2215;
        float _2225 = fma(_2137, cbSceneParam._m0[_2184].w, fma(_2133, cbSceneParam._m0[_2184].z, fma(_2129, cbSceneParam._m0[_2184].y, _2125 * cbSceneParam._m0[_2184].x))) / _2215;
        float _2273 = (cbSceneParam._m0[33u].x - sqrt(((_2139 * _2139) + (_2138 * _2138)) + (_2140 * _2140))) * cbSceneParam._m0[33u].y;
        float _4675 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2280 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 + _2203) / _2215, (_2222 + _2207) / _2215), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 + _2203) / _2215, (_2207 - _2220) / _2215), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 - _2220) / _2215, (_2207 - _2222) / _2215), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 - _2222) / _2215, (_2220 + _2207) / _2215), _2225), 0.0)).x), vec4(0.25)));
        _2287 = 1.0 - (_2280 * cbSceneParam._m0[34u].x);
        _2288 = 1.0 - (_2280 * cbSceneParam._m0[34u].y);
        _2289 = 1.0 - (_2280 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2287 = 1.0;
        _2288 = 1.0;
        _2289 = 1.0;
    }
    float _2353;
    float _2355;
    float _2357;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2341 = fma(_2137, cbSceneParam._m0[63u].w, fma(_2133, cbSceneParam._m0[63u].z, fma(_2129, cbSceneParam._m0[63u].y, _2125 * cbSceneParam._m0[63u].x)));
        float _2342 = fma(_2137, cbSceneParam._m0[60u].w, fma(_2133, cbSceneParam._m0[60u].z, fma(_2129, cbSceneParam._m0[60u].y, _2125 * cbSceneParam._m0[60u].x))) / _2341;
        float _2343 = fma(_2137, cbSceneParam._m0[61u].w, fma(_2133, cbSceneParam._m0[61u].z, fma(_2129, cbSceneParam._m0[61u].y, _2125 * cbSceneParam._m0[61u].x))) / _2341;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2342 >= cbSceneParam._m0[64u].x) && (_2343 >= cbSceneParam._m0[64u].y)) && (_2342 <= cbSceneParam._m0[64u].z)) && (_2343 <= cbSceneParam._m0[64u].w))
        {
            float _2481 = fma(_2137, cbSceneParam._m0[62u].w, fma(_2133, cbSceneParam._m0[62u].z, fma(_2129, cbSceneParam._m0[62u].y, _2125 * cbSceneParam._m0[62u].x))) / _2341;
            float _2485 = isnan(cbSceneParam._m0[41u].w) ? _2481 : (isnan(_2481) ? cbSceneParam._m0[41u].w : max(_2481, cbSceneParam._m0[41u].w));
            float _2528 = (cbSceneParam._m0[33u].x - sqrt(((_2139 * _2139) + (_2138 * _2138)) + (_2140 * _2140))) * cbSceneParam._m0[33u].y;
            float _4691 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
            float _2535 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2342, cbSceneParam._m0[33u].w + _2343), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2342, _2343 - cbSceneParam._m0[33u].z), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2342 - cbSceneParam._m0[33u].z, _2343 - cbSceneParam._m0[33u].w), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2342 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2343), _2485), 0.0)).x), vec4(0.25)));
            float _2539 = 1.0 - (_2535 * cbSceneParam._m0[34u].x);
            float _2540 = 1.0 - (_2535 * cbSceneParam._m0[34u].y);
            float _2541 = 1.0 - (_2535 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2541) ? _2289 : (isnan(_2289) ? _2541 : min(_2289, _2541));
            frontier_phi_37_36_ladder_1 = isnan(_2540) ? _2288 : (isnan(_2288) ? _2540 : min(_2288, _2540));
            frontier_phi_37_36_ladder_2 = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
        }
        else
        {
            frontier_phi_37_36_ladder = _2289;
            frontier_phi_37_36_ladder_1 = _2288;
            frontier_phi_37_36_ladder_2 = _2287;
        }
        _2353 = frontier_phi_37_36_ladder_2;
        _2355 = frontier_phi_37_36_ladder_1;
        _2357 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2353 = _2287;
        _2355 = _2288;
        _2357 = _2289;
    }
    uvec4 _2362 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2364 = _2362.x * 14u;
    uint _2365 = _2364 + 13u;
    float _2372 = _1033 + (-1.0);
    float _2377 = (cbLight._m0[_2365].x * _2372) + 1.0;
    float _2378 = (cbLight._m0[_2365].y * _2372) + 1.0;
    float _2379 = (cbLight._m0[_2365].z * _2372) + 1.0;
    float _2380 = (cbLight._m0[_2365].w * _2372) + 1.0;
    uint _2381 = _2364 + 5u;
    float _2387 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    uint _2391 = _2364 + 4u;
    float _2400 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
    uint _2404 = _2364 | 1u;
    float _2415 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_856, _857, _858));
    float _2418 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_856, _857, _858));
    float _4727 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _4738 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2423 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * 0.3183098733425140380859375;
    float _2425 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * 0.3183098733425140380859375;
    float _2432 = ((cbLight._m0[_2381].x * _2387) * _2425) + (((cbLight._m0[_2391].x * _2353) * _2400) * _2423);
    float _2433 = ((_2387 * cbLight._m0[_2381].y) * _2425) + (((cbLight._m0[_2391].y * _2355) * _2400) * _2423);
    float _2434 = ((_2387 * cbLight._m0[_2381].z) * _2425) + (((cbLight._m0[_2391].z * _2357) * _2400) * _2423);
    uvec4 _2438 = floatBitsToUint(cbLight._m0[_2364 + 12u]);
    bool _2440 = _2438.x == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2440)
    {
        _2542 = _2432;
        _2544 = _2433;
        _2546 = _2434;
    }
    else
    {
        uint _2550 = _2364 + 6u;
        float _2566 = (dot(vec3(cbLight._m0[_2364 + 2u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2567 = _2566 * _2566;
        float _4749 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2568 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2569 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
        _2542 = (((cbLight._m0[_2550].x * 0.3183098733425140380859375) * _2568) * _2569) + _2432;
        _2544 = (((cbLight._m0[_2550].y * 0.3183098733425140380859375) * _2568) * _2569) + _2433;
        _2546 = (((cbLight._m0[_2550].z * 0.3183098733425140380859375) * _2568) * _2569) + _2434;
    }
    bool _2549 = _2438.y == 0u;
    float _2604;
    float _2606;
    float _2608;
    if (_2549)
    {
        _2604 = _2542;
        _2606 = _2544;
        _2608 = _2546;
    }
    else
    {
        uint _2777 = _2364 + 7u;
        float _2793 = (dot(vec3(cbLight._m0[_2364 + 3u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2794 = _2793 * _2793;
        float _4765 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2795 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2796 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2604 = (((cbLight._m0[_2777].x * 0.3183098733425140380859375) * _2795) * _2796) + _2542;
        _2606 = (((cbLight._m0[_2777].y * 0.3183098733425140380859375) * _2795) * _2796) + _2544;
        _2608 = (((cbLight._m0[_2777].z * 0.3183098733425140380859375) * _2795) * _2796) + _2546;
    }
    uint _2611 = _2364 + 8u;
    float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _859) * 0.949999988079071044921875);
    float _2625 = _2624 * _2624;
    float _2626 = cbLight._m0[_2364].x + _935;
    float _2627 = cbLight._m0[_2364].y + _936;
    float _2628 = cbLight._m0[_2364].z + _937;
    float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
    float _2633 = _2632 * _2626;
    float _2634 = _2632 * _2627;
    float _2635 = _2632 * _2628;
    float _2636 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2364].xyz));
    float _4781 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _4792 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _2640 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2641 = dot(vec3(_856, _857, _858), vec3(_2633, _2634, _2635));
    float _4803 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _2645 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2633, _2634, _2635));
    float _4814 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2649 = _2625 * _2625;
    float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
    float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
    float _2662 = 0.959999978542327880859375 - _1014;
    float _2664 = 0.959999978542327880859375 - _1015;
    float _2665 = 0.959999978542327880859375 - _1016;
    float _2672 = 1.0 - _2625;
    float _2683 = (0.5 / (((_2640 * ((_2639 * _2672) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2672) + _2625) * _2639))) * _2639;
    float _4825 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2685 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
    uint _2699 = _2364 + 9u;
    float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _859) * 0.949999988079071044921875);
    float _2711 = _2710 * _2710;
    float _2712 = cbLight._m0[_2404].x + _935;
    float _2713 = cbLight._m0[_2404].y + _936;
    float _2714 = cbLight._m0[_2404].z + _937;
    float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
    float _2719 = _2718 * _2712;
    float _2720 = _2718 * _2713;
    float _2721 = _2718 * _2714;
    float _2722 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2404].xyz));
    float _4836 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2726 = dot(vec3(_856, _857, _858), vec3(_2719, _2720, _2721));
    float _4847 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2729 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2730 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2719, _2720, _2721));
    float _4858 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2734 = _2711 * _2711;
    float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
    float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
    float _2752 = 1.0 - _2711;
    float _2762 = (0.5 / (((_2640 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2752) + _2711) * _2725))) * _2725;
    float _4869 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2764 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
    float _2774 = (((((_2745 * _2662) + _1017) * cbLight._m0[_2699].x) * _2764) * _2387) + ((((cbLight._m0[_2611].x * _2353) * ((_2661 * _2662) + _1017)) * _2685) * _2400);
    float _2775 = (((((_2745 * _2664) + _1019) * cbLight._m0[_2699].y) * _2764) * _2387) + ((((cbLight._m0[_2611].y * _2355) * ((_2661 * _2664) + _1019)) * _2685) * _2400);
    float _2776 = (((((_2745 * _2665) + _1020) * cbLight._m0[_2699].z) * _2764) * _2387) + ((((cbLight._m0[_2611].z * _2357) * ((_2661 * _2665) + _1020)) * _2685) * _2400);
    float _2832;
    float _2834;
    float _2836;
    if (_2440)
    {
        _2832 = _2774;
        _2834 = _2775;
        _2836 = _2776;
    }
    else
    {
        uint _2838 = _2364 + 2u;
        uint _2842 = _2364 + 10u;
        float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2838].w)) * _859) * 0.949999988079071044921875);
        float _2857 = _2856 * _2856;
        float _2858 = cbLight._m0[_2838].x + _935;
        float _2859 = cbLight._m0[_2838].y + _936;
        float _2860 = cbLight._m0[_2838].z + _937;
        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
        float _2865 = _2864 * _2858;
        float _2866 = _2864 * _2859;
        float _2867 = _2864 * _2860;
        float _2868 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2838].xyz));
        float _4880 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2872 = dot(vec3(_856, _857, _858), vec3(_2865, _2866, _2867));
        float _4891 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
        float _2876 = dot(vec3(cbLight._m0[_2838].xyz), vec3(_2865, _2866, _2867));
        float _4902 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2880 = _2857 * _2857;
        float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
        float _2891 = exp2(log2(1.0 - (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) * 5.0);
        float _2898 = 1.0 - _2857;
        float _2908 = (0.5 / (((_2640 * ((_2871 * _2898) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2898) + _2857) * _2871))) * _2871;
        float _4913 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2910 = (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
        float _2911 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
        _2832 = (((((_2891 * _2662) + _1017) * cbLight._m0[_2842].x) * _2910) * _2911) + _2774;
        _2834 = (((((_2891 * _2664) + _1019) * cbLight._m0[_2842].y) * _2910) * _2911) + _2775;
        _2836 = (((((_2891 * _2665) + _1020) * cbLight._m0[_2842].z) * _2910) * _2911) + _2776;
    }
    float _2942;
    float _2944;
    float _2946;
    if (_2549)
    {
        _2942 = _2832;
        _2944 = _2834;
        _2946 = _2836;
    }
    else
    {
        uint _2953 = _2364 + 3u;
        uint _2957 = _2364 + 11u;
        float _2971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2953].w)) * _859) * 0.949999988079071044921875);
        float _2972 = _2971 * _2971;
        float _2973 = cbLight._m0[_2953].x + _935;
        float _2974 = cbLight._m0[_2953].y + _936;
        float _2975 = cbLight._m0[_2953].z + _937;
        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
        float _2980 = _2979 * _2973;
        float _2981 = _2979 * _2974;
        float _2982 = _2979 * _2975;
        float _2983 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2953].xyz));
        float _4929 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2986 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2987 = dot(vec3(_856, _857, _858), vec3(_2980, _2981, _2982));
        float _4940 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2990 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
        float _2991 = dot(vec3(cbLight._m0[_2953].xyz), vec3(_2980, _2981, _2982));
        float _4951 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2995 = _2972 * _2972;
        float _2999 = ((_2990 * _2990) * (_2995 + (-1.0))) + 1.0;
        float _3006 = exp2(log2(1.0 - (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0)))) * 5.0);
        float _3013 = 1.0 - _2972;
        float _3023 = (0.5 / (((_2640 * ((_2986 * _3013) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _3013) + _2972) * _2986))) * _2986;
        float _4962 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3025 = (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2995 / ((_2999 * _2999) * 3.141590118408203125));
        float _3026 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2942 = (((((_3006 * _2662) + _1017) * cbLight._m0[_2957].x) * _3025) * _3026) + _2832;
        _2944 = (((((_3006 * _2664) + _1019) * cbLight._m0[_2957].y) * _3025) * _3026) + _2834;
        _2946 = (((((_3006 * _2665) + _1020) * cbLight._m0[_2957].z) * _3025) * _3026) + _2836;
    }
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_2362.y == 0u)
    {
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.x;
        uint _3059 = uint((float(_3047.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _3048))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _3048)));
        float _3069 = (log2(_2140 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3070 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        uint _3073 = uint(isnan(14.0) ? _3070 : (isnan(_3070) ? 14.0 : min(_3070, 14.0)));
        uvec4 _3078 = texelFetch(g_lightClusterGridBuffer, int(((_3073 << 2u) + (_3059 << 6u)) >> 2u));
        uint _3079 = _3078.x;
        uint _3080 = _3047.z;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((((1u << ((_3080 >> 4u) & 15u)) + 4294967295u) & _3079) == 0u) || ((_3080 & 240u) == 0u))
        {
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
        }
        else
        {
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3311 = 0.0;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            uint _3317 = 0u;
            uint _3326;
            bool _3327;
            for (;;)
            {
                _3326 = texelFetch(g_lightClassification, int((((_3073 << 5u) + (_3059 << 9u)) + (_3317 << 2u)) >> 2u)).x;
                _3327 = _3326 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3327)
                {
                    frontier_phi_71_pred = _3316;
                    frontier_phi_71_pred_1 = _3315;
                    frontier_phi_71_pred_2 = _3314;
                    frontier_phi_71_pred_3 = _3313;
                    frontier_phi_71_pred_4 = _3312;
                    frontier_phi_71_pred_5 = _3311;
                }
                else
                {
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    uint _3462;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3313;
                    _3459 = _3314;
                    _3460 = _3315;
                    _3461 = _3316;
                    _3462 = _3326;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    for (;;)
                    {
                        uint _3466 = uint(findLSB(_3462)) + (_3317 << 5u);
                        uint _3463 = (_3462 + 4294967295u) & _3462;
                        uint _3468 = _3466 * 48u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3468)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 3u)).x));
                        uint _3488 = (_3466 * 48u) + 4u;
                        vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 3u)).x));
                        uint _3507 = (_3466 * 48u) + 8u;
                        vec3 _3518 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3507)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 2u)).x));
                        float _3522 = _3482.x - _2138;
                        float _3523 = _3482.y - _2139;
                        float _3524 = _3482.z - _2140;
                        float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                        float _3528 = inversesqrt(_3525);
                        float _3529 = _3528 * _3522;
                        float _3530 = _3528 * _3523;
                        float _3531 = _3528 * _3524;
                        float _3532 = dot(vec3(_974, _977, _980), vec3(_3529, _3530, _3531));
                        float _3537 = 1.0 - (_3525 * _3482.w);
                        float _4988 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                        float _3539 = sqrt(_3525) * _3501.w;
                        float _3542 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                        float _3543 = _3542 * _3542;
                        float _3546 = ((1.0 - _3543) * _3532) + _3543;
                        float _3549 = _3539 * _3539;
                        float _3553 = ((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3538) / ((_3549 * 0.699999988079071044921875) + 1.0);
                        float _3557 = (-0.0) - _2138;
                        float _3558 = (-0.0) - _2139;
                        float _3559 = (-0.0) - _2140;
                        float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                        float _3564 = _3563 * _3557;
                        float _3565 = _3563 * _3558;
                        float _3566 = _3563 * _3559;
                        float _3573 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                        float _3574 = 1.0 - _1049;
                        float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                        float _3582 = _3581 * _3581;
                        float _3583 = _3582 * _3582;
                        float _3584 = _3564 + _3529;
                        float _3585 = _3565 + _3530;
                        float _3586 = _3566 + _3531;
                        float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                        float _3594 = dot(vec3(_974, _977, _980), vec3(_3564, _3565, _3566));
                        float _5004 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                        float _3598 = dot(vec3(_974, _977, _980), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                        float _5015 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3601 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                        float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                        float _3606 = _3542 * _3582;
                        float _3607 = _3606 * _3606;
                        float _3610 = ((1.0 - _3607) * _3532) + _3607;
                        float _5026 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3611 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                        float _3612 = 1.0 - _3582;
                        float _3622 = (0.5 / (((_3611 * ((_3597 * _3612) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3582) * _3597))) * _3611;
                        float _5037 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3633 = (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3605 * _3605) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125))) * _3538;
                        _3386 = (_3553 * _3501.x) + _3459;
                        _3387 = (_3553 * _3501.y) + _3460;
                        _3388 = (_3553 * _3501.z) + _3461;
                        _3383 = (_3633 * _3518.x) + _3456;
                        _3384 = (_3633 * _3518.y) + _3457;
                        _3385 = (_3633 * _3518.z) + _3458;
                        if (_3463 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3385;
                            _3459 = _3386;
                            _3460 = _3387;
                            _3461 = _3388;
                            _3462 = _3463;
                        }
                    }
                    frontier_phi_71_pred = _3388;
                    frontier_phi_71_pred_1 = _3387;
                    frontier_phi_71_pred_2 = _3386;
                    frontier_phi_71_pred_3 = _3385;
                    frontier_phi_71_pred_4 = _3384;
                    frontier_phi_71_pred_5 = _3383;
                }
                _3170 = frontier_phi_71_pred;
                _3168 = frontier_phi_71_pred_1;
                _3166 = frontier_phi_71_pred_2;
                _3164 = frontier_phi_71_pred_3;
                _3162 = frontier_phi_71_pred_4;
                _3160 = frontier_phi_71_pred_5;
                uint _3318 = _3317 + 1u;
                if (_3318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3311 = _3160;
                    _3312 = _3162;
                    _3313 = _3164;
                    _3314 = _3166;
                    _3315 = _3168;
                    _3316 = _3170;
                    _3317 = _3318;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
        }
        uvec4 _3173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3174 = _3173.z;
        uint _3176 = (_3174 >> 8u) & 15u;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        if (((4294967295u << _3176) & _3079) == 0u)
        {
            _3279 = _3159;
            _3281 = _3161;
            _3283 = _3163;
            _3285 = _3165;
            _3287 = _3167;
            _3289 = _3169;
        }
        else
        {
            float _3304 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
            float _3305 = _3304 * _2138;
            float _3306 = _3304 * _2139;
            float _3307 = _3304 * _2140;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3176 < ((_3174 >> 12u) & 15u))
            {
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3288;
                float _3290;
                float _3439 = _3159;
                float _3440 = _3161;
                float _3441 = _3163;
                float _3442 = _3165;
                float _3443 = _3167;
                float _3444 = _3169;
                uint _3445 = _3176;
                uint _3454;
                bool _3455;
                for (;;)
                {
                    _3454 = texelFetch(g_lightClassification, int((((_3073 << 5u) + (_3059 << 9u)) + (_3445 << 2u)) >> 2u)).x;
                    _3455 = _3454 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3455)
                    {
                        frontier_phi_82_pred = _3444;
                        frontier_phi_82_pred_1 = _3443;
                        frontier_phi_82_pred_2 = _3442;
                        frontier_phi_82_pred_3 = _3441;
                        frontier_phi_82_pred_4 = _3440;
                        frontier_phi_82_pred_5 = _3439;
                    }
                    else
                    {
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3660 = _3439;
                        float _3661 = _3440;
                        float _3662 = _3441;
                        float _3663 = _3442;
                        float _3664 = _3443;
                        float _3665 = _3444;
                        uint _3666 = _3454;
                        uint _3667;
                        vec4 _3692;
                        float _3693;
                        vec4 _3708;
                        vec3 _3720;
                        vec4 _3735;
                        vec4 _3751;
                        float _3797;
                        bool _3798;
                        for (;;)
                        {
                            uint _3677 = ((_3445 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3666));
                            _3667 = (_3666 + 4294967295u) & _3666;
                            uint _3679 = _3677 * 40u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            _3693 = _3692.w;
                            uint _3695 = (_3677 * 40u) + 4u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3677 * 40u) + 8u;
                            _3720 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x));
                            uint _3722 = (_3677 * 40u) + 16u;
                            _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            uint _3738 = (_3677 * 40u) + 20u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3677 * 40u) + 24u;
                            vec4 _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3772 = (_3677 * 40u) + 28u;
                            vec4 _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            _3797 = fma(_2140, _3785.z, fma(_2139, _3785.y, _3785.x * _2138)) + _3785.w;
                            _3798 = !((fma(_2140, _3766.z, fma(_2139, _3766.y, _3766.x * _2138)) + _3766.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3798)
                            {
                                float _3825 = _3692.x - _2138;
                                float _3826 = _3692.y - _2139;
                                float _3827 = _3692.z - _2140;
                                float _3828 = dot(vec3(_3825, _3826, _3827), vec3(_3825, _3826, _3827));
                                float _3831 = inversesqrt(_3828);
                                float _3832 = _3831 * _3825;
                                float _3833 = _3831 * _3826;
                                float _3834 = _3831 * _3827;
                                float _3838 = 1.0 - (_3828 / (_3693 * _3693));
                                float _5048 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3843 = sqrt(_3828) * _3708.w;
                                float _3845 = 1.39999997615814208984375 / (_3843 + 1.39999997615814208984375);
                                float _3846 = _3845 * _3845;
                                float _3849 = ((1.0 - _3846) * dot(vec3(_3832, _3833, _3834), vec3(_974, _977, _980))) + _3846;
                                float _3852 = _3843 * _3843;
                                float _3856 = (fma(_2140, _3735.z, fma(_2139, _3735.y, _3735.x * _2138)) + _3735.w) / _3797;
                                float _3857 = (fma(_2140, _3751.z, fma(_2139, _3751.y, _3751.x * _2138)) + _3751.w) / _3797;
                                float _3861 = 1.0 - dot(vec2(_3856, _3857), vec2(_3856, _3857));
                                float _5064 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                                float _3863 = _3862 * (((isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0))) * _3839) / ((_3852 * 0.699999988079071044921875) + 1.0));
                                float _3875 = exp2(log2(1.0 / ((_3852 * 3.5) + 5.0)) * 0.25);
                                float _3876 = 1.0 - _1049;
                                float _3883 = sqrt(1.0 - ((1.0 - (_3876 * _3876)) * (1.0 - (_3875 * _3875))));
                                float _3884 = _3883 * _3883;
                                float _3885 = _3884 * _3884;
                                float _3886 = _3832 - _3305;
                                float _3887 = _3833 - _3306;
                                float _3888 = _3834 - _3307;
                                float _3892 = inversesqrt(dot(vec3(_3886, _3887, _3888), vec3(_3886, _3887, _3888)));
                                float _3896 = dot(vec3(_974, _977, _980), vec3((-0.0) - _3305, (-0.0) - _3306, (-0.0) - _3307));
                                float _5075 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3899 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                                float _3900 = dot(vec3(_974, _977, _980), vec3(_3892 * _3886, _3892 * _3887, _3892 * _3888));
                                float _5086 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3903 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3907 = ((_3903 * _3903) * (_3885 + (-1.0))) + 1.0;
                                float _3908 = _3845 * _3884;
                                float _3909 = _3908 * _3908;
                                float _3915 = ((1.0 - _3909) * dot(vec3(_974, _977, _980), vec3(_3832, _3833, _3834))) + _3909;
                                float _5097 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3917 = 1.0 - _3884;
                                float _3927 = (0.5 / (((_3916 * ((_3899 * _3917) + _3884)) + 9.9999999392252902907785028219223e-09) + (((_3916 * _3917) + _3884) * _3899))) * _3916;
                                float _5108 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3937 = (_3862 * _3839) * (((_3885 * 3.1415927410125732421875) * (isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0)))) / ((_3907 * _3907) * ((_3852 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3863 * _3708.z;
                                frontier_phi_88_pred_1 = _3863 * _3708.y;
                                frontier_phi_88_pred_2 = _3863 * _3708.x;
                                frontier_phi_88_pred_3 = _3937 * _3720.z;
                                frontier_phi_88_pred_4 = _3937 * _3720.y;
                                frontier_phi_88_pred_5 = _3937 * _3720.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3946 = frontier_phi_88_pred;
                            _3945 = frontier_phi_88_pred_1;
                            _3944 = frontier_phi_88_pred_2;
                            _3943 = frontier_phi_88_pred_3;
                            _3942 = frontier_phi_88_pred_4;
                            _3941 = frontier_phi_88_pred_5;
                            _3650 = _3944 + _3663;
                            _3651 = _3945 + _3664;
                            _3652 = _3946 + _3665;
                            _3647 = _3941 + _3660;
                            _3648 = _3942 + _3661;
                            _3649 = _3943 + _3662;
                            if (_3667 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3667;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3652;
                        frontier_phi_82_pred_1 = _3651;
                        frontier_phi_82_pred_2 = _3650;
                        frontier_phi_82_pred_3 = _3649;
                        frontier_phi_82_pred_4 = _3648;
                        frontier_phi_82_pred_5 = _3647;
                    }
                    _3290 = frontier_phi_82_pred;
                    _3288 = frontier_phi_82_pred_1;
                    _3286 = frontier_phi_82_pred_2;
                    _3284 = frontier_phi_82_pred_3;
                    _3282 = frontier_phi_82_pred_4;
                    _3280 = frontier_phi_82_pred_5;
                    uint _3446 = _3445 + 1u;
                    if (_3446 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3439 = _3280;
                        _3440 = _3282;
                        _3441 = _3284;
                        _3442 = _3286;
                        _3443 = _3288;
                        _3444 = _3290;
                        _3445 = _3446;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3286;
                frontier_phi_63_64_ladder_1 = _3290;
                frontier_phi_63_64_ladder_2 = _3288;
                frontier_phi_63_64_ladder_3 = _3284;
                frontier_phi_63_64_ladder_4 = _3282;
                frontier_phi_63_64_ladder_5 = _3280;
            }
            else
            {
                frontier_phi_63_64_ladder = _3165;
                frontier_phi_63_64_ladder_1 = _3169;
                frontier_phi_63_64_ladder_2 = _3167;
                frontier_phi_63_64_ladder_3 = _3163;
                frontier_phi_63_64_ladder_4 = _3161;
                frontier_phi_63_64_ladder_5 = _3159;
            }
            _3279 = frontier_phi_63_64_ladder_5;
            _3281 = frontier_phi_63_64_ladder_4;
            _3283 = frontier_phi_63_64_ladder_3;
            _3285 = frontier_phi_63_64_ladder;
            _3287 = frontier_phi_63_64_ladder_2;
            _3289 = frontier_phi_63_64_ladder_1;
        }
        float _3294 = isnan(1.0) ? _1033 : (isnan(_1033) ? 1.0 : min(_1033, 1.0));
        _3092 = (_3294 * _3285) + _2604;
        _3094 = (_3294 * _3287) + _2606;
        _3096 = (_3294 * _3289) + _2608;
        _3098 = ((_3279 * _1017) * _3294) + _2942;
        _3100 = ((_3281 * _1019) * _3294) + _2944;
        _3102 = ((_3283 * _1020) * _3294) + _2946;
    }
    else
    {
        _3092 = _2604;
        _3094 = _2606;
        _3096 = _2608;
        _3098 = _2942;
        _3100 = _2944;
        _3102 = _2946;
    }
    float _5124 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _5135 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5146 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _3119 = ((isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0))) * (_3092 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1033))) + ((_3098 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    float _3120 = ((isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0))) * (_3094 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1033))) + ((_3100 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    float _3121 = ((isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0))) * (_3096 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1033))) + ((_3102 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    uint _3122 = _261 + 6u;
    float _3130 = _955 / cbSceneParam._m0[86u].x;
    float _3131 = _956 / cbSceneParam._m0[86u].y;
    vec4 _3145 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, (log2((isnan(cbSceneParam._m0[77u].w) ? _878 : (isnan(_878) ? cbSceneParam._m0[77u].w : min(_878, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3147 = _3145.x;
    float _3148 = _3145.y;
    float _3149 = _3145.z;
    float _3150 = _3145.w;
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    if (_878 > cbSceneParam._m0[78u].w)
    {
        float _3184 = isnan(_878) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _878 : min(cbSceneParam._m0[80u].w, _878));
        float _3185 = _3184 / _878;
        float _3196 = _3185 * _928;
        float _3197 = _929 * _3185;
        float _3198 = (-0.0) - _3197;
        float _3199 = _3185 * _930;
        float _3201 = (cbSceneParam._m0[77u].w * _3198) / _3184;
        float _3202 = _3201 + cbSceneParam._m0[79u].w;
        float _3203 = cbSceneParam._m0[79u].w - _3197;
        float _3209 = sqrt(((_3196 * _3196) + (_3197 * _3197)) + (_3199 * _3199));
        float _3212 = (1.0 - (cbSceneParam._m0[77u].w / _3184)) * _3209;
        float _3217 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3219 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3396;
        if (abs((_3198 - _3201) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3396 = ((((_3202 > 0.0) ? exp2(_3217 * _3202) : (2.0 - exp2(_3219 * _3202))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3212;
        }
        else
        {
            float _3340 = 1.0 / cbSceneParam._m0[80u].x;
            float _3341 = isnan(_3203) ? _3202 : (isnan(_3202) ? _3203 : max(_3202, _3203));
            float _3342 = isnan(_3203) ? _3202 : (isnan(_3202) ? _3203 : min(_3202, _3203));
            float _3351 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : min(_3341, 0.0));
            float _3352 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : min(_3342, 0.0));
            _3396 = ((abs(_3209 / _3198) * cbSceneParam._m0[80u].y) * ((((_3351 - _3352) * 2.0) - ((exp2(_3217 * (isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0)))) - exp2(_3217 * (isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))))) * _3340)) - ((exp2(_3219 * _3351) - exp2(_3219 * _3352)) * _3340))) + (_3212 * cbSceneParam._m0[80u].z);
        }
        vec4 _3398 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, 1.0), 0.0);
        float _3407 = exp2((_3396 * (-1.44269502162933349609375)) * (1.0 - _3398.w));
        float _3408 = log2(_3407);
        float _3424 = log2(_3150);
        _3221 = (exp2(_3424 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].x)) * _3398.x) / cbSceneParam._m0[78u].x)) + _3147;
        _3223 = (exp2(_3424 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].y)) * _3398.y) / cbSceneParam._m0[78u].y)) + _3148;
        _3225 = (exp2(_3424 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].z)) * _3398.z) / cbSceneParam._m0[78u].z)) + _3149;
        _3227 = _3407 * _3150;
    }
    else
    {
        _3221 = _3147;
        _3223 = _3148;
        _3225 = _3149;
        _3227 = _3150;
    }
    bool _3434;
    vec4 _3237;
    vec4 _3259;
    float _3261;
    float _3265;
    float _3266;
    float _3267;
    float _3268;
    bool _3278;
    for (;;)
    {
        _3237 = cbMatDynParam._m0[0u];
        float _3239 = roundEven(_3237.y);
        bool _3240 = _3239 == 3.0;
        float _3241 = log2(_3227);
        float _3248 = exp2(_3241 * cbSceneParam._m0[78u].x) * _3119;
        float _3249 = exp2(_3241 * cbSceneParam._m0[78u].y) * _3120;
        float _3250 = exp2(_3241 * cbSceneParam._m0[78u].z) * _3121;
        float _3257 = _944 + (-0.5);
        _3259 = cbMtdParam._m0[1u];
        _3261 = _3259.y * _3257;
        float _3264 = (_3239 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3265 = _3264 * (_3240 ? _3248 : (_3248 + (cbSceneParam._m0[72u].w * _3221)));
        _3266 = _3264 * (_3240 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3223)));
        _3267 = _3264 * (_3240 ? _3250 : (_3250 + (cbSceneParam._m0[72u].w * _3225)));
        _3268 = _3257 * 0.999000012874603271484375;
        _3278 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3278)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3268) < 0.5)
            {
                _3434 = true;
                break;
            }
        }
        uint _3375 = _993 + uint(_3237.w);
        if ((cbInstanceData._m0[_3375].w < 1.0) && ((cbInstanceData._m0[_3375].w + _3268) < 0.5))
        {
            _3434 = true;
            break;
        }
        if ((_3261 + 1.0) < _3259.x)
        {
            _3434 = true;
            break;
        }
        _3434 = false;
        break;
    }
    float _3638;
    if (_3434)
    {
        discard_state = true;
        _3638 = 0.0;
    }
    else
    {
        _3638 = cbInstanceData._m0[_3122].w;
    }
    SV_Target.x = _3265;
    SV_Target.y = _3266;
    SV_Target.z = _3267;
    SV_Target.w = _3638;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3122].w;
    discard_exit();
}


