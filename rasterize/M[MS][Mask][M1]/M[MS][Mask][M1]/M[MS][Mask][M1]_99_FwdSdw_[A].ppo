#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1655;
float _4315;
float _4316;
float _4317;
float _4318;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _261 = _260 * _252;
    float _262 = _260 * _253;
    float _263 = _260 * _254;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4327 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4338 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4349 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = _381.x * cbMtdParam._m0[11u].x;
    float _387 = _381.y * cbMtdParam._m0[11u].y;
    float _388 = _381.z * cbMtdParam._m0[11u].z;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _426.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[23u].w) + _472) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4360 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _497 = (_490 * ((_407.x * cbMtdParam._m0[12u].x) - _386)) + _386;
    float _498 = (_490 * ((_407.y * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _499 = (_490 * ((_407.z * cbMtdParam._m0[12u].z) - _388)) + _388;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _426.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[23u].w) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4371 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _573 = (_355.x * cbMtdParam._m0[9u].x) * ((_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497);
    float _574 = (_355.y * cbMtdParam._m0[9u].y) * ((_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498);
    float _575 = (_355.z * cbMtdParam._m0[9u].z) * ((_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499);
    float _579 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _573;
    float _582 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _574;
    float _585 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _575;
    float _593 = (((_573 - _579) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) + _579) * 4.55000019073486328125;
    float _595 = (((_574 - _582) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) + _582) * 4.55000019073486328125;
    float _597 = (((_575 - _585) * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) + _585) * 4.55000019073486328125;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _318) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _319) + cbTextureTilingScale._m0[14u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _679 = _677.x;
    float _680 = _677.y;
    float _681 = _677.z;
    float _688 = ((_660.x - _679) * _490) + _679;
    float _689 = ((_660.y - _680) * _490) + _680;
    float _690 = ((_660.z - _681) * _490) + _681;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _715 = ((_702.z - _690) * _563) + _690;
    float _718 = ((((_702.x - _688) * _563) + _688) * 2.0) + (-1.0);
    float _719 = ((((_702.y - _689) * _563) + _689) * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _4382 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _725 = sqrt(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))));
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _755 = (_718 + ((((_635.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_743.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _756 = (_719 + ((((_635.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_743.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _759 = fma(_725, _268, fma(_756, _275, _755 * _261));
    float _762 = fma(_725, _269, fma(_756, _276, _755 * _262));
    float _765 = fma(_725, _270, fma(_756, _277, _755 * _263));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _798 = _796.x;
    float _799 = 1.0 - _798;
    float _808 = (cbMtdParam._m0[19u].x + dot(vec4(_769 * _759, _769 * _762, _769 * _765, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_798 - _799) * cbMtdParam._m0[24u].z) + _799) * cbMtdParam._m0[21u].z);
    float _4393 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _809 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _811 = (-0.0) - cbMtdParam._m0[24u].x;
    float _813 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
    float _821 = _809 - ((_809 * TEXCOORD_8.x) * _814);
    float _822 = _809 - ((_809 * TEXCOORD_8.y) * _814);
    float _823 = _809 - ((_809 * TEXCOORD_8.z) * _814);
    float _830 = (_821 * ((_616.x * cbMtdParam._m0[18u].x) - _593)) + _593;
    float _831 = (_822 * ((_616.y * cbMtdParam._m0[18u].y) - _595)) + _595;
    float _832 = (_823 * ((_616.z * cbMtdParam._m0[18u].z) - _597)) + _597;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _846 = _844.x;
    float _847 = 1.0 - _846;
    float _873 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_846 - _847) * cbMtdParam._m0[24u].w) + _847) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4414 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _874 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _882 = ((((cbMtdParam._m0[10u].x - _830) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _874) + _830;
    float _883 = ((((cbMtdParam._m0[10u].y - _831) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _874) + _831;
    float _884 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _832)) * _874) + _832;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _912 = _910.x;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _912) * _490) + _912;
    float _946 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _929) * _563) + _929;
    float _950 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _946) * cbMtdParam._m0[19u].z) + _946;
    float _952 = _950 - (_950 * _821);
    float _954 = _952 - (_952 * _874);
    float _959 = (((_635.z - _715) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _715;
    float _963 = ((_743.z - _959) * cbMtdParam._m0[19u].w) + _959;
    vec4 _977 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _984 = (_977.x * 2.0) + (-1.0);
    float _985 = (_977.y * 2.0) + (-1.0);
    float _986 = dot(vec2(_984, _985), vec2(_984, _985));
    float _4425 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _994 = ((_977.z - _963) * _821) + _963;
    float _997 = ((cbMtdParam._m0[23u].x - _994) * _874) + _994;
    vec4 _1020 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1026 = (_1020.x * 2.0) + (-1.0);
    float _1027 = (_1020.y * 2.0) + (-1.0);
    float _1028 = dot(vec2(_1026, _1027), vec2(_1026, _1027));
    float _4436 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1043 = ((sqrt(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) - _725) * _823) + _725;
    float _1046 = (((_984 - _755) * _821) + _755) + (cbMtdParam._m0[21u].x * _755);
    float _1047 = (((_985 - _756) * _822) + _756) + (cbMtdParam._m0[21u].x * _756);
    float _1058 = (((_1026 - _1046) + (_1046 * cbMtdParam._m0[22u].z)) * _874) + _1046;
    float _1059 = (((_1027 - _1047) + (_1047 * cbMtdParam._m0[22u].z)) * _874) + _1047;
    float _1060 = (_874 * (sqrt(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) - _1043)) + _1043;
    float _1062 = cbMtdParam._m0[22u].x + _743.w;
    float _1065 = fma(_1060, _268, fma(_1059, _275, _1058 * _261));
    float _1068 = fma(_1060, _269, fma(_1059, _276, _1058 * _262));
    float _1071 = fma(_1060, _270, fma(_1059, _277, _1058 * _263));
    float _1075 = inversesqrt(dot(vec3(_1065, _1068, _1071), vec3(_1065, _1068, _1071)));
    float _1076 = _1075 * _1065;
    float _1077 = _1075 * _1068;
    float _1078 = _1075 * _1071;
    float _4447 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1079 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4469 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4480 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4491 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4502 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _1084 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _1098 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1148 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1138);
    float _1149 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1138);
    float _1150 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1138);
    float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
    float _1155 = _1148 * _1154;
    float _1156 = _1149 * _1154;
    float _1157 = _1150 * _1154;
    vec4 _1162 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1164 = _1162.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1336 = sqrt(((_1148 * _1148) + (_1149 * _1149)) + (_1150 * _1150));
        float _1342 = (cbMatDynParam._m0[5u].x * _1336) + cbMatDynParam._m0[5u].y;
        float _4513 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1347 = (cbMatDynParam._m0[5u].z * _1336) + cbMatDynParam._m0[5u].w;
        float _4524 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) - _1343)) + _1343) < ((_1164 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1175 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1176 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1194 = fma(_1078, cbSceneParam._m0[5u].z, fma(_1077, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1076));
    float _1197 = fma(_1078, cbSceneParam._m0[6u].z, fma(_1077, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1076));
    float _1200 = fma(_1078, cbSceneParam._m0[7u].z, fma(_1077, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1076));
    uint _1213 = _299 + 9u;
    uint _1214 = _1213 + uint(cbMatDynParam._m0[0u].w);
    float _1220 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * cbInstanceData._m0[_1214].x;
    float _1221 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * cbInstanceData._m0[_1214].y;
    float _1222 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * cbInstanceData._m0[_1214].z;
    float _4535 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1223 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1224 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _4557 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1225 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _1226 = 1.0 - _1084;
    float _1227 = _1223 * _1226;
    float _1228 = _1224 * _1226;
    float _1229 = _1225 * _1226;
    float _1234 = (_1223 + (-0.039999999105930328369140625)) * _1084;
    float _1235 = (_1224 + (-0.039999999105930328369140625)) * _1084;
    float _1236 = (_1225 + (-0.039999999105930328369140625)) * _1084;
    float _1237 = _1234 + 0.039999999105930328369140625;
    float _1239 = _1235 + 0.039999999105930328369140625;
    float _1240 = _1236 + 0.039999999105930328369140625;
    vec4 _1249 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1175, cbSceneParam._m0[86u].y * _1176));
    float _1253 = ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * TEXCOORD_5.w) * _1249.x;
    float _1254 = dot(vec3(_1076, _1077, _1078), vec3(_1155, _1156, _1157));
    float _1257 = _1254 * 2.0;
    float _1261 = (_1257 * _1076) - _1155;
    float _1262 = (_1257 * _1077) - _1156;
    float _1263 = (_1257 * _1078) - _1157;
    float _1267 = abs(dot(vec3(_1155, _1156, _1157), vec3(_1076, _1077, _1078)));
    float _4568 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _1269 = sqrt(_1079);
    float _1282 = exp2((_1269 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1269 * 3.0));
    float _1288 = (1.0 - _1282) * ((_1269 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1289 = _1282 * _1269;
    float _1317 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1325 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1654;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1379 = fma(_1325, cbModelParam._m0[26u].z, fma(_1321, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1317));
        float _1383 = fma(_1325, cbModelParam._m0[27u].z, fma(_1321, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1317));
        float _1387 = fma(_1325, cbModelParam._m0[28u].z, fma(_1321, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1317));
        float _1412 = _1317 + _1076;
        float _1413 = _1321 + _1077;
        float _1414 = _1325 + _1078;
        float _1424 = fma(_1414, cbModelParam._m0[26u].z, fma(_1413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1412)) - _1379;
        float _1425 = fma(_1414, cbModelParam._m0[27u].z, fma(_1413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1412)) - _1383;
        float _1426 = fma(_1414, cbModelParam._m0[28u].z, fma(_1413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1412)) - _1387;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1379 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1383 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[34u].z) + ((((((_1387 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1482 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1448.x + (-0.5));
        float _1484 = _1482 * (_1448.y + (-0.5));
        float _1485 = _1482 * (_1448.z + (-0.5));
        float _1492 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1455.x + (-0.5));
        float _1494 = _1492 * (_1455.y + (-0.5));
        float _1495 = _1492 * (_1455.z + (-0.5));
        float _1502 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1462.x + (-0.5));
        float _1504 = _1502 * (_1462.y + (-0.5));
        float _1505 = _1502 * (_1462.z + (-0.5));
        float _1512 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1469.x + (-0.5));
        float _1514 = _1512 * (_1469.y + (-0.5));
        float _1515 = _1512 * (_1469.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1536 = (dot(vec3(_1076, _1077, _1078), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4594 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1546 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4605 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4616 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_1548 + 1.0))) + _1553) * _1516;
        float _1563 = _1484 * 0.5;
        float _1564 = _1494 * 0.5;
        float _1565 = _1504 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_1076, _1077, _1078), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4627 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4638 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4649 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_1590 + 1.0))) + _1595) * _1517;
        float _1605 = _1485 * 0.5;
        float _1606 = _1495 * 0.5;
        float _1607 = _1505 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_1076, _1077, _1078), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4660 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4671 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4682 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_1632 + 1.0))) + _1637) * _1518;
        _1654 = _1485;
        _1656 = _1484;
        _1657 = _1483;
        _1658 = _1495;
        _1659 = _1494;
        _1660 = _1493;
        _1661 = _1505;
        _1662 = _1504;
        _1663 = _1503;
        _1664 = _1518;
        _1665 = _1517;
        _1666 = _1516;
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1668 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1669 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1655;
        _1656 = _1655;
        _1657 = _1655;
        _1658 = _1655;
        _1659 = _1655;
        _1660 = _1655;
        _1661 = _1655;
        _1662 = _1655;
        _1663 = _1655;
        _1664 = _1655;
        _1665 = _1655;
        _1666 = _1655;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1696 = fma(_1325, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317));
        float _1700 = fma(_1325, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317));
        float _1704 = fma(_1325, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317));
        float _1727 = _1317 + _1076;
        float _1728 = _1321 + _1077;
        float _1729 = _1325 + _1078;
        float _1739 = fma(_1729, cbModelParam._m0[30u].z, fma(_1728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1727)) - _1696;
        float _1740 = fma(_1729, cbModelParam._m0[31u].z, fma(_1728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1727)) - _1700;
        float _1741 = fma(_1729, cbModelParam._m0[32u].z, fma(_1728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1727)) - _1704;
        float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
        float _1758 = ((_1745 * _1739) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1696 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1759 = ((_1745 * _1740) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1700 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1760 = ((_1745 * _1741) / cbModelParam._m0[35u].z) + ((((((_1704 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1762 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1758, _1759, _1760), 0.0);
        vec4 _1769 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1758, _1759, _1760), 0.0);
        vec4 _1776 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1758, _1759, _1760), 0.0);
        vec4 _1783 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1758, _1759, _1760), 0.0);
        float _1795 = exp2((_1762.w + (-0.5)) * 20.0) * 2.0;
        float _1796 = _1795 * (_1762.x + (-0.5));
        float _1797 = _1795 * (_1762.y + (-0.5));
        float _1798 = _1795 * (_1762.z + (-0.5));
        float _1805 = exp2((_1769.w + (-0.5)) * 20.0) * 2.0;
        float _1806 = _1805 * (_1769.x + (-0.5));
        float _1807 = _1805 * (_1769.y + (-0.5));
        float _1808 = _1805 * (_1769.z + (-0.5));
        float _1815 = exp2((_1776.w + (-0.5)) * 20.0) * 2.0;
        float _1816 = _1815 * (_1776.x + (-0.5));
        float _1817 = _1815 * (_1776.y + (-0.5));
        float _1818 = _1815 * (_1776.z + (-0.5));
        float _1825 = exp2((_1783.w + (-0.5)) * 20.0) * 2.0;
        float _1826 = _1825 * (_1783.x + (-0.5));
        float _1827 = _1825 * (_1783.y + (-0.5));
        float _1828 = _1825 * (_1783.z + (-0.5));
        float _1829 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1830 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1831 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1832 = _1796 * 0.5;
        float _1833 = _1806 * 0.5;
        float _1834 = _1816 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_1076, _1077, _1078), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4723 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1829 + 9.9999997473787516355514526367188e-06);
        float _4734 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4745 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_1859 + 1.0))) + _1864) * _1829;
        float _1874 = _1797 * 0.5;
        float _1875 = _1807 * 0.5;
        float _1876 = _1817 * 0.5;
        float _1877 = dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876));
        float _1882 = (_1877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1877);
        float _1890 = (dot(vec3(_1076, _1077, _1078), vec3(_1882 * _1874, _1882 * _1875, _1882 * _1876)) + 1.0) * 0.5;
        float _4756 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1899 = sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876)) / (_1830 + 9.9999997473787516355514526367188e-06);
        float _4767 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _1901 = _1900 * 2.0;
        float _1905 = (1.0 - _1900) / (_1900 + 1.0);
        float _4778 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _1915 = ((((1.0 - _1906) * (_1901 + 2.0)) * exp2(log2(isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_1901 + 1.0))) + _1906) * _1830;
        float _1916 = _1798 * 0.5;
        float _1917 = _1808 * 0.5;
        float _1918 = _1818 * 0.5;
        float _1919 = dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918));
        float _1924 = (_1919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1919);
        float _1932 = (dot(vec3(_1076, _1077, _1078), vec3(_1924 * _1916, _1924 * _1917, _1924 * _1918)) + 1.0) * 0.5;
        float _4789 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1941 = sqrt(((_1917 * _1917) + (_1916 * _1916)) + (_1918 * _1918)) / (_1831 + 9.9999997473787516355514526367188e-06);
        float _4800 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _1943 = _1942 * 2.0;
        float _1947 = (1.0 - _1942) / (_1942 + 1.0);
        float _4811 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _1957 = ((((1.0 - _1948) * (_1943 + 2.0)) * exp2(log2(isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_1943 + 1.0))) + _1948) * _1831;
        _1965 = _1798;
        _1966 = _1797;
        _1967 = _1796;
        _1968 = _1808;
        _1969 = _1807;
        _1970 = _1806;
        _1971 = _1818;
        _1972 = _1817;
        _1973 = _1816;
        _1974 = _1831;
        _1975 = _1830;
        _1976 = _1829;
        _1977 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
        _1978 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)));
        _1979 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)));
    }
    else
    {
        _1965 = _1655;
        _1966 = _1655;
        _1967 = _1655;
        _1968 = _1655;
        _1969 = _1655;
        _1970 = _1655;
        _1971 = _1655;
        _1972 = _1655;
        _1973 = _1655;
        _1974 = _1655;
        _1975 = _1655;
        _1976 = _1655;
        _1977 = 0.0;
        _1978 = 0.0;
        _1979 = 0.0;
    }
    float _1989 = (cbModelParam._m0[1u].x * (_1977 - _1667)) + _1667;
    float _1990 = (cbModelParam._m0[1u].x * (_1978 - _1668)) + _1668;
    float _1991 = (cbModelParam._m0[1u].x * (_1979 - _1669)) + _1669;
    float _2012 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1990, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1990, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1990, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1989));
    float _2033 = _1261 * 0.5;
    float _2034 = _1262 * 0.5;
    float _2035 = _1263 * 0.5;
    float _2036 = dot(vec4(_2033, _2034, _2035, 1.0), vec4(_1967, _1970, _1973, _1976));
    float _2039 = dot(vec4(_2033, _2034, _2035, 1.0), vec4(_1966, _1969, _1972, _1975));
    float _2042 = dot(vec4(_2033, _2034, _2035, 1.0), vec4(_1965, _1968, _1971, _1974));
    float _2076;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2049 = dot(vec4(_2033, _2034, _2035, 1.0), vec4(_1654, _1658, _1661, _1664));
        float _2053 = dot(vec4(_2033, _2034, _2035, 1.0), vec4(_1656, _1659, _1662, _1665));
        float _2057 = dot(vec4(_2033, _2034, _2035, 1.0), vec4(_1657, _1660, _1663, _1666));
        float _2064 = dot(vec4(cbModelParam._m0[39u]), vec4(_2033, _2034, _2035, 1.0));
        _2076 = dot(vec3(isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0)), isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)), isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2064) ? 0.0 : (isnan(0.0) ? _2064 : max(0.0, _2064))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2076 = 1.0;
    }
    float _2087;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2078 = dot(vec4(cbModelParam._m0[40u]), vec4(_2033, _2034, _2035, 1.0));
        _2087 = dot(vec3(isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)), isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2078) ? 0.0 : (isnan(0.0) ? _2078 : max(0.0, _2078))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2087 = 1.0;
    }
    float _2091 = (_2087 * cbModelParam._m0[1u].x) + (_2076 * (1.0 - cbModelParam._m0[1u].x));
    float _2101 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1079);
    float _2102 = isnan(_2101) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2101 : min(cbModelParam._m0[25u].z, _2101));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2149 = fma(_1325, cbModelParam._m0[13u].z, fma(_1321, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1317)) + cbModelParam._m0[13u].w;
        float _2153 = fma(_1325, cbModelParam._m0[14u].z, fma(_1321, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1317)) + cbModelParam._m0[14u].w;
        float _2157 = fma(_1325, cbModelParam._m0[15u].z, fma(_1321, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1317)) + cbModelParam._m0[15u].w;
        float _2160 = fma(_1263, cbModelParam._m0[13u].z, fma(_1262, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1261));
        float _2163 = fma(_1263, cbModelParam._m0[14u].z, fma(_1262, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1261));
        float _2166 = fma(_1263, cbModelParam._m0[15u].z, fma(_1262, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1261));
        float _2194;
        if (_2160 > 0.0)
        {
            _2194 = abs((1.0 - _2149) / _2160);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2149 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2194 = frontier_phi_17_15_ladder;
        }
        float _2365;
        if (_2163 > 0.0)
        {
            _2365 = abs((1.0 - _2153) / _2163);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2153 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2365 = frontier_phi_26_22_ladder;
        }
        float _2660;
        if (_2166 > 0.0)
        {
            _2660 = abs((1.0 - _2157) / _2166);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2157 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2660 = frontier_phi_38_33_ladder;
        }
        float _2662 = isnan(_2365) ? _2194 : (isnan(_2194) ? _2365 : min(_2194, _2365));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _2160) + _2149;
        float _2668 = (_2663 * _2163) + _2153;
        float _2669 = (_2663 * _2166) + _2157;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2670;
        float _2674 = _2670 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 > _2674) || ((_2668 < _2672) || ((_2667 < _2672) || (_2667 > _2674))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2669, cbModelParam._m0[9u].z, fma(_2668, cbModelParam._m0[9u].y, _2667 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2669, cbModelParam._m0[10u].z, fma(_2668, cbModelParam._m0[10u].y, _2667 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2669, cbModelParam._m0[11u].z, fma(_2668, cbModelParam._m0[11u].y, _2667 * cbModelParam._m0[11u].x))), _2102);
            frontier_phi_16_38_ladder = _2814.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2814.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2814.x * cbModelParam._m0[1u].y;
        }
        _2182 = frontier_phi_16_38_ladder_2;
        _2184 = frontier_phi_16_38_ladder_1;
        _2186 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1261, _1262, _1263), _2102);
        _2182 = _2170.x * cbModelParam._m0[1u].y;
        _2184 = _2170.y * cbModelParam._m0[1u].y;
        _2186 = _2170.z * cbModelParam._m0[1u].y;
    }
    float _2190 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1079);
    float _2191 = isnan(_2190) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2190 : min(cbModelParam._m0[25u].w, _2190));
    float _2280;
    float _2282;
    float _2284;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2244 = fma(_1325, cbModelParam._m0[21u].z, fma(_1321, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1317)) + cbModelParam._m0[21u].w;
        float _2248 = fma(_1325, cbModelParam._m0[22u].z, fma(_1321, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1317)) + cbModelParam._m0[22u].w;
        float _2252 = fma(_1325, cbModelParam._m0[23u].z, fma(_1321, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1317)) + cbModelParam._m0[23u].w;
        float _2255 = fma(_1263, cbModelParam._m0[21u].z, fma(_1262, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1261));
        float _2258 = fma(_1263, cbModelParam._m0[22u].z, fma(_1262, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1261));
        float _2261 = fma(_1263, cbModelParam._m0[23u].z, fma(_1262, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1261));
        float _2370;
        if (_2255 > 0.0)
        {
            _2370 = abs((1.0 - _2244) / _2255);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2244 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2370 = frontier_phi_28_24_ladder;
        }
        float _2687;
        if (_2258 > 0.0)
        {
            _2687 = abs((1.0 - _2248) / _2258);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2248 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2687 = frontier_phi_40_35_ladder;
        }
        float _3025;
        if (_2261 > 0.0)
        {
            _3025 = abs((1.0 - _2252) / _2261);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2261 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2252 + 1.0) / _2261);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3025 = frontier_phi_50_47_ladder;
        }
        float _3027 = isnan(_2687) ? _2370 : (isnan(_2370) ? _2687 : min(_2370, _2687));
        float _3028 = isnan(_3025) ? _3027 : (isnan(_3027) ? _3025 : min(_3027, _3025));
        float _3032 = (_3028 * _2255) + _2244;
        float _3033 = (_3028 * _2258) + _2248;
        float _3034 = (_3028 * _2261) + _2252;
        float _3035 = _3028 * 9.9999997473787516355514526367188e-05;
        float _3036 = (-1.0) - _3035;
        float _3038 = _3035 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3034 > _3038) || ((_3034 < _3036) || ((_3033 > _3038) || ((_3033 < _3036) || ((_3032 < _3036) || (_3032 > _3038))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3156 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3034, cbModelParam._m0[17u].z, fma(_3033, cbModelParam._m0[17u].y, _3032 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3034, cbModelParam._m0[18u].z, fma(_3033, cbModelParam._m0[18u].y, _3032 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3034, cbModelParam._m0[19u].z, fma(_3033, cbModelParam._m0[19u].y, _3032 * cbModelParam._m0[19u].x))), _2191);
            frontier_phi_25_50_ladder = _3156.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3156.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3156.x * cbModelParam._m0[1u].z;
        }
        _2280 = frontier_phi_25_50_ladder_2;
        _2282 = frontier_phi_25_50_ladder_1;
        _2284 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2264 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1261, _1262, _1263), _2191);
        _2280 = _2264.x * cbModelParam._m0[1u].z;
        _2282 = _2264.y * cbModelParam._m0[1u].z;
        _2284 = _2264.z * cbModelParam._m0[1u].z;
    }
    float _2297 = (((_1288 * _1237) + _1289) * _1253) * ((cbModelParam._m0[1u].w * (_2280 - _2182)) + _2182);
    float _2299 = (((_1288 * _1239) + _1289) * _1253) * ((cbModelParam._m0[1u].w * (_2282 - _2184)) + _2184);
    float _2301 = (((_1288 * _1240) + _1289) * _1253) * ((cbModelParam._m0[1u].w * (_2284 - _2186)) + _2186);
    float _2304 = fma(_2301, cbSceneParam._m0[89u].z, fma(_2299, cbSceneParam._m0[89u].y, _2297 * cbSceneParam._m0[89u].x));
    float _2307 = fma(_2301, cbSceneParam._m0[90u].z, fma(_2299, cbSceneParam._m0[90u].y, _2297 * cbSceneParam._m0[90u].x));
    float _2310 = fma(_2301, cbSceneParam._m0[91u].z, fma(_2299, cbSceneParam._m0[91u].y, _2297 * cbSceneParam._m0[91u].x));
    float _2344 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2348 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2352 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2356 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2357 = _2344 / _2356;
    float _2358 = _2348 / _2356;
    float _2359 = _2352 / _2356;
    float _2506;
    float _2507;
    float _2508;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2386 = ((uint(_2359 > cbSceneParam._m0[59u].y) + uint(_2359 > cbSceneParam._m0[59u].x)) + uint(_2359 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2387 = _2386 + 43u;
        uint _2395 = _2386 + 44u;
        uint _2403 = _2386 + 45u;
        uint _2411 = _2386 + 46u;
        float _2422 = fma(_2356, cbSceneParam._m0[_2387].w, fma(_2352, cbSceneParam._m0[_2387].z, fma(_2348, cbSceneParam._m0[_2387].y, _2344 * cbSceneParam._m0[_2387].x)));
        float _2426 = fma(_2356, cbSceneParam._m0[_2395].w, fma(_2352, cbSceneParam._m0[_2395].z, fma(_2348, cbSceneParam._m0[_2395].y, _2344 * cbSceneParam._m0[_2395].x)));
        float _2434 = fma(_2356, cbSceneParam._m0[_2411].w, fma(_2352, cbSceneParam._m0[_2411].z, fma(_2348, cbSceneParam._m0[_2411].y, _2344 * cbSceneParam._m0[_2411].x)));
        float _2439 = cbSceneParam._m0[33u].z * _2434;
        float _2441 = cbSceneParam._m0[33u].w * _2434;
        float _2444 = fma(_2356, cbSceneParam._m0[_2403].w, fma(_2352, cbSceneParam._m0[_2403].z, fma(_2348, cbSceneParam._m0[_2403].y, _2344 * cbSceneParam._m0[_2403].x))) / _2434;
        float _2492 = (cbSceneParam._m0[33u].x - sqrt(((_2358 * _2358) + (_2357 * _2357)) + (_2359 * _2359))) * cbSceneParam._m0[33u].y;
        float _4937 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2499 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2439 + _2422) / _2434, (_2441 + _2426) / _2434), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2441 + _2422) / _2434, (_2426 - _2439) / _2434), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2422 - _2439) / _2434, (_2426 - _2441) / _2434), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2422 - _2441) / _2434, (_2439 + _2426) / _2434), _2444), 0.0)).x), vec4(0.25)));
        _2506 = 1.0 - (_2499 * cbSceneParam._m0[34u].x);
        _2507 = 1.0 - (_2499 * cbSceneParam._m0[34u].y);
        _2508 = 1.0 - (_2499 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2506 = 1.0;
        _2507 = 1.0;
        _2508 = 1.0;
    }
    float _2572;
    float _2574;
    float _2576;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2560 = fma(_2356, cbSceneParam._m0[63u].w, fma(_2352, cbSceneParam._m0[63u].z, fma(_2348, cbSceneParam._m0[63u].y, _2344 * cbSceneParam._m0[63u].x)));
        float _2561 = fma(_2356, cbSceneParam._m0[60u].w, fma(_2352, cbSceneParam._m0[60u].z, fma(_2348, cbSceneParam._m0[60u].y, _2344 * cbSceneParam._m0[60u].x))) / _2560;
        float _2562 = fma(_2356, cbSceneParam._m0[61u].w, fma(_2352, cbSceneParam._m0[61u].z, fma(_2348, cbSceneParam._m0[61u].y, _2344 * cbSceneParam._m0[61u].x))) / _2560;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2561 >= cbSceneParam._m0[64u].x) && (_2562 >= cbSceneParam._m0[64u].y)) && (_2561 <= cbSceneParam._m0[64u].z)) && (_2562 <= cbSceneParam._m0[64u].w))
        {
            float _2700 = fma(_2356, cbSceneParam._m0[62u].w, fma(_2352, cbSceneParam._m0[62u].z, fma(_2348, cbSceneParam._m0[62u].y, _2344 * cbSceneParam._m0[62u].x))) / _2560;
            float _2704 = isnan(cbSceneParam._m0[41u].w) ? _2700 : (isnan(_2700) ? cbSceneParam._m0[41u].w : max(_2700, cbSceneParam._m0[41u].w));
            float _2747 = (cbSceneParam._m0[33u].x - sqrt(((_2358 * _2358) + (_2357 * _2357)) + (_2359 * _2359))) * cbSceneParam._m0[33u].y;
            float _4953 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
            float _2754 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2561, cbSceneParam._m0[33u].w + _2562), _2704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2561, _2562 - cbSceneParam._m0[33u].z), _2704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2561 - cbSceneParam._m0[33u].z, _2562 - cbSceneParam._m0[33u].w), _2704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2561 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2562), _2704), 0.0)).x), vec4(0.25)));
            float _2758 = 1.0 - (_2754 * cbSceneParam._m0[34u].x);
            float _2759 = 1.0 - (_2754 * cbSceneParam._m0[34u].y);
            float _2760 = 1.0 - (_2754 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2760) ? _2508 : (isnan(_2508) ? _2760 : min(_2508, _2760));
            frontier_phi_37_36_ladder_1 = isnan(_2759) ? _2507 : (isnan(_2507) ? _2759 : min(_2507, _2759));
            frontier_phi_37_36_ladder_2 = isnan(_2758) ? _2506 : (isnan(_2506) ? _2758 : min(_2506, _2758));
        }
        else
        {
            frontier_phi_37_36_ladder = _2508;
            frontier_phi_37_36_ladder_1 = _2507;
            frontier_phi_37_36_ladder_2 = _2506;
        }
        _2572 = frontier_phi_37_36_ladder_2;
        _2574 = frontier_phi_37_36_ladder_1;
        _2576 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2572 = _2506;
        _2574 = _2507;
        _2576 = _2508;
    }
    uvec4 _2581 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2583 = _2581.x * 14u;
    uint _2584 = _2583 + 13u;
    float _2591 = _1253 + (-1.0);
    float _2596 = (cbLight._m0[_2584].x * _2591) + 1.0;
    float _2597 = (cbLight._m0[_2584].y * _2591) + 1.0;
    float _2598 = (cbLight._m0[_2584].z * _2591) + 1.0;
    float _2599 = (cbLight._m0[_2584].w * _2591) + 1.0;
    uint _2600 = _2583 + 5u;
    float _2606 = isnan(1.0) ? _2597 : (isnan(_2597) ? 1.0 : min(_2597, 1.0));
    uint _2610 = _2583 + 4u;
    float _2619 = isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0));
    uint _2623 = _2583 | 1u;
    float _2634 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_1076, _1077, _1078));
    float _2637 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_1076, _1077, _1078));
    float _4989 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _5000 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2642 = (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * 0.3183098733425140380859375;
    float _2644 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * 0.3183098733425140380859375;
    float _2651 = ((cbLight._m0[_2600].x * _2606) * _2644) + (((cbLight._m0[_2610].x * _2572) * _2619) * _2642);
    float _2652 = ((_2606 * cbLight._m0[_2600].y) * _2644) + (((cbLight._m0[_2610].y * _2574) * _2619) * _2642);
    float _2653 = ((_2606 * cbLight._m0[_2600].z) * _2644) + (((cbLight._m0[_2610].z * _2576) * _2619) * _2642);
    uvec4 _2657 = floatBitsToUint(cbLight._m0[_2583 + 12u]);
    bool _2659 = _2657.x == 0u;
    float _2761;
    float _2763;
    float _2765;
    if (_2659)
    {
        _2761 = _2651;
        _2763 = _2652;
        _2765 = _2653;
    }
    else
    {
        uint _2769 = _2583 + 6u;
        float _2785 = (dot(vec3(cbLight._m0[_2583 + 2u].xyz), vec3(_1076, _1077, _1078)) * 0.5) + 0.5;
        float _2786 = _2785 * _2785;
        float _5011 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2787 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
        float _2788 = isnan(1.0) ? _2598 : (isnan(_2598) ? 1.0 : min(_2598, 1.0));
        _2761 = (((cbLight._m0[_2769].x * 0.3183098733425140380859375) * _2787) * _2788) + _2651;
        _2763 = (((cbLight._m0[_2769].y * 0.3183098733425140380859375) * _2787) * _2788) + _2652;
        _2765 = (((cbLight._m0[_2769].z * 0.3183098733425140380859375) * _2787) * _2788) + _2653;
    }
    bool _2768 = _2657.y == 0u;
    float _2823;
    float _2825;
    float _2827;
    if (_2768)
    {
        _2823 = _2761;
        _2825 = _2763;
        _2827 = _2765;
    }
    else
    {
        uint _2996 = _2583 + 7u;
        float _3012 = (dot(vec3(cbLight._m0[_2583 + 3u].xyz), vec3(_1076, _1077, _1078)) * 0.5) + 0.5;
        float _3013 = _3012 * _3012;
        float _5027 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3014 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
        float _3015 = isnan(1.0) ? _2599 : (isnan(_2599) ? 1.0 : min(_2599, 1.0));
        _2823 = (((cbLight._m0[_2996].x * 0.3183098733425140380859375) * _3014) * _3015) + _2761;
        _2825 = (((cbLight._m0[_2996].y * 0.3183098733425140380859375) * _3014) * _3015) + _2763;
        _2827 = (((cbLight._m0[_2996].z * 0.3183098733425140380859375) * _3014) * _3015) + _2765;
    }
    uint _2830 = _2583 + 8u;
    float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _1079) * 0.949999988079071044921875);
    float _2844 = _2843 * _2843;
    float _2845 = cbLight._m0[_2583].x + _1155;
    float _2846 = cbLight._m0[_2583].y + _1156;
    float _2847 = cbLight._m0[_2583].z + _1157;
    float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
    float _2852 = _2851 * _2845;
    float _2853 = _2851 * _2846;
    float _2854 = _2851 * _2847;
    float _2855 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_2583].xyz));
    float _5043 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2858 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
    float _5054 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _2859 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
    float _2860 = dot(vec3(_1076, _1077, _1078), vec3(_2852, _2853, _2854));
    float _5065 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2863 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
    float _2864 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2852, _2853, _2854));
    float _5076 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2868 = _2844 * _2844;
    float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
    float _2880 = exp2(log2(1.0 - (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) * 5.0);
    float _2881 = 0.959999978542327880859375 - _1234;
    float _2883 = 0.959999978542327880859375 - _1235;
    float _2884 = 0.959999978542327880859375 - _1236;
    float _2891 = 1.0 - _2844;
    float _2902 = (0.5 / (((_2859 * ((_2858 * _2891) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _2891) + _2844) * _2858))) * _2858;
    float _5087 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2904 = (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
    uint _2918 = _2583 + 9u;
    float _2929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _1079) * 0.949999988079071044921875);
    float _2930 = _2929 * _2929;
    float _2931 = cbLight._m0[_2623].x + _1155;
    float _2932 = cbLight._m0[_2623].y + _1156;
    float _2933 = cbLight._m0[_2623].z + _1157;
    float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
    float _2938 = _2937 * _2931;
    float _2939 = _2937 * _2932;
    float _2940 = _2937 * _2933;
    float _2941 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_2623].xyz));
    float _5098 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
    float _2944 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
    float _2945 = dot(vec3(_1076, _1077, _1078), vec3(_2938, _2939, _2940));
    float _5109 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
    float _2948 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
    float _2949 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2938, _2939, _2940));
    float _5120 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
    float _2953 = _2930 * _2930;
    float _2957 = ((_2948 * _2948) * (_2953 + (-1.0))) + 1.0;
    float _2964 = exp2(log2(1.0 - (isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0)))) * 5.0);
    float _2971 = 1.0 - _2930;
    float _2981 = (0.5 / (((_2859 * ((_2944 * _2971) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _2971) + _2930) * _2944))) * _2944;
    float _5131 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
    float _2983 = (isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0))) * (_2953 / ((_2957 * _2957) * 3.141590118408203125));
    float _2993 = (((((_2964 * _2881) + _1237) * cbLight._m0[_2918].x) * _2983) * _2606) + ((((cbLight._m0[_2830].x * _2572) * ((_2880 * _2881) + _1237)) * _2904) * _2619);
    float _2994 = (((((_2964 * _2883) + _1239) * cbLight._m0[_2918].y) * _2983) * _2606) + ((((cbLight._m0[_2830].y * _2574) * ((_2880 * _2883) + _1239)) * _2904) * _2619);
    float _2995 = (((((_2964 * _2884) + _1240) * cbLight._m0[_2918].z) * _2983) * _2606) + ((((cbLight._m0[_2830].z * _2576) * ((_2880 * _2884) + _1240)) * _2904) * _2619);
    float _3051;
    float _3053;
    float _3055;
    if (_2659)
    {
        _3051 = _2993;
        _3053 = _2994;
        _3055 = _2995;
    }
    else
    {
        uint _3057 = _2583 + 2u;
        uint _3061 = _2583 + 10u;
        float _3075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3057].w)) * _1079) * 0.949999988079071044921875);
        float _3076 = _3075 * _3075;
        float _3077 = cbLight._m0[_3057].x + _1155;
        float _3078 = cbLight._m0[_3057].y + _1156;
        float _3079 = cbLight._m0[_3057].z + _1157;
        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
        float _3084 = _3083 * _3077;
        float _3085 = _3083 * _3078;
        float _3086 = _3083 * _3079;
        float _3087 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_3057].xyz));
        float _5142 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3090 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
        float _3091 = dot(vec3(_1076, _1077, _1078), vec3(_3084, _3085, _3086));
        float _5153 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3094 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
        float _3095 = dot(vec3(cbLight._m0[_3057].xyz), vec3(_3084, _3085, _3086));
        float _5164 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        float _3099 = _3076 * _3076;
        float _3103 = ((_3094 * _3094) * (_3099 + (-1.0))) + 1.0;
        float _3110 = exp2(log2(1.0 - (isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0)))) * 5.0);
        float _3117 = 1.0 - _3076;
        float _3127 = (0.5 / (((_2859 * ((_3090 * _3117) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _3117) + _3076) * _3090))) * _3090;
        float _5175 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
        float _3129 = (isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0))) * (_3099 / ((_3103 * _3103) * 3.141590118408203125));
        float _3130 = isnan(1.0) ? _2598 : (isnan(_2598) ? 1.0 : min(_2598, 1.0));
        _3051 = (((((_3110 * _2881) + _1237) * cbLight._m0[_3061].x) * _3129) * _3130) + _2993;
        _3053 = (((((_3110 * _2883) + _1239) * cbLight._m0[_3061].y) * _3129) * _3130) + _2994;
        _3055 = (((((_3110 * _2884) + _1240) * cbLight._m0[_3061].z) * _3129) * _3130) + _2995;
    }
    float _3161;
    float _3163;
    float _3165;
    if (_2768)
    {
        _3161 = _3051;
        _3163 = _3053;
        _3165 = _3055;
    }
    else
    {
        uint _3172 = _2583 + 3u;
        uint _3176 = _2583 + 11u;
        float _3190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3172].w)) * _1079) * 0.949999988079071044921875);
        float _3191 = _3190 * _3190;
        float _3192 = cbLight._m0[_3172].x + _1155;
        float _3193 = cbLight._m0[_3172].y + _1156;
        float _3194 = cbLight._m0[_3172].z + _1157;
        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
        float _3199 = _3198 * _3192;
        float _3200 = _3198 * _3193;
        float _3201 = _3198 * _3194;
        float _3202 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_3172].xyz));
        float _5191 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
        float _3205 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
        float _3206 = dot(vec3(_1076, _1077, _1078), vec3(_3199, _3200, _3201));
        float _5202 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
        float _3209 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
        float _3210 = dot(vec3(cbLight._m0[_3172].xyz), vec3(_3199, _3200, _3201));
        float _5213 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
        float _3214 = _3191 * _3191;
        float _3218 = ((_3209 * _3209) * (_3214 + (-1.0))) + 1.0;
        float _3225 = exp2(log2(1.0 - (isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0)))) * 5.0);
        float _3232 = 1.0 - _3191;
        float _3242 = (0.5 / (((_2859 * ((_3205 * _3232) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _3232) + _3191) * _3205))) * _3205;
        float _5224 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
        float _3244 = (isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0))) * (_3214 / ((_3218 * _3218) * 3.141590118408203125));
        float _3245 = isnan(1.0) ? _2599 : (isnan(_2599) ? 1.0 : min(_2599, 1.0));
        _3161 = (((((_3225 * _2881) + _1237) * cbLight._m0[_3176].x) * _3244) * _3245) + _3051;
        _3163 = (((((_3225 * _2883) + _1239) * cbLight._m0[_3176].y) * _3244) * _3245) + _3053;
        _3165 = (((((_3225 * _2884) + _1240) * cbLight._m0[_3176].z) * _3244) * _3245) + _3055;
    }
    float _3311;
    float _3313;
    float _3315;
    float _3317;
    float _3319;
    float _3321;
    if (_2581.y == 0u)
    {
        uvec4 _3266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3267 = _3266.x;
        uint _3278 = uint((float(_3266.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1176) / _3267))) + floor(float(uint(cbSceneParam._m0[85u].x * _1175) / _3267)));
        float _3288 = (log2(_2359 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3289 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
        uint _3292 = uint(isnan(14.0) ? _3289 : (isnan(_3289) ? 14.0 : min(_3289, 14.0)));
        uvec4 _3297 = texelFetch(g_lightClusterGridBuffer, int(((_3292 << 2u) + (_3278 << 6u)) >> 2u));
        uint _3298 = _3297.x;
        uint _3299 = _3266.z;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        if (((((1u << ((_3299 >> 4u) & 15u)) + 4294967295u) & _3298) == 0u) || ((_3299 & 240u) == 0u))
        {
            _3378 = 0.0;
            _3380 = 0.0;
            _3382 = 0.0;
            _3384 = 0.0;
            _3386 = 0.0;
            _3388 = 0.0;
        }
        else
        {
            float _3379;
            float _3381;
            float _3383;
            float _3385;
            float _3387;
            float _3389;
            float _3530 = 0.0;
            float _3531 = 0.0;
            float _3532 = 0.0;
            float _3533 = 0.0;
            float _3534 = 0.0;
            float _3535 = 0.0;
            uint _3536 = 0u;
            uint _3545;
            bool _3546;
            for (;;)
            {
                _3545 = texelFetch(g_lightClassification, int((((_3292 << 5u) + (_3278 << 9u)) + (_3536 << 2u)) >> 2u)).x;
                _3546 = _3545 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3546)
                {
                    frontier_phi_71_pred = _3535;
                    frontier_phi_71_pred_1 = _3534;
                    frontier_phi_71_pred_2 = _3533;
                    frontier_phi_71_pred_3 = _3532;
                    frontier_phi_71_pred_4 = _3531;
                    frontier_phi_71_pred_5 = _3530;
                }
                else
                {
                    float _3675;
                    float _3676;
                    float _3677;
                    float _3678;
                    float _3679;
                    float _3680;
                    uint _3681;
                    _3675 = _3530;
                    _3676 = _3531;
                    _3677 = _3532;
                    _3678 = _3533;
                    _3679 = _3534;
                    _3680 = _3535;
                    _3681 = _3545;
                    float _3602;
                    float _3603;
                    float _3604;
                    float _3605;
                    float _3606;
                    float _3607;
                    for (;;)
                    {
                        uint _3685 = uint(findLSB(_3681)) + (_3536 << 5u);
                        uint _3682 = (_3681 + 4294967295u) & _3681;
                        uint _3687 = _3685 * 48u;
                        vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3687)).x, texelFetch(g_PointLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3687 + 3u)).x));
                        uint _3707 = (_3685 * 48u) + 4u;
                        vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3707)).x, texelFetch(g_PointLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3707 + 3u)).x));
                        uint _3726 = (_3685 * 48u) + 8u;
                        vec3 _3737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3726)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 2u)).x));
                        float _3741 = _3701.x - _2357;
                        float _3742 = _3701.y - _2358;
                        float _3743 = _3701.z - _2359;
                        float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                        float _3747 = inversesqrt(_3744);
                        float _3748 = _3747 * _3741;
                        float _3749 = _3747 * _3742;
                        float _3750 = _3747 * _3743;
                        float _3751 = dot(vec3(_1194, _1197, _1200), vec3(_3748, _3749, _3750));
                        float _3756 = 1.0 - (_3744 * _3701.w);
                        float _5250 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                        float _3757 = isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0));
                        float _3758 = sqrt(_3744) * _3720.w;
                        float _3761 = 1.39999997615814208984375 / (_3758 + 1.39999997615814208984375);
                        float _3762 = _3761 * _3761;
                        float _3765 = ((1.0 - _3762) * _3751) + _3762;
                        float _3768 = _3758 * _3758;
                        float _3772 = ((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3757) / ((_3768 * 0.699999988079071044921875) + 1.0);
                        float _3776 = (-0.0) - _2357;
                        float _3777 = (-0.0) - _2358;
                        float _3778 = (-0.0) - _2359;
                        float _3782 = inversesqrt(dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778)));
                        float _3783 = _3782 * _3776;
                        float _3784 = _3782 * _3777;
                        float _3785 = _3782 * _3778;
                        float _3792 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                        float _3793 = 1.0 - _1269;
                        float _3800 = sqrt(1.0 - ((1.0 - (_3793 * _3793)) * (1.0 - (_3792 * _3792))));
                        float _3801 = _3800 * _3800;
                        float _3802 = _3801 * _3801;
                        float _3803 = _3783 + _3748;
                        float _3804 = _3784 + _3749;
                        float _3805 = _3785 + _3750;
                        float _3809 = inversesqrt(dot(vec3(_3803, _3804, _3805), vec3(_3803, _3804, _3805)));
                        float _3813 = dot(vec3(_1194, _1197, _1200), vec3(_3783, _3784, _3785));
                        float _5266 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                        float _3816 = isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0));
                        float _3817 = dot(vec3(_1194, _1197, _1200), vec3(_3809 * _3803, _3809 * _3804, _3809 * _3805));
                        float _5277 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                        float _3820 = isnan(1.0) ? _5277 : (isnan(_5277) ? 1.0 : min(_5277, 1.0));
                        float _3824 = ((_3820 * _3820) * (_3802 + (-1.0))) + 1.0;
                        float _3825 = _3761 * _3801;
                        float _3826 = _3825 * _3825;
                        float _3829 = ((1.0 - _3826) * _3751) + _3826;
                        float _5288 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                        float _3830 = isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0));
                        float _3831 = 1.0 - _3801;
                        float _3841 = (0.5 / (((_3830 * ((_3816 * _3831) + _3801)) + 9.9999999392252902907785028219223e-09) + (((_3830 * _3831) + _3801) * _3816))) * _3830;
                        float _5299 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                        float _3852 = (((_3802 * 3.1415927410125732421875) * (isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0)))) / ((_3824 * _3824) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125))) * _3757;
                        _3605 = (_3772 * _3720.x) + _3678;
                        _3606 = (_3772 * _3720.y) + _3679;
                        _3607 = (_3772 * _3720.z) + _3680;
                        _3602 = (_3852 * _3737.x) + _3675;
                        _3603 = (_3852 * _3737.y) + _3676;
                        _3604 = (_3852 * _3737.z) + _3677;
                        if (_3682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3675 = _3602;
                            _3676 = _3603;
                            _3677 = _3604;
                            _3678 = _3605;
                            _3679 = _3606;
                            _3680 = _3607;
                            _3681 = _3682;
                        }
                    }
                    frontier_phi_71_pred = _3607;
                    frontier_phi_71_pred_1 = _3606;
                    frontier_phi_71_pred_2 = _3605;
                    frontier_phi_71_pred_3 = _3604;
                    frontier_phi_71_pred_4 = _3603;
                    frontier_phi_71_pred_5 = _3602;
                }
                _3389 = frontier_phi_71_pred;
                _3387 = frontier_phi_71_pred_1;
                _3385 = frontier_phi_71_pred_2;
                _3383 = frontier_phi_71_pred_3;
                _3381 = frontier_phi_71_pred_4;
                _3379 = frontier_phi_71_pred_5;
                uint _3537 = _3536 + 1u;
                if (_3537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3530 = _3379;
                    _3531 = _3381;
                    _3532 = _3383;
                    _3533 = _3385;
                    _3534 = _3387;
                    _3535 = _3389;
                    _3536 = _3537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3378 = _3379;
            _3380 = _3381;
            _3382 = _3383;
            _3384 = _3385;
            _3386 = _3387;
            _3388 = _3389;
        }
        uvec4 _3392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3393 = _3392.z;
        uint _3395 = (_3393 >> 8u) & 15u;
        float _3498;
        float _3500;
        float _3502;
        float _3504;
        float _3506;
        float _3508;
        if (((4294967295u << _3395) & _3298) == 0u)
        {
            _3498 = _3378;
            _3500 = _3380;
            _3502 = _3382;
            _3504 = _3384;
            _3506 = _3386;
            _3508 = _3388;
        }
        else
        {
            float _3523 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
            float _3524 = _3523 * _2357;
            float _3525 = _3523 * _2358;
            float _3526 = _3523 * _2359;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3395 < ((_3393 >> 12u) & 15u))
            {
                float _3499;
                float _3501;
                float _3503;
                float _3505;
                float _3507;
                float _3509;
                float _3658 = _3378;
                float _3659 = _3380;
                float _3660 = _3382;
                float _3661 = _3384;
                float _3662 = _3386;
                float _3663 = _3388;
                uint _3664 = _3395;
                uint _3673;
                bool _3674;
                for (;;)
                {
                    _3673 = texelFetch(g_lightClassification, int((((_3292 << 5u) + (_3278 << 9u)) + (_3664 << 2u)) >> 2u)).x;
                    _3674 = _3673 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3674)
                    {
                        frontier_phi_82_pred = _3663;
                        frontier_phi_82_pred_1 = _3662;
                        frontier_phi_82_pred_2 = _3661;
                        frontier_phi_82_pred_3 = _3660;
                        frontier_phi_82_pred_4 = _3659;
                        frontier_phi_82_pred_5 = _3658;
                    }
                    else
                    {
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _4159;
                        float _4160;
                        float _4161;
                        float _4162;
                        float _4163;
                        float _4164;
                        float _3879 = _3658;
                        float _3880 = _3659;
                        float _3881 = _3660;
                        float _3882 = _3661;
                        float _3883 = _3662;
                        float _3884 = _3663;
                        uint _3885 = _3673;
                        uint _3886;
                        vec4 _3911;
                        float _3912;
                        vec4 _3927;
                        vec3 _3939;
                        vec4 _3954;
                        vec4 _3969;
                        float _4015;
                        bool _4016;
                        for (;;)
                        {
                            uint _3896 = ((_3664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3885));
                            _3886 = (_3885 + 4294967295u) & _3885;
                            uint _3898 = _3896 * 40u;
                            _3911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3898 + 3u)).x));
                            _3912 = _3911.w;
                            uint _3914 = (_3896 * 40u) + 4u;
                            _3927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 3u)).x));
                            uint _3929 = (_3896 * 40u) + 8u;
                            _3939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3929 + 2u)).x));
                            uint _3941 = (_3896 * 40u) + 16u;
                            _3954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3941 + 3u)).x));
                            uint _3956 = (_3896 * 40u) + 20u;
                            _3969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 3u)).x));
                            uint _3971 = (_3896 * 40u) + 24u;
                            vec4 _3984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3971 + 3u)).x));
                            uint _3990 = (_3896 * 40u) + 28u;
                            vec4 _4003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3990 + 3u)).x));
                            _4015 = fma(_2359, _4003.z, fma(_2358, _4003.y, _4003.x * _2357)) + _4003.w;
                            _4016 = !((fma(_2359, _3984.z, fma(_2358, _3984.y, _3984.x * _2357)) + _3984.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4016)
                            {
                                float _4043 = _3911.x - _2357;
                                float _4044 = _3911.y - _2358;
                                float _4045 = _3911.z - _2359;
                                float _4046 = dot(vec3(_4043, _4044, _4045), vec3(_4043, _4044, _4045));
                                float _4049 = inversesqrt(_4046);
                                float _4050 = _4049 * _4043;
                                float _4051 = _4049 * _4044;
                                float _4052 = _4049 * _4045;
                                float _4056 = 1.0 - (_4046 / (_3912 * _3912));
                                float _5310 = isnan(0.0) ? _4056 : (isnan(_4056) ? 0.0 : max(_4056, 0.0));
                                float _4057 = isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0));
                                float _4061 = sqrt(_4046) * _3927.w;
                                float _4063 = 1.39999997615814208984375 / (_4061 + 1.39999997615814208984375);
                                float _4064 = _4063 * _4063;
                                float _4067 = ((1.0 - _4064) * dot(vec3(_4050, _4051, _4052), vec3(_1194, _1197, _1200))) + _4064;
                                float _4070 = _4061 * _4061;
                                float _4074 = (fma(_2359, _3954.z, fma(_2358, _3954.y, _3954.x * _2357)) + _3954.w) / _4015;
                                float _4075 = (fma(_2359, _3969.z, fma(_2358, _3969.y, _3969.x * _2357)) + _3969.w) / _4015;
                                float _4079 = 1.0 - dot(vec2(_4074, _4075), vec2(_4074, _4075));
                                float _5326 = isnan(0.0) ? _4079 : (isnan(_4079) ? 0.0 : max(_4079, 0.0));
                                float _4080 = isnan(1.0) ? _5326 : (isnan(_5326) ? 1.0 : min(_5326, 1.0));
                                float _4081 = _4080 * (((isnan(0.0) ? _4067 : (isnan(_4067) ? 0.0 : max(_4067, 0.0))) * _4057) / ((_4070 * 0.699999988079071044921875) + 1.0));
                                float _4093 = exp2(log2(1.0 / ((_4070 * 3.5) + 5.0)) * 0.25);
                                float _4094 = 1.0 - _1269;
                                float _4101 = sqrt(1.0 - ((1.0 - (_4094 * _4094)) * (1.0 - (_4093 * _4093))));
                                float _4102 = _4101 * _4101;
                                float _4103 = _4102 * _4102;
                                float _4104 = _4050 - _3524;
                                float _4105 = _4051 - _3525;
                                float _4106 = _4052 - _3526;
                                float _4110 = inversesqrt(dot(vec3(_4104, _4105, _4106), vec3(_4104, _4105, _4106)));
                                float _4114 = dot(vec3(_1194, _1197, _1200), vec3((-0.0) - _3524, (-0.0) - _3525, (-0.0) - _3526));
                                float _5337 = isnan(0.0) ? _4114 : (isnan(_4114) ? 0.0 : max(_4114, 0.0));
                                float _4117 = isnan(1.0) ? _5337 : (isnan(_5337) ? 1.0 : min(_5337, 1.0));
                                float _4118 = dot(vec3(_1194, _1197, _1200), vec3(_4110 * _4104, _4110 * _4105, _4110 * _4106));
                                float _5348 = isnan(0.0) ? _4118 : (isnan(_4118) ? 0.0 : max(_4118, 0.0));
                                float _4121 = isnan(1.0) ? _5348 : (isnan(_5348) ? 1.0 : min(_5348, 1.0));
                                float _4125 = ((_4121 * _4121) * (_4103 + (-1.0))) + 1.0;
                                float _4126 = _4063 * _4102;
                                float _4127 = _4126 * _4126;
                                float _4133 = ((1.0 - _4127) * dot(vec3(_1194, _1197, _1200), vec3(_4050, _4051, _4052))) + _4127;
                                float _5359 = isnan(0.0) ? _4133 : (isnan(_4133) ? 0.0 : max(_4133, 0.0));
                                float _4134 = isnan(1.0) ? _5359 : (isnan(_5359) ? 1.0 : min(_5359, 1.0));
                                float _4135 = 1.0 - _4102;
                                float _4145 = (0.5 / (((_4134 * ((_4117 * _4135) + _4102)) + 9.9999999392252902907785028219223e-09) + (((_4134 * _4135) + _4102) * _4117))) * _4134;
                                float _5370 = isnan(0.0) ? _4145 : (isnan(_4145) ? 0.0 : max(_4145, 0.0));
                                float _4155 = (_4080 * _4057) * (((_4103 * 3.1415927410125732421875) * (isnan(1.0) ? _5370 : (isnan(_5370) ? 1.0 : min(_5370, 1.0)))) / ((_4125 * _4125) * ((_4070 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4081 * _3927.z;
                                frontier_phi_88_pred_1 = _4081 * _3927.y;
                                frontier_phi_88_pred_2 = _4081 * _3927.x;
                                frontier_phi_88_pred_3 = _4155 * _3939.z;
                                frontier_phi_88_pred_4 = _4155 * _3939.y;
                                frontier_phi_88_pred_5 = _4155 * _3939.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4164 = frontier_phi_88_pred;
                            _4163 = frontier_phi_88_pred_1;
                            _4162 = frontier_phi_88_pred_2;
                            _4161 = frontier_phi_88_pred_3;
                            _4160 = frontier_phi_88_pred_4;
                            _4159 = frontier_phi_88_pred_5;
                            _3869 = _4162 + _3882;
                            _3870 = _4163 + _3883;
                            _3871 = _4164 + _3884;
                            _3866 = _4159 + _3879;
                            _3867 = _4160 + _3880;
                            _3868 = _4161 + _3881;
                            if (_3886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3879 = _3866;
                                _3880 = _3867;
                                _3881 = _3868;
                                _3882 = _3869;
                                _3883 = _3870;
                                _3884 = _3871;
                                _3885 = _3886;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3871;
                        frontier_phi_82_pred_1 = _3870;
                        frontier_phi_82_pred_2 = _3869;
                        frontier_phi_82_pred_3 = _3868;
                        frontier_phi_82_pred_4 = _3867;
                        frontier_phi_82_pred_5 = _3866;
                    }
                    _3509 = frontier_phi_82_pred;
                    _3507 = frontier_phi_82_pred_1;
                    _3505 = frontier_phi_82_pred_2;
                    _3503 = frontier_phi_82_pred_3;
                    _3501 = frontier_phi_82_pred_4;
                    _3499 = frontier_phi_82_pred_5;
                    uint _3665 = _3664 + 1u;
                    if (_3665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3658 = _3499;
                        _3659 = _3501;
                        _3660 = _3503;
                        _3661 = _3505;
                        _3662 = _3507;
                        _3663 = _3509;
                        _3664 = _3665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3505;
                frontier_phi_63_64_ladder_1 = _3509;
                frontier_phi_63_64_ladder_2 = _3507;
                frontier_phi_63_64_ladder_3 = _3503;
                frontier_phi_63_64_ladder_4 = _3501;
                frontier_phi_63_64_ladder_5 = _3499;
            }
            else
            {
                frontier_phi_63_64_ladder = _3384;
                frontier_phi_63_64_ladder_1 = _3388;
                frontier_phi_63_64_ladder_2 = _3386;
                frontier_phi_63_64_ladder_3 = _3382;
                frontier_phi_63_64_ladder_4 = _3380;
                frontier_phi_63_64_ladder_5 = _3378;
            }
            _3498 = frontier_phi_63_64_ladder_5;
            _3500 = frontier_phi_63_64_ladder_4;
            _3502 = frontier_phi_63_64_ladder_3;
            _3504 = frontier_phi_63_64_ladder;
            _3506 = frontier_phi_63_64_ladder_2;
            _3508 = frontier_phi_63_64_ladder_1;
        }
        float _3513 = isnan(1.0) ? _1253 : (isnan(_1253) ? 1.0 : min(_1253, 1.0));
        _3311 = (_3513 * _3504) + _2823;
        _3313 = (_3513 * _3506) + _2825;
        _3315 = (_3513 * _3508) + _2827;
        _3317 = ((_3498 * _1237) * _3513) + _3161;
        _3319 = ((_3500 * _1239) * _3513) + _3163;
        _3321 = ((_3502 * _1240) * _3513) + _3165;
    }
    else
    {
        _3311 = _2823;
        _3313 = _2825;
        _3315 = _2827;
        _3317 = _3161;
        _3319 = _3163;
        _3321 = _3165;
    }
    float _5386 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _5397 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _5408 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _3338 = ((isnan(1.0) ? _5386 : (isnan(_5386) ? 1.0 : min(_5386, 1.0))) * (_3311 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1253))) + ((_3317 + ((isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))) * _2091)) * cbPerFrame._m0[3u].x);
    float _3339 = ((isnan(1.0) ? _5397 : (isnan(_5397) ? 1.0 : min(_5397, 1.0))) * (_3313 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1253))) + ((_3319 + ((isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * _2091)) * cbPerFrame._m0[3u].x);
    float _3340 = ((isnan(1.0) ? _5408 : (isnan(_5408) ? 1.0 : min(_5408, 1.0))) * (_3315 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1253))) + ((_3321 + ((isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0))) * _2091)) * cbPerFrame._m0[3u].x);
    uint _3341 = _299 + 6u;
    float _3349 = _1175 / cbSceneParam._m0[86u].x;
    float _3350 = _1176 / cbSceneParam._m0[86u].y;
    vec4 _3364 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3349, _3350, (log2((isnan(cbSceneParam._m0[77u].w) ? _1098 : (isnan(_1098) ? cbSceneParam._m0[77u].w : min(_1098, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3366 = _3364.x;
    float _3367 = _3364.y;
    float _3368 = _3364.z;
    float _3369 = _3364.w;
    float _3440;
    float _3442;
    float _3444;
    float _3446;
    if (_1098 > cbSceneParam._m0[78u].w)
    {
        float _3403 = isnan(_1098) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1098 : min(cbSceneParam._m0[80u].w, _1098));
        float _3404 = _3403 / _1098;
        float _3415 = _3404 * _1148;
        float _3416 = _1149 * _3404;
        float _3417 = (-0.0) - _3416;
        float _3418 = _3404 * _1150;
        float _3420 = (cbSceneParam._m0[77u].w * _3417) / _3403;
        float _3421 = _3420 + cbSceneParam._m0[79u].w;
        float _3422 = cbSceneParam._m0[79u].w - _3416;
        float _3428 = sqrt(((_3415 * _3415) + (_3416 * _3416)) + (_3418 * _3418));
        float _3431 = (1.0 - (cbSceneParam._m0[77u].w / _3403)) * _3428;
        float _3436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3615;
        if (abs((_3417 - _3420) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3615 = ((((_3421 > 0.0) ? exp2(_3436 * _3421) : (2.0 - exp2(_3438 * _3421))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3431;
        }
        else
        {
            float _3559 = 1.0 / cbSceneParam._m0[80u].x;
            float _3560 = isnan(_3422) ? _3421 : (isnan(_3421) ? _3422 : max(_3421, _3422));
            float _3561 = isnan(_3422) ? _3421 : (isnan(_3421) ? _3422 : min(_3421, _3422));
            float _3570 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : min(_3560, 0.0));
            float _3571 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : min(_3561, 0.0));
            _3615 = ((abs(_3428 / _3417) * cbSceneParam._m0[80u].y) * ((((_3570 - _3571) * 2.0) - ((exp2(_3436 * (isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0)))) - exp2(_3436 * (isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))))) * _3559)) - ((exp2(_3438 * _3570) - exp2(_3438 * _3571)) * _3559))) + (_3431 * cbSceneParam._m0[80u].z);
        }
        vec4 _3617 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3349, _3350, 1.0), 0.0);
        float _3626 = exp2((_3615 * (-1.44269502162933349609375)) * (1.0 - _3617.w));
        float _3627 = log2(_3626);
        float _3643 = log2(_3369);
        _3440 = (exp2(_3643 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3627 * cbSceneParam._m0[78u].x)) * _3617.x) / cbSceneParam._m0[78u].x)) + _3366;
        _3442 = (exp2(_3643 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3627 * cbSceneParam._m0[78u].y)) * _3617.y) / cbSceneParam._m0[78u].y)) + _3367;
        _3444 = (exp2(_3643 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3627 * cbSceneParam._m0[78u].z)) * _3617.z) / cbSceneParam._m0[78u].z)) + _3368;
        _3446 = _3626 * _3369;
    }
    else
    {
        _3440 = _3366;
        _3442 = _3367;
        _3444 = _3368;
        _3446 = _3369;
    }
    bool _3653;
    vec4 _3456;
    vec4 _3478;
    float _3480;
    float _3484;
    float _3485;
    float _3486;
    float _3487;
    bool _3497;
    for (;;)
    {
        _3456 = cbMatDynParam._m0[0u];
        float _3458 = roundEven(_3456.y);
        bool _3459 = _3458 == 3.0;
        float _3460 = log2(_3446);
        float _3467 = exp2(_3460 * cbSceneParam._m0[78u].x) * _3338;
        float _3468 = exp2(_3460 * cbSceneParam._m0[78u].y) * _3339;
        float _3469 = exp2(_3460 * cbSceneParam._m0[78u].z) * _3340;
        float _3476 = _1164 + (-0.5);
        _3478 = cbMtdParam._m0[1u];
        _3480 = _3478.y * _3476;
        float _3483 = (_3458 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3484 = _3483 * (_3459 ? _3467 : (_3467 + (cbSceneParam._m0[72u].w * _3440)));
        _3485 = _3483 * (_3459 ? _3468 : (_3468 + (cbSceneParam._m0[72u].w * _3442)));
        _3486 = _3483 * (_3459 ? _3469 : (_3469 + (cbSceneParam._m0[72u].w * _3444)));
        _3487 = _3476 * 0.999000012874603271484375;
        _3497 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3497)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3487) < 0.5)
            {
                _3653 = true;
                break;
            }
        }
        uint _3594 = _1213 + uint(_3456.w);
        if ((cbInstanceData._m0[_3594].w < 1.0) && ((cbInstanceData._m0[_3594].w + _3487) < 0.5))
        {
            _3653 = true;
            break;
        }
        if ((_3480 + 1.0) < _3478.x)
        {
            _3653 = true;
            break;
        }
        _3653 = false;
        break;
    }
    float _3857;
    if (_3653)
    {
        discard_state = true;
        _3857 = 0.0;
    }
    else
    {
        _3857 = cbInstanceData._m0[_3341].w;
    }
    SV_Target.x = _3484;
    SV_Target.y = _3485;
    SV_Target.z = _3486;
    SV_Target.w = _3857;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3341].w;
    discard_exit();
}


