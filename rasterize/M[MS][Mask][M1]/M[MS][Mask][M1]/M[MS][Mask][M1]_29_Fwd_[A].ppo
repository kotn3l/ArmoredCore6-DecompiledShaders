#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1505;
float _3885;
float _3886;
float _3887;
float _3888;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3897 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3908 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3919 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3930 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _483 = (_341.x * cbMtdParam._m0[9u].x) * ((_473 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372);
    float _484 = (_341.y * cbMtdParam._m0[9u].y) * ((_473 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373);
    float _485 = (_341.z * cbMtdParam._m0[9u].z) * ((_473 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374);
    float _489 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _483;
    float _492 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _484;
    float _495 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _485;
    float _503 = (((_483 - _489) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) + _489) * 4.55000019073486328125;
    float _505 = (((_484 - _492) * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) + _492) * 4.55000019073486328125;
    float _507 = (((_485 - _495) * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) + _495) * 4.55000019073486328125;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    float _582 = ((_552.z - _573) * _473) + _573;
    float _585 = ((((_552.x - _571) * _473) + _571) * 2.0) + (-1.0);
    float _586 = ((((_552.y - _572) * _473) + _572) * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3941 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _592 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _624 = (_585 + ((((_525.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_612.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _625 = (_586 + ((((_525.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_612.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _628 = fma(_592, _254, fma(_625, _261, _624 * _247));
    float _631 = fma(_592, _255, fma(_625, _262, _624 * _248));
    float _634 = fma(_592, _256, fma(_625, _263, _624 * _249));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _677 = (cbMtdParam._m0[19u].x + dot(vec4(_638 * _628, _638 * _631, _638 * _634, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_667 - _668) * cbMtdParam._m0[24u].z) + _668) * cbMtdParam._m0[21u].z);
    float _3952 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _680 = (-0.0) - cbMtdParam._m0[24u].x;
    float _682 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
    float _690 = _678 - ((_678 * TEXCOORD_8.x) * _683);
    float _691 = _678 - ((_678 * TEXCOORD_8.y) * _683);
    float _692 = _678 - ((_678 * TEXCOORD_8.z) * _683);
    float _699 = (_690 * (cbMtdParam._m0[17u].x - _503)) + _503;
    float _700 = (_691 * (cbMtdParam._m0[17u].y - _505)) + _505;
    float _701 = (_692 * (cbMtdParam._m0[17u].z - _507)) + _507;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _715 = _713.x;
    float _716 = 1.0 - _715;
    float _742 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_715 - _716) * cbMtdParam._m0[24u].w) + _716) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3973 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _743 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _751 = ((((cbMtdParam._m0[10u].x - _699) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _743) + _699;
    float _752 = ((((cbMtdParam._m0[10u].y - _700) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _743) + _700;
    float _753 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _701)) * _743) + _701;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _781 = _779.x;
    float _798 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _781) * _473) + _781;
    float _802 = ((_765.x - _798) * cbMtdParam._m0[19u].z) + _798;
    float _804 = _802 - (_802 * _690);
    float _806 = _804 - (_804 * _743);
    float _811 = (((_525.z - _582) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _582;
    float _815 = ((_612.z - _811) * cbMtdParam._m0[19u].w) + _811;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _836 = (_829.x * 2.0) + (-1.0);
    float _837 = (_829.y * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _3984 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _846 = ((_829.z - _815) * _690) + _815;
    float _849 = ((cbMtdParam._m0[23u].x - _846) * _743) + _846;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _876 = (_870.x * 2.0) + (-1.0);
    float _877 = (_870.y * 2.0) + (-1.0);
    float _878 = dot(vec2(_876, _877), vec2(_876, _877));
    float _3995 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) - _592) * _692) + _592;
    float _896 = (((_836 - _624) * _690) + _624) + (cbMtdParam._m0[21u].x * _624);
    float _897 = (((_837 - _625) * _691) + _625) + (cbMtdParam._m0[21u].x * _625);
    float _908 = (((_876 - _896) + (_896 * cbMtdParam._m0[22u].z)) * _743) + _896;
    float _909 = (((_877 - _897) + (_897 * cbMtdParam._m0[22u].z)) * _743) + _897;
    float _910 = (_743 * (sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) - _893)) + _893;
    float _912 = cbMtdParam._m0[22u].x + _612.w;
    float _915 = fma(_910, _254, fma(_909, _261, _908 * _247));
    float _918 = fma(_910, _255, fma(_909, _262, _908 * _248));
    float _921 = fma(_910, _256, fma(_909, _263, _908 * _249));
    float _925 = inversesqrt(dot(vec3(_915, _918, _921), vec3(_915, _918, _921)));
    float _926 = _925 * _915;
    float _927 = _925 * _918;
    float _928 = _925 * _921;
    float _4006 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _929 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4028 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4039 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4050 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4061 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _934 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _948 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _998 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _988);
    float _999 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _988);
    float _1000 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _988);
    float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
    float _1005 = _998 * _1004;
    float _1006 = _999 * _1004;
    float _1007 = _1000 * _1004;
    vec4 _1012 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1014 = _1012.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1186 = sqrt(((_998 * _998) + (_999 * _999)) + (_1000 * _1000));
        float _1192 = (cbMatDynParam._m0[5u].x * _1186) + cbMatDynParam._m0[5u].y;
        float _4072 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1197 = (cbMatDynParam._m0[5u].z * _1186) + cbMatDynParam._m0[5u].w;
        float _4083 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) - _1193)) + _1193) < ((_1014 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1025 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1026 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1044 = fma(_928, cbSceneParam._m0[5u].z, fma(_927, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _926));
    float _1047 = fma(_928, cbSceneParam._m0[6u].z, fma(_927, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _926));
    float _1050 = fma(_928, cbSceneParam._m0[7u].z, fma(_927, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _926));
    uint _1063 = _285 + 9u;
    uint _1064 = _1063 + uint(cbMatDynParam._m0[0u].w);
    float _1070 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1064].x;
    float _1071 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1064].y;
    float _1072 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_1064].z;
    float _4094 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1076 = 1.0 - _934;
    float _1077 = _1073 * _1076;
    float _1078 = _1074 * _1076;
    float _1079 = _1075 * _1076;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _934;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _934;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _934;
    float _1087 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    vec4 _1099 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1025, cbSceneParam._m0[86u].y * _1026));
    float _1103 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * TEXCOORD_5.w) * _1099.x;
    float _1104 = dot(vec3(_926, _927, _928), vec3(_1005, _1006, _1007));
    float _1107 = _1104 * 2.0;
    float _1111 = (_1107 * _926) - _1005;
    float _1112 = (_1107 * _927) - _1006;
    float _1113 = (_1107 * _928) - _1007;
    float _1117 = abs(dot(vec3(_1005, _1006, _1007), vec3(_926, _927, _928)));
    float _4127 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1119 = sqrt(_929);
    float _1132 = exp2((_1119 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1119 * 3.0));
    float _1138 = (1.0 - _1132) * ((_1119 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1139 = _1132 * _1119;
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1504;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1229 = fma(_1175, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167));
        float _1233 = fma(_1175, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167));
        float _1237 = fma(_1175, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167));
        float _1262 = _1167 + _926;
        float _1263 = _1171 + _927;
        float _1264 = _1175 + _928;
        float _1274 = fma(_1264, cbModelParam._m0[26u].z, fma(_1263, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1262)) - _1229;
        float _1275 = fma(_1264, cbModelParam._m0[27u].z, fma(_1263, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1262)) - _1233;
        float _1276 = fma(_1264, cbModelParam._m0[28u].z, fma(_1263, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1262)) - _1237;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1229 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1233 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[34u].z) + ((((((_1237 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1332 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1298.x + (-0.5));
        float _1334 = _1332 * (_1298.y + (-0.5));
        float _1335 = _1332 * (_1298.z + (-0.5));
        float _1342 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1305.x + (-0.5));
        float _1344 = _1342 * (_1305.y + (-0.5));
        float _1345 = _1342 * (_1305.z + (-0.5));
        float _1352 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1312.x + (-0.5));
        float _1354 = _1352 * (_1312.y + (-0.5));
        float _1355 = _1352 * (_1312.z + (-0.5));
        float _1362 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1319.x + (-0.5));
        float _1364 = _1362 * (_1319.y + (-0.5));
        float _1365 = _1362 * (_1319.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1386 = (dot(vec3(_926, _927, _928), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1396 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4175 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1398 + 1.0))) + _1403) * _1366;
        float _1413 = _1334 * 0.5;
        float _1414 = _1344 * 0.5;
        float _1415 = _1354 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_926, _927, _928), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4208 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1440 + 1.0))) + _1445) * _1367;
        float _1455 = _1335 * 0.5;
        float _1456 = _1345 * 0.5;
        float _1457 = _1355 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_926, _927, _928), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4241 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1482 + 1.0))) + _1487) * _1368;
        _1504 = _1335;
        _1506 = _1334;
        _1507 = _1333;
        _1508 = _1345;
        _1509 = _1344;
        _1510 = _1343;
        _1511 = _1355;
        _1512 = _1354;
        _1513 = _1353;
        _1514 = _1368;
        _1515 = _1367;
        _1516 = _1366;
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1505;
        _1506 = _1505;
        _1507 = _1505;
        _1508 = _1505;
        _1509 = _1505;
        _1510 = _1505;
        _1511 = _1505;
        _1512 = _1505;
        _1513 = _1505;
        _1514 = _1505;
        _1515 = _1505;
        _1516 = _1505;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1547 = fma(_1175, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167));
        float _1551 = fma(_1175, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167));
        float _1555 = fma(_1175, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167));
        float _1578 = _1167 + _926;
        float _1579 = _1171 + _927;
        float _1580 = _1175 + _928;
        float _1590 = fma(_1580, cbModelParam._m0[30u].z, fma(_1579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1578)) - _1547;
        float _1591 = fma(_1580, cbModelParam._m0[31u].z, fma(_1579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1578)) - _1551;
        float _1592 = fma(_1580, cbModelParam._m0[32u].z, fma(_1579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1578)) - _1555;
        float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
        float _1609 = ((_1596 * _1590) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1547 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1596 * _1591) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1551 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1596 * _1592) / cbModelParam._m0[35u].z) + ((((((_1555 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        float _1646 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1613.x + (-0.5));
        float _1648 = _1646 * (_1613.y + (-0.5));
        float _1649 = _1646 * (_1613.z + (-0.5));
        float _1656 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1620.x + (-0.5));
        float _1658 = _1656 * (_1620.y + (-0.5));
        float _1659 = _1656 * (_1620.z + (-0.5));
        float _1666 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1627.x + (-0.5));
        float _1668 = _1666 * (_1627.y + (-0.5));
        float _1669 = _1666 * (_1627.z + (-0.5));
        float _1676 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1634.x + (-0.5));
        float _1678 = _1676 * (_1634.y + (-0.5));
        float _1679 = _1676 * (_1634.z + (-0.5));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = _1647 * 0.5;
        float _1684 = _1657 * 0.5;
        float _1685 = _1667 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_926, _927, _928), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4304 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1710 + 1.0))) + _1715) * _1680;
        float _1725 = _1648 * 0.5;
        float _1726 = _1658 * 0.5;
        float _1727 = _1668 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_926, _927, _928), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4337 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1752 + 1.0))) + _1757) * _1681;
        float _1767 = _1649 * 0.5;
        float _1768 = _1659 * 0.5;
        float _1769 = _1669 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_926, _927, _928), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4370 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1794 + 1.0))) + _1799) * _1682;
        _1816 = _1649;
        _1817 = _1648;
        _1818 = _1647;
        _1819 = _1659;
        _1820 = _1658;
        _1821 = _1657;
        _1822 = _1669;
        _1823 = _1668;
        _1824 = _1667;
        _1825 = _1682;
        _1826 = _1681;
        _1827 = _1680;
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
    }
    else
    {
        _1816 = _1505;
        _1817 = _1505;
        _1818 = _1505;
        _1819 = _1505;
        _1820 = _1505;
        _1821 = _1505;
        _1822 = _1505;
        _1823 = _1505;
        _1824 = _1505;
        _1825 = _1505;
        _1826 = _1505;
        _1827 = _1505;
        _1828 = 0.0;
        _1829 = 0.0;
        _1830 = 0.0;
    }
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1517)) + _1517;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1518)) + _1518;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1519)) + _1519;
    float _1863 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1840));
    float _1884 = _1111 * 0.5;
    float _1885 = _1112 * 0.5;
    float _1886 = _1113 * 0.5;
    float _1887 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1890 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1893 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1927;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1900 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1504, _1508, _1511, _1514));
        float _1904 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1908 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1915 = dot(vec4(cbModelParam._m0[39u]), vec4(_1884, _1885, _1886, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1938;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1929 = dot(vec4(cbModelParam._m0[40u]), vec4(_1884, _1885, _1886, 1.0));
        _1938 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1938 = 1.0;
    }
    float _1942 = (_1938 * cbModelParam._m0[1u].x) + (_1927 * (1.0 - cbModelParam._m0[1u].x));
    float _1952 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1952 : min(cbModelParam._m0[25u].z, _1952));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2001 = fma(_1175, cbModelParam._m0[13u].z, fma(_1171, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1167)) + cbModelParam._m0[13u].w;
        float _2005 = fma(_1175, cbModelParam._m0[14u].z, fma(_1171, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1167)) + cbModelParam._m0[14u].w;
        float _2009 = fma(_1175, cbModelParam._m0[15u].z, fma(_1171, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1167)) + cbModelParam._m0[15u].w;
        float _2012 = fma(_1113, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111));
        float _2015 = fma(_1113, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111));
        float _2018 = fma(_1113, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111));
        float _2046;
        if (_2012 > 0.0)
        {
            _2046 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2046 = frontier_phi_17_15_ladder;
        }
        float _2249;
        if (_2015 > 0.0)
        {
            _2249 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2249 = frontier_phi_26_22_ladder;
        }
        float _2503;
        if (_2018 > 0.0)
        {
            _2503 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2503 = frontier_phi_38_33_ladder;
        }
        float _2505 = isnan(_2249) ? _2046 : (isnan(_2046) ? _2249 : min(_2046, _2249));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _2012) + _2001;
        float _2511 = (_2506 * _2015) + _2005;
        float _2512 = (_2506 * _2018) + _2009;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2513;
        float _2517 = _2513 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 > _2517) || ((_2511 < _2515) || ((_2510 < _2515) || (_2510 > _2517))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2512, cbModelParam._m0[9u].z, fma(_2511, cbModelParam._m0[9u].y, _2510 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2512, cbModelParam._m0[10u].z, fma(_2511, cbModelParam._m0[10u].y, _2510 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2512, cbModelParam._m0[11u].z, fma(_2511, cbModelParam._m0[11u].y, _2510 * cbModelParam._m0[11u].x))), _1953);
            frontier_phi_16_38_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2034 = frontier_phi_16_38_ladder_2;
        _2036 = frontier_phi_16_38_ladder_1;
        _2038 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1111, _1112, _1113), _1953);
        _2034 = _2022.x * cbModelParam._m0[1u].y;
        _2036 = _2022.y * cbModelParam._m0[1u].y;
        _2038 = _2022.z * cbModelParam._m0[1u].y;
    }
    float _2042 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2042 : min(cbModelParam._m0[25u].w, _2042));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2097 = fma(_1175, cbModelParam._m0[21u].z, fma(_1171, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1167)) + cbModelParam._m0[21u].w;
        float _2101 = fma(_1175, cbModelParam._m0[22u].z, fma(_1171, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1167)) + cbModelParam._m0[22u].w;
        float _2105 = fma(_1175, cbModelParam._m0[23u].z, fma(_1171, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1167)) + cbModelParam._m0[23u].w;
        float _2108 = fma(_1113, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111));
        float _2111 = fma(_1113, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111));
        float _2114 = fma(_1113, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111));
        float _2254;
        if (_2108 > 0.0)
        {
            _2254 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2254 = frontier_phi_28_24_ladder;
        }
        float _2530;
        if (_2111 > 0.0)
        {
            _2530 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2530 = frontier_phi_40_35_ladder;
        }
        float _2743;
        if (_2114 > 0.0)
        {
            _2743 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2743 = frontier_phi_49_46_ladder;
        }
        float _2745 = isnan(_2530) ? _2254 : (isnan(_2254) ? _2530 : min(_2254, _2530));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _2108) + _2097;
        float _2751 = (_2746 * _2111) + _2101;
        float _2752 = (_2746 * _2114) + _2105;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _2043);
            frontier_phi_25_49_ladder = _2951.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2951.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2951.x * cbModelParam._m0[1u].z;
        }
        _2133 = frontier_phi_25_49_ladder_2;
        _2135 = frontier_phi_25_49_ladder_1;
        _2137 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1111, _1112, _1113), _2043);
        _2133 = _2117.x * cbModelParam._m0[1u].z;
        _2135 = _2117.y * cbModelParam._m0[1u].z;
        _2137 = _2117.z * cbModelParam._m0[1u].z;
    }
    float _2150 = (((_1138 * _1087) + _1139) * _1103) * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2152 = (((_1138 * _1089) + _1139) * _1103) * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2154 = (((_1138 * _1090) + _1139) * _1103) * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2157 = fma(_2154, cbSceneParam._m0[89u].z, fma(_2152, cbSceneParam._m0[89u].y, _2150 * cbSceneParam._m0[89u].x));
    float _2160 = fma(_2154, cbSceneParam._m0[90u].z, fma(_2152, cbSceneParam._m0[90u].y, _2150 * cbSceneParam._m0[90u].x));
    float _2163 = fma(_2154, cbSceneParam._m0[91u].z, fma(_2152, cbSceneParam._m0[91u].y, _2150 * cbSceneParam._m0[91u].x));
    uvec4 _2173 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2175 = _2173.x * 14u;
    uint _2176 = _2175 + 13u;
    float _2183 = _1103 + (-1.0);
    float _2188 = (cbLight._m0[_2176].x * _2183) + 1.0;
    float _2189 = (cbLight._m0[_2176].y * _2183) + 1.0;
    float _2190 = (cbLight._m0[_2176].z * _2183) + 1.0;
    float _2191 = (cbLight._m0[_2176].w * _2183) + 1.0;
    uint _2192 = _2175 + 5u;
    float _2198 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2202 = _2175 + 4u;
    float _2208 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2212 = _2175 | 1u;
    float _2223 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_926, _927, _928));
    float _2226 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_926, _927, _928));
    float _4506 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _4517 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2231 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2233 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2240 = ((cbLight._m0[_2192].x * _2198) * _2233) + ((cbLight._m0[_2202].x * _2208) * _2231);
    float _2241 = ((_2198 * cbLight._m0[_2192].y) * _2233) + ((_2208 * cbLight._m0[_2202].y) * _2231);
    float _2242 = ((_2198 * cbLight._m0[_2192].z) * _2233) + ((_2208 * cbLight._m0[_2202].z) * _2231);
    uvec4 _2246 = floatBitsToUint(cbLight._m0[_2175 + 12u]);
    bool _2248 = _2246.x == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2248)
    {
        _2259 = _2240;
        _2261 = _2241;
        _2263 = _2242;
    }
    else
    {
        uint _2267 = _2175 + 6u;
        float _2283 = (dot(vec3(cbLight._m0[_2175 + 2u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4528 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2286 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2259 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2240;
        _2261 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2241;
        _2263 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2242;
    }
    bool _2266 = _2246.y == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2266)
    {
        _2304 = _2259;
        _2306 = _2261;
        _2308 = _2263;
    }
    else
    {
        uint _2474 = _2175 + 7u;
        float _2490 = (dot(vec3(cbLight._m0[_2175 + 3u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4544 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2493 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2304 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2259;
        _2306 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2261;
        _2308 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2263;
    }
    uint _2311 = _2175 + 8u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _929) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2175].x + _1005;
    float _2327 = cbLight._m0[_2175].y + _1006;
    float _2328 = cbLight._m0[_2175].z + _1007;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2175].xyz));
    float _4560 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _4571 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _2340 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2341 = dot(vec3(_926, _927, _928), vec3(_2333, _2334, _2335));
    float _4582 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2333, _2334, _2335));
    float _4593 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2325 * _2325;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
    float _2362 = 0.959999978542327880859375 - _1084;
    float _2364 = 0.959999978542327880859375 - _1085;
    float _2365 = 0.959999978542327880859375 - _1086;
    float _2372 = 1.0 - _2325;
    float _2383 = (0.5 / (((_2340 * ((_2339 * _2372) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2372) + _2325) * _2339))) * _2339;
    float _4604 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    uint _2396 = _2175 + 9u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _929) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2212].x + _1005;
    float _2410 = cbLight._m0[_2212].y + _1006;
    float _2411 = cbLight._m0[_2212].z + _1007;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2212].xyz));
    float _4615 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2423 = dot(vec3(_926, _927, _928), vec3(_2416, _2417, _2418));
    float _4626 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2416, _2417, _2418));
    float _4637 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2408 * _2408;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
    float _2449 = 1.0 - _2408;
    float _2459 = (0.5 / (((_2340 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2449) + _2408) * _2422))) * _2422;
    float _4648 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    float _2471 = (((((_2442 * _2362) + _1087) * cbLight._m0[_2396].x) * _2461) * _2198) + (((((_2361 * _2362) + _1087) * cbLight._m0[_2311].x) * _2385) * _2208);
    float _2472 = (((((_2442 * _2364) + _1089) * cbLight._m0[_2396].y) * _2461) * _2198) + (((((_2361 * _2364) + _1089) * cbLight._m0[_2311].y) * _2385) * _2208);
    float _2473 = (((((_2442 * _2365) + _1090) * cbLight._m0[_2396].z) * _2461) * _2198) + (((((_2361 * _2365) + _1090) * cbLight._m0[_2311].z) * _2385) * _2208);
    float _2535;
    float _2537;
    float _2539;
    if (_2248)
    {
        _2535 = _2471;
        _2537 = _2472;
        _2539 = _2473;
    }
    else
    {
        uint _2541 = _2175 + 2u;
        uint _2545 = _2175 + 10u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _929) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _1005;
        float _2562 = cbLight._m0[_2541].y + _1006;
        float _2563 = cbLight._m0[_2541].z + _1007;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2541].xyz));
        float _4659 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2575 = dot(vec3(_926, _927, _928), vec3(_2568, _2569, _2570));
        float _4670 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4681 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2340 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2601) + _2560) * _2574))) * _2574;
        float _4692 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2535 = (((((_2594 * _2362) + _1087) * cbLight._m0[_2545].x) * _2613) * _2614) + _2471;
        _2537 = (((((_2594 * _2364) + _1089) * cbLight._m0[_2545].y) * _2613) * _2614) + _2472;
        _2539 = (((((_2594 * _2365) + _1090) * cbLight._m0[_2545].z) * _2613) * _2614) + _2473;
    }
    float _2649;
    float _2651;
    float _2653;
    if (_2266)
    {
        _2649 = _2535;
        _2651 = _2537;
        _2653 = _2539;
    }
    else
    {
        uint _2660 = _2175 + 3u;
        uint _2664 = _2175 + 11u;
        float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2660].w)) * _929) * 0.949999988079071044921875);
        float _2679 = _2678 * _2678;
        float _2680 = cbLight._m0[_2660].x + _1005;
        float _2681 = cbLight._m0[_2660].y + _1006;
        float _2682 = cbLight._m0[_2660].z + _1007;
        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
        float _2687 = _2686 * _2680;
        float _2688 = _2686 * _2681;
        float _2689 = _2686 * _2682;
        float _2690 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2660].xyz));
        float _4708 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2694 = dot(vec3(_926, _927, _928), vec3(_2687, _2688, _2689));
        float _4719 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2698 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_2687, _2688, _2689));
        float _4730 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2702 = _2679 * _2679;
        float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
        float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0);
        float _2720 = 1.0 - _2679;
        float _2730 = (0.5 / (((_2340 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2720) + _2679) * _2693))) * _2693;
        float _4741 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2649 = (((((_2713 * _2362) + _1087) * cbLight._m0[_2664].x) * _2732) * _2733) + _2535;
        _2651 = (((((_2713 * _2364) + _1089) * cbLight._m0[_2664].y) * _2732) * _2733) + _2537;
        _2653 = (((((_2713 * _2365) + _1090) * cbLight._m0[_2664].z) * _2732) * _2733) + _2539;
    }
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_2173.y == 0u)
    {
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2808;
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2808;
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2808;
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.x;
        uint _2835 = uint((float(_2823.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1026) / _2824))) + floor(float(uint(cbSceneParam._m0[85u].x * _1025) / _2824)));
        float _2845 = (log2(_2811 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2846 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        uint _2849 = uint(isnan(14.0) ? _2846 : (isnan(_2846) ? 14.0 : min(_2846, 14.0)));
        uvec4 _2854 = texelFetch(g_lightClusterGridBuffer, int(((_2849 << 2u) + (_2835 << 6u)) >> 2u));
        uint _2855 = _2854.x;
        uint _2856 = _2823.z;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((((1u << ((_2856 >> 4u) & 15u)) + 4294967295u) & _2855) == 0u) || ((_2856 & 240u) == 0u))
        {
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
        }
        else
        {
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            uint _3114 = 0u;
            uint _3123;
            bool _3124;
            for (;;)
            {
                _3123 = texelFetch(g_lightClassification, int((((_2849 << 5u) + (_2835 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                _3124 = _3123 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3124)
                {
                    frontier_phi_66_pred = _3108;
                    frontier_phi_66_pred_1 = _3113;
                    frontier_phi_66_pred_2 = _3112;
                    frontier_phi_66_pred_3 = _3111;
                    frontier_phi_66_pred_4 = _3110;
                    frontier_phi_66_pred_5 = _3109;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3123;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3114 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _2809;
                        float _3320 = _3279.y - _2810;
                        float _3321 = _3279.z - _2811;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_1044, _1047, _1050), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4767 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _2809;
                        float _3355 = (-0.0) - _2810;
                        float _3356 = (-0.0) - _2811;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3371 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3372 = 1.0 - _1119;
                        float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                        float _3380 = _3379 * _3379;
                        float _3381 = _3380 * _3380;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3384 = _3363 + _3328;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3392 = dot(vec3(_1044, _1047, _1050), vec3(_3361, _3362, _3363));
                        float _4783 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3396 = dot(vec3(_1044, _1047, _1050), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                        float _4794 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                        float _3404 = _3339 * _3380;
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3329) + _3405;
                        float _4805 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3410 = 1.0 - _3380;
                        float _3420 = (0.5 / (((_3409 * ((_3395 * _3410) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3380) * _3395))) * _3409;
                        float _4816 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3431 = (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) / ((_3403 * _3403) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3183 = (_3350 * _3298.x) + _3256;
                        _3184 = (_3350 * _3298.y) + _3257;
                        _3185 = (_3350 * _3298.z) + _3258;
                        _3180 = (_3431 * _3315.x) + _3253;
                        _3181 = (_3431 * _3315.y) + _3254;
                        _3182 = (_3431 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_66_pred = _3180;
                    frontier_phi_66_pred_1 = _3185;
                    frontier_phi_66_pred_2 = _3184;
                    frontier_phi_66_pred_3 = _3183;
                    frontier_phi_66_pred_4 = _3182;
                    frontier_phi_66_pred_5 = _3181;
                }
                _2957 = frontier_phi_66_pred;
                _2967 = frontier_phi_66_pred_1;
                _2965 = frontier_phi_66_pred_2;
                _2963 = frontier_phi_66_pred_3;
                _2961 = frontier_phi_66_pred_4;
                _2959 = frontier_phi_66_pred_5;
                uint _3115 = _3114 + 1u;
                if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3108 = _2957;
                    _3109 = _2959;
                    _3110 = _2961;
                    _3111 = _2963;
                    _3112 = _2965;
                    _3113 = _2967;
                    _3114 = _3115;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
        }
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.z;
        uint _2973 = (_2971 >> 8u) & 15u;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((4294967295u << _2973) & _2855) == 0u)
        {
            _3076 = _2956;
            _3078 = _2958;
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
            _3086 = _2966;
        }
        else
        {
            float _3101 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
            float _3102 = _3101 * _2809;
            float _3103 = _3101 * _2810;
            float _3104 = _3101 * _2811;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2973 < ((_2971 >> 12u) & 15u))
            {
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3236 = _2956;
                float _3237 = _2958;
                float _3238 = _2960;
                float _3239 = _2962;
                float _3240 = _2964;
                float _3241 = _2966;
                uint _3242 = _2973;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2849 << 5u) + (_2835 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3252)
                    {
                        frontier_phi_77_pred = _3241;
                        frontier_phi_77_pred_1 = _3240;
                        frontier_phi_77_pred_2 = _3239;
                        frontier_phi_77_pred_3 = _3238;
                        frontier_phi_77_pred_4 = _3237;
                        frontier_phi_77_pred_5 = _3236;
                    }
                    else
                    {
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        uint _3464 = _3251;
                        uint _3465;
                        vec4 _3490;
                        float _3491;
                        vec4 _3506;
                        vec3 _3518;
                        vec4 _3533;
                        vec4 _3548;
                        float _3594;
                        bool _3595;
                        for (;;)
                        {
                            uint _3475 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3464));
                            _3465 = (_3464 + 4294967295u) & _3464;
                            uint _3477 = _3475 * 40u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3491 = _3490.w;
                            uint _3493 = (_3475 * 40u) + 4u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3475 * 40u) + 8u;
                            _3518 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x));
                            uint _3520 = (_3475 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3475 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3475 * 40u) + 24u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3569 = (_3475 * 40u) + 28u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3594 = fma(_2811, _3582.z, fma(_2810, _3582.y, _3582.x * _2809)) + _3582.w;
                            _3595 = !((fma(_2811, _3563.z, fma(_2810, _3563.y, _3563.x * _2809)) + _3563.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3595)
                            {
                                float _3622 = _3490.x - _2809;
                                float _3623 = _3490.y - _2810;
                                float _3624 = _3490.z - _2811;
                                float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                                float _3628 = inversesqrt(_3625);
                                float _3629 = _3628 * _3622;
                                float _3630 = _3628 * _3623;
                                float _3631 = _3628 * _3624;
                                float _3635 = 1.0 - (_3625 / (_3491 * _3491));
                                float _4827 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3640 = sqrt(_3625) * _3506.w;
                                float _3642 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                                float _3643 = _3642 * _3642;
                                float _3646 = ((1.0 - _3643) * dot(vec3(_3629, _3630, _3631), vec3(_1044, _1047, _1050))) + _3643;
                                float _3649 = _3640 * _3640;
                                float _3653 = (fma(_2811, _3533.z, fma(_2810, _3533.y, _3533.x * _2809)) + _3533.w) / _3594;
                                float _3654 = (fma(_2811, _3548.z, fma(_2810, _3548.y, _3548.x * _2809)) + _3548.w) / _3594;
                                float _3658 = 1.0 - dot(vec2(_3653, _3654), vec2(_3653, _3654));
                                float _4843 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3660 = _3659 * (((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3636) / ((_3649 * 0.699999988079071044921875) + 1.0));
                                float _3672 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                                float _3673 = 1.0 - _1119;
                                float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                                float _3681 = _3680 * _3680;
                                float _3682 = _3681 * _3681;
                                float _3683 = _3629 - _3102;
                                float _3684 = _3630 - _3103;
                                float _3685 = _3631 - _3104;
                                float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                                float _3693 = dot(vec3(_1044, _1047, _1050), vec3((-0.0) - _3102, (-0.0) - _3103, (-0.0) - _3104));
                                float _4854 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3697 = dot(vec3(_1044, _1047, _1050), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                                float _4865 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                                float _3705 = _3642 * _3681;
                                float _3706 = _3705 * _3705;
                                float _3712 = ((1.0 - _3706) * dot(vec3(_1044, _1047, _1050), vec3(_3629, _3630, _3631))) + _3706;
                                float _4876 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3714 = 1.0 - _3681;
                                float _3724 = (0.5 / (((_3713 * ((_3696 * _3714) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3681) * _3696))) * _3713;
                                float _4887 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3734 = (_3659 * _3636) * (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) / ((_3704 * _3704) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3660 * _3506.y;
                                frontier_phi_83_pred_1 = _3660 * _3506.x;
                                frontier_phi_83_pred_2 = _3734 * _3518.z;
                                frontier_phi_83_pred_3 = _3734 * _3518.y;
                                frontier_phi_83_pred_4 = _3734 * _3518.x;
                                frontier_phi_83_pred_5 = _3660 * _3506.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3742 = frontier_phi_83_pred;
                            _3741 = frontier_phi_83_pred_1;
                            _3740 = frontier_phi_83_pred_2;
                            _3739 = frontier_phi_83_pred_3;
                            _3738 = frontier_phi_83_pred_4;
                            _3743 = frontier_phi_83_pred_5;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            if (_3465 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3465;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3450;
                        frontier_phi_77_pred_1 = _3449;
                        frontier_phi_77_pred_2 = _3448;
                        frontier_phi_77_pred_3 = _3447;
                        frontier_phi_77_pred_4 = _3446;
                        frontier_phi_77_pred_5 = _3445;
                    }
                    _3087 = frontier_phi_77_pred;
                    _3085 = frontier_phi_77_pred_1;
                    _3083 = frontier_phi_77_pred_2;
                    _3081 = frontier_phi_77_pred_3;
                    _3079 = frontier_phi_77_pred_4;
                    _3077 = frontier_phi_77_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3077;
                        _3237 = _3079;
                        _3238 = _3081;
                        _3239 = _3083;
                        _3240 = _3085;
                        _3241 = _3087;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3081;
                frontier_phi_58_59_ladder_1 = _3087;
                frontier_phi_58_59_ladder_2 = _3085;
                frontier_phi_58_59_ladder_3 = _3083;
                frontier_phi_58_59_ladder_4 = _3079;
                frontier_phi_58_59_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_58_59_ladder = _2960;
                frontier_phi_58_59_ladder_1 = _2966;
                frontier_phi_58_59_ladder_2 = _2964;
                frontier_phi_58_59_ladder_3 = _2962;
                frontier_phi_58_59_ladder_4 = _2958;
                frontier_phi_58_59_ladder_5 = _2956;
            }
            _3076 = frontier_phi_58_59_ladder_5;
            _3078 = frontier_phi_58_59_ladder_4;
            _3080 = frontier_phi_58_59_ladder;
            _3082 = frontier_phi_58_59_ladder_3;
            _3084 = frontier_phi_58_59_ladder_2;
            _3086 = frontier_phi_58_59_ladder_1;
        }
        float _3091 = isnan(1.0) ? _1103 : (isnan(_1103) ? 1.0 : min(_1103, 1.0));
        _2868 = (_3091 * _3082) + _2304;
        _2870 = (_3091 * _3084) + _2306;
        _2872 = (_3091 * _3086) + _2308;
        _2874 = ((_3076 * _1087) * _3091) + _2649;
        _2876 = ((_3078 * _1089) * _3091) + _2651;
        _2878 = ((_3080 * _1090) * _3091) + _2653;
    }
    else
    {
        _2868 = _2304;
        _2870 = _2306;
        _2872 = _2308;
        _2874 = _2649;
        _2876 = _2651;
        _2878 = _2653;
    }
    float _4903 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4914 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4925 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _2895 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2868 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1103))) + ((_2874 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    float _2896 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2870 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1103))) + ((_2876 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    float _2897 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2872 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1103))) + ((_2878 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    uint _2898 = _285 + 6u;
    float _2906 = _1025 / cbSceneParam._m0[86u].x;
    float _2907 = _1026 / cbSceneParam._m0[86u].y;
    vec4 _2921 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, (log2((isnan(cbSceneParam._m0[77u].w) ? _948 : (isnan(_948) ? cbSceneParam._m0[77u].w : min(_948, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2923 = _2921.x;
    float _2924 = _2921.y;
    float _2925 = _2921.z;
    float _2926 = _2921.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_948 > cbSceneParam._m0[78u].w)
    {
        float _2981 = isnan(_948) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _948 : min(cbSceneParam._m0[80u].w, _948));
        float _2982 = _2981 / _948;
        float _2993 = _2982 * _998;
        float _2994 = _999 * _2982;
        float _2995 = (-0.0) - _2994;
        float _2996 = _2982 * _1000;
        float _2998 = (cbSceneParam._m0[77u].w * _2995) / _2981;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2994;
        float _3006 = sqrt(((_2993 * _2993) + (_2994 * _2994)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2981)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_2995 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3137 = 1.0 / cbSceneParam._m0[80u].x;
            float _3138 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3139 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            _3193 = ((abs(_3006 / _2995) * cbSceneParam._m0[80u].y) * ((((_3148 - _3149) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))))) * _3137)) - ((exp2(_3016 * _3148) - exp2(_3016 * _3149)) * _3137))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2926);
        _3018 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2923;
        _3020 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2924;
        _3022 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2925;
        _3024 = _3204 * _2926;
    }
    else
    {
        _3018 = _2923;
        _3020 = _2924;
        _3022 = _2925;
        _3024 = _2926;
    }
    bool _3231;
    vec4 _3034;
    vec4 _3056;
    float _3058;
    float _3062;
    float _3063;
    float _3064;
    float _3065;
    bool _3075;
    for (;;)
    {
        _3034 = cbMatDynParam._m0[0u];
        float _3036 = roundEven(_3034.y);
        bool _3037 = _3036 == 3.0;
        float _3038 = log2(_3024);
        float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * _2895;
        float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * _2896;
        float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * _2897;
        float _3054 = _1014 + (-0.5);
        _3056 = cbMtdParam._m0[1u];
        _3058 = _3056.y * _3054;
        float _3061 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3062 = _3061 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
        _3063 = _3061 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
        _3064 = _3061 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
        _3065 = _3054 * 0.999000012874603271484375;
        _3075 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3075)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3065) < 0.5)
            {
                _3231 = true;
                break;
            }
        }
        uint _3172 = _1063 + uint(_3034.w);
        if ((cbInstanceData._m0[_3172].w < 1.0) && ((cbInstanceData._m0[_3172].w + _3065) < 0.5))
        {
            _3231 = true;
            break;
        }
        if ((_3058 + 1.0) < _3056.x)
        {
            _3231 = true;
            break;
        }
        _3231 = false;
        break;
    }
    float _3436;
    if (_3231)
    {
        discard_state = true;
        _3436 = 0.0;
    }
    else
    {
        _3436 = cbInstanceData._m0[_2898].w;
    }
    SV_Target.x = _3062;
    SV_Target.y = _3063;
    SV_Target.z = _3064;
    SV_Target.w = _3436;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2898].w;
    discard_exit();
}


