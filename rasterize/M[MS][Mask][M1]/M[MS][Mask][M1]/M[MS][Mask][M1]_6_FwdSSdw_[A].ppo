#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1249;
float _3657;
float _3658;
float _3659;
float _3660;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[23u].w) + _384) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3669 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _409 = (_402 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _410 = (_402 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _411 = (_402 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _402) + _445;
    float _457 = ((((_424.x - _443) * _402) + _443) * 2.0) + (-1.0);
    float _459 = ((((_424.y - _444) * _402) + _444) * 2.0) + (-1.0);
    float _460 = dot(vec2(_457, _459), vec2(_457, _459));
    float _3680 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _493 = (((_481.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    float _494 = (((_481.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _508 = _506.x;
    float _509 = 1.0 - _508;
    float _538 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_508 - _509) * cbMtdParam._m0[24u].w) + _509) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3691 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _547 = ((((cbMtdParam._m0[10u].x - _409) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _539) + _409;
    float _548 = ((((cbMtdParam._m0[10u].y - _410) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _539) + _410;
    float _549 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _411)) * _539) + _411;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _577 = _575.x;
    float _595 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _577) * _402) + _577;
    float _599 = ((_561.x - _595) * cbMtdParam._m0[19u].z) + _595;
    float _601 = _599 - (_599 * _539);
    float _605 = (cbMtdParam._m0[19u].w * (_481.z - _454)) + _454;
    float _609 = ((cbMtdParam._m0[23u].x - _605) * _539) + _605;
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3702 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _652 = (_539 * (((cbMtdParam._m0[22u].z * _493) - _493) + _634)) + _493;
    float _653 = (_539 * (((cbMtdParam._m0[22u].z * _494) - _494) + _635)) + _494;
    float _654 = (_539 * (sqrt(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) - _465)) + _465;
    float _656 = cbMtdParam._m0[22u].x + _481.w;
    float _659 = fma(_654, _238 * NORMAL.x, fma(_653, _245 * TANGENT.x, (_231 * _223) * _652));
    float _662 = fma(_654, _238 * NORMAL.y, fma(_653, _245 * TANGENT.y, (_231 * _224) * _652));
    float _665 = fma(_654, _238 * NORMAL.z, fma(_653, _245 * TANGENT.z, (_231 * _225) * _652));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3713 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _673 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3735 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3746 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3757 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3768 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _678 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    vec4 _756 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _758 = _756.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _930 = sqrt(((_742 * _742) + (_743 * _743)) + (_744 * _744));
        float _936 = (cbMatDynParam._m0[5u].x * _930) + cbMatDynParam._m0[5u].y;
        float _3779 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _941 = (cbMatDynParam._m0[5u].z * _930) + cbMatDynParam._m0[5u].w;
        float _3790 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) - _937)) + _937) < ((_758 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _769 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _770 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _788 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _791 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _794 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _807 = _251 + 9u;
    uint _808 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _814 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_808].x;
    float _815 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_808].y;
    float _816 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_808].z;
    float _3801 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _820 = 1.0 - _678;
    float _821 = _817 * _820;
    float _822 = _818 * _820;
    float _823 = _819 * _820;
    float _828 = (_817 + (-0.039999999105930328369140625)) * _678;
    float _829 = (_818 + (-0.039999999105930328369140625)) * _678;
    float _830 = (_819 + (-0.039999999105930328369140625)) * _678;
    float _831 = _828 + 0.039999999105930328369140625;
    float _833 = _829 + 0.039999999105930328369140625;
    float _834 = _830 + 0.039999999105930328369140625;
    vec4 _843 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _769, cbSceneParam._m0[86u].y * _770));
    float _847 = ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * TEXCOORD_5.w) * _843.x;
    float _848 = dot(vec3(_670, _671, _672), vec3(_749, _750, _751));
    float _851 = _848 * 2.0;
    float _855 = (_851 * _670) - _749;
    float _856 = (_851 * _671) - _750;
    float _857 = (_851 * _672) - _751;
    float _861 = abs(dot(vec3(_749, _750, _751), vec3(_670, _671, _672)));
    float _3834 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _863 = sqrt(_673);
    float _876 = exp2((_863 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_863 * 3.0));
    float _882 = (1.0 - _876) * ((_863 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _883 = _876 * _863;
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_919, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911));
        float _977 = fma(_919, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911));
        float _981 = fma(_919, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911));
        float _1006 = _911 + _670;
        float _1007 = _915 + _671;
        float _1008 = _919 + _672;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _973;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _977;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _981;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_670, _671, _672), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3882 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_670, _671, _672), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3915 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_670, _671, _672), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3948 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1291 = fma(_919, cbModelParam._m0[30u].z, fma(_915, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911));
        float _1295 = fma(_919, cbModelParam._m0[31u].z, fma(_915, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911));
        float _1299 = fma(_919, cbModelParam._m0[32u].z, fma(_915, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911));
        float _1322 = _911 + _670;
        float _1323 = _915 + _671;
        float _1324 = _919 + _672;
        float _1334 = fma(_1324, cbModelParam._m0[30u].z, fma(_1323, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1322)) - _1291;
        float _1335 = fma(_1324, cbModelParam._m0[31u].z, fma(_1323, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1322)) - _1295;
        float _1336 = fma(_1324, cbModelParam._m0[32u].z, fma(_1323, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1322)) - _1299;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1291 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1295 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[35u].z) + ((((((_1299 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1390 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1357.x + (-0.5));
        float _1392 = _1390 * (_1357.y + (-0.5));
        float _1393 = _1390 * (_1357.z + (-0.5));
        float _1400 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1364.x + (-0.5));
        float _1402 = _1400 * (_1364.y + (-0.5));
        float _1403 = _1400 * (_1364.z + (-0.5));
        float _1410 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1371.x + (-0.5));
        float _1412 = _1410 * (_1371.y + (-0.5));
        float _1413 = _1410 * (_1371.z + (-0.5));
        float _1420 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1378.x + (-0.5));
        float _1422 = _1420 * (_1378.y + (-0.5));
        float _1423 = _1420 * (_1378.z + (-0.5));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = _1391 * 0.5;
        float _1428 = _1401 * 0.5;
        float _1429 = _1411 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_670, _671, _672), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4011 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1454 + 1.0))) + _1459) * _1424;
        float _1469 = _1392 * 0.5;
        float _1470 = _1402 * 0.5;
        float _1471 = _1412 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_670, _671, _672), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4044 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1496 + 1.0))) + _1501) * _1425;
        float _1511 = _1393 * 0.5;
        float _1512 = _1403 * 0.5;
        float _1513 = _1413 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_670, _671, _672), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4077 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1538 + 1.0))) + _1543) * _1426;
        _1560 = _1393;
        _1561 = _1392;
        _1562 = _1391;
        _1563 = _1403;
        _1564 = _1402;
        _1565 = _1401;
        _1566 = _1413;
        _1567 = _1412;
        _1568 = _1411;
        _1569 = _1426;
        _1570 = _1425;
        _1571 = _1424;
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1249;
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = _1249;
        _1570 = _1249;
        _1571 = _1249;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1261)) + _1261;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1262)) + _1262;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1263)) + _1263;
    float _1607 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1584));
    float _1628 = _855 * 0.5;
    float _1629 = _856 * 0.5;
    float _1630 = _857 * 0.5;
    float _1631 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1634 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1637 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1671;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1644 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1648 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1652 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1659 = dot(vec4(cbModelParam._m0[39u]), vec4(_1628, _1629, _1630, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1682;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1673 = dot(vec4(cbModelParam._m0[40u]), vec4(_1628, _1629, _1630, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1686 = (_1682 * cbModelParam._m0[1u].x) + (_1671 * (1.0 - cbModelParam._m0[1u].x));
    float _1696 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1696 : min(cbModelParam._m0[25u].z, _1696));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_919, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_919, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_919, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_857, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855));
        float _1760 = fma(_857, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855));
        float _1763 = fma(_857, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1791 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1760 > 0.0)
        {
            _2016 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1763 > 0.0)
        {
            _2273 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_2016) ? _1791 : (isnan(_1791) ? _2016 : min(_1791, _2016));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1757) + _1746;
        float _2281 = (_2276 * _1760) + _1750;
        float _2282 = (_2276 * _1763) + _1754;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1697);
            frontier_phi_16_38_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_16_38_ladder_2;
        _1781 = frontier_phi_16_38_ladder_1;
        _1783 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_855, _856, _857), _1697);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1843 = fma(_919, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911)) + cbModelParam._m0[21u].w;
        float _1847 = fma(_919, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911)) + cbModelParam._m0[22u].w;
        float _1851 = fma(_919, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911)) + cbModelParam._m0[23u].w;
        float _1854 = fma(_857, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855));
        float _1857 = fma(_857, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855));
        float _1860 = fma(_857, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855));
        float _2021;
        if (_1854 > 0.0)
        {
            _2021 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1857 > 0.0)
        {
            _2300 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2513;
        if (_1860 > 0.0)
        {
            _2513 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2513 = frontier_phi_49_46_ladder;
        }
        float _2515 = isnan(_2300) ? _2021 : (isnan(_2021) ? _2300 : min(_2021, _2300));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1854) + _1843;
        float _2521 = (_2516 * _1857) + _1847;
        float _2522 = (_2516 * _1860) + _1851;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_25_49_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1879 = frontier_phi_25_49_ladder_2;
        _1881 = frontier_phi_25_49_ladder_1;
        _1883 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_855, _856, _857), _1788);
        _1879 = _1863.x * cbModelParam._m0[1u].z;
        _1881 = _1863.y * cbModelParam._m0[1u].z;
        _1883 = _1863.z * cbModelParam._m0[1u].z;
    }
    float _1896 = (((_882 * _831) + _883) * _847) * ((cbModelParam._m0[1u].w * (_1879 - _1779)) + _1779);
    float _1898 = (((_882 * _833) + _883) * _847) * ((cbModelParam._m0[1u].w * (_1881 - _1781)) + _1781);
    float _1900 = (((_882 * _834) + _883) * _847) * ((cbModelParam._m0[1u].w * (_1883 - _1783)) + _1783);
    float _1903 = fma(_1900, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1896 * cbSceneParam._m0[89u].x));
    float _1906 = fma(_1900, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1896 * cbSceneParam._m0[90u].x));
    float _1909 = fma(_1900, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1896 * cbSceneParam._m0[91u].x));
    vec4 _1917 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_769, _770));
    float _1919 = _1917.w;
    float _1931 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1919);
    float _1932 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1919);
    float _1933 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1919);
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1947 = _847 + (-1.0);
    float _1952 = (cbLight._m0[_1940].x * _1947) + 1.0;
    float _1953 = (cbLight._m0[_1940].y * _1947) + 1.0;
    float _1954 = (cbLight._m0[_1940].z * _1947) + 1.0;
    float _1955 = (cbLight._m0[_1940].w * _1947) + 1.0;
    uint _1956 = _1939 + 5u;
    float _1962 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1966 = _1939 + 4u;
    float _1975 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1979 = _1939 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_670, _671, _672));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_670, _671, _672));
    float _4213 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4224 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1956].x * _1962) * _2000) + (((cbLight._m0[_1966].x * _1931) * _1975) * _1998);
    float _2008 = ((_1962 * cbLight._m0[_1956].y) * _2000) + (((cbLight._m0[_1966].y * _1932) * _1975) * _1998);
    float _2009 = ((_1962 * cbLight._m0[_1956].z) * _2000) + (((cbLight._m0[_1966].z * _1933) * _1975) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1939 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1939 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1939 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4235 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2053 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2244 = _1939 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1939 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4251 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2263 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2071 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2026;
        _2073 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2028;
        _2075 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2030;
    }
    uint _2078 = _1939 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _673) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1939].x + _749;
    float _2094 = cbLight._m0[_1939].y + _750;
    float _2095 = cbLight._m0[_1939].z + _751;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1939].xyz));
    float _4267 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2107 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2108 = dot(vec3(_670, _671, _672), vec3(_2100, _2101, _2102));
    float _4289 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2100, _2101, _2102));
    float _4300 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _828;
    float _2131 = 0.959999978542327880859375 - _829;
    float _2132 = 0.959999978542327880859375 - _830;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4311 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2166 = _1939 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _673) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1979].x + _749;
    float _2180 = cbLight._m0[_1979].y + _750;
    float _2181 = cbLight._m0[_1979].z + _751;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1979].xyz));
    float _4322 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2193 = dot(vec3(_670, _671, _672), vec3(_2186, _2187, _2188));
    float _4333 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2186, _2187, _2188));
    float _4344 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
    float _2219 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2107 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2219) + _2178) * _2192))) * _2192;
    float _4355 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2241 = (((((_2212 * _2129) + _831) * cbLight._m0[_2166].x) * _2231) * _1962) + ((((cbLight._m0[_2078].x * _1931) * ((_2128 * _2129) + _831)) * _2152) * _1975);
    float _2242 = (((((_2212 * _2131) + _833) * cbLight._m0[_2166].y) * _2231) * _1962) + ((((cbLight._m0[_2078].y * _1932) * ((_2128 * _2131) + _833)) * _2152) * _1975);
    float _2243 = (((((_2212 * _2132) + _834) * cbLight._m0[_2166].z) * _2231) * _1962) + ((((cbLight._m0[_2078].z * _1933) * ((_2128 * _2132) + _834)) * _2152) * _1975);
    float _2305;
    float _2307;
    float _2309;
    if (_2015)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1939 + 2u;
        uint _2315 = _1939 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _673) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _749;
        float _2332 = cbLight._m0[_2311].y + _750;
        float _2333 = cbLight._m0[_2311].z + _751;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2311].xyz));
        float _4366 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2345 = dot(vec3(_670, _671, _672), vec3(_2338, _2339, _2340));
        float _4377 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4388 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_2107 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2371) + _2330) * _2344))) * _2344;
        float _4399 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2305 = (((((_2364 * _2129) + _831) * cbLight._m0[_2315].x) * _2383) * _2384) + _2241;
        _2307 = (((((_2364 * _2131) + _833) * cbLight._m0[_2315].y) * _2383) * _2384) + _2242;
        _2309 = (((((_2364 * _2132) + _834) * cbLight._m0[_2315].z) * _2383) * _2384) + _2243;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2033)
    {
        _2419 = _2305;
        _2421 = _2307;
        _2423 = _2309;
    }
    else
    {
        uint _2430 = _1939 + 3u;
        uint _2434 = _1939 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _673) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _749;
        float _2451 = cbLight._m0[_2430].y + _750;
        float _2452 = cbLight._m0[_2430].z + _751;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2430].xyz));
        float _4415 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2464 = dot(vec3(_670, _671, _672), vec3(_2457, _2458, _2459));
        float _4426 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4437 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2107 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2490) + _2449) * _2463))) * _2463;
        float _4448 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2419 = (((((_2483 * _2129) + _831) * cbLight._m0[_2434].x) * _2502) * _2503) + _2305;
        _2421 = (((((_2483 * _2131) + _833) * cbLight._m0[_2434].y) * _2502) * _2503) + _2307;
        _2423 = (((((_2483 * _2132) + _834) * cbLight._m0[_2434].z) * _2502) * _2503) + _2309;
    }
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_1937.y == 0u)
    {
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2578;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2578;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2578;
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _770) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _769) / _2594)));
        float _2615 = (log2(_2581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
        }
        else
        {
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            uint _2885 = 0u;
            uint _2894;
            bool _2895;
            for (;;)
            {
                _2894 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                _2895 = _2894 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2895)
                {
                    frontier_phi_66_pred = _2879;
                    frontier_phi_66_pred_1 = _2884;
                    frontier_phi_66_pred_2 = _2883;
                    frontier_phi_66_pred_3 = _2882;
                    frontier_phi_66_pred_4 = _2881;
                    frontier_phi_66_pred_5 = _2880;
                }
                else
                {
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    uint _3030;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2894;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    for (;;)
                    {
                        uint _3034 = uint(findLSB(_3030)) + (_2885 << 5u);
                        uint _3031 = (_3030 + 4294967295u) & _3030;
                        uint _3036 = _3034 * 48u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3056 = (_3034 * 48u) + 4u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3075 = (_3034 * 48u) + 8u;
                        vec3 _3086 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x));
                        float _3090 = _3050.x - _2579;
                        float _3091 = _3050.y - _2580;
                        float _3092 = _3050.z - _2581;
                        float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                        float _3096 = inversesqrt(_3093);
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3100 = dot(vec3(_788, _791, _794), vec3(_3097, _3098, _3099));
                        float _3105 = 1.0 - (_3093 * _3050.w);
                        float _4474 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3107 = sqrt(_3093) * _3069.w;
                        float _3110 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3100) + _3111;
                        float _3117 = _3107 * _3107;
                        float _3121 = ((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3106) / ((_3117 * 0.699999988079071044921875) + 1.0);
                        float _3125 = (-0.0) - _2579;
                        float _3126 = (-0.0) - _2580;
                        float _3127 = (-0.0) - _2581;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3142 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                        float _3143 = 1.0 - _863;
                        float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                        float _3151 = _3150 * _3150;
                        float _3152 = _3151 * _3151;
                        float _3153 = _3132 + _3097;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3163 = dot(vec3(_788, _791, _794), vec3(_3132, _3133, _3134));
                        float _4490 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3167 = dot(vec3(_788, _791, _794), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                        float _4501 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                        float _3175 = _3110 * _3151;
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3100) + _3176;
                        float _4512 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3181 = 1.0 - _3151;
                        float _3191 = (0.5 / (((_3180 * ((_3166 * _3181) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3151) * _3166))) * _3180;
                        float _4523 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3202 = (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3174 * _3174) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125))) * _3106;
                        _2954 = (_3121 * _3069.x) + _3027;
                        _2955 = (_3121 * _3069.y) + _3028;
                        _2956 = (_3121 * _3069.z) + _3029;
                        _2951 = (_3202 * _3086.x) + _3024;
                        _2952 = (_3202 * _3086.y) + _3025;
                        _2953 = (_3202 * _3086.z) + _3026;
                        if (_3031 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _3031;
                        }
                    }
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                _2727 = frontier_phi_66_pred;
                _2737 = frontier_phi_66_pred_1;
                _2735 = frontier_phi_66_pred_2;
                _2733 = frontier_phi_66_pred_3;
                _2731 = frontier_phi_66_pred_4;
                _2729 = frontier_phi_66_pred_5;
                uint _2886 = _2885 + 1u;
                if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2879 = _2727;
                    _2880 = _2729;
                    _2881 = _2731;
                    _2882 = _2733;
                    _2883 = _2735;
                    _2884 = _2737;
                    _2885 = _2886;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
        }
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.z;
        uint _2743 = (_2741 >> 8u) & 15u;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((4294967295u << _2743) & _2625) == 0u)
        {
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
        }
        else
        {
            float _2872 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
            float _2873 = _2872 * _2579;
            float _2874 = _2872 * _2580;
            float _2875 = _2872 * _2581;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2743 < ((_2741 >> 12u) & 15u))
            {
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _3007 = _2726;
                float _3008 = _2728;
                float _3009 = _2730;
                float _3010 = _2732;
                float _3011 = _2734;
                float _3012 = _2736;
                uint _3013 = _2743;
                uint _3022;
                bool _3023;
                for (;;)
                {
                    _3022 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                    _3023 = _3022 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3023)
                    {
                        frontier_phi_77_pred = _3012;
                        frontier_phi_77_pred_1 = _3011;
                        frontier_phi_77_pred_2 = _3010;
                        frontier_phi_77_pred_3 = _3009;
                        frontier_phi_77_pred_4 = _3008;
                        frontier_phi_77_pred_5 = _3007;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        uint _3235 = _3022;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3304;
                        vec4 _3320;
                        float _3366;
                        bool _3367;
                        for (;;)
                        {
                            uint _3246 = ((_3013 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3291 = (_3246 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3246 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3246 * 40u) + 24u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3341 = (_3246 * 40u) + 28u;
                            vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3366 = fma(_2581, _3354.z, fma(_2580, _3354.y, _3354.x * _2579)) + _3354.w;
                            _3367 = !((fma(_2581, _3335.z, fma(_2580, _3335.y, _3335.x * _2579)) + _3335.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3367)
                            {
                                float _3394 = _3261.x - _2579;
                                float _3395 = _3261.y - _2580;
                                float _3396 = _3261.z - _2581;
                                float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                                float _3400 = inversesqrt(_3397);
                                float _3401 = _3400 * _3394;
                                float _3402 = _3400 * _3395;
                                float _3403 = _3400 * _3396;
                                float _3407 = 1.0 - (_3397 / (_3262 * _3262));
                                float _4534 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3412 = sqrt(_3397) * _3277.w;
                                float _3414 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                                float _3415 = _3414 * _3414;
                                float _3418 = ((1.0 - _3415) * dot(vec3(_3401, _3402, _3403), vec3(_788, _791, _794))) + _3415;
                                float _3421 = _3412 * _3412;
                                float _3425 = (fma(_2581, _3304.z, fma(_2580, _3304.y, _3304.x * _2579)) + _3304.w) / _3366;
                                float _3426 = (fma(_2581, _3320.z, fma(_2580, _3320.y, _3320.x * _2579)) + _3320.w) / _3366;
                                float _3430 = 1.0 - dot(vec2(_3425, _3426), vec2(_3425, _3426));
                                float _4550 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3432 = _3431 * (((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3408) / ((_3421 * 0.699999988079071044921875) + 1.0));
                                float _3444 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                                float _3445 = 1.0 - _863;
                                float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                                float _3453 = _3452 * _3452;
                                float _3454 = _3453 * _3453;
                                float _3455 = _3401 - _2873;
                                float _3456 = _3402 - _2874;
                                float _3457 = _3403 - _2875;
                                float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                                float _3465 = dot(vec3(_788, _791, _794), vec3((-0.0) - _2873, (-0.0) - _2874, (-0.0) - _2875));
                                float _4561 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3469 = dot(vec3(_788, _791, _794), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                                float _4572 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                                float _3477 = _3414 * _3453;
                                float _3478 = _3477 * _3477;
                                float _3484 = ((1.0 - _3478) * dot(vec3(_788, _791, _794), vec3(_3401, _3402, _3403))) + _3478;
                                float _4583 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3486 = 1.0 - _3453;
                                float _3496 = (0.5 / (((_3485 * ((_3468 * _3486) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3453) * _3468))) * _3485;
                                float _4594 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3506 = (_3431 * _3408) * (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3476 * _3476) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3432 * _3277.y;
                                frontier_phi_83_pred_1 = _3432 * _3277.x;
                                frontier_phi_83_pred_2 = _3506 * _3289.z;
                                frontier_phi_83_pred_3 = _3506 * _3289.y;
                                frontier_phi_83_pred_4 = _3506 * _3289.x;
                                frontier_phi_83_pred_5 = _3432 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3514 = frontier_phi_83_pred;
                            _3513 = frontier_phi_83_pred_1;
                            _3512 = frontier_phi_83_pred_2;
                            _3511 = frontier_phi_83_pred_3;
                            _3510 = frontier_phi_83_pred_4;
                            _3515 = frontier_phi_83_pred_5;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            _3221 = _3515 + _3234;
                            _3216 = _3510 + _3229;
                            _3217 = _3511 + _3230;
                            _3218 = _3512 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3221;
                        frontier_phi_77_pred_1 = _3220;
                        frontier_phi_77_pred_2 = _3219;
                        frontier_phi_77_pred_3 = _3218;
                        frontier_phi_77_pred_4 = _3217;
                        frontier_phi_77_pred_5 = _3216;
                    }
                    _2858 = frontier_phi_77_pred;
                    _2856 = frontier_phi_77_pred_1;
                    _2854 = frontier_phi_77_pred_2;
                    _2852 = frontier_phi_77_pred_3;
                    _2850 = frontier_phi_77_pred_4;
                    _2848 = frontier_phi_77_pred_5;
                    uint _3014 = _3013 + 1u;
                    if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3007 = _2848;
                        _3008 = _2850;
                        _3009 = _2852;
                        _3010 = _2854;
                        _3011 = _2856;
                        _3012 = _2858;
                        _3013 = _3014;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2852;
                frontier_phi_58_59_ladder_1 = _2858;
                frontier_phi_58_59_ladder_2 = _2856;
                frontier_phi_58_59_ladder_3 = _2854;
                frontier_phi_58_59_ladder_4 = _2850;
                frontier_phi_58_59_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_58_59_ladder = _2730;
                frontier_phi_58_59_ladder_1 = _2736;
                frontier_phi_58_59_ladder_2 = _2734;
                frontier_phi_58_59_ladder_3 = _2732;
                frontier_phi_58_59_ladder_4 = _2728;
                frontier_phi_58_59_ladder_5 = _2726;
            }
            _2847 = frontier_phi_58_59_ladder_5;
            _2849 = frontier_phi_58_59_ladder_4;
            _2851 = frontier_phi_58_59_ladder;
            _2853 = frontier_phi_58_59_ladder_3;
            _2855 = frontier_phi_58_59_ladder_2;
            _2857 = frontier_phi_58_59_ladder_1;
        }
        float _2862 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2638 = (_2862 * _2853) + _2071;
        _2640 = (_2862 * _2855) + _2073;
        _2642 = (_2862 * _2857) + _2075;
        _2644 = ((_2847 * _831) * _2862) + _2419;
        _2646 = ((_2849 * _833) * _2862) + _2421;
        _2648 = ((_2851 * _834) * _2862) + _2423;
    }
    else
    {
        _2638 = _2071;
        _2640 = _2073;
        _2642 = _2075;
        _2644 = _2419;
        _2646 = _2421;
        _2648 = _2423;
    }
    float _4610 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4621 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4632 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _2665 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2638 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _847))) + ((_2644 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1686)) * cbPerFrame._m0[3u].x);
    float _2666 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2640 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _847))) + ((_2646 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1686)) * cbPerFrame._m0[3u].x);
    float _2667 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2642 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _847))) + ((_2648 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1686)) * cbPerFrame._m0[3u].x);
    uint _2668 = _251 + 6u;
    float _2676 = _769 / cbSceneParam._m0[86u].x;
    float _2677 = _770 / cbSceneParam._m0[86u].y;
    vec4 _2691 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2693 = _2691.x;
    float _2694 = _2691.y;
    float _2695 = _2691.z;
    float _2696 = _2691.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2751 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2752 = _2751 / _692;
        float _2763 = _2752 * _742;
        float _2764 = _743 * _2752;
        float _2765 = (-0.0) - _2764;
        float _2767 = _2752 * _744;
        float _2769 = (cbSceneParam._m0[77u].w * _2765) / _2751;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2764;
        float _2777 = sqrt(((_2763 * _2763) + (_2764 * _2764)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2751)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2964;
        if (abs((_2765 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2964 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2908 = 1.0 / cbSceneParam._m0[80u].x;
            float _2909 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2910 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            _2964 = ((abs(_2777 / _2765) * cbSceneParam._m0[80u].y) * ((((_2919 - _2920) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))))) * _2908)) - ((exp2(_2787 * _2919) - exp2(_2787 * _2920)) * _2908))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2966 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, 1.0), 0.0);
        float _2975 = exp2((_2964 * (-1.44269502162933349609375)) * (1.0 - _2966.w));
        float _2976 = log2(_2975);
        float _2992 = log2(_2696);
        _2789 = (exp2(_2992 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].x)) * _2966.x) / cbSceneParam._m0[78u].x)) + _2693;
        _2791 = (exp2(_2992 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].y)) * _2966.y) / cbSceneParam._m0[78u].y)) + _2694;
        _2793 = (exp2(_2992 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].z)) * _2966.z) / cbSceneParam._m0[78u].z)) + _2695;
        _2795 = _2975 * _2696;
    }
    else
    {
        _2789 = _2693;
        _2791 = _2694;
        _2793 = _2695;
        _2795 = _2696;
    }
    bool _3002;
    vec4 _2805;
    vec4 _2827;
    float _2829;
    float _2833;
    float _2834;
    float _2835;
    float _2836;
    bool _2846;
    for (;;)
    {
        _2805 = cbMatDynParam._m0[0u];
        float _2807 = roundEven(_2805.y);
        bool _2808 = _2807 == 3.0;
        float _2809 = log2(_2795);
        float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * _2665;
        float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * _2666;
        float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * _2667;
        float _2825 = _758 + (-0.5);
        _2827 = cbMtdParam._m0[1u];
        _2829 = _2827.y * _2825;
        float _2832 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2833 = _2832 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
        _2834 = _2832 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
        _2835 = _2832 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
        _2836 = _2825 * 0.999000012874603271484375;
        _2846 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2846)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2836) < 0.5)
            {
                _3002 = true;
                break;
            }
        }
        uint _2943 = _807 + uint(_2805.w);
        if ((cbInstanceData._m0[_2943].w < 1.0) && ((cbInstanceData._m0[_2943].w + _2836) < 0.5))
        {
            _3002 = true;
            break;
        }
        if ((_2829 + 1.0) < _2827.x)
        {
            _3002 = true;
            break;
        }
        _3002 = false;
        break;
    }
    float _3207;
    if (_3002)
    {
        discard_state = true;
        _3207 = 0.0;
    }
    else
    {
        _3207 = cbInstanceData._m0[_2668].w;
    }
    SV_Target.x = _2833;
    SV_Target.y = _2834;
    SV_Target.z = _2835;
    SV_Target.w = _3207;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2668].w;
    discard_exit();
}


