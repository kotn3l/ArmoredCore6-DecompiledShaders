#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1649;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _285 = cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x;
    float _287 = cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x;
    float _289 = sqrt((_285 + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + _287);
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3995 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _457 = (_450 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _458 = (_450 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _459 = (_450 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4006 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _570 = _568.x;
    float _580 = dot(vec4(_570, _568.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _592 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _379.z) * 2.0) - ((((_570 - _580) * cbMtdParam._m0[23u].w) + _580) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4017 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _606 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_593 * ((_551.x * cbMtdParam._m0[14u].x) - _530)) + _530);
    float _609 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_593 * ((_551.y * cbMtdParam._m0[14u].y) - _531)) + _531);
    float _612 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_593 * ((_551.z * cbMtdParam._m0[14u].z) - _532)) + _532);
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _669 = _667.x;
    float _670 = _667.y;
    float _671 = _667.z;
    float _678 = ((_650.x - _669) * _450) + _669;
    float _679 = ((_650.y - _670) * _450) + _670;
    float _680 = ((_650.z - _671) * _450) + _671;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _703 = ((_692.x - _678) * _523) + _678;
    float _704 = ((_692.y - _679) * _523) + _679;
    float _705 = ((_692.z - _680) * _523) + _680;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _730 = ((_717.z - _705) * _593) + _705;
    float _733 = ((((_717.x - _703) * _593) + _703) * 2.0) + (-1.0);
    float _735 = ((((_717.y - _704) * _593) + _704) * 2.0) + (-1.0);
    float _736 = dot(vec2(_733, _735), vec2(_733, _735));
    float _4028 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _767 = (((_755.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _733;
    float _768 = (((_755.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _735;
    float _771 = fma(_741, _259, fma(_768, _266, _767 * _252));
    float _774 = fma(_741, _260, fma(_768, _267, _767 * _253));
    float _777 = fma(_741, _261, fma(_768, _268, _767 * _254));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    vec4 _808 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _810 = _808.x;
    float _811 = 1.0 - _810;
    float _819 = (cbMtdParam._m0[19u].x + dot(vec4(_781 * _771, _781 * _774, _781 * _777, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_810 - _811) * cbMtdParam._m0[24u].z) + _811) * cbMtdParam._m0[21u].z);
    float _4039 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _820 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _822 = (-0.0) - cbMtdParam._m0[24u].x;
    float _824 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
    float _832 = _820 - ((_820 * TEXCOORD_8.x) * _825);
    float _833 = _820 - ((_820 * TEXCOORD_8.y) * _825);
    float _834 = _820 - ((_820 * TEXCOORD_8.z) * _825);
    float _841 = (_832 * ((_630.x * cbMtdParam._m0[18u].x) - _606)) + _606;
    float _842 = (_833 * ((_630.y * cbMtdParam._m0[18u].y) - _609)) + _609;
    float _843 = (_834 * ((_630.z * cbMtdParam._m0[18u].z) - _612)) + _612;
    float _850 = sqrt((_285 + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + _287);
    float _851 = _850 * TEXCOORD.z;
    float _852 = _850 * TEXCOORD.w;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _851) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _852) + cbTextureTilingScale._m0[19u].w));
    float _866 = _864.x;
    float _867 = 1.0 - _866;
    float _893 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_866 - _867) * cbMtdParam._m0[24u].w) + _867) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4060 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _902 = ((((cbMtdParam._m0[10u].x - _841) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _894) + _841;
    float _903 = ((((cbMtdParam._m0[10u].y - _842) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _894) + _842;
    float _904 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _843)) * _894) + _843;
    vec4 _930 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _932 = _930.x;
    float _949 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _932) * _450) + _932;
    float _966 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _949) * _523) + _949;
    float _983 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _966) * _593) + _966;
    float _987 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _983) * cbMtdParam._m0[19u].z) + _983;
    float _989 = _987 - (_987 * _832);
    float _991 = _989 - (_989 * _894);
    float _995 = (cbMtdParam._m0[19u].w * (_755.z - _730)) + _730;
    vec4 _1011 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _1018 = (_1011.x * 2.0) + (-1.0);
    float _1019 = (_1011.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4071 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1028 = ((_1011.z - _995) * _832) + _995;
    float _1031 = ((cbMtdParam._m0[23u].x - _1028) * _894) + _1028;
    vec4 _1054 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _851) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _852) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1060 = (_1054.x * 2.0) + (-1.0);
    float _1061 = (_1054.y * 2.0) + (-1.0);
    float _1062 = dot(vec2(_1060, _1061), vec2(_1060, _1061));
    float _4082 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1077 = ((sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) - _741) * _834) + _741;
    float _1080 = (((_1018 - _767) * _832) + _767) + (cbMtdParam._m0[21u].x * _767);
    float _1081 = (((_1019 - _768) * _833) + _768) + (cbMtdParam._m0[21u].x * _768);
    float _1092 = (((_1060 - _1080) + (_1080 * cbMtdParam._m0[22u].z)) * _894) + _1080;
    float _1093 = (((_1061 - _1081) + (_1081 * cbMtdParam._m0[22u].z)) * _894) + _1081;
    float _1094 = (_894 * (sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) - _1077)) + _1077;
    float _1096 = cbMtdParam._m0[22u].x + _755.w;
    float _1099 = fma(_1094, _259, fma(_1093, _266, _1092 * _252));
    float _1102 = fma(_1094, _260, fma(_1093, _267, _1092 * _253));
    float _1105 = fma(_1094, _261, fma(_1093, _268, _1092 * _254));
    float _1109 = inversesqrt(dot(vec3(_1099, _1102, _1105), vec3(_1099, _1102, _1105)));
    float _1110 = _1109 * _1099;
    float _1111 = _1109 * _1102;
    float _1112 = _1109 * _1105;
    float _4093 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1113 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _4115 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4126 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4137 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4148 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1118 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _1132 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1182 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1172);
    float _1183 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1172);
    float _1184 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1172);
    float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
    float _1189 = _1182 * _1188;
    float _1190 = _1183 * _1188;
    float _1191 = _1184 * _1188;
    float _1197 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1198 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1216 = fma(_1112, cbSceneParam._m0[5u].z, fma(_1111, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1110));
    float _1219 = fma(_1112, cbSceneParam._m0[6u].z, fma(_1111, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1110));
    float _1222 = fma(_1112, cbSceneParam._m0[7u].z, fma(_1111, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1110));
    uint _1236 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1242 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_1236].x;
    float _1243 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_1236].y;
    float _1244 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_1236].z;
    float _4159 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1245 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _1246 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1247 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _1248 = 1.0 - _1118;
    float _1249 = _1245 * _1248;
    float _1250 = _1246 * _1248;
    float _1251 = _1247 * _1248;
    float _1256 = (_1245 + (-0.039999999105930328369140625)) * _1118;
    float _1257 = (_1246 + (-0.039999999105930328369140625)) * _1118;
    float _1258 = (_1247 + (-0.039999999105930328369140625)) * _1118;
    float _1259 = _1256 + 0.039999999105930328369140625;
    float _1261 = _1257 + 0.039999999105930328369140625;
    float _1262 = _1258 + 0.039999999105930328369140625;
    vec4 _1271 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1197, cbSceneParam._m0[86u].y * _1198));
    float _1275 = ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * TEXCOORD_5.w) * _1271.x;
    float _1276 = dot(vec3(_1110, _1111, _1112), vec3(_1189, _1190, _1191));
    float _1279 = _1276 * 2.0;
    float _1283 = (_1279 * _1110) - _1189;
    float _1284 = (_1279 * _1111) - _1190;
    float _1285 = (_1279 * _1112) - _1191;
    float _1289 = abs(dot(vec3(_1189, _1190, _1191), vec3(_1110, _1111, _1112)));
    float _4192 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _1291 = sqrt(_1113);
    float _1304 = exp2((_1291 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1291 * 3.0));
    float _1310 = (1.0 - _1304) * ((_1291 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1311 = _1304 * _1291;
    float _1339 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1343 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1347 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1648;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1373 = fma(_1347, cbModelParam._m0[26u].z, fma(_1343, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1339));
        float _1377 = fma(_1347, cbModelParam._m0[27u].z, fma(_1343, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1339));
        float _1381 = fma(_1347, cbModelParam._m0[28u].z, fma(_1343, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1339));
        float _1406 = _1339 + _1110;
        float _1407 = _1343 + _1111;
        float _1408 = _1347 + _1112;
        float _1418 = fma(_1408, cbModelParam._m0[26u].z, fma(_1407, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1406)) - _1373;
        float _1419 = fma(_1408, cbModelParam._m0[27u].z, fma(_1407, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1406)) - _1377;
        float _1420 = fma(_1408, cbModelParam._m0[28u].z, fma(_1407, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1406)) - _1381;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1373 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1377 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[34u].z) + ((((((_1381 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1476 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1442.x + (-0.5));
        float _1478 = _1476 * (_1442.y + (-0.5));
        float _1479 = _1476 * (_1442.z + (-0.5));
        float _1486 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1449.x + (-0.5));
        float _1488 = _1486 * (_1449.y + (-0.5));
        float _1489 = _1486 * (_1449.z + (-0.5));
        float _1496 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1456.x + (-0.5));
        float _1498 = _1496 * (_1456.y + (-0.5));
        float _1499 = _1496 * (_1456.z + (-0.5));
        float _1506 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1463.x + (-0.5));
        float _1508 = _1506 * (_1463.y + (-0.5));
        float _1509 = _1506 * (_1463.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1530 = (dot(vec3(_1110, _1111, _1112), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1540 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4240 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1542 + 1.0))) + _1547) * _1510;
        float _1557 = _1478 * 0.5;
        float _1558 = _1488 * 0.5;
        float _1559 = _1498 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_1110, _1111, _1112), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4273 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1584 + 1.0))) + _1589) * _1511;
        float _1599 = _1479 * 0.5;
        float _1600 = _1489 * 0.5;
        float _1601 = _1499 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_1110, _1111, _1112), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4306 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1626 + 1.0))) + _1631) * _1512;
        _1648 = _1479;
        _1650 = _1478;
        _1651 = _1477;
        _1652 = _1489;
        _1653 = _1488;
        _1654 = _1487;
        _1655 = _1499;
        _1656 = _1498;
        _1657 = _1497;
        _1658 = _1512;
        _1659 = _1511;
        _1660 = _1510;
        _1661 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1662 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1649;
        _1650 = _1649;
        _1651 = _1649;
        _1652 = _1649;
        _1653 = _1649;
        _1654 = _1649;
        _1655 = _1649;
        _1656 = _1649;
        _1657 = _1649;
        _1658 = _1649;
        _1659 = _1649;
        _1660 = _1649;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1686 = fma(_1347, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1339));
        float _1690 = fma(_1347, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1339));
        float _1694 = fma(_1347, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1339));
        float _1717 = _1339 + _1110;
        float _1718 = _1343 + _1111;
        float _1719 = _1347 + _1112;
        float _1729 = fma(_1719, cbModelParam._m0[30u].z, fma(_1718, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1717)) - _1686;
        float _1730 = fma(_1719, cbModelParam._m0[31u].z, fma(_1718, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1717)) - _1690;
        float _1731 = fma(_1719, cbModelParam._m0[32u].z, fma(_1718, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1717)) - _1694;
        float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
        float _1748 = ((_1735 * _1729) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1686 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1749 = ((_1735 * _1730) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1690 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1750 = ((_1735 * _1731) / cbModelParam._m0[35u].z) + ((((((_1694 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1752 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        vec4 _1759 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        vec4 _1766 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        vec4 _1773 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        float _1785 = exp2((_1752.w + (-0.5)) * 20.0) * 2.0;
        float _1786 = _1785 * (_1752.x + (-0.5));
        float _1787 = _1785 * (_1752.y + (-0.5));
        float _1788 = _1785 * (_1752.z + (-0.5));
        float _1795 = exp2((_1759.w + (-0.5)) * 20.0) * 2.0;
        float _1796 = _1795 * (_1759.x + (-0.5));
        float _1797 = _1795 * (_1759.y + (-0.5));
        float _1798 = _1795 * (_1759.z + (-0.5));
        float _1805 = exp2((_1766.w + (-0.5)) * 20.0) * 2.0;
        float _1806 = _1805 * (_1766.x + (-0.5));
        float _1807 = _1805 * (_1766.y + (-0.5));
        float _1808 = _1805 * (_1766.z + (-0.5));
        float _1815 = exp2((_1773.w + (-0.5)) * 20.0) * 2.0;
        float _1816 = _1815 * (_1773.x + (-0.5));
        float _1817 = _1815 * (_1773.y + (-0.5));
        float _1818 = _1815 * (_1773.z + (-0.5));
        float _1819 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1820 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1821 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1822 = _1786 * 0.5;
        float _1823 = _1796 * 0.5;
        float _1824 = _1806 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1110, _1111, _1112), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1819 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4369 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1849 + 1.0))) + _1854) * _1819;
        float _1864 = _1787 * 0.5;
        float _1865 = _1797 * 0.5;
        float _1866 = _1807 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1110, _1111, _1112), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1820 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4402 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1891 + 1.0))) + _1896) * _1820;
        float _1906 = _1788 * 0.5;
        float _1907 = _1798 * 0.5;
        float _1908 = _1808 * 0.5;
        float _1909 = dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908));
        float _1914 = (_1909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1909);
        float _1922 = (dot(vec3(_1110, _1111, _1112), vec3(_1914 * _1906, _1914 * _1907, _1914 * _1908)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1931 = sqrt(((_1907 * _1907) + (_1906 * _1906)) + (_1908 * _1908)) / (_1821 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1933 = _1932 * 2.0;
        float _1937 = (1.0 - _1932) / (_1932 + 1.0);
        float _4435 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1947 = ((((1.0 - _1938) * (_1933 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1933 + 1.0))) + _1938) * _1821;
        _1955 = _1788;
        _1956 = _1787;
        _1957 = _1786;
        _1958 = _1798;
        _1959 = _1797;
        _1960 = _1796;
        _1961 = _1808;
        _1962 = _1807;
        _1963 = _1806;
        _1964 = _1821;
        _1965 = _1820;
        _1966 = _1819;
        _1967 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1968 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
        _1969 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)));
    }
    else
    {
        _1955 = _1649;
        _1956 = _1649;
        _1957 = _1649;
        _1958 = _1649;
        _1959 = _1649;
        _1960 = _1649;
        _1961 = _1649;
        _1962 = _1649;
        _1963 = _1649;
        _1964 = _1649;
        _1965 = _1649;
        _1966 = _1649;
        _1967 = 0.0;
        _1968 = 0.0;
        _1969 = 0.0;
    }
    float _1979 = (cbModelParam._m0[1u].x * (_1967 - _1661)) + _1661;
    float _1980 = (cbModelParam._m0[1u].x * (_1968 - _1662)) + _1662;
    float _1981 = (cbModelParam._m0[1u].x * (_1969 - _1663)) + _1663;
    float _2002 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1979));
    float _2023 = _1283 * 0.5;
    float _2024 = _1284 * 0.5;
    float _2025 = _1285 * 0.5;
    float _2026 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1957, _1960, _1963, _1966));
    float _2029 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1956, _1959, _1962, _1965));
    float _2032 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1955, _1958, _1961, _1964));
    float _2066;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2039 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1648, _1652, _1655, _1658));
        float _2043 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1650, _1653, _1656, _1659));
        float _2047 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1651, _1654, _1657, _1660));
        float _2054 = dot(vec4(cbModelParam._m0[39u]), vec4(_2023, _2024, _2025, 1.0));
        _2066 = dot(vec3(isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)), isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2054) ? 0.0 : (isnan(0.0) ? _2054 : max(0.0, _2054))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2066 = 1.0;
    }
    float _2077;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2068 = dot(vec4(cbModelParam._m0[40u]), vec4(_2023, _2024, _2025, 1.0));
        _2077 = dot(vec3(isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2068) ? 0.0 : (isnan(0.0) ? _2068 : max(0.0, _2068))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2077 = 1.0;
    }
    float _2081 = (_2077 * cbModelParam._m0[1u].x) + (_2066 * (1.0 - cbModelParam._m0[1u].x));
    float _2091 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1113);
    float _2092 = isnan(_2091) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2091 : min(cbModelParam._m0[25u].z, _2091));
    float _2172;
    float _2174;
    float _2176;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2139 = fma(_1347, cbModelParam._m0[13u].z, fma(_1343, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1339)) + cbModelParam._m0[13u].w;
        float _2143 = fma(_1347, cbModelParam._m0[14u].z, fma(_1343, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1339)) + cbModelParam._m0[14u].w;
        float _2147 = fma(_1347, cbModelParam._m0[15u].z, fma(_1343, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1339)) + cbModelParam._m0[15u].w;
        float _2150 = fma(_1285, cbModelParam._m0[13u].z, fma(_1284, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1283));
        float _2153 = fma(_1285, cbModelParam._m0[14u].z, fma(_1284, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1283));
        float _2156 = fma(_1285, cbModelParam._m0[15u].z, fma(_1284, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1283));
        float _2184;
        if (_2150 > 0.0)
        {
            _2184 = abs((1.0 - _2139) / _2150);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2139 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2184 = frontier_phi_14_12_ladder;
        }
        float _2407;
        if (_2153 > 0.0)
        {
            _2407 = abs((1.0 - _2143) / _2153);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2143 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2407 = frontier_phi_23_19_ladder;
        }
        float _2664;
        if (_2156 > 0.0)
        {
            _2664 = abs((1.0 - _2147) / _2156);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2147 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2664 = frontier_phi_35_30_ladder;
        }
        float _2666 = isnan(_2407) ? _2184 : (isnan(_2184) ? _2407 : min(_2184, _2407));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _2150) + _2139;
        float _2672 = (_2667 * _2153) + _2143;
        float _2673 = (_2667 * _2156) + _2147;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2674;
        float _2678 = _2674 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 > _2678) || ((_2672 < _2676) || ((_2671 < _2676) || (_2671 > _2678))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2673, cbModelParam._m0[9u].z, fma(_2672, cbModelParam._m0[9u].y, _2671 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2673, cbModelParam._m0[10u].z, fma(_2672, cbModelParam._m0[10u].y, _2671 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2673, cbModelParam._m0[11u].z, fma(_2672, cbModelParam._m0[11u].y, _2671 * cbModelParam._m0[11u].x))), _2092);
            frontier_phi_13_35_ladder = _2801.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2801.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2801.x * cbModelParam._m0[1u].y;
        }
        _2172 = frontier_phi_13_35_ladder_2;
        _2174 = frontier_phi_13_35_ladder_1;
        _2176 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1283, _1284, _1285), _2092);
        _2172 = _2160.x * cbModelParam._m0[1u].y;
        _2174 = _2160.y * cbModelParam._m0[1u].y;
        _2176 = _2160.z * cbModelParam._m0[1u].y;
    }
    float _2180 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1113);
    float _2181 = isnan(_2180) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2180 : min(cbModelParam._m0[25u].w, _2180));
    float _2270;
    float _2272;
    float _2274;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2234 = fma(_1347, cbModelParam._m0[21u].z, fma(_1343, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1339)) + cbModelParam._m0[21u].w;
        float _2238 = fma(_1347, cbModelParam._m0[22u].z, fma(_1343, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1339)) + cbModelParam._m0[22u].w;
        float _2242 = fma(_1347, cbModelParam._m0[23u].z, fma(_1343, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1339)) + cbModelParam._m0[23u].w;
        float _2245 = fma(_1285, cbModelParam._m0[21u].z, fma(_1284, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1283));
        float _2248 = fma(_1285, cbModelParam._m0[22u].z, fma(_1284, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1283));
        float _2251 = fma(_1285, cbModelParam._m0[23u].z, fma(_1284, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1283));
        float _2412;
        if (_2245 > 0.0)
        {
            _2412 = abs((1.0 - _2234) / _2245);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2245 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2234 + 1.0) / _2245);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2412 = frontier_phi_25_21_ladder;
        }
        float _2691;
        if (_2248 > 0.0)
        {
            _2691 = abs((1.0 - _2238) / _2248);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2238 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2691 = frontier_phi_37_32_ladder;
        }
        float _2904;
        if (_2251 > 0.0)
        {
            _2904 = abs((1.0 - _2242) / _2251);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2242 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2904 = frontier_phi_46_43_ladder;
        }
        float _2906 = isnan(_2691) ? _2412 : (isnan(_2412) ? _2691 : min(_2412, _2691));
        float _2907 = isnan(_2904) ? _2906 : (isnan(_2906) ? _2904 : min(_2906, _2904));
        float _2911 = (_2907 * _2245) + _2234;
        float _2912 = (_2907 * _2248) + _2238;
        float _2913 = (_2907 * _2251) + _2242;
        float _2914 = _2907 * 9.9999997473787516355514526367188e-05;
        float _2915 = (-1.0) - _2914;
        float _2917 = _2914 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2913 > _2917) || ((_2913 < _2915) || ((_2912 > _2917) || ((_2912 < _2915) || ((_2911 < _2915) || (_2911 > _2917))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2913, cbModelParam._m0[17u].z, fma(_2912, cbModelParam._m0[17u].y, _2911 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2913, cbModelParam._m0[18u].z, fma(_2912, cbModelParam._m0[18u].y, _2911 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2913, cbModelParam._m0[19u].z, fma(_2912, cbModelParam._m0[19u].y, _2911 * cbModelParam._m0[19u].x))), _2181);
            frontier_phi_22_46_ladder = _3112.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3112.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3112.x * cbModelParam._m0[1u].z;
        }
        _2270 = frontier_phi_22_46_ladder_2;
        _2272 = frontier_phi_22_46_ladder_1;
        _2274 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2254 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1283, _1284, _1285), _2181);
        _2270 = _2254.x * cbModelParam._m0[1u].z;
        _2272 = _2254.y * cbModelParam._m0[1u].z;
        _2274 = _2254.z * cbModelParam._m0[1u].z;
    }
    float _2287 = (((_1310 * _1259) + _1311) * _1275) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2289 = (((_1310 * _1261) + _1311) * _1275) * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2291 = (((_1310 * _1262) + _1311) * _1275) * ((cbModelParam._m0[1u].w * (_2274 - _2176)) + _2176);
    float _2294 = fma(_2291, cbSceneParam._m0[89u].z, fma(_2289, cbSceneParam._m0[89u].y, _2287 * cbSceneParam._m0[89u].x));
    float _2297 = fma(_2291, cbSceneParam._m0[90u].z, fma(_2289, cbSceneParam._m0[90u].y, _2287 * cbSceneParam._m0[90u].x));
    float _2300 = fma(_2291, cbSceneParam._m0[91u].z, fma(_2289, cbSceneParam._m0[91u].y, _2287 * cbSceneParam._m0[91u].x));
    vec4 _2308 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1197, _1198));
    float _2310 = _2308.w;
    float _2322 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2310);
    float _2323 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2310);
    float _2324 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2310);
    uvec4 _2328 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2330 = _2328.x * 14u;
    uint _2331 = _2330 + 13u;
    float _2338 = _1275 + (-1.0);
    float _2343 = (cbLight._m0[_2331].x * _2338) + 1.0;
    float _2344 = (cbLight._m0[_2331].y * _2338) + 1.0;
    float _2345 = (cbLight._m0[_2331].z * _2338) + 1.0;
    float _2346 = (cbLight._m0[_2331].w * _2338) + 1.0;
    uint _2347 = _2330 + 5u;
    float _2353 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2357 = _2330 + 4u;
    float _2366 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2370 = _2330 | 1u;
    float _2381 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_1110, _1111, _1112));
    float _2384 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_1110, _1111, _1112));
    float _4571 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _4582 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2389 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2391 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2398 = ((cbLight._m0[_2347].x * _2353) * _2391) + (((cbLight._m0[_2357].x * _2322) * _2366) * _2389);
    float _2399 = ((_2353 * cbLight._m0[_2347].y) * _2391) + (((cbLight._m0[_2357].y * _2323) * _2366) * _2389);
    float _2400 = ((_2353 * cbLight._m0[_2347].z) * _2391) + (((cbLight._m0[_2357].z * _2324) * _2366) * _2389);
    uvec4 _2404 = floatBitsToUint(cbLight._m0[_2330 + 12u]);
    bool _2406 = _2404.x == 0u;
    float _2417;
    float _2419;
    float _2421;
    if (_2406)
    {
        _2417 = _2398;
        _2419 = _2399;
        _2421 = _2400;
    }
    else
    {
        uint _2425 = _2330 + 6u;
        float _2441 = (dot(vec3(cbLight._m0[_2330 + 2u].xyz), vec3(_1110, _1111, _1112)) * 0.5) + 0.5;
        float _2442 = _2441 * _2441;
        float _4593 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2443 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2444 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2417 = (((cbLight._m0[_2425].x * 0.3183098733425140380859375) * _2443) * _2444) + _2398;
        _2419 = (((cbLight._m0[_2425].y * 0.3183098733425140380859375) * _2443) * _2444) + _2399;
        _2421 = (((cbLight._m0[_2425].z * 0.3183098733425140380859375) * _2443) * _2444) + _2400;
    }
    bool _2424 = _2404.y == 0u;
    float _2462;
    float _2464;
    float _2466;
    if (_2424)
    {
        _2462 = _2417;
        _2464 = _2419;
        _2466 = _2421;
    }
    else
    {
        uint _2635 = _2330 + 7u;
        float _2651 = (dot(vec3(cbLight._m0[_2330 + 3u].xyz), vec3(_1110, _1111, _1112)) * 0.5) + 0.5;
        float _2652 = _2651 * _2651;
        float _4609 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2653 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2654 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2462 = (((cbLight._m0[_2635].x * 0.3183098733425140380859375) * _2653) * _2654) + _2417;
        _2464 = (((cbLight._m0[_2635].y * 0.3183098733425140380859375) * _2653) * _2654) + _2419;
        _2466 = (((cbLight._m0[_2635].z * 0.3183098733425140380859375) * _2653) * _2654) + _2421;
    }
    uint _2469 = _2330 + 8u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _1113) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2330].x + _1189;
    float _2485 = cbLight._m0[_2330].y + _1190;
    float _2486 = cbLight._m0[_2330].z + _1191;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_1110, _1111, _1112), vec3(cbLight._m0[_2330].xyz));
    float _4625 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _4636 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
    float _2498 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2499 = dot(vec3(_1110, _1111, _1112), vec3(_2491, _2492, _2493));
    float _4647 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2503 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2491, _2492, _2493));
    float _4658 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2507 = _2483 * _2483;
    float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
    float _2519 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2520 = 0.959999978542327880859375 - _1256;
    float _2522 = 0.959999978542327880859375 - _1257;
    float _2523 = 0.959999978542327880859375 - _1258;
    float _2530 = 1.0 - _2483;
    float _2541 = (0.5 / (((_2498 * ((_2497 * _2530) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2530) + _2483) * _2497))) * _2497;
    float _4669 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
    uint _2557 = _2330 + 9u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _1113) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2370].x + _1189;
    float _2571 = cbLight._m0[_2370].y + _1190;
    float _2572 = cbLight._m0[_2370].z + _1191;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_1110, _1111, _1112), vec3(cbLight._m0[_2370].xyz));
    float _4680 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2584 = dot(vec3(_1110, _1111, _1112), vec3(_2577, _2578, _2579));
    float _4691 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2577, _2578, _2579));
    float _4702 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2569 * _2569;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
    float _2610 = 1.0 - _2569;
    float _2620 = (0.5 / (((_2498 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2610) + _2569) * _2583))) * _2583;
    float _4713 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2622 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    float _2632 = (((((_2603 * _2520) + _1259) * cbLight._m0[_2557].x) * _2622) * _2353) + ((((cbLight._m0[_2469].x * _2322) * ((_2519 * _2520) + _1259)) * _2543) * _2366);
    float _2633 = (((((_2603 * _2522) + _1261) * cbLight._m0[_2557].y) * _2622) * _2353) + ((((cbLight._m0[_2469].y * _2323) * ((_2519 * _2522) + _1261)) * _2543) * _2366);
    float _2634 = (((((_2603 * _2523) + _1262) * cbLight._m0[_2557].z) * _2622) * _2353) + ((((cbLight._m0[_2469].z * _2324) * ((_2519 * _2523) + _1262)) * _2543) * _2366);
    float _2696;
    float _2698;
    float _2700;
    if (_2406)
    {
        _2696 = _2632;
        _2698 = _2633;
        _2700 = _2634;
    }
    else
    {
        uint _2702 = _2330 + 2u;
        uint _2706 = _2330 + 10u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _1113) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _1189;
        float _2723 = cbLight._m0[_2702].y + _1190;
        float _2724 = cbLight._m0[_2702].z + _1191;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_1110, _1111, _1112), vec3(cbLight._m0[_2702].xyz));
        float _4724 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2736 = dot(vec3(_1110, _1111, _1112), vec3(_2729, _2730, _2731));
        float _4735 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4746 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2498 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2762) + _2721) * _2735))) * _2735;
        float _4757 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2696 = (((((_2755 * _2520) + _1259) * cbLight._m0[_2706].x) * _2774) * _2775) + _2632;
        _2698 = (((((_2755 * _2522) + _1261) * cbLight._m0[_2706].y) * _2774) * _2775) + _2633;
        _2700 = (((((_2755 * _2523) + _1262) * cbLight._m0[_2706].z) * _2774) * _2775) + _2634;
    }
    float _2810;
    float _2812;
    float _2814;
    if (_2424)
    {
        _2810 = _2696;
        _2812 = _2698;
        _2814 = _2700;
    }
    else
    {
        uint _2821 = _2330 + 3u;
        uint _2825 = _2330 + 11u;
        float _2839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2821].w)) * _1113) * 0.949999988079071044921875);
        float _2840 = _2839 * _2839;
        float _2841 = cbLight._m0[_2821].x + _1189;
        float _2842 = cbLight._m0[_2821].y + _1190;
        float _2843 = cbLight._m0[_2821].z + _1191;
        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
        float _2848 = _2847 * _2841;
        float _2849 = _2847 * _2842;
        float _2850 = _2847 * _2843;
        float _2851 = dot(vec3(_1110, _1111, _1112), vec3(cbLight._m0[_2821].xyz));
        float _4773 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2855 = dot(vec3(_1110, _1111, _1112), vec3(_2848, _2849, _2850));
        float _4784 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2859 = dot(vec3(cbLight._m0[_2821].xyz), vec3(_2848, _2849, _2850));
        float _4795 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2863 = _2840 * _2840;
        float _2867 = ((_2858 * _2858) * (_2863 + (-1.0))) + 1.0;
        float _2874 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
        float _2881 = 1.0 - _2840;
        float _2891 = (0.5 / (((_2498 * ((_2854 * _2881) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2881) + _2840) * _2854))) * _2854;
        float _4806 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2863 / ((_2867 * _2867) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2810 = (((((_2874 * _2520) + _1259) * cbLight._m0[_2825].x) * _2893) * _2894) + _2696;
        _2812 = (((((_2874 * _2522) + _1261) * cbLight._m0[_2825].y) * _2893) * _2894) + _2698;
        _2814 = (((((_2874 * _2523) + _1262) * cbLight._m0[_2825].z) * _2893) * _2894) + _2700;
    }
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_2328.y == 0u)
    {
        float _2969 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2970 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2969;
        float _2971 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2969;
        float _2972 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2969;
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.x;
        uint _2996 = uint((float(_2984.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1198) / _2985))) + floor(float(uint(cbSceneParam._m0[85u].x * _1197) / _2985)));
        float _3006 = (log2(_2972 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3007 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        uint _3010 = uint(isnan(14.0) ? _3007 : (isnan(_3007) ? 14.0 : min(_3007, 14.0)));
        uvec4 _3015 = texelFetch(g_lightClusterGridBuffer, int(((_3010 << 2u) + (_2996 << 6u)) >> 2u));
        uint _3016 = _3015.x;
        uint _3017 = _2984.z;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((((1u << ((_3017 >> 4u) & 15u)) + 4294967295u) & _3016) == 0u) || ((_3017 & 240u) == 0u))
        {
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
        }
        else
        {
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            uint _3267 = 0u;
            uint _3276;
            bool _3277;
            for (;;)
            {
                _3276 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                _3277 = _3276 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3277)
                {
                    frontier_phi_61_pred = _3261;
                    frontier_phi_61_pred_1 = _3266;
                    frontier_phi_61_pred_2 = _3265;
                    frontier_phi_61_pred_3 = _3264;
                    frontier_phi_61_pred_4 = _3263;
                    frontier_phi_61_pred_5 = _3262;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3276;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3267 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2970;
                        float _3452 = _3411.y - _2971;
                        float _3453 = _3411.z - _2972;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_1216, _1219, _1222), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4832 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2970;
                        float _3487 = (-0.0) - _2971;
                        float _3488 = (-0.0) - _2972;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3503 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3504 = 1.0 - _1291;
                        float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                        float _3512 = _3511 * _3511;
                        float _3513 = _3512 * _3512;
                        float _3514 = _3493 + _3458;
                        float _3515 = _3494 + _3459;
                        float _3516 = _3495 + _3460;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3524 = dot(vec3(_1216, _1219, _1222), vec3(_3493, _3494, _3495));
                        float _4848 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3528 = dot(vec3(_1216, _1219, _1222), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                        float _4859 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                        float _3536 = _3471 * _3512;
                        float _3537 = _3536 * _3536;
                        float _3540 = ((1.0 - _3537) * _3461) + _3537;
                        float _4870 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3542 = 1.0 - _3512;
                        float _3552 = (0.5 / (((_3541 * ((_3527 * _3542) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3512) * _3527))) * _3541;
                        float _4881 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3563 = (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3535 * _3535) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3320 = (_3482 * _3430.x) + _3388;
                        _3321 = (_3482 * _3430.y) + _3389;
                        _3322 = (_3482 * _3430.z) + _3390;
                        _3317 = (_3563 * _3447.x) + _3385;
                        _3318 = (_3563 * _3447.y) + _3386;
                        _3319 = (_3563 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_61_pred = _3317;
                    frontier_phi_61_pred_1 = _3322;
                    frontier_phi_61_pred_2 = _3321;
                    frontier_phi_61_pred_3 = _3320;
                    frontier_phi_61_pred_4 = _3319;
                    frontier_phi_61_pred_5 = _3318;
                }
                _3118 = frontier_phi_61_pred;
                _3128 = frontier_phi_61_pred_1;
                _3126 = frontier_phi_61_pred_2;
                _3124 = frontier_phi_61_pred_3;
                _3122 = frontier_phi_61_pred_4;
                _3120 = frontier_phi_61_pred_5;
                uint _3268 = _3267 + 1u;
                if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3261 = _3118;
                    _3262 = _3120;
                    _3263 = _3122;
                    _3264 = _3124;
                    _3265 = _3126;
                    _3266 = _3128;
                    _3267 = _3268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
        }
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.z;
        uint _3134 = (_3132 >> 8u) & 15u;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        if (((4294967295u << _3134) & _3016) == 0u)
        {
            _3229 = _3117;
            _3231 = _3119;
            _3233 = _3121;
            _3235 = _3123;
            _3237 = _3125;
            _3239 = _3127;
        }
        else
        {
            float _3254 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
            float _3255 = _3254 * _2970;
            float _3256 = _3254 * _2971;
            float _3257 = _3254 * _2972;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3134 < ((_3132 >> 12u) & 15u))
            {
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3368 = _3117;
                float _3369 = _3119;
                float _3370 = _3121;
                float _3371 = _3123;
                float _3372 = _3125;
                float _3373 = _3127;
                uint _3374 = _3134;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3384)
                    {
                        frontier_phi_67_pred = _3371;
                        frontier_phi_67_pred_1 = _3372;
                        frontier_phi_67_pred_2 = _3373;
                        frontier_phi_67_pred_3 = _3370;
                        frontier_phi_67_pred_4 = _3369;
                        frontier_phi_67_pred_5 = _3368;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3368;
                        float _3582 = _3369;
                        float _3583 = _3370;
                        float _3584 = _3371;
                        float _3585 = _3372;
                        float _3586 = _3373;
                        uint _3587 = _3383;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2972, _3705.z, fma(_2971, _3705.y, _3705.x * _2970)) + _3705.w;
                            _3718 = !((fma(_2972, _3686.z, fma(_2971, _3686.y, _3686.x * _2970)) + _3686.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2970;
                                float _3746 = _3613.y - _2971;
                                float _3747 = _3613.z - _2972;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4892 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_1216, _1219, _1222))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2972, _3656.z, fma(_2971, _3656.y, _3656.x * _2970)) + _3656.w) / _3717;
                                float _3777 = (fma(_2972, _3671.z, fma(_2971, _3671.y, _3671.x * _2970)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4908 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _1291;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3255;
                                float _3807 = _3753 - _3256;
                                float _3808 = _3754 - _3257;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_1216, _1219, _1222), vec3((-0.0) - _3255, (-0.0) - _3256, (-0.0) - _3257));
                                float _4919 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3820 = dot(vec3(_1216, _1219, _1222), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4930 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_1216, _1219, _1222), vec3(_3752, _3753, _3754))) + _3829;
                                float _4941 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _4952 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3857 * _3641.x;
                                frontier_phi_73_pred_1 = _3857 * _3641.y;
                                frontier_phi_73_pred_2 = _3783 * _3629.z;
                                frontier_phi_73_pred_3 = _3783 * _3629.y;
                                frontier_phi_73_pred_4 = _3783 * _3629.x;
                                frontier_phi_73_pred_5 = _3857 * _3641.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3861 = frontier_phi_73_pred;
                            _3862 = frontier_phi_73_pred_1;
                            _3866 = frontier_phi_73_pred_2;
                            _3865 = frontier_phi_73_pred_3;
                            _3864 = frontier_phi_73_pred_4;
                            _3863 = frontier_phi_73_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3571;
                        frontier_phi_67_pred_1 = _3572;
                        frontier_phi_67_pred_2 = _3573;
                        frontier_phi_67_pred_3 = _3570;
                        frontier_phi_67_pred_4 = _3569;
                        frontier_phi_67_pred_5 = _3568;
                    }
                    _3236 = frontier_phi_67_pred;
                    _3238 = frontier_phi_67_pred_1;
                    _3240 = frontier_phi_67_pred_2;
                    _3234 = frontier_phi_67_pred_3;
                    _3232 = frontier_phi_67_pred_4;
                    _3230 = frontier_phi_67_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3230;
                        _3369 = _3232;
                        _3370 = _3234;
                        _3371 = _3236;
                        _3372 = _3238;
                        _3373 = _3240;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3238;
                frontier_phi_55_56_ladder_1 = _3240;
                frontier_phi_55_56_ladder_2 = _3236;
                frontier_phi_55_56_ladder_3 = _3234;
                frontier_phi_55_56_ladder_4 = _3232;
                frontier_phi_55_56_ladder_5 = _3230;
            }
            else
            {
                frontier_phi_55_56_ladder = _3125;
                frontier_phi_55_56_ladder_1 = _3127;
                frontier_phi_55_56_ladder_2 = _3123;
                frontier_phi_55_56_ladder_3 = _3121;
                frontier_phi_55_56_ladder_4 = _3119;
                frontier_phi_55_56_ladder_5 = _3117;
            }
            _3229 = frontier_phi_55_56_ladder_5;
            _3231 = frontier_phi_55_56_ladder_4;
            _3233 = frontier_phi_55_56_ladder_3;
            _3235 = frontier_phi_55_56_ladder_2;
            _3237 = frontier_phi_55_56_ladder;
            _3239 = frontier_phi_55_56_ladder_1;
        }
        float _3244 = isnan(1.0) ? _1275 : (isnan(_1275) ? 1.0 : min(_1275, 1.0));
        _3029 = (_3244 * _3235) + _2462;
        _3031 = (_3244 * _3237) + _2464;
        _3033 = (_3244 * _3239) + _2466;
        _3035 = ((_3229 * _1259) * _3244) + _2810;
        _3037 = ((_3231 * _1261) * _3244) + _2812;
        _3039 = ((_3233 * _1262) * _3244) + _2814;
    }
    else
    {
        _3029 = _2462;
        _3031 = _2464;
        _3033 = _2466;
        _3035 = _2810;
        _3037 = _2812;
        _3039 = _2814;
    }
    float _4968 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _4979 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _4990 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    uint _3059 = _271 + 6u;
    float _3067 = _1197 / cbSceneParam._m0[86u].x;
    float _3068 = _1198 / cbSceneParam._m0[86u].y;
    vec4 _3082 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, (log2((isnan(cbSceneParam._m0[77u].w) ? _1132 : (isnan(_1132) ? cbSceneParam._m0[77u].w : min(_1132, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3084 = _3082.x;
    float _3085 = _3082.y;
    float _3086 = _3082.z;
    float _3087 = _3082.w;
    float _3179;
    float _3181;
    float _3183;
    float _3185;
    if (_1132 > cbSceneParam._m0[78u].w)
    {
        float _3142 = isnan(_1132) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1132 : min(cbSceneParam._m0[80u].w, _1132));
        float _3143 = _3142 / _1132;
        float _3154 = _3143 * _1182;
        float _3155 = _1183 * _3143;
        float _3156 = (-0.0) - _3155;
        float _3157 = _3143 * _1184;
        float _3159 = (cbSceneParam._m0[77u].w * _3156) / _3142;
        float _3160 = _3159 + cbSceneParam._m0[79u].w;
        float _3161 = cbSceneParam._m0[79u].w - _3155;
        float _3167 = sqrt(((_3154 * _3154) + (_3155 * _3155)) + (_3157 * _3157));
        float _3170 = (1.0 - (cbSceneParam._m0[77u].w / _3142)) * _3167;
        float _3175 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3177 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3330;
        if (abs((_3156 - _3159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3330 = ((((_3160 > 0.0) ? exp2(_3175 * _3160) : (2.0 - exp2(_3177 * _3160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3170;
        }
        else
        {
            float _3290 = 1.0 / cbSceneParam._m0[80u].x;
            float _3291 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : max(_3160, _3161));
            float _3292 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : min(_3160, _3161));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            _3330 = ((abs(_3167 / _3156) * cbSceneParam._m0[80u].y) * ((((_3301 - _3302) * 2.0) - ((exp2(_3175 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0)))) - exp2(_3175 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))))) * _3290)) - ((exp2(_3177 * _3301) - exp2(_3177 * _3302)) * _3290))) + (_3170 * cbSceneParam._m0[80u].z);
        }
        vec4 _3332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, 1.0), 0.0);
        float _3341 = exp2((_3330 * (-1.44269502162933349609375)) * (1.0 - _3332.w));
        float _3342 = log2(_3341);
        float _3358 = log2(_3087);
        _3179 = (exp2(_3358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].x)) * _3332.x) / cbSceneParam._m0[78u].x)) + _3084;
        _3181 = (exp2(_3358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].y)) * _3332.y) / cbSceneParam._m0[78u].y)) + _3085;
        _3183 = (exp2(_3358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].z)) * _3332.z) / cbSceneParam._m0[78u].z)) + _3086;
        _3185 = _3341 * _3087;
    }
    else
    {
        _3179 = _3084;
        _3181 = _3085;
        _3183 = _3086;
        _3185 = _3087;
    }
    float _3197 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3198 = _3197 == 3.0;
    float _3199 = log2(_3185);
    float _3206 = exp2(_3199 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_3029 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1275))) + ((_3035 + ((isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))) * _2081)) * cbPerFrame._m0[3u].x));
    float _3207 = exp2(_3199 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_3031 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1275))) + ((_3037 + ((isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))) * _2081)) * cbPerFrame._m0[3u].x));
    float _3208 = exp2(_3199 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3033 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1275))) + ((_3039 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2081)) * cbPerFrame._m0[3u].x));
    float _3217 = (_3197 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3217 * (_3198 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3179)));
    SV_Target.y = _3217 * (_3198 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3181)));
    SV_Target.z = _3217 * (_3198 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3183)));
    SV_Target.w = cbInstanceData._m0[_3059].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3059].w;
}


