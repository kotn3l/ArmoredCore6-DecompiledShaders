#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1462;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3811 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3822 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3833 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _444 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _446 = _444.x;
    float _458 = dot(vec4(_446, _444.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _475 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_446 - _458) * cbMtdParam._m0[23u].w) + _458) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3844 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _483 = (_476 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _484 = (_476 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _485 = (_476 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _524 = _522.x;
    float _534 = dot(vec4(_524, _522.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _548 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_524 - _534) * cbMtdParam._m0[23u].w) + _534) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3855 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _556 = (_549 * ((_502.x * cbMtdParam._m0[13u].x) - _483)) + _483;
    float _557 = (_549 * ((_502.y * cbMtdParam._m0[13u].y) - _484)) + _484;
    float _558 = (_549 * ((_502.z * cbMtdParam._m0[13u].z) - _485)) + _485;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _596 = _594.x;
    float _606 = dot(vec4(_596, _594.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _618 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _409.z) * 2.0) - ((((_596 - _606) * cbMtdParam._m0[23u].w) + _606) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3866 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _629 = (_338.x * cbMtdParam._m0[9u].x) * ((_619 * ((_577.x * cbMtdParam._m0[14u].x) - _556)) + _556);
    float _630 = (_338.y * cbMtdParam._m0[9u].y) * ((_619 * ((_577.y * cbMtdParam._m0[14u].y) - _557)) + _557);
    float _631 = (_338.z * cbMtdParam._m0[9u].z) * ((_619 * ((_577.z * cbMtdParam._m0[14u].z) - _558)) + _558);
    float _635 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _629;
    float _638 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _630;
    float _641 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _631;
    float _649 = (((_629 - _635) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _635) * 4.55000019073486328125;
    float _651 = (((_630 - _638) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _638) * 4.55000019073486328125;
    float _653 = (((_631 - _641) * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) + _641) * 4.55000019073486328125;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _709 = _705.z;
    float _716 = ((_688.x - _707) * _476) + _707;
    float _717 = ((_688.y - _708) * _476) + _708;
    float _718 = ((_688.z - _709) * _476) + _709;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _741 = ((_730.x - _716) * _549) + _716;
    float _742 = ((_730.y - _717) * _549) + _717;
    float _743 = ((_730.z - _718) * _549) + _718;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _768 = ((_755.z - _743) * _619) + _743;
    float _771 = ((((_755.x - _741) * _619) + _741) * 2.0) + (-1.0);
    float _772 = ((((_755.y - _742) * _619) + _742) * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3877 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _778 = sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))));
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _810 = (_771 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_665.x * 2.0) + (-1.0)))) + (((_798.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _811 = (_772 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_665.y * 2.0) + (-1.0)))) + (((_798.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _837 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _839 = _837.x;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _839) * _476) + _839;
    float _874 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _856) * _549) + _856;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _301) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _302) + cbTextureTilingScale._m0[10u].w)).x - _874) * _619) + _874;
    float _896 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _892) * cbMtdParam._m0[19u].z) + _892;
    float _901 = (((_665.z - _768) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _768;
    float _905 = ((_798.z - _901) * cbMtdParam._m0[19u].w) + _901;
    float _909 = cbMtdParam._m0[22u].x + _798.w;
    float _912 = fma(_778, _248 * NORMAL.x, fma(_811, _255 * TANGENT.x, (_241 * _233) * _810));
    float _915 = fma(_778, _248 * NORMAL.y, fma(_811, _255 * TANGENT.y, (_241 * _234) * _810));
    float _918 = fma(_778, _248 * NORMAL.z, fma(_811, _255 * TANGENT.z, (_241 * _235) * _810));
    float _922 = inversesqrt(dot(vec3(_912, _915, _918), vec3(_912, _915, _918)));
    float _923 = _922 * _912;
    float _924 = _922 * _915;
    float _925 = _922 * _918;
    float _3888 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _926 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _3910 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3921 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3932 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3943 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _931 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _945 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _995 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _985);
    float _996 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _985);
    float _997 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _985);
    float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
    float _1002 = _995 * _1001;
    float _1003 = _996 * _1001;
    float _1004 = _997 * _1001;
    float _1010 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1011 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1029 = fma(_925, cbSceneParam._m0[5u].z, fma(_924, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _923));
    float _1032 = fma(_925, cbSceneParam._m0[6u].z, fma(_924, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _923));
    float _1035 = fma(_925, cbSceneParam._m0[7u].z, fma(_924, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _923));
    uint _1049 = (_282 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1055 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_1049].x;
    float _1056 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_1049].y;
    float _1057 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_1049].z;
    float _3954 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1061 = 1.0 - _931;
    float _1062 = _1058 * _1061;
    float _1063 = _1059 * _1061;
    float _1064 = _1060 * _1061;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _931;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _931;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _931;
    float _1072 = _1069 + 0.039999999105930328369140625;
    float _1074 = _1070 + 0.039999999105930328369140625;
    float _1075 = _1071 + 0.039999999105930328369140625;
    vec4 _1084 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1010, cbSceneParam._m0[86u].y * _1011));
    float _1088 = ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * TEXCOORD_5.w) * _1084.x;
    float _1089 = dot(vec3(_923, _924, _925), vec3(_1002, _1003, _1004));
    float _1092 = _1089 * 2.0;
    float _1096 = (_1092 * _923) - _1002;
    float _1097 = (_1092 * _924) - _1003;
    float _1098 = (_1092 * _925) - _1004;
    float _1102 = abs(dot(vec3(_1002, _1003, _1004), vec3(_923, _924, _925)));
    float _3987 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1104 = sqrt(_926);
    float _1117 = exp2((_1104 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1104 * 3.0));
    float _1123 = (1.0 - _1117) * ((_1104 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1124 = _1117 * _1104;
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1160, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152));
        float _1190 = fma(_1160, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152));
        float _1194 = fma(_1160, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152));
        float _1219 = _1152 + _923;
        float _1220 = _1156 + _924;
        float _1221 = _1160 + _925;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_923, _924, _925), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4035 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_923, _924, _925), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4068 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_923, _924, _925), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4101 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1499 = fma(_1160, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152));
        float _1503 = fma(_1160, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152));
        float _1507 = fma(_1160, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152));
        float _1530 = _1152 + _923;
        float _1531 = _1156 + _924;
        float _1532 = _1160 + _925;
        float _1542 = fma(_1532, cbModelParam._m0[30u].z, fma(_1531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1530)) - _1499;
        float _1543 = fma(_1532, cbModelParam._m0[31u].z, fma(_1531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1530)) - _1503;
        float _1544 = fma(_1532, cbModelParam._m0[32u].z, fma(_1531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1530)) - _1507;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1499 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1503 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[35u].z) + ((((((_1507 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1598 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1565.x + (-0.5));
        float _1600 = _1598 * (_1565.y + (-0.5));
        float _1601 = _1598 * (_1565.z + (-0.5));
        float _1608 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1572.x + (-0.5));
        float _1610 = _1608 * (_1572.y + (-0.5));
        float _1611 = _1608 * (_1572.z + (-0.5));
        float _1618 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1579.x + (-0.5));
        float _1620 = _1618 * (_1579.y + (-0.5));
        float _1621 = _1618 * (_1579.z + (-0.5));
        float _1628 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1586.x + (-0.5));
        float _1630 = _1628 * (_1586.y + (-0.5));
        float _1631 = _1628 * (_1586.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_923, _924, _925), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4164 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1662 + 1.0))) + _1667) * _1632;
        float _1677 = _1600 * 0.5;
        float _1678 = _1610 * 0.5;
        float _1679 = _1620 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_923, _924, _925), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4197 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1704 + 1.0))) + _1709) * _1633;
        float _1719 = _1601 * 0.5;
        float _1720 = _1611 * 0.5;
        float _1721 = _1621 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_923, _924, _925), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4230 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1746 + 1.0))) + _1751) * _1634;
        _1768 = _1601;
        _1769 = _1600;
        _1770 = _1599;
        _1771 = _1611;
        _1772 = _1610;
        _1773 = _1609;
        _1774 = _1621;
        _1775 = _1620;
        _1776 = _1619;
        _1777 = _1634;
        _1778 = _1633;
        _1779 = _1632;
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1462;
        _1769 = _1462;
        _1770 = _1462;
        _1771 = _1462;
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1474)) + _1474;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1475)) + _1475;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1476)) + _1476;
    float _1815 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1792));
    float _1836 = _1096 * 0.5;
    float _1837 = _1097 * 0.5;
    float _1838 = _1098 * 0.5;
    float _1839 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1842 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1845 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1879;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1852 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1856 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1860 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1867 = dot(vec4(cbModelParam._m0[39u]), vec4(_1836, _1837, _1838, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1890;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1881 = dot(vec4(cbModelParam._m0[40u]), vec4(_1836, _1837, _1838, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1894 = (_1890 * cbModelParam._m0[1u].x) + (_1879 * (1.0 - cbModelParam._m0[1u].x));
    float _1904 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _926);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1904 : min(cbModelParam._m0[25u].z, _1904));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1160, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1160, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1160, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1098, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096));
        float _1967 = fma(_1098, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096));
        float _1970 = fma(_1098, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1998 = frontier_phi_14_12_ladder;
        }
        float _2222;
        if (_1967 > 0.0)
        {
            _2222 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2222 = frontier_phi_23_19_ladder;
        }
        float _2479;
        if (_1970 > 0.0)
        {
            _2479 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2479 = frontier_phi_35_30_ladder;
        }
        float _2481 = isnan(_2222) ? _1998 : (isnan(_1998) ? _2222 : min(_1998, _2222));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1964) + _1953;
        float _2487 = (_2482 * _1967) + _1957;
        float _2488 = (_2482 * _1970) + _1961;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2489;
        float _2493 = _2489 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 > _2493) || ((_2487 < _2491) || ((_2486 < _2491) || (_2486 > _2493))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2488, cbModelParam._m0[9u].z, fma(_2487, cbModelParam._m0[9u].y, _2486 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2488, cbModelParam._m0[10u].z, fma(_2487, cbModelParam._m0[10u].y, _2486 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2488, cbModelParam._m0[11u].z, fma(_2487, cbModelParam._m0[11u].y, _2486 * cbModelParam._m0[11u].x))), _1905);
            frontier_phi_13_35_ladder = _2616.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2616.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2616.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_13_35_ladder_2;
        _1988 = frontier_phi_13_35_ladder_1;
        _1990 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1096, _1097, _1098), _1905);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _926);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2085;
    float _2087;
    float _2089;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2049 = fma(_1160, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152)) + cbModelParam._m0[21u].w;
        float _2053 = fma(_1160, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152)) + cbModelParam._m0[22u].w;
        float _2057 = fma(_1160, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152)) + cbModelParam._m0[23u].w;
        float _2060 = fma(_1098, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096));
        float _2063 = fma(_1098, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096));
        float _2066 = fma(_1098, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096));
        float _2227;
        if (_2060 > 0.0)
        {
            _2227 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2227 = frontier_phi_25_21_ladder;
        }
        float _2506;
        if (_2063 > 0.0)
        {
            _2506 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2506 = frontier_phi_37_32_ladder;
        }
        float _2719;
        if (_2066 > 0.0)
        {
            _2719 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2719 = frontier_phi_46_43_ladder;
        }
        float _2721 = isnan(_2506) ? _2227 : (isnan(_2227) ? _2506 : min(_2227, _2506));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2060) + _2049;
        float _2727 = (_2722 * _2063) + _2053;
        float _2728 = (_2722 * _2066) + _2057;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_22_46_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2085 = frontier_phi_22_46_ladder_2;
        _2087 = frontier_phi_22_46_ladder_1;
        _2089 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1096, _1097, _1098), _1995);
        _2085 = _2069.x * cbModelParam._m0[1u].z;
        _2087 = _2069.y * cbModelParam._m0[1u].z;
        _2089 = _2069.z * cbModelParam._m0[1u].z;
    }
    float _2102 = (((_1123 * _1072) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2104 = (((_1123 * _1074) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2106 = (((_1123 * _1075) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2109 = fma(_2106, cbSceneParam._m0[89u].z, fma(_2104, cbSceneParam._m0[89u].y, _2102 * cbSceneParam._m0[89u].x));
    float _2112 = fma(_2106, cbSceneParam._m0[90u].z, fma(_2104, cbSceneParam._m0[90u].y, _2102 * cbSceneParam._m0[90u].x));
    float _2115 = fma(_2106, cbSceneParam._m0[91u].z, fma(_2104, cbSceneParam._m0[91u].y, _2102 * cbSceneParam._m0[91u].x));
    vec4 _2123 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1010, _1011));
    float _2125 = _2123.w;
    float _2137 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2125);
    float _2138 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2125);
    float _2139 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2125);
    uvec4 _2143 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2145 = _2143.x * 14u;
    uint _2146 = _2145 + 13u;
    float _2153 = _1088 + (-1.0);
    float _2158 = (cbLight._m0[_2146].x * _2153) + 1.0;
    float _2159 = (cbLight._m0[_2146].y * _2153) + 1.0;
    float _2160 = (cbLight._m0[_2146].z * _2153) + 1.0;
    float _2161 = (cbLight._m0[_2146].w * _2153) + 1.0;
    uint _2162 = _2145 + 5u;
    float _2168 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2172 = _2145 + 4u;
    float _2181 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2185 = _2145 | 1u;
    float _2196 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_923, _924, _925));
    float _2199 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_923, _924, _925));
    float _4366 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _4377 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2204 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2206 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2213 = ((cbLight._m0[_2162].x * _2168) * _2206) + (((cbLight._m0[_2172].x * _2137) * _2181) * _2204);
    float _2214 = ((_2168 * cbLight._m0[_2162].y) * _2206) + (((cbLight._m0[_2172].y * _2138) * _2181) * _2204);
    float _2215 = ((_2168 * cbLight._m0[_2162].z) * _2206) + (((cbLight._m0[_2172].z * _2139) * _2181) * _2204);
    uvec4 _2219 = floatBitsToUint(cbLight._m0[_2145 + 12u]);
    bool _2221 = _2219.x == 0u;
    float _2232;
    float _2234;
    float _2236;
    if (_2221)
    {
        _2232 = _2213;
        _2234 = _2214;
        _2236 = _2215;
    }
    else
    {
        uint _2240 = _2145 + 6u;
        float _2256 = (dot(vec3(cbLight._m0[_2145 + 2u].xyz), vec3(_923, _924, _925)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4388 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2259 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2232 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2213;
        _2234 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2214;
        _2236 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2215;
    }
    bool _2239 = _2219.y == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2239)
    {
        _2277 = _2232;
        _2279 = _2234;
        _2281 = _2236;
    }
    else
    {
        uint _2450 = _2145 + 7u;
        float _2466 = (dot(vec3(cbLight._m0[_2145 + 3u].xyz), vec3(_923, _924, _925)) * 0.5) + 0.5;
        float _2467 = _2466 * _2466;
        float _4404 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2468 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2469 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2277 = (((cbLight._m0[_2450].x * 0.3183098733425140380859375) * _2468) * _2469) + _2232;
        _2279 = (((cbLight._m0[_2450].y * 0.3183098733425140380859375) * _2468) * _2469) + _2234;
        _2281 = (((cbLight._m0[_2450].z * 0.3183098733425140380859375) * _2468) * _2469) + _2236;
    }
    uint _2284 = _2145 + 8u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _926) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2145].x + _1002;
    float _2300 = cbLight._m0[_2145].y + _1003;
    float _2301 = cbLight._m0[_2145].z + _1004;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2145].xyz));
    float _4420 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _2313 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2314 = dot(vec3(_923, _924, _925), vec3(_2306, _2307, _2308));
    float _4442 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2306, _2307, _2308));
    float _4453 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2298 * _2298;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2335 = 0.959999978542327880859375 - _1069;
    float _2337 = 0.959999978542327880859375 - _1070;
    float _2338 = 0.959999978542327880859375 - _1071;
    float _2345 = 1.0 - _2298;
    float _2356 = (0.5 / (((_2313 * ((_2312 * _2345) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2345) + _2298) * _2312))) * _2312;
    float _4464 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    uint _2372 = _2145 + 9u;
    float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _926) * 0.949999988079071044921875);
    float _2384 = _2383 * _2383;
    float _2385 = cbLight._m0[_2185].x + _1002;
    float _2386 = cbLight._m0[_2185].y + _1003;
    float _2387 = cbLight._m0[_2185].z + _1004;
    float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
    float _2392 = _2391 * _2385;
    float _2393 = _2391 * _2386;
    float _2394 = _2391 * _2387;
    float _2395 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2185].xyz));
    float _4475 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2399 = dot(vec3(_923, _924, _925), vec3(_2392, _2393, _2394));
    float _4486 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2392, _2393, _2394));
    float _4497 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2384 * _2384;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2425 = 1.0 - _2384;
    float _2435 = (0.5 / (((_2313 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2425) + _2384) * _2398))) * _2398;
    float _4508 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2437 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    float _2447 = (((((_2418 * _2335) + _1072) * cbLight._m0[_2372].x) * _2437) * _2168) + ((((cbLight._m0[_2284].x * _2137) * ((_2334 * _2335) + _1072)) * _2358) * _2181);
    float _2448 = (((((_2418 * _2337) + _1074) * cbLight._m0[_2372].y) * _2437) * _2168) + ((((cbLight._m0[_2284].y * _2138) * ((_2334 * _2337) + _1074)) * _2358) * _2181);
    float _2449 = (((((_2418 * _2338) + _1075) * cbLight._m0[_2372].z) * _2437) * _2168) + ((((cbLight._m0[_2284].z * _2139) * ((_2334 * _2338) + _1075)) * _2358) * _2181);
    float _2511;
    float _2513;
    float _2515;
    if (_2221)
    {
        _2511 = _2447;
        _2513 = _2448;
        _2515 = _2449;
    }
    else
    {
        uint _2517 = _2145 + 2u;
        uint _2521 = _2145 + 10u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _926) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _1002;
        float _2538 = cbLight._m0[_2517].y + _1003;
        float _2539 = cbLight._m0[_2517].z + _1004;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2517].xyz));
        float _4519 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2551 = dot(vec3(_923, _924, _925), vec3(_2544, _2545, _2546));
        float _4530 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4541 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2577 = 1.0 - _2536;
        float _2587 = (0.5 / (((_2313 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2577) + _2536) * _2550))) * _2550;
        float _4552 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2511 = (((((_2570 * _2335) + _1072) * cbLight._m0[_2521].x) * _2589) * _2590) + _2447;
        _2513 = (((((_2570 * _2337) + _1074) * cbLight._m0[_2521].y) * _2589) * _2590) + _2448;
        _2515 = (((((_2570 * _2338) + _1075) * cbLight._m0[_2521].z) * _2589) * _2590) + _2449;
    }
    float _2625;
    float _2627;
    float _2629;
    if (_2239)
    {
        _2625 = _2511;
        _2627 = _2513;
        _2629 = _2515;
    }
    else
    {
        uint _2636 = _2145 + 3u;
        uint _2640 = _2145 + 11u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _926) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _1002;
        float _2657 = cbLight._m0[_2636].y + _1003;
        float _2658 = cbLight._m0[_2636].z + _1004;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2636].xyz));
        float _4568 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2670 = dot(vec3(_923, _924, _925), vec3(_2663, _2664, _2665));
        float _4579 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4590 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
        float _2696 = 1.0 - _2655;
        float _2706 = (0.5 / (((_2313 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2696) + _2655) * _2669))) * _2669;
        float _4601 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2625 = (((((_2689 * _2335) + _1072) * cbLight._m0[_2640].x) * _2708) * _2709) + _2511;
        _2627 = (((((_2689 * _2337) + _1074) * cbLight._m0[_2640].y) * _2708) * _2709) + _2513;
        _2629 = (((((_2689 * _2338) + _1075) * cbLight._m0[_2640].z) * _2708) * _2709) + _2515;
    }
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_2143.y == 0u)
    {
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2784;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2784;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2784;
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1011) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _1010) / _2800)));
        float _2821 = (log2(_2787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            uint _3083 = 0u;
            uint _3092;
            bool _3093;
            for (;;)
            {
                _3092 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                _3093 = _3092 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3093)
                {
                    frontier_phi_61_pred = _3077;
                    frontier_phi_61_pred_1 = _3082;
                    frontier_phi_61_pred_2 = _3081;
                    frontier_phi_61_pred_3 = _3080;
                    frontier_phi_61_pred_4 = _3079;
                    frontier_phi_61_pred_5 = _3078;
                }
                else
                {
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    uint _3207;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3092;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    for (;;)
                    {
                        uint _3211 = uint(findLSB(_3207)) + (_3083 << 5u);
                        uint _3208 = (_3207 + 4294967295u) & _3207;
                        uint _3213 = _3211 * 48u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3233 = (_3211 * 48u) + 4u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3252 = (_3211 * 48u) + 8u;
                        vec3 _3263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x));
                        float _3267 = _3227.x - _2785;
                        float _3268 = _3227.y - _2786;
                        float _3269 = _3227.z - _2787;
                        float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                        float _3273 = inversesqrt(_3270);
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3277 = dot(vec3(_1029, _1032, _1035), vec3(_3274, _3275, _3276));
                        float _3282 = 1.0 - (_3270 * _3227.w);
                        float _4627 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3284 = sqrt(_3270) * _3246.w;
                        float _3287 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3277) + _3288;
                        float _3294 = _3284 * _3284;
                        float _3298 = ((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3283) / ((_3294 * 0.699999988079071044921875) + 1.0);
                        float _3302 = (-0.0) - _2785;
                        float _3303 = (-0.0) - _2786;
                        float _3304 = (-0.0) - _2787;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3319 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _1104;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_1029, _1032, _1035), vec3(_3309, _3310, _3311));
                        float _4643 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3344 = dot(vec3(_1029, _1032, _1035), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4654 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3287 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3277) + _3353;
                        float _4665 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4676 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3351 * _3351) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125))) * _3283;
                        _3136 = (_3298 * _3246.x) + _3204;
                        _3137 = (_3298 * _3246.y) + _3205;
                        _3138 = (_3298 * _3246.z) + _3206;
                        _3133 = (_3379 * _3263.x) + _3201;
                        _3134 = (_3379 * _3263.y) + _3202;
                        _3135 = (_3379 * _3263.z) + _3203;
                        if (_3208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3208;
                        }
                    }
                    frontier_phi_61_pred = _3133;
                    frontier_phi_61_pred_1 = _3138;
                    frontier_phi_61_pred_2 = _3137;
                    frontier_phi_61_pred_3 = _3136;
                    frontier_phi_61_pred_4 = _3135;
                    frontier_phi_61_pred_5 = _3134;
                }
                _2933 = frontier_phi_61_pred;
                _2943 = frontier_phi_61_pred_1;
                _2941 = frontier_phi_61_pred_2;
                _2939 = frontier_phi_61_pred_3;
                _2937 = frontier_phi_61_pred_4;
                _2935 = frontier_phi_61_pred_5;
                uint _3084 = _3083 + 1u;
                if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3077 = _2933;
                    _3078 = _2935;
                    _3079 = _2937;
                    _3080 = _2939;
                    _3081 = _2941;
                    _3082 = _2943;
                    _3083 = _3084;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        if (((4294967295u << _2949) & _2831) == 0u)
        {
            _3045 = _2932;
            _3047 = _2934;
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
        }
        else
        {
            float _3070 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
            float _3071 = _3070 * _2785;
            float _3072 = _3070 * _2786;
            float _3073 = _3070 * _2787;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3184 = _2932;
                float _3185 = _2934;
                float _3186 = _2936;
                float _3187 = _2938;
                float _3188 = _2940;
                float _3189 = _2942;
                uint _3190 = _2949;
                uint _3199;
                bool _3200;
                for (;;)
                {
                    _3199 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                    _3200 = _3199 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3200)
                    {
                        frontier_phi_67_pred = _3187;
                        frontier_phi_67_pred_1 = _3188;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3186;
                        frontier_phi_67_pred_4 = _3185;
                        frontier_phi_67_pred_5 = _3184;
                    }
                    else
                    {
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        uint _3403 = _3199;
                        uint _3404;
                        vec4 _3429;
                        float _3430;
                        vec4 _3445;
                        vec3 _3457;
                        vec4 _3472;
                        vec4 _3487;
                        float _3533;
                        bool _3534;
                        for (;;)
                        {
                            uint _3414 = ((_3190 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3403));
                            _3404 = (_3403 + 4294967295u) & _3403;
                            uint _3416 = _3414 * 40u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3430 = _3429.w;
                            uint _3432 = (_3414 * 40u) + 4u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3414 * 40u) + 8u;
                            _3457 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x));
                            uint _3459 = (_3414 * 40u) + 16u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3414 * 40u) + 20u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3414 * 40u) + 24u;
                            vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3508 = (_3414 * 40u) + 28u;
                            vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            _3533 = fma(_2787, _3521.z, fma(_2786, _3521.y, _3521.x * _2785)) + _3521.w;
                            _3534 = !((fma(_2787, _3502.z, fma(_2786, _3502.y, _3502.x * _2785)) + _3502.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3534)
                            {
                                float _3561 = _3429.x - _2785;
                                float _3562 = _3429.y - _2786;
                                float _3563 = _3429.z - _2787;
                                float _3564 = dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563));
                                float _3567 = inversesqrt(_3564);
                                float _3568 = _3567 * _3561;
                                float _3569 = _3567 * _3562;
                                float _3570 = _3567 * _3563;
                                float _3574 = 1.0 - (_3564 / (_3430 * _3430));
                                float _4687 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3579 = sqrt(_3564) * _3445.w;
                                float _3581 = 1.39999997615814208984375 / (_3579 + 1.39999997615814208984375);
                                float _3582 = _3581 * _3581;
                                float _3585 = ((1.0 - _3582) * dot(vec3(_3568, _3569, _3570), vec3(_1029, _1032, _1035))) + _3582;
                                float _3588 = _3579 * _3579;
                                float _3592 = (fma(_2787, _3472.z, fma(_2786, _3472.y, _3472.x * _2785)) + _3472.w) / _3533;
                                float _3593 = (fma(_2787, _3487.z, fma(_2786, _3487.y, _3487.x * _2785)) + _3487.w) / _3533;
                                float _3597 = 1.0 - dot(vec2(_3592, _3593), vec2(_3592, _3593));
                                float _4703 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3599 = _3598 * (((isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0))) * _3575) / ((_3588 * 0.699999988079071044921875) + 1.0));
                                float _3611 = exp2(log2(1.0 / ((_3588 * 3.5) + 5.0)) * 0.25);
                                float _3612 = 1.0 - _1104;
                                float _3619 = sqrt(1.0 - ((1.0 - (_3612 * _3612)) * (1.0 - (_3611 * _3611))));
                                float _3620 = _3619 * _3619;
                                float _3621 = _3620 * _3620;
                                float _3622 = _3568 - _3071;
                                float _3623 = _3569 - _3072;
                                float _3624 = _3570 - _3073;
                                float _3628 = inversesqrt(dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624)));
                                float _3632 = dot(vec3(_1029, _1032, _1035), vec3((-0.0) - _3071, (-0.0) - _3072, (-0.0) - _3073));
                                float _4714 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3635 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3636 = dot(vec3(_1029, _1032, _1035), vec3(_3628 * _3622, _3628 * _3623, _3628 * _3624));
                                float _4725 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3643 = ((_3639 * _3639) * (_3621 + (-1.0))) + 1.0;
                                float _3644 = _3581 * _3620;
                                float _3645 = _3644 * _3644;
                                float _3651 = ((1.0 - _3645) * dot(vec3(_1029, _1032, _1035), vec3(_3568, _3569, _3570))) + _3645;
                                float _4736 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3653 = 1.0 - _3620;
                                float _3663 = (0.5 / (((_3652 * ((_3635 * _3653) + _3620)) + 9.9999999392252902907785028219223e-09) + (((_3652 * _3653) + _3620) * _3635))) * _3652;
                                float _4747 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3673 = (_3598 * _3575) * (((_3621 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3643 * _3643) * ((_3588 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3673 * _3457.x;
                                frontier_phi_73_pred_1 = _3673 * _3457.y;
                                frontier_phi_73_pred_2 = _3599 * _3445.z;
                                frontier_phi_73_pred_3 = _3599 * _3445.y;
                                frontier_phi_73_pred_4 = _3599 * _3445.x;
                                frontier_phi_73_pred_5 = _3673 * _3457.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3677 = frontier_phi_73_pred;
                            _3678 = frontier_phi_73_pred_1;
                            _3682 = frontier_phi_73_pred_2;
                            _3681 = frontier_phi_73_pred_3;
                            _3680 = frontier_phi_73_pred_4;
                            _3679 = frontier_phi_73_pred_5;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            if (_3404 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3404;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3387;
                        frontier_phi_67_pred_1 = _3388;
                        frontier_phi_67_pred_2 = _3389;
                        frontier_phi_67_pred_3 = _3386;
                        frontier_phi_67_pred_4 = _3385;
                        frontier_phi_67_pred_5 = _3384;
                    }
                    _3052 = frontier_phi_67_pred;
                    _3054 = frontier_phi_67_pred_1;
                    _3056 = frontier_phi_67_pred_2;
                    _3050 = frontier_phi_67_pred_3;
                    _3048 = frontier_phi_67_pred_4;
                    _3046 = frontier_phi_67_pred_5;
                    uint _3191 = _3190 + 1u;
                    if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3184 = _3046;
                        _3185 = _3048;
                        _3186 = _3050;
                        _3187 = _3052;
                        _3188 = _3054;
                        _3189 = _3056;
                        _3190 = _3191;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3054;
                frontier_phi_55_56_ladder_1 = _3056;
                frontier_phi_55_56_ladder_2 = _3052;
                frontier_phi_55_56_ladder_3 = _3050;
                frontier_phi_55_56_ladder_4 = _3048;
                frontier_phi_55_56_ladder_5 = _3046;
            }
            else
            {
                frontier_phi_55_56_ladder = _2940;
                frontier_phi_55_56_ladder_1 = _2942;
                frontier_phi_55_56_ladder_2 = _2938;
                frontier_phi_55_56_ladder_3 = _2936;
                frontier_phi_55_56_ladder_4 = _2934;
                frontier_phi_55_56_ladder_5 = _2932;
            }
            _3045 = frontier_phi_55_56_ladder_5;
            _3047 = frontier_phi_55_56_ladder_4;
            _3049 = frontier_phi_55_56_ladder_3;
            _3051 = frontier_phi_55_56_ladder_2;
            _3053 = frontier_phi_55_56_ladder;
            _3055 = frontier_phi_55_56_ladder_1;
        }
        float _3060 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
        _2844 = (_3060 * _3051) + _2277;
        _2846 = (_3060 * _3053) + _2279;
        _2848 = (_3060 * _3055) + _2281;
        _2850 = ((_3045 * _1072) * _3060) + _2625;
        _2852 = ((_3047 * _1074) * _3060) + _2627;
        _2854 = ((_3049 * _1075) * _3060) + _2629;
    }
    else
    {
        _2844 = _2277;
        _2846 = _2279;
        _2848 = _2281;
        _2850 = _2625;
        _2852 = _2627;
        _2854 = _2629;
    }
    float _4763 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4774 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4785 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    uint _2874 = _282 + 6u;
    float _2882 = _1010 / cbSceneParam._m0[86u].x;
    float _2883 = _1011 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _945 : (isnan(_945) ? cbSceneParam._m0[77u].w : min(_945, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_945 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_945) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _945 : min(cbSceneParam._m0[80u].w, _945));
        float _2958 = _2957 / _945;
        float _2969 = _2958 * _995;
        float _2970 = _996 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2973 = _2958 * _997;
        float _2975 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2976 = _2975 + cbSceneParam._m0[79u].w;
        float _2977 = cbSceneParam._m0[79u].w - _2970;
        float _2983 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2973 * _2973));
        float _2986 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2983;
        float _2991 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2993 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3146;
        if (abs((_2971 - _2975) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3146 = ((((_2976 > 0.0) ? exp2(_2991 * _2976) : (2.0 - exp2(_2993 * _2976))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2986;
        }
        else
        {
            float _3106 = 1.0 / cbSceneParam._m0[80u].x;
            float _3107 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : max(_2976, _2977));
            float _3108 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : min(_2976, _2977));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            _3146 = ((abs(_2983 / _2971) * cbSceneParam._m0[80u].y) * ((((_3117 - _3118) * 2.0) - ((exp2(_2991 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0)))) - exp2(_2991 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))))) * _3106)) - ((exp2(_2993 * _3117) - exp2(_2993 * _3118)) * _3106))) + (_2986 * cbSceneParam._m0[80u].z);
        }
        vec4 _3148 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3157 = exp2((_3146 * (-1.44269502162933349609375)) * (1.0 - _3148.w));
        float _3158 = log2(_3157);
        float _3174 = log2(_2902);
        _2995 = (exp2(_3174 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].x)) * _3148.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2997 = (exp2(_3174 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].y)) * _3148.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2999 = (exp2(_3174 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].z)) * _3148.z) / cbSceneParam._m0[78u].z)) + _2901;
        _3001 = _3157 * _2902;
    }
    else
    {
        _2995 = _2899;
        _2997 = _2900;
        _2999 = _2901;
        _3001 = _2902;
    }
    float _3013 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3014 = _3013 == 3.0;
    float _3015 = log2(_3001);
    float _3022 = exp2(_3015 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2844 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1088))) + ((_2850 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3023 = exp2(_3015 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2846 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1088))) + ((_2852 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3024 = exp2(_3015 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2848 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1088))) + ((_2854 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3033 = (_3013 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3033 * (_3014 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2995)));
    SV_Target.y = _3033 * (_3014 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2997)));
    SV_Target.z = _3033 * (_3014 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.w = cbInstanceData._m0[_2874].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
}


