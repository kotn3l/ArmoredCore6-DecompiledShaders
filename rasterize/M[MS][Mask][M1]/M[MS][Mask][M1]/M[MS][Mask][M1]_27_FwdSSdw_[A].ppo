#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1410;
float _3815;
float _3816;
float _3817;
float _3818;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3827 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _443 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_430 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325);
    float _446 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_430 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326);
    float _449 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_430 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327);
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _484 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _488 = _484.z;
    float _497 = ((_467.z - _488) * _430) + _488;
    float _500 = ((((_467.x - _486) * _430) + _486) * 2.0) + (-1.0);
    float _502 = ((((_467.y - _487) * _430) + _487) * 2.0) + (-1.0);
    float _503 = dot(vec2(_500, _502), vec2(_500, _502));
    float _3838 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _508 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _536 = (((_524.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _500;
    float _537 = (((_524.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _502;
    float _540 = fma(_508, _245, fma(_537, _252, _536 * _238));
    float _543 = fma(_508, _246, fma(_537, _253, _536 * _239));
    float _546 = fma(_508, _247, fma(_537, _254, _536 * _240));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _579 = _577.x;
    float _580 = 1.0 - _579;
    float _589 = (cbMtdParam._m0[19u].x + dot(vec4(_550 * _540, _550 * _543, _550 * _546, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_579 - _580) * cbMtdParam._m0[24u].z) + _580) * cbMtdParam._m0[21u].z);
    float _3849 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _592 = (-0.0) - cbMtdParam._m0[24u].x;
    float _594 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
    float _602 = _590 - ((_590 * TEXCOORD_8.x) * _595);
    float _603 = _590 - ((_590 * TEXCOORD_8.y) * _595);
    float _604 = _590 - ((_590 * TEXCOORD_8.z) * _595);
    float _611 = (_602 * (cbMtdParam._m0[17u].x - _443)) + _443;
    float _612 = (_603 * (cbMtdParam._m0[17u].y - _446)) + _446;
    float _613 = (_604 * (cbMtdParam._m0[17u].z - _449)) + _449;
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _654 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_627 - _628) * cbMtdParam._m0[24u].w) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3870 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _663 = ((((cbMtdParam._m0[10u].x - _611) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _655) + _611;
    float _664 = ((((cbMtdParam._m0[10u].y - _612) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _655) + _612;
    float _665 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _613)) * _655) + _613;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _693 = _691.x;
    float _710 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _693) * _430) + _693;
    float _714 = ((_677.x - _710) * cbMtdParam._m0[19u].z) + _710;
    float _716 = _714 - (_714 * _602);
    float _718 = _716 - (_716 * _655);
    float _722 = (cbMtdParam._m0[19u].w * (_524.z - _497)) + _497;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _743 = (_736.x * 2.0) + (-1.0);
    float _744 = (_736.y * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3881 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _753 = ((_736.z - _722) * _602) + _722;
    float _756 = ((cbMtdParam._m0[23u].x - _753) * _655) + _753;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _781 = (_775.x * 2.0) + (-1.0);
    float _782 = (_775.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _3892 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _798 = ((sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _508) * _604) + _508;
    float _801 = (((_743 - _536) * _602) + _536) + (cbMtdParam._m0[21u].x * _536);
    float _802 = (((_744 - _537) * _603) + _537) + (cbMtdParam._m0[21u].x * _537);
    float _813 = (((_781 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _655) + _801;
    float _814 = (((_782 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _655) + _802;
    float _815 = (_655 * (sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) - _798)) + _798;
    float _817 = cbMtdParam._m0[22u].x + _524.w;
    float _820 = fma(_815, _245, fma(_814, _252, _813 * _238));
    float _823 = fma(_815, _246, fma(_814, _253, _813 * _239));
    float _826 = fma(_815, _247, fma(_814, _254, _813 * _240));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _3903 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _834 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _3925 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3936 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3947 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3958 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _839 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _903 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _893);
    float _904 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _893);
    float _905 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _893);
    float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
    float _910 = _903 * _909;
    float _911 = _904 * _909;
    float _912 = _905 * _909;
    vec4 _917 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _919 = _917.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1091 = sqrt(((_903 * _903) + (_904 * _904)) + (_905 * _905));
        float _1097 = (cbMatDynParam._m0[5u].x * _1091) + cbMatDynParam._m0[5u].y;
        float _3969 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1102 = (cbMatDynParam._m0[5u].z * _1091) + cbMatDynParam._m0[5u].w;
        float _3980 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) - _1098)) + _1098) < ((_919 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _952 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _955 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _968 = _257 + 9u;
    uint _969 = _968 + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_969].z;
    float _3991 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _981 = 1.0 - _839;
    float _982 = _978 * _981;
    float _983 = _979 * _981;
    float _984 = _980 * _981;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _839;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _839;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _839;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_831, _832, _833), vec3(_910, _911, _912));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _831) - _910;
    float _1017 = (_1012 * _832) - _911;
    float _1018 = (_1012 * _833) - _912;
    float _1022 = abs(dot(vec3(_910, _911, _912), vec3(_831, _832, _833)));
    float _4024 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_834);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1024;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1134 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1138 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1142 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1167 = _1072 + _831;
        float _1168 = _1076 + _832;
        float _1169 = _1080 + _833;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1134;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1138;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1142;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1134 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1138 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1142 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_831, _832, _833), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4072 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_831, _832, _833), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4105 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_831, _832, _833), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4138 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1452 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1456 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1460 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1483 = _1072 + _831;
        float _1484 = _1076 + _832;
        float _1485 = _1080 + _833;
        float _1495 = fma(_1485, cbModelParam._m0[30u].z, fma(_1484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1483)) - _1452;
        float _1496 = fma(_1485, cbModelParam._m0[31u].z, fma(_1484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1483)) - _1456;
        float _1497 = fma(_1485, cbModelParam._m0[32u].z, fma(_1484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1483)) - _1460;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1452 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1456 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[35u].z) + ((((((_1460 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1551 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1518.x + (-0.5));
        float _1553 = _1551 * (_1518.y + (-0.5));
        float _1554 = _1551 * (_1518.z + (-0.5));
        float _1561 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1525.x + (-0.5));
        float _1563 = _1561 * (_1525.y + (-0.5));
        float _1564 = _1561 * (_1525.z + (-0.5));
        float _1571 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1532.x + (-0.5));
        float _1573 = _1571 * (_1532.y + (-0.5));
        float _1574 = _1571 * (_1532.z + (-0.5));
        float _1581 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1539.x + (-0.5));
        float _1583 = _1581 * (_1539.y + (-0.5));
        float _1584 = _1581 * (_1539.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_831, _832, _833), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4201 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1615 + 1.0))) + _1620) * _1585;
        float _1630 = _1553 * 0.5;
        float _1631 = _1563 * 0.5;
        float _1632 = _1573 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_831, _832, _833), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4234 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1657 + 1.0))) + _1662) * _1586;
        float _1672 = _1554 * 0.5;
        float _1673 = _1564 * 0.5;
        float _1674 = _1574 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_831, _832, _833), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4267 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1699 + 1.0))) + _1704) * _1587;
        _1721 = _1554;
        _1722 = _1553;
        _1723 = _1552;
        _1724 = _1564;
        _1725 = _1563;
        _1726 = _1562;
        _1727 = _1574;
        _1728 = _1573;
        _1729 = _1572;
        _1730 = _1587;
        _1731 = _1586;
        _1732 = _1585;
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
    }
    else
    {
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = _1410;
        _1731 = _1410;
        _1732 = _1410;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1423)) + _1423;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1424)) + _1424;
    float _1768 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1745));
    float _1789 = _1016 * 0.5;
    float _1790 = _1017 * 0.5;
    float _1791 = _1018 * 0.5;
    float _1792 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1795 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1798 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1805 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1809 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1813 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1820 = dot(vec4(cbModelParam._m0[39u]), vec4(_1789, _1790, _1791, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1834 = dot(vec4(cbModelParam._m0[40u]), vec4(_1789, _1790, _1791, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1847 = (_1843 * cbModelParam._m0[1u].x) + (_1832 * (1.0 - cbModelParam._m0[1u].x));
    float _1857 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1857 : min(cbModelParam._m0[25u].z, _1857));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1906 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1910 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1914 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1917 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1920 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1923 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1951;
        if (_1917 > 0.0)
        {
            _1951 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1951 = frontier_phi_17_15_ladder;
        }
        float _2175;
        if (_1920 > 0.0)
        {
            _2175 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2175 = frontier_phi_26_22_ladder;
        }
        float _2432;
        if (_1923 > 0.0)
        {
            _2432 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2432 = frontier_phi_38_33_ladder;
        }
        float _2434 = isnan(_2175) ? _1951 : (isnan(_1951) ? _2175 : min(_1951, _2175));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1917) + _1906;
        float _2440 = (_2435 * _1920) + _1910;
        float _2441 = (_2435 * _1923) + _1914;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1858);
            frontier_phi_16_38_ladder = _2569.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2569.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2569.x * cbModelParam._m0[1u].y;
        }
        _1939 = frontier_phi_16_38_ladder_2;
        _1941 = frontier_phi_16_38_ladder_1;
        _1943 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1858);
        _1939 = _1927.x * cbModelParam._m0[1u].y;
        _1941 = _1927.y * cbModelParam._m0[1u].y;
        _1943 = _1927.z * cbModelParam._m0[1u].y;
    }
    float _1947 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1947 : min(cbModelParam._m0[25u].w, _1947));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2002 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _2006 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _2010 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _2013 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2016 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2019 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2180;
        if (_2013 > 0.0)
        {
            _2180 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2180 = frontier_phi_28_24_ladder;
        }
        float _2459;
        if (_2016 > 0.0)
        {
            _2459 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2459 = frontier_phi_40_35_ladder;
        }
        float _2672;
        if (_2019 > 0.0)
        {
            _2672 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2672 = frontier_phi_49_46_ladder;
        }
        float _2674 = isnan(_2459) ? _2180 : (isnan(_2180) ? _2459 : min(_2180, _2459));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _2013) + _2002;
        float _2680 = (_2675 * _2016) + _2006;
        float _2681 = (_2675 * _2019) + _2010;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1948);
            frontier_phi_25_49_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2038 = frontier_phi_25_49_ladder_2;
        _2040 = frontier_phi_25_49_ladder_1;
        _2042 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1948);
        _2038 = _2022.x * cbModelParam._m0[1u].z;
        _2040 = _2022.y * cbModelParam._m0[1u].z;
        _2042 = _2022.z * cbModelParam._m0[1u].z;
    }
    float _2055 = (((_1043 * _992) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2038 - _1939)) + _1939);
    float _2057 = (((_1043 * _994) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2040 - _1941)) + _1941);
    float _2059 = (((_1043 * _995) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2042 - _1943)) + _1943);
    float _2062 = fma(_2059, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2055 * cbSceneParam._m0[89u].x));
    float _2065 = fma(_2059, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2055 * cbSceneParam._m0[90u].x));
    float _2068 = fma(_2059, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, _2055 * cbSceneParam._m0[91u].x));
    vec4 _2076 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_930, _931));
    float _2078 = _2076.w;
    float _2090 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2078);
    float _2091 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2078);
    float _2092 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2078);
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _1008 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2134 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2138 = _2098 | 1u;
    float _2149 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_831, _832, _833));
    float _2152 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_831, _832, _833));
    float _4403 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _4414 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2157 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.3183098733425140380859375;
    float _2159 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2166 = ((cbLight._m0[_2115].x * _2121) * _2159) + (((cbLight._m0[_2125].x * _2090) * _2134) * _2157);
    float _2167 = ((_2121 * cbLight._m0[_2115].y) * _2159) + (((cbLight._m0[_2125].y * _2091) * _2134) * _2157);
    float _2168 = ((_2121 * cbLight._m0[_2115].z) * _2159) + (((cbLight._m0[_2125].z * _2092) * _2134) * _2157);
    uvec4 _2172 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2174 = _2172.x == 0u;
    float _2185;
    float _2187;
    float _2189;
    if (_2174)
    {
        _2185 = _2166;
        _2187 = _2167;
        _2189 = _2168;
    }
    else
    {
        uint _2193 = _2098 + 6u;
        float _2209 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2210 = _2209 * _2209;
        float _4425 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2211 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2212 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2185 = (((cbLight._m0[_2193].x * 0.3183098733425140380859375) * _2211) * _2212) + _2166;
        _2187 = (((cbLight._m0[_2193].y * 0.3183098733425140380859375) * _2211) * _2212) + _2167;
        _2189 = (((cbLight._m0[_2193].z * 0.3183098733425140380859375) * _2211) * _2212) + _2168;
    }
    bool _2192 = _2172.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2192)
    {
        _2230 = _2185;
        _2232 = _2187;
        _2234 = _2189;
    }
    else
    {
        uint _2403 = _2098 + 7u;
        float _2419 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4441 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2422 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2230 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2185;
        _2232 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2187;
        _2234 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2189;
    }
    uint _2237 = _2098 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _834) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2098].x + _910;
    float _2253 = cbLight._m0[_2098].y + _911;
    float _2254 = cbLight._m0[_2098].z + _912;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2098].xyz));
    float _4457 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _4468 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2266 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2267 = dot(vec3(_831, _832, _833), vec3(_2259, _2260, _2261));
    float _4479 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2259, _2260, _2261));
    float _4490 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
    float _2288 = 0.959999978542327880859375 - _989;
    float _2290 = 0.959999978542327880859375 - _990;
    float _2291 = 0.959999978542327880859375 - _991;
    float _2298 = 1.0 - _2251;
    float _2309 = (0.5 / (((_2266 * ((_2265 * _2298) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2298) + _2251) * _2265))) * _2265;
    float _4501 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2325 = _2098 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _834) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2138].x + _910;
    float _2339 = cbLight._m0[_2138].y + _911;
    float _2340 = cbLight._m0[_2138].z + _912;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2138].xyz));
    float _4512 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2352 = dot(vec3(_831, _832, _833), vec3(_2345, _2346, _2347));
    float _4523 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2345, _2346, _2347));
    float _4534 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0);
    float _2378 = 1.0 - _2337;
    float _2388 = (0.5 / (((_2266 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2378) + _2337) * _2351))) * _2351;
    float _4545 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2390 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2400 = (((((_2371 * _2288) + _992) * cbLight._m0[_2325].x) * _2390) * _2121) + ((((cbLight._m0[_2237].x * _2090) * ((_2287 * _2288) + _992)) * _2311) * _2134);
    float _2401 = (((((_2371 * _2290) + _994) * cbLight._m0[_2325].y) * _2390) * _2121) + ((((cbLight._m0[_2237].y * _2091) * ((_2287 * _2290) + _994)) * _2311) * _2134);
    float _2402 = (((((_2371 * _2291) + _995) * cbLight._m0[_2325].z) * _2390) * _2121) + ((((cbLight._m0[_2237].z * _2092) * ((_2287 * _2291) + _995)) * _2311) * _2134);
    float _2464;
    float _2466;
    float _2468;
    if (_2174)
    {
        _2464 = _2400;
        _2466 = _2401;
        _2468 = _2402;
    }
    else
    {
        uint _2470 = _2098 + 2u;
        uint _2474 = _2098 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _834) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _910;
        float _2491 = cbLight._m0[_2470].y + _911;
        float _2492 = cbLight._m0[_2470].z + _912;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2470].xyz));
        float _4556 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2504 = dot(vec3(_831, _832, _833), vec3(_2497, _2498, _2499));
        float _4567 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4578 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2266 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2530) + _2489) * _2503))) * _2503;
        float _4589 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2464 = (((((_2523 * _2288) + _992) * cbLight._m0[_2474].x) * _2542) * _2543) + _2400;
        _2466 = (((((_2523 * _2290) + _994) * cbLight._m0[_2474].y) * _2542) * _2543) + _2401;
        _2468 = (((((_2523 * _2291) + _995) * cbLight._m0[_2474].z) * _2542) * _2543) + _2402;
    }
    float _2578;
    float _2580;
    float _2582;
    if (_2192)
    {
        _2578 = _2464;
        _2580 = _2466;
        _2582 = _2468;
    }
    else
    {
        uint _2589 = _2098 + 3u;
        uint _2593 = _2098 + 11u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _834) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _910;
        float _2610 = cbLight._m0[_2589].y + _911;
        float _2611 = cbLight._m0[_2589].z + _912;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2589].xyz));
        float _4605 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2623 = dot(vec3(_831, _832, _833), vec3(_2616, _2617, _2618));
        float _4616 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4627 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2266 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2649) + _2608) * _2622))) * _2622;
        float _4638 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2578 = (((((_2642 * _2288) + _992) * cbLight._m0[_2593].x) * _2661) * _2662) + _2464;
        _2580 = (((((_2642 * _2290) + _994) * cbLight._m0[_2593].y) * _2661) * _2662) + _2466;
        _2582 = (((((_2642 * _2291) + _995) * cbLight._m0[_2593].z) * _2661) * _2662) + _2468;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2096.y == 0u)
    {
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2737;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2737;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2737;
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2753)));
        float _2774 = (log2(_2740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            uint _3043 = 0u;
            uint _3052;
            bool _3053;
            for (;;)
            {
                _3052 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                _3053 = _3052 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3053)
                {
                    frontier_phi_66_pred = _3037;
                    frontier_phi_66_pred_1 = _3042;
                    frontier_phi_66_pred_2 = _3041;
                    frontier_phi_66_pred_3 = _3040;
                    frontier_phi_66_pred_4 = _3039;
                    frontier_phi_66_pred_5 = _3038;
                }
                else
                {
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    uint _3188;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3052;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    for (;;)
                    {
                        uint _3192 = uint(findLSB(_3188)) + (_3043 << 5u);
                        uint _3189 = (_3188 + 4294967295u) & _3188;
                        uint _3194 = _3192 * 48u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3214 = (_3192 * 48u) + 4u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3233 = (_3192 * 48u) + 8u;
                        vec3 _3244 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x));
                        float _3248 = _3208.x - _2738;
                        float _3249 = _3208.y - _2739;
                        float _3250 = _3208.z - _2740;
                        float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                        float _3254 = inversesqrt(_3251);
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3258 = dot(vec3(_949, _952, _955), vec3(_3255, _3256, _3257));
                        float _3263 = 1.0 - (_3251 * _3208.w);
                        float _4664 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3265 = sqrt(_3251) * _3227.w;
                        float _3268 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                        float _3269 = _3268 * _3268;
                        float _3272 = ((1.0 - _3269) * _3258) + _3269;
                        float _3275 = _3265 * _3265;
                        float _3279 = ((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3264) / ((_3275 * 0.699999988079071044921875) + 1.0);
                        float _3283 = (-0.0) - _2738;
                        float _3284 = (-0.0) - _2739;
                        float _3285 = (-0.0) - _2740;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3290 = _3289 * _3283;
                        float _3291 = _3289 * _3284;
                        float _3292 = _3289 * _3285;
                        float _3300 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                        float _3301 = 1.0 - _1024;
                        float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                        float _3309 = _3308 * _3308;
                        float _3310 = _3309 * _3309;
                        float _3311 = _3290 + _3255;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3321 = dot(vec3(_949, _952, _955), vec3(_3290, _3291, _3292));
                        float _4680 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3325 = dot(vec3(_949, _952, _955), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                        float _4691 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                        float _3333 = _3268 * _3309;
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3258) + _3334;
                        float _4702 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3339 = 1.0 - _3309;
                        float _3349 = (0.5 / (((_3338 * ((_3324 * _3339) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3309) * _3324))) * _3338;
                        float _4713 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3360 = (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) / ((_3332 * _3332) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125))) * _3264;
                        _3112 = (_3279 * _3227.x) + _3185;
                        _3113 = (_3279 * _3227.y) + _3186;
                        _3114 = (_3279 * _3227.z) + _3187;
                        _3109 = (_3360 * _3244.x) + _3182;
                        _3110 = (_3360 * _3244.y) + _3183;
                        _3111 = (_3360 * _3244.z) + _3184;
                        if (_3189 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3189;
                        }
                    }
                    frontier_phi_66_pred = _3109;
                    frontier_phi_66_pred_1 = _3114;
                    frontier_phi_66_pred_2 = _3113;
                    frontier_phi_66_pred_3 = _3112;
                    frontier_phi_66_pred_4 = _3111;
                    frontier_phi_66_pred_5 = _3110;
                }
                _2886 = frontier_phi_66_pred;
                _2896 = frontier_phi_66_pred_1;
                _2894 = frontier_phi_66_pred_2;
                _2892 = frontier_phi_66_pred_3;
                _2890 = frontier_phi_66_pred_4;
                _2888 = frontier_phi_66_pred_5;
                uint _3044 = _3043 + 1u;
                if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3037 = _2886;
                    _3038 = _2888;
                    _3039 = _2890;
                    _3040 = _2892;
                    _3041 = _2894;
                    _3042 = _2896;
                    _3043 = _3044;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((4294967295u << _2902) & _2784) == 0u)
        {
            _3005 = _2885;
            _3007 = _2887;
            _3009 = _2889;
            _3011 = _2891;
            _3013 = _2893;
            _3015 = _2895;
        }
        else
        {
            float _3030 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
            float _3031 = _3030 * _2738;
            float _3032 = _3030 * _2739;
            float _3033 = _3030 * _2740;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3165 = _2885;
                float _3166 = _2887;
                float _3167 = _2889;
                float _3168 = _2891;
                float _3169 = _2893;
                float _3170 = _2895;
                uint _3171 = _2902;
                uint _3180;
                bool _3181;
                for (;;)
                {
                    _3180 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                    _3181 = _3180 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3181)
                    {
                        frontier_phi_77_pred = _3170;
                        frontier_phi_77_pred_1 = _3169;
                        frontier_phi_77_pred_2 = _3168;
                        frontier_phi_77_pred_3 = _3167;
                        frontier_phi_77_pred_4 = _3166;
                        frontier_phi_77_pred_5 = _3165;
                    }
                    else
                    {
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        uint _3393 = _3180;
                        uint _3394;
                        vec4 _3419;
                        float _3420;
                        vec4 _3435;
                        vec3 _3447;
                        vec4 _3462;
                        vec4 _3478;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3404 = ((_3171 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3393));
                            _3394 = (_3393 + 4294967295u) & _3393;
                            uint _3406 = _3404 * 40u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3420 = _3419.w;
                            uint _3422 = (_3404 * 40u) + 4u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3404 * 40u) + 8u;
                            _3447 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x));
                            uint _3449 = (_3404 * 40u) + 16u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3465 = (_3404 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3404 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3404 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_2740, _3512.z, fma(_2739, _3512.y, _3512.x * _2738)) + _3512.w;
                            _3525 = !((fma(_2740, _3493.z, fma(_2739, _3493.y, _3493.x * _2738)) + _3493.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3419.x - _2738;
                                float _3553 = _3419.y - _2739;
                                float _3554 = _3419.z - _2740;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3420 * _3420));
                                float _4724 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3570 = sqrt(_3555) * _3435.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_949, _952, _955))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_2740, _3462.z, fma(_2739, _3462.y, _3462.x * _2738)) + _3462.w) / _3524;
                                float _3584 = (fma(_2740, _3478.z, fma(_2739, _3478.y, _3478.x * _2738)) + _3478.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4740 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _1024;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3031;
                                float _3614 = _3560 - _3032;
                                float _3615 = _3561 - _3033;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_949, _952, _955), vec3((-0.0) - _3031, (-0.0) - _3032, (-0.0) - _3033));
                                float _4751 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3627 = dot(vec3(_949, _952, _955), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4762 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_949, _952, _955), vec3(_3559, _3560, _3561))) + _3636;
                                float _4773 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4784 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3590 * _3435.y;
                                frontier_phi_83_pred_1 = _3590 * _3435.x;
                                frontier_phi_83_pred_2 = _3664 * _3447.z;
                                frontier_phi_83_pred_3 = _3664 * _3447.y;
                                frontier_phi_83_pred_4 = _3664 * _3447.x;
                                frontier_phi_83_pred_5 = _3590 * _3435.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_83_pred;
                            _3671 = frontier_phi_83_pred_1;
                            _3670 = frontier_phi_83_pred_2;
                            _3669 = frontier_phi_83_pred_3;
                            _3668 = frontier_phi_83_pred_4;
                            _3673 = frontier_phi_83_pred_5;
                            _3377 = _3671 + _3390;
                            _3378 = _3672 + _3391;
                            _3379 = _3673 + _3392;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            if (_3394 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3394;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3379;
                        frontier_phi_77_pred_1 = _3378;
                        frontier_phi_77_pred_2 = _3377;
                        frontier_phi_77_pred_3 = _3376;
                        frontier_phi_77_pred_4 = _3375;
                        frontier_phi_77_pred_5 = _3374;
                    }
                    _3016 = frontier_phi_77_pred;
                    _3014 = frontier_phi_77_pred_1;
                    _3012 = frontier_phi_77_pred_2;
                    _3010 = frontier_phi_77_pred_3;
                    _3008 = frontier_phi_77_pred_4;
                    _3006 = frontier_phi_77_pred_5;
                    uint _3172 = _3171 + 1u;
                    if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3165 = _3006;
                        _3166 = _3008;
                        _3167 = _3010;
                        _3168 = _3012;
                        _3169 = _3014;
                        _3170 = _3016;
                        _3171 = _3172;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3010;
                frontier_phi_58_59_ladder_1 = _3016;
                frontier_phi_58_59_ladder_2 = _3014;
                frontier_phi_58_59_ladder_3 = _3012;
                frontier_phi_58_59_ladder_4 = _3008;
                frontier_phi_58_59_ladder_5 = _3006;
            }
            else
            {
                frontier_phi_58_59_ladder = _2889;
                frontier_phi_58_59_ladder_1 = _2895;
                frontier_phi_58_59_ladder_2 = _2893;
                frontier_phi_58_59_ladder_3 = _2891;
                frontier_phi_58_59_ladder_4 = _2887;
                frontier_phi_58_59_ladder_5 = _2885;
            }
            _3005 = frontier_phi_58_59_ladder_5;
            _3007 = frontier_phi_58_59_ladder_4;
            _3009 = frontier_phi_58_59_ladder;
            _3011 = frontier_phi_58_59_ladder_3;
            _3013 = frontier_phi_58_59_ladder_2;
            _3015 = frontier_phi_58_59_ladder_1;
        }
        float _3020 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _2797 = (_3020 * _3011) + _2230;
        _2799 = (_3020 * _3013) + _2232;
        _2801 = (_3020 * _3015) + _2234;
        _2803 = ((_3005 * _992) * _3020) + _2578;
        _2805 = ((_3007 * _994) * _3020) + _2580;
        _2807 = ((_3009 * _995) * _3020) + _2582;
    }
    else
    {
        _2797 = _2230;
        _2799 = _2232;
        _2801 = _2234;
        _2803 = _2578;
        _2805 = _2580;
        _2807 = _2582;
    }
    float _4800 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4811 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4822 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2824 = ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2797 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1008))) + ((_2803 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2799 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1008))) + ((_2805 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _2826 = ((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2801 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1008))) + ((_2807 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    uint _2827 = _257 + 6u;
    float _2835 = _930 / cbSceneParam._m0[86u].x;
    float _2836 = _931 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _2911 = _2910 / _853;
        float _2922 = _2911 * _903;
        float _2923 = _904 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2925 = _2911 * _905;
        float _2927 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2928 = _2927 + cbSceneParam._m0[79u].w;
        float _2929 = cbSceneParam._m0[79u].w - _2923;
        float _2935 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2925 * _2925));
        float _2938 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2935;
        float _2943 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2945 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3122;
        if (abs((_2924 - _2927) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3122 = ((((_2928 > 0.0) ? exp2(_2943 * _2928) : (2.0 - exp2(_2945 * _2928))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2938;
        }
        else
        {
            float _3066 = 1.0 / cbSceneParam._m0[80u].x;
            float _3067 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : max(_2928, _2929));
            float _3068 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : min(_2928, _2929));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            _3122 = ((abs(_2935 / _2924) * cbSceneParam._m0[80u].y) * ((((_3077 - _3078) * 2.0) - ((exp2(_2943 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0)))) - exp2(_2943 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))))) * _3066)) - ((exp2(_2945 * _3077) - exp2(_2945 * _3078)) * _3066))) + (_2938 * cbSceneParam._m0[80u].z);
        }
        vec4 _3124 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3133 = exp2((_3122 * (-1.44269502162933349609375)) * (1.0 - _3124.w));
        float _3134 = log2(_3133);
        float _3150 = log2(_2855);
        _2947 = (exp2(_3150 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].x)) * _3124.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2949 = (exp2(_3150 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].y)) * _3124.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2951 = (exp2(_3150 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].z)) * _3124.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2953 = _3133 * _2855;
    }
    else
    {
        _2947 = _2852;
        _2949 = _2853;
        _2951 = _2854;
        _2953 = _2855;
    }
    bool _3160;
    vec4 _2963;
    vec4 _2985;
    float _2987;
    float _2991;
    float _2992;
    float _2993;
    float _2994;
    bool _3004;
    for (;;)
    {
        _2963 = cbMatDynParam._m0[0u];
        float _2965 = roundEven(_2963.y);
        bool _2966 = _2965 == 3.0;
        float _2967 = log2(_2953);
        float _2974 = exp2(_2967 * cbSceneParam._m0[78u].x) * _2824;
        float _2975 = exp2(_2967 * cbSceneParam._m0[78u].y) * _2825;
        float _2976 = exp2(_2967 * cbSceneParam._m0[78u].z) * _2826;
        float _2983 = _919 + (-0.5);
        _2985 = cbMtdParam._m0[1u];
        _2987 = _2985.y * _2983;
        float _2990 = (_2965 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2991 = _2990 * (_2966 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2947)));
        _2992 = _2990 * (_2966 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2949)));
        _2993 = _2990 * (_2966 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2951)));
        _2994 = _2983 * 0.999000012874603271484375;
        _3004 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3004)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2994) < 0.5)
            {
                _3160 = true;
                break;
            }
        }
        uint _3101 = _968 + uint(_2963.w);
        if ((cbInstanceData._m0[_3101].w < 1.0) && ((cbInstanceData._m0[_3101].w + _2994) < 0.5))
        {
            _3160 = true;
            break;
        }
        if ((_2987 + 1.0) < _2985.x)
        {
            _3160 = true;
            break;
        }
        _3160 = false;
        break;
    }
    float _3365;
    if (_3160)
    {
        discard_state = true;
        _3365 = 0.0;
    }
    else
    {
        _3365 = cbInstanceData._m0[_2827].w;
    }
    SV_Target.x = _2991;
    SV_Target.y = _2992;
    SV_Target.z = _2993;
    SV_Target.w = _3365;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
    discard_exit();
}


