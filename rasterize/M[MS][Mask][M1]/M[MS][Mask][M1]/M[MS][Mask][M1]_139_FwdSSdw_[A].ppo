#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1770;
float _4171;
float _4172;
float _4173;
float _4174;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _260 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _261 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _262 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _268 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _275 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _282 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _296 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _297 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4183 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4194 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _4205 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    uint _307 = uint(roundEven(NORMAL.w)) * 13u;
    uint _312 = _307 + 1u;
    uint _316 = _307 + 2u;
    float _325 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _326 = _325 * TEXCOORD.z;
    float _327 = _325 * TEXCOORD.w;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _326) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _327) + cbTextureTilingScale._m0[13u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _394 = _389.x * cbMtdParam._m0[11u].x;
    float _395 = _389.y * cbMtdParam._m0[11u].y;
    float _396 = _389.z * cbMtdParam._m0[11u].z;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _326) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _327) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _483 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _500 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _434.x) * 2.0) - ((((_471 - _483) * cbMtdParam._m0[23u].w) + _483) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4216 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _508 = (_501 * ((_415.x * cbMtdParam._m0[12u].x) - _394)) + _394;
    float _509 = (_501 * ((_415.y * cbMtdParam._m0[12u].y) - _395)) + _395;
    float _510 = (_501 * ((_415.z * cbMtdParam._m0[12u].z) - _396)) + _396;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _326) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _327) + cbTextureTilingScale._m0[3u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _549 = _547.x;
    float _559 = dot(vec4(_549, _547.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _573 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _434.y) * 2.0) - ((((_549 - _559) * cbMtdParam._m0[23u].w) + _559) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4227 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _581 = (_574 * ((_527.x * cbMtdParam._m0[13u].x) - _508)) + _508;
    float _582 = (_574 * ((_527.y * cbMtdParam._m0[13u].y) - _509)) + _509;
    float _583 = (_574 * ((_527.z * cbMtdParam._m0[13u].z) - _510)) + _510;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _326) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _327) + cbTextureTilingScale._m0[24u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _621 = _619.x;
    float _631 = dot(vec4(_621, _619.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _643 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _434.z) * 2.0) - ((((_621 - _631) * cbMtdParam._m0[23u].w) + _631) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4238 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _654 = (_363.x * cbMtdParam._m0[9u].x) * ((_644 * ((_602.x * cbMtdParam._m0[14u].x) - _581)) + _581);
    float _655 = (_363.y * cbMtdParam._m0[9u].y) * ((_644 * ((_602.y * cbMtdParam._m0[14u].y) - _582)) + _582);
    float _656 = (_363.z * cbMtdParam._m0[9u].z) * ((_644 * ((_602.z * cbMtdParam._m0[14u].z) - _583)) + _583);
    float _660 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _340.x) * _654;
    float _663 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _340.y) * _655;
    float _666 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _340.z) * _656;
    float _674 = (((_654 - _660) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _660) * 4.55000019073486328125;
    float _676 = (((_655 - _663) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) + _663) * 4.55000019073486328125;
    float _678 = (((_656 - _666) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _666) * 4.55000019073486328125;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _326) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _327) + cbTextureTilingScale._m0[14u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _326) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _327) + cbTextureTilingScale._m0[20u].w));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _326) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _327) + cbTextureTilingScale._m0[4u].w));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _757 = _755.x;
    float _758 = _755.y;
    float _759 = _755.z;
    float _766 = ((_738.x - _757) * _501) + _757;
    float _767 = ((_738.y - _758) * _501) + _758;
    float _768 = ((_738.z - _759) * _501) + _759;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _326) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _327) + cbTextureTilingScale._m0[2u].w));
    float _791 = ((_780.x - _766) * _574) + _766;
    float _792 = ((_780.y - _767) * _574) + _767;
    float _793 = ((_780.z - _768) * _574) + _768;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _326) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _327) + cbTextureTilingScale._m0[23u].w));
    float _818 = ((_805.z - _793) * _644) + _793;
    float _821 = ((((_805.x - _791) * _644) + _791) * 2.0) + (-1.0);
    float _822 = ((((_805.y - _792) * _644) + _792) * 2.0) + (-1.0);
    float _823 = dot(vec2(_821, _822), vec2(_821, _822));
    float _4249 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _828 = sqrt(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))));
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _867 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _326) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _327) + cbTextureTilingScale._m0[11u].w));
    float _869 = _867.x;
    float _870 = 1.0 - _869;
    float _878 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _881 = ((isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : min(_878, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _890 = (_881 - ((((((_869 - _870) * cbMtdParam._m0[24u].z) + _870) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _881))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4270 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _891 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _898 = (_891 * ((_696.x * cbMtdParam._m0[18u].x) - _674)) + _674;
    float _899 = (_891 * ((_696.y * cbMtdParam._m0[18u].y) - _676)) + _676;
    float _900 = (_891 * ((_696.z * cbMtdParam._m0[18u].z) - _678)) + _678;
    float _915 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _916 = _915 * TEXCOORD.z;
    float _917 = _915 * TEXCOORD.w;
    vec4 _929 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _916) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _917) + cbTextureTilingScale._m0[19u].w));
    float _931 = _929.x;
    float _932 = 1.0 - _931;
    float _957 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_931 - _932) * cbMtdParam._m0[24u].w) + _932) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4281 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _958 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _966 = ((((cbMtdParam._m0[10u].x - _898) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _958) + _898;
    float _967 = ((((cbMtdParam._m0[10u].y - _899) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _958) + _899;
    float _968 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _900)) * _958) + _900;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _996 = _994.x;
    float _1013 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _326) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _327) + cbTextureTilingScale._m0[9u].w)).x - _996) * _501) + _996;
    float _1030 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _326) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _327) + cbTextureTilingScale._m0[21u].w)).x - _1013) * _574) + _1013;
    float _1047 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _326) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _327) + cbTextureTilingScale._m0[10u].w)).x - _1030) * _644) + _1030;
    float _1053 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1047) * cbMtdParam._m0[19u].z) + _1047;
    float _1055 = _1053 - (_1053 * _891);
    float _1057 = _1055 - (_1055 * _958);
    float _1062 = (((_715.z - _818) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _818;
    float _1066 = ((_842.z - _1062) * cbMtdParam._m0[19u].w) + _1062;
    vec4 _1082 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _326) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _327) + cbTextureTilingScale._m0[15u].w));
    float _1089 = (_1082.x * 2.0) + (-1.0);
    float _1090 = (_1082.y * 2.0) + (-1.0);
    float _1091 = dot(vec2(_1089, _1090), vec2(_1089, _1090));
    float _4292 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1099 = (_891 * (_1082.z - _1066)) + _1066;
    float _1102 = ((cbMtdParam._m0[23u].x - _1099) * _958) + _1099;
    vec4 _1125 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _916) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _917) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1131 = (_1125.x * 2.0) + (-1.0);
    float _1132 = (_1125.y * 2.0) + (-1.0);
    float _1133 = dot(vec2(_1131, _1132), vec2(_1131, _1132));
    float _4303 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1147 = (_821 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_715.x * 2.0) + (-1.0)))) + (((_842.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1148 = (_822 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_715.y * 2.0) + (-1.0)))) + (((_842.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1160 = (((_1089 - _1147) + (cbMtdParam._m0[21u].x * _1147)) * _891) + _1147;
    float _1161 = (((_1090 - _1148) + (cbMtdParam._m0[21u].x * _1148)) * _891) + _1148;
    float _1162 = (_891 * (sqrt(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) - _828)) + _828;
    float _1173 = (((_1131 - _1160) + (_1160 * cbMtdParam._m0[22u].z)) * _958) + _1160;
    float _1174 = (((_1132 - _1161) + (_1161 * cbMtdParam._m0[22u].z)) * _958) + _1161;
    float _1175 = ((sqrt(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) - _1162) * _958) + _1162;
    float _1177 = cbMtdParam._m0[22u].x + _842.w;
    float _1180 = fma(_1175, _275 * NORMAL.x, fma(_1174, _282 * TANGENT.x, (_268 * _260) * _1173));
    float _1183 = fma(_1175, _275 * NORMAL.y, fma(_1174, _282 * TANGENT.y, (_268 * _261) * _1173));
    float _1186 = fma(_1175, _275 * NORMAL.z, fma(_1174, _282 * TANGENT.z, (_268 * _262) * _1173));
    float _1190 = inversesqrt(dot(vec3(_1180, _1183, _1186), vec3(_1180, _1183, _1186)));
    float _1191 = _1190 * _1180;
    float _1192 = _1190 * _1183;
    float _1193 = _1190 * _1186;
    float _4314 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1194 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _4336 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4347 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4358 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4369 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1199 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _1213 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1253);
    float _1264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1253);
    float _1265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1253);
    float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
    float _1270 = _1263 * _1269;
    float _1271 = _1264 * _1269;
    float _1272 = _1265 * _1269;
    vec4 _1277 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1279 = _1277.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1451 = sqrt(((_1263 * _1263) + (_1264 * _1264)) + (_1265 * _1265));
        float _1457 = (cbMatDynParam._m0[5u].x * _1451) + cbMatDynParam._m0[5u].y;
        float _4380 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1462 = (cbMatDynParam._m0[5u].z * _1451) + cbMatDynParam._m0[5u].w;
        float _4391 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) - _1458)) + _1458) < ((_1279 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1290 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1291 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1309 = fma(_1193, cbSceneParam._m0[5u].z, fma(_1192, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1191));
    float _1312 = fma(_1193, cbSceneParam._m0[6u].z, fma(_1192, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1191));
    float _1315 = fma(_1193, cbSceneParam._m0[7u].z, fma(_1192, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1191));
    uint _1328 = _307 + 9u;
    uint _1329 = _1328 + uint(cbMatDynParam._m0[0u].w);
    float _1335 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1329].x;
    float _1336 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1329].y;
    float _1337 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * cbInstanceData._m0[_1329].z;
    float _4402 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
    float _1338 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1339 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _4424 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1340 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _1341 = 1.0 - _1199;
    float _1342 = _1338 * _1341;
    float _1343 = _1339 * _1341;
    float _1344 = _1340 * _1341;
    float _1349 = (_1338 + (-0.039999999105930328369140625)) * _1199;
    float _1350 = (_1339 + (-0.039999999105930328369140625)) * _1199;
    float _1351 = (_1340 + (-0.039999999105930328369140625)) * _1199;
    float _1352 = _1349 + 0.039999999105930328369140625;
    float _1354 = _1350 + 0.039999999105930328369140625;
    float _1355 = _1351 + 0.039999999105930328369140625;
    vec4 _1364 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1290, cbSceneParam._m0[86u].y * _1291));
    float _1368 = ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * TEXCOORD_5.w) * _1364.x;
    float _1369 = dot(vec3(_1191, _1192, _1193), vec3(_1270, _1271, _1272));
    float _1372 = _1369 * 2.0;
    float _1376 = (_1372 * _1191) - _1270;
    float _1377 = (_1372 * _1192) - _1271;
    float _1378 = (_1372 * _1193) - _1272;
    float _1382 = abs(dot(vec3(_1270, _1271, _1272), vec3(_1191, _1192, _1193)));
    float _4435 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
    float _1384 = sqrt(_1194);
    float _1397 = exp2((_1384 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1384 * 3.0));
    float _1403 = (1.0 - _1397) * ((_1384 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1404 = _1397 * _1384;
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1769;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1494 = fma(_1440, cbModelParam._m0[26u].z, fma(_1436, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1432));
        float _1498 = fma(_1440, cbModelParam._m0[27u].z, fma(_1436, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1432));
        float _1502 = fma(_1440, cbModelParam._m0[28u].z, fma(_1436, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1432));
        float _1527 = _1432 + _1191;
        float _1528 = _1436 + _1192;
        float _1529 = _1440 + _1193;
        float _1539 = fma(_1529, cbModelParam._m0[26u].z, fma(_1528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1527)) - _1494;
        float _1540 = fma(_1529, cbModelParam._m0[27u].z, fma(_1528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1527)) - _1498;
        float _1541 = fma(_1529, cbModelParam._m0[28u].z, fma(_1528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1527)) - _1502;
        float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
        float _1558 = ((_1545 * _1539) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1494 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1545 * _1540) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1498 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1545 * _1541) / cbModelParam._m0[34u].z) + ((((((_1502 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        float _1597 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1563.x + (-0.5));
        float _1599 = _1597 * (_1563.y + (-0.5));
        float _1600 = _1597 * (_1563.z + (-0.5));
        float _1607 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1570.x + (-0.5));
        float _1609 = _1607 * (_1570.y + (-0.5));
        float _1610 = _1607 * (_1570.z + (-0.5));
        float _1617 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1577.x + (-0.5));
        float _1619 = _1617 * (_1577.y + (-0.5));
        float _1620 = _1617 * (_1577.z + (-0.5));
        float _1627 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1584.x + (-0.5));
        float _1629 = _1627 * (_1584.y + (-0.5));
        float _1630 = _1627 * (_1584.z + (-0.5));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = _1598 * 0.5;
        float _1635 = _1608 * 0.5;
        float _1636 = _1618 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1651 = (dot(vec3(_1191, _1192, _1193), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1661 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4483 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1663 + 1.0))) + _1668) * _1631;
        float _1678 = _1599 * 0.5;
        float _1679 = _1609 * 0.5;
        float _1680 = _1619 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_1191, _1192, _1193), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4516 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1705 + 1.0))) + _1710) * _1632;
        float _1720 = _1600 * 0.5;
        float _1721 = _1610 * 0.5;
        float _1722 = _1620 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_1191, _1192, _1193), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4549 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1747 + 1.0))) + _1752) * _1633;
        _1769 = _1600;
        _1771 = _1599;
        _1772 = _1598;
        _1773 = _1610;
        _1774 = _1609;
        _1775 = _1608;
        _1776 = _1620;
        _1777 = _1619;
        _1778 = _1618;
        _1779 = _1633;
        _1780 = _1632;
        _1781 = _1631;
        _1782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1770;
        _1771 = _1770;
        _1772 = _1770;
        _1773 = _1770;
        _1774 = _1770;
        _1775 = _1770;
        _1776 = _1770;
        _1777 = _1770;
        _1778 = _1770;
        _1779 = _1770;
        _1780 = _1770;
        _1781 = _1770;
        _1782 = 0.0;
        _1783 = 0.0;
        _1784 = 0.0;
    }
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    float _2091;
    float _2092;
    float _2093;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1810 = fma(_1440, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432));
        float _1814 = fma(_1440, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432));
        float _1818 = fma(_1440, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432));
        float _1841 = _1432 + _1191;
        float _1842 = _1436 + _1192;
        float _1843 = _1440 + _1193;
        float _1853 = fma(_1843, cbModelParam._m0[30u].z, fma(_1842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1841)) - _1810;
        float _1854 = fma(_1843, cbModelParam._m0[31u].z, fma(_1842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1841)) - _1814;
        float _1855 = fma(_1843, cbModelParam._m0[32u].z, fma(_1842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1841)) - _1818;
        float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
        float _1872 = ((_1859 * _1853) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1810 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1873 = ((_1859 * _1854) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1814 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1874 = ((_1859 * _1855) / cbModelParam._m0[35u].z) + ((((((_1818 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1876 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1872, _1873, _1874), 0.0);
        vec4 _1883 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1872, _1873, _1874), 0.0);
        vec4 _1890 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1872, _1873, _1874), 0.0);
        vec4 _1897 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1872, _1873, _1874), 0.0);
        float _1909 = exp2((_1876.w + (-0.5)) * 20.0) * 2.0;
        float _1910 = _1909 * (_1876.x + (-0.5));
        float _1911 = _1909 * (_1876.y + (-0.5));
        float _1912 = _1909 * (_1876.z + (-0.5));
        float _1919 = exp2((_1883.w + (-0.5)) * 20.0) * 2.0;
        float _1920 = _1919 * (_1883.x + (-0.5));
        float _1921 = _1919 * (_1883.y + (-0.5));
        float _1922 = _1919 * (_1883.z + (-0.5));
        float _1929 = exp2((_1890.w + (-0.5)) * 20.0) * 2.0;
        float _1930 = _1929 * (_1890.x + (-0.5));
        float _1931 = _1929 * (_1890.y + (-0.5));
        float _1932 = _1929 * (_1890.z + (-0.5));
        float _1939 = exp2((_1897.w + (-0.5)) * 20.0) * 2.0;
        float _1940 = _1939 * (_1897.x + (-0.5));
        float _1941 = _1939 * (_1897.y + (-0.5));
        float _1942 = _1939 * (_1897.z + (-0.5));
        float _1943 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1945 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1946 = _1910 * 0.5;
        float _1947 = _1920 * 0.5;
        float _1948 = _1930 * 0.5;
        float _1949 = dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948));
        float _1954 = (_1949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1949);
        float _1962 = (dot(vec3(_1191, _1192, _1193), vec3(_1954 * _1946, _1954 * _1947, _1954 * _1948)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1971 = sqrt(((_1947 * _1947) + (_1946 * _1946)) + (_1948 * _1948)) / (_1943 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1973 = _1972 * 2.0;
        float _1977 = (1.0 - _1972) / (_1972 + 1.0);
        float _4612 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1987 = ((((1.0 - _1978) * (_1973 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1973 + 1.0))) + _1978) * _1943;
        float _1988 = _1911 * 0.5;
        float _1989 = _1921 * 0.5;
        float _1990 = _1931 * 0.5;
        float _1991 = dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990));
        float _1996 = (_1991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1991);
        float _2004 = (dot(vec3(_1191, _1192, _1193), vec3(_1996 * _1988, _1996 * _1989, _1996 * _1990)) + 1.0) * 0.5;
        float _4623 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2013 = sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990)) / (_1944 + 9.9999997473787516355514526367188e-06);
        float _4634 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2015 = _2014 * 2.0;
        float _2019 = (1.0 - _2014) / (_2014 + 1.0);
        float _4645 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2029 = ((((1.0 - _2020) * (_2015 + 2.0)) * exp2(log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2015 + 1.0))) + _2020) * _1944;
        float _2030 = _1912 * 0.5;
        float _2031 = _1922 * 0.5;
        float _2032 = _1932 * 0.5;
        float _2033 = dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032));
        float _2038 = (_2033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2033);
        float _2046 = (dot(vec3(_1191, _1192, _1193), vec3(_2038 * _2030, _2038 * _2031, _2038 * _2032)) + 1.0) * 0.5;
        float _4656 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2055 = sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032)) / (_1945 + 9.9999997473787516355514526367188e-06);
        float _4667 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2056 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2057 = _2056 * 2.0;
        float _2061 = (1.0 - _2056) / (_2056 + 1.0);
        float _4678 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2071 = ((((1.0 - _2062) * (_2057 + 2.0)) * exp2(log2(isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2057 + 1.0))) + _2062) * _1945;
        _2079 = _1912;
        _2080 = _1911;
        _2081 = _1910;
        _2082 = _1922;
        _2083 = _1921;
        _2084 = _1920;
        _2085 = _1932;
        _2086 = _1931;
        _2087 = _1930;
        _2088 = _1945;
        _2089 = _1944;
        _2090 = _1943;
        _2091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)));
        _2092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)));
        _2093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)));
    }
    else
    {
        _2079 = _1770;
        _2080 = _1770;
        _2081 = _1770;
        _2082 = _1770;
        _2083 = _1770;
        _2084 = _1770;
        _2085 = _1770;
        _2086 = _1770;
        _2087 = _1770;
        _2088 = _1770;
        _2089 = _1770;
        _2090 = _1770;
        _2091 = 0.0;
        _2092 = 0.0;
        _2093 = 0.0;
    }
    float _2103 = (cbModelParam._m0[1u].x * (_2091 - _1782)) + _1782;
    float _2104 = (cbModelParam._m0[1u].x * (_2092 - _1783)) + _1783;
    float _2105 = (cbModelParam._m0[1u].x * (_2093 - _1784)) + _1784;
    float _2126 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2104, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2104, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2104, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2103));
    float _2147 = _1376 * 0.5;
    float _2148 = _1377 * 0.5;
    float _2149 = _1378 * 0.5;
    float _2150 = dot(vec4(_2147, _2148, _2149, 1.0), vec4(_2081, _2084, _2087, _2090));
    float _2153 = dot(vec4(_2147, _2148, _2149, 1.0), vec4(_2080, _2083, _2086, _2089));
    float _2156 = dot(vec4(_2147, _2148, _2149, 1.0), vec4(_2079, _2082, _2085, _2088));
    float _2190;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2163 = dot(vec4(_2147, _2148, _2149, 1.0), vec4(_1769, _1773, _1776, _1779));
        float _2167 = dot(vec4(_2147, _2148, _2149, 1.0), vec4(_1771, _1774, _1777, _1780));
        float _2171 = dot(vec4(_2147, _2148, _2149, 1.0), vec4(_1772, _1775, _1778, _1781));
        float _2178 = dot(vec4(cbModelParam._m0[39u]), vec4(_2147, _2148, _2149, 1.0));
        _2190 = dot(vec3(isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0)), isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0)), isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2178) ? 0.0 : (isnan(0.0) ? _2178 : max(0.0, _2178))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2190 = 1.0;
    }
    float _2201;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2192 = dot(vec4(cbModelParam._m0[40u]), vec4(_2147, _2148, _2149, 1.0));
        _2201 = dot(vec3(isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0)), isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0)), isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2192) ? 0.0 : (isnan(0.0) ? _2192 : max(0.0, _2192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2201 = 1.0;
    }
    float _2205 = (_2201 * cbModelParam._m0[1u].x) + (_2190 * (1.0 - cbModelParam._m0[1u].x));
    float _2215 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1194);
    float _2216 = isnan(_2215) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2215 : min(cbModelParam._m0[25u].z, _2215));
    float _2296;
    float _2298;
    float _2300;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2263 = fma(_1440, cbModelParam._m0[13u].z, fma(_1436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1432)) + cbModelParam._m0[13u].w;
        float _2267 = fma(_1440, cbModelParam._m0[14u].z, fma(_1436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1432)) + cbModelParam._m0[14u].w;
        float _2271 = fma(_1440, cbModelParam._m0[15u].z, fma(_1436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1432)) + cbModelParam._m0[15u].w;
        float _2274 = fma(_1378, cbModelParam._m0[13u].z, fma(_1377, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1376));
        float _2277 = fma(_1378, cbModelParam._m0[14u].z, fma(_1377, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1376));
        float _2280 = fma(_1378, cbModelParam._m0[15u].z, fma(_1377, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1376));
        float _2308;
        if (_2274 > 0.0)
        {
            _2308 = abs((1.0 - _2263) / _2274);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2274 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2263 + 1.0) / _2274);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2308 = frontier_phi_17_15_ladder;
        }
        float _2531;
        if (_2277 > 0.0)
        {
            _2531 = abs((1.0 - _2267) / _2277);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2277 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2267 + 1.0) / _2277);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2531 = frontier_phi_26_22_ladder;
        }
        float _2788;
        if (_2280 > 0.0)
        {
            _2788 = abs((1.0 - _2271) / _2280);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2280 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2271 + 1.0) / _2280);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2788 = frontier_phi_38_33_ladder;
        }
        float _2790 = isnan(_2531) ? _2308 : (isnan(_2308) ? _2531 : min(_2308, _2531));
        float _2791 = isnan(_2788) ? _2790 : (isnan(_2790) ? _2788 : min(_2790, _2788));
        float _2795 = (_2791 * _2274) + _2263;
        float _2796 = (_2791 * _2277) + _2267;
        float _2797 = (_2791 * _2280) + _2271;
        float _2798 = _2791 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2798;
        float _2802 = _2798 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 > _2802) || ((_2796 < _2800) || ((_2795 < _2800) || (_2795 > _2802))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2797, cbModelParam._m0[9u].z, fma(_2796, cbModelParam._m0[9u].y, _2795 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2797, cbModelParam._m0[10u].z, fma(_2796, cbModelParam._m0[10u].y, _2795 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2797, cbModelParam._m0[11u].z, fma(_2796, cbModelParam._m0[11u].y, _2795 * cbModelParam._m0[11u].x))), _2216);
            frontier_phi_16_38_ladder = _2925.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2925.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2925.x * cbModelParam._m0[1u].y;
        }
        _2296 = frontier_phi_16_38_ladder_2;
        _2298 = frontier_phi_16_38_ladder_1;
        _2300 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1376, _1377, _1378), _2216);
        _2296 = _2284.x * cbModelParam._m0[1u].y;
        _2298 = _2284.y * cbModelParam._m0[1u].y;
        _2300 = _2284.z * cbModelParam._m0[1u].y;
    }
    float _2304 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1194);
    float _2305 = isnan(_2304) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2304 : min(cbModelParam._m0[25u].w, _2304));
    float _2394;
    float _2396;
    float _2398;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2358 = fma(_1440, cbModelParam._m0[21u].z, fma(_1436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1432)) + cbModelParam._m0[21u].w;
        float _2362 = fma(_1440, cbModelParam._m0[22u].z, fma(_1436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1432)) + cbModelParam._m0[22u].w;
        float _2366 = fma(_1440, cbModelParam._m0[23u].z, fma(_1436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1432)) + cbModelParam._m0[23u].w;
        float _2369 = fma(_1378, cbModelParam._m0[21u].z, fma(_1377, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1376));
        float _2372 = fma(_1378, cbModelParam._m0[22u].z, fma(_1377, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1376));
        float _2375 = fma(_1378, cbModelParam._m0[23u].z, fma(_1377, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1376));
        float _2536;
        if (_2369 > 0.0)
        {
            _2536 = abs((1.0 - _2358) / _2369);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2369 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2358 + 1.0) / _2369);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2536 = frontier_phi_28_24_ladder;
        }
        float _2815;
        if (_2372 > 0.0)
        {
            _2815 = abs((1.0 - _2362) / _2372);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2372 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2362 + 1.0) / _2372);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2815 = frontier_phi_40_35_ladder;
        }
        float _3028;
        if (_2375 > 0.0)
        {
            _3028 = abs((1.0 - _2366) / _2375);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2375 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2366 + 1.0) / _2375);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3028 = frontier_phi_49_46_ladder;
        }
        float _3030 = isnan(_2815) ? _2536 : (isnan(_2536) ? _2815 : min(_2536, _2815));
        float _3031 = isnan(_3028) ? _3030 : (isnan(_3030) ? _3028 : min(_3030, _3028));
        float _3035 = (_3031 * _2369) + _2358;
        float _3036 = (_3031 * _2372) + _2362;
        float _3037 = (_3031 * _2375) + _2366;
        float _3038 = _3031 * 9.9999997473787516355514526367188e-05;
        float _3039 = (-1.0) - _3038;
        float _3041 = _3038 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3037 > _3041) || ((_3037 < _3039) || ((_3036 > _3041) || ((_3036 < _3039) || ((_3035 < _3039) || (_3035 > _3041))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3236 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3037, cbModelParam._m0[17u].z, fma(_3036, cbModelParam._m0[17u].y, _3035 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3037, cbModelParam._m0[18u].z, fma(_3036, cbModelParam._m0[18u].y, _3035 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3037, cbModelParam._m0[19u].z, fma(_3036, cbModelParam._m0[19u].y, _3035 * cbModelParam._m0[19u].x))), _2305);
            frontier_phi_25_49_ladder = _3236.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3236.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3236.x * cbModelParam._m0[1u].z;
        }
        _2394 = frontier_phi_25_49_ladder_2;
        _2396 = frontier_phi_25_49_ladder_1;
        _2398 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1376, _1377, _1378), _2305);
        _2394 = _2378.x * cbModelParam._m0[1u].z;
        _2396 = _2378.y * cbModelParam._m0[1u].z;
        _2398 = _2378.z * cbModelParam._m0[1u].z;
    }
    float _2411 = (((_1403 * _1352) + _1404) * _1368) * ((cbModelParam._m0[1u].w * (_2394 - _2296)) + _2296);
    float _2413 = (((_1403 * _1354) + _1404) * _1368) * ((cbModelParam._m0[1u].w * (_2396 - _2298)) + _2298);
    float _2415 = (((_1403 * _1355) + _1404) * _1368) * ((cbModelParam._m0[1u].w * (_2398 - _2300)) + _2300);
    float _2418 = fma(_2415, cbSceneParam._m0[89u].z, fma(_2413, cbSceneParam._m0[89u].y, _2411 * cbSceneParam._m0[89u].x));
    float _2421 = fma(_2415, cbSceneParam._m0[90u].z, fma(_2413, cbSceneParam._m0[90u].y, _2411 * cbSceneParam._m0[90u].x));
    float _2424 = fma(_2415, cbSceneParam._m0[91u].z, fma(_2413, cbSceneParam._m0[91u].y, _2411 * cbSceneParam._m0[91u].x));
    vec4 _2432 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1290, _1291));
    float _2434 = _2432.w;
    float _2446 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2434);
    float _2447 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2434);
    float _2448 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2434);
    uvec4 _2452 = floatBitsToUint(cbInstanceData._m0[_307 + 5u]);
    uint _2454 = _2452.x * 14u;
    uint _2455 = _2454 + 13u;
    float _2462 = _1368 + (-1.0);
    float _2467 = (cbLight._m0[_2455].x * _2462) + 1.0;
    float _2468 = (cbLight._m0[_2455].y * _2462) + 1.0;
    float _2469 = (cbLight._m0[_2455].z * _2462) + 1.0;
    float _2470 = (cbLight._m0[_2455].w * _2462) + 1.0;
    uint _2471 = _2454 + 5u;
    float _2477 = isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0));
    uint _2481 = _2454 + 4u;
    float _2490 = isnan(1.0) ? _2467 : (isnan(_2467) ? 1.0 : min(_2467, 1.0));
    uint _2494 = _2454 | 1u;
    float _2505 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_1191, _1192, _1193));
    float _2508 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_1191, _1192, _1193));
    float _4814 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _4825 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2513 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * 0.3183098733425140380859375;
    float _2515 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * 0.3183098733425140380859375;
    float _2522 = ((cbLight._m0[_2471].x * _2477) * _2515) + (((cbLight._m0[_2481].x * _2446) * _2490) * _2513);
    float _2523 = ((_2477 * cbLight._m0[_2471].y) * _2515) + (((cbLight._m0[_2481].y * _2447) * _2490) * _2513);
    float _2524 = ((_2477 * cbLight._m0[_2471].z) * _2515) + (((cbLight._m0[_2481].z * _2448) * _2490) * _2513);
    uvec4 _2528 = floatBitsToUint(cbLight._m0[_2454 + 12u]);
    bool _2530 = _2528.x == 0u;
    float _2541;
    float _2543;
    float _2545;
    if (_2530)
    {
        _2541 = _2522;
        _2543 = _2523;
        _2545 = _2524;
    }
    else
    {
        uint _2549 = _2454 + 6u;
        float _2565 = (dot(vec3(cbLight._m0[_2454 + 2u].xyz), vec3(_1191, _1192, _1193)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4836 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2568 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
        _2541 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2522;
        _2543 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2523;
        _2545 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2524;
    }
    bool _2548 = _2528.y == 0u;
    float _2586;
    float _2588;
    float _2590;
    if (_2548)
    {
        _2586 = _2541;
        _2588 = _2543;
        _2590 = _2545;
    }
    else
    {
        uint _2759 = _2454 + 7u;
        float _2775 = (dot(vec3(cbLight._m0[_2454 + 3u].xyz), vec3(_1191, _1192, _1193)) * 0.5) + 0.5;
        float _2776 = _2775 * _2775;
        float _4852 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2777 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2778 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
        _2586 = (((cbLight._m0[_2759].x * 0.3183098733425140380859375) * _2777) * _2778) + _2541;
        _2588 = (((cbLight._m0[_2759].y * 0.3183098733425140380859375) * _2777) * _2778) + _2543;
        _2590 = (((cbLight._m0[_2759].z * 0.3183098733425140380859375) * _2777) * _2778) + _2545;
    }
    uint _2593 = _2454 + 8u;
    float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _1194) * 0.949999988079071044921875);
    float _2607 = _2606 * _2606;
    float _2608 = cbLight._m0[_2454].x + _1270;
    float _2609 = cbLight._m0[_2454].y + _1271;
    float _2610 = cbLight._m0[_2454].z + _1272;
    float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
    float _2615 = _2614 * _2608;
    float _2616 = _2614 * _2609;
    float _2617 = _2614 * _2610;
    float _2618 = dot(vec3(_1191, _1192, _1193), vec3(cbLight._m0[_2454].xyz));
    float _4868 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _4879 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _2622 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2623 = dot(vec3(_1191, _1192, _1193), vec3(_2615, _2616, _2617));
    float _4890 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _2627 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2615, _2616, _2617));
    float _4901 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2631 = _2607 * _2607;
    float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
    float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
    float _2644 = 0.959999978542327880859375 - _1349;
    float _2646 = 0.959999978542327880859375 - _1350;
    float _2647 = 0.959999978542327880859375 - _1351;
    float _2654 = 1.0 - _2607;
    float _2665 = (0.5 / (((_2622 * ((_2621 * _2654) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2654) + _2607) * _2621))) * _2621;
    float _4912 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2667 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
    uint _2681 = _2454 + 9u;
    float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _1194) * 0.949999988079071044921875);
    float _2693 = _2692 * _2692;
    float _2694 = cbLight._m0[_2494].x + _1270;
    float _2695 = cbLight._m0[_2494].y + _1271;
    float _2696 = cbLight._m0[_2494].z + _1272;
    float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
    float _2701 = _2700 * _2694;
    float _2702 = _2700 * _2695;
    float _2703 = _2700 * _2696;
    float _2704 = dot(vec3(_1191, _1192, _1193), vec3(cbLight._m0[_2494].xyz));
    float _4923 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
    float _2708 = dot(vec3(_1191, _1192, _1193), vec3(_2701, _2702, _2703));
    float _4934 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
    float _2712 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2701, _2702, _2703));
    float _4945 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2716 = _2693 * _2693;
    float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
    float _2727 = exp2(log2(1.0 - (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) * 5.0);
    float _2734 = 1.0 - _2693;
    float _2744 = (0.5 / (((_2622 * ((_2707 * _2734) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2734) + _2693) * _2707))) * _2707;
    float _4956 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2746 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
    float _2756 = (((((_2727 * _2644) + _1352) * cbLight._m0[_2681].x) * _2746) * _2477) + ((((cbLight._m0[_2593].x * _2446) * ((_2643 * _2644) + _1352)) * _2667) * _2490);
    float _2757 = (((((_2727 * _2646) + _1354) * cbLight._m0[_2681].y) * _2746) * _2477) + ((((cbLight._m0[_2593].y * _2447) * ((_2643 * _2646) + _1354)) * _2667) * _2490);
    float _2758 = (((((_2727 * _2647) + _1355) * cbLight._m0[_2681].z) * _2746) * _2477) + ((((cbLight._m0[_2593].z * _2448) * ((_2643 * _2647) + _1355)) * _2667) * _2490);
    float _2820;
    float _2822;
    float _2824;
    if (_2530)
    {
        _2820 = _2756;
        _2822 = _2757;
        _2824 = _2758;
    }
    else
    {
        uint _2826 = _2454 + 2u;
        uint _2830 = _2454 + 10u;
        float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2826].w)) * _1194) * 0.949999988079071044921875);
        float _2845 = _2844 * _2844;
        float _2846 = cbLight._m0[_2826].x + _1270;
        float _2847 = cbLight._m0[_2826].y + _1271;
        float _2848 = cbLight._m0[_2826].z + _1272;
        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
        float _2853 = _2852 * _2846;
        float _2854 = _2852 * _2847;
        float _2855 = _2852 * _2848;
        float _2856 = dot(vec3(_1191, _1192, _1193), vec3(cbLight._m0[_2826].xyz));
        float _4967 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _2860 = dot(vec3(_1191, _1192, _1193), vec3(_2853, _2854, _2855));
        float _4978 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _2864 = dot(vec3(cbLight._m0[_2826].xyz), vec3(_2853, _2854, _2855));
        float _4989 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2868 = _2845 * _2845;
        float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
        float _2879 = exp2(log2(1.0 - (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) * 5.0);
        float _2886 = 1.0 - _2845;
        float _2896 = (0.5 / (((_2622 * ((_2859 * _2886) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2886) + _2845) * _2859))) * _2859;
        float _5000 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
        _2820 = (((((_2879 * _2644) + _1352) * cbLight._m0[_2830].x) * _2898) * _2899) + _2756;
        _2822 = (((((_2879 * _2646) + _1354) * cbLight._m0[_2830].y) * _2898) * _2899) + _2757;
        _2824 = (((((_2879 * _2647) + _1355) * cbLight._m0[_2830].z) * _2898) * _2899) + _2758;
    }
    float _2934;
    float _2936;
    float _2938;
    if (_2548)
    {
        _2934 = _2820;
        _2936 = _2822;
        _2938 = _2824;
    }
    else
    {
        uint _2945 = _2454 + 3u;
        uint _2949 = _2454 + 11u;
        float _2963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2945].w)) * _1194) * 0.949999988079071044921875);
        float _2964 = _2963 * _2963;
        float _2965 = cbLight._m0[_2945].x + _1270;
        float _2966 = cbLight._m0[_2945].y + _1271;
        float _2967 = cbLight._m0[_2945].z + _1272;
        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
        float _2972 = _2971 * _2965;
        float _2973 = _2971 * _2966;
        float _2974 = _2971 * _2967;
        float _2975 = dot(vec3(_1191, _1192, _1193), vec3(cbLight._m0[_2945].xyz));
        float _5016 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2978 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
        float _2979 = dot(vec3(_1191, _1192, _1193), vec3(_2972, _2973, _2974));
        float _5027 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
        float _2983 = dot(vec3(cbLight._m0[_2945].xyz), vec3(_2972, _2973, _2974));
        float _5038 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2987 = _2964 * _2964;
        float _2991 = ((_2982 * _2982) * (_2987 + (-1.0))) + 1.0;
        float _2998 = exp2(log2(1.0 - (isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0)))) * 5.0);
        float _3005 = 1.0 - _2964;
        float _3015 = (0.5 / (((_2622 * ((_2978 * _3005) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _3005) + _2964) * _2978))) * _2978;
        float _5049 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3017 = (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_2987 / ((_2991 * _2991) * 3.141590118408203125));
        float _3018 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
        _2934 = (((((_2998 * _2644) + _1352) * cbLight._m0[_2949].x) * _3017) * _3018) + _2820;
        _2936 = (((((_2998 * _2646) + _1354) * cbLight._m0[_2949].y) * _3017) * _3018) + _2822;
        _2938 = (((((_2998 * _2647) + _1355) * cbLight._m0[_2949].z) * _3017) * _3018) + _2824;
    }
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    if (_2452.y == 0u)
    {
        float _3093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3094 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3093;
        float _3095 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3093;
        float _3096 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3093;
        uvec4 _3108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3109 = _3108.x;
        uint _3120 = uint((float(_3108.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1291) / _3109))) + floor(float(uint(cbSceneParam._m0[85u].x * _1290) / _3109)));
        float _3130 = (log2(_3096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3131 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
        uint _3134 = uint(isnan(14.0) ? _3131 : (isnan(_3131) ? 14.0 : min(_3131, 14.0)));
        uvec4 _3139 = texelFetch(g_lightClusterGridBuffer, int(((_3134 << 2u) + (_3120 << 6u)) >> 2u));
        uint _3140 = _3139.x;
        uint _3141 = _3108.z;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        if (((((1u << ((_3141 >> 4u) & 15u)) + 4294967295u) & _3140) == 0u) || ((_3141 & 240u) == 0u))
        {
            _3241 = 0.0;
            _3243 = 0.0;
            _3245 = 0.0;
            _3247 = 0.0;
            _3249 = 0.0;
            _3251 = 0.0;
        }
        else
        {
            float _3242;
            float _3244;
            float _3246;
            float _3248;
            float _3250;
            float _3252;
            float _3394 = 0.0;
            float _3395 = 0.0;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            uint _3400 = 0u;
            uint _3409;
            bool _3410;
            for (;;)
            {
                _3409 = texelFetch(g_lightClassification, int((((_3134 << 5u) + (_3120 << 9u)) + (_3400 << 2u)) >> 2u)).x;
                _3410 = _3409 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3410)
                {
                    frontier_phi_66_pred = _3394;
                    frontier_phi_66_pred_1 = _3399;
                    frontier_phi_66_pred_2 = _3398;
                    frontier_phi_66_pred_3 = _3397;
                    frontier_phi_66_pred_4 = _3396;
                    frontier_phi_66_pred_5 = _3395;
                }
                else
                {
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    uint _3545;
                    _3539 = _3394;
                    _3540 = _3395;
                    _3541 = _3396;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3399;
                    _3545 = _3409;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    for (;;)
                    {
                        uint _3549 = uint(findLSB(_3545)) + (_3400 << 5u);
                        uint _3546 = (_3545 + 4294967295u) & _3545;
                        uint _3551 = _3549 * 48u;
                        vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3551)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 3u)).x));
                        uint _3571 = (_3549 * 48u) + 4u;
                        vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3571)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 3u)).x));
                        uint _3590 = (_3549 * 48u) + 8u;
                        vec3 _3601 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3590)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 2u)).x));
                        float _3605 = _3565.x - _3094;
                        float _3606 = _3565.y - _3095;
                        float _3607 = _3565.z - _3096;
                        float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                        float _3611 = inversesqrt(_3608);
                        float _3612 = _3611 * _3605;
                        float _3613 = _3611 * _3606;
                        float _3614 = _3611 * _3607;
                        float _3615 = dot(vec3(_1309, _1312, _1315), vec3(_3612, _3613, _3614));
                        float _3620 = 1.0 - (_3608 * _3565.w);
                        float _5075 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3621 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                        float _3622 = sqrt(_3608) * _3584.w;
                        float _3625 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                        float _3626 = _3625 * _3625;
                        float _3629 = ((1.0 - _3626) * _3615) + _3626;
                        float _3632 = _3622 * _3622;
                        float _3636 = ((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3621) / ((_3632 * 0.699999988079071044921875) + 1.0);
                        float _3640 = (-0.0) - _3094;
                        float _3641 = (-0.0) - _3095;
                        float _3642 = (-0.0) - _3096;
                        float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                        float _3647 = _3646 * _3640;
                        float _3648 = _3646 * _3641;
                        float _3649 = _3646 * _3642;
                        float _3657 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                        float _3658 = 1.0 - _1384;
                        float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                        float _3666 = _3665 * _3665;
                        float _3667 = _3666 * _3666;
                        float _3668 = _3647 + _3612;
                        float _3669 = _3648 + _3613;
                        float _3670 = _3649 + _3614;
                        float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                        float _3678 = dot(vec3(_1309, _1312, _1315), vec3(_3647, _3648, _3649));
                        float _5091 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3681 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                        float _3682 = dot(vec3(_1309, _1312, _1315), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                        float _5102 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3685 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                        float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                        float _3690 = _3625 * _3666;
                        float _3691 = _3690 * _3690;
                        float _3694 = ((1.0 - _3691) * _3615) + _3691;
                        float _5113 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3695 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                        float _3696 = 1.0 - _3666;
                        float _3706 = (0.5 / (((_3695 * ((_3681 * _3696) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3666) * _3681))) * _3695;
                        float _5124 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3717 = (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0)))) / ((_3689 * _3689) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125))) * _3621;
                        _3469 = (_3636 * _3584.x) + _3542;
                        _3470 = (_3636 * _3584.y) + _3543;
                        _3471 = (_3636 * _3584.z) + _3544;
                        _3466 = (_3717 * _3601.x) + _3539;
                        _3467 = (_3717 * _3601.y) + _3540;
                        _3468 = (_3717 * _3601.z) + _3541;
                        if (_3546 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3539 = _3466;
                            _3540 = _3467;
                            _3541 = _3468;
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3471;
                            _3545 = _3546;
                        }
                    }
                    frontier_phi_66_pred = _3466;
                    frontier_phi_66_pred_1 = _3471;
                    frontier_phi_66_pred_2 = _3470;
                    frontier_phi_66_pred_3 = _3469;
                    frontier_phi_66_pred_4 = _3468;
                    frontier_phi_66_pred_5 = _3467;
                }
                _3242 = frontier_phi_66_pred;
                _3252 = frontier_phi_66_pred_1;
                _3250 = frontier_phi_66_pred_2;
                _3248 = frontier_phi_66_pred_3;
                _3246 = frontier_phi_66_pred_4;
                _3244 = frontier_phi_66_pred_5;
                uint _3401 = _3400 + 1u;
                if (_3401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3394 = _3242;
                    _3395 = _3244;
                    _3396 = _3246;
                    _3397 = _3248;
                    _3398 = _3250;
                    _3399 = _3252;
                    _3400 = _3401;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3241 = _3242;
            _3243 = _3244;
            _3245 = _3246;
            _3247 = _3248;
            _3249 = _3250;
            _3251 = _3252;
        }
        uvec4 _3255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3256 = _3255.z;
        uint _3258 = (_3256 >> 8u) & 15u;
        float _3362;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        float _3372;
        if (((4294967295u << _3258) & _3140) == 0u)
        {
            _3362 = _3241;
            _3364 = _3243;
            _3366 = _3245;
            _3368 = _3247;
            _3370 = _3249;
            _3372 = _3251;
        }
        else
        {
            float _3387 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
            float _3388 = _3387 * _3094;
            float _3389 = _3387 * _3095;
            float _3390 = _3387 * _3096;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3258 < ((_3256 >> 12u) & 15u))
            {
                float _3363;
                float _3365;
                float _3367;
                float _3369;
                float _3371;
                float _3373;
                float _3522 = _3241;
                float _3523 = _3243;
                float _3524 = _3245;
                float _3525 = _3247;
                float _3526 = _3249;
                float _3527 = _3251;
                uint _3528 = _3258;
                uint _3537;
                bool _3538;
                for (;;)
                {
                    _3537 = texelFetch(g_lightClassification, int((((_3134 << 5u) + (_3120 << 9u)) + (_3528 << 2u)) >> 2u)).x;
                    _3538 = _3537 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3538)
                    {
                        frontier_phi_77_pred = _3527;
                        frontier_phi_77_pred_1 = _3526;
                        frontier_phi_77_pred_2 = _3525;
                        frontier_phi_77_pred_3 = _3524;
                        frontier_phi_77_pred_4 = _3523;
                        frontier_phi_77_pred_5 = _3522;
                    }
                    else
                    {
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _3744 = _3522;
                        float _3745 = _3523;
                        float _3746 = _3524;
                        float _3747 = _3525;
                        float _3748 = _3526;
                        float _3749 = _3527;
                        uint _3750 = _3537;
                        uint _3751;
                        vec4 _3776;
                        float _3777;
                        vec4 _3792;
                        vec3 _3804;
                        vec4 _3819;
                        vec4 _3834;
                        float _3880;
                        bool _3881;
                        for (;;)
                        {
                            uint _3761 = ((_3528 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3750));
                            _3751 = (_3750 + 4294967295u) & _3750;
                            uint _3763 = _3761 * 40u;
                            _3776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 3u)).x));
                            _3777 = _3776.w;
                            uint _3779 = (_3761 * 40u) + 4u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3794 = (_3761 * 40u) + 8u;
                            _3804 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x));
                            uint _3806 = (_3761 * 40u) + 16u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3761 * 40u) + 20u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3761 * 40u) + 24u;
                            vec4 _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3855 = (_3761 * 40u) + 28u;
                            vec4 _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            _3880 = fma(_3096, _3868.z, fma(_3095, _3868.y, _3868.x * _3094)) + _3868.w;
                            _3881 = !((fma(_3096, _3849.z, fma(_3095, _3849.y, _3849.x * _3094)) + _3849.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3881)
                            {
                                float _3908 = _3776.x - _3094;
                                float _3909 = _3776.y - _3095;
                                float _3910 = _3776.z - _3096;
                                float _3911 = dot(vec3(_3908, _3909, _3910), vec3(_3908, _3909, _3910));
                                float _3914 = inversesqrt(_3911);
                                float _3915 = _3914 * _3908;
                                float _3916 = _3914 * _3909;
                                float _3917 = _3914 * _3910;
                                float _3921 = 1.0 - (_3911 / (_3777 * _3777));
                                float _5135 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3926 = sqrt(_3911) * _3792.w;
                                float _3928 = 1.39999997615814208984375 / (_3926 + 1.39999997615814208984375);
                                float _3929 = _3928 * _3928;
                                float _3932 = ((1.0 - _3929) * dot(vec3(_3915, _3916, _3917), vec3(_1309, _1312, _1315))) + _3929;
                                float _3935 = _3926 * _3926;
                                float _3939 = (fma(_3096, _3819.z, fma(_3095, _3819.y, _3819.x * _3094)) + _3819.w) / _3880;
                                float _3940 = (fma(_3096, _3834.z, fma(_3095, _3834.y, _3834.x * _3094)) + _3834.w) / _3880;
                                float _3944 = 1.0 - dot(vec2(_3939, _3940), vec2(_3939, _3940));
                                float _5151 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3946 = _3945 * (((isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0))) * _3922) / ((_3935 * 0.699999988079071044921875) + 1.0));
                                float _3958 = exp2(log2(1.0 / ((_3935 * 3.5) + 5.0)) * 0.25);
                                float _3959 = 1.0 - _1384;
                                float _3966 = sqrt(1.0 - ((1.0 - (_3959 * _3959)) * (1.0 - (_3958 * _3958))));
                                float _3967 = _3966 * _3966;
                                float _3968 = _3967 * _3967;
                                float _3969 = _3915 - _3388;
                                float _3970 = _3916 - _3389;
                                float _3971 = _3917 - _3390;
                                float _3975 = inversesqrt(dot(vec3(_3969, _3970, _3971), vec3(_3969, _3970, _3971)));
                                float _3979 = dot(vec3(_1309, _1312, _1315), vec3((-0.0) - _3388, (-0.0) - _3389, (-0.0) - _3390));
                                float _5162 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3982 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3983 = dot(vec3(_1309, _1312, _1315), vec3(_3975 * _3969, _3975 * _3970, _3975 * _3971));
                                float _5173 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3986 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3990 = ((_3986 * _3986) * (_3968 + (-1.0))) + 1.0;
                                float _3991 = _3928 * _3967;
                                float _3992 = _3991 * _3991;
                                float _3998 = ((1.0 - _3992) * dot(vec3(_1309, _1312, _1315), vec3(_3915, _3916, _3917))) + _3992;
                                float _5184 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _3999 = isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0));
                                float _4000 = 1.0 - _3967;
                                float _4010 = (0.5 / (((_3999 * ((_3982 * _4000) + _3967)) + 9.9999999392252902907785028219223e-09) + (((_3999 * _4000) + _3967) * _3982))) * _3999;
                                float _5195 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4020 = (_3945 * _3922) * (((_3968 * 3.1415927410125732421875) * (isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0)))) / ((_3990 * _3990) * ((_3935 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3946 * _3792.y;
                                frontier_phi_83_pred_1 = _3946 * _3792.x;
                                frontier_phi_83_pred_2 = _4020 * _3804.z;
                                frontier_phi_83_pred_3 = _4020 * _3804.y;
                                frontier_phi_83_pred_4 = _4020 * _3804.x;
                                frontier_phi_83_pred_5 = _3946 * _3792.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4028 = frontier_phi_83_pred;
                            _4027 = frontier_phi_83_pred_1;
                            _4026 = frontier_phi_83_pred_2;
                            _4025 = frontier_phi_83_pred_3;
                            _4024 = frontier_phi_83_pred_4;
                            _4029 = frontier_phi_83_pred_5;
                            _3734 = _4027 + _3747;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3731 = _4024 + _3744;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            if (_3751 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3751;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3736;
                        frontier_phi_77_pred_1 = _3735;
                        frontier_phi_77_pred_2 = _3734;
                        frontier_phi_77_pred_3 = _3733;
                        frontier_phi_77_pred_4 = _3732;
                        frontier_phi_77_pred_5 = _3731;
                    }
                    _3373 = frontier_phi_77_pred;
                    _3371 = frontier_phi_77_pred_1;
                    _3369 = frontier_phi_77_pred_2;
                    _3367 = frontier_phi_77_pred_3;
                    _3365 = frontier_phi_77_pred_4;
                    _3363 = frontier_phi_77_pred_5;
                    uint _3529 = _3528 + 1u;
                    if (_3529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3522 = _3363;
                        _3523 = _3365;
                        _3524 = _3367;
                        _3525 = _3369;
                        _3526 = _3371;
                        _3527 = _3373;
                        _3528 = _3529;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3367;
                frontier_phi_58_59_ladder_1 = _3373;
                frontier_phi_58_59_ladder_2 = _3371;
                frontier_phi_58_59_ladder_3 = _3369;
                frontier_phi_58_59_ladder_4 = _3365;
                frontier_phi_58_59_ladder_5 = _3363;
            }
            else
            {
                frontier_phi_58_59_ladder = _3245;
                frontier_phi_58_59_ladder_1 = _3251;
                frontier_phi_58_59_ladder_2 = _3249;
                frontier_phi_58_59_ladder_3 = _3247;
                frontier_phi_58_59_ladder_4 = _3243;
                frontier_phi_58_59_ladder_5 = _3241;
            }
            _3362 = frontier_phi_58_59_ladder_5;
            _3364 = frontier_phi_58_59_ladder_4;
            _3366 = frontier_phi_58_59_ladder;
            _3368 = frontier_phi_58_59_ladder_3;
            _3370 = frontier_phi_58_59_ladder_2;
            _3372 = frontier_phi_58_59_ladder_1;
        }
        float _3377 = isnan(1.0) ? _1368 : (isnan(_1368) ? 1.0 : min(_1368, 1.0));
        _3153 = (_3377 * _3368) + _2586;
        _3155 = (_3377 * _3370) + _2588;
        _3157 = (_3377 * _3372) + _2590;
        _3159 = ((_3362 * _1352) * _3377) + _2934;
        _3161 = ((_3364 * _1354) * _3377) + _2936;
        _3163 = ((_3366 * _1355) * _3377) + _2938;
    }
    else
    {
        _3153 = _2586;
        _3155 = _2588;
        _3157 = _2590;
        _3159 = _2934;
        _3161 = _2936;
        _3163 = _2938;
    }
    float _5211 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
    float _5222 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
    float _5233 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _3180 = ((isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0))) * (_3153 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1368))) + ((_3159 + ((isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0))) * _2205)) * cbPerFrame._m0[3u].x);
    float _3181 = ((isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0))) * (_3155 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1368))) + ((_3161 + ((isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0))) * _2205)) * cbPerFrame._m0[3u].x);
    float _3182 = ((isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0))) * (_3157 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1368))) + ((_3163 + ((isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0))) * _2205)) * cbPerFrame._m0[3u].x);
    uint _3183 = _307 + 6u;
    float _3191 = _1290 / cbSceneParam._m0[86u].x;
    float _3192 = _1291 / cbSceneParam._m0[86u].y;
    vec4 _3206 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3191, _3192, (log2((isnan(cbSceneParam._m0[77u].w) ? _1213 : (isnan(_1213) ? cbSceneParam._m0[77u].w : min(_1213, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3208 = _3206.x;
    float _3209 = _3206.y;
    float _3210 = _3206.z;
    float _3211 = _3206.w;
    float _3304;
    float _3306;
    float _3308;
    float _3310;
    if (_1213 > cbSceneParam._m0[78u].w)
    {
        float _3266 = isnan(_1213) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1213 : min(cbSceneParam._m0[80u].w, _1213));
        float _3267 = _3266 / _1213;
        float _3278 = _3267 * _1263;
        float _3279 = _1264 * _3267;
        float _3280 = (-0.0) - _3279;
        float _3282 = _3267 * _1265;
        float _3284 = (cbSceneParam._m0[77u].w * _3280) / _3266;
        float _3285 = _3284 + cbSceneParam._m0[79u].w;
        float _3286 = cbSceneParam._m0[79u].w - _3279;
        float _3292 = sqrt(((_3278 * _3278) + (_3279 * _3279)) + (_3282 * _3282));
        float _3295 = (1.0 - (cbSceneParam._m0[77u].w / _3266)) * _3292;
        float _3300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3302 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3479;
        if (abs((_3280 - _3284) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3479 = ((((_3285 > 0.0) ? exp2(_3300 * _3285) : (2.0 - exp2(_3302 * _3285))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3295;
        }
        else
        {
            float _3423 = 1.0 / cbSceneParam._m0[80u].x;
            float _3424 = isnan(_3286) ? _3285 : (isnan(_3285) ? _3286 : max(_3285, _3286));
            float _3425 = isnan(_3286) ? _3285 : (isnan(_3285) ? _3286 : min(_3285, _3286));
            float _3434 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : min(_3424, 0.0));
            float _3435 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : min(_3425, 0.0));
            _3479 = ((abs(_3292 / _3280) * cbSceneParam._m0[80u].y) * ((((_3434 - _3435) * 2.0) - ((exp2(_3300 * (isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0)))) - exp2(_3300 * (isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))))) * _3423)) - ((exp2(_3302 * _3434) - exp2(_3302 * _3435)) * _3423))) + (_3295 * cbSceneParam._m0[80u].z);
        }
        vec4 _3481 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3191, _3192, 1.0), 0.0);
        float _3490 = exp2((_3479 * (-1.44269502162933349609375)) * (1.0 - _3481.w));
        float _3491 = log2(_3490);
        float _3507 = log2(_3211);
        _3304 = (exp2(_3507 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].x)) * _3481.x) / cbSceneParam._m0[78u].x)) + _3208;
        _3306 = (exp2(_3507 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].y)) * _3481.y) / cbSceneParam._m0[78u].y)) + _3209;
        _3308 = (exp2(_3507 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3491 * cbSceneParam._m0[78u].z)) * _3481.z) / cbSceneParam._m0[78u].z)) + _3210;
        _3310 = _3490 * _3211;
    }
    else
    {
        _3304 = _3208;
        _3306 = _3209;
        _3308 = _3210;
        _3310 = _3211;
    }
    bool _3517;
    vec4 _3320;
    vec4 _3342;
    float _3344;
    float _3348;
    float _3349;
    float _3350;
    float _3351;
    bool _3361;
    for (;;)
    {
        _3320 = cbMatDynParam._m0[0u];
        float _3322 = roundEven(_3320.y);
        bool _3323 = _3322 == 3.0;
        float _3324 = log2(_3310);
        float _3331 = exp2(_3324 * cbSceneParam._m0[78u].x) * _3180;
        float _3332 = exp2(_3324 * cbSceneParam._m0[78u].y) * _3181;
        float _3333 = exp2(_3324 * cbSceneParam._m0[78u].z) * _3182;
        float _3340 = _1279 + (-0.5);
        _3342 = cbMtdParam._m0[1u];
        _3344 = _3342.y * _3340;
        float _3347 = (_3322 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3348 = _3347 * (_3323 ? _3331 : (_3331 + (cbSceneParam._m0[72u].w * _3304)));
        _3349 = _3347 * (_3323 ? _3332 : (_3332 + (cbSceneParam._m0[72u].w * _3306)));
        _3350 = _3347 * (_3323 ? _3333 : (_3333 + (cbSceneParam._m0[72u].w * _3308)));
        _3351 = _3340 * 0.999000012874603271484375;
        _3361 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3361)
        {
            if ((cbInstanceData._m0[_307 + 7u].x + _3351) < 0.5)
            {
                _3517 = true;
                break;
            }
        }
        uint _3458 = _1328 + uint(_3320.w);
        if ((cbInstanceData._m0[_3458].w < 1.0) && ((cbInstanceData._m0[_3458].w + _3351) < 0.5))
        {
            _3517 = true;
            break;
        }
        if ((_3344 + 1.0) < _3342.x)
        {
            _3517 = true;
            break;
        }
        _3517 = false;
        break;
    }
    float _3722;
    if (_3517)
    {
        discard_state = true;
        _3722 = 0.0;
    }
    else
    {
        _3722 = cbInstanceData._m0[_3183].w;
    }
    SV_Target.x = _3348;
    SV_Target.y = _3349;
    SV_Target.z = _3350;
    SV_Target.w = _3722;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3183].w;
    discard_exit();
}


