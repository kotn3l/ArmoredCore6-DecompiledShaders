#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1482;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3829 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _422 = (_415 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _423 = (_415 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _424 = (_415 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3840 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _564 = ((_536.x - _555) * _415) + _555;
    float _565 = ((_536.y - _556) * _415) + _556;
    float _566 = ((_536.z - _557) * _415) + _557;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _591 = ((_578.z - _566) * _488) + _566;
    float _594 = ((((_578.x - _564) * _488) + _564) * 2.0) + (-1.0);
    float _596 = ((((_578.y - _565) * _488) + _565) * 2.0) + (-1.0);
    float _597 = dot(vec2(_594, _596), vec2(_594, _596));
    float _3851 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _602 = sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _628 = (((_616.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _594;
    float _629 = (((_616.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _632 = fma(_602, _249, fma(_629, _256, _628 * _242));
    float _635 = fma(_602, _250, fma(_629, _257, _628 * _243));
    float _638 = fma(_602, _251, fma(_629, _258, _628 * _244));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _681 = (cbMtdParam._m0[19u].x + dot(vec4(_642 * _632, _642 * _635, _642 * _638, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_671 - _672) * cbMtdParam._m0[24u].z) + _672) * cbMtdParam._m0[21u].z);
    float _3862 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _684 = (-0.0) - cbMtdParam._m0[24u].x;
    float _686 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
    float _694 = _682 - ((_682 * TEXCOORD_8.x) * _687);
    float _695 = _682 - ((_682 * TEXCOORD_8.y) * _687);
    float _696 = _682 - ((_682 * TEXCOORD_8.z) * _687);
    float _703 = (_694 * ((_516.x * cbMtdParam._m0[18u].x) - _495)) + _495;
    float _704 = (_695 * ((_516.y * cbMtdParam._m0[18u].y) - _496)) + _496;
    float _705 = (_696 * ((_516.z * cbMtdParam._m0[18u].z) - _497)) + _497;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _719 = _717.x;
    float _720 = 1.0 - _719;
    float _746 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_719 - _720) * cbMtdParam._m0[24u].w) + _720) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3883 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _747 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _755 = ((((cbMtdParam._m0[10u].x - _703) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _747) + _703;
    float _756 = ((((cbMtdParam._m0[10u].y - _704) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _747) + _704;
    float _757 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _705)) * _747) + _705;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _785 = _783.x;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _785) * _415) + _785;
    float _820 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _803) * _488) + _803;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _820) * cbMtdParam._m0[19u].z) + _820;
    float _826 = _824 - (_824 * _694);
    float _828 = _826 - (_826 * _747);
    float _832 = (cbMtdParam._m0[19u].w * (_616.z - _591)) + _591;
    vec4 _846 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _853 = (_846.x * 2.0) + (-1.0);
    float _854 = (_846.y * 2.0) + (-1.0);
    float _855 = dot(vec2(_853, _854), vec2(_853, _854));
    float _3894 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _863 = ((_846.z - _832) * _694) + _832;
    float _866 = ((cbMtdParam._m0[23u].x - _863) * _747) + _863;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _891 = (_885.x * 2.0) + (-1.0);
    float _892 = (_885.y * 2.0) + (-1.0);
    float _893 = dot(vec2(_891, _892), vec2(_891, _892));
    float _3905 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _908 = ((sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) - _602) * _696) + _602;
    float _911 = (((_853 - _628) * _694) + _628) + (cbMtdParam._m0[21u].x * _628);
    float _912 = (((_854 - _629) * _695) + _629) + (cbMtdParam._m0[21u].x * _629);
    float _923 = (((_891 - _911) + (_911 * cbMtdParam._m0[22u].z)) * _747) + _911;
    float _924 = (((_892 - _912) + (_912 * cbMtdParam._m0[22u].z)) * _747) + _912;
    float _925 = (_747 * (sqrt(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) - _908)) + _908;
    float _929 = cbMtdParam._m0[22u].x + _616.w;
    float _932 = fma(_925, _249, fma(_924, _256, _923 * _242));
    float _935 = fma(_925, _250, fma(_924, _257, _923 * _243));
    float _938 = fma(_925, _251, fma(_924, _258, _923 * _244));
    float _942 = inversesqrt(dot(vec3(_932, _935, _938), vec3(_932, _935, _938)));
    float _943 = _942 * _932;
    float _944 = _942 * _935;
    float _945 = _942 * _938;
    float _3916 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _946 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _3938 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3949 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3960 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _3971 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _951 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _965 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1049 = fma(_945, cbSceneParam._m0[5u].z, fma(_944, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _943));
    float _1052 = fma(_945, cbSceneParam._m0[6u].z, fma(_944, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _943));
    float _1055 = fma(_945, cbSceneParam._m0[7u].z, fma(_944, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _943));
    uint _1069 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1075 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_1069].x;
    float _1076 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_1069].y;
    float _1077 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_1069].z;
    float _3982 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1081 = 1.0 - _951;
    float _1082 = _1078 * _1081;
    float _1083 = _1079 * _1081;
    float _1084 = _1080 * _1081;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _951;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _951;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _951;
    float _1092 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    float _1095 = _1091 + 0.039999999105930328369140625;
    vec4 _1104 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1108 = ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * TEXCOORD_5.w) * _1104.x;
    float _1109 = dot(vec3(_943, _944, _945), vec3(_1022, _1023, _1024));
    float _1112 = _1109 * 2.0;
    float _1116 = (_1112 * _943) - _1022;
    float _1117 = (_1112 * _944) - _1023;
    float _1118 = (_1112 * _945) - _1024;
    float _1122 = abs(dot(vec3(_1022, _1023, _1024), vec3(_943, _944, _945)));
    float _4015 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1124 = sqrt(_946);
    float _1137 = exp2((_1124 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1124 * 3.0));
    float _1143 = (1.0 - _1137) * ((_1124 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1144 = _1137 * _1124;
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1481;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1206 = fma(_1180, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172));
        float _1210 = fma(_1180, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172));
        float _1214 = fma(_1180, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172));
        float _1239 = _1172 + _943;
        float _1240 = _1176 + _944;
        float _1241 = _1180 + _945;
        float _1251 = fma(_1241, cbModelParam._m0[26u].z, fma(_1240, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1239)) - _1206;
        float _1252 = fma(_1241, cbModelParam._m0[27u].z, fma(_1240, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1239)) - _1210;
        float _1253 = fma(_1241, cbModelParam._m0[28u].z, fma(_1240, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1239)) - _1214;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1206 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1210 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[34u].z) + ((((((_1214 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1309 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1275.x + (-0.5));
        float _1311 = _1309 * (_1275.y + (-0.5));
        float _1312 = _1309 * (_1275.z + (-0.5));
        float _1319 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1282.x + (-0.5));
        float _1321 = _1319 * (_1282.y + (-0.5));
        float _1322 = _1319 * (_1282.z + (-0.5));
        float _1329 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1289.x + (-0.5));
        float _1331 = _1329 * (_1289.y + (-0.5));
        float _1332 = _1329 * (_1289.z + (-0.5));
        float _1339 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1296.x + (-0.5));
        float _1341 = _1339 * (_1296.y + (-0.5));
        float _1342 = _1339 * (_1296.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1363 = (dot(vec3(_943, _944, _945), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1373 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4063 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1375 + 1.0))) + _1380) * _1343;
        float _1390 = _1311 * 0.5;
        float _1391 = _1321 * 0.5;
        float _1392 = _1331 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_943, _944, _945), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4096 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1417 + 1.0))) + _1422) * _1344;
        float _1432 = _1312 * 0.5;
        float _1433 = _1322 * 0.5;
        float _1434 = _1332 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_943, _944, _945), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4129 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1459 + 1.0))) + _1464) * _1345;
        _1481 = _1312;
        _1483 = _1311;
        _1484 = _1310;
        _1485 = _1322;
        _1486 = _1321;
        _1487 = _1320;
        _1488 = _1332;
        _1489 = _1331;
        _1490 = _1330;
        _1491 = _1345;
        _1492 = _1344;
        _1493 = _1343;
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1482;
        _1483 = _1482;
        _1484 = _1482;
        _1485 = _1482;
        _1486 = _1482;
        _1487 = _1482;
        _1488 = _1482;
        _1489 = _1482;
        _1490 = _1482;
        _1491 = _1482;
        _1492 = _1482;
        _1493 = _1482;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1520 = fma(_1180, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172));
        float _1524 = fma(_1180, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172));
        float _1528 = fma(_1180, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172));
        float _1551 = _1172 + _943;
        float _1552 = _1176 + _944;
        float _1553 = _1180 + _945;
        float _1563 = fma(_1553, cbModelParam._m0[30u].z, fma(_1552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1551)) - _1520;
        float _1564 = fma(_1553, cbModelParam._m0[31u].z, fma(_1552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1551)) - _1524;
        float _1565 = fma(_1553, cbModelParam._m0[32u].z, fma(_1552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1551)) - _1528;
        float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
        float _1582 = ((_1569 * _1563) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1520 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1569 * _1564) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1524 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1569 * _1565) / cbModelParam._m0[35u].z) + ((((((_1528 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        float _1619 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1586.x + (-0.5));
        float _1621 = _1619 * (_1586.y + (-0.5));
        float _1622 = _1619 * (_1586.z + (-0.5));
        float _1629 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1593.x + (-0.5));
        float _1631 = _1629 * (_1593.y + (-0.5));
        float _1632 = _1629 * (_1593.z + (-0.5));
        float _1639 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1600.x + (-0.5));
        float _1641 = _1639 * (_1600.y + (-0.5));
        float _1642 = _1639 * (_1600.z + (-0.5));
        float _1649 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1607.x + (-0.5));
        float _1651 = _1649 * (_1607.y + (-0.5));
        float _1652 = _1649 * (_1607.z + (-0.5));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = _1620 * 0.5;
        float _1657 = _1630 * 0.5;
        float _1658 = _1640 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_943, _944, _945), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4192 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1683 + 1.0))) + _1688) * _1653;
        float _1698 = _1621 * 0.5;
        float _1699 = _1631 * 0.5;
        float _1700 = _1641 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_943, _944, _945), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4225 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1725 + 1.0))) + _1730) * _1654;
        float _1740 = _1622 * 0.5;
        float _1741 = _1632 * 0.5;
        float _1742 = _1642 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_943, _944, _945), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4258 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1767 + 1.0))) + _1772) * _1655;
        _1789 = _1622;
        _1790 = _1621;
        _1791 = _1620;
        _1792 = _1632;
        _1793 = _1631;
        _1794 = _1630;
        _1795 = _1642;
        _1796 = _1641;
        _1797 = _1640;
        _1798 = _1655;
        _1799 = _1654;
        _1800 = _1653;
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
    }
    else
    {
        _1789 = _1482;
        _1790 = _1482;
        _1791 = _1482;
        _1792 = _1482;
        _1793 = _1482;
        _1794 = _1482;
        _1795 = _1482;
        _1796 = _1482;
        _1797 = _1482;
        _1798 = _1482;
        _1799 = _1482;
        _1800 = _1482;
        _1801 = 0.0;
        _1802 = 0.0;
        _1803 = 0.0;
    }
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1494)) + _1494;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1495)) + _1495;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1496)) + _1496;
    float _1836 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1813));
    float _1857 = _1116 * 0.5;
    float _1858 = _1117 * 0.5;
    float _1859 = _1118 * 0.5;
    float _1860 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1863 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1866 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1900;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1873 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1481, _1485, _1488, _1491));
        float _1877 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1881 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1888 = dot(vec4(cbModelParam._m0[39u]), vec4(_1857, _1858, _1859, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1911;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1902 = dot(vec4(cbModelParam._m0[40u]), vec4(_1857, _1858, _1859, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1915 = (_1911 * cbModelParam._m0[1u].x) + (_1900 * (1.0 - cbModelParam._m0[1u].x));
    float _1925 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _946);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1925 : min(cbModelParam._m0[25u].z, _1925));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1180, cbModelParam._m0[13u].z, fma(_1176, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1172)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1180, cbModelParam._m0[14u].z, fma(_1176, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1172)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1180, cbModelParam._m0[15u].z, fma(_1176, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1172)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1118, cbModelParam._m0[13u].z, fma(_1117, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116));
        float _1987 = fma(_1118, cbModelParam._m0[14u].z, fma(_1117, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116));
        float _1990 = fma(_1118, cbModelParam._m0[15u].z, fma(_1117, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2018 = frontier_phi_14_12_ladder;
        }
        float _2241;
        if (_1987 > 0.0)
        {
            _2241 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2241 = frontier_phi_23_19_ladder;
        }
        float _2498;
        if (_1990 > 0.0)
        {
            _2498 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2498 = frontier_phi_35_30_ladder;
        }
        float _2500 = isnan(_2241) ? _2018 : (isnan(_2018) ? _2241 : min(_2018, _2241));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1984) + _1973;
        float _2506 = (_2501 * _1987) + _1977;
        float _2507 = (_2501 * _1990) + _1981;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1926);
            frontier_phi_13_35_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_13_35_ladder_2;
        _2008 = frontier_phi_13_35_ladder_1;
        _2010 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1116, _1117, _1118), _1926);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _946);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2104;
    float _2106;
    float _2108;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2068 = fma(_1180, cbModelParam._m0[21u].z, fma(_1176, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1172)) + cbModelParam._m0[21u].w;
        float _2072 = fma(_1180, cbModelParam._m0[22u].z, fma(_1176, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1172)) + cbModelParam._m0[22u].w;
        float _2076 = fma(_1180, cbModelParam._m0[23u].z, fma(_1176, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1172)) + cbModelParam._m0[23u].w;
        float _2079 = fma(_1118, cbModelParam._m0[21u].z, fma(_1117, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116));
        float _2082 = fma(_1118, cbModelParam._m0[22u].z, fma(_1117, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116));
        float _2085 = fma(_1118, cbModelParam._m0[23u].z, fma(_1117, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116));
        float _2246;
        if (_2079 > 0.0)
        {
            _2246 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2246 = frontier_phi_25_21_ladder;
        }
        float _2525;
        if (_2082 > 0.0)
        {
            _2525 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2525 = frontier_phi_37_32_ladder;
        }
        float _2738;
        if (_2085 > 0.0)
        {
            _2738 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2738 = frontier_phi_46_43_ladder;
        }
        float _2740 = isnan(_2525) ? _2246 : (isnan(_2246) ? _2525 : min(_2246, _2525));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _2079) + _2068;
        float _2746 = (_2741 * _2082) + _2072;
        float _2747 = (_2741 * _2085) + _2076;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_22_46_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2104 = frontier_phi_22_46_ladder_2;
        _2106 = frontier_phi_22_46_ladder_1;
        _2108 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1116, _1117, _1118), _2015);
        _2104 = _2088.x * cbModelParam._m0[1u].z;
        _2106 = _2088.y * cbModelParam._m0[1u].z;
        _2108 = _2088.z * cbModelParam._m0[1u].z;
    }
    float _2121 = (((_1143 * _1092) + _1144) * _1108) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2123 = (((_1143 * _1094) + _1144) * _1108) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2125 = (((_1143 * _1095) + _1144) * _1108) * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2128 = fma(_2125, cbSceneParam._m0[89u].z, fma(_2123, cbSceneParam._m0[89u].y, _2121 * cbSceneParam._m0[89u].x));
    float _2131 = fma(_2125, cbSceneParam._m0[90u].z, fma(_2123, cbSceneParam._m0[90u].y, _2121 * cbSceneParam._m0[90u].x));
    float _2134 = fma(_2125, cbSceneParam._m0[91u].z, fma(_2123, cbSceneParam._m0[91u].y, _2121 * cbSceneParam._m0[91u].x));
    vec4 _2142 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1030, _1031));
    float _2144 = _2142.w;
    float _2156 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2144);
    float _2157 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2144);
    float _2158 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2144);
    uvec4 _2162 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2164 = _2162.x * 14u;
    uint _2165 = _2164 + 13u;
    float _2172 = _1108 + (-1.0);
    float _2177 = (cbLight._m0[_2165].x * _2172) + 1.0;
    float _2178 = (cbLight._m0[_2165].y * _2172) + 1.0;
    float _2179 = (cbLight._m0[_2165].z * _2172) + 1.0;
    float _2180 = (cbLight._m0[_2165].w * _2172) + 1.0;
    uint _2181 = _2164 + 5u;
    float _2187 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2191 = _2164 + 4u;
    float _2200 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2204 = _2164 | 1u;
    float _2215 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_943, _944, _945));
    float _2218 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_943, _944, _945));
    float _4394 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _4405 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2223 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2225 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2232 = ((cbLight._m0[_2181].x * _2187) * _2225) + (((cbLight._m0[_2191].x * _2156) * _2200) * _2223);
    float _2233 = ((_2187 * cbLight._m0[_2181].y) * _2225) + (((cbLight._m0[_2191].y * _2157) * _2200) * _2223);
    float _2234 = ((_2187 * cbLight._m0[_2181].z) * _2225) + (((cbLight._m0[_2191].z * _2158) * _2200) * _2223);
    uvec4 _2238 = floatBitsToUint(cbLight._m0[_2164 + 12u]);
    bool _2240 = _2238.x == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2240)
    {
        _2251 = _2232;
        _2253 = _2233;
        _2255 = _2234;
    }
    else
    {
        uint _2259 = _2164 + 6u;
        float _2275 = (dot(vec3(cbLight._m0[_2164 + 2u].xyz), vec3(_943, _944, _945)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4416 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2278 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2251 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2232;
        _2253 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2233;
        _2255 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2234;
    }
    bool _2258 = _2238.y == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2258)
    {
        _2296 = _2251;
        _2298 = _2253;
        _2300 = _2255;
    }
    else
    {
        uint _2469 = _2164 + 7u;
        float _2485 = (dot(vec3(cbLight._m0[_2164 + 3u].xyz), vec3(_943, _944, _945)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4432 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2488 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2296 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2251;
        _2298 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2253;
        _2300 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2255;
    }
    uint _2303 = _2164 + 8u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _946) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2164].x + _1022;
    float _2319 = cbLight._m0[_2164].y + _1023;
    float _2320 = cbLight._m0[_2164].z + _1024;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2164].xyz));
    float _4448 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _2332 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2333 = dot(vec3(_943, _944, _945), vec3(_2325, _2326, _2327));
    float _4470 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2325, _2326, _2327));
    float _4481 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2317 * _2317;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2354 = 0.959999978542327880859375 - _1089;
    float _2356 = 0.959999978542327880859375 - _1090;
    float _2357 = 0.959999978542327880859375 - _1091;
    float _2364 = 1.0 - _2317;
    float _2375 = (0.5 / (((_2332 * ((_2331 * _2364) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2364) + _2317) * _2331))) * _2331;
    float _4492 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    uint _2391 = _2164 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _946) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2204].x + _1022;
    float _2405 = cbLight._m0[_2204].y + _1023;
    float _2406 = cbLight._m0[_2204].z + _1024;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2204].xyz));
    float _4503 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2418 = dot(vec3(_943, _944, _945), vec3(_2411, _2412, _2413));
    float _4514 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2411, _2412, _2413));
    float _4525 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2444 = 1.0 - _2403;
    float _2454 = (0.5 / (((_2332 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2444) + _2403) * _2417))) * _2417;
    float _4536 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2466 = (((((_2437 * _2354) + _1092) * cbLight._m0[_2391].x) * _2456) * _2187) + ((((cbLight._m0[_2303].x * _2156) * ((_2353 * _2354) + _1092)) * _2377) * _2200);
    float _2467 = (((((_2437 * _2356) + _1094) * cbLight._m0[_2391].y) * _2456) * _2187) + ((((cbLight._m0[_2303].y * _2157) * ((_2353 * _2356) + _1094)) * _2377) * _2200);
    float _2468 = (((((_2437 * _2357) + _1095) * cbLight._m0[_2391].z) * _2456) * _2187) + ((((cbLight._m0[_2303].z * _2158) * ((_2353 * _2357) + _1095)) * _2377) * _2200);
    float _2530;
    float _2532;
    float _2534;
    if (_2240)
    {
        _2530 = _2466;
        _2532 = _2467;
        _2534 = _2468;
    }
    else
    {
        uint _2536 = _2164 + 2u;
        uint _2540 = _2164 + 10u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _946) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _1022;
        float _2557 = cbLight._m0[_2536].y + _1023;
        float _2558 = cbLight._m0[_2536].z + _1024;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2536].xyz));
        float _4547 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2570 = dot(vec3(_943, _944, _945), vec3(_2563, _2564, _2565));
        float _4558 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4569 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2332 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2596) + _2555) * _2569))) * _2569;
        float _4580 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2530 = (((((_2589 * _2354) + _1092) * cbLight._m0[_2540].x) * _2608) * _2609) + _2466;
        _2532 = (((((_2589 * _2356) + _1094) * cbLight._m0[_2540].y) * _2608) * _2609) + _2467;
        _2534 = (((((_2589 * _2357) + _1095) * cbLight._m0[_2540].z) * _2608) * _2609) + _2468;
    }
    float _2644;
    float _2646;
    float _2648;
    if (_2258)
    {
        _2644 = _2530;
        _2646 = _2532;
        _2648 = _2534;
    }
    else
    {
        uint _2655 = _2164 + 3u;
        uint _2659 = _2164 + 11u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _946) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _1022;
        float _2676 = cbLight._m0[_2655].y + _1023;
        float _2677 = cbLight._m0[_2655].z + _1024;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_943, _944, _945), vec3(cbLight._m0[_2655].xyz));
        float _4596 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2689 = dot(vec3(_943, _944, _945), vec3(_2682, _2683, _2684));
        float _4607 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4618 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2332 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2715) + _2674) * _2688))) * _2688;
        float _4629 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2644 = (((((_2708 * _2354) + _1092) * cbLight._m0[_2659].x) * _2727) * _2728) + _2530;
        _2646 = (((((_2708 * _2356) + _1094) * cbLight._m0[_2659].y) * _2727) * _2728) + _2532;
        _2648 = (((((_2708 * _2357) + _1095) * cbLight._m0[_2659].z) * _2727) * _2728) + _2534;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2162.y == 0u)
    {
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2803;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2803;
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2803;
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _2819)));
        float _2840 = (log2(_2806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            uint _3101 = 0u;
            uint _3110;
            bool _3111;
            for (;;)
            {
                _3110 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3101 << 2u)) >> 2u)).x;
                _3111 = _3110 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3111)
                {
                    frontier_phi_61_pred = _3095;
                    frontier_phi_61_pred_1 = _3100;
                    frontier_phi_61_pred_2 = _3099;
                    frontier_phi_61_pred_3 = _3098;
                    frontier_phi_61_pred_4 = _3097;
                    frontier_phi_61_pred_5 = _3096;
                }
                else
                {
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    uint _3225;
                    _3219 = _3095;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3110;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    for (;;)
                    {
                        uint _3229 = uint(findLSB(_3225)) + (_3101 << 5u);
                        uint _3226 = (_3225 + 4294967295u) & _3225;
                        uint _3231 = _3229 * 48u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3251 = (_3229 * 48u) + 4u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3270 = (_3229 * 48u) + 8u;
                        vec3 _3281 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x));
                        float _3285 = _3245.x - _2804;
                        float _3286 = _3245.y - _2805;
                        float _3287 = _3245.z - _2806;
                        float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                        float _3291 = inversesqrt(_3288);
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3295 = dot(vec3(_1049, _1052, _1055), vec3(_3292, _3293, _3294));
                        float _3300 = 1.0 - (_3288 * _3245.w);
                        float _4655 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3302 = sqrt(_3288) * _3264.w;
                        float _3305 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3295) + _3306;
                        float _3312 = _3302 * _3302;
                        float _3316 = ((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3301) / ((_3312 * 0.699999988079071044921875) + 1.0);
                        float _3320 = (-0.0) - _2804;
                        float _3321 = (-0.0) - _2805;
                        float _3322 = (-0.0) - _2806;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3337 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _1124;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3327 + _3292;
                        float _3349 = _3328 + _3293;
                        float _3350 = _3329 + _3294;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_1049, _1052, _1055), vec3(_3327, _3328, _3329));
                        float _4671 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3362 = dot(vec3(_1049, _1052, _1055), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4682 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3305 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3295) + _3371;
                        float _4693 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4704 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3369 * _3369) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125))) * _3301;
                        _3154 = (_3316 * _3264.x) + _3222;
                        _3155 = (_3316 * _3264.y) + _3223;
                        _3156 = (_3316 * _3264.z) + _3224;
                        _3151 = (_3397 * _3281.x) + _3219;
                        _3152 = (_3397 * _3281.y) + _3220;
                        _3153 = (_3397 * _3281.z) + _3221;
                        if (_3226 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3219 = _3151;
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3226;
                        }
                    }
                    frontier_phi_61_pred = _3151;
                    frontier_phi_61_pred_1 = _3156;
                    frontier_phi_61_pred_2 = _3155;
                    frontier_phi_61_pred_3 = _3154;
                    frontier_phi_61_pred_4 = _3153;
                    frontier_phi_61_pred_5 = _3152;
                }
                _2952 = frontier_phi_61_pred;
                _2962 = frontier_phi_61_pred_1;
                _2960 = frontier_phi_61_pred_2;
                _2958 = frontier_phi_61_pred_3;
                _2956 = frontier_phi_61_pred_4;
                _2954 = frontier_phi_61_pred_5;
                uint _3102 = _3101 + 1u;
                if (_3102 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3095 = _2952;
                    _3096 = _2954;
                    _3097 = _2956;
                    _3098 = _2958;
                    _3099 = _2960;
                    _3100 = _2962;
                    _3101 = _3102;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((4294967295u << _2968) & _2850) == 0u)
        {
            _3063 = _2951;
            _3065 = _2953;
            _3067 = _2955;
            _3069 = _2957;
            _3071 = _2959;
            _3073 = _2961;
        }
        else
        {
            float _3088 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
            float _3089 = _3088 * _2804;
            float _3090 = _3088 * _2805;
            float _3091 = _3088 * _2806;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3202 = _2951;
                float _3203 = _2953;
                float _3204 = _2955;
                float _3205 = _2957;
                float _3206 = _2959;
                float _3207 = _2961;
                uint _3208 = _2968;
                uint _3217;
                bool _3218;
                for (;;)
                {
                    _3217 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                    _3218 = _3217 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3218)
                    {
                        frontier_phi_67_pred = _3205;
                        frontier_phi_67_pred_1 = _3206;
                        frontier_phi_67_pred_2 = _3207;
                        frontier_phi_67_pred_3 = _3204;
                        frontier_phi_67_pred_4 = _3203;
                        frontier_phi_67_pred_5 = _3202;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3415 = _3202;
                        float _3416 = _3203;
                        float _3417 = _3204;
                        float _3418 = _3205;
                        float _3419 = _3206;
                        float _3420 = _3207;
                        uint _3421 = _3217;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3505;
                        float _3551;
                        bool _3552;
                        for (;;)
                        {
                            uint _3432 = ((_3208 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3432 * 40u) + 20u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3432 * 40u) + 24u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3526 = (_3432 * 40u) + 28u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3551 = fma(_2806, _3539.z, fma(_2805, _3539.y, _3539.x * _2804)) + _3539.w;
                            _3552 = !((fma(_2806, _3520.z, fma(_2805, _3520.y, _3520.x * _2804)) + _3520.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3552)
                            {
                                float _3579 = _3447.x - _2804;
                                float _3580 = _3447.y - _2805;
                                float _3581 = _3447.z - _2806;
                                float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                                float _3585 = inversesqrt(_3582);
                                float _3586 = _3585 * _3579;
                                float _3587 = _3585 * _3580;
                                float _3588 = _3585 * _3581;
                                float _3592 = 1.0 - (_3582 / (_3448 * _3448));
                                float _4715 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3597 = sqrt(_3582) * _3463.w;
                                float _3599 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                                float _3600 = _3599 * _3599;
                                float _3603 = ((1.0 - _3600) * dot(vec3(_3586, _3587, _3588), vec3(_1049, _1052, _1055))) + _3600;
                                float _3606 = _3597 * _3597;
                                float _3610 = (fma(_2806, _3490.z, fma(_2805, _3490.y, _3490.x * _2804)) + _3490.w) / _3551;
                                float _3611 = (fma(_2806, _3505.z, fma(_2805, _3505.y, _3505.x * _2804)) + _3505.w) / _3551;
                                float _3615 = 1.0 - dot(vec2(_3610, _3611), vec2(_3610, _3611));
                                float _4731 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3617 = _3616 * (((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3593) / ((_3606 * 0.699999988079071044921875) + 1.0));
                                float _3629 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                                float _3630 = 1.0 - _1124;
                                float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                                float _3638 = _3637 * _3637;
                                float _3639 = _3638 * _3638;
                                float _3640 = _3586 - _3089;
                                float _3641 = _3587 - _3090;
                                float _3642 = _3588 - _3091;
                                float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                                float _3650 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3089, (-0.0) - _3090, (-0.0) - _3091));
                                float _4742 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3654 = dot(vec3(_1049, _1052, _1055), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                                float _4753 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                                float _3662 = _3599 * _3638;
                                float _3663 = _3662 * _3662;
                                float _3669 = ((1.0 - _3663) * dot(vec3(_1049, _1052, _1055), vec3(_3586, _3587, _3588))) + _3663;
                                float _4764 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3671 = 1.0 - _3638;
                                float _3681 = (0.5 / (((_3670 * ((_3653 * _3671) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3638) * _3653))) * _3670;
                                float _4775 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3691 = (_3616 * _3593) * (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3661 * _3661) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3691 * _3475.x;
                                frontier_phi_73_pred_1 = _3691 * _3475.y;
                                frontier_phi_73_pred_2 = _3617 * _3463.z;
                                frontier_phi_73_pred_3 = _3617 * _3463.y;
                                frontier_phi_73_pred_4 = _3617 * _3463.x;
                                frontier_phi_73_pred_5 = _3691 * _3475.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3695 = frontier_phi_73_pred;
                            _3696 = frontier_phi_73_pred_1;
                            _3700 = frontier_phi_73_pred_2;
                            _3699 = frontier_phi_73_pred_3;
                            _3698 = frontier_phi_73_pred_4;
                            _3697 = frontier_phi_73_pred_5;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3405;
                        frontier_phi_67_pred_1 = _3406;
                        frontier_phi_67_pred_2 = _3407;
                        frontier_phi_67_pred_3 = _3404;
                        frontier_phi_67_pred_4 = _3403;
                        frontier_phi_67_pred_5 = _3402;
                    }
                    _3070 = frontier_phi_67_pred;
                    _3072 = frontier_phi_67_pred_1;
                    _3074 = frontier_phi_67_pred_2;
                    _3068 = frontier_phi_67_pred_3;
                    _3066 = frontier_phi_67_pred_4;
                    _3064 = frontier_phi_67_pred_5;
                    uint _3209 = _3208 + 1u;
                    if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3202 = _3064;
                        _3203 = _3066;
                        _3204 = _3068;
                        _3205 = _3070;
                        _3206 = _3072;
                        _3207 = _3074;
                        _3208 = _3209;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3072;
                frontier_phi_55_56_ladder_1 = _3074;
                frontier_phi_55_56_ladder_2 = _3070;
                frontier_phi_55_56_ladder_3 = _3068;
                frontier_phi_55_56_ladder_4 = _3066;
                frontier_phi_55_56_ladder_5 = _3064;
            }
            else
            {
                frontier_phi_55_56_ladder = _2959;
                frontier_phi_55_56_ladder_1 = _2961;
                frontier_phi_55_56_ladder_2 = _2957;
                frontier_phi_55_56_ladder_3 = _2955;
                frontier_phi_55_56_ladder_4 = _2953;
                frontier_phi_55_56_ladder_5 = _2951;
            }
            _3063 = frontier_phi_55_56_ladder_5;
            _3065 = frontier_phi_55_56_ladder_4;
            _3067 = frontier_phi_55_56_ladder_3;
            _3069 = frontier_phi_55_56_ladder_2;
            _3071 = frontier_phi_55_56_ladder;
            _3073 = frontier_phi_55_56_ladder_1;
        }
        float _3078 = isnan(1.0) ? _1108 : (isnan(_1108) ? 1.0 : min(_1108, 1.0));
        _2863 = (_3078 * _3069) + _2296;
        _2865 = (_3078 * _3071) + _2298;
        _2867 = (_3078 * _3073) + _2300;
        _2869 = ((_3063 * _1092) * _3078) + _2644;
        _2871 = ((_3065 * _1094) * _3078) + _2646;
        _2873 = ((_3067 * _1095) * _3078) + _2648;
    }
    else
    {
        _2863 = _2296;
        _2865 = _2298;
        _2867 = _2300;
        _2869 = _2644;
        _2871 = _2646;
        _2873 = _2648;
    }
    float _4791 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4802 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _4813 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    uint _2893 = _261 + 6u;
    float _2901 = _1030 / cbSceneParam._m0[86u].x;
    float _2902 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _2916 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, (log2((isnan(cbSceneParam._m0[77u].w) ? _965 : (isnan(_965) ? cbSceneParam._m0[77u].w : min(_965, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2918 = _2916.x;
    float _2919 = _2916.y;
    float _2920 = _2916.z;
    float _2921 = _2916.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_965 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_965) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _965 : min(cbSceneParam._m0[80u].w, _965));
        float _2977 = _2976 / _965;
        float _2988 = _2977 * _1015;
        float _2989 = _1016 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2991 = _2977 * _1017;
        float _2993 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2989;
        float _3001 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3164;
        if (abs((_2990 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3164 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3124 = 1.0 / cbSceneParam._m0[80u].x;
            float _3125 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3126 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            _3164 = ((abs(_3001 / _2990) * cbSceneParam._m0[80u].y) * ((((_3135 - _3136) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))))) * _3124)) - ((exp2(_3011 * _3135) - exp2(_3011 * _3136)) * _3124))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3166 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, 1.0), 0.0);
        float _3175 = exp2((_3164 * (-1.44269502162933349609375)) * (1.0 - _3166.w));
        float _3176 = log2(_3175);
        float _3192 = log2(_2921);
        _3013 = (exp2(_3192 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].x)) * _3166.x) / cbSceneParam._m0[78u].x)) + _2918;
        _3015 = (exp2(_3192 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].y)) * _3166.y) / cbSceneParam._m0[78u].y)) + _2919;
        _3017 = (exp2(_3192 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].z)) * _3166.z) / cbSceneParam._m0[78u].z)) + _2920;
        _3019 = _3175 * _2921;
    }
    else
    {
        _3013 = _2918;
        _3015 = _2919;
        _3017 = _2920;
        _3019 = _2921;
    }
    float _3031 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3032 = _3031 == 3.0;
    float _3033 = log2(_3019);
    float _3040 = exp2(_3033 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2863 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1108))) + ((_2869 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3041 = exp2(_3033 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2865 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1108))) + ((_2871 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3042 = exp2(_3033 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2867 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1108))) + ((_2873 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3051 = (_3031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3051 * (_3032 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3013)));
    SV_Target.y = _3051 * (_3032 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3015)));
    SV_Target.z = _3051 * (_3032 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3017)));
    SV_Target.w = cbInstanceData._m0[_2893].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2893].w;
}


