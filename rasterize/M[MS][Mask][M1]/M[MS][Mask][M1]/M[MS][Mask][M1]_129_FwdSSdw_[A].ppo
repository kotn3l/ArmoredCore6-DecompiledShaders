#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1773;
float _4174;
float _4175;
float _4176;
float _4177;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _265 = _264 * _256;
    float _266 = _264 * _257;
    float _267 = _264 * _258;
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = _271 * NORMAL.x;
    float _273 = _271 * NORMAL.y;
    float _274 = _271 * NORMAL.z;
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = _278 * TANGENT.x;
    float _280 = _278 * TANGENT.y;
    float _281 = _278 * TANGENT.z;
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4186 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4197 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4208 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = _385.x * cbMtdParam._m0[11u].x;
    float _391 = _385.y * cbMtdParam._m0[11u].y;
    float _392 = _385.z * cbMtdParam._m0[11u].z;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _479 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _496 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _430.x) * 2.0) - ((((_467 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4219 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _504 = (_497 * ((_411.x * cbMtdParam._m0[12u].x) - _390)) + _390;
    float _505 = (_497 * ((_411.y * cbMtdParam._m0[12u].y) - _391)) + _391;
    float _506 = (_497 * ((_411.z * cbMtdParam._m0[12u].z) - _392)) + _392;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _569 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _430.y) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[23u].w) + _555) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4230 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _577 = (_570 * ((_523.x * cbMtdParam._m0[13u].x) - _504)) + _504;
    float _578 = (_570 * ((_523.y * cbMtdParam._m0[13u].y) - _505)) + _505;
    float _579 = (_570 * ((_523.z * cbMtdParam._m0[13u].z) - _506)) + _506;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _627 = dot(vec4(_617, _615.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _639 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _430.z) * 2.0) - ((((_617 - _627) * cbMtdParam._m0[23u].w) + _627) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4241 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _650 = (_359.x * cbMtdParam._m0[9u].x) * ((_640 * ((_598.x * cbMtdParam._m0[14u].x) - _577)) + _577);
    float _651 = (_359.y * cbMtdParam._m0[9u].y) * ((_640 * ((_598.y * cbMtdParam._m0[14u].y) - _578)) + _578);
    float _652 = (_359.z * cbMtdParam._m0[9u].z) * ((_640 * ((_598.z * cbMtdParam._m0[14u].z) - _579)) + _579);
    float _656 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _650;
    float _659 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _651;
    float _662 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _652;
    float _670 = (((_650 - _656) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _656) * 4.55000019073486328125;
    float _672 = (((_651 - _659) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) + _659) * 4.55000019073486328125;
    float _674 = (((_652 - _662) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) + _662) * 4.55000019073486328125;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _735 = _733.x;
    float _736 = _733.y;
    float _737 = _733.z;
    float _744 = ((_716.x - _735) * _497) + _735;
    float _745 = ((_716.y - _736) * _497) + _736;
    float _746 = ((_716.z - _737) * _497) + _737;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _769 = ((_758.x - _744) * _570) + _744;
    float _770 = ((_758.y - _745) * _570) + _745;
    float _771 = ((_758.z - _746) * _570) + _746;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _796 = ((_783.z - _771) * _640) + _771;
    float _799 = ((((_783.x - _769) * _640) + _769) * 2.0) + (-1.0);
    float _800 = ((((_783.y - _770) * _640) + _770) * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _4252 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _806 = sqrt(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))));
    vec4 _824 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _836 = (_799 + ((((_691.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_824.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _837 = (_800 + ((((_691.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_824.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _840 = fma(_806, _272, fma(_837, _279, _836 * _265));
    float _843 = fma(_806, _273, fma(_837, _280, _836 * _266));
    float _846 = fma(_806, _274, fma(_837, _281, _836 * _267));
    float _850 = inversesqrt(dot(vec3(_840, _843, _846), vec3(_840, _843, _846)));
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _879 = _877.x;
    float _880 = 1.0 - _879;
    float _888 = (cbMtdParam._m0[19u].x + dot(vec4(_850 * _840, _850 * _843, _850 * _846, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_879 - _880) * cbMtdParam._m0[24u].z) + _880) * cbMtdParam._m0[21u].z);
    float _4263 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _889 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _891 = (-0.0) - cbMtdParam._m0[24u].x;
    float _893 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
    float _901 = _889 - ((_889 * TEXCOORD_8.x) * _894);
    float _902 = _889 - ((_889 * TEXCOORD_8.y) * _894);
    float _903 = _889 - ((_889 * TEXCOORD_8.z) * _894);
    float _910 = (_901 * (cbMtdParam._m0[17u].x - _670)) + _670;
    float _911 = (_902 * (cbMtdParam._m0[17u].y - _672)) + _672;
    float _912 = (_903 * (cbMtdParam._m0[17u].z - _674)) + _674;
    float _927 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _928 = _927 * TEXCOORD.z;
    float _929 = _927 * TEXCOORD.w;
    vec4 _941 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _928) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _929) + cbTextureTilingScale._m0[19u].w));
    float _943 = _941.x;
    float _944 = 1.0 - _943;
    float _970 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_943 - _944) * cbMtdParam._m0[24u].w) + _944) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4284 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _971 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _979 = ((((cbMtdParam._m0[10u].x - _910) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _971) + _910;
    float _980 = ((((cbMtdParam._m0[10u].y - _911) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _971) + _911;
    float _981 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _912)) * _971) + _912;
    vec4 _1007 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1009 = _1007.x;
    float _1026 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _1009) * _497) + _1009;
    float _1043 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _1026) * _570) + _1026;
    float _1060 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1043) * _640) + _1043;
    float _1066 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1060) * cbMtdParam._m0[19u].z) + _1060;
    float _1068 = _1066 - (_1066 * _901);
    float _1070 = _1068 - (_1068 * _971);
    float _1075 = (((_691.z - _796) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _796;
    float _1079 = ((_824.z - _1075) * cbMtdParam._m0[19u].w) + _1075;
    vec4 _1095 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1102 = (_1095.x * 2.0) + (-1.0);
    float _1103 = (_1095.y * 2.0) + (-1.0);
    float _1104 = dot(vec2(_1102, _1103), vec2(_1102, _1103));
    float _4295 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1112 = ((_1095.z - _1079) * _901) + _1079;
    float _1115 = ((cbMtdParam._m0[23u].x - _1112) * _971) + _1112;
    vec4 _1138 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _928) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _929) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1144 = (_1138.x * 2.0) + (-1.0);
    float _1145 = (_1138.y * 2.0) + (-1.0);
    float _1146 = dot(vec2(_1144, _1145), vec2(_1144, _1145));
    float _4306 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1161 = ((sqrt(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) - _806) * _903) + _806;
    float _1164 = (((_1102 - _836) * _901) + _836) + (cbMtdParam._m0[21u].x * _836);
    float _1165 = (((_1103 - _837) * _902) + _837) + (cbMtdParam._m0[21u].x * _837);
    float _1176 = (((_1144 - _1164) + (_1164 * cbMtdParam._m0[22u].z)) * _971) + _1164;
    float _1177 = (((_1145 - _1165) + (_1165 * cbMtdParam._m0[22u].z)) * _971) + _1165;
    float _1178 = (_971 * (sqrt(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) - _1161)) + _1161;
    float _1180 = cbMtdParam._m0[22u].x + _824.w;
    float _1183 = fma(_1178, _272, fma(_1177, _279, _1176 * _265));
    float _1186 = fma(_1178, _273, fma(_1177, _280, _1176 * _266));
    float _1189 = fma(_1178, _274, fma(_1177, _281, _1176 * _267));
    float _1193 = inversesqrt(dot(vec3(_1183, _1186, _1189), vec3(_1183, _1186, _1189)));
    float _1194 = _1193 * _1183;
    float _1195 = _1193 * _1186;
    float _1196 = _1193 * _1189;
    float _4317 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1197 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _4328 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _4339 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4350 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4361 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4372 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1202 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _1216 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1256 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1266 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1256);
    float _1267 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1256);
    float _1268 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1256);
    float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
    float _1273 = _1266 * _1272;
    float _1274 = _1267 * _1272;
    float _1275 = _1268 * _1272;
    vec4 _1280 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1282 = _1280.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1454 = sqrt(((_1266 * _1266) + (_1267 * _1267)) + (_1268 * _1268));
        float _1460 = (cbMatDynParam._m0[5u].x * _1454) + cbMatDynParam._m0[5u].y;
        float _4383 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1465 = (cbMatDynParam._m0[5u].z * _1454) + cbMatDynParam._m0[5u].w;
        float _4394 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) - _1461)) + _1461) < ((_1282 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1293 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1294 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1312 = fma(_1196, cbSceneParam._m0[5u].z, fma(_1195, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1194));
    float _1315 = fma(_1196, cbSceneParam._m0[6u].z, fma(_1195, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1194));
    float _1318 = fma(_1196, cbSceneParam._m0[7u].z, fma(_1195, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1194));
    uint _1331 = _303 + 9u;
    uint _1332 = _1331 + uint(cbMatDynParam._m0[0u].w);
    float _1338 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * cbInstanceData._m0[_1332].x;
    float _1339 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * cbInstanceData._m0[_1332].y;
    float _1340 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * cbInstanceData._m0[_1332].z;
    float _4405 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _1341 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _1342 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _1343 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _1344 = 1.0 - _1202;
    float _1345 = _1341 * _1344;
    float _1346 = _1342 * _1344;
    float _1347 = _1343 * _1344;
    float _1352 = (_1341 + (-0.039999999105930328369140625)) * _1202;
    float _1353 = (_1342 + (-0.039999999105930328369140625)) * _1202;
    float _1354 = (_1343 + (-0.039999999105930328369140625)) * _1202;
    float _1355 = _1352 + 0.039999999105930328369140625;
    float _1357 = _1353 + 0.039999999105930328369140625;
    float _1358 = _1354 + 0.039999999105930328369140625;
    vec4 _1367 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1293, cbSceneParam._m0[86u].y * _1294));
    float _1371 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * TEXCOORD_5.w) * _1367.x;
    float _1372 = dot(vec3(_1194, _1195, _1196), vec3(_1273, _1274, _1275));
    float _1375 = _1372 * 2.0;
    float _1379 = (_1375 * _1194) - _1273;
    float _1380 = (_1375 * _1195) - _1274;
    float _1381 = (_1375 * _1196) - _1275;
    float _1385 = abs(dot(vec3(_1273, _1274, _1275), vec3(_1194, _1195, _1196)));
    float _4438 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1387 = sqrt(_1197);
    float _1400 = exp2((_1387 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1387 * 3.0));
    float _1406 = (1.0 - _1400) * ((_1387 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1407 = _1400 * _1387;
    float _1435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1772;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1497 = fma(_1443, cbModelParam._m0[26u].z, fma(_1439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1435));
        float _1501 = fma(_1443, cbModelParam._m0[27u].z, fma(_1439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1435));
        float _1505 = fma(_1443, cbModelParam._m0[28u].z, fma(_1439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1435));
        float _1530 = _1435 + _1194;
        float _1531 = _1439 + _1195;
        float _1532 = _1443 + _1196;
        float _1542 = fma(_1532, cbModelParam._m0[26u].z, fma(_1531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1530)) - _1497;
        float _1543 = fma(_1532, cbModelParam._m0[27u].z, fma(_1531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1530)) - _1501;
        float _1544 = fma(_1532, cbModelParam._m0[28u].z, fma(_1531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1530)) - _1505;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[34u].z) + ((((((_1505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1600 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1566.x + (-0.5));
        float _1602 = _1600 * (_1566.y + (-0.5));
        float _1603 = _1600 * (_1566.z + (-0.5));
        float _1610 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1573.x + (-0.5));
        float _1612 = _1610 * (_1573.y + (-0.5));
        float _1613 = _1610 * (_1573.z + (-0.5));
        float _1620 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1580.x + (-0.5));
        float _1622 = _1620 * (_1580.y + (-0.5));
        float _1623 = _1620 * (_1580.z + (-0.5));
        float _1630 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1587.x + (-0.5));
        float _1632 = _1630 * (_1587.y + (-0.5));
        float _1633 = _1630 * (_1587.z + (-0.5));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = _1601 * 0.5;
        float _1638 = _1611 * 0.5;
        float _1639 = _1621 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1654 = (dot(vec3(_1194, _1195, _1196), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1664 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4486 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1666 + 1.0))) + _1671) * _1634;
        float _1681 = _1602 * 0.5;
        float _1682 = _1612 * 0.5;
        float _1683 = _1622 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_1194, _1195, _1196), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4519 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1708 + 1.0))) + _1713) * _1635;
        float _1723 = _1603 * 0.5;
        float _1724 = _1613 * 0.5;
        float _1725 = _1623 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_1194, _1195, _1196), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4530 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4541 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4552 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_1750 + 1.0))) + _1755) * _1636;
        _1772 = _1603;
        _1774 = _1602;
        _1775 = _1601;
        _1776 = _1613;
        _1777 = _1612;
        _1778 = _1611;
        _1779 = _1623;
        _1780 = _1622;
        _1781 = _1621;
        _1782 = _1636;
        _1783 = _1635;
        _1784 = _1634;
        _1785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1773;
        _1774 = _1773;
        _1775 = _1773;
        _1776 = _1773;
        _1777 = _1773;
        _1778 = _1773;
        _1779 = _1773;
        _1780 = _1773;
        _1781 = _1773;
        _1782 = _1773;
        _1783 = _1773;
        _1784 = _1773;
        _1785 = 0.0;
        _1786 = 0.0;
        _1787 = 0.0;
    }
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    float _2091;
    float _2092;
    float _2093;
    float _2094;
    float _2095;
    float _2096;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1813 = fma(_1443, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435));
        float _1817 = fma(_1443, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435));
        float _1821 = fma(_1443, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435));
        float _1844 = _1435 + _1194;
        float _1845 = _1439 + _1195;
        float _1846 = _1443 + _1196;
        float _1856 = fma(_1846, cbModelParam._m0[30u].z, fma(_1845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1844)) - _1813;
        float _1857 = fma(_1846, cbModelParam._m0[31u].z, fma(_1845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1844)) - _1817;
        float _1858 = fma(_1846, cbModelParam._m0[32u].z, fma(_1845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1844)) - _1821;
        float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
        float _1875 = ((_1862 * _1856) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1813 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1876 = ((_1862 * _1857) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1817 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1877 = ((_1862 * _1858) / cbModelParam._m0[35u].z) + ((((((_1821 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1879 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1875, _1876, _1877), 0.0);
        vec4 _1886 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1875, _1876, _1877), 0.0);
        vec4 _1893 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1875, _1876, _1877), 0.0);
        vec4 _1900 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1875, _1876, _1877), 0.0);
        float _1912 = exp2((_1879.w + (-0.5)) * 20.0) * 2.0;
        float _1913 = _1912 * (_1879.x + (-0.5));
        float _1914 = _1912 * (_1879.y + (-0.5));
        float _1915 = _1912 * (_1879.z + (-0.5));
        float _1922 = exp2((_1886.w + (-0.5)) * 20.0) * 2.0;
        float _1923 = _1922 * (_1886.x + (-0.5));
        float _1924 = _1922 * (_1886.y + (-0.5));
        float _1925 = _1922 * (_1886.z + (-0.5));
        float _1932 = exp2((_1893.w + (-0.5)) * 20.0) * 2.0;
        float _1933 = _1932 * (_1893.x + (-0.5));
        float _1934 = _1932 * (_1893.y + (-0.5));
        float _1935 = _1932 * (_1893.z + (-0.5));
        float _1942 = exp2((_1900.w + (-0.5)) * 20.0) * 2.0;
        float _1943 = _1942 * (_1900.x + (-0.5));
        float _1944 = _1942 * (_1900.y + (-0.5));
        float _1945 = _1942 * (_1900.z + (-0.5));
        float _1946 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1948 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1949 = _1913 * 0.5;
        float _1950 = _1923 * 0.5;
        float _1951 = _1933 * 0.5;
        float _1952 = dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951));
        float _1957 = (_1952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1952);
        float _1965 = (dot(vec3(_1194, _1195, _1196), vec3(_1957 * _1949, _1957 * _1950, _1957 * _1951)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1974 = sqrt(((_1950 * _1950) + (_1949 * _1949)) + (_1951 * _1951)) / (_1946 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1976 = _1975 * 2.0;
        float _1980 = (1.0 - _1975) / (_1975 + 1.0);
        float _4615 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1990 = ((((1.0 - _1981) * (_1976 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1976 + 1.0))) + _1981) * _1946;
        float _1991 = _1914 * 0.5;
        float _1992 = _1924 * 0.5;
        float _1993 = _1934 * 0.5;
        float _1994 = dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993));
        float _1999 = (_1994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1994);
        float _2007 = (dot(vec3(_1194, _1195, _1196), vec3(_1999 * _1991, _1999 * _1992, _1999 * _1993)) + 1.0) * 0.5;
        float _4626 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2016 = sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993)) / (_1947 + 9.9999997473787516355514526367188e-06);
        float _4637 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2018 = _2017 * 2.0;
        float _2022 = (1.0 - _2017) / (_2017 + 1.0);
        float _4648 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2032 = ((((1.0 - _2023) * (_2018 + 2.0)) * exp2(log2(isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2018 + 1.0))) + _2023) * _1947;
        float _2033 = _1915 * 0.5;
        float _2034 = _1925 * 0.5;
        float _2035 = _1935 * 0.5;
        float _2036 = dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035));
        float _2041 = (_2036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2036);
        float _2049 = (dot(vec3(_1194, _1195, _1196), vec3(_2041 * _2033, _2041 * _2034, _2041 * _2035)) + 1.0) * 0.5;
        float _4659 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2058 = sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035)) / (_1948 + 9.9999997473787516355514526367188e-06);
        float _4670 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2060 = _2059 * 2.0;
        float _2064 = (1.0 - _2059) / (_2059 + 1.0);
        float _4681 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2074 = ((((1.0 - _2065) * (_2060 + 2.0)) * exp2(log2(isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2060 + 1.0))) + _2065) * _1948;
        _2082 = _1915;
        _2083 = _1914;
        _2084 = _1913;
        _2085 = _1925;
        _2086 = _1924;
        _2087 = _1923;
        _2088 = _1935;
        _2089 = _1934;
        _2090 = _1933;
        _2091 = _1948;
        _2092 = _1947;
        _2093 = _1946;
        _2094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)));
        _2095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)));
        _2096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)));
    }
    else
    {
        _2082 = _1773;
        _2083 = _1773;
        _2084 = _1773;
        _2085 = _1773;
        _2086 = _1773;
        _2087 = _1773;
        _2088 = _1773;
        _2089 = _1773;
        _2090 = _1773;
        _2091 = _1773;
        _2092 = _1773;
        _2093 = _1773;
        _2094 = 0.0;
        _2095 = 0.0;
        _2096 = 0.0;
    }
    float _2106 = (cbModelParam._m0[1u].x * (_2094 - _1785)) + _1785;
    float _2107 = (cbModelParam._m0[1u].x * (_2095 - _1786)) + _1786;
    float _2108 = (cbModelParam._m0[1u].x * (_2096 - _1787)) + _1787;
    float _2129 = fma(_2108, cbSceneParam._m0[89u].z, fma(_2107, cbSceneParam._m0[89u].y, _2106 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2108, cbSceneParam._m0[90u].z, fma(_2107, cbSceneParam._m0[90u].y, _2106 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2108, cbSceneParam._m0[91u].z, fma(_2107, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2106));
    float _2150 = _1379 * 0.5;
    float _2151 = _1380 * 0.5;
    float _2152 = _1381 * 0.5;
    float _2153 = dot(vec4(_2150, _2151, _2152, 1.0), vec4(_2084, _2087, _2090, _2093));
    float _2156 = dot(vec4(_2150, _2151, _2152, 1.0), vec4(_2083, _2086, _2089, _2092));
    float _2159 = dot(vec4(_2150, _2151, _2152, 1.0), vec4(_2082, _2085, _2088, _2091));
    float _2193;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2166 = dot(vec4(_2150, _2151, _2152, 1.0), vec4(_1772, _1776, _1779, _1782));
        float _2170 = dot(vec4(_2150, _2151, _2152, 1.0), vec4(_1774, _1777, _1780, _1783));
        float _2174 = dot(vec4(_2150, _2151, _2152, 1.0), vec4(_1775, _1778, _1781, _1784));
        float _2181 = dot(vec4(cbModelParam._m0[39u]), vec4(_2150, _2151, _2152, 1.0));
        _2193 = dot(vec3(isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0)), isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0)), isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2181) ? 0.0 : (isnan(0.0) ? _2181 : max(0.0, _2181))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2193 = 1.0;
    }
    float _2204;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2195 = dot(vec4(cbModelParam._m0[40u]), vec4(_2150, _2151, _2152, 1.0));
        _2204 = dot(vec3(isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0)), isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0)), isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2195) ? 0.0 : (isnan(0.0) ? _2195 : max(0.0, _2195))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2204 = 1.0;
    }
    float _2208 = (_2204 * cbModelParam._m0[1u].x) + (_2193 * (1.0 - cbModelParam._m0[1u].x));
    float _2218 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1197);
    float _2219 = isnan(_2218) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2218 : min(cbModelParam._m0[25u].z, _2218));
    float _2299;
    float _2301;
    float _2303;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2266 = fma(_1443, cbModelParam._m0[13u].z, fma(_1439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1435)) + cbModelParam._m0[13u].w;
        float _2270 = fma(_1443, cbModelParam._m0[14u].z, fma(_1439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1435)) + cbModelParam._m0[14u].w;
        float _2274 = fma(_1443, cbModelParam._m0[15u].z, fma(_1439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1435)) + cbModelParam._m0[15u].w;
        float _2277 = fma(_1381, cbModelParam._m0[13u].z, fma(_1380, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1379));
        float _2280 = fma(_1381, cbModelParam._m0[14u].z, fma(_1380, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1379));
        float _2283 = fma(_1381, cbModelParam._m0[15u].z, fma(_1380, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1379));
        float _2311;
        if (_2277 > 0.0)
        {
            _2311 = abs((1.0 - _2266) / _2277);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2277 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2266 + 1.0) / _2277);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2311 = frontier_phi_17_15_ladder;
        }
        float _2535;
        if (_2280 > 0.0)
        {
            _2535 = abs((1.0 - _2270) / _2280);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2280 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2270 + 1.0) / _2280);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2535 = frontier_phi_26_22_ladder;
        }
        float _2792;
        if (_2283 > 0.0)
        {
            _2792 = abs((1.0 - _2274) / _2283);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2283 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2274 + 1.0) / _2283);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2792 = frontier_phi_38_33_ladder;
        }
        float _2794 = isnan(_2535) ? _2311 : (isnan(_2311) ? _2535 : min(_2311, _2535));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2277) + _2266;
        float _2800 = (_2795 * _2280) + _2270;
        float _2801 = (_2795 * _2283) + _2274;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2802;
        float _2806 = _2802 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 > _2806) || ((_2800 < _2804) || ((_2799 < _2804) || (_2799 > _2806))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2801, cbModelParam._m0[9u].z, fma(_2800, cbModelParam._m0[9u].y, _2799 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2801, cbModelParam._m0[10u].z, fma(_2800, cbModelParam._m0[10u].y, _2799 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2801, cbModelParam._m0[11u].z, fma(_2800, cbModelParam._m0[11u].y, _2799 * cbModelParam._m0[11u].x))), _2219);
            frontier_phi_16_38_ladder = _2929.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2929.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2929.x * cbModelParam._m0[1u].y;
        }
        _2299 = frontier_phi_16_38_ladder_2;
        _2301 = frontier_phi_16_38_ladder_1;
        _2303 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1379, _1380, _1381), _2219);
        _2299 = _2287.x * cbModelParam._m0[1u].y;
        _2301 = _2287.y * cbModelParam._m0[1u].y;
        _2303 = _2287.z * cbModelParam._m0[1u].y;
    }
    float _2307 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1197);
    float _2308 = isnan(_2307) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2307 : min(cbModelParam._m0[25u].w, _2307));
    float _2398;
    float _2400;
    float _2402;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2362 = fma(_1443, cbModelParam._m0[21u].z, fma(_1439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1435)) + cbModelParam._m0[21u].w;
        float _2366 = fma(_1443, cbModelParam._m0[22u].z, fma(_1439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1435)) + cbModelParam._m0[22u].w;
        float _2370 = fma(_1443, cbModelParam._m0[23u].z, fma(_1439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1435)) + cbModelParam._m0[23u].w;
        float _2373 = fma(_1381, cbModelParam._m0[21u].z, fma(_1380, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1379));
        float _2376 = fma(_1381, cbModelParam._m0[22u].z, fma(_1380, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1379));
        float _2379 = fma(_1381, cbModelParam._m0[23u].z, fma(_1380, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1379));
        float _2540;
        if (_2373 > 0.0)
        {
            _2540 = abs((1.0 - _2362) / _2373);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2373 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2362 + 1.0) / _2373);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2540 = frontier_phi_28_24_ladder;
        }
        float _2819;
        if (_2376 > 0.0)
        {
            _2819 = abs((1.0 - _2366) / _2376);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2376 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2366 + 1.0) / _2376);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2819 = frontier_phi_40_35_ladder;
        }
        float _3032;
        if (_2379 > 0.0)
        {
            _3032 = abs((1.0 - _2370) / _2379);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2379 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2370 + 1.0) / _2379);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3032 = frontier_phi_49_46_ladder;
        }
        float _3034 = isnan(_2819) ? _2540 : (isnan(_2540) ? _2819 : min(_2540, _2819));
        float _3035 = isnan(_3032) ? _3034 : (isnan(_3034) ? _3032 : min(_3034, _3032));
        float _3039 = (_3035 * _2373) + _2362;
        float _3040 = (_3035 * _2376) + _2366;
        float _3041 = (_3035 * _2379) + _2370;
        float _3042 = _3035 * 9.9999997473787516355514526367188e-05;
        float _3043 = (-1.0) - _3042;
        float _3045 = _3042 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3041 > _3045) || ((_3041 < _3043) || ((_3040 > _3045) || ((_3040 < _3043) || ((_3039 < _3043) || (_3039 > _3045))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3240 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3041, cbModelParam._m0[17u].z, fma(_3040, cbModelParam._m0[17u].y, _3039 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3041, cbModelParam._m0[18u].z, fma(_3040, cbModelParam._m0[18u].y, _3039 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3041, cbModelParam._m0[19u].z, fma(_3040, cbModelParam._m0[19u].y, _3039 * cbModelParam._m0[19u].x))), _2308);
            frontier_phi_25_49_ladder = _3240.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3240.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3240.x * cbModelParam._m0[1u].z;
        }
        _2398 = frontier_phi_25_49_ladder_2;
        _2400 = frontier_phi_25_49_ladder_1;
        _2402 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1379, _1380, _1381), _2308);
        _2398 = _2382.x * cbModelParam._m0[1u].z;
        _2400 = _2382.y * cbModelParam._m0[1u].z;
        _2402 = _2382.z * cbModelParam._m0[1u].z;
    }
    float _2415 = (((_1406 * _1355) + _1407) * _1371) * ((cbModelParam._m0[1u].w * (_2398 - _2299)) + _2299);
    float _2417 = (((_1406 * _1357) + _1407) * _1371) * ((cbModelParam._m0[1u].w * (_2400 - _2301)) + _2301);
    float _2419 = (((_1406 * _1358) + _1407) * _1371) * ((cbModelParam._m0[1u].w * (_2402 - _2303)) + _2303);
    float _2422 = fma(_2419, cbSceneParam._m0[89u].z, fma(_2417, cbSceneParam._m0[89u].y, _2415 * cbSceneParam._m0[89u].x));
    float _2425 = fma(_2419, cbSceneParam._m0[90u].z, fma(_2417, cbSceneParam._m0[90u].y, _2415 * cbSceneParam._m0[90u].x));
    float _2428 = fma(_2419, cbSceneParam._m0[91u].z, fma(_2417, cbSceneParam._m0[91u].y, _2415 * cbSceneParam._m0[91u].x));
    vec4 _2436 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1293, _1294));
    float _2438 = _2436.w;
    float _2450 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2438);
    float _2451 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2438);
    float _2452 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2438);
    uvec4 _2456 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2458 = _2456.x * 14u;
    uint _2459 = _2458 + 13u;
    float _2466 = _1371 + (-1.0);
    float _2471 = (cbLight._m0[_2459].x * _2466) + 1.0;
    float _2472 = (cbLight._m0[_2459].y * _2466) + 1.0;
    float _2473 = (cbLight._m0[_2459].z * _2466) + 1.0;
    float _2474 = (cbLight._m0[_2459].w * _2466) + 1.0;
    uint _2475 = _2458 + 5u;
    float _2481 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
    uint _2485 = _2458 + 4u;
    float _2494 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    uint _2498 = _2458 | 1u;
    float _2509 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_1194, _1195, _1196));
    float _2512 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_1194, _1195, _1196));
    float _4817 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _4828 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2517 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * 0.3183098733425140380859375;
    float _2519 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * 0.3183098733425140380859375;
    float _2526 = ((cbLight._m0[_2475].x * _2481) * _2519) + (((cbLight._m0[_2485].x * _2450) * _2494) * _2517);
    float _2527 = ((_2481 * cbLight._m0[_2475].y) * _2519) + (((cbLight._m0[_2485].y * _2451) * _2494) * _2517);
    float _2528 = ((_2481 * cbLight._m0[_2475].z) * _2519) + (((cbLight._m0[_2485].z * _2452) * _2494) * _2517);
    uvec4 _2532 = floatBitsToUint(cbLight._m0[_2458 + 12u]);
    bool _2534 = _2532.x == 0u;
    float _2545;
    float _2547;
    float _2549;
    if (_2534)
    {
        _2545 = _2526;
        _2547 = _2527;
        _2549 = _2528;
    }
    else
    {
        uint _2553 = _2458 + 6u;
        float _2569 = (dot(vec3(cbLight._m0[_2458 + 2u].xyz), vec3(_1194, _1195, _1196)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4839 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2572 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2545 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2526;
        _2547 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2527;
        _2549 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2528;
    }
    bool _2552 = _2532.y == 0u;
    float _2590;
    float _2592;
    float _2594;
    if (_2552)
    {
        _2590 = _2545;
        _2592 = _2547;
        _2594 = _2549;
    }
    else
    {
        uint _2763 = _2458 + 7u;
        float _2779 = (dot(vec3(cbLight._m0[_2458 + 3u].xyz), vec3(_1194, _1195, _1196)) * 0.5) + 0.5;
        float _2780 = _2779 * _2779;
        float _4855 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2781 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2782 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _2590 = (((cbLight._m0[_2763].x * 0.3183098733425140380859375) * _2781) * _2782) + _2545;
        _2592 = (((cbLight._m0[_2763].y * 0.3183098733425140380859375) * _2781) * _2782) + _2547;
        _2594 = (((cbLight._m0[_2763].z * 0.3183098733425140380859375) * _2781) * _2782) + _2549;
    }
    uint _2597 = _2458 + 8u;
    float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _1197) * 0.949999988079071044921875);
    float _2611 = _2610 * _2610;
    float _2612 = cbLight._m0[_2458].x + _1273;
    float _2613 = cbLight._m0[_2458].y + _1274;
    float _2614 = cbLight._m0[_2458].z + _1275;
    float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
    float _2619 = _2618 * _2612;
    float _2620 = _2618 * _2613;
    float _2621 = _2618 * _2614;
    float _2622 = dot(vec3(_1194, _1195, _1196), vec3(cbLight._m0[_2458].xyz));
    float _4871 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _4882 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
    float _2626 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2627 = dot(vec3(_1194, _1195, _1196), vec3(_2619, _2620, _2621));
    float _4893 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
    float _2631 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2619, _2620, _2621));
    float _4904 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2635 = _2611 * _2611;
    float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
    float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) * 5.0);
    float _2648 = 0.959999978542327880859375 - _1352;
    float _2650 = 0.959999978542327880859375 - _1353;
    float _2651 = 0.959999978542327880859375 - _1354;
    float _2658 = 1.0 - _2611;
    float _2669 = (0.5 / (((_2626 * ((_2625 * _2658) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2658) + _2611) * _2625))) * _2625;
    float _4915 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
    uint _2685 = _2458 + 9u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _1197) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2498].x + _1273;
    float _2699 = cbLight._m0[_2498].y + _1274;
    float _2700 = cbLight._m0[_2498].z + _1275;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_1194, _1195, _1196), vec3(cbLight._m0[_2498].xyz));
    float _4926 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
    float _2712 = dot(vec3(_1194, _1195, _1196), vec3(_2705, _2706, _2707));
    float _4937 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2705, _2706, _2707));
    float _4948 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2697 * _2697;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) * 5.0);
    float _2738 = 1.0 - _2697;
    float _2748 = (0.5 / (((_2626 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2738) + _2697) * _2711))) * _2711;
    float _4959 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    float _2760 = (((((_2731 * _2648) + _1355) * cbLight._m0[_2685].x) * _2750) * _2481) + ((((cbLight._m0[_2597].x * _2450) * ((_2647 * _2648) + _1355)) * _2671) * _2494);
    float _2761 = (((((_2731 * _2650) + _1357) * cbLight._m0[_2685].y) * _2750) * _2481) + ((((cbLight._m0[_2597].y * _2451) * ((_2647 * _2650) + _1357)) * _2671) * _2494);
    float _2762 = (((((_2731 * _2651) + _1358) * cbLight._m0[_2685].z) * _2750) * _2481) + ((((cbLight._m0[_2597].z * _2452) * ((_2647 * _2651) + _1358)) * _2671) * _2494);
    float _2824;
    float _2826;
    float _2828;
    if (_2534)
    {
        _2824 = _2760;
        _2826 = _2761;
        _2828 = _2762;
    }
    else
    {
        uint _2830 = _2458 + 2u;
        uint _2834 = _2458 + 10u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _1197) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _1273;
        float _2851 = cbLight._m0[_2830].y + _1274;
        float _2852 = cbLight._m0[_2830].z + _1275;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_1194, _1195, _1196), vec3(cbLight._m0[_2830].xyz));
        float _4970 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
        float _2864 = dot(vec3(_1194, _1195, _1196), vec3(_2857, _2858, _2859));
        float _4981 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _4992 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2883 = exp2(log2(1.0 - (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) * 5.0);
        float _2890 = 1.0 - _2849;
        float _2900 = (0.5 / (((_2626 * ((_2863 * _2890) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2890) + _2849) * _2863))) * _2863;
        float _5003 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2902 = (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2903 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2824 = (((((_2883 * _2648) + _1355) * cbLight._m0[_2834].x) * _2902) * _2903) + _2760;
        _2826 = (((((_2883 * _2650) + _1357) * cbLight._m0[_2834].y) * _2902) * _2903) + _2761;
        _2828 = (((((_2883 * _2651) + _1358) * cbLight._m0[_2834].z) * _2902) * _2903) + _2762;
    }
    float _2938;
    float _2940;
    float _2942;
    if (_2552)
    {
        _2938 = _2824;
        _2940 = _2826;
        _2942 = _2828;
    }
    else
    {
        uint _2949 = _2458 + 3u;
        uint _2953 = _2458 + 11u;
        float _2967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2949].w)) * _1197) * 0.949999988079071044921875);
        float _2968 = _2967 * _2967;
        float _2969 = cbLight._m0[_2949].x + _1273;
        float _2970 = cbLight._m0[_2949].y + _1274;
        float _2971 = cbLight._m0[_2949].z + _1275;
        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
        float _2976 = _2975 * _2969;
        float _2977 = _2975 * _2970;
        float _2978 = _2975 * _2971;
        float _2979 = dot(vec3(_1194, _1195, _1196), vec3(cbLight._m0[_2949].xyz));
        float _5019 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
        float _2983 = dot(vec3(_1194, _1195, _1196), vec3(_2976, _2977, _2978));
        float _5030 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2986 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
        float _2987 = dot(vec3(cbLight._m0[_2949].xyz), vec3(_2976, _2977, _2978));
        float _5041 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2991 = _2968 * _2968;
        float _2995 = ((_2986 * _2986) * (_2991 + (-1.0))) + 1.0;
        float _3002 = exp2(log2(1.0 - (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) * 5.0);
        float _3009 = 1.0 - _2968;
        float _3019 = (0.5 / (((_2626 * ((_2982 * _3009) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _3009) + _2968) * _2982))) * _2982;
        float _5052 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3021 = (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_2991 / ((_2995 * _2995) * 3.141590118408203125));
        float _3022 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _2938 = (((((_3002 * _2648) + _1355) * cbLight._m0[_2953].x) * _3021) * _3022) + _2824;
        _2940 = (((((_3002 * _2650) + _1357) * cbLight._m0[_2953].y) * _3021) * _3022) + _2826;
        _2942 = (((((_3002 * _2651) + _1358) * cbLight._m0[_2953].z) * _3021) * _3022) + _2828;
    }
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_2456.y == 0u)
    {
        float _3097 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3097;
        float _3099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3097;
        float _3100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3097;
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.x;
        uint _3124 = uint((float(_3112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1294) / _3113))) + floor(float(uint(cbSceneParam._m0[85u].x * _1293) / _3113)));
        float _3134 = (log2(_3100 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3135 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        uint _3138 = uint(isnan(14.0) ? _3135 : (isnan(_3135) ? 14.0 : min(_3135, 14.0)));
        uvec4 _3143 = texelFetch(g_lightClusterGridBuffer, int(((_3138 << 2u) + (_3124 << 6u)) >> 2u));
        uint _3144 = _3143.x;
        uint _3145 = _3112.z;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        if (((((1u << ((_3145 >> 4u) & 15u)) + 4294967295u) & _3144) == 0u) || ((_3145 & 240u) == 0u))
        {
            _3245 = 0.0;
            _3247 = 0.0;
            _3249 = 0.0;
            _3251 = 0.0;
            _3253 = 0.0;
            _3255 = 0.0;
        }
        else
        {
            float _3246;
            float _3248;
            float _3250;
            float _3252;
            float _3254;
            float _3256;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            float _3400 = 0.0;
            float _3401 = 0.0;
            float _3402 = 0.0;
            uint _3403 = 0u;
            uint _3412;
            bool _3413;
            for (;;)
            {
                _3412 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3403 << 2u)) >> 2u)).x;
                _3413 = _3412 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3413)
                {
                    frontier_phi_66_pred = _3397;
                    frontier_phi_66_pred_1 = _3402;
                    frontier_phi_66_pred_2 = _3401;
                    frontier_phi_66_pred_3 = _3400;
                    frontier_phi_66_pred_4 = _3399;
                    frontier_phi_66_pred_5 = _3398;
                }
                else
                {
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    uint _3548;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3399;
                    _3545 = _3400;
                    _3546 = _3401;
                    _3547 = _3402;
                    _3548 = _3412;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    float _3474;
                    for (;;)
                    {
                        uint _3552 = uint(findLSB(_3548)) + (_3403 << 5u);
                        uint _3549 = (_3548 + 4294967295u) & _3548;
                        uint _3554 = _3552 * 48u;
                        vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3554)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 3u)).x));
                        uint _3574 = (_3552 * 48u) + 4u;
                        vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3574)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 3u)).x));
                        uint _3593 = (_3552 * 48u) + 8u;
                        vec3 _3604 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3593)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 2u)).x));
                        float _3608 = _3568.x - _3098;
                        float _3609 = _3568.y - _3099;
                        float _3610 = _3568.z - _3100;
                        float _3611 = dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610));
                        float _3614 = inversesqrt(_3611);
                        float _3615 = _3614 * _3608;
                        float _3616 = _3614 * _3609;
                        float _3617 = _3614 * _3610;
                        float _3618 = dot(vec3(_1312, _1315, _1318), vec3(_3615, _3616, _3617));
                        float _3623 = 1.0 - (_3611 * _3568.w);
                        float _5078 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3624 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3625 = sqrt(_3611) * _3587.w;
                        float _3628 = 1.39999997615814208984375 / (_3625 + 1.39999997615814208984375);
                        float _3629 = _3628 * _3628;
                        float _3632 = ((1.0 - _3629) * _3618) + _3629;
                        float _3635 = _3625 * _3625;
                        float _3639 = ((isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0))) * _3624) / ((_3635 * 0.699999988079071044921875) + 1.0);
                        float _3643 = (-0.0) - _3098;
                        float _3644 = (-0.0) - _3099;
                        float _3645 = (-0.0) - _3100;
                        float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                        float _3650 = _3649 * _3643;
                        float _3651 = _3649 * _3644;
                        float _3652 = _3649 * _3645;
                        float _3660 = exp2(log2(1.0 / ((_3635 * 3.5) + 5.0)) * 0.25);
                        float _3661 = 1.0 - _1387;
                        float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                        float _3669 = _3668 * _3668;
                        float _3670 = _3669 * _3669;
                        float _3671 = _3650 + _3615;
                        float _3672 = _3651 + _3616;
                        float _3673 = _3652 + _3617;
                        float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                        float _3681 = dot(vec3(_1312, _1315, _1318), vec3(_3650, _3651, _3652));
                        float _5094 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                        float _3684 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3685 = dot(vec3(_1312, _1315, _1318), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                        float _5105 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                        float _3688 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                        float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                        float _3693 = _3628 * _3669;
                        float _3694 = _3693 * _3693;
                        float _3697 = ((1.0 - _3694) * _3618) + _3694;
                        float _5116 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                        float _3698 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                        float _3699 = 1.0 - _3669;
                        float _3709 = (0.5 / (((_3698 * ((_3684 * _3699) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3698 * _3699) + _3669) * _3684))) * _3698;
                        float _5127 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3720 = (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0)))) / ((_3692 * _3692) * ((_3635 * 2.1991131305694580078125) + 3.141590118408203125))) * _3624;
                        _3472 = (_3639 * _3587.x) + _3545;
                        _3473 = (_3639 * _3587.y) + _3546;
                        _3474 = (_3639 * _3587.z) + _3547;
                        _3469 = (_3720 * _3604.x) + _3542;
                        _3470 = (_3720 * _3604.y) + _3543;
                        _3471 = (_3720 * _3604.z) + _3544;
                        if (_3549 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3471;
                            _3545 = _3472;
                            _3546 = _3473;
                            _3547 = _3474;
                            _3548 = _3549;
                        }
                    }
                    frontier_phi_66_pred = _3469;
                    frontier_phi_66_pred_1 = _3474;
                    frontier_phi_66_pred_2 = _3473;
                    frontier_phi_66_pred_3 = _3472;
                    frontier_phi_66_pred_4 = _3471;
                    frontier_phi_66_pred_5 = _3470;
                }
                _3246 = frontier_phi_66_pred;
                _3256 = frontier_phi_66_pred_1;
                _3254 = frontier_phi_66_pred_2;
                _3252 = frontier_phi_66_pred_3;
                _3250 = frontier_phi_66_pred_4;
                _3248 = frontier_phi_66_pred_5;
                uint _3404 = _3403 + 1u;
                if (_3404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3397 = _3246;
                    _3398 = _3248;
                    _3399 = _3250;
                    _3400 = _3252;
                    _3401 = _3254;
                    _3402 = _3256;
                    _3403 = _3404;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3245 = _3246;
            _3247 = _3248;
            _3249 = _3250;
            _3251 = _3252;
            _3253 = _3254;
            _3255 = _3256;
        }
        uvec4 _3259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3260 = _3259.z;
        uint _3262 = (_3260 >> 8u) & 15u;
        float _3365;
        float _3367;
        float _3369;
        float _3371;
        float _3373;
        float _3375;
        if (((4294967295u << _3262) & _3144) == 0u)
        {
            _3365 = _3245;
            _3367 = _3247;
            _3369 = _3249;
            _3371 = _3251;
            _3373 = _3253;
            _3375 = _3255;
        }
        else
        {
            float _3390 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
            float _3391 = _3390 * _3098;
            float _3392 = _3390 * _3099;
            float _3393 = _3390 * _3100;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3262 < ((_3260 >> 12u) & 15u))
            {
                float _3366;
                float _3368;
                float _3370;
                float _3372;
                float _3374;
                float _3376;
                float _3525 = _3245;
                float _3526 = _3247;
                float _3527 = _3249;
                float _3528 = _3251;
                float _3529 = _3253;
                float _3530 = _3255;
                uint _3531 = _3262;
                uint _3540;
                bool _3541;
                for (;;)
                {
                    _3540 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3531 << 2u)) >> 2u)).x;
                    _3541 = _3540 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3541)
                    {
                        frontier_phi_77_pred = _3530;
                        frontier_phi_77_pred_1 = _3529;
                        frontier_phi_77_pred_2 = _3528;
                        frontier_phi_77_pred_3 = _3527;
                        frontier_phi_77_pred_4 = _3526;
                        frontier_phi_77_pred_5 = _3525;
                    }
                    else
                    {
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _4030;
                        float _4031;
                        float _4032;
                        float _3747 = _3525;
                        float _3748 = _3526;
                        float _3749 = _3527;
                        float _3750 = _3528;
                        float _3751 = _3529;
                        float _3752 = _3530;
                        uint _3753 = _3540;
                        uint _3754;
                        vec4 _3779;
                        float _3780;
                        vec4 _3795;
                        vec3 _3807;
                        vec4 _3822;
                        vec4 _3837;
                        float _3883;
                        bool _3884;
                        for (;;)
                        {
                            uint _3764 = ((_3531 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3753));
                            _3754 = (_3753 + 4294967295u) & _3753;
                            uint _3766 = _3764 * 40u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            _3780 = _3779.w;
                            uint _3782 = (_3764 * 40u) + 4u;
                            _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            uint _3797 = (_3764 * 40u) + 8u;
                            _3807 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x));
                            uint _3809 = (_3764 * 40u) + 16u;
                            _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            uint _3824 = (_3764 * 40u) + 20u;
                            _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            uint _3839 = (_3764 * 40u) + 24u;
                            vec4 _3852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 3u)).x));
                            uint _3858 = (_3764 * 40u) + 28u;
                            vec4 _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            _3883 = fma(_3100, _3871.z, fma(_3099, _3871.y, _3871.x * _3098)) + _3871.w;
                            _3884 = !((fma(_3100, _3852.z, fma(_3099, _3852.y, _3852.x * _3098)) + _3852.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3884)
                            {
                                float _3911 = _3779.x - _3098;
                                float _3912 = _3779.y - _3099;
                                float _3913 = _3779.z - _3100;
                                float _3914 = dot(vec3(_3911, _3912, _3913), vec3(_3911, _3912, _3913));
                                float _3917 = inversesqrt(_3914);
                                float _3918 = _3917 * _3911;
                                float _3919 = _3917 * _3912;
                                float _3920 = _3917 * _3913;
                                float _3924 = 1.0 - (_3914 / (_3780 * _3780));
                                float _5138 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3925 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3929 = sqrt(_3914) * _3795.w;
                                float _3931 = 1.39999997615814208984375 / (_3929 + 1.39999997615814208984375);
                                float _3932 = _3931 * _3931;
                                float _3935 = ((1.0 - _3932) * dot(vec3(_3918, _3919, _3920), vec3(_1312, _1315, _1318))) + _3932;
                                float _3938 = _3929 * _3929;
                                float _3942 = (fma(_3100, _3822.z, fma(_3099, _3822.y, _3822.x * _3098)) + _3822.w) / _3883;
                                float _3943 = (fma(_3100, _3837.z, fma(_3099, _3837.y, _3837.x * _3098)) + _3837.w) / _3883;
                                float _3947 = 1.0 - dot(vec2(_3942, _3943), vec2(_3942, _3943));
                                float _5154 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3949 = _3948 * (((isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0))) * _3925) / ((_3938 * 0.699999988079071044921875) + 1.0));
                                float _3961 = exp2(log2(1.0 / ((_3938 * 3.5) + 5.0)) * 0.25);
                                float _3962 = 1.0 - _1387;
                                float _3969 = sqrt(1.0 - ((1.0 - (_3962 * _3962)) * (1.0 - (_3961 * _3961))));
                                float _3970 = _3969 * _3969;
                                float _3971 = _3970 * _3970;
                                float _3972 = _3918 - _3391;
                                float _3973 = _3919 - _3392;
                                float _3974 = _3920 - _3393;
                                float _3978 = inversesqrt(dot(vec3(_3972, _3973, _3974), vec3(_3972, _3973, _3974)));
                                float _3982 = dot(vec3(_1312, _1315, _1318), vec3((-0.0) - _3391, (-0.0) - _3392, (-0.0) - _3393));
                                float _5165 = isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0));
                                float _3985 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _3986 = dot(vec3(_1312, _1315, _1318), vec3(_3978 * _3972, _3978 * _3973, _3978 * _3974));
                                float _5176 = isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0));
                                float _3989 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                                float _3993 = ((_3989 * _3989) * (_3971 + (-1.0))) + 1.0;
                                float _3994 = _3931 * _3970;
                                float _3995 = _3994 * _3994;
                                float _4001 = ((1.0 - _3995) * dot(vec3(_1312, _1315, _1318), vec3(_3918, _3919, _3920))) + _3995;
                                float _5187 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4002 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
                                float _4003 = 1.0 - _3970;
                                float _4013 = (0.5 / (((_4002 * ((_3985 * _4003) + _3970)) + 9.9999999392252902907785028219223e-09) + (((_4002 * _4003) + _3970) * _3985))) * _4002;
                                float _5198 = isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0));
                                float _4023 = (_3948 * _3925) * (((_3971 * 3.1415927410125732421875) * (isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0)))) / ((_3993 * _3993) * ((_3938 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3949 * _3795.y;
                                frontier_phi_83_pred_1 = _3949 * _3795.x;
                                frontier_phi_83_pred_2 = _4023 * _3807.z;
                                frontier_phi_83_pred_3 = _4023 * _3807.y;
                                frontier_phi_83_pred_4 = _4023 * _3807.x;
                                frontier_phi_83_pred_5 = _3949 * _3795.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4031 = frontier_phi_83_pred;
                            _4030 = frontier_phi_83_pred_1;
                            _4029 = frontier_phi_83_pred_2;
                            _4028 = frontier_phi_83_pred_3;
                            _4027 = frontier_phi_83_pred_4;
                            _4032 = frontier_phi_83_pred_5;
                            _3737 = _4030 + _3750;
                            _3738 = _4031 + _3751;
                            _3739 = _4032 + _3752;
                            _3734 = _4027 + _3747;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            if (_3754 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3737;
                                _3751 = _3738;
                                _3752 = _3739;
                                _3753 = _3754;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3739;
                        frontier_phi_77_pred_1 = _3738;
                        frontier_phi_77_pred_2 = _3737;
                        frontier_phi_77_pred_3 = _3736;
                        frontier_phi_77_pred_4 = _3735;
                        frontier_phi_77_pred_5 = _3734;
                    }
                    _3376 = frontier_phi_77_pred;
                    _3374 = frontier_phi_77_pred_1;
                    _3372 = frontier_phi_77_pred_2;
                    _3370 = frontier_phi_77_pred_3;
                    _3368 = frontier_phi_77_pred_4;
                    _3366 = frontier_phi_77_pred_5;
                    uint _3532 = _3531 + 1u;
                    if (_3532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3525 = _3366;
                        _3526 = _3368;
                        _3527 = _3370;
                        _3528 = _3372;
                        _3529 = _3374;
                        _3530 = _3376;
                        _3531 = _3532;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3370;
                frontier_phi_58_59_ladder_1 = _3376;
                frontier_phi_58_59_ladder_2 = _3374;
                frontier_phi_58_59_ladder_3 = _3372;
                frontier_phi_58_59_ladder_4 = _3368;
                frontier_phi_58_59_ladder_5 = _3366;
            }
            else
            {
                frontier_phi_58_59_ladder = _3249;
                frontier_phi_58_59_ladder_1 = _3255;
                frontier_phi_58_59_ladder_2 = _3253;
                frontier_phi_58_59_ladder_3 = _3251;
                frontier_phi_58_59_ladder_4 = _3247;
                frontier_phi_58_59_ladder_5 = _3245;
            }
            _3365 = frontier_phi_58_59_ladder_5;
            _3367 = frontier_phi_58_59_ladder_4;
            _3369 = frontier_phi_58_59_ladder;
            _3371 = frontier_phi_58_59_ladder_3;
            _3373 = frontier_phi_58_59_ladder_2;
            _3375 = frontier_phi_58_59_ladder_1;
        }
        float _3380 = isnan(1.0) ? _1371 : (isnan(_1371) ? 1.0 : min(_1371, 1.0));
        _3157 = (_3380 * _3371) + _2590;
        _3159 = (_3380 * _3373) + _2592;
        _3161 = (_3380 * _3375) + _2594;
        _3163 = ((_3365 * _1355) * _3380) + _2938;
        _3165 = ((_3367 * _1357) * _3380) + _2940;
        _3167 = ((_3369 * _1358) * _3380) + _2942;
    }
    else
    {
        _3157 = _2590;
        _3159 = _2592;
        _3161 = _2594;
        _3163 = _2938;
        _3165 = _2940;
        _3167 = _2942;
    }
    float _5214 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _5225 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _5236 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _3184 = ((isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_3157 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1371))) + ((_3163 + ((isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0))) * _2208)) * cbPerFrame._m0[3u].x);
    float _3185 = ((isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0))) * (_3159 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1371))) + ((_3165 + ((isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0))) * _2208)) * cbPerFrame._m0[3u].x);
    float _3186 = ((isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0))) * (_3161 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1371))) + ((_3167 + ((isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0))) * _2208)) * cbPerFrame._m0[3u].x);
    uint _3187 = _303 + 6u;
    float _3195 = _1293 / cbSceneParam._m0[86u].x;
    float _3196 = _1294 / cbSceneParam._m0[86u].y;
    vec4 _3210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, (log2((isnan(cbSceneParam._m0[77u].w) ? _1216 : (isnan(_1216) ? cbSceneParam._m0[77u].w : min(_1216, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3212 = _3210.x;
    float _3213 = _3210.y;
    float _3214 = _3210.z;
    float _3215 = _3210.w;
    float _3307;
    float _3309;
    float _3311;
    float _3313;
    if (_1216 > cbSceneParam._m0[78u].w)
    {
        float _3270 = isnan(_1216) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1216 : min(cbSceneParam._m0[80u].w, _1216));
        float _3271 = _3270 / _1216;
        float _3282 = _3271 * _1266;
        float _3283 = _1267 * _3271;
        float _3284 = (-0.0) - _3283;
        float _3285 = _3271 * _1268;
        float _3287 = (cbSceneParam._m0[77u].w * _3284) / _3270;
        float _3288 = _3287 + cbSceneParam._m0[79u].w;
        float _3289 = cbSceneParam._m0[79u].w - _3283;
        float _3295 = sqrt(((_3282 * _3282) + (_3283 * _3283)) + (_3285 * _3285));
        float _3298 = (1.0 - (cbSceneParam._m0[77u].w / _3270)) * _3295;
        float _3303 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3305 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3482;
        if (abs((_3284 - _3287) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3482 = ((((_3288 > 0.0) ? exp2(_3303 * _3288) : (2.0 - exp2(_3305 * _3288))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3298;
        }
        else
        {
            float _3426 = 1.0 / cbSceneParam._m0[80u].x;
            float _3427 = isnan(_3289) ? _3288 : (isnan(_3288) ? _3289 : max(_3288, _3289));
            float _3428 = isnan(_3289) ? _3288 : (isnan(_3288) ? _3289 : min(_3288, _3289));
            float _3437 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : min(_3427, 0.0));
            float _3438 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : min(_3428, 0.0));
            _3482 = ((abs(_3295 / _3284) * cbSceneParam._m0[80u].y) * ((((_3437 - _3438) * 2.0) - ((exp2(_3303 * (isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0)))) - exp2(_3303 * (isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))))) * _3426)) - ((exp2(_3305 * _3437) - exp2(_3305 * _3438)) * _3426))) + (_3298 * cbSceneParam._m0[80u].z);
        }
        vec4 _3484 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, 1.0), 0.0);
        float _3493 = exp2((_3482 * (-1.44269502162933349609375)) * (1.0 - _3484.w));
        float _3494 = log2(_3493);
        float _3510 = log2(_3215);
        _3307 = (exp2(_3510 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3494 * cbSceneParam._m0[78u].x)) * _3484.x) / cbSceneParam._m0[78u].x)) + _3212;
        _3309 = (exp2(_3510 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3494 * cbSceneParam._m0[78u].y)) * _3484.y) / cbSceneParam._m0[78u].y)) + _3213;
        _3311 = (exp2(_3510 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3494 * cbSceneParam._m0[78u].z)) * _3484.z) / cbSceneParam._m0[78u].z)) + _3214;
        _3313 = _3493 * _3215;
    }
    else
    {
        _3307 = _3212;
        _3309 = _3213;
        _3311 = _3214;
        _3313 = _3215;
    }
    bool _3520;
    vec4 _3323;
    vec4 _3345;
    float _3347;
    float _3351;
    float _3352;
    float _3353;
    float _3354;
    bool _3364;
    for (;;)
    {
        _3323 = cbMatDynParam._m0[0u];
        float _3325 = roundEven(_3323.y);
        bool _3326 = _3325 == 3.0;
        float _3327 = log2(_3313);
        float _3334 = exp2(_3327 * cbSceneParam._m0[78u].x) * _3184;
        float _3335 = exp2(_3327 * cbSceneParam._m0[78u].y) * _3185;
        float _3336 = exp2(_3327 * cbSceneParam._m0[78u].z) * _3186;
        float _3343 = _1282 + (-0.5);
        _3345 = cbMtdParam._m0[1u];
        _3347 = _3345.y * _3343;
        float _3350 = (_3325 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3351 = _3350 * (_3326 ? _3334 : (_3334 + (cbSceneParam._m0[72u].w * _3307)));
        _3352 = _3350 * (_3326 ? _3335 : (_3335 + (cbSceneParam._m0[72u].w * _3309)));
        _3353 = _3350 * (_3326 ? _3336 : (_3336 + (cbSceneParam._m0[72u].w * _3311)));
        _3354 = _3343 * 0.999000012874603271484375;
        _3364 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3364)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3354) < 0.5)
            {
                _3520 = true;
                break;
            }
        }
        uint _3461 = _1331 + uint(_3323.w);
        if ((cbInstanceData._m0[_3461].w < 1.0) && ((cbInstanceData._m0[_3461].w + _3354) < 0.5))
        {
            _3520 = true;
            break;
        }
        if ((_3347 + 1.0) < _3345.x)
        {
            _3520 = true;
            break;
        }
        _3520 = false;
        break;
    }
    float _3725;
    if (_3520)
    {
        discard_state = true;
        _3725 = 0.0;
    }
    else
    {
        _3725 = cbInstanceData._m0[_3187].w;
    }
    SV_Target.x = _3351;
    SV_Target.y = _3352;
    SV_Target.z = _3353;
    SV_Target.w = _3725;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3187].w;
    discard_exit();
}


