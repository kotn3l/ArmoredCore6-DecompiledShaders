#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1503;
float _3882;
float _3883;
float _3884;
float _3885;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3894 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3905 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3916 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[23u].w) + _459) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3927 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _487 = (_345.x * cbMtdParam._m0[9u].x) * ((_477 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376);
    float _488 = (_345.y * cbMtdParam._m0[9u].y) * ((_477 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377);
    float _489 = (_345.z * cbMtdParam._m0[9u].z) * ((_477 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378);
    float _493 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _487;
    float _496 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _488;
    float _499 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _489;
    float _507 = (((_487 - _493) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) + _493) * 4.55000019073486328125;
    float _509 = (((_488 - _496) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) + _496) * 4.55000019073486328125;
    float _511 = (((_489 - _499) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) + _499) * 4.55000019073486328125;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _605 = ((_575.z - _596) * _477) + _596;
    float _608 = ((((_575.x - _594) * _477) + _594) * 2.0) + (-1.0);
    float _609 = ((((_575.y - _595) * _477) + _595) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3938 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _668 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _671 = ((isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : min(_668, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _680 = (_671 - ((((((_658 - _659) * cbMtdParam._m0[24u].z) + _659) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _671))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3959 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _688 = (_681 * ((_530.x * cbMtdParam._m0[18u].x) - _507)) + _507;
    float _689 = (_681 * ((_530.y * cbMtdParam._m0[18u].y) - _509)) + _509;
    float _690 = (_681 * ((_530.z * cbMtdParam._m0[18u].z) - _511)) + _511;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _704 = _702.x;
    float _705 = 1.0 - _704;
    float _730 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_704 - _705) * cbMtdParam._m0[24u].w) + _705) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3970 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _739 = ((((cbMtdParam._m0[10u].x - _688) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _731) + _688;
    float _740 = ((((cbMtdParam._m0[10u].y - _689) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _731) + _689;
    float _741 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _690)) * _731) + _690;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _769 = _767.x;
    float _786 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _769) * _477) + _769;
    float _790 = ((_753.x - _786) * cbMtdParam._m0[19u].z) + _786;
    float _792 = _790 - (_790 * _681);
    float _794 = _792 - (_792 * _731);
    float _799 = (((_550.z - _605) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _605;
    float _803 = ((_631.z - _799) * cbMtdParam._m0[19u].w) + _799;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _824 = (_817.x * 2.0) + (-1.0);
    float _825 = (_817.y * 2.0) + (-1.0);
    float _826 = dot(vec2(_824, _825), vec2(_824, _825));
    float _3981 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _834 = (_681 * (_817.z - _803)) + _803;
    float _837 = ((cbMtdParam._m0[23u].x - _834) * _731) + _834;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _864 = (_858.x * 2.0) + (-1.0);
    float _865 = (_858.y * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _3992 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _880 = (_608 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_550.x * 2.0) + (-1.0)))) + (((_631.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _881 = (_609 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_550.y * 2.0) + (-1.0)))) + (((_631.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _893 = (((_824 - _880) + (cbMtdParam._m0[21u].x * _880)) * _681) + _880;
    float _894 = (((_825 - _881) + (cbMtdParam._m0[21u].x * _881)) * _681) + _881;
    float _895 = (_681 * (sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _615)) + _615;
    float _906 = (((_864 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _731) + _893;
    float _907 = (((_865 - _894) + (_894 * cbMtdParam._m0[22u].z)) * _731) + _894;
    float _908 = ((sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) - _895) * _731) + _895;
    float _910 = cbMtdParam._m0[22u].x + _631.w;
    float _913 = fma(_908, _257 * NORMAL.x, fma(_907, _264 * TANGENT.x, (_250 * _242) * _906));
    float _916 = fma(_908, _257 * NORMAL.y, fma(_907, _264 * TANGENT.y, (_250 * _243) * _906));
    float _919 = fma(_908, _257 * NORMAL.z, fma(_907, _264 * TANGENT.z, (_250 * _244) * _906));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _4003 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _927 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4025 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4036 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4047 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4058 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _932 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _996 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _986);
    float _997 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _986);
    float _998 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _986);
    float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
    float _1003 = _996 * _1002;
    float _1004 = _997 * _1002;
    float _1005 = _998 * _1002;
    vec4 _1010 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1012 = _1010.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1184 = sqrt(((_996 * _996) + (_997 * _997)) + (_998 * _998));
        float _1190 = (cbMatDynParam._m0[5u].x * _1184) + cbMatDynParam._m0[5u].y;
        float _4069 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1195 = (cbMatDynParam._m0[5u].z * _1184) + cbMatDynParam._m0[5u].w;
        float _4080 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) - _1191)) + _1191) < ((_1012 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1023 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1024 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1042 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1045 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1048 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1061 = _289 + 9u;
    uint _1062 = _1061 + uint(cbMatDynParam._m0[0u].w);
    float _1068 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1062].x;
    float _1069 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1062].y;
    float _1070 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1062].z;
    float _4091 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1074 = 1.0 - _932;
    float _1075 = _1071 * _1074;
    float _1076 = _1072 * _1074;
    float _1077 = _1073 * _1074;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _932;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _932;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _932;
    float _1085 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    vec4 _1097 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1023, cbSceneParam._m0[86u].y * _1024));
    float _1101 = ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * TEXCOORD_5.w) * _1097.x;
    float _1102 = dot(vec3(_924, _925, _926), vec3(_1003, _1004, _1005));
    float _1105 = _1102 * 2.0;
    float _1109 = (_1105 * _924) - _1003;
    float _1110 = (_1105 * _925) - _1004;
    float _1111 = (_1105 * _926) - _1005;
    float _1115 = abs(dot(vec3(_1003, _1004, _1005), vec3(_924, _925, _926)));
    float _4124 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1117 = sqrt(_927);
    float _1130 = exp2((_1117 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1117 * 3.0));
    float _1136 = (1.0 - _1130) * ((_1117 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1137 = _1130 * _1117;
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1502;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1227 = fma(_1173, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165));
        float _1231 = fma(_1173, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165));
        float _1235 = fma(_1173, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165));
        float _1260 = _1165 + _924;
        float _1261 = _1169 + _925;
        float _1262 = _1173 + _926;
        float _1272 = fma(_1262, cbModelParam._m0[26u].z, fma(_1261, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1260)) - _1227;
        float _1273 = fma(_1262, cbModelParam._m0[27u].z, fma(_1261, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1260)) - _1231;
        float _1274 = fma(_1262, cbModelParam._m0[28u].z, fma(_1261, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1260)) - _1235;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1227 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1231 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[34u].z) + ((((((_1235 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1330 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1296.x + (-0.5));
        float _1332 = _1330 * (_1296.y + (-0.5));
        float _1333 = _1330 * (_1296.z + (-0.5));
        float _1340 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1303.x + (-0.5));
        float _1342 = _1340 * (_1303.y + (-0.5));
        float _1343 = _1340 * (_1303.z + (-0.5));
        float _1350 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1310.x + (-0.5));
        float _1352 = _1350 * (_1310.y + (-0.5));
        float _1353 = _1350 * (_1310.z + (-0.5));
        float _1360 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1317.x + (-0.5));
        float _1362 = _1360 * (_1317.y + (-0.5));
        float _1363 = _1360 * (_1317.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1384 = (dot(vec3(_924, _925, _926), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1394 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4172 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1396 + 1.0))) + _1401) * _1364;
        float _1411 = _1332 * 0.5;
        float _1412 = _1342 * 0.5;
        float _1413 = _1352 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_924, _925, _926), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4205 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1438 + 1.0))) + _1443) * _1365;
        float _1453 = _1333 * 0.5;
        float _1454 = _1343 * 0.5;
        float _1455 = _1353 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_924, _925, _926), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4238 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1480 + 1.0))) + _1485) * _1366;
        _1502 = _1333;
        _1504 = _1332;
        _1505 = _1331;
        _1506 = _1343;
        _1507 = _1342;
        _1508 = _1341;
        _1509 = _1353;
        _1510 = _1352;
        _1511 = _1351;
        _1512 = _1366;
        _1513 = _1365;
        _1514 = _1364;
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1503;
        _1504 = _1503;
        _1505 = _1503;
        _1506 = _1503;
        _1507 = _1503;
        _1508 = _1503;
        _1509 = _1503;
        _1510 = _1503;
        _1511 = _1503;
        _1512 = _1503;
        _1513 = _1503;
        _1514 = _1503;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1545 = fma(_1173, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165));
        float _1549 = fma(_1173, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165));
        float _1553 = fma(_1173, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165));
        float _1576 = _1165 + _924;
        float _1577 = _1169 + _925;
        float _1578 = _1173 + _926;
        float _1588 = fma(_1578, cbModelParam._m0[30u].z, fma(_1577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1576)) - _1545;
        float _1589 = fma(_1578, cbModelParam._m0[31u].z, fma(_1577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1576)) - _1549;
        float _1590 = fma(_1578, cbModelParam._m0[32u].z, fma(_1577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1576)) - _1553;
        float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
        float _1607 = ((_1594 * _1588) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1545 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1594 * _1589) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1549 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1594 * _1590) / cbModelParam._m0[35u].z) + ((((((_1553 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        float _1644 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1611.x + (-0.5));
        float _1646 = _1644 * (_1611.y + (-0.5));
        float _1647 = _1644 * (_1611.z + (-0.5));
        float _1654 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1618.x + (-0.5));
        float _1656 = _1654 * (_1618.y + (-0.5));
        float _1657 = _1654 * (_1618.z + (-0.5));
        float _1664 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1625.x + (-0.5));
        float _1666 = _1664 * (_1625.y + (-0.5));
        float _1667 = _1664 * (_1625.z + (-0.5));
        float _1674 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1632.x + (-0.5));
        float _1676 = _1674 * (_1632.y + (-0.5));
        float _1677 = _1674 * (_1632.z + (-0.5));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = _1645 * 0.5;
        float _1682 = _1655 * 0.5;
        float _1683 = _1665 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_924, _925, _926), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4301 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1708 + 1.0))) + _1713) * _1678;
        float _1723 = _1646 * 0.5;
        float _1724 = _1656 * 0.5;
        float _1725 = _1666 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_924, _925, _926), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4334 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1750 + 1.0))) + _1755) * _1679;
        float _1765 = _1647 * 0.5;
        float _1766 = _1657 * 0.5;
        float _1767 = _1667 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_924, _925, _926), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4367 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1792 + 1.0))) + _1797) * _1680;
        _1814 = _1647;
        _1815 = _1646;
        _1816 = _1645;
        _1817 = _1657;
        _1818 = _1656;
        _1819 = _1655;
        _1820 = _1667;
        _1821 = _1666;
        _1822 = _1665;
        _1823 = _1680;
        _1824 = _1679;
        _1825 = _1678;
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    }
    else
    {
        _1814 = _1503;
        _1815 = _1503;
        _1816 = _1503;
        _1817 = _1503;
        _1818 = _1503;
        _1819 = _1503;
        _1820 = _1503;
        _1821 = _1503;
        _1822 = _1503;
        _1823 = _1503;
        _1824 = _1503;
        _1825 = _1503;
        _1826 = 0.0;
        _1827 = 0.0;
        _1828 = 0.0;
    }
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1515)) + _1515;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1516)) + _1516;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1517)) + _1517;
    float _1861 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1838));
    float _1882 = _1109 * 0.5;
    float _1883 = _1110 * 0.5;
    float _1884 = _1111 * 0.5;
    float _1885 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1888 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1891 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1898 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1502, _1506, _1509, _1512));
        float _1902 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1906 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1913 = dot(vec4(cbModelParam._m0[39u]), vec4(_1882, _1883, _1884, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1927 = dot(vec4(cbModelParam._m0[40u]), vec4(_1882, _1883, _1884, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1940 = (_1936 * cbModelParam._m0[1u].x) + (_1925 * (1.0 - cbModelParam._m0[1u].x));
    float _1950 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1950 : min(cbModelParam._m0[25u].z, _1950));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1998 = fma(_1173, cbModelParam._m0[13u].z, fma(_1169, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165)) + cbModelParam._m0[13u].w;
        float _2002 = fma(_1173, cbModelParam._m0[14u].z, fma(_1169, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165)) + cbModelParam._m0[14u].w;
        float _2006 = fma(_1173, cbModelParam._m0[15u].z, fma(_1169, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165)) + cbModelParam._m0[15u].w;
        float _2009 = fma(_1111, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109));
        float _2012 = fma(_1111, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109));
        float _2015 = fma(_1111, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109));
        float _2043;
        if (_2009 > 0.0)
        {
            _2043 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2043 = frontier_phi_17_15_ladder;
        }
        float _2245;
        if (_2012 > 0.0)
        {
            _2245 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2245 = frontier_phi_26_22_ladder;
        }
        float _2499;
        if (_2015 > 0.0)
        {
            _2499 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2499 = frontier_phi_38_33_ladder;
        }
        float _2501 = isnan(_2245) ? _2043 : (isnan(_2043) ? _2245 : min(_2043, _2245));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _2009) + _1998;
        float _2507 = (_2502 * _2012) + _2002;
        float _2508 = (_2502 * _2015) + _2006;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2509;
        float _2513 = _2509 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 > _2513) || ((_2507 < _2511) || ((_2506 < _2511) || (_2506 > _2513))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2508, cbModelParam._m0[9u].z, fma(_2507, cbModelParam._m0[9u].y, _2506 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2508, cbModelParam._m0[10u].z, fma(_2507, cbModelParam._m0[10u].y, _2506 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2508, cbModelParam._m0[11u].z, fma(_2507, cbModelParam._m0[11u].y, _2506 * cbModelParam._m0[11u].x))), _1951);
            frontier_phi_16_38_ladder = _2636.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2636.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2636.x * cbModelParam._m0[1u].y;
        }
        _2031 = frontier_phi_16_38_ladder_2;
        _2033 = frontier_phi_16_38_ladder_1;
        _2035 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1109, _1110, _1111), _1951);
        _2031 = _2019.x * cbModelParam._m0[1u].y;
        _2033 = _2019.y * cbModelParam._m0[1u].y;
        _2035 = _2019.z * cbModelParam._m0[1u].y;
    }
    float _2039 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2039 : min(cbModelParam._m0[25u].w, _2039));
    float _2129;
    float _2131;
    float _2133;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2093 = fma(_1173, cbModelParam._m0[21u].z, fma(_1169, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165)) + cbModelParam._m0[21u].w;
        float _2097 = fma(_1173, cbModelParam._m0[22u].z, fma(_1169, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165)) + cbModelParam._m0[22u].w;
        float _2101 = fma(_1173, cbModelParam._m0[23u].z, fma(_1169, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165)) + cbModelParam._m0[23u].w;
        float _2104 = fma(_1111, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109));
        float _2107 = fma(_1111, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109));
        float _2110 = fma(_1111, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109));
        float _2250;
        if (_2104 > 0.0)
        {
            _2250 = abs((1.0 - _2093) / _2104);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2093 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2250 = frontier_phi_28_24_ladder;
        }
        float _2526;
        if (_2107 > 0.0)
        {
            _2526 = abs((1.0 - _2097) / _2107);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2097 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2526 = frontier_phi_40_35_ladder;
        }
        float _2739;
        if (_2110 > 0.0)
        {
            _2739 = abs((1.0 - _2101) / _2110);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2101 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2739 = frontier_phi_49_46_ladder;
        }
        float _2741 = isnan(_2526) ? _2250 : (isnan(_2250) ? _2526 : min(_2250, _2526));
        float _2742 = isnan(_2739) ? _2741 : (isnan(_2741) ? _2739 : min(_2741, _2739));
        float _2746 = (_2742 * _2104) + _2093;
        float _2747 = (_2742 * _2107) + _2097;
        float _2748 = (_2742 * _2110) + _2101;
        float _2749 = _2742 * 9.9999997473787516355514526367188e-05;
        float _2750 = (-1.0) - _2749;
        float _2752 = _2749 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2748 > _2752) || ((_2748 < _2750) || ((_2747 > _2752) || ((_2747 < _2750) || ((_2746 < _2750) || (_2746 > _2752))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2748, cbModelParam._m0[17u].z, fma(_2747, cbModelParam._m0[17u].y, _2746 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2748, cbModelParam._m0[18u].z, fma(_2747, cbModelParam._m0[18u].y, _2746 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2748, cbModelParam._m0[19u].z, fma(_2747, cbModelParam._m0[19u].y, _2746 * cbModelParam._m0[19u].x))), _2040);
            frontier_phi_25_49_ladder = _2947.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2947.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2947.x * cbModelParam._m0[1u].z;
        }
        _2129 = frontier_phi_25_49_ladder_2;
        _2131 = frontier_phi_25_49_ladder_1;
        _2133 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2113 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1109, _1110, _1111), _2040);
        _2129 = _2113.x * cbModelParam._m0[1u].z;
        _2131 = _2113.y * cbModelParam._m0[1u].z;
        _2133 = _2113.z * cbModelParam._m0[1u].z;
    }
    float _2146 = (((_1136 * _1085) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2129 - _2031)) + _2031);
    float _2148 = (((_1136 * _1087) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2150 = (((_1136 * _1088) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2153 = fma(_2150, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2146 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2150, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2146 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2150, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2146 * cbSceneParam._m0[91u].x));
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2171 = _2169.x * 14u;
    uint _2172 = _2171 + 13u;
    float _2179 = _1101 + (-1.0);
    float _2184 = (cbLight._m0[_2172].x * _2179) + 1.0;
    float _2185 = (cbLight._m0[_2172].y * _2179) + 1.0;
    float _2186 = (cbLight._m0[_2172].z * _2179) + 1.0;
    float _2187 = (cbLight._m0[_2172].w * _2179) + 1.0;
    uint _2188 = _2171 + 5u;
    float _2194 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2198 = _2171 + 4u;
    float _2204 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2208 = _2171 | 1u;
    float _2219 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_924, _925, _926));
    float _2222 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_924, _925, _926));
    float _4503 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _4514 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2227 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2229 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2236 = ((cbLight._m0[_2188].x * _2194) * _2229) + ((cbLight._m0[_2198].x * _2204) * _2227);
    float _2237 = ((_2194 * cbLight._m0[_2188].y) * _2229) + ((_2204 * cbLight._m0[_2198].y) * _2227);
    float _2238 = ((_2194 * cbLight._m0[_2188].z) * _2229) + ((_2204 * cbLight._m0[_2198].z) * _2227);
    uvec4 _2242 = floatBitsToUint(cbLight._m0[_2171 + 12u]);
    bool _2244 = _2242.x == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2244)
    {
        _2255 = _2236;
        _2257 = _2237;
        _2259 = _2238;
    }
    else
    {
        uint _2263 = _2171 + 6u;
        float _2279 = (dot(vec3(cbLight._m0[_2171 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4525 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2282 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2255 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2236;
        _2257 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2237;
        _2259 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2238;
    }
    bool _2262 = _2242.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2262)
    {
        _2300 = _2255;
        _2302 = _2257;
        _2304 = _2259;
    }
    else
    {
        uint _2470 = _2171 + 7u;
        float _2486 = (dot(vec3(cbLight._m0[_2171 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2487 = _2486 * _2486;
        float _4541 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2488 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2489 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2300 = (((cbLight._m0[_2470].x * 0.3183098733425140380859375) * _2488) * _2489) + _2255;
        _2302 = (((cbLight._m0[_2470].y * 0.3183098733425140380859375) * _2488) * _2489) + _2257;
        _2304 = (((cbLight._m0[_2470].z * 0.3183098733425140380859375) * _2488) * _2489) + _2259;
    }
    uint _2307 = _2171 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _927) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2171].x + _1003;
    float _2323 = cbLight._m0[_2171].y + _1004;
    float _2324 = cbLight._m0[_2171].z + _1005;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2171].xyz));
    float _4557 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2336 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2337 = dot(vec3(_924, _925, _926), vec3(_2329, _2330, _2331));
    float _4579 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2329, _2330, _2331));
    float _4590 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2358 = 0.959999978542327880859375 - _1082;
    float _2360 = 0.959999978542327880859375 - _1083;
    float _2361 = 0.959999978542327880859375 - _1084;
    float _2368 = 1.0 - _2321;
    float _2379 = (0.5 / (((_2336 * ((_2335 * _2368) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2368) + _2321) * _2335))) * _2335;
    float _4601 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2392 = _2171 + 9u;
    float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _927) * 0.949999988079071044921875);
    float _2404 = _2403 * _2403;
    float _2405 = cbLight._m0[_2208].x + _1003;
    float _2406 = cbLight._m0[_2208].y + _1004;
    float _2407 = cbLight._m0[_2208].z + _1005;
    float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
    float _2412 = _2411 * _2405;
    float _2413 = _2411 * _2406;
    float _2414 = _2411 * _2407;
    float _2415 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2208].xyz));
    float _4612 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2419 = dot(vec3(_924, _925, _926), vec3(_2412, _2413, _2414));
    float _4623 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2412, _2413, _2414));
    float _4634 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2404 * _2404;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2445 = 1.0 - _2404;
    float _2455 = (0.5 / (((_2336 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2445) + _2404) * _2418))) * _2418;
    float _4645 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    float _2467 = (((((_2438 * _2358) + _1085) * cbLight._m0[_2392].x) * _2457) * _2194) + (((((_2357 * _2358) + _1085) * cbLight._m0[_2307].x) * _2381) * _2204);
    float _2468 = (((((_2438 * _2360) + _1087) * cbLight._m0[_2392].y) * _2457) * _2194) + (((((_2357 * _2360) + _1087) * cbLight._m0[_2307].y) * _2381) * _2204);
    float _2469 = (((((_2438 * _2361) + _1088) * cbLight._m0[_2392].z) * _2457) * _2194) + (((((_2357 * _2361) + _1088) * cbLight._m0[_2307].z) * _2381) * _2204);
    float _2531;
    float _2533;
    float _2535;
    if (_2244)
    {
        _2531 = _2467;
        _2533 = _2468;
        _2535 = _2469;
    }
    else
    {
        uint _2537 = _2171 + 2u;
        uint _2541 = _2171 + 10u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _927) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _1003;
        float _2558 = cbLight._m0[_2537].y + _1004;
        float _2559 = cbLight._m0[_2537].z + _1005;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2537].xyz));
        float _4656 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2571 = dot(vec3(_924, _925, _926), vec3(_2564, _2565, _2566));
        float _4667 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4678 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2597 = 1.0 - _2556;
        float _2607 = (0.5 / (((_2336 * ((_2570 * _2597) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2597) + _2556) * _2570))) * _2570;
        float _4689 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2531 = (((((_2590 * _2358) + _1085) * cbLight._m0[_2541].x) * _2609) * _2610) + _2467;
        _2533 = (((((_2590 * _2360) + _1087) * cbLight._m0[_2541].y) * _2609) * _2610) + _2468;
        _2535 = (((((_2590 * _2361) + _1088) * cbLight._m0[_2541].z) * _2609) * _2610) + _2469;
    }
    float _2645;
    float _2647;
    float _2649;
    if (_2262)
    {
        _2645 = _2531;
        _2647 = _2533;
        _2649 = _2535;
    }
    else
    {
        uint _2656 = _2171 + 3u;
        uint _2660 = _2171 + 11u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _927) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _1003;
        float _2677 = cbLight._m0[_2656].y + _1004;
        float _2678 = cbLight._m0[_2656].z + _1005;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2656].xyz));
        float _4705 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2690 = dot(vec3(_924, _925, _926), vec3(_2683, _2684, _2685));
        float _4716 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4727 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2716 = 1.0 - _2675;
        float _2726 = (0.5 / (((_2336 * ((_2689 * _2716) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2716) + _2675) * _2689))) * _2689;
        float _4738 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2728 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2729 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2645 = (((((_2709 * _2358) + _1085) * cbLight._m0[_2660].x) * _2728) * _2729) + _2531;
        _2647 = (((((_2709 * _2360) + _1087) * cbLight._m0[_2660].y) * _2728) * _2729) + _2533;
        _2649 = (((((_2709 * _2361) + _1088) * cbLight._m0[_2660].z) * _2728) * _2729) + _2535;
    }
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_2169.y == 0u)
    {
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2804;
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2804;
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2804;
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1024) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _1023) / _2820)));
        float _2841 = (log2(_2807 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
        }
        else
        {
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            uint _3111 = 0u;
            uint _3120;
            bool _3121;
            for (;;)
            {
                _3120 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                _3121 = _3120 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3121)
                {
                    frontier_phi_66_pred = _3105;
                    frontier_phi_66_pred_1 = _3110;
                    frontier_phi_66_pred_2 = _3109;
                    frontier_phi_66_pred_3 = _3108;
                    frontier_phi_66_pred_4 = _3107;
                    frontier_phi_66_pred_5 = _3106;
                }
                else
                {
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    uint _3256;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3120;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    for (;;)
                    {
                        uint _3260 = uint(findLSB(_3256)) + (_3111 << 5u);
                        uint _3257 = (_3256 + 4294967295u) & _3256;
                        uint _3262 = _3260 * 48u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3282 = (_3260 * 48u) + 4u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3301 = (_3260 * 48u) + 8u;
                        vec3 _3312 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x));
                        float _3316 = _3276.x - _2805;
                        float _3317 = _3276.y - _2806;
                        float _3318 = _3276.z - _2807;
                        float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                        float _3322 = inversesqrt(_3319);
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3326 = dot(vec3(_1042, _1045, _1048), vec3(_3323, _3324, _3325));
                        float _3331 = 1.0 - (_3319 * _3276.w);
                        float _4764 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3333 = sqrt(_3319) * _3295.w;
                        float _3336 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                        float _3337 = _3336 * _3336;
                        float _3340 = ((1.0 - _3337) * _3326) + _3337;
                        float _3343 = _3333 * _3333;
                        float _3347 = ((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3332) / ((_3343 * 0.699999988079071044921875) + 1.0);
                        float _3351 = (-0.0) - _2805;
                        float _3352 = (-0.0) - _2806;
                        float _3353 = (-0.0) - _2807;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3368 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _1117;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3358 + _3323;
                        float _3380 = _3359 + _3324;
                        float _3381 = _3360 + _3325;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_1042, _1045, _1048), vec3(_3358, _3359, _3360));
                        float _4780 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3393 = dot(vec3(_1042, _1045, _1048), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4791 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3336 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3326) + _3402;
                        float _4802 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4813 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3400 * _3400) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125))) * _3332;
                        _3180 = (_3347 * _3295.x) + _3253;
                        _3181 = (_3347 * _3295.y) + _3254;
                        _3182 = (_3347 * _3295.z) + _3255;
                        _3177 = (_3428 * _3312.x) + _3250;
                        _3178 = (_3428 * _3312.y) + _3251;
                        _3179 = (_3428 * _3312.z) + _3252;
                        if (_3257 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3257;
                        }
                    }
                    frontier_phi_66_pred = _3177;
                    frontier_phi_66_pred_1 = _3182;
                    frontier_phi_66_pred_2 = _3181;
                    frontier_phi_66_pred_3 = _3180;
                    frontier_phi_66_pred_4 = _3179;
                    frontier_phi_66_pred_5 = _3178;
                }
                _2953 = frontier_phi_66_pred;
                _2963 = frontier_phi_66_pred_1;
                _2961 = frontier_phi_66_pred_2;
                _2959 = frontier_phi_66_pred_3;
                _2957 = frontier_phi_66_pred_4;
                _2955 = frontier_phi_66_pred_5;
                uint _3112 = _3111 + 1u;
                if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3105 = _2953;
                    _3106 = _2955;
                    _3107 = _2957;
                    _3108 = _2959;
                    _3109 = _2961;
                    _3110 = _2963;
                    _3111 = _3112;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
        }
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.z;
        uint _2969 = (_2967 >> 8u) & 15u;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((4294967295u << _2969) & _2851) == 0u)
        {
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
            _3081 = _2960;
            _3083 = _2962;
        }
        else
        {
            float _3098 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
            float _3099 = _3098 * _2805;
            float _3100 = _3098 * _2806;
            float _3101 = _3098 * _2807;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2969 < ((_2967 >> 12u) & 15u))
            {
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3233 = _2952;
                float _3234 = _2954;
                float _3235 = _2956;
                float _3236 = _2958;
                float _3237 = _2960;
                float _3238 = _2962;
                uint _3239 = _2969;
                uint _3248;
                bool _3249;
                for (;;)
                {
                    _3248 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                    _3249 = _3248 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3249)
                    {
                        frontier_phi_77_pred = _3238;
                        frontier_phi_77_pred_1 = _3237;
                        frontier_phi_77_pred_2 = _3236;
                        frontier_phi_77_pred_3 = _3235;
                        frontier_phi_77_pred_4 = _3234;
                        frontier_phi_77_pred_5 = _3233;
                    }
                    else
                    {
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        uint _3461 = _3248;
                        uint _3462;
                        vec4 _3487;
                        float _3488;
                        vec4 _3503;
                        vec3 _3515;
                        vec4 _3530;
                        vec4 _3545;
                        float _3591;
                        bool _3592;
                        for (;;)
                        {
                            uint _3472 = ((_3239 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3461));
                            _3462 = (_3461 + 4294967295u) & _3461;
                            uint _3474 = _3472 * 40u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3488 = _3487.w;
                            uint _3490 = (_3472 * 40u) + 4u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3472 * 40u) + 8u;
                            _3515 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x));
                            uint _3517 = (_3472 * 40u) + 16u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3472 * 40u) + 20u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3472 * 40u) + 24u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3566 = (_3472 * 40u) + 28u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3591 = fma(_2807, _3579.z, fma(_2806, _3579.y, _3579.x * _2805)) + _3579.w;
                            _3592 = !((fma(_2807, _3560.z, fma(_2806, _3560.y, _3560.x * _2805)) + _3560.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3592)
                            {
                                float _3619 = _3487.x - _2805;
                                float _3620 = _3487.y - _2806;
                                float _3621 = _3487.z - _2807;
                                float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                                float _3625 = inversesqrt(_3622);
                                float _3626 = _3625 * _3619;
                                float _3627 = _3625 * _3620;
                                float _3628 = _3625 * _3621;
                                float _3632 = 1.0 - (_3622 / (_3488 * _3488));
                                float _4824 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3637 = sqrt(_3622) * _3503.w;
                                float _3639 = 1.39999997615814208984375 / (_3637 + 1.39999997615814208984375);
                                float _3640 = _3639 * _3639;
                                float _3643 = ((1.0 - _3640) * dot(vec3(_3626, _3627, _3628), vec3(_1042, _1045, _1048))) + _3640;
                                float _3646 = _3637 * _3637;
                                float _3650 = (fma(_2807, _3530.z, fma(_2806, _3530.y, _3530.x * _2805)) + _3530.w) / _3591;
                                float _3651 = (fma(_2807, _3545.z, fma(_2806, _3545.y, _3545.x * _2805)) + _3545.w) / _3591;
                                float _3655 = 1.0 - dot(vec2(_3650, _3651), vec2(_3650, _3651));
                                float _4840 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3657 = _3656 * (((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3633) / ((_3646 * 0.699999988079071044921875) + 1.0));
                                float _3669 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                                float _3670 = 1.0 - _1117;
                                float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                                float _3678 = _3677 * _3677;
                                float _3679 = _3678 * _3678;
                                float _3680 = _3626 - _3099;
                                float _3681 = _3627 - _3100;
                                float _3682 = _3628 - _3101;
                                float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                                float _3690 = dot(vec3(_1042, _1045, _1048), vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101));
                                float _4851 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3694 = dot(vec3(_1042, _1045, _1048), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                                float _4862 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                                float _3702 = _3639 * _3678;
                                float _3703 = _3702 * _3702;
                                float _3709 = ((1.0 - _3703) * dot(vec3(_1042, _1045, _1048), vec3(_3626, _3627, _3628))) + _3703;
                                float _4873 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3711 = 1.0 - _3678;
                                float _3721 = (0.5 / (((_3710 * ((_3693 * _3711) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3678) * _3693))) * _3710;
                                float _4884 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3731 = (_3656 * _3633) * (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3701 * _3701) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3657 * _3503.y;
                                frontier_phi_83_pred_1 = _3657 * _3503.x;
                                frontier_phi_83_pred_2 = _3731 * _3515.z;
                                frontier_phi_83_pred_3 = _3731 * _3515.y;
                                frontier_phi_83_pred_4 = _3731 * _3515.x;
                                frontier_phi_83_pred_5 = _3657 * _3503.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3739 = frontier_phi_83_pred;
                            _3738 = frontier_phi_83_pred_1;
                            _3737 = frontier_phi_83_pred_2;
                            _3736 = frontier_phi_83_pred_3;
                            _3735 = frontier_phi_83_pred_4;
                            _3740 = frontier_phi_83_pred_5;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            if (_3462 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3462;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3447;
                        frontier_phi_77_pred_1 = _3446;
                        frontier_phi_77_pred_2 = _3445;
                        frontier_phi_77_pred_3 = _3444;
                        frontier_phi_77_pred_4 = _3443;
                        frontier_phi_77_pred_5 = _3442;
                    }
                    _3084 = frontier_phi_77_pred;
                    _3082 = frontier_phi_77_pred_1;
                    _3080 = frontier_phi_77_pred_2;
                    _3078 = frontier_phi_77_pred_3;
                    _3076 = frontier_phi_77_pred_4;
                    _3074 = frontier_phi_77_pred_5;
                    uint _3240 = _3239 + 1u;
                    if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3233 = _3074;
                        _3234 = _3076;
                        _3235 = _3078;
                        _3236 = _3080;
                        _3237 = _3082;
                        _3238 = _3084;
                        _3239 = _3240;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3078;
                frontier_phi_58_59_ladder_1 = _3084;
                frontier_phi_58_59_ladder_2 = _3082;
                frontier_phi_58_59_ladder_3 = _3080;
                frontier_phi_58_59_ladder_4 = _3076;
                frontier_phi_58_59_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_58_59_ladder = _2956;
                frontier_phi_58_59_ladder_1 = _2962;
                frontier_phi_58_59_ladder_2 = _2960;
                frontier_phi_58_59_ladder_3 = _2958;
                frontier_phi_58_59_ladder_4 = _2954;
                frontier_phi_58_59_ladder_5 = _2952;
            }
            _3073 = frontier_phi_58_59_ladder_5;
            _3075 = frontier_phi_58_59_ladder_4;
            _3077 = frontier_phi_58_59_ladder;
            _3079 = frontier_phi_58_59_ladder_3;
            _3081 = frontier_phi_58_59_ladder_2;
            _3083 = frontier_phi_58_59_ladder_1;
        }
        float _3088 = isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0));
        _2864 = (_3088 * _3079) + _2300;
        _2866 = (_3088 * _3081) + _2302;
        _2868 = (_3088 * _3083) + _2304;
        _2870 = ((_3073 * _1085) * _3088) + _2645;
        _2872 = ((_3075 * _1087) * _3088) + _2647;
        _2874 = ((_3077 * _1088) * _3088) + _2649;
    }
    else
    {
        _2864 = _2300;
        _2866 = _2302;
        _2868 = _2304;
        _2870 = _2645;
        _2872 = _2647;
        _2874 = _2649;
    }
    float _4900 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _4911 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4922 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _2891 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2864 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1101))) + ((_2870 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2866 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1101))) + ((_2872 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2893 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2868 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1101))) + ((_2874 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    uint _2894 = _289 + 6u;
    float _2902 = _1023 / cbSceneParam._m0[86u].x;
    float _2903 = _1024 / cbSceneParam._m0[86u].y;
    vec4 _2917 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2919 = _2917.x;
    float _2920 = _2917.y;
    float _2921 = _2917.z;
    float _2922 = _2917.w;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _2977 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _2978 = _2977 / _946;
        float _2989 = _2978 * _996;
        float _2990 = _997 * _2978;
        float _2991 = (-0.0) - _2990;
        float _2993 = _2978 * _998;
        float _2995 = (cbSceneParam._m0[77u].w * _2991) / _2977;
        float _2996 = _2995 + cbSceneParam._m0[79u].w;
        float _2997 = cbSceneParam._m0[79u].w - _2990;
        float _3003 = sqrt(((_2989 * _2989) + (_2990 * _2990)) + (_2993 * _2993));
        float _3006 = (1.0 - (cbSceneParam._m0[77u].w / _2977)) * _3003;
        float _3011 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3013 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3190;
        if (abs((_2991 - _2995) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3190 = ((((_2996 > 0.0) ? exp2(_3011 * _2996) : (2.0 - exp2(_3013 * _2996))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3006;
        }
        else
        {
            float _3134 = 1.0 / cbSceneParam._m0[80u].x;
            float _3135 = isnan(_2997) ? _2996 : (isnan(_2996) ? _2997 : max(_2996, _2997));
            float _3136 = isnan(_2997) ? _2996 : (isnan(_2996) ? _2997 : min(_2996, _2997));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            _3190 = ((abs(_3003 / _2991) * cbSceneParam._m0[80u].y) * ((((_3145 - _3146) * 2.0) - ((exp2(_3011 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0)))) - exp2(_3011 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))))) * _3134)) - ((exp2(_3013 * _3145) - exp2(_3013 * _3146)) * _3134))) + (_3006 * cbSceneParam._m0[80u].z);
        }
        vec4 _3192 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, 1.0), 0.0);
        float _3201 = exp2((_3190 * (-1.44269502162933349609375)) * (1.0 - _3192.w));
        float _3202 = log2(_3201);
        float _3218 = log2(_2922);
        _3015 = (exp2(_3218 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].x)) * _3192.x) / cbSceneParam._m0[78u].x)) + _2919;
        _3017 = (exp2(_3218 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].y)) * _3192.y) / cbSceneParam._m0[78u].y)) + _2920;
        _3019 = (exp2(_3218 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].z)) * _3192.z) / cbSceneParam._m0[78u].z)) + _2921;
        _3021 = _3201 * _2922;
    }
    else
    {
        _3015 = _2919;
        _3017 = _2920;
        _3019 = _2921;
        _3021 = _2922;
    }
    bool _3228;
    vec4 _3031;
    vec4 _3053;
    float _3055;
    float _3059;
    float _3060;
    float _3061;
    float _3062;
    bool _3072;
    for (;;)
    {
        _3031 = cbMatDynParam._m0[0u];
        float _3033 = roundEven(_3031.y);
        bool _3034 = _3033 == 3.0;
        float _3035 = log2(_3021);
        float _3042 = exp2(_3035 * cbSceneParam._m0[78u].x) * _2891;
        float _3043 = exp2(_3035 * cbSceneParam._m0[78u].y) * _2892;
        float _3044 = exp2(_3035 * cbSceneParam._m0[78u].z) * _2893;
        float _3051 = _1012 + (-0.5);
        _3053 = cbMtdParam._m0[1u];
        _3055 = _3053.y * _3051;
        float _3058 = (_3033 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3059 = _3058 * (_3034 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3015)));
        _3060 = _3058 * (_3034 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3017)));
        _3061 = _3058 * (_3034 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3019)));
        _3062 = _3051 * 0.999000012874603271484375;
        _3072 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3072)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3062) < 0.5)
            {
                _3228 = true;
                break;
            }
        }
        uint _3169 = _1061 + uint(_3031.w);
        if ((cbInstanceData._m0[_3169].w < 1.0) && ((cbInstanceData._m0[_3169].w + _3062) < 0.5))
        {
            _3228 = true;
            break;
        }
        if ((_3055 + 1.0) < _3053.x)
        {
            _3228 = true;
            break;
        }
        _3228 = false;
        break;
    }
    float _3433;
    if (_3228)
    {
        discard_state = true;
        _3433 = 0.0;
    }
    else
    {
        _3433 = cbInstanceData._m0[_2894].w;
    }
    SV_Target.x = _3059;
    SV_Target.y = _3060;
    SV_Target.z = _3061;
    SV_Target.w = _3433;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2894].w;
    discard_exit();
}


