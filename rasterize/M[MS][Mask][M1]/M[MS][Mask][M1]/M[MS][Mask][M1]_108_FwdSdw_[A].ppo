#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1593;
float _4255;
float _4256;
float _4257;
float _4258;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4267 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4278 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4289 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4300 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[23u].w) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4311 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _548 = (_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475;
    float _549 = (_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476;
    float _550 = (_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[23u].w) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4322 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _693 = _691.x;
    float _694 = _691.y;
    float _695 = _691.z;
    float _702 = ((_674.x - _693) * _468) + _693;
    float _703 = ((_674.y - _694) * _468) + _694;
    float _704 = ((_674.z - _695) * _468) + _695;
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _727 = ((_716.x - _702) * _541) + _702;
    float _728 = ((_716.y - _703) * _541) + _703;
    float _729 = ((_716.z - _704) * _541) + _704;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _754 = ((_741.z - _729) * _611) + _729;
    float _757 = ((((_741.x - _727) * _611) + _727) * 2.0) + (-1.0);
    float _758 = ((((_741.y - _728) * _611) + _728) * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _4333 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _764 = sqrt(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))));
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _796 = (_757 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_651.x * 2.0) + (-1.0)))) + (((_784.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _797 = (_758 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_651.y * 2.0) + (-1.0)))) + (((_784.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _811 = _809.x;
    float _812 = 1.0 - _811;
    float _840 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_811 - _812) * cbMtdParam._m0[24u].w) + _812) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4344 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _849 = ((((cbMtdParam._m0[10u].x - _637) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _841) + _637;
    float _850 = ((((cbMtdParam._m0[10u].y - _638) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _841) + _638;
    float _851 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _639)) * _841) + _639;
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _879 = _877.x;
    float _897 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _879) * _468) + _879;
    float _915 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _897) * _541) + _897;
    float _932 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _915) * _611) + _915;
    float _936 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _932) * cbMtdParam._m0[19u].z) + _932;
    float _938 = _936 - (_936 * _841);
    float _943 = (((_651.z - _754) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _754;
    float _947 = ((_784.z - _943) * cbMtdParam._m0[19u].w) + _943;
    float _951 = ((cbMtdParam._m0[23u].x - _947) * _841) + _947;
    vec4 _972 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _978 = (_972.x * 2.0) + (-1.0);
    float _979 = (_972.y * 2.0) + (-1.0);
    float _980 = dot(vec2(_978, _979), vec2(_978, _979));
    float _4355 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _996 = (_841 * (((cbMtdParam._m0[22u].z * _796) - _796) + _978)) + _796;
    float _997 = (_841 * (((cbMtdParam._m0[22u].z * _797) - _797) + _979)) + _797;
    float _998 = (_841 * (sqrt(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) - _764)) + _764;
    float _1000 = cbMtdParam._m0[22u].x + _784.w;
    float _1003 = fma(_998, _267 * NORMAL.x, fma(_997, _274 * TANGENT.x, (_260 * _252) * _996));
    float _1006 = fma(_998, _267 * NORMAL.y, fma(_997, _274 * TANGENT.y, (_260 * _253) * _996));
    float _1009 = fma(_998, _267 * NORMAL.z, fma(_997, _274 * TANGENT.z, (_260 * _254) * _996));
    float _1013 = inversesqrt(dot(vec3(_1003, _1006, _1009), vec3(_1003, _1006, _1009)));
    float _1014 = _1013 * _1003;
    float _1015 = _1013 * _1006;
    float _1016 = _1013 * _1009;
    float _4366 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _1017 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _4377 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4388 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4399 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4410 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4421 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1022 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _1036 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1086 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1076);
    float _1087 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1076);
    float _1088 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1076);
    float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
    float _1093 = _1086 * _1092;
    float _1094 = _1087 * _1092;
    float _1095 = _1088 * _1092;
    vec4 _1100 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1102 = _1100.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1274 = sqrt(((_1086 * _1086) + (_1087 * _1087)) + (_1088 * _1088));
        float _1280 = (cbMatDynParam._m0[5u].x * _1274) + cbMatDynParam._m0[5u].y;
        float _4432 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1285 = (cbMatDynParam._m0[5u].z * _1274) + cbMatDynParam._m0[5u].w;
        float _4443 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) - _1281)) + _1281) < ((_1102 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1113 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1114 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1132 = fma(_1016, cbSceneParam._m0[5u].z, fma(_1015, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1014));
    float _1135 = fma(_1016, cbSceneParam._m0[6u].z, fma(_1015, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1014));
    float _1138 = fma(_1016, cbSceneParam._m0[7u].z, fma(_1015, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1014));
    uint _1151 = _299 + 9u;
    uint _1152 = _1151 + uint(cbMatDynParam._m0[0u].w);
    float _1158 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * cbInstanceData._m0[_1152].x;
    float _1159 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * cbInstanceData._m0[_1152].y;
    float _1160 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * cbInstanceData._m0[_1152].z;
    float _4454 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _4465 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _1164 = 1.0 - _1022;
    float _1165 = _1161 * _1164;
    float _1166 = _1162 * _1164;
    float _1167 = _1163 * _1164;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1022;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1022;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1022;
    float _1175 = _1172 + 0.039999999105930328369140625;
    float _1177 = _1173 + 0.039999999105930328369140625;
    float _1178 = _1174 + 0.039999999105930328369140625;
    vec4 _1187 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1113, cbSceneParam._m0[86u].y * _1114));
    float _1191 = ((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * TEXCOORD_5.w) * _1187.x;
    float _1192 = dot(vec3(_1014, _1015, _1016), vec3(_1093, _1094, _1095));
    float _1195 = _1192 * 2.0;
    float _1199 = (_1195 * _1014) - _1093;
    float _1200 = (_1195 * _1015) - _1094;
    float _1201 = (_1195 * _1016) - _1095;
    float _1205 = abs(dot(vec3(_1093, _1094, _1095), vec3(_1014, _1015, _1016)));
    float _4487 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _1207 = sqrt(_1017);
    float _1220 = exp2((_1207 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1207 * 3.0));
    float _1226 = (1.0 - _1220) * ((_1207 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1227 = _1220 * _1207;
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1592;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1317 = fma(_1263, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1255));
        float _1321 = fma(_1263, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1255));
        float _1325 = fma(_1263, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1255));
        float _1350 = _1255 + _1014;
        float _1351 = _1259 + _1015;
        float _1352 = _1263 + _1016;
        float _1362 = fma(_1352, cbModelParam._m0[26u].z, fma(_1351, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1350)) - _1317;
        float _1363 = fma(_1352, cbModelParam._m0[27u].z, fma(_1351, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1350)) - _1321;
        float _1364 = fma(_1352, cbModelParam._m0[28u].z, fma(_1351, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1350)) - _1325;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1317 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1321 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[34u].z) + ((((((_1325 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1420 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1386.x + (-0.5));
        float _1422 = _1420 * (_1386.y + (-0.5));
        float _1423 = _1420 * (_1386.z + (-0.5));
        float _1430 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1393.x + (-0.5));
        float _1432 = _1430 * (_1393.y + (-0.5));
        float _1433 = _1430 * (_1393.z + (-0.5));
        float _1440 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1400.x + (-0.5));
        float _1442 = _1440 * (_1400.y + (-0.5));
        float _1443 = _1440 * (_1400.z + (-0.5));
        float _1450 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1407.x + (-0.5));
        float _1452 = _1450 * (_1407.y + (-0.5));
        float _1453 = _1450 * (_1407.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1474 = (dot(vec3(_1014, _1015, _1016), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4513 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1484 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4524 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4535 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_1486 + 1.0))) + _1491) * _1454;
        float _1501 = _1422 * 0.5;
        float _1502 = _1432 * 0.5;
        float _1503 = _1442 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_1014, _1015, _1016), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4546 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4557 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4568 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_1528 + 1.0))) + _1533) * _1455;
        float _1543 = _1423 * 0.5;
        float _1544 = _1433 * 0.5;
        float _1545 = _1443 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_1014, _1015, _1016), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4579 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4590 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4601 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_1570 + 1.0))) + _1575) * _1456;
        _1592 = _1423;
        _1594 = _1422;
        _1595 = _1421;
        _1596 = _1433;
        _1597 = _1432;
        _1598 = _1431;
        _1599 = _1443;
        _1600 = _1442;
        _1601 = _1441;
        _1602 = _1456;
        _1603 = _1455;
        _1604 = _1454;
        _1605 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1607 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1593;
        _1594 = _1593;
        _1595 = _1593;
        _1596 = _1593;
        _1597 = _1593;
        _1598 = _1593;
        _1599 = _1593;
        _1600 = _1593;
        _1601 = _1593;
        _1602 = _1593;
        _1603 = _1593;
        _1604 = _1593;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1633 = fma(_1263, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255));
        float _1637 = fma(_1263, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255));
        float _1641 = fma(_1263, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255));
        float _1664 = _1255 + _1014;
        float _1665 = _1259 + _1015;
        float _1666 = _1263 + _1016;
        float _1676 = fma(_1666, cbModelParam._m0[30u].z, fma(_1665, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1664)) - _1633;
        float _1677 = fma(_1666, cbModelParam._m0[31u].z, fma(_1665, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1664)) - _1637;
        float _1678 = fma(_1666, cbModelParam._m0[32u].z, fma(_1665, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1664)) - _1641;
        float _1682 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
        float _1695 = ((_1682 * _1676) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1633 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1696 = ((_1682 * _1677) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1637 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1697 = ((_1682 * _1678) / cbModelParam._m0[35u].z) + ((((((_1641 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        float _1732 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1733 = _1732 * (_1699.x + (-0.5));
        float _1734 = _1732 * (_1699.y + (-0.5));
        float _1735 = _1732 * (_1699.z + (-0.5));
        float _1742 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1706.x + (-0.5));
        float _1744 = _1742 * (_1706.y + (-0.5));
        float _1745 = _1742 * (_1706.z + (-0.5));
        float _1752 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1713.x + (-0.5));
        float _1754 = _1752 * (_1713.y + (-0.5));
        float _1755 = _1752 * (_1713.z + (-0.5));
        float _1762 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1720.x + (-0.5));
        float _1764 = _1762 * (_1720.y + (-0.5));
        float _1765 = _1762 * (_1720.z + (-0.5));
        float _1766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = _1733 * 0.5;
        float _1770 = _1743 * 0.5;
        float _1771 = _1753 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_1014, _1015, _1016), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4642 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1766 + 9.9999997473787516355514526367188e-06);
        float _4653 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4664 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_1796 + 1.0))) + _1801) * _1766;
        float _1811 = _1734 * 0.5;
        float _1812 = _1744 * 0.5;
        float _1813 = _1754 * 0.5;
        float _1814 = dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813));
        float _1819 = (_1814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1814);
        float _1827 = (dot(vec3(_1014, _1015, _1016), vec3(_1819 * _1811, _1819 * _1812, _1819 * _1813)) + 1.0) * 0.5;
        float _4675 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1836 = sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813)) / (_1767 + 9.9999997473787516355514526367188e-06);
        float _4686 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _1838 = _1837 * 2.0;
        float _1842 = (1.0 - _1837) / (_1837 + 1.0);
        float _4697 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _1852 = ((((1.0 - _1843) * (_1838 + 2.0)) * exp2(log2(isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_1838 + 1.0))) + _1843) * _1767;
        float _1853 = _1735 * 0.5;
        float _1854 = _1745 * 0.5;
        float _1855 = _1755 * 0.5;
        float _1856 = dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855));
        float _1861 = (_1856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1856);
        float _1869 = (dot(vec3(_1014, _1015, _1016), vec3(_1861 * _1853, _1861 * _1854, _1861 * _1855)) + 1.0) * 0.5;
        float _4708 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1878 = sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _4719 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _1880 = _1879 * 2.0;
        float _1884 = (1.0 - _1879) / (_1879 + 1.0);
        float _4730 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _1894 = ((((1.0 - _1885) * (_1880 + 2.0)) * exp2(log2(isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_1880 + 1.0))) + _1885) * _1768;
        _1902 = _1735;
        _1903 = _1734;
        _1904 = _1733;
        _1905 = _1745;
        _1906 = _1744;
        _1907 = _1743;
        _1908 = _1755;
        _1909 = _1754;
        _1910 = _1753;
        _1911 = _1768;
        _1912 = _1767;
        _1913 = _1766;
        _1914 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
        _1915 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
        _1916 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)));
    }
    else
    {
        _1902 = _1593;
        _1903 = _1593;
        _1904 = _1593;
        _1905 = _1593;
        _1906 = _1593;
        _1907 = _1593;
        _1908 = _1593;
        _1909 = _1593;
        _1910 = _1593;
        _1911 = _1593;
        _1912 = _1593;
        _1913 = _1593;
        _1914 = 0.0;
        _1915 = 0.0;
        _1916 = 0.0;
    }
    float _1926 = (cbModelParam._m0[1u].x * (_1914 - _1605)) + _1605;
    float _1927 = (cbModelParam._m0[1u].x * (_1915 - _1606)) + _1606;
    float _1928 = (cbModelParam._m0[1u].x * (_1916 - _1607)) + _1607;
    float _1949 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1926));
    float _1970 = _1199 * 0.5;
    float _1971 = _1200 * 0.5;
    float _1972 = _1201 * 0.5;
    float _1973 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1904, _1907, _1910, _1913));
    float _1976 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1903, _1906, _1909, _1912));
    float _1979 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1902, _1905, _1908, _1911));
    float _2013;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1986 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1592, _1596, _1599, _1602));
        float _1990 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1594, _1597, _1600, _1603));
        float _1994 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1595, _1598, _1601, _1604));
        float _2001 = dot(vec4(cbModelParam._m0[39u]), vec4(_1970, _1971, _1972, 1.0));
        _2013 = dot(vec3(isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2001) ? 0.0 : (isnan(0.0) ? _2001 : max(0.0, _2001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2013 = 1.0;
    }
    float _2024;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2015 = dot(vec4(cbModelParam._m0[40u]), vec4(_1970, _1971, _1972, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2015) ? 0.0 : (isnan(0.0) ? _2015 : max(0.0, _2015))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2028 = (_2024 * cbModelParam._m0[1u].x) + (_2013 * (1.0 - cbModelParam._m0[1u].x));
    float _2038 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1017);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2038 : min(cbModelParam._m0[25u].z, _2038));
    float _2120;
    float _2122;
    float _2124;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2087 = fma(_1263, cbModelParam._m0[13u].z, fma(_1259, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1255)) + cbModelParam._m0[13u].w;
        float _2091 = fma(_1263, cbModelParam._m0[14u].z, fma(_1259, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1255)) + cbModelParam._m0[14u].w;
        float _2095 = fma(_1263, cbModelParam._m0[15u].z, fma(_1259, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1255)) + cbModelParam._m0[15u].w;
        float _2098 = fma(_1201, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199));
        float _2101 = fma(_1201, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199));
        float _2104 = fma(_1201, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199));
        float _2132;
        if (_2098 > 0.0)
        {
            _2132 = abs((1.0 - _2087) / _2098);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2087 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2132 = frontier_phi_17_15_ladder;
        }
        float _2304;
        if (_2101 > 0.0)
        {
            _2304 = abs((1.0 - _2091) / _2101);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2091 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2304 = frontier_phi_26_22_ladder;
        }
        float _2599;
        if (_2104 > 0.0)
        {
            _2599 = abs((1.0 - _2095) / _2104);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2095 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2599 = frontier_phi_38_33_ladder;
        }
        float _2601 = isnan(_2304) ? _2132 : (isnan(_2132) ? _2304 : min(_2132, _2304));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2098) + _2087;
        float _2607 = (_2602 * _2101) + _2091;
        float _2608 = (_2602 * _2104) + _2095;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2039);
            frontier_phi_16_38_ladder = _2753.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2753.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2753.x * cbModelParam._m0[1u].y;
        }
        _2120 = frontier_phi_16_38_ladder_2;
        _2122 = frontier_phi_16_38_ladder_1;
        _2124 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1199, _1200, _1201), _2039);
        _2120 = _2108.x * cbModelParam._m0[1u].y;
        _2122 = _2108.y * cbModelParam._m0[1u].y;
        _2124 = _2108.z * cbModelParam._m0[1u].y;
    }
    float _2128 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1017);
    float _2129 = isnan(_2128) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2128 : min(cbModelParam._m0[25u].w, _2128));
    float _2219;
    float _2221;
    float _2223;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2183 = fma(_1263, cbModelParam._m0[21u].z, fma(_1259, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1255)) + cbModelParam._m0[21u].w;
        float _2187 = fma(_1263, cbModelParam._m0[22u].z, fma(_1259, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1255)) + cbModelParam._m0[22u].w;
        float _2191 = fma(_1263, cbModelParam._m0[23u].z, fma(_1259, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1255)) + cbModelParam._m0[23u].w;
        float _2194 = fma(_1201, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199));
        float _2197 = fma(_1201, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199));
        float _2200 = fma(_1201, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199));
        float _2309;
        if (_2194 > 0.0)
        {
            _2309 = abs((1.0 - _2183) / _2194);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2194 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2183 + 1.0) / _2194);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2309 = frontier_phi_28_24_ladder;
        }
        float _2626;
        if (_2197 > 0.0)
        {
            _2626 = abs((1.0 - _2187) / _2197);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2187 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2626 = frontier_phi_40_35_ladder;
        }
        float _2964;
        if (_2200 > 0.0)
        {
            _2964 = abs((1.0 - _2191) / _2200);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2191 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2964 = frontier_phi_50_47_ladder;
        }
        float _2966 = isnan(_2626) ? _2309 : (isnan(_2309) ? _2626 : min(_2309, _2626));
        float _2967 = isnan(_2964) ? _2966 : (isnan(_2966) ? _2964 : min(_2966, _2964));
        float _2971 = (_2967 * _2194) + _2183;
        float _2972 = (_2967 * _2197) + _2187;
        float _2973 = (_2967 * _2200) + _2191;
        float _2974 = _2967 * 9.9999997473787516355514526367188e-05;
        float _2975 = (-1.0) - _2974;
        float _2977 = _2974 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2973 > _2977) || ((_2973 < _2975) || ((_2972 > _2977) || ((_2972 < _2975) || ((_2971 < _2975) || (_2971 > _2977))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2973, cbModelParam._m0[17u].z, fma(_2972, cbModelParam._m0[17u].y, _2971 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2973, cbModelParam._m0[18u].z, fma(_2972, cbModelParam._m0[18u].y, _2971 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2973, cbModelParam._m0[19u].z, fma(_2972, cbModelParam._m0[19u].y, _2971 * cbModelParam._m0[19u].x))), _2129);
            frontier_phi_25_50_ladder = _3095.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3095.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3095.x * cbModelParam._m0[1u].z;
        }
        _2219 = frontier_phi_25_50_ladder_2;
        _2221 = frontier_phi_25_50_ladder_1;
        _2223 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2203 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1199, _1200, _1201), _2129);
        _2219 = _2203.x * cbModelParam._m0[1u].z;
        _2221 = _2203.y * cbModelParam._m0[1u].z;
        _2223 = _2203.z * cbModelParam._m0[1u].z;
    }
    float _2236 = (((_1226 * _1175) + _1227) * _1191) * ((cbModelParam._m0[1u].w * (_2219 - _2120)) + _2120);
    float _2238 = (((_1226 * _1177) + _1227) * _1191) * ((cbModelParam._m0[1u].w * (_2221 - _2122)) + _2122);
    float _2240 = (((_1226 * _1178) + _1227) * _1191) * ((cbModelParam._m0[1u].w * (_2223 - _2124)) + _2124);
    float _2243 = fma(_2240, cbSceneParam._m0[89u].z, fma(_2238, cbSceneParam._m0[89u].y, _2236 * cbSceneParam._m0[89u].x));
    float _2246 = fma(_2240, cbSceneParam._m0[90u].z, fma(_2238, cbSceneParam._m0[90u].y, _2236 * cbSceneParam._m0[90u].x));
    float _2249 = fma(_2240, cbSceneParam._m0[91u].z, fma(_2238, cbSceneParam._m0[91u].y, _2236 * cbSceneParam._m0[91u].x));
    float _2283 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2287 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2291 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2295 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2296 = _2283 / _2295;
    float _2297 = _2287 / _2295;
    float _2298 = _2291 / _2295;
    float _2445;
    float _2446;
    float _2447;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2325 = ((uint(_2298 > cbSceneParam._m0[59u].y) + uint(_2298 > cbSceneParam._m0[59u].x)) + uint(_2298 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2326 = _2325 + 43u;
        uint _2334 = _2325 + 44u;
        uint _2342 = _2325 + 45u;
        uint _2350 = _2325 + 46u;
        float _2361 = fma(_2295, cbSceneParam._m0[_2326].w, fma(_2291, cbSceneParam._m0[_2326].z, fma(_2287, cbSceneParam._m0[_2326].y, _2283 * cbSceneParam._m0[_2326].x)));
        float _2365 = fma(_2295, cbSceneParam._m0[_2334].w, fma(_2291, cbSceneParam._m0[_2334].z, fma(_2287, cbSceneParam._m0[_2334].y, _2283 * cbSceneParam._m0[_2334].x)));
        float _2373 = fma(_2295, cbSceneParam._m0[_2350].w, fma(_2291, cbSceneParam._m0[_2350].z, fma(_2287, cbSceneParam._m0[_2350].y, _2283 * cbSceneParam._m0[_2350].x)));
        float _2378 = cbSceneParam._m0[33u].z * _2373;
        float _2380 = cbSceneParam._m0[33u].w * _2373;
        float _2383 = fma(_2295, cbSceneParam._m0[_2342].w, fma(_2291, cbSceneParam._m0[_2342].z, fma(_2287, cbSceneParam._m0[_2342].y, _2283 * cbSceneParam._m0[_2342].x))) / _2373;
        float _2431 = (cbSceneParam._m0[33u].x - sqrt(((_2297 * _2297) + (_2296 * _2296)) + (_2298 * _2298))) * cbSceneParam._m0[33u].y;
        float _4856 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2438 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2378 + _2361) / _2373, (_2380 + _2365) / _2373), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2380 + _2361) / _2373, (_2365 - _2378) / _2373), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2361 - _2378) / _2373, (_2365 - _2380) / _2373), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2361 - _2380) / _2373, (_2378 + _2365) / _2373), _2383), 0.0)).x), vec4(0.25)));
        _2445 = 1.0 - (_2438 * cbSceneParam._m0[34u].x);
        _2446 = 1.0 - (_2438 * cbSceneParam._m0[34u].y);
        _2447 = 1.0 - (_2438 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2445 = 1.0;
        _2446 = 1.0;
        _2447 = 1.0;
    }
    float _2511;
    float _2513;
    float _2515;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2499 = fma(_2295, cbSceneParam._m0[63u].w, fma(_2291, cbSceneParam._m0[63u].z, fma(_2287, cbSceneParam._m0[63u].y, _2283 * cbSceneParam._m0[63u].x)));
        float _2500 = fma(_2295, cbSceneParam._m0[60u].w, fma(_2291, cbSceneParam._m0[60u].z, fma(_2287, cbSceneParam._m0[60u].y, _2283 * cbSceneParam._m0[60u].x))) / _2499;
        float _2501 = fma(_2295, cbSceneParam._m0[61u].w, fma(_2291, cbSceneParam._m0[61u].z, fma(_2287, cbSceneParam._m0[61u].y, _2283 * cbSceneParam._m0[61u].x))) / _2499;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2500 >= cbSceneParam._m0[64u].x) && (_2501 >= cbSceneParam._m0[64u].y)) && (_2500 <= cbSceneParam._m0[64u].z)) && (_2501 <= cbSceneParam._m0[64u].w))
        {
            float _2639 = fma(_2295, cbSceneParam._m0[62u].w, fma(_2291, cbSceneParam._m0[62u].z, fma(_2287, cbSceneParam._m0[62u].y, _2283 * cbSceneParam._m0[62u].x))) / _2499;
            float _2643 = isnan(cbSceneParam._m0[41u].w) ? _2639 : (isnan(_2639) ? cbSceneParam._m0[41u].w : max(_2639, cbSceneParam._m0[41u].w));
            float _2686 = (cbSceneParam._m0[33u].x - sqrt(((_2297 * _2297) + (_2296 * _2296)) + (_2298 * _2298))) * cbSceneParam._m0[33u].y;
            float _4872 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
            float _2693 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2500, cbSceneParam._m0[33u].w + _2501), _2643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2500, _2501 - cbSceneParam._m0[33u].z), _2643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2500 - cbSceneParam._m0[33u].z, _2501 - cbSceneParam._m0[33u].w), _2643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2500 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2501), _2643), 0.0)).x), vec4(0.25)));
            float _2697 = 1.0 - (_2693 * cbSceneParam._m0[34u].x);
            float _2698 = 1.0 - (_2693 * cbSceneParam._m0[34u].y);
            float _2699 = 1.0 - (_2693 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2699) ? _2447 : (isnan(_2447) ? _2699 : min(_2447, _2699));
            frontier_phi_37_36_ladder_1 = isnan(_2698) ? _2446 : (isnan(_2446) ? _2698 : min(_2446, _2698));
            frontier_phi_37_36_ladder_2 = isnan(_2697) ? _2445 : (isnan(_2445) ? _2697 : min(_2445, _2697));
        }
        else
        {
            frontier_phi_37_36_ladder = _2447;
            frontier_phi_37_36_ladder_1 = _2446;
            frontier_phi_37_36_ladder_2 = _2445;
        }
        _2511 = frontier_phi_37_36_ladder_2;
        _2513 = frontier_phi_37_36_ladder_1;
        _2515 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2511 = _2445;
        _2513 = _2446;
        _2515 = _2447;
    }
    uvec4 _2520 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2522 = _2520.x * 14u;
    uint _2523 = _2522 + 13u;
    float _2530 = _1191 + (-1.0);
    float _2535 = (cbLight._m0[_2523].x * _2530) + 1.0;
    float _2536 = (cbLight._m0[_2523].y * _2530) + 1.0;
    float _2537 = (cbLight._m0[_2523].z * _2530) + 1.0;
    float _2538 = (cbLight._m0[_2523].w * _2530) + 1.0;
    uint _2539 = _2522 + 5u;
    float _2545 = isnan(1.0) ? _2536 : (isnan(_2536) ? 1.0 : min(_2536, 1.0));
    uint _2549 = _2522 + 4u;
    float _2558 = isnan(1.0) ? _2535 : (isnan(_2535) ? 1.0 : min(_2535, 1.0));
    uint _2562 = _2522 | 1u;
    float _2573 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_1014, _1015, _1016));
    float _2576 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_1014, _1015, _1016));
    float _4908 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _4919 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2581 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * 0.3183098733425140380859375;
    float _2583 = (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * 0.3183098733425140380859375;
    float _2590 = ((cbLight._m0[_2539].x * _2545) * _2583) + (((cbLight._m0[_2549].x * _2511) * _2558) * _2581);
    float _2591 = ((_2545 * cbLight._m0[_2539].y) * _2583) + (((cbLight._m0[_2549].y * _2513) * _2558) * _2581);
    float _2592 = ((_2545 * cbLight._m0[_2539].z) * _2583) + (((cbLight._m0[_2549].z * _2515) * _2558) * _2581);
    uvec4 _2596 = floatBitsToUint(cbLight._m0[_2522 + 12u]);
    bool _2598 = _2596.x == 0u;
    float _2700;
    float _2702;
    float _2704;
    if (_2598)
    {
        _2700 = _2590;
        _2702 = _2591;
        _2704 = _2592;
    }
    else
    {
        uint _2708 = _2522 + 6u;
        float _2724 = (dot(vec3(cbLight._m0[_2522 + 2u].xyz), vec3(_1014, _1015, _1016)) * 0.5) + 0.5;
        float _2725 = _2724 * _2724;
        float _4930 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2726 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
        float _2727 = isnan(1.0) ? _2537 : (isnan(_2537) ? 1.0 : min(_2537, 1.0));
        _2700 = (((cbLight._m0[_2708].x * 0.3183098733425140380859375) * _2726) * _2727) + _2590;
        _2702 = (((cbLight._m0[_2708].y * 0.3183098733425140380859375) * _2726) * _2727) + _2591;
        _2704 = (((cbLight._m0[_2708].z * 0.3183098733425140380859375) * _2726) * _2727) + _2592;
    }
    bool _2707 = _2596.y == 0u;
    float _2762;
    float _2764;
    float _2766;
    if (_2707)
    {
        _2762 = _2700;
        _2764 = _2702;
        _2766 = _2704;
    }
    else
    {
        uint _2935 = _2522 + 7u;
        float _2951 = (dot(vec3(cbLight._m0[_2522 + 3u].xyz), vec3(_1014, _1015, _1016)) * 0.5) + 0.5;
        float _2952 = _2951 * _2951;
        float _4946 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2953 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2954 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
        _2762 = (((cbLight._m0[_2935].x * 0.3183098733425140380859375) * _2953) * _2954) + _2700;
        _2764 = (((cbLight._m0[_2935].y * 0.3183098733425140380859375) * _2953) * _2954) + _2702;
        _2766 = (((cbLight._m0[_2935].z * 0.3183098733425140380859375) * _2953) * _2954) + _2704;
    }
    uint _2769 = _2522 + 8u;
    float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _1017) * 0.949999988079071044921875);
    float _2783 = _2782 * _2782;
    float _2784 = cbLight._m0[_2522].x + _1093;
    float _2785 = cbLight._m0[_2522].y + _1094;
    float _2786 = cbLight._m0[_2522].z + _1095;
    float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
    float _2791 = _2790 * _2784;
    float _2792 = _2790 * _2785;
    float _2793 = _2790 * _2786;
    float _2794 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2522].xyz));
    float _4962 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
    float _4973 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _2798 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
    float _2799 = dot(vec3(_1014, _1015, _1016), vec3(_2791, _2792, _2793));
    float _4984 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2802 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
    float _2803 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2791, _2792, _2793));
    float _4995 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2807 = _2783 * _2783;
    float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
    float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) * 5.0);
    float _2820 = 0.959999978542327880859375 - _1172;
    float _2822 = 0.959999978542327880859375 - _1173;
    float _2823 = 0.959999978542327880859375 - _1174;
    float _2830 = 1.0 - _2783;
    float _2841 = (0.5 / (((_2798 * ((_2797 * _2830) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _2830) + _2783) * _2797))) * _2797;
    float _5006 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
    float _2843 = (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
    uint _2857 = _2522 + 9u;
    float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _1017) * 0.949999988079071044921875);
    float _2869 = _2868 * _2868;
    float _2870 = cbLight._m0[_2562].x + _1093;
    float _2871 = cbLight._m0[_2562].y + _1094;
    float _2872 = cbLight._m0[_2562].z + _1095;
    float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
    float _2877 = _2876 * _2870;
    float _2878 = _2876 * _2871;
    float _2879 = _2876 * _2872;
    float _2880 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2562].xyz));
    float _5017 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
    float _2883 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
    float _2884 = dot(vec3(_1014, _1015, _1016), vec3(_2877, _2878, _2879));
    float _5028 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
    float _2887 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
    float _2888 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2877, _2878, _2879));
    float _5039 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
    float _2892 = _2869 * _2869;
    float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
    float _2903 = exp2(log2(1.0 - (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0)))) * 5.0);
    float _2910 = 1.0 - _2869;
    float _2920 = (0.5 / (((_2798 * ((_2883 * _2910) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _2910) + _2869) * _2883))) * _2883;
    float _5050 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
    float _2922 = (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
    float _2932 = (((((_2903 * _2820) + _1175) * cbLight._m0[_2857].x) * _2922) * _2545) + ((((cbLight._m0[_2769].x * _2511) * ((_2819 * _2820) + _1175)) * _2843) * _2558);
    float _2933 = (((((_2903 * _2822) + _1177) * cbLight._m0[_2857].y) * _2922) * _2545) + ((((cbLight._m0[_2769].y * _2513) * ((_2819 * _2822) + _1177)) * _2843) * _2558);
    float _2934 = (((((_2903 * _2823) + _1178) * cbLight._m0[_2857].z) * _2922) * _2545) + ((((cbLight._m0[_2769].z * _2515) * ((_2819 * _2823) + _1178)) * _2843) * _2558);
    float _2990;
    float _2992;
    float _2994;
    if (_2598)
    {
        _2990 = _2932;
        _2992 = _2933;
        _2994 = _2934;
    }
    else
    {
        uint _2996 = _2522 + 2u;
        uint _3000 = _2522 + 10u;
        float _3014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2996].w)) * _1017) * 0.949999988079071044921875);
        float _3015 = _3014 * _3014;
        float _3016 = cbLight._m0[_2996].x + _1093;
        float _3017 = cbLight._m0[_2996].y + _1094;
        float _3018 = cbLight._m0[_2996].z + _1095;
        float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
        float _3023 = _3022 * _3016;
        float _3024 = _3022 * _3017;
        float _3025 = _3022 * _3018;
        float _3026 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2996].xyz));
        float _5061 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        float _3029 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
        float _3030 = dot(vec3(_1014, _1015, _1016), vec3(_3023, _3024, _3025));
        float _5072 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        float _3033 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
        float _3034 = dot(vec3(cbLight._m0[_2996].xyz), vec3(_3023, _3024, _3025));
        float _5083 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
        float _3038 = _3015 * _3015;
        float _3042 = ((_3033 * _3033) * (_3038 + (-1.0))) + 1.0;
        float _3049 = exp2(log2(1.0 - (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0)))) * 5.0);
        float _3056 = 1.0 - _3015;
        float _3066 = (0.5 / (((_2798 * ((_3029 * _3056) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _3056) + _3015) * _3029))) * _3029;
        float _5094 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
        float _3068 = (isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3038 / ((_3042 * _3042) * 3.141590118408203125));
        float _3069 = isnan(1.0) ? _2537 : (isnan(_2537) ? 1.0 : min(_2537, 1.0));
        _2990 = (((((_3049 * _2820) + _1175) * cbLight._m0[_3000].x) * _3068) * _3069) + _2932;
        _2992 = (((((_3049 * _2822) + _1177) * cbLight._m0[_3000].y) * _3068) * _3069) + _2933;
        _2994 = (((((_3049 * _2823) + _1178) * cbLight._m0[_3000].z) * _3068) * _3069) + _2934;
    }
    float _3100;
    float _3102;
    float _3104;
    if (_2707)
    {
        _3100 = _2990;
        _3102 = _2992;
        _3104 = _2994;
    }
    else
    {
        uint _3111 = _2522 + 3u;
        uint _3115 = _2522 + 11u;
        float _3129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3111].w)) * _1017) * 0.949999988079071044921875);
        float _3130 = _3129 * _3129;
        float _3131 = cbLight._m0[_3111].x + _1093;
        float _3132 = cbLight._m0[_3111].y + _1094;
        float _3133 = cbLight._m0[_3111].z + _1095;
        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
        float _3138 = _3137 * _3131;
        float _3139 = _3137 * _3132;
        float _3140 = _3137 * _3133;
        float _3141 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_3111].xyz));
        float _5110 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
        float _3144 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
        float _3145 = dot(vec3(_1014, _1015, _1016), vec3(_3138, _3139, _3140));
        float _5121 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
        float _3148 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
        float _3149 = dot(vec3(cbLight._m0[_3111].xyz), vec3(_3138, _3139, _3140));
        float _5132 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
        float _3153 = _3130 * _3130;
        float _3157 = ((_3148 * _3148) * (_3153 + (-1.0))) + 1.0;
        float _3164 = exp2(log2(1.0 - (isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0)))) * 5.0);
        float _3171 = 1.0 - _3130;
        float _3181 = (0.5 / (((_2798 * ((_3144 * _3171) + _3130)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _3171) + _3130) * _3144))) * _3144;
        float _5143 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
        float _3183 = (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0))) * (_3153 / ((_3157 * _3157) * 3.141590118408203125));
        float _3184 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
        _3100 = (((((_3164 * _2820) + _1175) * cbLight._m0[_3115].x) * _3183) * _3184) + _2990;
        _3102 = (((((_3164 * _2822) + _1177) * cbLight._m0[_3115].y) * _3183) * _3184) + _2992;
        _3104 = (((((_3164 * _2823) + _1178) * cbLight._m0[_3115].z) * _3183) * _3184) + _2994;
    }
    float _3250;
    float _3252;
    float _3254;
    float _3256;
    float _3258;
    float _3260;
    if (_2520.y == 0u)
    {
        uvec4 _3205 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3206 = _3205.x;
        uint _3217 = uint((float(_3205.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1114) / _3206))) + floor(float(uint(cbSceneParam._m0[85u].x * _1113) / _3206)));
        float _3227 = (log2(_2298 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3228 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
        uint _3231 = uint(isnan(14.0) ? _3228 : (isnan(_3228) ? 14.0 : min(_3228, 14.0)));
        uvec4 _3236 = texelFetch(g_lightClusterGridBuffer, int(((_3231 << 2u) + (_3217 << 6u)) >> 2u));
        uint _3237 = _3236.x;
        uint _3238 = _3205.z;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        if (((((1u << ((_3238 >> 4u) & 15u)) + 4294967295u) & _3237) == 0u) || ((_3238 & 240u) == 0u))
        {
            _3317 = 0.0;
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
            _3325 = 0.0;
            _3327 = 0.0;
        }
        else
        {
            float _3318;
            float _3320;
            float _3322;
            float _3324;
            float _3326;
            float _3328;
            float _3470 = 0.0;
            float _3471 = 0.0;
            float _3472 = 0.0;
            float _3473 = 0.0;
            float _3474 = 0.0;
            float _3475 = 0.0;
            uint _3476 = 0u;
            uint _3485;
            bool _3486;
            for (;;)
            {
                _3485 = texelFetch(g_lightClassification, int((((_3231 << 5u) + (_3217 << 9u)) + (_3476 << 2u)) >> 2u)).x;
                _3486 = _3485 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3486)
                {
                    frontier_phi_71_pred = _3475;
                    frontier_phi_71_pred_1 = _3474;
                    frontier_phi_71_pred_2 = _3473;
                    frontier_phi_71_pred_3 = _3472;
                    frontier_phi_71_pred_4 = _3471;
                    frontier_phi_71_pred_5 = _3470;
                }
                else
                {
                    float _3615;
                    float _3616;
                    float _3617;
                    float _3618;
                    float _3619;
                    float _3620;
                    uint _3621;
                    _3615 = _3470;
                    _3616 = _3471;
                    _3617 = _3472;
                    _3618 = _3473;
                    _3619 = _3474;
                    _3620 = _3475;
                    _3621 = _3485;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    for (;;)
                    {
                        uint _3625 = uint(findLSB(_3621)) + (_3476 << 5u);
                        uint _3622 = (_3621 + 4294967295u) & _3621;
                        uint _3627 = _3625 * 48u;
                        vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3627)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 3u)).x));
                        uint _3647 = (_3625 * 48u) + 4u;
                        vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3647)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 3u)).x));
                        uint _3666 = (_3625 * 48u) + 8u;
                        vec3 _3677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3666)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 2u)).x));
                        float _3681 = _3641.x - _2296;
                        float _3682 = _3641.y - _2297;
                        float _3683 = _3641.z - _2298;
                        float _3684 = dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683));
                        float _3687 = inversesqrt(_3684);
                        float _3688 = _3687 * _3681;
                        float _3689 = _3687 * _3682;
                        float _3690 = _3687 * _3683;
                        float _3691 = dot(vec3(_1132, _1135, _1138), vec3(_3688, _3689, _3690));
                        float _3696 = 1.0 - (_3684 * _3641.w);
                        float _5169 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3697 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                        float _3698 = sqrt(_3684) * _3660.w;
                        float _3701 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                        float _3702 = _3701 * _3701;
                        float _3705 = ((1.0 - _3702) * _3691) + _3702;
                        float _3708 = _3698 * _3698;
                        float _3712 = ((isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0))) * _3697) / ((_3708 * 0.699999988079071044921875) + 1.0);
                        float _3716 = (-0.0) - _2296;
                        float _3717 = (-0.0) - _2297;
                        float _3718 = (-0.0) - _2298;
                        float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                        float _3723 = _3722 * _3716;
                        float _3724 = _3722 * _3717;
                        float _3725 = _3722 * _3718;
                        float _3732 = exp2(log2(1.0 / ((_3708 * 3.5) + 5.0)) * 0.25);
                        float _3733 = 1.0 - _1207;
                        float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                        float _3741 = _3740 * _3740;
                        float _3742 = _3741 * _3741;
                        float _3743 = _3723 + _3688;
                        float _3744 = _3724 + _3689;
                        float _3745 = _3725 + _3690;
                        float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                        float _3753 = dot(vec3(_1132, _1135, _1138), vec3(_3723, _3724, _3725));
                        float _5185 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                        float _3756 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
                        float _3757 = dot(vec3(_1132, _1135, _1138), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                        float _5196 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                        float _3760 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
                        float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                        float _3765 = _3701 * _3741;
                        float _3766 = _3765 * _3765;
                        float _3769 = ((1.0 - _3766) * _3691) + _3766;
                        float _5207 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                        float _3770 = isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0));
                        float _3771 = 1.0 - _3741;
                        float _3781 = (0.5 / (((_3770 * ((_3756 * _3771) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3741) * _3756))) * _3770;
                        float _5218 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                        float _3792 = (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0)))) / ((_3764 * _3764) * ((_3708 * 2.1991131305694580078125) + 3.141590118408203125))) * _3697;
                        _3545 = (_3712 * _3660.x) + _3618;
                        _3546 = (_3712 * _3660.y) + _3619;
                        _3547 = (_3712 * _3660.z) + _3620;
                        _3542 = (_3792 * _3677.x) + _3615;
                        _3543 = (_3792 * _3677.y) + _3616;
                        _3544 = (_3792 * _3677.z) + _3617;
                        if (_3622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3615 = _3542;
                            _3616 = _3543;
                            _3617 = _3544;
                            _3618 = _3545;
                            _3619 = _3546;
                            _3620 = _3547;
                            _3621 = _3622;
                        }
                    }
                    frontier_phi_71_pred = _3547;
                    frontier_phi_71_pred_1 = _3546;
                    frontier_phi_71_pred_2 = _3545;
                    frontier_phi_71_pred_3 = _3544;
                    frontier_phi_71_pred_4 = _3543;
                    frontier_phi_71_pred_5 = _3542;
                }
                _3328 = frontier_phi_71_pred;
                _3326 = frontier_phi_71_pred_1;
                _3324 = frontier_phi_71_pred_2;
                _3322 = frontier_phi_71_pred_3;
                _3320 = frontier_phi_71_pred_4;
                _3318 = frontier_phi_71_pred_5;
                uint _3477 = _3476 + 1u;
                if (_3477 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3470 = _3318;
                    _3471 = _3320;
                    _3472 = _3322;
                    _3473 = _3324;
                    _3474 = _3326;
                    _3475 = _3328;
                    _3476 = _3477;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3317 = _3318;
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
            _3325 = _3326;
            _3327 = _3328;
        }
        uvec4 _3331 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3332 = _3331.z;
        uint _3334 = (_3332 >> 8u) & 15u;
        float _3438;
        float _3440;
        float _3442;
        float _3444;
        float _3446;
        float _3448;
        if (((4294967295u << _3334) & _3237) == 0u)
        {
            _3438 = _3317;
            _3440 = _3319;
            _3442 = _3321;
            _3444 = _3323;
            _3446 = _3325;
            _3448 = _3327;
        }
        else
        {
            float _3463 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
            float _3464 = _3463 * _2296;
            float _3465 = _3463 * _2297;
            float _3466 = _3463 * _2298;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3334 < ((_3332 >> 12u) & 15u))
            {
                float _3439;
                float _3441;
                float _3443;
                float _3445;
                float _3447;
                float _3449;
                float _3598 = _3317;
                float _3599 = _3319;
                float _3600 = _3321;
                float _3601 = _3323;
                float _3602 = _3325;
                float _3603 = _3327;
                uint _3604 = _3334;
                uint _3613;
                bool _3614;
                for (;;)
                {
                    _3613 = texelFetch(g_lightClassification, int((((_3231 << 5u) + (_3217 << 9u)) + (_3604 << 2u)) >> 2u)).x;
                    _3614 = _3613 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3614)
                    {
                        frontier_phi_82_pred = _3603;
                        frontier_phi_82_pred_1 = _3602;
                        frontier_phi_82_pred_2 = _3601;
                        frontier_phi_82_pred_3 = _3600;
                        frontier_phi_82_pred_4 = _3599;
                        frontier_phi_82_pred_5 = _3598;
                    }
                    else
                    {
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _4099;
                        float _4100;
                        float _4101;
                        float _4102;
                        float _4103;
                        float _4104;
                        float _3819 = _3598;
                        float _3820 = _3599;
                        float _3821 = _3600;
                        float _3822 = _3601;
                        float _3823 = _3602;
                        float _3824 = _3603;
                        uint _3825 = _3613;
                        uint _3826;
                        vec4 _3851;
                        float _3852;
                        vec4 _3867;
                        vec3 _3879;
                        vec4 _3894;
                        vec4 _3909;
                        float _3955;
                        bool _3956;
                        for (;;)
                        {
                            uint _3836 = ((_3604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3825));
                            _3826 = (_3825 + 4294967295u) & _3825;
                            uint _3838 = _3836 * 40u;
                            _3851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 3u)).x));
                            _3852 = _3851.w;
                            uint _3854 = (_3836 * 40u) + 4u;
                            _3867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 3u)).x));
                            uint _3869 = (_3836 * 40u) + 8u;
                            _3879 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 2u)).x));
                            uint _3881 = (_3836 * 40u) + 16u;
                            _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            uint _3896 = (_3836 * 40u) + 20u;
                            _3909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 3u)).x));
                            uint _3911 = (_3836 * 40u) + 24u;
                            vec4 _3924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 3u)).x));
                            uint _3930 = (_3836 * 40u) + 28u;
                            vec4 _3943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 3u)).x));
                            _3955 = fma(_2298, _3943.z, fma(_2297, _3943.y, _3943.x * _2296)) + _3943.w;
                            _3956 = !((fma(_2298, _3924.z, fma(_2297, _3924.y, _3924.x * _2296)) + _3924.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3956)
                            {
                                float _3983 = _3851.x - _2296;
                                float _3984 = _3851.y - _2297;
                                float _3985 = _3851.z - _2298;
                                float _3986 = dot(vec3(_3983, _3984, _3985), vec3(_3983, _3984, _3985));
                                float _3989 = inversesqrt(_3986);
                                float _3990 = _3989 * _3983;
                                float _3991 = _3989 * _3984;
                                float _3992 = _3989 * _3985;
                                float _3996 = 1.0 - (_3986 / (_3852 * _3852));
                                float _5229 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3997 = isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0));
                                float _4001 = sqrt(_3986) * _3867.w;
                                float _4003 = 1.39999997615814208984375 / (_4001 + 1.39999997615814208984375);
                                float _4004 = _4003 * _4003;
                                float _4007 = ((1.0 - _4004) * dot(vec3(_3990, _3991, _3992), vec3(_1132, _1135, _1138))) + _4004;
                                float _4010 = _4001 * _4001;
                                float _4014 = (fma(_2298, _3894.z, fma(_2297, _3894.y, _3894.x * _2296)) + _3894.w) / _3955;
                                float _4015 = (fma(_2298, _3909.z, fma(_2297, _3909.y, _3909.x * _2296)) + _3909.w) / _3955;
                                float _4019 = 1.0 - dot(vec2(_4014, _4015), vec2(_4014, _4015));
                                float _5245 = isnan(0.0) ? _4019 : (isnan(_4019) ? 0.0 : max(_4019, 0.0));
                                float _4020 = isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0));
                                float _4021 = _4020 * (((isnan(0.0) ? _4007 : (isnan(_4007) ? 0.0 : max(_4007, 0.0))) * _3997) / ((_4010 * 0.699999988079071044921875) + 1.0));
                                float _4033 = exp2(log2(1.0 / ((_4010 * 3.5) + 5.0)) * 0.25);
                                float _4034 = 1.0 - _1207;
                                float _4041 = sqrt(1.0 - ((1.0 - (_4034 * _4034)) * (1.0 - (_4033 * _4033))));
                                float _4042 = _4041 * _4041;
                                float _4043 = _4042 * _4042;
                                float _4044 = _3990 - _3464;
                                float _4045 = _3991 - _3465;
                                float _4046 = _3992 - _3466;
                                float _4050 = inversesqrt(dot(vec3(_4044, _4045, _4046), vec3(_4044, _4045, _4046)));
                                float _4054 = dot(vec3(_1132, _1135, _1138), vec3((-0.0) - _3464, (-0.0) - _3465, (-0.0) - _3466));
                                float _5256 = isnan(0.0) ? _4054 : (isnan(_4054) ? 0.0 : max(_4054, 0.0));
                                float _4057 = isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0));
                                float _4058 = dot(vec3(_1132, _1135, _1138), vec3(_4050 * _4044, _4050 * _4045, _4050 * _4046));
                                float _5267 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4061 = isnan(1.0) ? _5267 : (isnan(_5267) ? 1.0 : min(_5267, 1.0));
                                float _4065 = ((_4061 * _4061) * (_4043 + (-1.0))) + 1.0;
                                float _4066 = _4003 * _4042;
                                float _4067 = _4066 * _4066;
                                float _4073 = ((1.0 - _4067) * dot(vec3(_1132, _1135, _1138), vec3(_3990, _3991, _3992))) + _4067;
                                float _5278 = isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0));
                                float _4074 = isnan(1.0) ? _5278 : (isnan(_5278) ? 1.0 : min(_5278, 1.0));
                                float _4075 = 1.0 - _4042;
                                float _4085 = (0.5 / (((_4074 * ((_4057 * _4075) + _4042)) + 9.9999999392252902907785028219223e-09) + (((_4074 * _4075) + _4042) * _4057))) * _4074;
                                float _5289 = isnan(0.0) ? _4085 : (isnan(_4085) ? 0.0 : max(_4085, 0.0));
                                float _4095 = (_4020 * _3997) * (((_4043 * 3.1415927410125732421875) * (isnan(1.0) ? _5289 : (isnan(_5289) ? 1.0 : min(_5289, 1.0)))) / ((_4065 * _4065) * ((_4010 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4021 * _3867.z;
                                frontier_phi_88_pred_1 = _4021 * _3867.y;
                                frontier_phi_88_pred_2 = _4021 * _3867.x;
                                frontier_phi_88_pred_3 = _4095 * _3879.z;
                                frontier_phi_88_pred_4 = _4095 * _3879.y;
                                frontier_phi_88_pred_5 = _4095 * _3879.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4104 = frontier_phi_88_pred;
                            _4103 = frontier_phi_88_pred_1;
                            _4102 = frontier_phi_88_pred_2;
                            _4101 = frontier_phi_88_pred_3;
                            _4100 = frontier_phi_88_pred_4;
                            _4099 = frontier_phi_88_pred_5;
                            _3809 = _4102 + _3822;
                            _3810 = _4103 + _3823;
                            _3811 = _4104 + _3824;
                            _3806 = _4099 + _3819;
                            _3807 = _4100 + _3820;
                            _3808 = _4101 + _3821;
                            if (_3826 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3819 = _3806;
                                _3820 = _3807;
                                _3821 = _3808;
                                _3822 = _3809;
                                _3823 = _3810;
                                _3824 = _3811;
                                _3825 = _3826;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3811;
                        frontier_phi_82_pred_1 = _3810;
                        frontier_phi_82_pred_2 = _3809;
                        frontier_phi_82_pred_3 = _3808;
                        frontier_phi_82_pred_4 = _3807;
                        frontier_phi_82_pred_5 = _3806;
                    }
                    _3449 = frontier_phi_82_pred;
                    _3447 = frontier_phi_82_pred_1;
                    _3445 = frontier_phi_82_pred_2;
                    _3443 = frontier_phi_82_pred_3;
                    _3441 = frontier_phi_82_pred_4;
                    _3439 = frontier_phi_82_pred_5;
                    uint _3605 = _3604 + 1u;
                    if (_3605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3598 = _3439;
                        _3599 = _3441;
                        _3600 = _3443;
                        _3601 = _3445;
                        _3602 = _3447;
                        _3603 = _3449;
                        _3604 = _3605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3445;
                frontier_phi_63_64_ladder_1 = _3449;
                frontier_phi_63_64_ladder_2 = _3447;
                frontier_phi_63_64_ladder_3 = _3443;
                frontier_phi_63_64_ladder_4 = _3441;
                frontier_phi_63_64_ladder_5 = _3439;
            }
            else
            {
                frontier_phi_63_64_ladder = _3323;
                frontier_phi_63_64_ladder_1 = _3327;
                frontier_phi_63_64_ladder_2 = _3325;
                frontier_phi_63_64_ladder_3 = _3321;
                frontier_phi_63_64_ladder_4 = _3319;
                frontier_phi_63_64_ladder_5 = _3317;
            }
            _3438 = frontier_phi_63_64_ladder_5;
            _3440 = frontier_phi_63_64_ladder_4;
            _3442 = frontier_phi_63_64_ladder_3;
            _3444 = frontier_phi_63_64_ladder;
            _3446 = frontier_phi_63_64_ladder_2;
            _3448 = frontier_phi_63_64_ladder_1;
        }
        float _3453 = isnan(1.0) ? _1191 : (isnan(_1191) ? 1.0 : min(_1191, 1.0));
        _3250 = (_3453 * _3444) + _2762;
        _3252 = (_3453 * _3446) + _2764;
        _3254 = (_3453 * _3448) + _2766;
        _3256 = ((_3438 * _1175) * _3453) + _3100;
        _3258 = ((_3440 * _1177) * _3453) + _3102;
        _3260 = ((_3442 * _1178) * _3453) + _3104;
    }
    else
    {
        _3250 = _2762;
        _3252 = _2764;
        _3254 = _2766;
        _3256 = _3100;
        _3258 = _3102;
        _3260 = _3104;
    }
    float _5305 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _5316 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _5327 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _3277 = ((isnan(1.0) ? _5305 : (isnan(_5305) ? 1.0 : min(_5305, 1.0))) * (_3250 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1191))) + ((_3256 + ((isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) * _2028)) * cbPerFrame._m0[3u].x);
    float _3278 = ((isnan(1.0) ? _5316 : (isnan(_5316) ? 1.0 : min(_5316, 1.0))) * (_3252 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1191))) + ((_3258 + ((isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0))) * _2028)) * cbPerFrame._m0[3u].x);
    float _3279 = ((isnan(1.0) ? _5327 : (isnan(_5327) ? 1.0 : min(_5327, 1.0))) * (_3254 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1191))) + ((_3260 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2028)) * cbPerFrame._m0[3u].x);
    uint _3280 = _299 + 6u;
    float _3288 = _1113 / cbSceneParam._m0[86u].x;
    float _3289 = _1114 / cbSceneParam._m0[86u].y;
    vec4 _3303 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3288, _3289, (log2((isnan(cbSceneParam._m0[77u].w) ? _1036 : (isnan(_1036) ? cbSceneParam._m0[77u].w : min(_1036, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3305 = _3303.x;
    float _3306 = _3303.y;
    float _3307 = _3303.z;
    float _3308 = _3303.w;
    float _3380;
    float _3382;
    float _3384;
    float _3386;
    if (_1036 > cbSceneParam._m0[78u].w)
    {
        float _3342 = isnan(_1036) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1036 : min(cbSceneParam._m0[80u].w, _1036));
        float _3343 = _3342 / _1036;
        float _3354 = _3343 * _1086;
        float _3355 = _1087 * _3343;
        float _3356 = (-0.0) - _3355;
        float _3358 = _3343 * _1088;
        float _3360 = (cbSceneParam._m0[77u].w * _3356) / _3342;
        float _3361 = _3360 + cbSceneParam._m0[79u].w;
        float _3362 = cbSceneParam._m0[79u].w - _3355;
        float _3368 = sqrt(((_3354 * _3354) + (_3355 * _3355)) + (_3358 * _3358));
        float _3371 = (1.0 - (cbSceneParam._m0[77u].w / _3342)) * _3368;
        float _3376 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3378 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3555;
        if (abs((_3356 - _3360) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3555 = ((((_3361 > 0.0) ? exp2(_3376 * _3361) : (2.0 - exp2(_3378 * _3361))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3371;
        }
        else
        {
            float _3499 = 1.0 / cbSceneParam._m0[80u].x;
            float _3500 = isnan(_3362) ? _3361 : (isnan(_3361) ? _3362 : max(_3361, _3362));
            float _3501 = isnan(_3362) ? _3361 : (isnan(_3361) ? _3362 : min(_3361, _3362));
            float _3510 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : min(_3500, 0.0));
            float _3511 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : min(_3501, 0.0));
            _3555 = ((abs(_3368 / _3356) * cbSceneParam._m0[80u].y) * ((((_3510 - _3511) * 2.0) - ((exp2(_3376 * (isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0)))) - exp2(_3376 * (isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))))) * _3499)) - ((exp2(_3378 * _3510) - exp2(_3378 * _3511)) * _3499))) + (_3371 * cbSceneParam._m0[80u].z);
        }
        vec4 _3557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3288, _3289, 1.0), 0.0);
        float _3566 = exp2((_3555 * (-1.44269502162933349609375)) * (1.0 - _3557.w));
        float _3567 = log2(_3566);
        float _3583 = log2(_3308);
        _3380 = (exp2(_3583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3567 * cbSceneParam._m0[78u].x)) * _3557.x) / cbSceneParam._m0[78u].x)) + _3305;
        _3382 = (exp2(_3583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3567 * cbSceneParam._m0[78u].y)) * _3557.y) / cbSceneParam._m0[78u].y)) + _3306;
        _3384 = (exp2(_3583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3567 * cbSceneParam._m0[78u].z)) * _3557.z) / cbSceneParam._m0[78u].z)) + _3307;
        _3386 = _3566 * _3308;
    }
    else
    {
        _3380 = _3305;
        _3382 = _3306;
        _3384 = _3307;
        _3386 = _3308;
    }
    bool _3593;
    vec4 _3396;
    vec4 _3418;
    float _3420;
    float _3424;
    float _3425;
    float _3426;
    float _3427;
    bool _3437;
    for (;;)
    {
        _3396 = cbMatDynParam._m0[0u];
        float _3398 = roundEven(_3396.y);
        bool _3399 = _3398 == 3.0;
        float _3400 = log2(_3386);
        float _3407 = exp2(_3400 * cbSceneParam._m0[78u].x) * _3277;
        float _3408 = exp2(_3400 * cbSceneParam._m0[78u].y) * _3278;
        float _3409 = exp2(_3400 * cbSceneParam._m0[78u].z) * _3279;
        float _3416 = _1102 + (-0.5);
        _3418 = cbMtdParam._m0[1u];
        _3420 = _3418.y * _3416;
        float _3423 = (_3398 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3424 = _3423 * (_3399 ? _3407 : (_3407 + (cbSceneParam._m0[72u].w * _3380)));
        _3425 = _3423 * (_3399 ? _3408 : (_3408 + (cbSceneParam._m0[72u].w * _3382)));
        _3426 = _3423 * (_3399 ? _3409 : (_3409 + (cbSceneParam._m0[72u].w * _3384)));
        _3427 = _3416 * 0.999000012874603271484375;
        _3437 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3437)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3427) < 0.5)
            {
                _3593 = true;
                break;
            }
        }
        uint _3534 = _1151 + uint(_3396.w);
        if ((cbInstanceData._m0[_3534].w < 1.0) && ((cbInstanceData._m0[_3534].w + _3427) < 0.5))
        {
            _3593 = true;
            break;
        }
        if ((_3420 + 1.0) < _3418.x)
        {
            _3593 = true;
            break;
        }
        _3593 = false;
        break;
    }
    float _3797;
    if (_3593)
    {
        discard_state = true;
        _3797 = 0.0;
    }
    else
    {
        _3797 = cbInstanceData._m0[_3280].w;
    }
    SV_Target.x = _3424;
    SV_Target.y = _3425;
    SV_Target.z = _3426;
    SV_Target.w = _3797;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3280].w;
    discard_exit();
}


