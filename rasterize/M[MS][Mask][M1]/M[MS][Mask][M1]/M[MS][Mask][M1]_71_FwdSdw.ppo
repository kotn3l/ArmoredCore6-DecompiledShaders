#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1330;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _334.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[23u].w) + _384) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3939 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _409 = (_402 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _410 = (_402 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _411 = (_402 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _460 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _474 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _334.y) * 2.0) - ((((_450 - _460) * cbMtdParam._m0[23u].w) + _460) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _482 = (_475 * ((_428.x * cbMtdParam._m0[13u].x) - _409)) + _409;
    float _483 = (_475 * ((_428.y * cbMtdParam._m0[13u].y) - _410)) + _410;
    float _484 = (_475 * ((_428.z * cbMtdParam._m0[13u].z) - _411)) + _411;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    float _530 = ((_502.x - _521) * _402) + _521;
    float _531 = ((_502.y - _522) * _402) + _522;
    float _532 = ((_502.z - _523) * _402) + _523;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _557 = ((_544.z - _532) * _475) + _532;
    float _560 = ((((_544.x - _530) * _475) + _530) * 2.0) + (-1.0);
    float _562 = ((((_544.y - _531) * _475) + _531) * 2.0) + (-1.0);
    float _563 = dot(vec2(_560, _562), vec2(_560, _562));
    float _3961 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _594 = (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _560;
    float _595 = (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _562;
    float _598 = fma(_568, _234, fma(_595, _241, _594 * _227));
    float _601 = fma(_568, _235, fma(_595, _242, _594 * _228));
    float _604 = fma(_568, _236, fma(_595, _243, _594 * _229));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _637 = _635.x;
    float _638 = 1.0 - _637;
    float _647 = (cbMtdParam._m0[19u].x + dot(vec4(_608 * _598, _608 * _601, _608 * _604, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_637 - _638) * cbMtdParam._m0[24u].z) + _638) * cbMtdParam._m0[21u].z);
    float _3972 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _655 = (_648 * (cbMtdParam._m0[17u].x - _482)) + _482;
    float _656 = (_648 * (cbMtdParam._m0[17u].y - _483)) + _483;
    float _657 = (_648 * (cbMtdParam._m0[17u].z - _484)) + _484;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _685 = _683.x;
    float _703 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _685) * _402) + _685;
    float _720 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _703) * _475) + _703;
    float _724 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _720) * cbMtdParam._m0[19u].z) + _720;
    float _726 = _724 - (_724 * _648);
    float _730 = (cbMtdParam._m0[19u].w * (_582.z - _557)) + _557;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _750 = (_743.x * 2.0) + (-1.0);
    float _751 = (_743.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3983 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _760 = ((_743.z - _730) * _648) + _730;
    float _770 = ((sqrt(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) - _568) * _648) + _568;
    float _773 = (((_750 - _594) * _648) + _594) + (cbMtdParam._m0[21u].x * _594);
    float _774 = (((_751 - _595) * _648) + _595) + (cbMtdParam._m0[21u].x * _595);
    float _776 = cbMtdParam._m0[22u].x + _582.w;
    float _779 = fma(_770, _234, fma(_774, _241, _773 * _227));
    float _782 = fma(_770, _235, fma(_774, _242, _773 * _228));
    float _785 = fma(_770, _236, fma(_774, _243, _773 * _229));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3994 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _793 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4016 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4027 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4038 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4049 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _798 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _897 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _900 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _903 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _917 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_917].z;
    float _4060 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _929 = 1.0 - _798;
    float _930 = _926 * _929;
    float _931 = _927 * _929;
    float _932 = _928 * _929;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _798;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _798;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _798;
    float _940 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _956 = ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * TEXCOORD_5.w) * _952.x;
    float _957 = dot(vec3(_790, _791, _792), vec3(_870, _871, _872));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _790) - _870;
    float _965 = (_960 * _791) - _871;
    float _966 = (_960 * _792) - _872;
    float _970 = abs(dot(vec3(_870, _871, _872), vec3(_790, _791, _792)));
    float _4093 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_793);
    float _985 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _991 = (1.0 - _985) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _972;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1058 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1062 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1087 = _1020 + _790;
        float _1088 = _1024 + _791;
        float _1089 = _1028 + _792;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1054;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1058;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1062;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_790, _791, _792), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4141 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_790, _791, _792), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4174 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_790, _791, _792), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4207 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1372 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1376 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1399 = _1020 + _790;
        float _1400 = _1024 + _791;
        float _1401 = _1028 + _792;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_790, _791, _792), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4270 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_790, _791, _792), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4303 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_790, _791, _792), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4336 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1330;
        _1638 = _1330;
        _1639 = _1330;
        _1640 = _1330;
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1342)) + _1342;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1343)) + _1343;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1344)) + _1344;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _964 * 0.5;
    float _1706 = _965 * 0.5;
    float _1707 = _966 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1748;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1759;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1750 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1763 = (_1759 * cbModelParam._m0[1u].x) + (_1748 * (1.0 - cbModelParam._m0[1u].x));
    float _1773 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1773 : min(cbModelParam._m0[25u].z, _1773));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1822 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1826 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1830 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1833 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1836 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1839 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1867;
        if (_1833 > 0.0)
        {
            _1867 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1867 = frontier_phi_14_12_ladder;
        }
        float _2039;
        if (_1836 > 0.0)
        {
            _2039 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2039 = frontier_phi_23_19_ladder;
        }
        float _2334;
        if (_1839 > 0.0)
        {
            _2334 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2334 = frontier_phi_35_30_ladder;
        }
        float _2336 = isnan(_2039) ? _1867 : (isnan(_1867) ? _2039 : min(_1867, _2039));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1833) + _1822;
        float _2342 = (_2337 * _1836) + _1826;
        float _2343 = (_2337 * _1839) + _1830;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1774);
            frontier_phi_13_35_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1855 = frontier_phi_13_35_ladder_2;
        _1857 = frontier_phi_13_35_ladder_1;
        _1859 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1774);
        _1855 = _1843.x * cbModelParam._m0[1u].y;
        _1857 = _1843.y * cbModelParam._m0[1u].y;
        _1859 = _1843.z * cbModelParam._m0[1u].y;
    }
    float _1863 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1863 : min(cbModelParam._m0[25u].w, _1863));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1918 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1922 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1926 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1929 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1932 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1935 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2044;
        if (_1929 > 0.0)
        {
            _2044 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2044 = frontier_phi_25_21_ladder;
        }
        float _2361;
        if (_1932 > 0.0)
        {
            _2361 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2361 = frontier_phi_37_32_ladder;
        }
        float _2699;
        if (_1935 > 0.0)
        {
            _2699 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2699 = frontier_phi_47_44_ladder;
        }
        float _2701 = isnan(_2361) ? _2044 : (isnan(_2044) ? _2361 : min(_2044, _2361));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _1929) + _1918;
        float _2707 = (_2702 * _1932) + _1922;
        float _2708 = (_2702 * _1935) + _1926;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2708, cbModelParam._m0[17u].z, fma(_2707, cbModelParam._m0[17u].y, _2706 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2708, cbModelParam._m0[18u].z, fma(_2707, cbModelParam._m0[18u].y, _2706 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2708, cbModelParam._m0[19u].z, fma(_2707, cbModelParam._m0[19u].y, _2706 * cbModelParam._m0[19u].x))), _1864);
            frontier_phi_22_47_ladder = _2830.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2830.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2830.x * cbModelParam._m0[1u].z;
        }
        _1954 = frontier_phi_22_47_ladder_2;
        _1956 = frontier_phi_22_47_ladder_1;
        _1958 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1864);
        _1954 = _1938.x * cbModelParam._m0[1u].z;
        _1956 = _1938.y * cbModelParam._m0[1u].z;
        _1958 = _1938.z * cbModelParam._m0[1u].z;
    }
    float _1971 = (((_991 * _940) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1954 - _1855)) + _1855);
    float _1973 = (((_991 * _942) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1956 - _1857)) + _1857);
    float _1975 = (((_991 * _943) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1978 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1973, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1973, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1973, cbSceneParam._m0[91u].y, _1971 * cbSceneParam._m0[91u].x));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2031 = _2018 / _2030;
    float _2032 = _2022 / _2030;
    float _2033 = _2026 / _2030;
    float _2180;
    float _2181;
    float _2182;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2060 = ((uint(_2033 > cbSceneParam._m0[59u].y) + uint(_2033 > cbSceneParam._m0[59u].x)) + uint(_2033 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2061 = _2060 + 43u;
        uint _2069 = _2060 + 44u;
        uint _2077 = _2060 + 45u;
        uint _2085 = _2060 + 46u;
        float _2096 = fma(_2030, cbSceneParam._m0[_2061].w, fma(_2026, cbSceneParam._m0[_2061].z, fma(_2022, cbSceneParam._m0[_2061].y, _2018 * cbSceneParam._m0[_2061].x)));
        float _2100 = fma(_2030, cbSceneParam._m0[_2069].w, fma(_2026, cbSceneParam._m0[_2069].z, fma(_2022, cbSceneParam._m0[_2069].y, _2018 * cbSceneParam._m0[_2069].x)));
        float _2108 = fma(_2030, cbSceneParam._m0[_2085].w, fma(_2026, cbSceneParam._m0[_2085].z, fma(_2022, cbSceneParam._m0[_2085].y, _2018 * cbSceneParam._m0[_2085].x)));
        float _2113 = cbSceneParam._m0[33u].z * _2108;
        float _2115 = cbSceneParam._m0[33u].w * _2108;
        float _2118 = fma(_2030, cbSceneParam._m0[_2077].w, fma(_2026, cbSceneParam._m0[_2077].z, fma(_2022, cbSceneParam._m0[_2077].y, _2018 * cbSceneParam._m0[_2077].x))) / _2108;
        float _2166 = (cbSceneParam._m0[33u].x - sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033))) * cbSceneParam._m0[33u].y;
        float _4462 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2173 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2113 + _2096) / _2108, (_2115 + _2100) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2096) / _2108, (_2100 - _2113) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 - _2113) / _2108, (_2100 - _2115) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 - _2115) / _2108, (_2113 + _2100) / _2108), _2118), 0.0)).x), vec4(0.25)));
        _2180 = 1.0 - (_2173 * cbSceneParam._m0[34u].x);
        _2181 = 1.0 - (_2173 * cbSceneParam._m0[34u].y);
        _2182 = 1.0 - (_2173 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2180 = 1.0;
        _2181 = 1.0;
        _2182 = 1.0;
    }
    float _2246;
    float _2248;
    float _2250;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2234 = fma(_2030, cbSceneParam._m0[63u].w, fma(_2026, cbSceneParam._m0[63u].z, fma(_2022, cbSceneParam._m0[63u].y, _2018 * cbSceneParam._m0[63u].x)));
        float _2235 = fma(_2030, cbSceneParam._m0[60u].w, fma(_2026, cbSceneParam._m0[60u].z, fma(_2022, cbSceneParam._m0[60u].y, _2018 * cbSceneParam._m0[60u].x))) / _2234;
        float _2236 = fma(_2030, cbSceneParam._m0[61u].w, fma(_2026, cbSceneParam._m0[61u].z, fma(_2022, cbSceneParam._m0[61u].y, _2018 * cbSceneParam._m0[61u].x))) / _2234;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2235 >= cbSceneParam._m0[64u].x) && (_2236 >= cbSceneParam._m0[64u].y)) && (_2235 <= cbSceneParam._m0[64u].z)) && (_2236 <= cbSceneParam._m0[64u].w))
        {
            float _2374 = fma(_2030, cbSceneParam._m0[62u].w, fma(_2026, cbSceneParam._m0[62u].z, fma(_2022, cbSceneParam._m0[62u].y, _2018 * cbSceneParam._m0[62u].x))) / _2234;
            float _2378 = isnan(cbSceneParam._m0[41u].w) ? _2374 : (isnan(_2374) ? cbSceneParam._m0[41u].w : max(_2374, cbSceneParam._m0[41u].w));
            float _2421 = (cbSceneParam._m0[33u].x - sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033))) * cbSceneParam._m0[33u].y;
            float _4478 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
            float _2428 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2235, cbSceneParam._m0[33u].w + _2236), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2235, _2236 - cbSceneParam._m0[33u].z), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2235 - cbSceneParam._m0[33u].z, _2236 - cbSceneParam._m0[33u].w), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2235 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2236), _2378), 0.0)).x), vec4(0.25)));
            float _2432 = 1.0 - (_2428 * cbSceneParam._m0[34u].x);
            float _2433 = 1.0 - (_2428 * cbSceneParam._m0[34u].y);
            float _2434 = 1.0 - (_2428 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
            frontier_phi_34_33_ladder_1 = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_34_33_ladder_2 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
        }
        else
        {
            frontier_phi_34_33_ladder = _2182;
            frontier_phi_34_33_ladder_1 = _2181;
            frontier_phi_34_33_ladder_2 = _2180;
        }
        _2246 = frontier_phi_34_33_ladder_2;
        _2248 = frontier_phi_34_33_ladder_1;
        _2250 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2246 = _2180;
        _2248 = _2181;
        _2250 = _2182;
    }
    uvec4 _2255 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2257 = _2255.x * 14u;
    uint _2258 = _2257 + 13u;
    float _2265 = _956 + (-1.0);
    float _2270 = (cbLight._m0[_2258].x * _2265) + 1.0;
    float _2271 = (cbLight._m0[_2258].y * _2265) + 1.0;
    float _2272 = (cbLight._m0[_2258].z * _2265) + 1.0;
    float _2273 = (cbLight._m0[_2258].w * _2265) + 1.0;
    uint _2274 = _2257 + 5u;
    float _2280 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2284 = _2257 + 4u;
    float _2293 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2297 = _2257 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_790, _791, _792));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_790, _791, _792));
    float _4514 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4525 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2274].x * _2280) * _2318) + (((cbLight._m0[_2284].x * _2246) * _2293) * _2316);
    float _2326 = ((_2280 * cbLight._m0[_2274].y) * _2318) + (((cbLight._m0[_2284].y * _2248) * _2293) * _2316);
    float _2327 = ((_2280 * cbLight._m0[_2274].z) * _2318) + (((cbLight._m0[_2284].z * _2250) * _2293) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2257 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2435;
    float _2437;
    float _2439;
    if (_2333)
    {
        _2435 = _2325;
        _2437 = _2326;
        _2439 = _2327;
    }
    else
    {
        uint _2443 = _2257 + 6u;
        float _2459 = (dot(vec3(cbLight._m0[_2257 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4536 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2462 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2435 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2325;
        _2437 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2326;
        _2439 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2327;
    }
    bool _2442 = _2331.y == 0u;
    float _2497;
    float _2499;
    float _2501;
    if (_2442)
    {
        _2497 = _2435;
        _2499 = _2437;
        _2501 = _2439;
    }
    else
    {
        uint _2670 = _2257 + 7u;
        float _2686 = (dot(vec3(cbLight._m0[_2257 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2687 = _2686 * _2686;
        float _4552 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2688 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2689 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2497 = (((cbLight._m0[_2670].x * 0.3183098733425140380859375) * _2688) * _2689) + _2435;
        _2499 = (((cbLight._m0[_2670].y * 0.3183098733425140380859375) * _2688) * _2689) + _2437;
        _2501 = (((cbLight._m0[_2670].z * 0.3183098733425140380859375) * _2688) * _2689) + _2439;
    }
    uint _2504 = _2257 + 8u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _793) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2257].x + _870;
    float _2520 = cbLight._m0[_2257].y + _871;
    float _2521 = cbLight._m0[_2257].z + _872;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2257].xyz));
    float _4568 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _4579 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2533 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2534 = dot(vec3(_790, _791, _792), vec3(_2526, _2527, _2528));
    float _4590 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2538 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2526, _2527, _2528));
    float _4601 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2542 = _2518 * _2518;
    float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
    float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
    float _2555 = 0.959999978542327880859375 - _937;
    float _2557 = 0.959999978542327880859375 - _938;
    float _2558 = 0.959999978542327880859375 - _939;
    float _2565 = 1.0 - _2518;
    float _2576 = (0.5 / (((_2533 * ((_2532 * _2565) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2565) + _2518) * _2532))) * _2532;
    float _4612 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
    uint _2592 = _2257 + 9u;
    float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _793) * 0.949999988079071044921875);
    float _2604 = _2603 * _2603;
    float _2605 = cbLight._m0[_2297].x + _870;
    float _2606 = cbLight._m0[_2297].y + _871;
    float _2607 = cbLight._m0[_2297].z + _872;
    float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
    float _2612 = _2611 * _2605;
    float _2613 = _2611 * _2606;
    float _2614 = _2611 * _2607;
    float _2615 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2297].xyz));
    float _4623 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2619 = dot(vec3(_790, _791, _792), vec3(_2612, _2613, _2614));
    float _4634 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2623 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2612, _2613, _2614));
    float _4645 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2627 = _2604 * _2604;
    float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
    float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
    float _2645 = 1.0 - _2604;
    float _2655 = (0.5 / (((_2533 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2645) + _2604) * _2618))) * _2618;
    float _4656 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2657 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
    float _2667 = (((((_2638 * _2555) + _940) * cbLight._m0[_2592].x) * _2657) * _2280) + ((((cbLight._m0[_2504].x * _2246) * ((_2554 * _2555) + _940)) * _2578) * _2293);
    float _2668 = (((((_2638 * _2557) + _942) * cbLight._m0[_2592].y) * _2657) * _2280) + ((((cbLight._m0[_2504].y * _2248) * ((_2554 * _2557) + _942)) * _2578) * _2293);
    float _2669 = (((((_2638 * _2558) + _943) * cbLight._m0[_2592].z) * _2657) * _2280) + ((((cbLight._m0[_2504].z * _2250) * ((_2554 * _2558) + _943)) * _2578) * _2293);
    float _2725;
    float _2727;
    float _2729;
    if (_2333)
    {
        _2725 = _2667;
        _2727 = _2668;
        _2729 = _2669;
    }
    else
    {
        uint _2731 = _2257 + 2u;
        uint _2735 = _2257 + 10u;
        float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2731].w)) * _793) * 0.949999988079071044921875);
        float _2750 = _2749 * _2749;
        float _2751 = cbLight._m0[_2731].x + _870;
        float _2752 = cbLight._m0[_2731].y + _871;
        float _2753 = cbLight._m0[_2731].z + _872;
        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
        float _2758 = _2757 * _2751;
        float _2759 = _2757 * _2752;
        float _2760 = _2757 * _2753;
        float _2761 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2731].xyz));
        float _4667 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2765 = dot(vec3(_790, _791, _792), vec3(_2758, _2759, _2760));
        float _4678 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2769 = dot(vec3(cbLight._m0[_2731].xyz), vec3(_2758, _2759, _2760));
        float _4689 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2773 = _2750 * _2750;
        float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
        float _2784 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2791 = 1.0 - _2750;
        float _2801 = (0.5 / (((_2533 * ((_2764 * _2791) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2791) + _2750) * _2764))) * _2764;
        float _4700 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2725 = (((((_2784 * _2555) + _940) * cbLight._m0[_2735].x) * _2803) * _2804) + _2667;
        _2727 = (((((_2784 * _2557) + _942) * cbLight._m0[_2735].y) * _2803) * _2804) + _2668;
        _2729 = (((((_2784 * _2558) + _943) * cbLight._m0[_2735].z) * _2803) * _2804) + _2669;
    }
    float _2835;
    float _2837;
    float _2839;
    if (_2442)
    {
        _2835 = _2725;
        _2837 = _2727;
        _2839 = _2729;
    }
    else
    {
        uint _2846 = _2257 + 3u;
        uint _2850 = _2257 + 11u;
        float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2846].w)) * _793) * 0.949999988079071044921875);
        float _2865 = _2864 * _2864;
        float _2866 = cbLight._m0[_2846].x + _870;
        float _2867 = cbLight._m0[_2846].y + _871;
        float _2868 = cbLight._m0[_2846].z + _872;
        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
        float _2873 = _2872 * _2866;
        float _2874 = _2872 * _2867;
        float _2875 = _2872 * _2868;
        float _2876 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2846].xyz));
        float _4716 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2880 = dot(vec3(_790, _791, _792), vec3(_2873, _2874, _2875));
        float _4727 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2884 = dot(vec3(cbLight._m0[_2846].xyz), vec3(_2873, _2874, _2875));
        float _4738 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2888 = _2865 * _2865;
        float _2892 = ((_2883 * _2883) * (_2888 + (-1.0))) + 1.0;
        float _2899 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
        float _2906 = 1.0 - _2865;
        float _2916 = (0.5 / (((_2533 * ((_2879 * _2906) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2906) + _2865) * _2879))) * _2879;
        float _4749 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2918 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2888 / ((_2892 * _2892) * 3.141590118408203125));
        float _2919 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2835 = (((((_2899 * _2555) + _940) * cbLight._m0[_2850].x) * _2918) * _2919) + _2725;
        _2837 = (((((_2899 * _2557) + _942) * cbLight._m0[_2850].y) * _2918) * _2919) + _2727;
        _2839 = (((((_2899 * _2558) + _943) * cbLight._m0[_2850].z) * _2918) * _2919) + _2729;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2255.y == 0u)
    {
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.x;
        uint _2952 = uint((float(_2940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2941))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2941)));
        float _2962 = (log2(_2033 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2963 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        uint _2966 = uint(isnan(14.0) ? _2963 : (isnan(_2963) ? 14.0 : min(_2963, 14.0)));
        uvec4 _2971 = texelFetch(g_lightClusterGridBuffer, int(((_2966 << 2u) + (_2952 << 6u)) >> 2u));
        uint _2972 = _2971.x;
        uint _2973 = _2940.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2973 >> 4u) & 15u)) + 4294967295u) & _2972) == 0u) || ((_2973 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            uint _3203 = 0u;
            uint _3212;
            bool _3213;
            for (;;)
            {
                _3212 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                _3213 = _3212 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3213)
                {
                    frontier_phi_66_pred = _3202;
                    frontier_phi_66_pred_1 = _3201;
                    frontier_phi_66_pred_2 = _3200;
                    frontier_phi_66_pred_3 = _3199;
                    frontier_phi_66_pred_4 = _3198;
                    frontier_phi_66_pred_5 = _3197;
                }
                else
                {
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    uint _3327;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3212;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    for (;;)
                    {
                        uint _3331 = uint(findLSB(_3327)) + (_3203 << 5u);
                        uint _3328 = (_3327 + 4294967295u) & _3327;
                        uint _3333 = _3331 * 48u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3353 = (_3331 * 48u) + 4u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 3u)).x));
                        uint _3372 = (_3331 * 48u) + 8u;
                        vec3 _3383 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x));
                        float _3387 = _3347.x - _2031;
                        float _3388 = _3347.y - _2032;
                        float _3389 = _3347.z - _2033;
                        float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                        float _3393 = inversesqrt(_3390);
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3397 = dot(vec3(_897, _900, _903), vec3(_3394, _3395, _3396));
                        float _3402 = 1.0 - (_3390 * _3347.w);
                        float _4775 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3404 = sqrt(_3390) * _3366.w;
                        float _3407 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3397) + _3408;
                        float _3414 = _3404 * _3404;
                        float _3418 = ((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3403) / ((_3414 * 0.699999988079071044921875) + 1.0);
                        float _3422 = (-0.0) - _2031;
                        float _3423 = (-0.0) - _2032;
                        float _3424 = (-0.0) - _2033;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3438 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                        float _3439 = 1.0 - _972;
                        float _3446 = sqrt(1.0 - ((1.0 - (_3439 * _3439)) * (1.0 - (_3438 * _3438))));
                        float _3447 = _3446 * _3446;
                        float _3448 = _3447 * _3447;
                        float _3449 = _3429 + _3394;
                        float _3450 = _3430 + _3395;
                        float _3451 = _3431 + _3396;
                        float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                        float _3459 = dot(vec3(_897, _900, _903), vec3(_3429, _3430, _3431));
                        float _4791 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3463 = dot(vec3(_897, _900, _903), vec3(_3455 * _3449, _3455 * _3450, _3455 * _3451));
                        float _4802 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3470 = ((_3466 * _3466) * (_3448 + (-1.0))) + 1.0;
                        float _3471 = _3407 * _3447;
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3397) + _3472;
                        float _4813 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3477 = 1.0 - _3447;
                        float _3487 = (0.5 / (((_3476 * ((_3462 * _3477) + _3447)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3447) * _3462))) * _3476;
                        float _4824 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3498 = (((_3448 * 3.1415927410125732421875) * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) / ((_3470 * _3470) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125))) * _3403;
                        _3256 = (_3418 * _3366.x) + _3324;
                        _3257 = (_3418 * _3366.y) + _3325;
                        _3258 = (_3418 * _3366.z) + _3326;
                        _3253 = (_3498 * _3383.x) + _3321;
                        _3254 = (_3498 * _3383.y) + _3322;
                        _3255 = (_3498 * _3383.z) + _3323;
                        if (_3328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3328;
                        }
                    }
                    frontier_phi_66_pred = _3258;
                    frontier_phi_66_pred_1 = _3257;
                    frontier_phi_66_pred_2 = _3256;
                    frontier_phi_66_pred_3 = _3255;
                    frontier_phi_66_pred_4 = _3254;
                    frontier_phi_66_pred_5 = _3253;
                }
                _3063 = frontier_phi_66_pred;
                _3061 = frontier_phi_66_pred_1;
                _3059 = frontier_phi_66_pred_2;
                _3057 = frontier_phi_66_pred_3;
                _3055 = frontier_phi_66_pred_4;
                _3053 = frontier_phi_66_pred_5;
                uint _3204 = _3203 + 1u;
                if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3197 = _3053;
                    _3198 = _3055;
                    _3199 = _3057;
                    _3200 = _3059;
                    _3201 = _3061;
                    _3202 = _3063;
                    _3203 = _3204;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((4294967295u << _3069) & _2972) == 0u)
        {
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
        }
        else
        {
            float _3190 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
            float _3191 = _3190 * _2031;
            float _3192 = _3190 * _2032;
            float _3193 = _3190 * _2033;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3304 = _3052;
                float _3305 = _3054;
                float _3306 = _3056;
                float _3307 = _3058;
                float _3308 = _3060;
                float _3309 = _3062;
                uint _3310 = _3069;
                uint _3319;
                bool _3320;
                for (;;)
                {
                    _3319 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                    _3320 = _3319 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3320)
                    {
                        frontier_phi_72_pred = _3309;
                        frontier_phi_72_pred_1 = _3308;
                        frontier_phi_72_pred_2 = _3307;
                        frontier_phi_72_pred_3 = _3306;
                        frontier_phi_72_pred_4 = _3305;
                        frontier_phi_72_pred_5 = _3304;
                    }
                    else
                    {
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        uint _3522 = _3319;
                        uint _3523;
                        vec4 _3548;
                        float _3549;
                        vec4 _3564;
                        vec3 _3576;
                        vec4 _3591;
                        vec4 _3606;
                        float _3652;
                        bool _3653;
                        for (;;)
                        {
                            uint _3533 = ((_3310 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3522));
                            _3523 = (_3522 + 4294967295u) & _3522;
                            uint _3535 = _3533 * 40u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3549 = _3548.w;
                            uint _3551 = (_3533 * 40u) + 4u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3533 * 40u) + 8u;
                            _3576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x));
                            uint _3578 = (_3533 * 40u) + 16u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3533 * 40u) + 20u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3533 * 40u) + 24u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3627 = (_3533 * 40u) + 28u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3652 = fma(_2033, _3640.z, fma(_2032, _3640.y, _3640.x * _2031)) + _3640.w;
                            _3653 = !((fma(_2033, _3621.z, fma(_2032, _3621.y, _3621.x * _2031)) + _3621.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3653)
                            {
                                float _3680 = _3548.x - _2031;
                                float _3681 = _3548.y - _2032;
                                float _3682 = _3548.z - _2033;
                                float _3683 = dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682));
                                float _3686 = inversesqrt(_3683);
                                float _3687 = _3686 * _3680;
                                float _3688 = _3686 * _3681;
                                float _3689 = _3686 * _3682;
                                float _3693 = 1.0 - (_3683 / (_3549 * _3549));
                                float _4835 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3698 = sqrt(_3683) * _3564.w;
                                float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                                float _3701 = _3700 * _3700;
                                float _3704 = ((1.0 - _3701) * dot(vec3(_3687, _3688, _3689), vec3(_897, _900, _903))) + _3701;
                                float _3707 = _3698 * _3698;
                                float _3711 = (fma(_2033, _3591.z, fma(_2032, _3591.y, _3591.x * _2031)) + _3591.w) / _3652;
                                float _3712 = (fma(_2033, _3606.z, fma(_2032, _3606.y, _3606.x * _2031)) + _3606.w) / _3652;
                                float _3716 = 1.0 - dot(vec2(_3711, _3712), vec2(_3711, _3712));
                                float _4851 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3718 = _3717 * (((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3694) / ((_3707 * 0.699999988079071044921875) + 1.0));
                                float _3730 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                                float _3731 = 1.0 - _972;
                                float _3738 = sqrt(1.0 - ((1.0 - (_3731 * _3731)) * (1.0 - (_3730 * _3730))));
                                float _3739 = _3738 * _3738;
                                float _3740 = _3739 * _3739;
                                float _3741 = _3687 - _3191;
                                float _3742 = _3688 - _3192;
                                float _3743 = _3689 - _3193;
                                float _3747 = inversesqrt(dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743)));
                                float _3751 = dot(vec3(_897, _900, _903), vec3((-0.0) - _3191, (-0.0) - _3192, (-0.0) - _3193));
                                float _4862 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3755 = dot(vec3(_897, _900, _903), vec3(_3747 * _3741, _3747 * _3742, _3747 * _3743));
                                float _4873 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3758 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3762 = ((_3758 * _3758) * (_3740 + (-1.0))) + 1.0;
                                float _3763 = _3700 * _3739;
                                float _3764 = _3763 * _3763;
                                float _3770 = ((1.0 - _3764) * dot(vec3(_897, _900, _903), vec3(_3687, _3688, _3689))) + _3764;
                                float _4884 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3772 = 1.0 - _3739;
                                float _3782 = (0.5 / (((_3771 * ((_3754 * _3772) + _3739)) + 9.9999999392252902907785028219223e-09) + (((_3771 * _3772) + _3739) * _3754))) * _3771;
                                float _4895 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3792 = (_3717 * _3694) * (((_3740 * 3.1415927410125732421875) * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) / ((_3762 * _3762) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3718 * _3564.y;
                                frontier_phi_78_pred_1 = _3718 * _3564.x;
                                frontier_phi_78_pred_2 = _3792 * _3576.z;
                                frontier_phi_78_pred_3 = _3792 * _3576.y;
                                frontier_phi_78_pred_4 = _3792 * _3576.x;
                                frontier_phi_78_pred_5 = _3718 * _3564.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3800 = frontier_phi_78_pred;
                            _3799 = frontier_phi_78_pred_1;
                            _3798 = frontier_phi_78_pred_2;
                            _3797 = frontier_phi_78_pred_3;
                            _3796 = frontier_phi_78_pred_4;
                            _3801 = frontier_phi_78_pred_5;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            if (_3523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3523;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3508;
                        frontier_phi_72_pred_1 = _3507;
                        frontier_phi_72_pred_2 = _3506;
                        frontier_phi_72_pred_3 = _3505;
                        frontier_phi_72_pred_4 = _3504;
                        frontier_phi_72_pred_5 = _3503;
                    }
                    _3176 = frontier_phi_72_pred;
                    _3174 = frontier_phi_72_pred_1;
                    _3172 = frontier_phi_72_pred_2;
                    _3170 = frontier_phi_72_pred_3;
                    _3168 = frontier_phi_72_pred_4;
                    _3166 = frontier_phi_72_pred_5;
                    uint _3311 = _3310 + 1u;
                    if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3304 = _3166;
                        _3305 = _3168;
                        _3306 = _3170;
                        _3307 = _3172;
                        _3308 = _3174;
                        _3309 = _3176;
                        _3310 = _3311;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3176;
                frontier_phi_60_61_ladder_1 = _3174;
                frontier_phi_60_61_ladder_2 = _3170;
                frontier_phi_60_61_ladder_3 = _3168;
                frontier_phi_60_61_ladder_4 = _3166;
                frontier_phi_60_61_ladder_5 = _3172;
            }
            else
            {
                frontier_phi_60_61_ladder = _3062;
                frontier_phi_60_61_ladder_1 = _3060;
                frontier_phi_60_61_ladder_2 = _3056;
                frontier_phi_60_61_ladder_3 = _3054;
                frontier_phi_60_61_ladder_4 = _3052;
                frontier_phi_60_61_ladder_5 = _3058;
            }
            _3165 = frontier_phi_60_61_ladder_4;
            _3167 = frontier_phi_60_61_ladder_3;
            _3169 = frontier_phi_60_61_ladder_2;
            _3171 = frontier_phi_60_61_ladder_5;
            _3173 = frontier_phi_60_61_ladder_1;
            _3175 = frontier_phi_60_61_ladder;
        }
        float _3180 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2985 = (_3180 * _3171) + _2497;
        _2987 = (_3180 * _3173) + _2499;
        _2989 = (_3180 * _3175) + _2501;
        _2991 = ((_3165 * _940) * _3180) + _2835;
        _2993 = ((_3167 * _942) * _3180) + _2837;
        _2995 = ((_3169 * _943) * _3180) + _2839;
    }
    else
    {
        _2985 = _2497;
        _2987 = _2499;
        _2989 = _2501;
        _2991 = _2835;
        _2993 = _2837;
        _2995 = _2839;
    }
    float _4911 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4922 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4933 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    uint _3015 = _246 + 6u;
    float _3023 = _878 / cbSceneParam._m0[86u].x;
    float _3024 = _879 / cbSceneParam._m0[86u].y;
    vec4 _3038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3040 = _3038.x;
    float _3041 = _3038.y;
    float _3042 = _3038.z;
    float _3043 = _3038.w;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3078 = _3077 / _812;
        float _3089 = _3078 * _863;
        float _3090 = _864 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3093 = _3078 * _865;
        float _3095 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3096 = _3095 + cbSceneParam._m0[79u].w;
        float _3097 = cbSceneParam._m0[79u].w - _3090;
        float _3103 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3093 * _3093));
        float _3106 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3103;
        float _3111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3266;
        if (abs((_3091 - _3095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3266 = ((((_3096 > 0.0) ? exp2(_3111 * _3096) : (2.0 - exp2(_3113 * _3096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3106;
        }
        else
        {
            float _3226 = 1.0 / cbSceneParam._m0[80u].x;
            float _3227 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : max(_3096, _3097));
            float _3228 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : min(_3096, _3097));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            _3266 = ((abs(_3103 / _3091) * cbSceneParam._m0[80u].y) * ((((_3237 - _3238) * 2.0) - ((exp2(_3111 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0)))) - exp2(_3111 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))))) * _3226)) - ((exp2(_3113 * _3237) - exp2(_3113 * _3238)) * _3226))) + (_3106 * cbSceneParam._m0[80u].z);
        }
        vec4 _3268 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, 1.0), 0.0);
        float _3277 = exp2((_3266 * (-1.44269502162933349609375)) * (1.0 - _3268.w));
        float _3278 = log2(_3277);
        float _3294 = log2(_3043);
        _3115 = (exp2(_3294 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].x)) * _3268.x) / cbSceneParam._m0[78u].x)) + _3040;
        _3117 = (exp2(_3294 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].y)) * _3268.y) / cbSceneParam._m0[78u].y)) + _3041;
        _3119 = (exp2(_3294 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].z)) * _3268.z) / cbSceneParam._m0[78u].z)) + _3042;
        _3121 = _3277 * _3043;
    }
    else
    {
        _3115 = _3040;
        _3117 = _3041;
        _3119 = _3042;
        _3121 = _3043;
    }
    float _3133 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3134 = _3133 == 3.0;
    float _3135 = log2(_3121);
    float _3142 = exp2(_3135 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2985 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _956))) + ((_2991 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1763)) * cbPerFrame._m0[3u].x));
    float _3143 = exp2(_3135 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2987 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _956))) + ((_2993 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1763)) * cbPerFrame._m0[3u].x));
    float _3144 = exp2(_3135 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2989 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _956))) + ((_2995 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1763)) * cbPerFrame._m0[3u].x));
    float _3153 = (_3133 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3153 * (_3134 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.y = _3153 * (_3134 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.z = _3153 * (_3134 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.w = cbInstanceData._m0[_3015].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3015].w;
}


