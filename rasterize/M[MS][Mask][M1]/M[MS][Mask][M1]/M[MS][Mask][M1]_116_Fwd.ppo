#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1556;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3880 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _431 = (_424 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _432 = (_424 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _433 = (_424 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[23u].w) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3891 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _544 = _542.x;
    float _554 = dot(vec4(_544, _542.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _566 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _353.z) * 2.0) - ((((_544 - _554) * cbMtdParam._m0[23u].w) + _554) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3902 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _574 = (_567 * ((_525.x * cbMtdParam._m0[14u].x) - _504)) + _504;
    float _575 = (_567 * ((_525.y * cbMtdParam._m0[14u].y) - _505)) + _505;
    float _576 = (_567 * ((_525.z * cbMtdParam._m0[14u].z) - _506)) + _506;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _424) + _613;
    float _623 = ((_594.y - _614) * _424) + _614;
    float _624 = ((_594.z - _615) * _424) + _615;
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _647 = ((_636.x - _622) * _497) + _622;
    float _648 = ((_636.y - _623) * _497) + _623;
    float _649 = ((_636.z - _624) * _497) + _624;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _674 = ((_661.z - _649) * _567) + _649;
    float _677 = ((((_661.x - _647) * _567) + _647) * 2.0) + (-1.0);
    float _679 = ((((_661.y - _648) * _567) + _648) * 2.0) + (-1.0);
    float _680 = dot(vec2(_677, _679), vec2(_677, _679));
    float _3913 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _726 = _724.x;
    float _727 = 1.0 - _726;
    float _735 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _738 = ((isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : min(_735, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _747 = (_738 - ((((((_726 - _727) * cbMtdParam._m0[24u].z) + _727) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _738))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3934 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _755 = (_748 * (cbMtdParam._m0[17u].x - _574)) + _574;
    float _756 = (_748 * (cbMtdParam._m0[17u].y - _575)) + _575;
    float _757 = (_748 * (cbMtdParam._m0[17u].z - _576)) + _576;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _771 = _769.x;
    float _772 = 1.0 - _771;
    float _797 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_771 - _772) * cbMtdParam._m0[24u].w) + _772) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3945 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _798 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _806 = ((((cbMtdParam._m0[10u].x - _755) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _798) + _755;
    float _807 = ((((cbMtdParam._m0[10u].y - _756) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _798) + _756;
    float _808 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _757)) * _798) + _757;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _836 = _834.x;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _836) * _424) + _836;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _854) * _497) + _854;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _871) * _567) + _871;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _888) * cbMtdParam._m0[19u].z) + _888;
    float _894 = _892 - (_892 * _748);
    float _896 = _894 - (_894 * _798);
    float _900 = (cbMtdParam._m0[19u].w * (_699.z - _674)) + _674;
    vec4 _914 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _921 = (_914.x * 2.0) + (-1.0);
    float _922 = (_914.y * 2.0) + (-1.0);
    float _923 = dot(vec2(_921, _922), vec2(_921, _922));
    float _3956 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _931 = (_748 * (_914.z - _900)) + _900;
    float _934 = ((cbMtdParam._m0[23u].x - _931) * _798) + _931;
    vec4 _957 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _963 = (_957.x * 2.0) + (-1.0);
    float _964 = (_957.y * 2.0) + (-1.0);
    float _965 = dot(vec2(_963, _964), vec2(_963, _964));
    float _3967 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _973 = (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _677;
    float _974 = (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _679;
    float _986 = (((_921 - _973) + (cbMtdParam._m0[21u].x * _973)) * _748) + _973;
    float _987 = (((_922 - _974) + (cbMtdParam._m0[21u].x * _974)) * _748) + _974;
    float _988 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) - _685)) + _685;
    float _999 = (((_963 - _986) + (_986 * cbMtdParam._m0[22u].z)) * _798) + _986;
    float _1000 = (((_964 - _987) + (_987 * cbMtdParam._m0[22u].z)) * _798) + _987;
    float _1001 = ((sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) - _988) * _798) + _988;
    float _1003 = cbMtdParam._m0[22u].x + _699.w;
    float _1006 = fma(_1001, _254 * NORMAL.x, fma(_1000, _261 * TANGENT.x, (_247 * _239) * _999));
    float _1009 = fma(_1001, _254 * NORMAL.y, fma(_1000, _261 * TANGENT.y, (_247 * _240) * _999));
    float _1012 = fma(_1001, _254 * NORMAL.z, fma(_1000, _261 * TANGENT.z, (_247 * _241) * _999));
    float _1016 = inversesqrt(dot(vec3(_1006, _1009, _1012), vec3(_1006, _1009, _1012)));
    float _1017 = _1016 * _1006;
    float _1018 = _1016 * _1009;
    float _1019 = _1016 * _1012;
    float _3978 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _1020 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4000 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4011 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4022 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4033 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _1025 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1039 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1089 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1079);
    float _1090 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1079);
    float _1091 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1079);
    float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
    float _1096 = _1089 * _1095;
    float _1097 = _1090 * _1095;
    float _1098 = _1091 * _1095;
    float _1104 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1105 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1123 = fma(_1019, cbSceneParam._m0[5u].z, fma(_1018, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1017));
    float _1126 = fma(_1019, cbSceneParam._m0[6u].z, fma(_1018, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1017));
    float _1129 = fma(_1019, cbSceneParam._m0[7u].z, fma(_1018, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1017));
    uint _1143 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1149 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1143].x;
    float _1150 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1143].y;
    float _1151 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1143].z;
    float _4044 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1152 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1153 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1154 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1155 = 1.0 - _1025;
    float _1156 = _1152 * _1155;
    float _1157 = _1153 * _1155;
    float _1158 = _1154 * _1155;
    float _1163 = (_1152 + (-0.039999999105930328369140625)) * _1025;
    float _1164 = (_1153 + (-0.039999999105930328369140625)) * _1025;
    float _1165 = (_1154 + (-0.039999999105930328369140625)) * _1025;
    float _1166 = _1163 + 0.039999999105930328369140625;
    float _1168 = _1164 + 0.039999999105930328369140625;
    float _1169 = _1165 + 0.039999999105930328369140625;
    vec4 _1178 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1104, cbSceneParam._m0[86u].y * _1105));
    float _1182 = ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * TEXCOORD_5.w) * _1178.x;
    float _1183 = dot(vec3(_1017, _1018, _1019), vec3(_1096, _1097, _1098));
    float _1186 = _1183 * 2.0;
    float _1190 = (_1186 * _1017) - _1096;
    float _1191 = (_1186 * _1018) - _1097;
    float _1192 = (_1186 * _1019) - _1098;
    float _1196 = abs(dot(vec3(_1096, _1097, _1098), vec3(_1017, _1018, _1019)));
    float _4077 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1198 = sqrt(_1020);
    float _1211 = exp2((_1198 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1198 * 3.0));
    float _1217 = (1.0 - _1211) * ((_1198 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1218 = _1211 * _1198;
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1555;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1280 = fma(_1254, cbModelParam._m0[26u].z, fma(_1250, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1246));
        float _1284 = fma(_1254, cbModelParam._m0[27u].z, fma(_1250, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1246));
        float _1288 = fma(_1254, cbModelParam._m0[28u].z, fma(_1250, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1246));
        float _1313 = _1246 + _1017;
        float _1314 = _1250 + _1018;
        float _1315 = _1254 + _1019;
        float _1325 = fma(_1315, cbModelParam._m0[26u].z, fma(_1314, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313)) - _1280;
        float _1326 = fma(_1315, cbModelParam._m0[27u].z, fma(_1314, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313)) - _1284;
        float _1327 = fma(_1315, cbModelParam._m0[28u].z, fma(_1314, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313)) - _1288;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1280 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1284 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[34u].z) + ((((((_1288 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1383 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1349.x + (-0.5));
        float _1385 = _1383 * (_1349.y + (-0.5));
        float _1386 = _1383 * (_1349.z + (-0.5));
        float _1393 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1356.x + (-0.5));
        float _1395 = _1393 * (_1356.y + (-0.5));
        float _1396 = _1393 * (_1356.z + (-0.5));
        float _1403 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1363.x + (-0.5));
        float _1405 = _1403 * (_1363.y + (-0.5));
        float _1406 = _1403 * (_1363.z + (-0.5));
        float _1413 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1370.x + (-0.5));
        float _1415 = _1413 * (_1370.y + (-0.5));
        float _1416 = _1413 * (_1370.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1437 = (dot(vec3(_1017, _1018, _1019), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1447 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4125 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1449 + 1.0))) + _1454) * _1417;
        float _1464 = _1385 * 0.5;
        float _1465 = _1395 * 0.5;
        float _1466 = _1405 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_1017, _1018, _1019), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4158 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1491 + 1.0))) + _1496) * _1418;
        float _1506 = _1386 * 0.5;
        float _1507 = _1396 * 0.5;
        float _1508 = _1406 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_1017, _1018, _1019), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4191 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1533 + 1.0))) + _1538) * _1419;
        _1555 = _1386;
        _1557 = _1385;
        _1558 = _1384;
        _1559 = _1396;
        _1560 = _1395;
        _1561 = _1394;
        _1562 = _1406;
        _1563 = _1405;
        _1564 = _1404;
        _1565 = _1419;
        _1566 = _1418;
        _1567 = _1417;
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1556;
        _1557 = _1556;
        _1558 = _1556;
        _1559 = _1556;
        _1560 = _1556;
        _1561 = _1556;
        _1562 = _1556;
        _1563 = _1556;
        _1564 = _1556;
        _1565 = _1556;
        _1566 = _1556;
        _1567 = _1556;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1593 = fma(_1254, cbModelParam._m0[30u].z, fma(_1250, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246));
        float _1597 = fma(_1254, cbModelParam._m0[31u].z, fma(_1250, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246));
        float _1601 = fma(_1254, cbModelParam._m0[32u].z, fma(_1250, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246));
        float _1624 = _1246 + _1017;
        float _1625 = _1250 + _1018;
        float _1626 = _1254 + _1019;
        float _1636 = fma(_1626, cbModelParam._m0[30u].z, fma(_1625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1624)) - _1593;
        float _1637 = fma(_1626, cbModelParam._m0[31u].z, fma(_1625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1624)) - _1597;
        float _1638 = fma(_1626, cbModelParam._m0[32u].z, fma(_1625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1624)) - _1601;
        float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
        float _1655 = ((_1642 * _1636) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1593 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1642 * _1637) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1597 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1657 = ((_1642 * _1638) / cbModelParam._m0[35u].z) + ((((((_1601 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        float _1692 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1659.x + (-0.5));
        float _1694 = _1692 * (_1659.y + (-0.5));
        float _1695 = _1692 * (_1659.z + (-0.5));
        float _1702 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1666.x + (-0.5));
        float _1704 = _1702 * (_1666.y + (-0.5));
        float _1705 = _1702 * (_1666.z + (-0.5));
        float _1712 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1713 = _1712 * (_1673.x + (-0.5));
        float _1714 = _1712 * (_1673.y + (-0.5));
        float _1715 = _1712 * (_1673.z + (-0.5));
        float _1722 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1723 = _1722 * (_1680.x + (-0.5));
        float _1724 = _1722 * (_1680.y + (-0.5));
        float _1725 = _1722 * (_1680.z + (-0.5));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = _1693 * 0.5;
        float _1730 = _1703 * 0.5;
        float _1731 = _1713 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_1017, _1018, _1019), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4254 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1756 + 1.0))) + _1761) * _1726;
        float _1771 = _1694 * 0.5;
        float _1772 = _1704 * 0.5;
        float _1773 = _1714 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_1017, _1018, _1019), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4287 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1798 + 1.0))) + _1803) * _1727;
        float _1813 = _1695 * 0.5;
        float _1814 = _1705 * 0.5;
        float _1815 = _1715 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_1017, _1018, _1019), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _4320 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1840 + 1.0))) + _1845) * _1728;
        _1862 = _1695;
        _1863 = _1694;
        _1864 = _1693;
        _1865 = _1705;
        _1866 = _1704;
        _1867 = _1703;
        _1868 = _1715;
        _1869 = _1714;
        _1870 = _1713;
        _1871 = _1728;
        _1872 = _1727;
        _1873 = _1726;
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
    }
    else
    {
        _1862 = _1556;
        _1863 = _1556;
        _1864 = _1556;
        _1865 = _1556;
        _1866 = _1556;
        _1867 = _1556;
        _1868 = _1556;
        _1869 = _1556;
        _1870 = _1556;
        _1871 = _1556;
        _1872 = _1556;
        _1873 = _1556;
        _1874 = 0.0;
        _1875 = 0.0;
        _1876 = 0.0;
    }
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1568)) + _1568;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1569)) + _1569;
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1570)) + _1570;
    float _1909 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1887, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1887, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1887, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1886));
    float _1930 = _1190 * 0.5;
    float _1931 = _1191 * 0.5;
    float _1932 = _1192 * 0.5;
    float _1933 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1936 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1939 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1973;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1946 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1555, _1559, _1562, _1565));
        float _1950 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1557, _1560, _1563, _1566));
        float _1954 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1961 = dot(vec4(cbModelParam._m0[39u]), vec4(_1930, _1931, _1932, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1961) ? 0.0 : (isnan(0.0) ? _1961 : max(0.0, _1961))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1984;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1975 = dot(vec4(cbModelParam._m0[40u]), vec4(_1930, _1931, _1932, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1975) ? 0.0 : (isnan(0.0) ? _1975 : max(0.0, _1975))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1988 = (_1984 * cbModelParam._m0[1u].x) + (_1973 * (1.0 - cbModelParam._m0[1u].x));
    float _1998 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1020);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1998 : min(cbModelParam._m0[25u].z, _1998));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2046 = fma(_1254, cbModelParam._m0[13u].z, fma(_1250, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1246)) + cbModelParam._m0[13u].w;
        float _2050 = fma(_1254, cbModelParam._m0[14u].z, fma(_1250, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1246)) + cbModelParam._m0[14u].w;
        float _2054 = fma(_1254, cbModelParam._m0[15u].z, fma(_1250, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1246)) + cbModelParam._m0[15u].w;
        float _2057 = fma(_1192, cbModelParam._m0[13u].z, fma(_1191, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190));
        float _2060 = fma(_1192, cbModelParam._m0[14u].z, fma(_1191, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190));
        float _2063 = fma(_1192, cbModelParam._m0[15u].z, fma(_1191, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190));
        float _2091;
        if (_2057 > 0.0)
        {
            _2091 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2091 = frontier_phi_14_12_ladder;
        }
        float _2294;
        if (_2060 > 0.0)
        {
            _2294 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2294 = frontier_phi_23_19_ladder;
        }
        float _2548;
        if (_2063 > 0.0)
        {
            _2548 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2548 = frontier_phi_35_30_ladder;
        }
        float _2550 = isnan(_2294) ? _2091 : (isnan(_2091) ? _2294 : min(_2091, _2294));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _2057) + _2046;
        float _2556 = (_2551 * _2060) + _2050;
        float _2557 = (_2551 * _2063) + _2054;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2558;
        float _2562 = _2558 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 > _2562) || ((_2556 < _2560) || ((_2555 < _2560) || (_2555 > _2562))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2557, cbModelParam._m0[9u].z, fma(_2556, cbModelParam._m0[9u].y, _2555 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2557, cbModelParam._m0[10u].z, fma(_2556, cbModelParam._m0[10u].y, _2555 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2557, cbModelParam._m0[11u].z, fma(_2556, cbModelParam._m0[11u].y, _2555 * cbModelParam._m0[11u].x))), _1999);
            frontier_phi_13_35_ladder = _2685.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2685.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2685.x * cbModelParam._m0[1u].y;
        }
        _2079 = frontier_phi_13_35_ladder_2;
        _2081 = frontier_phi_13_35_ladder_1;
        _2083 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1190, _1191, _1192), _1999);
        _2079 = _2067.x * cbModelParam._m0[1u].y;
        _2081 = _2067.y * cbModelParam._m0[1u].y;
        _2083 = _2067.z * cbModelParam._m0[1u].y;
    }
    float _2087 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1020);
    float _2088 = isnan(_2087) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2087 : min(cbModelParam._m0[25u].w, _2087));
    float _2178;
    float _2180;
    float _2182;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2142 = fma(_1254, cbModelParam._m0[21u].z, fma(_1250, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1246)) + cbModelParam._m0[21u].w;
        float _2146 = fma(_1254, cbModelParam._m0[22u].z, fma(_1250, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1246)) + cbModelParam._m0[22u].w;
        float _2150 = fma(_1254, cbModelParam._m0[23u].z, fma(_1250, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1246)) + cbModelParam._m0[23u].w;
        float _2153 = fma(_1192, cbModelParam._m0[21u].z, fma(_1191, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190));
        float _2156 = fma(_1192, cbModelParam._m0[22u].z, fma(_1191, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190));
        float _2159 = fma(_1192, cbModelParam._m0[23u].z, fma(_1191, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190));
        float _2299;
        if (_2153 > 0.0)
        {
            _2299 = abs((1.0 - _2142) / _2153);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2142 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2299 = frontier_phi_25_21_ladder;
        }
        float _2575;
        if (_2156 > 0.0)
        {
            _2575 = abs((1.0 - _2146) / _2156);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2146 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2575 = frontier_phi_37_32_ladder;
        }
        float _2788;
        if (_2159 > 0.0)
        {
            _2788 = abs((1.0 - _2150) / _2159);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2150 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2788 = frontier_phi_46_43_ladder;
        }
        float _2790 = isnan(_2575) ? _2299 : (isnan(_2299) ? _2575 : min(_2299, _2575));
        float _2791 = isnan(_2788) ? _2790 : (isnan(_2790) ? _2788 : min(_2790, _2788));
        float _2795 = (_2791 * _2153) + _2142;
        float _2796 = (_2791 * _2156) + _2146;
        float _2797 = (_2791 * _2159) + _2150;
        float _2798 = _2791 * 9.9999997473787516355514526367188e-05;
        float _2799 = (-1.0) - _2798;
        float _2801 = _2798 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2797 > _2801) || ((_2797 < _2799) || ((_2796 > _2801) || ((_2796 < _2799) || ((_2795 < _2799) || (_2795 > _2801))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2797, cbModelParam._m0[17u].z, fma(_2796, cbModelParam._m0[17u].y, _2795 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2797, cbModelParam._m0[18u].z, fma(_2796, cbModelParam._m0[18u].y, _2795 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2797, cbModelParam._m0[19u].z, fma(_2796, cbModelParam._m0[19u].y, _2795 * cbModelParam._m0[19u].x))), _2088);
            frontier_phi_22_46_ladder = _2996.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2996.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2996.x * cbModelParam._m0[1u].z;
        }
        _2178 = frontier_phi_22_46_ladder_2;
        _2180 = frontier_phi_22_46_ladder_1;
        _2182 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1190, _1191, _1192), _2088);
        _2178 = _2162.x * cbModelParam._m0[1u].z;
        _2180 = _2162.y * cbModelParam._m0[1u].z;
        _2182 = _2162.z * cbModelParam._m0[1u].z;
    }
    float _2195 = (((_1217 * _1166) + _1218) * _1182) * ((cbModelParam._m0[1u].w * (_2178 - _2079)) + _2079);
    float _2197 = (((_1217 * _1168) + _1218) * _1182) * ((cbModelParam._m0[1u].w * (_2180 - _2081)) + _2081);
    float _2199 = (((_1217 * _1169) + _1218) * _1182) * ((cbModelParam._m0[1u].w * (_2182 - _2083)) + _2083);
    float _2202 = fma(_2199, cbSceneParam._m0[89u].z, fma(_2197, cbSceneParam._m0[89u].y, _2195 * cbSceneParam._m0[89u].x));
    float _2205 = fma(_2199, cbSceneParam._m0[90u].z, fma(_2197, cbSceneParam._m0[90u].y, _2195 * cbSceneParam._m0[90u].x));
    float _2208 = fma(_2199, cbSceneParam._m0[91u].z, fma(_2197, cbSceneParam._m0[91u].y, _2195 * cbSceneParam._m0[91u].x));
    uvec4 _2218 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2220 = _2218.x * 14u;
    uint _2221 = _2220 + 13u;
    float _2228 = _1182 + (-1.0);
    float _2233 = (cbLight._m0[_2221].x * _2228) + 1.0;
    float _2234 = (cbLight._m0[_2221].y * _2228) + 1.0;
    float _2235 = (cbLight._m0[_2221].z * _2228) + 1.0;
    float _2236 = (cbLight._m0[_2221].w * _2228) + 1.0;
    uint _2237 = _2220 + 5u;
    float _2243 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2247 = _2220 + 4u;
    float _2253 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2257 = _2220 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_1017, _1018, _1019));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_1017, _1018, _1019));
    float _4456 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4467 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2237].x * _2243) * _2278) + ((cbLight._m0[_2247].x * _2253) * _2276);
    float _2286 = ((_2243 * cbLight._m0[_2237].y) * _2278) + ((_2253 * cbLight._m0[_2247].y) * _2276);
    float _2287 = ((_2243 * cbLight._m0[_2237].z) * _2278) + ((_2253 * cbLight._m0[_2247].z) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2220 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2293)
    {
        _2304 = _2285;
        _2306 = _2286;
        _2308 = _2287;
    }
    else
    {
        uint _2312 = _2220 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2220 + 2u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4478 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2331 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2285;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2286;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2287;
    }
    bool _2311 = _2291.y == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2311)
    {
        _2349 = _2304;
        _2351 = _2306;
        _2353 = _2308;
    }
    else
    {
        uint _2519 = _2220 + 7u;
        float _2535 = (dot(vec3(cbLight._m0[_2220 + 3u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4494 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2538 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2349 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2304;
        _2351 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2306;
        _2353 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2308;
    }
    uint _2356 = _2220 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _1020) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2220].x + _1096;
    float _2372 = cbLight._m0[_2220].y + _1097;
    float _2373 = cbLight._m0[_2220].z + _1098;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2220].xyz));
    float _4510 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _2385 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2386 = dot(vec3(_1017, _1018, _1019), vec3(_2378, _2379, _2380));
    float _4532 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2378, _2379, _2380));
    float _4543 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
    float _2407 = 0.959999978542327880859375 - _1163;
    float _2409 = 0.959999978542327880859375 - _1164;
    float _2410 = 0.959999978542327880859375 - _1165;
    float _2417 = 1.0 - _2370;
    float _2428 = (0.5 / (((_2385 * ((_2384 * _2417) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2417) + _2370) * _2384))) * _2384;
    float _4554 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2441 = _2220 + 9u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _1020) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2257].x + _1096;
    float _2455 = cbLight._m0[_2257].y + _1097;
    float _2456 = cbLight._m0[_2257].z + _1098;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2257].xyz));
    float _4565 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2468 = dot(vec3(_1017, _1018, _1019), vec3(_2461, _2462, _2463));
    float _4576 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2461, _2462, _2463));
    float _4587 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2453 * _2453;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2494 = 1.0 - _2453;
    float _2504 = (0.5 / (((_2385 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2494) + _2453) * _2467))) * _2467;
    float _4598 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    float _2516 = (((((_2487 * _2407) + _1166) * cbLight._m0[_2441].x) * _2506) * _2243) + (((((_2406 * _2407) + _1166) * cbLight._m0[_2356].x) * _2430) * _2253);
    float _2517 = (((((_2487 * _2409) + _1168) * cbLight._m0[_2441].y) * _2506) * _2243) + (((((_2406 * _2409) + _1168) * cbLight._m0[_2356].y) * _2430) * _2253);
    float _2518 = (((((_2487 * _2410) + _1169) * cbLight._m0[_2441].z) * _2506) * _2243) + (((((_2406 * _2410) + _1169) * cbLight._m0[_2356].z) * _2430) * _2253);
    float _2580;
    float _2582;
    float _2584;
    if (_2293)
    {
        _2580 = _2516;
        _2582 = _2517;
        _2584 = _2518;
    }
    else
    {
        uint _2586 = _2220 + 2u;
        uint _2590 = _2220 + 10u;
        float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2586].w)) * _1020) * 0.949999988079071044921875);
        float _2605 = _2604 * _2604;
        float _2606 = cbLight._m0[_2586].x + _1096;
        float _2607 = cbLight._m0[_2586].y + _1097;
        float _2608 = cbLight._m0[_2586].z + _1098;
        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
        float _2613 = _2612 * _2606;
        float _2614 = _2612 * _2607;
        float _2615 = _2612 * _2608;
        float _2616 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2586].xyz));
        float _4609 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2620 = dot(vec3(_1017, _1018, _1019), vec3(_2613, _2614, _2615));
        float _4620 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2624 = dot(vec3(cbLight._m0[_2586].xyz), vec3(_2613, _2614, _2615));
        float _4631 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2628 = _2605 * _2605;
        float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
        float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
        float _2646 = 1.0 - _2605;
        float _2656 = (0.5 / (((_2385 * ((_2619 * _2646) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2646) + _2605) * _2619))) * _2619;
        float _4642 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2658 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
        float _2659 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2580 = (((((_2639 * _2407) + _1166) * cbLight._m0[_2590].x) * _2658) * _2659) + _2516;
        _2582 = (((((_2639 * _2409) + _1168) * cbLight._m0[_2590].y) * _2658) * _2659) + _2517;
        _2584 = (((((_2639 * _2410) + _1169) * cbLight._m0[_2590].z) * _2658) * _2659) + _2518;
    }
    float _2694;
    float _2696;
    float _2698;
    if (_2311)
    {
        _2694 = _2580;
        _2696 = _2582;
        _2698 = _2584;
    }
    else
    {
        uint _2705 = _2220 + 3u;
        uint _2709 = _2220 + 11u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _1020) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _1096;
        float _2726 = cbLight._m0[_2705].y + _1097;
        float _2727 = cbLight._m0[_2705].z + _1098;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2705].xyz));
        float _4658 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2739 = dot(vec3(_1017, _1018, _1019), vec3(_2732, _2733, _2734));
        float _4669 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4680 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2765 = 1.0 - _2724;
        float _2775 = (0.5 / (((_2385 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2765) + _2724) * _2738))) * _2738;
        float _4691 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2694 = (((((_2758 * _2407) + _1166) * cbLight._m0[_2709].x) * _2777) * _2778) + _2580;
        _2696 = (((((_2758 * _2409) + _1168) * cbLight._m0[_2709].y) * _2777) * _2778) + _2582;
        _2698 = (((((_2758 * _2410) + _1169) * cbLight._m0[_2709].z) * _2777) * _2778) + _2584;
    }
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_2218.y == 0u)
    {
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2853;
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2853;
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2853;
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1105) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _1104) / _2869)));
        float _2890 = (log2(_2856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
        }
        else
        {
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            uint _3152 = 0u;
            uint _3161;
            bool _3162;
            for (;;)
            {
                _3161 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                _3162 = _3161 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3162)
                {
                    frontier_phi_61_pred = _3146;
                    frontier_phi_61_pred_1 = _3151;
                    frontier_phi_61_pred_2 = _3150;
                    frontier_phi_61_pred_3 = _3149;
                    frontier_phi_61_pred_4 = _3148;
                    frontier_phi_61_pred_5 = _3147;
                }
                else
                {
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    uint _3276;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3161;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    for (;;)
                    {
                        uint _3280 = uint(findLSB(_3276)) + (_3152 << 5u);
                        uint _3277 = (_3276 + 4294967295u) & _3276;
                        uint _3282 = _3280 * 48u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3302 = (_3280 * 48u) + 4u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3321 = (_3280 * 48u) + 8u;
                        vec3 _3332 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x));
                        float _3336 = _3296.x - _2854;
                        float _3337 = _3296.y - _2855;
                        float _3338 = _3296.z - _2856;
                        float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                        float _3342 = inversesqrt(_3339);
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3346 = dot(vec3(_1123, _1126, _1129), vec3(_3343, _3344, _3345));
                        float _3351 = 1.0 - (_3339 * _3296.w);
                        float _4717 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3353 = sqrt(_3339) * _3315.w;
                        float _3356 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3346) + _3357;
                        float _3363 = _3353 * _3353;
                        float _3367 = ((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3352) / ((_3363 * 0.699999988079071044921875) + 1.0);
                        float _3371 = (-0.0) - _2854;
                        float _3372 = (-0.0) - _2855;
                        float _3373 = (-0.0) - _2856;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3388 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                        float _3389 = 1.0 - _1198;
                        float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                        float _3397 = _3396 * _3396;
                        float _3398 = _3397 * _3397;
                        float _3399 = _3378 + _3343;
                        float _3400 = _3379 + _3344;
                        float _3401 = _3380 + _3345;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3409 = dot(vec3(_1123, _1126, _1129), vec3(_3378, _3379, _3380));
                        float _4733 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3413 = dot(vec3(_1123, _1126, _1129), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                        float _4744 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                        float _3421 = _3356 * _3397;
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3346) + _3422;
                        float _4755 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3427 = 1.0 - _3397;
                        float _3437 = (0.5 / (((_3426 * ((_3412 * _3427) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3397) * _3412))) * _3426;
                        float _4766 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3448 = (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3420 * _3420) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125))) * _3352;
                        _3205 = (_3367 * _3315.x) + _3273;
                        _3206 = (_3367 * _3315.y) + _3274;
                        _3207 = (_3367 * _3315.z) + _3275;
                        _3202 = (_3448 * _3332.x) + _3270;
                        _3203 = (_3448 * _3332.y) + _3271;
                        _3204 = (_3448 * _3332.z) + _3272;
                        if (_3277 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3277;
                        }
                    }
                    frontier_phi_61_pred = _3202;
                    frontier_phi_61_pred_1 = _3207;
                    frontier_phi_61_pred_2 = _3206;
                    frontier_phi_61_pred_3 = _3205;
                    frontier_phi_61_pred_4 = _3204;
                    frontier_phi_61_pred_5 = _3203;
                }
                _3002 = frontier_phi_61_pred;
                _3012 = frontier_phi_61_pred_1;
                _3010 = frontier_phi_61_pred_2;
                _3008 = frontier_phi_61_pred_3;
                _3006 = frontier_phi_61_pred_4;
                _3004 = frontier_phi_61_pred_5;
                uint _3153 = _3152 + 1u;
                if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3146 = _3002;
                    _3147 = _3004;
                    _3148 = _3006;
                    _3149 = _3008;
                    _3150 = _3010;
                    _3151 = _3012;
                    _3152 = _3153;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
        }
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.z;
        uint _3018 = (_3016 >> 8u) & 15u;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        if (((4294967295u << _3018) & _2900) == 0u)
        {
            _3114 = _3001;
            _3116 = _3003;
            _3118 = _3005;
            _3120 = _3007;
            _3122 = _3009;
            _3124 = _3011;
        }
        else
        {
            float _3139 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
            float _3140 = _3139 * _2854;
            float _3141 = _3139 * _2855;
            float _3142 = _3139 * _2856;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3018 < ((_3016 >> 12u) & 15u))
            {
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3253 = _3001;
                float _3254 = _3003;
                float _3255 = _3005;
                float _3256 = _3007;
                float _3257 = _3009;
                float _3258 = _3011;
                uint _3259 = _3018;
                uint _3268;
                bool _3269;
                for (;;)
                {
                    _3268 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                    _3269 = _3268 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3269)
                    {
                        frontier_phi_67_pred = _3256;
                        frontier_phi_67_pred_1 = _3257;
                        frontier_phi_67_pred_2 = _3258;
                        frontier_phi_67_pred_3 = _3255;
                        frontier_phi_67_pred_4 = _3254;
                        frontier_phi_67_pred_5 = _3253;
                    }
                    else
                    {
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3466 = _3253;
                        float _3467 = _3254;
                        float _3468 = _3255;
                        float _3469 = _3256;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        uint _3472 = _3268;
                        uint _3473;
                        vec4 _3498;
                        float _3499;
                        vec4 _3514;
                        vec3 _3526;
                        vec4 _3541;
                        vec4 _3556;
                        float _3602;
                        bool _3603;
                        for (;;)
                        {
                            uint _3483 = ((_3259 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3472));
                            _3473 = (_3472 + 4294967295u) & _3472;
                            uint _3485 = _3483 * 40u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3499 = _3498.w;
                            uint _3501 = (_3483 * 40u) + 4u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3483 * 40u) + 8u;
                            _3526 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x));
                            uint _3528 = (_3483 * 40u) + 16u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3483 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3483 * 40u) + 24u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3577 = (_3483 * 40u) + 28u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3602 = fma(_2856, _3590.z, fma(_2855, _3590.y, _3590.x * _2854)) + _3590.w;
                            _3603 = !((fma(_2856, _3571.z, fma(_2855, _3571.y, _3571.x * _2854)) + _3571.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3603)
                            {
                                float _3630 = _3498.x - _2854;
                                float _3631 = _3498.y - _2855;
                                float _3632 = _3498.z - _2856;
                                float _3633 = dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632));
                                float _3636 = inversesqrt(_3633);
                                float _3637 = _3636 * _3630;
                                float _3638 = _3636 * _3631;
                                float _3639 = _3636 * _3632;
                                float _3643 = 1.0 - (_3633 / (_3499 * _3499));
                                float _4777 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3648 = sqrt(_3633) * _3514.w;
                                float _3650 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                                float _3651 = _3650 * _3650;
                                float _3654 = ((1.0 - _3651) * dot(vec3(_3637, _3638, _3639), vec3(_1123, _1126, _1129))) + _3651;
                                float _3657 = _3648 * _3648;
                                float _3661 = (fma(_2856, _3541.z, fma(_2855, _3541.y, _3541.x * _2854)) + _3541.w) / _3602;
                                float _3662 = (fma(_2856, _3556.z, fma(_2855, _3556.y, _3556.x * _2854)) + _3556.w) / _3602;
                                float _3666 = 1.0 - dot(vec2(_3661, _3662), vec2(_3661, _3662));
                                float _4793 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3668 = _3667 * (((isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0))) * _3644) / ((_3657 * 0.699999988079071044921875) + 1.0));
                                float _3680 = exp2(log2(1.0 / ((_3657 * 3.5) + 5.0)) * 0.25);
                                float _3681 = 1.0 - _1198;
                                float _3688 = sqrt(1.0 - ((1.0 - (_3681 * _3681)) * (1.0 - (_3680 * _3680))));
                                float _3689 = _3688 * _3688;
                                float _3690 = _3689 * _3689;
                                float _3691 = _3637 - _3140;
                                float _3692 = _3638 - _3141;
                                float _3693 = _3639 - _3142;
                                float _3697 = inversesqrt(dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693)));
                                float _3701 = dot(vec3(_1123, _1126, _1129), vec3((-0.0) - _3140, (-0.0) - _3141, (-0.0) - _3142));
                                float _4804 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3705 = dot(vec3(_1123, _1126, _1129), vec3(_3697 * _3691, _3697 * _3692, _3697 * _3693));
                                float _4815 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3712 = ((_3708 * _3708) * (_3690 + (-1.0))) + 1.0;
                                float _3713 = _3650 * _3689;
                                float _3714 = _3713 * _3713;
                                float _3720 = ((1.0 - _3714) * dot(vec3(_1123, _1126, _1129), vec3(_3637, _3638, _3639))) + _3714;
                                float _4826 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3722 = 1.0 - _3689;
                                float _3732 = (0.5 / (((_3721 * ((_3704 * _3722) + _3689)) + 9.9999999392252902907785028219223e-09) + (((_3721 * _3722) + _3689) * _3704))) * _3721;
                                float _4837 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3742 = (_3667 * _3644) * (((_3690 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3712 * _3712) * ((_3657 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3742 * _3526.x;
                                frontier_phi_73_pred_1 = _3742 * _3526.y;
                                frontier_phi_73_pred_2 = _3668 * _3514.z;
                                frontier_phi_73_pred_3 = _3668 * _3514.y;
                                frontier_phi_73_pred_4 = _3668 * _3514.x;
                                frontier_phi_73_pred_5 = _3742 * _3526.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_73_pred;
                            _3747 = frontier_phi_73_pred_1;
                            _3751 = frontier_phi_73_pred_2;
                            _3750 = frontier_phi_73_pred_3;
                            _3749 = frontier_phi_73_pred_4;
                            _3748 = frontier_phi_73_pred_5;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            if (_3473 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3473;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3456;
                        frontier_phi_67_pred_1 = _3457;
                        frontier_phi_67_pred_2 = _3458;
                        frontier_phi_67_pred_3 = _3455;
                        frontier_phi_67_pred_4 = _3454;
                        frontier_phi_67_pred_5 = _3453;
                    }
                    _3121 = frontier_phi_67_pred;
                    _3123 = frontier_phi_67_pred_1;
                    _3125 = frontier_phi_67_pred_2;
                    _3119 = frontier_phi_67_pred_3;
                    _3117 = frontier_phi_67_pred_4;
                    _3115 = frontier_phi_67_pred_5;
                    uint _3260 = _3259 + 1u;
                    if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3253 = _3115;
                        _3254 = _3117;
                        _3255 = _3119;
                        _3256 = _3121;
                        _3257 = _3123;
                        _3258 = _3125;
                        _3259 = _3260;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3123;
                frontier_phi_55_56_ladder_1 = _3125;
                frontier_phi_55_56_ladder_2 = _3121;
                frontier_phi_55_56_ladder_3 = _3119;
                frontier_phi_55_56_ladder_4 = _3117;
                frontier_phi_55_56_ladder_5 = _3115;
            }
            else
            {
                frontier_phi_55_56_ladder = _3009;
                frontier_phi_55_56_ladder_1 = _3011;
                frontier_phi_55_56_ladder_2 = _3007;
                frontier_phi_55_56_ladder_3 = _3005;
                frontier_phi_55_56_ladder_4 = _3003;
                frontier_phi_55_56_ladder_5 = _3001;
            }
            _3114 = frontier_phi_55_56_ladder_5;
            _3116 = frontier_phi_55_56_ladder_4;
            _3118 = frontier_phi_55_56_ladder_3;
            _3120 = frontier_phi_55_56_ladder_2;
            _3122 = frontier_phi_55_56_ladder;
            _3124 = frontier_phi_55_56_ladder_1;
        }
        float _3129 = isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0));
        _2913 = (_3129 * _3120) + _2349;
        _2915 = (_3129 * _3122) + _2351;
        _2917 = (_3129 * _3124) + _2353;
        _2919 = ((_3114 * _1166) * _3129) + _2694;
        _2921 = ((_3116 * _1168) * _3129) + _2696;
        _2923 = ((_3118 * _1169) * _3129) + _2698;
    }
    else
    {
        _2913 = _2349;
        _2915 = _2351;
        _2917 = _2353;
        _2919 = _2694;
        _2921 = _2696;
        _2923 = _2698;
    }
    float _4853 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _4864 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _4875 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    uint _2943 = _267 + 6u;
    float _2951 = _1104 / cbSceneParam._m0[86u].x;
    float _2952 = _1105 / cbSceneParam._m0[86u].y;
    vec4 _2966 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, (log2((isnan(cbSceneParam._m0[77u].w) ? _1039 : (isnan(_1039) ? cbSceneParam._m0[77u].w : min(_1039, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2968 = _2966.x;
    float _2969 = _2966.y;
    float _2970 = _2966.z;
    float _2971 = _2966.w;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_1039 > cbSceneParam._m0[78u].w)
    {
        float _3026 = isnan(_1039) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1039 : min(cbSceneParam._m0[80u].w, _1039));
        float _3027 = _3026 / _1039;
        float _3038 = _3027 * _1089;
        float _3039 = _1090 * _3027;
        float _3040 = (-0.0) - _3039;
        float _3042 = _3027 * _1091;
        float _3044 = (cbSceneParam._m0[77u].w * _3040) / _3026;
        float _3045 = _3044 + cbSceneParam._m0[79u].w;
        float _3046 = cbSceneParam._m0[79u].w - _3039;
        float _3052 = sqrt(((_3038 * _3038) + (_3039 * _3039)) + (_3042 * _3042));
        float _3055 = (1.0 - (cbSceneParam._m0[77u].w / _3026)) * _3052;
        float _3060 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3062 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3215;
        if (abs((_3040 - _3044) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3215 = ((((_3045 > 0.0) ? exp2(_3060 * _3045) : (2.0 - exp2(_3062 * _3045))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3055;
        }
        else
        {
            float _3175 = 1.0 / cbSceneParam._m0[80u].x;
            float _3176 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : max(_3045, _3046));
            float _3177 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : min(_3045, _3046));
            float _3186 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : min(_3176, 0.0));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            _3215 = ((abs(_3052 / _3040) * cbSceneParam._m0[80u].y) * ((((_3186 - _3187) * 2.0) - ((exp2(_3060 * (isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0)))) - exp2(_3060 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))))) * _3175)) - ((exp2(_3062 * _3186) - exp2(_3062 * _3187)) * _3175))) + (_3055 * cbSceneParam._m0[80u].z);
        }
        vec4 _3217 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, 1.0), 0.0);
        float _3226 = exp2((_3215 * (-1.44269502162933349609375)) * (1.0 - _3217.w));
        float _3227 = log2(_3226);
        float _3243 = log2(_2971);
        _3064 = (exp2(_3243 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].x)) * _3217.x) / cbSceneParam._m0[78u].x)) + _2968;
        _3066 = (exp2(_3243 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].y)) * _3217.y) / cbSceneParam._m0[78u].y)) + _2969;
        _3068 = (exp2(_3243 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].z)) * _3217.z) / cbSceneParam._m0[78u].z)) + _2970;
        _3070 = _3226 * _2971;
    }
    else
    {
        _3064 = _2968;
        _3066 = _2969;
        _3068 = _2970;
        _3070 = _2971;
    }
    float _3082 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3083 = _3082 == 3.0;
    float _3084 = log2(_3070);
    float _3091 = exp2(_3084 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2913 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1182))) + ((_2919 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1988)) * cbPerFrame._m0[3u].x));
    float _3092 = exp2(_3084 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2915 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1182))) + ((_2921 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1988)) * cbPerFrame._m0[3u].x));
    float _3093 = exp2(_3084 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2917 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1182))) + ((_2923 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1988)) * cbPerFrame._m0[3u].x));
    float _3102 = (_3082 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3102 * (_3083 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3064)));
    SV_Target.y = _3102 * (_3083 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3066)));
    SV_Target.z = _3102 * (_3083 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3068)));
    SV_Target.w = cbInstanceData._m0[_2943].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2943].w;
}


