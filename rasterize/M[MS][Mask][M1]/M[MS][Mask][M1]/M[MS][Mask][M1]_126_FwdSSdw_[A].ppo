#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1629;
float _4030;
float _4031;
float _4032;
float _4033;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _357.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4042 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _435 = (_428 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _436 = (_428 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _437 = (_428 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _357.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4053 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _548 = _546.x;
    float _558 = dot(vec4(_548, _546.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _570 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _357.z) * 2.0) - ((((_548 - _558) * cbMtdParam._m0[23u].w) + _558) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4064 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _578 = (_571 * ((_529.x * cbMtdParam._m0[14u].x) - _508)) + _508;
    float _579 = (_571 * ((_529.y * cbMtdParam._m0[14u].y) - _509)) + _509;
    float _580 = (_571 * ((_529.z * cbMtdParam._m0[14u].z) - _510)) + _510;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_598.x - _617) * _428) + _617;
    float _627 = ((_598.y - _618) * _428) + _618;
    float _628 = ((_598.z - _619) * _428) + _619;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_640.x - _626) * _501) + _626;
    float _652 = ((_640.y - _627) * _501) + _627;
    float _653 = ((_640.z - _628) * _501) + _628;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _678 = ((_665.z - _653) * _571) + _653;
    float _681 = ((((_665.x - _651) * _571) + _651) * 2.0) + (-1.0);
    float _683 = ((((_665.y - _652) * _571) + _652) * 2.0) + (-1.0);
    float _684 = dot(vec2(_681, _683), vec2(_681, _683));
    float _4075 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _715 = (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _681;
    float _716 = (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _683;
    float _719 = fma(_689, _259, fma(_716, _266, _715 * _252));
    float _722 = fma(_689, _260, fma(_716, _267, _715 * _253));
    float _725 = fma(_689, _261, fma(_716, _268, _715 * _254));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _758 = _756.x;
    float _759 = 1.0 - _758;
    float _767 = (cbMtdParam._m0[19u].x + dot(vec4(_729 * _719, _729 * _722, _729 * _725, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_758 - _759) * cbMtdParam._m0[24u].z) + _759) * cbMtdParam._m0[21u].z);
    float _4086 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _768 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _770 = (-0.0) - cbMtdParam._m0[24u].x;
    float _772 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _772 : (isnan(_772) ? 1.0 : min(_772, 1.0));
    float _780 = _768 - ((_768 * TEXCOORD_8.x) * _773);
    float _781 = _768 - ((_768 * TEXCOORD_8.y) * _773);
    float _782 = _768 - ((_768 * TEXCOORD_8.z) * _773);
    float _789 = (_780 * (cbMtdParam._m0[17u].x - _578)) + _578;
    float _790 = (_781 * (cbMtdParam._m0[17u].y - _579)) + _579;
    float _791 = (_782 * (cbMtdParam._m0[17u].z - _580)) + _580;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _805 = _803.x;
    float _806 = 1.0 - _805;
    float _832 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_805 - _806) * cbMtdParam._m0[24u].w) + _806) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4107 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _841 = ((((cbMtdParam._m0[10u].x - _789) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _833) + _789;
    float _842 = ((((cbMtdParam._m0[10u].y - _790) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _833) + _790;
    float _843 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _791)) * _833) + _791;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _871 = _869.x;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _871) * _428) + _871;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _889) * _501) + _889;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _906) * _571) + _906;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _923) * cbMtdParam._m0[19u].z) + _923;
    float _929 = _927 - (_927 * _780);
    float _931 = _929 - (_929 * _833);
    float _935 = (cbMtdParam._m0[19u].w * (_703.z - _678)) + _678;
    vec4 _951 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _958 = (_951.x * 2.0) + (-1.0);
    float _959 = (_951.y * 2.0) + (-1.0);
    float _960 = dot(vec2(_958, _959), vec2(_958, _959));
    float _4118 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _968 = ((_951.z - _935) * _780) + _935;
    float _971 = ((cbMtdParam._m0[23u].x - _968) * _833) + _968;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1000 = (_994.x * 2.0) + (-1.0);
    float _1001 = (_994.y * 2.0) + (-1.0);
    float _1002 = dot(vec2(_1000, _1001), vec2(_1000, _1001));
    float _4129 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1017 = ((sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) - _689) * _782) + _689;
    float _1020 = (((_958 - _715) * _780) + _715) + (cbMtdParam._m0[21u].x * _715);
    float _1021 = (((_959 - _716) * _781) + _716) + (cbMtdParam._m0[21u].x * _716);
    float _1032 = (((_1000 - _1020) + (_1020 * cbMtdParam._m0[22u].z)) * _833) + _1020;
    float _1033 = (((_1001 - _1021) + (_1021 * cbMtdParam._m0[22u].z)) * _833) + _1021;
    float _1034 = (_833 * (sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _1017)) + _1017;
    float _1036 = cbMtdParam._m0[22u].x + _703.w;
    float _1039 = fma(_1034, _259, fma(_1033, _266, _1032 * _252));
    float _1042 = fma(_1034, _260, fma(_1033, _267, _1032 * _253));
    float _1045 = fma(_1034, _261, fma(_1033, _268, _1032 * _254));
    float _1049 = inversesqrt(dot(vec3(_1039, _1042, _1045), vec3(_1039, _1042, _1045)));
    float _1050 = _1049 * _1039;
    float _1051 = _1049 * _1042;
    float _1052 = _1049 * _1045;
    float _4140 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _1053 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4162 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4173 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4184 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4195 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _1058 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _1072 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1122 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1112);
    float _1123 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1112);
    float _1124 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1112);
    float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
    float _1129 = _1122 * _1128;
    float _1130 = _1123 * _1128;
    float _1131 = _1124 * _1128;
    vec4 _1136 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1138 = _1136.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1310 = sqrt(((_1122 * _1122) + (_1123 * _1123)) + (_1124 * _1124));
        float _1316 = (cbMatDynParam._m0[5u].x * _1310) + cbMatDynParam._m0[5u].y;
        float _4206 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1321 = (cbMatDynParam._m0[5u].z * _1310) + cbMatDynParam._m0[5u].w;
        float _4217 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) - _1317)) + _1317) < ((_1138 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1149 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1150 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1168 = fma(_1052, cbSceneParam._m0[5u].z, fma(_1051, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1050));
    float _1171 = fma(_1052, cbSceneParam._m0[6u].z, fma(_1051, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1050));
    float _1174 = fma(_1052, cbSceneParam._m0[7u].z, fma(_1051, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1050));
    uint _1187 = _271 + 9u;
    uint _1188 = _1187 + uint(cbMatDynParam._m0[0u].w);
    float _1194 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_1188].x;
    float _1195 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_1188].y;
    float _1196 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_1188].z;
    float _4228 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1199 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _1200 = 1.0 - _1058;
    float _1201 = _1197 * _1200;
    float _1202 = _1198 * _1200;
    float _1203 = _1199 * _1200;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1058;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1058;
    float _1210 = (_1199 + (-0.039999999105930328369140625)) * _1058;
    float _1211 = _1208 + 0.039999999105930328369140625;
    float _1213 = _1209 + 0.039999999105930328369140625;
    float _1214 = _1210 + 0.039999999105930328369140625;
    vec4 _1223 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1149, cbSceneParam._m0[86u].y * _1150));
    float _1227 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * TEXCOORD_5.w) * _1223.x;
    float _1228 = dot(vec3(_1050, _1051, _1052), vec3(_1129, _1130, _1131));
    float _1231 = _1228 * 2.0;
    float _1235 = (_1231 * _1050) - _1129;
    float _1236 = (_1231 * _1051) - _1130;
    float _1237 = (_1231 * _1052) - _1131;
    float _1241 = abs(dot(vec3(_1129, _1130, _1131), vec3(_1050, _1051, _1052)));
    float _4261 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1243 = sqrt(_1053);
    float _1256 = exp2((_1243 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1243 * 3.0));
    float _1262 = (1.0 - _1256) * ((_1243 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1263 = _1256 * _1243;
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1295 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1628;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1353 = fma(_1299, cbModelParam._m0[26u].z, fma(_1295, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291));
        float _1357 = fma(_1299, cbModelParam._m0[27u].z, fma(_1295, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291));
        float _1361 = fma(_1299, cbModelParam._m0[28u].z, fma(_1295, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291));
        float _1386 = _1291 + _1050;
        float _1387 = _1295 + _1051;
        float _1388 = _1299 + _1052;
        float _1398 = fma(_1388, cbModelParam._m0[26u].z, fma(_1387, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1386)) - _1353;
        float _1399 = fma(_1388, cbModelParam._m0[27u].z, fma(_1387, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1386)) - _1357;
        float _1400 = fma(_1388, cbModelParam._m0[28u].z, fma(_1387, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1386)) - _1361;
        float _1404 = inversesqrt(dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400)));
        float _1417 = ((_1404 * _1398) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1353 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1404 * _1399) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1357 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1404 * _1400) / cbModelParam._m0[34u].z) + ((((((_1361 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        float _1456 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1422.x + (-0.5));
        float _1458 = _1456 * (_1422.y + (-0.5));
        float _1459 = _1456 * (_1422.z + (-0.5));
        float _1466 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1429.x + (-0.5));
        float _1468 = _1466 * (_1429.y + (-0.5));
        float _1469 = _1466 * (_1429.z + (-0.5));
        float _1476 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1436.x + (-0.5));
        float _1478 = _1476 * (_1436.y + (-0.5));
        float _1479 = _1476 * (_1436.z + (-0.5));
        float _1486 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1443.x + (-0.5));
        float _1488 = _1486 * (_1443.y + (-0.5));
        float _1489 = _1486 * (_1443.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1510 = (dot(vec3(_1050, _1051, _1052), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1520 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4309 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1522 + 1.0))) + _1527) * _1490;
        float _1537 = _1458 * 0.5;
        float _1538 = _1468 * 0.5;
        float _1539 = _1478 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_1050, _1051, _1052), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4342 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1564 + 1.0))) + _1569) * _1491;
        float _1579 = _1459 * 0.5;
        float _1580 = _1469 * 0.5;
        float _1581 = _1479 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_1050, _1051, _1052), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4375 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1606 + 1.0))) + _1611) * _1492;
        _1628 = _1459;
        _1630 = _1458;
        _1631 = _1457;
        _1632 = _1469;
        _1633 = _1468;
        _1634 = _1467;
        _1635 = _1479;
        _1636 = _1478;
        _1637 = _1477;
        _1638 = _1492;
        _1639 = _1491;
        _1640 = _1490;
        _1641 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1643 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1629;
        _1630 = _1629;
        _1631 = _1629;
        _1632 = _1629;
        _1633 = _1629;
        _1634 = _1629;
        _1635 = _1629;
        _1636 = _1629;
        _1637 = _1629;
        _1638 = _1629;
        _1639 = _1629;
        _1640 = _1629;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1669 = fma(_1299, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291));
        float _1673 = fma(_1299, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291));
        float _1677 = fma(_1299, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291));
        float _1700 = _1291 + _1050;
        float _1701 = _1295 + _1051;
        float _1702 = _1299 + _1052;
        float _1712 = fma(_1702, cbModelParam._m0[30u].z, fma(_1701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1700)) - _1669;
        float _1713 = fma(_1702, cbModelParam._m0[31u].z, fma(_1701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1700)) - _1673;
        float _1714 = fma(_1702, cbModelParam._m0[32u].z, fma(_1701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1700)) - _1677;
        float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
        float _1731 = ((_1718 * _1712) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1669 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1732 = ((_1718 * _1713) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1673 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1733 = ((_1718 * _1714) / cbModelParam._m0[35u].z) + ((((((_1677 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1731, _1732, _1733), 0.0);
        float _1768 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1735.x + (-0.5));
        float _1770 = _1768 * (_1735.y + (-0.5));
        float _1771 = _1768 * (_1735.z + (-0.5));
        float _1778 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1742.x + (-0.5));
        float _1780 = _1778 * (_1742.y + (-0.5));
        float _1781 = _1778 * (_1742.z + (-0.5));
        float _1788 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1789 = _1788 * (_1749.x + (-0.5));
        float _1790 = _1788 * (_1749.y + (-0.5));
        float _1791 = _1788 * (_1749.z + (-0.5));
        float _1798 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1799 = _1798 * (_1756.x + (-0.5));
        float _1800 = _1798 * (_1756.y + (-0.5));
        float _1801 = _1798 * (_1756.z + (-0.5));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1805 = _1769 * 0.5;
        float _1806 = _1779 * 0.5;
        float _1807 = _1789 * 0.5;
        float _1808 = dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807));
        float _1813 = (_1808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1808);
        float _1821 = (dot(vec3(_1050, _1051, _1052), vec3(_1813 * _1805, _1813 * _1806, _1813 * _1807)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1830 = sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1832 = _1831 * 2.0;
        float _1836 = (1.0 - _1831) / (_1831 + 1.0);
        float _4438 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1846 = ((((1.0 - _1837) * (_1832 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1832 + 1.0))) + _1837) * _1802;
        float _1847 = _1770 * 0.5;
        float _1848 = _1780 * 0.5;
        float _1849 = _1790 * 0.5;
        float _1850 = dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849));
        float _1855 = (_1850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1850);
        float _1863 = (dot(vec3(_1050, _1051, _1052), vec3(_1855 * _1847, _1855 * _1848, _1855 * _1849)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1872 = sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1874 = _1873 * 2.0;
        float _1878 = (1.0 - _1873) / (_1873 + 1.0);
        float _4471 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1888 = ((((1.0 - _1879) * (_1874 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1874 + 1.0))) + _1879) * _1803;
        float _1889 = _1771 * 0.5;
        float _1890 = _1781 * 0.5;
        float _1891 = _1791 * 0.5;
        float _1892 = dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891));
        float _1897 = (_1892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1892);
        float _1905 = (dot(vec3(_1050, _1051, _1052), vec3(_1897 * _1889, _1897 * _1890, _1897 * _1891)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1914 = sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891)) / (_1804 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1916 = _1915 * 2.0;
        float _1920 = (1.0 - _1915) / (_1915 + 1.0);
        float _4504 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1930 = ((((1.0 - _1921) * (_1916 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1916 + 1.0))) + _1921) * _1804;
        _1938 = _1771;
        _1939 = _1770;
        _1940 = _1769;
        _1941 = _1781;
        _1942 = _1780;
        _1943 = _1779;
        _1944 = _1791;
        _1945 = _1790;
        _1946 = _1789;
        _1947 = _1804;
        _1948 = _1803;
        _1949 = _1802;
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)));
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)));
        _1952 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)));
    }
    else
    {
        _1938 = _1629;
        _1939 = _1629;
        _1940 = _1629;
        _1941 = _1629;
        _1942 = _1629;
        _1943 = _1629;
        _1944 = _1629;
        _1945 = _1629;
        _1946 = _1629;
        _1947 = _1629;
        _1948 = _1629;
        _1949 = _1629;
        _1950 = 0.0;
        _1951 = 0.0;
        _1952 = 0.0;
    }
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1641)) + _1641;
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1642)) + _1642;
    float _1964 = (cbModelParam._m0[1u].x * (_1952 - _1643)) + _1643;
    float _1985 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1962));
    float _2006 = _1235 * 0.5;
    float _2007 = _1236 * 0.5;
    float _2008 = _1237 * 0.5;
    float _2009 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1940, _1943, _1946, _1949));
    float _2012 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2015 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2049;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2022 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1628, _1632, _1635, _1638));
        float _2026 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1630, _1633, _1636, _1639));
        float _2030 = dot(vec4(_2006, _2007, _2008, 1.0), vec4(_1631, _1634, _1637, _1640));
        float _2037 = dot(vec4(cbModelParam._m0[39u]), vec4(_2006, _2007, _2008, 1.0));
        _2049 = dot(vec3(isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)), isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2037) ? 0.0 : (isnan(0.0) ? _2037 : max(0.0, _2037))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2049 = 1.0;
    }
    float _2060;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2051 = dot(vec4(cbModelParam._m0[40u]), vec4(_2006, _2007, _2008, 1.0));
        _2060 = dot(vec3(isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2051) ? 0.0 : (isnan(0.0) ? _2051 : max(0.0, _2051))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2060 = 1.0;
    }
    float _2064 = (_2060 * cbModelParam._m0[1u].x) + (_2049 * (1.0 - cbModelParam._m0[1u].x));
    float _2074 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1053);
    float _2075 = isnan(_2074) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2074 : min(cbModelParam._m0[25u].z, _2074));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2122 = fma(_1299, cbModelParam._m0[13u].z, fma(_1295, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1291)) + cbModelParam._m0[13u].w;
        float _2126 = fma(_1299, cbModelParam._m0[14u].z, fma(_1295, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1291)) + cbModelParam._m0[14u].w;
        float _2130 = fma(_1299, cbModelParam._m0[15u].z, fma(_1295, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1291)) + cbModelParam._m0[15u].w;
        float _2133 = fma(_1237, cbModelParam._m0[13u].z, fma(_1236, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235));
        float _2136 = fma(_1237, cbModelParam._m0[14u].z, fma(_1236, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235));
        float _2139 = fma(_1237, cbModelParam._m0[15u].z, fma(_1236, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235));
        float _2167;
        if (_2133 > 0.0)
        {
            _2167 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2167 = frontier_phi_17_15_ladder;
        }
        float _2391;
        if (_2136 > 0.0)
        {
            _2391 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2391 = frontier_phi_26_22_ladder;
        }
        float _2648;
        if (_2139 > 0.0)
        {
            _2648 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2648 = frontier_phi_38_33_ladder;
        }
        float _2650 = isnan(_2391) ? _2167 : (isnan(_2167) ? _2391 : min(_2167, _2391));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _2133) + _2122;
        float _2656 = (_2651 * _2136) + _2126;
        float _2657 = (_2651 * _2139) + _2130;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2658;
        float _2662 = _2658 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 > _2662) || ((_2656 < _2660) || ((_2655 < _2660) || (_2655 > _2662))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2657, cbModelParam._m0[9u].z, fma(_2656, cbModelParam._m0[9u].y, _2655 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2657, cbModelParam._m0[10u].z, fma(_2656, cbModelParam._m0[10u].y, _2655 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2657, cbModelParam._m0[11u].z, fma(_2656, cbModelParam._m0[11u].y, _2655 * cbModelParam._m0[11u].x))), _2075);
            frontier_phi_16_38_ladder = _2785.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2785.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2785.x * cbModelParam._m0[1u].y;
        }
        _2155 = frontier_phi_16_38_ladder_2;
        _2157 = frontier_phi_16_38_ladder_1;
        _2159 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2143 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1235, _1236, _1237), _2075);
        _2155 = _2143.x * cbModelParam._m0[1u].y;
        _2157 = _2143.y * cbModelParam._m0[1u].y;
        _2159 = _2143.z * cbModelParam._m0[1u].y;
    }
    float _2163 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1053);
    float _2164 = isnan(_2163) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2163 : min(cbModelParam._m0[25u].w, _2163));
    float _2254;
    float _2256;
    float _2258;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2218 = fma(_1299, cbModelParam._m0[21u].z, fma(_1295, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1291)) + cbModelParam._m0[21u].w;
        float _2222 = fma(_1299, cbModelParam._m0[22u].z, fma(_1295, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1291)) + cbModelParam._m0[22u].w;
        float _2226 = fma(_1299, cbModelParam._m0[23u].z, fma(_1295, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1291)) + cbModelParam._m0[23u].w;
        float _2229 = fma(_1237, cbModelParam._m0[21u].z, fma(_1236, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235));
        float _2232 = fma(_1237, cbModelParam._m0[22u].z, fma(_1236, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235));
        float _2235 = fma(_1237, cbModelParam._m0[23u].z, fma(_1236, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235));
        float _2396;
        if (_2229 > 0.0)
        {
            _2396 = abs((1.0 - _2218) / _2229);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2218 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2396 = frontier_phi_28_24_ladder;
        }
        float _2675;
        if (_2232 > 0.0)
        {
            _2675 = abs((1.0 - _2222) / _2232);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2222 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2675 = frontier_phi_40_35_ladder;
        }
        float _2888;
        if (_2235 > 0.0)
        {
            _2888 = abs((1.0 - _2226) / _2235);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2226 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2888 = frontier_phi_49_46_ladder;
        }
        float _2890 = isnan(_2675) ? _2396 : (isnan(_2396) ? _2675 : min(_2396, _2675));
        float _2891 = isnan(_2888) ? _2890 : (isnan(_2890) ? _2888 : min(_2890, _2888));
        float _2895 = (_2891 * _2229) + _2218;
        float _2896 = (_2891 * _2232) + _2222;
        float _2897 = (_2891 * _2235) + _2226;
        float _2898 = _2891 * 9.9999997473787516355514526367188e-05;
        float _2899 = (-1.0) - _2898;
        float _2901 = _2898 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2897 > _2901) || ((_2897 < _2899) || ((_2896 > _2901) || ((_2896 < _2899) || ((_2895 < _2899) || (_2895 > _2901))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2897, cbModelParam._m0[17u].z, fma(_2896, cbModelParam._m0[17u].y, _2895 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2897, cbModelParam._m0[18u].z, fma(_2896, cbModelParam._m0[18u].y, _2895 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2897, cbModelParam._m0[19u].z, fma(_2896, cbModelParam._m0[19u].y, _2895 * cbModelParam._m0[19u].x))), _2164);
            frontier_phi_25_49_ladder = _3096.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3096.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3096.x * cbModelParam._m0[1u].z;
        }
        _2254 = frontier_phi_25_49_ladder_2;
        _2256 = frontier_phi_25_49_ladder_1;
        _2258 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2238 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1235, _1236, _1237), _2164);
        _2254 = _2238.x * cbModelParam._m0[1u].z;
        _2256 = _2238.y * cbModelParam._m0[1u].z;
        _2258 = _2238.z * cbModelParam._m0[1u].z;
    }
    float _2271 = (((_1262 * _1211) + _1263) * _1227) * ((cbModelParam._m0[1u].w * (_2254 - _2155)) + _2155);
    float _2273 = (((_1262 * _1213) + _1263) * _1227) * ((cbModelParam._m0[1u].w * (_2256 - _2157)) + _2157);
    float _2275 = (((_1262 * _1214) + _1263) * _1227) * ((cbModelParam._m0[1u].w * (_2258 - _2159)) + _2159);
    float _2278 = fma(_2275, cbSceneParam._m0[89u].z, fma(_2273, cbSceneParam._m0[89u].y, _2271 * cbSceneParam._m0[89u].x));
    float _2281 = fma(_2275, cbSceneParam._m0[90u].z, fma(_2273, cbSceneParam._m0[90u].y, _2271 * cbSceneParam._m0[90u].x));
    float _2284 = fma(_2275, cbSceneParam._m0[91u].z, fma(_2273, cbSceneParam._m0[91u].y, _2271 * cbSceneParam._m0[91u].x));
    vec4 _2292 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1149, _1150));
    float _2294 = _2292.w;
    float _2306 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2294);
    float _2307 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2294);
    float _2308 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2294);
    uvec4 _2312 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2314 = _2312.x * 14u;
    uint _2315 = _2314 + 13u;
    float _2322 = _1227 + (-1.0);
    float _2327 = (cbLight._m0[_2315].x * _2322) + 1.0;
    float _2328 = (cbLight._m0[_2315].y * _2322) + 1.0;
    float _2329 = (cbLight._m0[_2315].z * _2322) + 1.0;
    float _2330 = (cbLight._m0[_2315].w * _2322) + 1.0;
    uint _2331 = _2314 + 5u;
    float _2337 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2341 = _2314 + 4u;
    float _2350 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2354 = _2314 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_1050, _1051, _1052));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_1050, _1051, _1052));
    float _4640 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4651 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2306) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2307) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2308) * _2350) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2314 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2390)
    {
        _2401 = _2382;
        _2403 = _2383;
        _2405 = _2384;
    }
    else
    {
        uint _2409 = _2314 + 6u;
        float _2425 = (dot(vec3(cbLight._m0[_2314 + 2u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4662 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2428 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2401 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2382;
        _2403 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2383;
        _2405 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2384;
    }
    bool _2408 = _2388.y == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2408)
    {
        _2446 = _2401;
        _2448 = _2403;
        _2450 = _2405;
    }
    else
    {
        uint _2619 = _2314 + 7u;
        float _2635 = (dot(vec3(cbLight._m0[_2314 + 3u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2636 = _2635 * _2635;
        float _4678 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2637 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2638 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2446 = (((cbLight._m0[_2619].x * 0.3183098733425140380859375) * _2637) * _2638) + _2401;
        _2448 = (((cbLight._m0[_2619].y * 0.3183098733425140380859375) * _2637) * _2638) + _2403;
        _2450 = (((cbLight._m0[_2619].z * 0.3183098733425140380859375) * _2637) * _2638) + _2405;
    }
    uint _2453 = _2314 + 8u;
    float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _1053) * 0.949999988079071044921875);
    float _2467 = _2466 * _2466;
    float _2468 = cbLight._m0[_2314].x + _1129;
    float _2469 = cbLight._m0[_2314].y + _1130;
    float _2470 = cbLight._m0[_2314].z + _1131;
    float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
    float _2475 = _2474 * _2468;
    float _2476 = _2474 * _2469;
    float _2477 = _2474 * _2470;
    float _2478 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2314].xyz));
    float _4694 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _4705 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _2482 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2483 = dot(vec3(_1050, _1051, _1052), vec3(_2475, _2476, _2477));
    float _4716 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2475, _2476, _2477));
    float _4727 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2467 * _2467;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2504 = 0.959999978542327880859375 - _1208;
    float _2506 = 0.959999978542327880859375 - _1209;
    float _2507 = 0.959999978542327880859375 - _1210;
    float _2514 = 1.0 - _2467;
    float _2525 = (0.5 / (((_2482 * ((_2481 * _2514) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2514) + _2467) * _2481))) * _2481;
    float _4738 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    uint _2541 = _2314 + 9u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _1053) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2354].x + _1129;
    float _2555 = cbLight._m0[_2354].y + _1130;
    float _2556 = cbLight._m0[_2354].z + _1131;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2354].xyz));
    float _4749 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2568 = dot(vec3(_1050, _1051, _1052), vec3(_2561, _2562, _2563));
    float _4760 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2561, _2562, _2563));
    float _4771 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2553 * _2553;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
    float _2594 = 1.0 - _2553;
    float _2604 = (0.5 / (((_2482 * ((_2567 * _2594) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2594) + _2553) * _2567))) * _2567;
    float _4782 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    float _2616 = (((((_2587 * _2504) + _1211) * cbLight._m0[_2541].x) * _2606) * _2337) + ((((cbLight._m0[_2453].x * _2306) * ((_2503 * _2504) + _1211)) * _2527) * _2350);
    float _2617 = (((((_2587 * _2506) + _1213) * cbLight._m0[_2541].y) * _2606) * _2337) + ((((cbLight._m0[_2453].y * _2307) * ((_2503 * _2506) + _1213)) * _2527) * _2350);
    float _2618 = (((((_2587 * _2507) + _1214) * cbLight._m0[_2541].z) * _2606) * _2337) + ((((cbLight._m0[_2453].z * _2308) * ((_2503 * _2507) + _1214)) * _2527) * _2350);
    float _2680;
    float _2682;
    float _2684;
    if (_2390)
    {
        _2680 = _2616;
        _2682 = _2617;
        _2684 = _2618;
    }
    else
    {
        uint _2686 = _2314 + 2u;
        uint _2690 = _2314 + 10u;
        float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2686].w)) * _1053) * 0.949999988079071044921875);
        float _2705 = _2704 * _2704;
        float _2706 = cbLight._m0[_2686].x + _1129;
        float _2707 = cbLight._m0[_2686].y + _1130;
        float _2708 = cbLight._m0[_2686].z + _1131;
        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
        float _2713 = _2712 * _2706;
        float _2714 = _2712 * _2707;
        float _2715 = _2712 * _2708;
        float _2716 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2686].xyz));
        float _4793 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2720 = dot(vec3(_1050, _1051, _1052), vec3(_2713, _2714, _2715));
        float _4804 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2724 = dot(vec3(cbLight._m0[_2686].xyz), vec3(_2713, _2714, _2715));
        float _4815 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2728 = _2705 * _2705;
        float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
        float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) * 5.0);
        float _2746 = 1.0 - _2705;
        float _2756 = (0.5 / (((_2482 * ((_2719 * _2746) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2746) + _2705) * _2719))) * _2719;
        float _4826 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2680 = (((((_2739 * _2504) + _1211) * cbLight._m0[_2690].x) * _2758) * _2759) + _2616;
        _2682 = (((((_2739 * _2506) + _1213) * cbLight._m0[_2690].y) * _2758) * _2759) + _2617;
        _2684 = (((((_2739 * _2507) + _1214) * cbLight._m0[_2690].z) * _2758) * _2759) + _2618;
    }
    float _2794;
    float _2796;
    float _2798;
    if (_2408)
    {
        _2794 = _2680;
        _2796 = _2682;
        _2798 = _2684;
    }
    else
    {
        uint _2805 = _2314 + 3u;
        uint _2809 = _2314 + 11u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _1053) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _1129;
        float _2826 = cbLight._m0[_2805].y + _1130;
        float _2827 = cbLight._m0[_2805].z + _1131;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2805].xyz));
        float _4842 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2839 = dot(vec3(_1050, _1051, _1052), vec3(_2832, _2833, _2834));
        float _4853 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4864 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) * 5.0);
        float _2865 = 1.0 - _2824;
        float _2875 = (0.5 / (((_2482 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2865) + _2824) * _2838))) * _2838;
        float _4875 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2794 = (((((_2858 * _2504) + _1211) * cbLight._m0[_2809].x) * _2877) * _2878) + _2680;
        _2796 = (((((_2858 * _2506) + _1213) * cbLight._m0[_2809].y) * _2877) * _2878) + _2682;
        _2798 = (((((_2858 * _2507) + _1214) * cbLight._m0[_2809].z) * _2877) * _2878) + _2684;
    }
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_2312.y == 0u)
    {
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2953;
        float _2955 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2953;
        float _2956 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2953;
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.x;
        uint _2980 = uint((float(_2968.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1150) / _2969))) + floor(float(uint(cbSceneParam._m0[85u].x * _1149) / _2969)));
        float _2990 = (log2(_2956 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2991 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        uint _2994 = uint(isnan(14.0) ? _2991 : (isnan(_2991) ? 14.0 : min(_2991, 14.0)));
        uvec4 _2999 = texelFetch(g_lightClusterGridBuffer, int(((_2994 << 2u) + (_2980 << 6u)) >> 2u));
        uint _3000 = _2999.x;
        uint _3001 = _2968.z;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((((1u << ((_3001 >> 4u) & 15u)) + 4294967295u) & _3000) == 0u) || ((_3001 & 240u) == 0u))
        {
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
        }
        else
        {
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            uint _3259 = 0u;
            uint _3268;
            bool _3269;
            for (;;)
            {
                _3268 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                _3269 = _3268 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3269)
                {
                    frontier_phi_66_pred = _3253;
                    frontier_phi_66_pred_1 = _3258;
                    frontier_phi_66_pred_2 = _3257;
                    frontier_phi_66_pred_3 = _3256;
                    frontier_phi_66_pred_4 = _3255;
                    frontier_phi_66_pred_5 = _3254;
                }
                else
                {
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    uint _3404;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3268;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    for (;;)
                    {
                        uint _3408 = uint(findLSB(_3404)) + (_3259 << 5u);
                        uint _3405 = (_3404 + 4294967295u) & _3404;
                        uint _3410 = _3408 * 48u;
                        vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3430 = (_3408 * 48u) + 4u;
                        vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3449 = (_3408 * 48u) + 8u;
                        vec3 _3460 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x));
                        float _3464 = _3424.x - _2954;
                        float _3465 = _3424.y - _2955;
                        float _3466 = _3424.z - _2956;
                        float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                        float _3470 = inversesqrt(_3467);
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3474 = dot(vec3(_1168, _1171, _1174), vec3(_3471, _3472, _3473));
                        float _3479 = 1.0 - (_3467 * _3424.w);
                        float _4901 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3481 = sqrt(_3467) * _3443.w;
                        float _3484 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3474) + _3485;
                        float _3491 = _3481 * _3481;
                        float _3495 = ((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3480) / ((_3491 * 0.699999988079071044921875) + 1.0);
                        float _3499 = (-0.0) - _2954;
                        float _3500 = (-0.0) - _2955;
                        float _3501 = (-0.0) - _2956;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3516 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                        float _3517 = 1.0 - _1243;
                        float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                        float _3525 = _3524 * _3524;
                        float _3526 = _3525 * _3525;
                        float _3527 = _3506 + _3471;
                        float _3528 = _3507 + _3472;
                        float _3529 = _3508 + _3473;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3537 = dot(vec3(_1168, _1171, _1174), vec3(_3506, _3507, _3508));
                        float _4917 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3541 = dot(vec3(_1168, _1171, _1174), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                        float _4928 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                        float _3549 = _3484 * _3525;
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3474) + _3550;
                        float _4939 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3555 = 1.0 - _3525;
                        float _3565 = (0.5 / (((_3554 * ((_3540 * _3555) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3525) * _3540))) * _3554;
                        float _4950 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3576 = (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) / ((_3548 * _3548) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125))) * _3480;
                        _3328 = (_3495 * _3443.x) + _3401;
                        _3329 = (_3495 * _3443.y) + _3402;
                        _3330 = (_3495 * _3443.z) + _3403;
                        _3325 = (_3576 * _3460.x) + _3398;
                        _3326 = (_3576 * _3460.y) + _3399;
                        _3327 = (_3576 * _3460.z) + _3400;
                        if (_3405 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3405;
                        }
                    }
                    frontier_phi_66_pred = _3325;
                    frontier_phi_66_pred_1 = _3330;
                    frontier_phi_66_pred_2 = _3329;
                    frontier_phi_66_pred_3 = _3328;
                    frontier_phi_66_pred_4 = _3327;
                    frontier_phi_66_pred_5 = _3326;
                }
                _3102 = frontier_phi_66_pred;
                _3112 = frontier_phi_66_pred_1;
                _3110 = frontier_phi_66_pred_2;
                _3108 = frontier_phi_66_pred_3;
                _3106 = frontier_phi_66_pred_4;
                _3104 = frontier_phi_66_pred_5;
                uint _3260 = _3259 + 1u;
                if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3253 = _3102;
                    _3254 = _3104;
                    _3255 = _3106;
                    _3256 = _3108;
                    _3257 = _3110;
                    _3258 = _3112;
                    _3259 = _3260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
        }
        uvec4 _3115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3116 = _3115.z;
        uint _3118 = (_3116 >> 8u) & 15u;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        if (((4294967295u << _3118) & _3000) == 0u)
        {
            _3221 = _3101;
            _3223 = _3103;
            _3225 = _3105;
            _3227 = _3107;
            _3229 = _3109;
            _3231 = _3111;
        }
        else
        {
            float _3246 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
            float _3247 = _3246 * _2954;
            float _3248 = _3246 * _2955;
            float _3249 = _3246 * _2956;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3118 < ((_3116 >> 12u) & 15u))
            {
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3381 = _3101;
                float _3382 = _3103;
                float _3383 = _3105;
                float _3384 = _3107;
                float _3385 = _3109;
                float _3386 = _3111;
                uint _3387 = _3118;
                uint _3396;
                bool _3397;
                for (;;)
                {
                    _3396 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3387 << 2u)) >> 2u)).x;
                    _3397 = _3396 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3397)
                    {
                        frontier_phi_77_pred = _3386;
                        frontier_phi_77_pred_1 = _3385;
                        frontier_phi_77_pred_2 = _3384;
                        frontier_phi_77_pred_3 = _3383;
                        frontier_phi_77_pred_4 = _3382;
                        frontier_phi_77_pred_5 = _3381;
                    }
                    else
                    {
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        float _3607 = _3385;
                        float _3608 = _3386;
                        uint _3609 = _3396;
                        uint _3610;
                        vec4 _3635;
                        float _3636;
                        vec4 _3651;
                        vec3 _3663;
                        vec4 _3678;
                        vec4 _3693;
                        float _3739;
                        bool _3740;
                        for (;;)
                        {
                            uint _3620 = ((_3387 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3609));
                            _3610 = (_3609 + 4294967295u) & _3609;
                            uint _3622 = _3620 * 40u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3636 = _3635.w;
                            uint _3638 = (_3620 * 40u) + 4u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3620 * 40u) + 8u;
                            _3663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x));
                            uint _3665 = (_3620 * 40u) + 16u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3620 * 40u) + 20u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3620 * 40u) + 24u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3714 = (_3620 * 40u) + 28u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            _3739 = fma(_2956, _3727.z, fma(_2955, _3727.y, _3727.x * _2954)) + _3727.w;
                            _3740 = !((fma(_2956, _3708.z, fma(_2955, _3708.y, _3708.x * _2954)) + _3708.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3740)
                            {
                                float _3767 = _3635.x - _2954;
                                float _3768 = _3635.y - _2955;
                                float _3769 = _3635.z - _2956;
                                float _3770 = dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769));
                                float _3773 = inversesqrt(_3770);
                                float _3774 = _3773 * _3767;
                                float _3775 = _3773 * _3768;
                                float _3776 = _3773 * _3769;
                                float _3780 = 1.0 - (_3770 / (_3636 * _3636));
                                float _4961 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3785 = sqrt(_3770) * _3651.w;
                                float _3787 = 1.39999997615814208984375 / (_3785 + 1.39999997615814208984375);
                                float _3788 = _3787 * _3787;
                                float _3791 = ((1.0 - _3788) * dot(vec3(_3774, _3775, _3776), vec3(_1168, _1171, _1174))) + _3788;
                                float _3794 = _3785 * _3785;
                                float _3798 = (fma(_2956, _3678.z, fma(_2955, _3678.y, _3678.x * _2954)) + _3678.w) / _3739;
                                float _3799 = (fma(_2956, _3693.z, fma(_2955, _3693.y, _3693.x * _2954)) + _3693.w) / _3739;
                                float _3803 = 1.0 - dot(vec2(_3798, _3799), vec2(_3798, _3799));
                                float _4977 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3805 = _3804 * (((isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0))) * _3781) / ((_3794 * 0.699999988079071044921875) + 1.0));
                                float _3817 = exp2(log2(1.0 / ((_3794 * 3.5) + 5.0)) * 0.25);
                                float _3818 = 1.0 - _1243;
                                float _3825 = sqrt(1.0 - ((1.0 - (_3818 * _3818)) * (1.0 - (_3817 * _3817))));
                                float _3826 = _3825 * _3825;
                                float _3827 = _3826 * _3826;
                                float _3828 = _3774 - _3247;
                                float _3829 = _3775 - _3248;
                                float _3830 = _3776 - _3249;
                                float _3834 = inversesqrt(dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830)));
                                float _3838 = dot(vec3(_1168, _1171, _1174), vec3((-0.0) - _3247, (-0.0) - _3248, (-0.0) - _3249));
                                float _4988 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3842 = dot(vec3(_1168, _1171, _1174), vec3(_3834 * _3828, _3834 * _3829, _3834 * _3830));
                                float _4999 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3849 = ((_3845 * _3845) * (_3827 + (-1.0))) + 1.0;
                                float _3850 = _3787 * _3826;
                                float _3851 = _3850 * _3850;
                                float _3857 = ((1.0 - _3851) * dot(vec3(_1168, _1171, _1174), vec3(_3774, _3775, _3776))) + _3851;
                                float _5010 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3859 = 1.0 - _3826;
                                float _3869 = (0.5 / (((_3858 * ((_3841 * _3859) + _3826)) + 9.9999999392252902907785028219223e-09) + (((_3858 * _3859) + _3826) * _3841))) * _3858;
                                float _5021 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3879 = (_3804 * _3781) * (((_3827 * 3.1415927410125732421875) * (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) / ((_3849 * _3849) * ((_3794 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3805 * _3651.y;
                                frontier_phi_83_pred_1 = _3805 * _3651.x;
                                frontier_phi_83_pred_2 = _3879 * _3663.z;
                                frontier_phi_83_pred_3 = _3879 * _3663.y;
                                frontier_phi_83_pred_4 = _3879 * _3663.x;
                                frontier_phi_83_pred_5 = _3805 * _3651.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_83_pred;
                            _3886 = frontier_phi_83_pred_1;
                            _3885 = frontier_phi_83_pred_2;
                            _3884 = frontier_phi_83_pred_3;
                            _3883 = frontier_phi_83_pred_4;
                            _3888 = frontier_phi_83_pred_5;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            if (_3610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3610;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3595;
                        frontier_phi_77_pred_1 = _3594;
                        frontier_phi_77_pred_2 = _3593;
                        frontier_phi_77_pred_3 = _3592;
                        frontier_phi_77_pred_4 = _3591;
                        frontier_phi_77_pred_5 = _3590;
                    }
                    _3232 = frontier_phi_77_pred;
                    _3230 = frontier_phi_77_pred_1;
                    _3228 = frontier_phi_77_pred_2;
                    _3226 = frontier_phi_77_pred_3;
                    _3224 = frontier_phi_77_pred_4;
                    _3222 = frontier_phi_77_pred_5;
                    uint _3388 = _3387 + 1u;
                    if (_3388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3381 = _3222;
                        _3382 = _3224;
                        _3383 = _3226;
                        _3384 = _3228;
                        _3385 = _3230;
                        _3386 = _3232;
                        _3387 = _3388;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3226;
                frontier_phi_58_59_ladder_1 = _3232;
                frontier_phi_58_59_ladder_2 = _3230;
                frontier_phi_58_59_ladder_3 = _3228;
                frontier_phi_58_59_ladder_4 = _3224;
                frontier_phi_58_59_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_58_59_ladder = _3105;
                frontier_phi_58_59_ladder_1 = _3111;
                frontier_phi_58_59_ladder_2 = _3109;
                frontier_phi_58_59_ladder_3 = _3107;
                frontier_phi_58_59_ladder_4 = _3103;
                frontier_phi_58_59_ladder_5 = _3101;
            }
            _3221 = frontier_phi_58_59_ladder_5;
            _3223 = frontier_phi_58_59_ladder_4;
            _3225 = frontier_phi_58_59_ladder;
            _3227 = frontier_phi_58_59_ladder_3;
            _3229 = frontier_phi_58_59_ladder_2;
            _3231 = frontier_phi_58_59_ladder_1;
        }
        float _3236 = isnan(1.0) ? _1227 : (isnan(_1227) ? 1.0 : min(_1227, 1.0));
        _3013 = (_3236 * _3227) + _2446;
        _3015 = (_3236 * _3229) + _2448;
        _3017 = (_3236 * _3231) + _2450;
        _3019 = ((_3221 * _1211) * _3236) + _2794;
        _3021 = ((_3223 * _1213) * _3236) + _2796;
        _3023 = ((_3225 * _1214) * _3236) + _2798;
    }
    else
    {
        _3013 = _2446;
        _3015 = _2448;
        _3017 = _2450;
        _3019 = _2794;
        _3021 = _2796;
        _3023 = _2798;
    }
    float _5037 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _5048 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _5059 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _3040 = ((isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3013 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1227))) + ((_3019 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    float _3041 = ((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3015 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1227))) + ((_3021 + ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    float _3042 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3017 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1227))) + ((_3023 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2064)) * cbPerFrame._m0[3u].x);
    uint _3043 = _271 + 6u;
    float _3051 = _1149 / cbSceneParam._m0[86u].x;
    float _3052 = _1150 / cbSceneParam._m0[86u].y;
    vec4 _3066 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, (log2((isnan(cbSceneParam._m0[77u].w) ? _1072 : (isnan(_1072) ? cbSceneParam._m0[77u].w : min(_1072, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3068 = _3066.x;
    float _3069 = _3066.y;
    float _3070 = _3066.z;
    float _3071 = _3066.w;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_1072 > cbSceneParam._m0[78u].w)
    {
        float _3126 = isnan(_1072) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1072 : min(cbSceneParam._m0[80u].w, _1072));
        float _3127 = _3126 / _1072;
        float _3138 = _3127 * _1122;
        float _3139 = _1123 * _3127;
        float _3140 = (-0.0) - _3139;
        float _3141 = _3127 * _1124;
        float _3143 = (cbSceneParam._m0[77u].w * _3140) / _3126;
        float _3144 = _3143 + cbSceneParam._m0[79u].w;
        float _3145 = cbSceneParam._m0[79u].w - _3139;
        float _3151 = sqrt(((_3138 * _3138) + (_3139 * _3139)) + (_3141 * _3141));
        float _3154 = (1.0 - (cbSceneParam._m0[77u].w / _3126)) * _3151;
        float _3159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3338;
        if (abs((_3140 - _3143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3338 = ((((_3144 > 0.0) ? exp2(_3159 * _3144) : (2.0 - exp2(_3161 * _3144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3154;
        }
        else
        {
            float _3282 = 1.0 / cbSceneParam._m0[80u].x;
            float _3283 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : max(_3144, _3145));
            float _3284 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : min(_3144, _3145));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            _3338 = ((abs(_3151 / _3140) * cbSceneParam._m0[80u].y) * ((((_3293 - _3294) * 2.0) - ((exp2(_3159 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0)))) - exp2(_3159 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))))) * _3282)) - ((exp2(_3161 * _3293) - exp2(_3161 * _3294)) * _3282))) + (_3154 * cbSceneParam._m0[80u].z);
        }
        vec4 _3340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, 1.0), 0.0);
        float _3349 = exp2((_3338 * (-1.44269502162933349609375)) * (1.0 - _3340.w));
        float _3350 = log2(_3349);
        float _3366 = log2(_3071);
        _3163 = (exp2(_3366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].x)) * _3340.x) / cbSceneParam._m0[78u].x)) + _3068;
        _3165 = (exp2(_3366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].y)) * _3340.y) / cbSceneParam._m0[78u].y)) + _3069;
        _3167 = (exp2(_3366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].z)) * _3340.z) / cbSceneParam._m0[78u].z)) + _3070;
        _3169 = _3349 * _3071;
    }
    else
    {
        _3163 = _3068;
        _3165 = _3069;
        _3167 = _3070;
        _3169 = _3071;
    }
    bool _3376;
    vec4 _3179;
    vec4 _3201;
    float _3203;
    float _3207;
    float _3208;
    float _3209;
    float _3210;
    bool _3220;
    for (;;)
    {
        _3179 = cbMatDynParam._m0[0u];
        float _3181 = roundEven(_3179.y);
        bool _3182 = _3181 == 3.0;
        float _3183 = log2(_3169);
        float _3190 = exp2(_3183 * cbSceneParam._m0[78u].x) * _3040;
        float _3191 = exp2(_3183 * cbSceneParam._m0[78u].y) * _3041;
        float _3192 = exp2(_3183 * cbSceneParam._m0[78u].z) * _3042;
        float _3199 = _1138 + (-0.5);
        _3201 = cbMtdParam._m0[1u];
        _3203 = _3201.y * _3199;
        float _3206 = (_3181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3207 = _3206 * (_3182 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3163)));
        _3208 = _3206 * (_3182 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3165)));
        _3209 = _3206 * (_3182 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3167)));
        _3210 = _3199 * 0.999000012874603271484375;
        _3220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3220)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3210) < 0.5)
            {
                _3376 = true;
                break;
            }
        }
        uint _3317 = _1187 + uint(_3179.w);
        if ((cbInstanceData._m0[_3317].w < 1.0) && ((cbInstanceData._m0[_3317].w + _3210) < 0.5))
        {
            _3376 = true;
            break;
        }
        if ((_3203 + 1.0) < _3201.x)
        {
            _3376 = true;
            break;
        }
        _3376 = false;
        break;
    }
    float _3581;
    if (_3376)
    {
        discard_state = true;
        _3581 = 0.0;
    }
    else
    {
        _3581 = cbInstanceData._m0[_3043].w;
    }
    SV_Target.x = _3207;
    SV_Target.y = _3208;
    SV_Target.z = _3209;
    SV_Target.w = _3581;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3043].w;
    discard_exit();
}


