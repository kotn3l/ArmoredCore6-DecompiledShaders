#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1489;
float _3867;
float _3868;
float _3869;
float _3870;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3879 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3890 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3901 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3912 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _453 = (_446 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _454 = (_446 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _455 = (_446 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3923 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _538;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _631 = _627.z;
    float _638 = ((_610.x - _629) * _446) + _629;
    float _639 = ((_610.y - _630) * _446) + _630;
    float _640 = ((_610.z - _631) * _446) + _631;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _665 = ((_652.z - _640) * _519) + _640;
    float _668 = ((((_652.x - _638) * _519) + _638) * 2.0) + (-1.0);
    float _669 = ((((_652.y - _639) * _519) + _639) * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3934 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _705 = (_668 + ((((_585.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_693.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _706 = (_669 + ((((_585.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_693.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _709 = fma(_675, _247, fma(_706, _254, _705 * _240));
    float _712 = fma(_675, _248, fma(_706, _255, _705 * _241));
    float _715 = fma(_675, _249, fma(_706, _256, _705 * _242));
    float _719 = inversesqrt(dot(vec3(_709, _712, _715), vec3(_709, _712, _715)));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _748 = _746.x;
    float _749 = 1.0 - _748;
    float _758 = (cbMtdParam._m0[19u].x + dot(vec4(_719 * _709, _719 * _712, _719 * _715, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_748 - _749) * cbMtdParam._m0[24u].z) + _749) * cbMtdParam._m0[21u].z);
    float _3945 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _759 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _766 = (_759 * ((_566.x * cbMtdParam._m0[18u].x) - _545)) + _545;
    float _767 = (_759 * ((_566.y * cbMtdParam._m0[18u].y) - _546)) + _546;
    float _768 = (_759 * ((_566.z * cbMtdParam._m0[18u].z) - _547)) + _547;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _796 = _794.x;
    float _814 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _796) * _446) + _796;
    float _831 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _814) * _519) + _814;
    float _835 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _831) * cbMtdParam._m0[19u].z) + _831;
    float _837 = _835 - (_835 * _759);
    float _842 = (((_585.z - _665) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _665;
    float _846 = ((_693.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _866 = (_859.x * 2.0) + (-1.0);
    float _867 = (_859.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _3956 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _876 = ((_859.z - _846) * _759) + _846;
    float _886 = ((sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) - _675) * _759) + _675;
    float _889 = (((_866 - _705) * _759) + _705) + (cbMtdParam._m0[21u].x * _705);
    float _890 = (((_867 - _706) * _759) + _706) + (cbMtdParam._m0[21u].x * _706);
    float _894 = cbMtdParam._m0[22u].x + _693.w;
    float _897 = fma(_886, _247, fma(_890, _254, _889 * _240));
    float _900 = fma(_886, _248, fma(_890, _255, _889 * _241));
    float _903 = fma(_886, _249, fma(_890, _256, _889 * _242));
    float _907 = inversesqrt(dot(vec3(_897, _900, _903), vec3(_897, _900, _903)));
    float _908 = _907 * _897;
    float _909 = _907 * _900;
    float _910 = _907 * _903;
    float _3967 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _911 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _3989 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4000 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4011 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4022 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _916 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _930 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _981 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _971);
    float _982 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _971);
    float _983 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _971);
    float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
    float _988 = _981 * _987;
    float _989 = _982 * _987;
    float _990 = _983 * _987;
    vec4 _995 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _997 = _995.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1169 = sqrt(((_981 * _981) + (_982 * _982)) + (_983 * _983));
        float _1175 = (cbMatDynParam._m0[5u].x * _1169) + cbMatDynParam._m0[5u].y;
        float _4033 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1180 = (cbMatDynParam._m0[5u].z * _1169) + cbMatDynParam._m0[5u].w;
        float _4044 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) - _1176)) + _1176) < ((_997 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1008 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1009 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1027 = fma(_910, cbSceneParam._m0[5u].z, fma(_909, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _908));
    float _1030 = fma(_910, cbSceneParam._m0[6u].z, fma(_909, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _908));
    float _1033 = fma(_910, cbSceneParam._m0[7u].z, fma(_909, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _908));
    uint _1046 = _280 + 9u;
    uint _1047 = _1046 + uint(cbMatDynParam._m0[0u].w);
    float _1053 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_1047].x;
    float _1054 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1047].y;
    float _1055 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1047].z;
    float _4055 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1059 = 1.0 - _916;
    float _1060 = _1056 * _1059;
    float _1061 = _1057 * _1059;
    float _1062 = _1058 * _1059;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _916;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _916;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _916;
    float _1070 = _1067 + 0.039999999105930328369140625;
    float _1072 = _1068 + 0.039999999105930328369140625;
    float _1073 = _1069 + 0.039999999105930328369140625;
    vec4 _1082 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1008, cbSceneParam._m0[86u].y * _1009));
    float _1086 = ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * TEXCOORD_5.w) * _1082.x;
    float _1087 = dot(vec3(_908, _909, _910), vec3(_988, _989, _990));
    float _1090 = _1087 * 2.0;
    float _1094 = (_1090 * _908) - _988;
    float _1095 = (_1090 * _909) - _989;
    float _1096 = (_1090 * _910) - _990;
    float _1100 = abs(dot(vec3(_988, _989, _990), vec3(_908, _909, _910)));
    float _4088 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1102 = sqrt(_911);
    float _1115 = exp2((_1102 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1102 * 3.0));
    float _1121 = (1.0 - _1115) * ((_1102 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1122 = _1115 * _1102;
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1488;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1213 = fma(_1158, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150));
        float _1217 = fma(_1158, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150));
        float _1221 = fma(_1158, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150));
        float _1246 = _1150 + _908;
        float _1247 = _1154 + _909;
        float _1248 = _1158 + _910;
        float _1258 = fma(_1248, cbModelParam._m0[26u].z, fma(_1247, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1246)) - _1213;
        float _1259 = fma(_1248, cbModelParam._m0[27u].z, fma(_1247, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1246)) - _1217;
        float _1260 = fma(_1248, cbModelParam._m0[28u].z, fma(_1247, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1246)) - _1221;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1213 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1217 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[34u].z) + ((((((_1221 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1316 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1282.x + (-0.5));
        float _1318 = _1316 * (_1282.y + (-0.5));
        float _1319 = _1316 * (_1282.z + (-0.5));
        float _1326 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1289.x + (-0.5));
        float _1328 = _1326 * (_1289.y + (-0.5));
        float _1329 = _1326 * (_1289.z + (-0.5));
        float _1336 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1296.x + (-0.5));
        float _1338 = _1336 * (_1296.y + (-0.5));
        float _1339 = _1336 * (_1296.z + (-0.5));
        float _1346 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1303.x + (-0.5));
        float _1348 = _1346 * (_1303.y + (-0.5));
        float _1349 = _1346 * (_1303.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1370 = (dot(vec3(_908, _909, _910), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1380 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4136 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1382 + 1.0))) + _1387) * _1350;
        float _1397 = _1318 * 0.5;
        float _1398 = _1328 * 0.5;
        float _1399 = _1338 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_908, _909, _910), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4169 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1424 + 1.0))) + _1429) * _1351;
        float _1439 = _1319 * 0.5;
        float _1440 = _1329 * 0.5;
        float _1441 = _1339 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_908, _909, _910), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4202 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1466 + 1.0))) + _1471) * _1352;
        _1488 = _1319;
        _1490 = _1318;
        _1491 = _1317;
        _1492 = _1329;
        _1493 = _1328;
        _1494 = _1327;
        _1495 = _1339;
        _1496 = _1338;
        _1497 = _1337;
        _1498 = _1352;
        _1499 = _1351;
        _1500 = _1350;
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1489;
        _1490 = _1489;
        _1491 = _1489;
        _1492 = _1489;
        _1493 = _1489;
        _1494 = _1489;
        _1495 = _1489;
        _1496 = _1489;
        _1497 = _1489;
        _1498 = _1489;
        _1499 = _1489;
        _1500 = _1489;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1530 = fma(_1158, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150));
        float _1534 = fma(_1158, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150));
        float _1538 = fma(_1158, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150));
        float _1561 = _1150 + _908;
        float _1562 = _1154 + _909;
        float _1563 = _1158 + _910;
        float _1573 = fma(_1563, cbModelParam._m0[30u].z, fma(_1562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1561)) - _1530;
        float _1574 = fma(_1563, cbModelParam._m0[31u].z, fma(_1562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1561)) - _1534;
        float _1575 = fma(_1563, cbModelParam._m0[32u].z, fma(_1562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1561)) - _1538;
        float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
        float _1592 = ((_1579 * _1573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1593 = ((_1579 * _1574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1579 * _1575) / cbModelParam._m0[35u].z) + ((((((_1538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        float _1629 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1596.x + (-0.5));
        float _1631 = _1629 * (_1596.y + (-0.5));
        float _1632 = _1629 * (_1596.z + (-0.5));
        float _1639 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1603.x + (-0.5));
        float _1641 = _1639 * (_1603.y + (-0.5));
        float _1642 = _1639 * (_1603.z + (-0.5));
        float _1649 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1610.x + (-0.5));
        float _1651 = _1649 * (_1610.y + (-0.5));
        float _1652 = _1649 * (_1610.z + (-0.5));
        float _1659 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1617.x + (-0.5));
        float _1661 = _1659 * (_1617.y + (-0.5));
        float _1662 = _1659 * (_1617.z + (-0.5));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = _1630 * 0.5;
        float _1667 = _1640 * 0.5;
        float _1668 = _1650 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_908, _909, _910), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4265 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1693 + 1.0))) + _1698) * _1663;
        float _1708 = _1631 * 0.5;
        float _1709 = _1641 * 0.5;
        float _1710 = _1651 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_908, _909, _910), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4298 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1735 + 1.0))) + _1740) * _1664;
        float _1750 = _1632 * 0.5;
        float _1751 = _1642 * 0.5;
        float _1752 = _1652 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_908, _909, _910), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4331 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1777 + 1.0))) + _1782) * _1665;
        _1799 = _1632;
        _1800 = _1631;
        _1801 = _1630;
        _1802 = _1642;
        _1803 = _1641;
        _1804 = _1640;
        _1805 = _1652;
        _1806 = _1651;
        _1807 = _1650;
        _1808 = _1665;
        _1809 = _1664;
        _1810 = _1663;
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    }
    else
    {
        _1799 = _1489;
        _1800 = _1489;
        _1801 = _1489;
        _1802 = _1489;
        _1803 = _1489;
        _1804 = _1489;
        _1805 = _1489;
        _1806 = _1489;
        _1807 = _1489;
        _1808 = _1489;
        _1809 = _1489;
        _1810 = _1489;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1501)) + _1501;
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1502)) + _1502;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1503)) + _1503;
    float _1846 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1823));
    float _1867 = _1094 * 0.5;
    float _1868 = _1095 * 0.5;
    float _1869 = _1096 * 0.5;
    float _1870 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1873 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1876 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1910;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1883 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1488, _1492, _1495, _1498));
        float _1887 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1891 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1898 = dot(vec4(cbModelParam._m0[39u]), vec4(_1867, _1868, _1869, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1921;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1912 = dot(vec4(cbModelParam._m0[40u]), vec4(_1867, _1868, _1869, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1925 = (_1921 * cbModelParam._m0[1u].x) + (_1910 * (1.0 - cbModelParam._m0[1u].x));
    float _1935 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _911);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1935 : min(cbModelParam._m0[25u].z, _1935));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1983 = fma(_1158, cbModelParam._m0[13u].z, fma(_1154, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1150)) + cbModelParam._m0[13u].w;
        float _1987 = fma(_1158, cbModelParam._m0[14u].z, fma(_1154, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1150)) + cbModelParam._m0[14u].w;
        float _1991 = fma(_1158, cbModelParam._m0[15u].z, fma(_1154, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1150)) + cbModelParam._m0[15u].w;
        float _1994 = fma(_1096, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094));
        float _1997 = fma(_1096, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094));
        float _2000 = fma(_1096, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094));
        float _2028;
        if (_1994 > 0.0)
        {
            _2028 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2028 = frontier_phi_17_15_ladder;
        }
        float _2230;
        if (_1997 > 0.0)
        {
            _2230 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2230 = frontier_phi_26_22_ladder;
        }
        float _2484;
        if (_2000 > 0.0)
        {
            _2484 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2484 = frontier_phi_38_33_ladder;
        }
        float _2486 = isnan(_2230) ? _2028 : (isnan(_2028) ? _2230 : min(_2028, _2230));
        float _2487 = isnan(_2484) ? _2486 : (isnan(_2486) ? _2484 : min(_2486, _2484));
        float _2491 = (_2487 * _1994) + _1983;
        float _2492 = (_2487 * _1997) + _1987;
        float _2493 = (_2487 * _2000) + _1991;
        float _2494 = _2487 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2494;
        float _2498 = _2494 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 > _2498) || ((_2492 < _2496) || ((_2491 < _2496) || (_2491 > _2498))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2493, cbModelParam._m0[9u].z, fma(_2492, cbModelParam._m0[9u].y, _2491 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2493, cbModelParam._m0[10u].z, fma(_2492, cbModelParam._m0[10u].y, _2491 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2493, cbModelParam._m0[11u].z, fma(_2492, cbModelParam._m0[11u].y, _2491 * cbModelParam._m0[11u].x))), _1936);
            frontier_phi_16_38_ladder = _2621.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2621.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2621.x * cbModelParam._m0[1u].y;
        }
        _2016 = frontier_phi_16_38_ladder_2;
        _2018 = frontier_phi_16_38_ladder_1;
        _2020 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1094, _1095, _1096), _1936);
        _2016 = _2004.x * cbModelParam._m0[1u].y;
        _2018 = _2004.y * cbModelParam._m0[1u].y;
        _2020 = _2004.z * cbModelParam._m0[1u].y;
    }
    float _2024 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _911);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2024 : min(cbModelParam._m0[25u].w, _2024));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2078 = fma(_1158, cbModelParam._m0[21u].z, fma(_1154, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1150)) + cbModelParam._m0[21u].w;
        float _2082 = fma(_1158, cbModelParam._m0[22u].z, fma(_1154, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1150)) + cbModelParam._m0[22u].w;
        float _2086 = fma(_1158, cbModelParam._m0[23u].z, fma(_1154, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1150)) + cbModelParam._m0[23u].w;
        float _2089 = fma(_1096, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094));
        float _2092 = fma(_1096, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094));
        float _2095 = fma(_1096, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094));
        float _2235;
        if (_2089 > 0.0)
        {
            _2235 = abs((1.0 - _2078) / _2089);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2078 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2235 = frontier_phi_28_24_ladder;
        }
        float _2511;
        if (_2092 > 0.0)
        {
            _2511 = abs((1.0 - _2082) / _2092);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2082 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2511 = frontier_phi_40_35_ladder;
        }
        float _2724;
        if (_2095 > 0.0)
        {
            _2724 = abs((1.0 - _2086) / _2095);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2086 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2724 = frontier_phi_49_46_ladder;
        }
        float _2726 = isnan(_2511) ? _2235 : (isnan(_2235) ? _2511 : min(_2235, _2511));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _2089) + _2078;
        float _2732 = (_2727 * _2092) + _2082;
        float _2733 = (_2727 * _2095) + _2086;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _2025);
            frontier_phi_25_49_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2114 = frontier_phi_25_49_ladder_2;
        _2116 = frontier_phi_25_49_ladder_1;
        _2118 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1094, _1095, _1096), _2025);
        _2114 = _2098.x * cbModelParam._m0[1u].z;
        _2116 = _2098.y * cbModelParam._m0[1u].z;
        _2118 = _2098.z * cbModelParam._m0[1u].z;
    }
    float _2131 = (((_1121 * _1070) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2133 = (((_1121 * _1072) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2135 = (((_1121 * _1073) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2118 - _2020)) + _2020);
    float _2138 = fma(_2135, cbSceneParam._m0[89u].z, fma(_2133, cbSceneParam._m0[89u].y, _2131 * cbSceneParam._m0[89u].x));
    float _2141 = fma(_2135, cbSceneParam._m0[90u].z, fma(_2133, cbSceneParam._m0[90u].y, _2131 * cbSceneParam._m0[90u].x));
    float _2144 = fma(_2135, cbSceneParam._m0[91u].z, fma(_2133, cbSceneParam._m0[91u].y, _2131 * cbSceneParam._m0[91u].x));
    uvec4 _2154 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2156 = _2154.x * 14u;
    uint _2157 = _2156 + 13u;
    float _2164 = _1086 + (-1.0);
    float _2169 = (cbLight._m0[_2157].x * _2164) + 1.0;
    float _2170 = (cbLight._m0[_2157].y * _2164) + 1.0;
    float _2171 = (cbLight._m0[_2157].z * _2164) + 1.0;
    float _2172 = (cbLight._m0[_2157].w * _2164) + 1.0;
    uint _2173 = _2156 + 5u;
    float _2179 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2183 = _2156 + 4u;
    float _2189 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2193 = _2156 | 1u;
    float _2204 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_908, _909, _910));
    float _2207 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_908, _909, _910));
    float _4467 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _4478 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2212 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2214 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2221 = ((cbLight._m0[_2173].x * _2179) * _2214) + ((cbLight._m0[_2183].x * _2189) * _2212);
    float _2222 = ((_2179 * cbLight._m0[_2173].y) * _2214) + ((_2189 * cbLight._m0[_2183].y) * _2212);
    float _2223 = ((_2179 * cbLight._m0[_2173].z) * _2214) + ((_2189 * cbLight._m0[_2183].z) * _2212);
    uvec4 _2227 = floatBitsToUint(cbLight._m0[_2156 + 12u]);
    bool _2229 = _2227.x == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2229)
    {
        _2240 = _2221;
        _2242 = _2222;
        _2244 = _2223;
    }
    else
    {
        uint _2248 = _2156 + 6u;
        float _2264 = (dot(vec3(cbLight._m0[_2156 + 2u].xyz), vec3(_908, _909, _910)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4489 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2267 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2240 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2221;
        _2242 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2222;
        _2244 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2223;
    }
    bool _2247 = _2227.y == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2247)
    {
        _2285 = _2240;
        _2287 = _2242;
        _2289 = _2244;
    }
    else
    {
        uint _2455 = _2156 + 7u;
        float _2471 = (dot(vec3(cbLight._m0[_2156 + 3u].xyz), vec3(_908, _909, _910)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4505 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2474 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2285 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2240;
        _2287 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2242;
        _2289 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2244;
    }
    uint _2292 = _2156 + 8u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _911) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2156].x + _988;
    float _2308 = cbLight._m0[_2156].y + _989;
    float _2309 = cbLight._m0[_2156].z + _990;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2156].xyz));
    float _4521 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _4532 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _2321 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2322 = dot(vec3(_908, _909, _910), vec3(_2314, _2315, _2316));
    float _4543 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2314, _2315, _2316));
    float _4554 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2306 * _2306;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0);
    float _2343 = 0.959999978542327880859375 - _1067;
    float _2345 = 0.959999978542327880859375 - _1068;
    float _2346 = 0.959999978542327880859375 - _1069;
    float _2353 = 1.0 - _2306;
    float _2364 = (0.5 / (((_2321 * ((_2320 * _2353) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2353) + _2306) * _2320))) * _2320;
    float _4565 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    uint _2377 = _2156 + 9u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _911) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2193].x + _988;
    float _2391 = cbLight._m0[_2193].y + _989;
    float _2392 = cbLight._m0[_2193].z + _990;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2193].xyz));
    float _4576 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2404 = dot(vec3(_908, _909, _910), vec3(_2397, _2398, _2399));
    float _4587 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2408 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2397, _2398, _2399));
    float _4598 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2412 = _2389 * _2389;
    float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
    float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0);
    float _2430 = 1.0 - _2389;
    float _2440 = (0.5 / (((_2321 * ((_2403 * _2430) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2430) + _2389) * _2403))) * _2403;
    float _4609 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
    float _2452 = (((((_2423 * _2343) + _1070) * cbLight._m0[_2377].x) * _2442) * _2179) + (((((_2342 * _2343) + _1070) * cbLight._m0[_2292].x) * _2366) * _2189);
    float _2453 = (((((_2423 * _2345) + _1072) * cbLight._m0[_2377].y) * _2442) * _2179) + (((((_2342 * _2345) + _1072) * cbLight._m0[_2292].y) * _2366) * _2189);
    float _2454 = (((((_2423 * _2346) + _1073) * cbLight._m0[_2377].z) * _2442) * _2179) + (((((_2342 * _2346) + _1073) * cbLight._m0[_2292].z) * _2366) * _2189);
    float _2516;
    float _2518;
    float _2520;
    if (_2229)
    {
        _2516 = _2452;
        _2518 = _2453;
        _2520 = _2454;
    }
    else
    {
        uint _2522 = _2156 + 2u;
        uint _2526 = _2156 + 10u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _911) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _988;
        float _2543 = cbLight._m0[_2522].y + _989;
        float _2544 = cbLight._m0[_2522].z + _990;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2522].xyz));
        float _4620 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2556 = dot(vec3(_908, _909, _910), vec3(_2549, _2550, _2551));
        float _4631 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4642 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2321 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2582) + _2541) * _2555))) * _2555;
        float _4653 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2516 = (((((_2575 * _2343) + _1070) * cbLight._m0[_2526].x) * _2594) * _2595) + _2452;
        _2518 = (((((_2575 * _2345) + _1072) * cbLight._m0[_2526].y) * _2594) * _2595) + _2453;
        _2520 = (((((_2575 * _2346) + _1073) * cbLight._m0[_2526].z) * _2594) * _2595) + _2454;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2247)
    {
        _2630 = _2516;
        _2632 = _2518;
        _2634 = _2520;
    }
    else
    {
        uint _2641 = _2156 + 3u;
        uint _2645 = _2156 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _911) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _988;
        float _2662 = cbLight._m0[_2641].y + _989;
        float _2663 = cbLight._m0[_2641].z + _990;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2641].xyz));
        float _4669 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2675 = dot(vec3(_908, _909, _910), vec3(_2668, _2669, _2670));
        float _4680 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4691 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2321 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2701) + _2660) * _2674))) * _2674;
        float _4702 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2630 = (((((_2694 * _2343) + _1070) * cbLight._m0[_2645].x) * _2713) * _2714) + _2516;
        _2632 = (((((_2694 * _2345) + _1072) * cbLight._m0[_2645].y) * _2713) * _2714) + _2518;
        _2634 = (((((_2694 * _2346) + _1073) * cbLight._m0[_2645].z) * _2713) * _2714) + _2520;
    }
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_2154.y == 0u)
    {
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2789;
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2789;
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2789;
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.x;
        uint _2816 = uint((float(_2804.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1009) / _2805))) + floor(float(uint(cbSceneParam._m0[85u].x * _1008) / _2805)));
        float _2826 = (log2(_2792 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2827 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        uint _2830 = uint(isnan(14.0) ? _2827 : (isnan(_2827) ? 14.0 : min(_2827, 14.0)));
        uvec4 _2835 = texelFetch(g_lightClusterGridBuffer, int(((_2830 << 2u) + (_2816 << 6u)) >> 2u));
        uint _2836 = _2835.x;
        uint _2837 = _2804.z;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((((1u << ((_2837 >> 4u) & 15u)) + 4294967295u) & _2836) == 0u) || ((_2837 & 240u) == 0u))
        {
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
        }
        else
        {
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            uint _3096 = 0u;
            uint _3105;
            bool _3106;
            for (;;)
            {
                _3105 = texelFetch(g_lightClassification, int((((_2830 << 5u) + (_2816 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                _3106 = _3105 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3106)
                {
                    frontier_phi_66_pred = _3090;
                    frontier_phi_66_pred_1 = _3095;
                    frontier_phi_66_pred_2 = _3094;
                    frontier_phi_66_pred_3 = _3093;
                    frontier_phi_66_pred_4 = _3092;
                    frontier_phi_66_pred_5 = _3091;
                }
                else
                {
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    uint _3241;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3105;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    for (;;)
                    {
                        uint _3245 = uint(findLSB(_3241)) + (_3096 << 5u);
                        uint _3242 = (_3241 + 4294967295u) & _3241;
                        uint _3247 = _3245 * 48u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 3u)).x));
                        uint _3267 = (_3245 * 48u) + 4u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3286 = (_3245 * 48u) + 8u;
                        vec3 _3297 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x));
                        float _3301 = _3261.x - _2790;
                        float _3302 = _3261.y - _2791;
                        float _3303 = _3261.z - _2792;
                        float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                        float _3307 = inversesqrt(_3304);
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3311 = dot(vec3(_1027, _1030, _1033), vec3(_3308, _3309, _3310));
                        float _3316 = 1.0 - (_3304 * _3261.w);
                        float _4728 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3318 = sqrt(_3304) * _3280.w;
                        float _3321 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3311) + _3322;
                        float _3328 = _3318 * _3318;
                        float _3332 = ((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3317) / ((_3328 * 0.699999988079071044921875) + 1.0);
                        float _3336 = (-0.0) - _2790;
                        float _3337 = (-0.0) - _2791;
                        float _3338 = (-0.0) - _2792;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3353 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                        float _3354 = 1.0 - _1102;
                        float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                        float _3362 = _3361 * _3361;
                        float _3363 = _3362 * _3362;
                        float _3364 = _3343 + _3308;
                        float _3365 = _3344 + _3309;
                        float _3366 = _3345 + _3310;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3374 = dot(vec3(_1027, _1030, _1033), vec3(_3343, _3344, _3345));
                        float _4744 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3378 = dot(vec3(_1027, _1030, _1033), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                        float _4755 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                        float _3386 = _3321 * _3362;
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3311) + _3387;
                        float _4766 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3392 = 1.0 - _3362;
                        float _3402 = (0.5 / (((_3391 * ((_3377 * _3392) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3362) * _3377))) * _3391;
                        float _4777 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3413 = (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) / ((_3385 * _3385) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125))) * _3317;
                        _3165 = (_3332 * _3280.x) + _3238;
                        _3166 = (_3332 * _3280.y) + _3239;
                        _3167 = (_3332 * _3280.z) + _3240;
                        _3162 = (_3413 * _3297.x) + _3235;
                        _3163 = (_3413 * _3297.y) + _3236;
                        _3164 = (_3413 * _3297.z) + _3237;
                        if (_3242 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3242;
                        }
                    }
                    frontier_phi_66_pred = _3162;
                    frontier_phi_66_pred_1 = _3167;
                    frontier_phi_66_pred_2 = _3166;
                    frontier_phi_66_pred_3 = _3165;
                    frontier_phi_66_pred_4 = _3164;
                    frontier_phi_66_pred_5 = _3163;
                }
                _2938 = frontier_phi_66_pred;
                _2948 = frontier_phi_66_pred_1;
                _2946 = frontier_phi_66_pred_2;
                _2944 = frontier_phi_66_pred_3;
                _2942 = frontier_phi_66_pred_4;
                _2940 = frontier_phi_66_pred_5;
                uint _3097 = _3096 + 1u;
                if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3090 = _2938;
                    _3091 = _2940;
                    _3092 = _2942;
                    _3093 = _2944;
                    _3094 = _2946;
                    _3095 = _2948;
                    _3096 = _3097;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
        }
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.z;
        uint _2954 = (_2952 >> 8u) & 15u;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((4294967295u << _2954) & _2836) == 0u)
        {
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
        }
        else
        {
            float _3083 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
            float _3084 = _3083 * _2790;
            float _3085 = _3083 * _2791;
            float _3086 = _3083 * _2792;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2954 < ((_2952 >> 12u) & 15u))
            {
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3218 = _2937;
                float _3219 = _2939;
                float _3220 = _2941;
                float _3221 = _2943;
                float _3222 = _2945;
                float _3223 = _2947;
                uint _3224 = _2954;
                uint _3233;
                bool _3234;
                for (;;)
                {
                    _3233 = texelFetch(g_lightClassification, int((((_2830 << 5u) + (_2816 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                    _3234 = _3233 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3234)
                    {
                        frontier_phi_77_pred = _3223;
                        frontier_phi_77_pred_1 = _3222;
                        frontier_phi_77_pred_2 = _3221;
                        frontier_phi_77_pred_3 = _3220;
                        frontier_phi_77_pred_4 = _3219;
                        frontier_phi_77_pred_5 = _3218;
                    }
                    else
                    {
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        uint _3446 = _3233;
                        uint _3447;
                        vec4 _3472;
                        float _3473;
                        vec4 _3488;
                        vec3 _3500;
                        vec4 _3515;
                        vec4 _3530;
                        float _3576;
                        bool _3577;
                        for (;;)
                        {
                            uint _3457 = ((_3224 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3446));
                            _3447 = (_3446 + 4294967295u) & _3446;
                            uint _3459 = _3457 * 40u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3473 = _3472.w;
                            uint _3475 = (_3457 * 40u) + 4u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3457 * 40u) + 8u;
                            _3500 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x));
                            uint _3502 = (_3457 * 40u) + 16u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3457 * 40u) + 20u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3457 * 40u) + 24u;
                            vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3551 = (_3457 * 40u) + 28u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3576 = fma(_2792, _3564.z, fma(_2791, _3564.y, _3564.x * _2790)) + _3564.w;
                            _3577 = !((fma(_2792, _3545.z, fma(_2791, _3545.y, _3545.x * _2790)) + _3545.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3577)
                            {
                                float _3604 = _3472.x - _2790;
                                float _3605 = _3472.y - _2791;
                                float _3606 = _3472.z - _2792;
                                float _3607 = dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606));
                                float _3610 = inversesqrt(_3607);
                                float _3611 = _3610 * _3604;
                                float _3612 = _3610 * _3605;
                                float _3613 = _3610 * _3606;
                                float _3617 = 1.0 - (_3607 / (_3473 * _3473));
                                float _4788 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3622 = sqrt(_3607) * _3488.w;
                                float _3624 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                                float _3625 = _3624 * _3624;
                                float _3628 = ((1.0 - _3625) * dot(vec3(_3611, _3612, _3613), vec3(_1027, _1030, _1033))) + _3625;
                                float _3631 = _3622 * _3622;
                                float _3635 = (fma(_2792, _3515.z, fma(_2791, _3515.y, _3515.x * _2790)) + _3515.w) / _3576;
                                float _3636 = (fma(_2792, _3530.z, fma(_2791, _3530.y, _3530.x * _2790)) + _3530.w) / _3576;
                                float _3640 = 1.0 - dot(vec2(_3635, _3636), vec2(_3635, _3636));
                                float _4804 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3642 = _3641 * (((isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0))) * _3618) / ((_3631 * 0.699999988079071044921875) + 1.0));
                                float _3654 = exp2(log2(1.0 / ((_3631 * 3.5) + 5.0)) * 0.25);
                                float _3655 = 1.0 - _1102;
                                float _3662 = sqrt(1.0 - ((1.0 - (_3655 * _3655)) * (1.0 - (_3654 * _3654))));
                                float _3663 = _3662 * _3662;
                                float _3664 = _3663 * _3663;
                                float _3665 = _3611 - _3084;
                                float _3666 = _3612 - _3085;
                                float _3667 = _3613 - _3086;
                                float _3671 = inversesqrt(dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667)));
                                float _3675 = dot(vec3(_1027, _1030, _1033), vec3((-0.0) - _3084, (-0.0) - _3085, (-0.0) - _3086));
                                float _4815 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3679 = dot(vec3(_1027, _1030, _1033), vec3(_3671 * _3665, _3671 * _3666, _3671 * _3667));
                                float _4826 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3686 = ((_3682 * _3682) * (_3664 + (-1.0))) + 1.0;
                                float _3687 = _3624 * _3663;
                                float _3688 = _3687 * _3687;
                                float _3694 = ((1.0 - _3688) * dot(vec3(_1027, _1030, _1033), vec3(_3611, _3612, _3613))) + _3688;
                                float _4837 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3696 = 1.0 - _3663;
                                float _3706 = (0.5 / (((_3695 * ((_3678 * _3696) + _3663)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3663) * _3678))) * _3695;
                                float _4848 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3716 = (_3641 * _3618) * (((_3664 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3686 * _3686) * ((_3631 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3642 * _3488.y;
                                frontier_phi_83_pred_1 = _3642 * _3488.x;
                                frontier_phi_83_pred_2 = _3716 * _3500.z;
                                frontier_phi_83_pred_3 = _3716 * _3500.y;
                                frontier_phi_83_pred_4 = _3716 * _3500.x;
                                frontier_phi_83_pred_5 = _3642 * _3488.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3724 = frontier_phi_83_pred;
                            _3723 = frontier_phi_83_pred_1;
                            _3722 = frontier_phi_83_pred_2;
                            _3721 = frontier_phi_83_pred_3;
                            _3720 = frontier_phi_83_pred_4;
                            _3725 = frontier_phi_83_pred_5;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            if (_3447 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3447;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3432;
                        frontier_phi_77_pred_1 = _3431;
                        frontier_phi_77_pred_2 = _3430;
                        frontier_phi_77_pred_3 = _3429;
                        frontier_phi_77_pred_4 = _3428;
                        frontier_phi_77_pred_5 = _3427;
                    }
                    _3069 = frontier_phi_77_pred;
                    _3067 = frontier_phi_77_pred_1;
                    _3065 = frontier_phi_77_pred_2;
                    _3063 = frontier_phi_77_pred_3;
                    _3061 = frontier_phi_77_pred_4;
                    _3059 = frontier_phi_77_pred_5;
                    uint _3225 = _3224 + 1u;
                    if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3218 = _3059;
                        _3219 = _3061;
                        _3220 = _3063;
                        _3221 = _3065;
                        _3222 = _3067;
                        _3223 = _3069;
                        _3224 = _3225;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3063;
                frontier_phi_58_59_ladder_1 = _3069;
                frontier_phi_58_59_ladder_2 = _3067;
                frontier_phi_58_59_ladder_3 = _3065;
                frontier_phi_58_59_ladder_4 = _3061;
                frontier_phi_58_59_ladder_5 = _3059;
            }
            else
            {
                frontier_phi_58_59_ladder = _2941;
                frontier_phi_58_59_ladder_1 = _2947;
                frontier_phi_58_59_ladder_2 = _2945;
                frontier_phi_58_59_ladder_3 = _2943;
                frontier_phi_58_59_ladder_4 = _2939;
                frontier_phi_58_59_ladder_5 = _2937;
            }
            _3058 = frontier_phi_58_59_ladder_5;
            _3060 = frontier_phi_58_59_ladder_4;
            _3062 = frontier_phi_58_59_ladder;
            _3064 = frontier_phi_58_59_ladder_3;
            _3066 = frontier_phi_58_59_ladder_2;
            _3068 = frontier_phi_58_59_ladder_1;
        }
        float _3073 = isnan(1.0) ? _1086 : (isnan(_1086) ? 1.0 : min(_1086, 1.0));
        _2849 = (_3073 * _3064) + _2285;
        _2851 = (_3073 * _3066) + _2287;
        _2853 = (_3073 * _3068) + _2289;
        _2855 = ((_3058 * _1070) * _3073) + _2630;
        _2857 = ((_3060 * _1072) * _3073) + _2632;
        _2859 = ((_3062 * _1073) * _3073) + _2634;
    }
    else
    {
        _2849 = _2285;
        _2851 = _2287;
        _2853 = _2289;
        _2855 = _2630;
        _2857 = _2632;
        _2859 = _2634;
    }
    float _4864 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4875 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4886 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2876 = ((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2849 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1086))) + ((_2855 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    float _2877 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2851 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1086))) + ((_2857 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    float _2878 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2853 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1086))) + ((_2859 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    uint _2879 = _280 + 6u;
    float _2887 = _1008 / cbSceneParam._m0[86u].x;
    float _2888 = _1009 / cbSceneParam._m0[86u].y;
    vec4 _2902 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, (log2((isnan(cbSceneParam._m0[77u].w) ? _930 : (isnan(_930) ? cbSceneParam._m0[77u].w : min(_930, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2904 = _2902.x;
    float _2905 = _2902.y;
    float _2906 = _2902.z;
    float _2907 = _2902.w;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_930 > cbSceneParam._m0[78u].w)
    {
        float _2962 = isnan(_930) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _930 : min(cbSceneParam._m0[80u].w, _930));
        float _2963 = _2962 / _930;
        float _2974 = _2963 * _981;
        float _2975 = _982 * _2963;
        float _2976 = (-0.0) - _2975;
        float _2978 = _2963 * _983;
        float _2980 = (cbSceneParam._m0[77u].w * _2976) / _2962;
        float _2981 = _2980 + cbSceneParam._m0[79u].w;
        float _2982 = cbSceneParam._m0[79u].w - _2975;
        float _2988 = sqrt(((_2974 * _2974) + (_2975 * _2975)) + (_2978 * _2978));
        float _2991 = (1.0 - (cbSceneParam._m0[77u].w / _2962)) * _2988;
        float _2996 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2998 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3175;
        if (abs((_2976 - _2980) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3175 = ((((_2981 > 0.0) ? exp2(_2996 * _2981) : (2.0 - exp2(_2998 * _2981))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2991;
        }
        else
        {
            float _3119 = 1.0 / cbSceneParam._m0[80u].x;
            float _3120 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : max(_2981, _2982));
            float _3121 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : min(_2981, _2982));
            float _3130 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : min(_3120, 0.0));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            _3175 = ((abs(_2988 / _2976) * cbSceneParam._m0[80u].y) * ((((_3130 - _3131) * 2.0) - ((exp2(_2996 * (isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0)))) - exp2(_2996 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))))) * _3119)) - ((exp2(_2998 * _3130) - exp2(_2998 * _3131)) * _3119))) + (_2991 * cbSceneParam._m0[80u].z);
        }
        vec4 _3177 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, 1.0), 0.0);
        float _3186 = exp2((_3175 * (-1.44269502162933349609375)) * (1.0 - _3177.w));
        float _3187 = log2(_3186);
        float _3203 = log2(_2907);
        _3000 = (exp2(_3203 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].x)) * _3177.x) / cbSceneParam._m0[78u].x)) + _2904;
        _3002 = (exp2(_3203 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].y)) * _3177.y) / cbSceneParam._m0[78u].y)) + _2905;
        _3004 = (exp2(_3203 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].z)) * _3177.z) / cbSceneParam._m0[78u].z)) + _2906;
        _3006 = _3186 * _2907;
    }
    else
    {
        _3000 = _2904;
        _3002 = _2905;
        _3004 = _2906;
        _3006 = _2907;
    }
    bool _3213;
    vec4 _3016;
    vec4 _3038;
    float _3040;
    float _3044;
    float _3045;
    float _3046;
    float _3047;
    bool _3057;
    for (;;)
    {
        _3016 = cbMatDynParam._m0[0u];
        float _3018 = roundEven(_3016.y);
        bool _3019 = _3018 == 3.0;
        float _3020 = log2(_3006);
        float _3027 = exp2(_3020 * cbSceneParam._m0[78u].x) * _2876;
        float _3028 = exp2(_3020 * cbSceneParam._m0[78u].y) * _2877;
        float _3029 = exp2(_3020 * cbSceneParam._m0[78u].z) * _2878;
        float _3036 = _997 + (-0.5);
        _3038 = cbMtdParam._m0[1u];
        _3040 = _3038.y * _3036;
        float _3043 = (_3018 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3044 = _3043 * (_3019 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3000)));
        _3045 = _3043 * (_3019 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3002)));
        _3046 = _3043 * (_3019 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3004)));
        _3047 = _3036 * 0.999000012874603271484375;
        _3057 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3057)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3047) < 0.5)
            {
                _3213 = true;
                break;
            }
        }
        uint _3154 = _1046 + uint(_3016.w);
        if ((cbInstanceData._m0[_3154].w < 1.0) && ((cbInstanceData._m0[_3154].w + _3047) < 0.5))
        {
            _3213 = true;
            break;
        }
        if ((_3040 + 1.0) < _3038.x)
        {
            _3213 = true;
            break;
        }
        _3213 = false;
        break;
    }
    float _3418;
    if (_3213)
    {
        discard_state = true;
        _3418 = 0.0;
    }
    else
    {
        _3418 = cbInstanceData._m0[_2879].w;
    }
    SV_Target.x = _3044;
    SV_Target.y = _3045;
    SV_Target.z = _3046;
    SV_Target.w = _3418;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2879].w;
    discard_exit();
}


