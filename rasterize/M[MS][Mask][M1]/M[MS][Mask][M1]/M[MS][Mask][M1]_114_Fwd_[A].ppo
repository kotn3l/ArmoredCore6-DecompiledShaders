#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1604;
float _3982;
float _3983;
float _3984;
float _3985;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3994 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4005 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4016 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = _372.x * cbMtdParam._m0[11u].x;
    float _378 = _372.y * cbMtdParam._m0[11u].y;
    float _379 = _372.z * cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _417.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4027 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _491 = (_484 * ((_398.x * cbMtdParam._m0[12u].x) - _377)) + _377;
    float _492 = (_484 * ((_398.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _493 = (_484 * ((_398.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _417.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4038 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _604 = _602.x;
    float _614 = dot(vec4(_604, _602.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _626 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _417.z) * 2.0) - ((((_604 - _614) * cbMtdParam._m0[23u].w) + _614) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4049 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _637 = (_346.x * cbMtdParam._m0[9u].x) * ((_627 * ((_585.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _638 = (_346.y * cbMtdParam._m0[9u].y) * ((_627 * ((_585.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _639 = (_346.z * cbMtdParam._m0[9u].z) * ((_627 * ((_585.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _643 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _637;
    float _646 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _638;
    float _649 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _639;
    float _657 = (((_637 - _643) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) + _643) * 4.55000019073486328125;
    float _659 = (((_638 - _646) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) + _646) * 4.55000019073486328125;
    float _661 = (((_639 - _649) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) + _649) * 4.55000019073486328125;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _484) + _720;
    float _730 = ((_701.y - _721) * _484) + _721;
    float _731 = ((_701.z - _722) * _484) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _557) + _729;
    float _755 = ((_743.y - _730) * _557) + _730;
    float _756 = ((_743.z - _731) * _557) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _627) + _756;
    float _784 = ((((_768.x - _754) * _627) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _627) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4060 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))));
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _830 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _832 = _830.x;
    float _833 = 1.0 - _832;
    float _848 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_832 - _833) * cbMtdParam._m0[24u].z) + _833) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4071 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _849 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _856 = (_849 * (cbMtdParam._m0[17u].x - _657)) + _657;
    float _857 = (_849 * (cbMtdParam._m0[17u].y - _659)) + _659;
    float _858 = (_849 * (cbMtdParam._m0[17u].z - _661)) + _661;
    vec4 _884 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _886 = _884.x;
    float _903 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _886) * _484) + _886;
    float _920 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _903) * _557) + _903;
    float _938 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _920) * _627) + _920;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _938) * cbMtdParam._m0[19u].z) + _938;
    float _944 = _942 - (_942 * _849);
    float _949 = (((_678.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _953 = ((_805.z - _949) * cbMtdParam._m0[19u].w) + _949;
    vec4 _966 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _973 = (_966.x * 2.0) + (-1.0);
    float _974 = (_966.y * 2.0) + (-1.0);
    float _975 = dot(vec2(_973, _974), vec2(_973, _974));
    float _4082 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _983 = (_849 * (_966.z - _953)) + _953;
    float _992 = (_784 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_678.x * 2.0) + (-1.0)))) + (((_805.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _993 = (_785 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_678.y * 2.0) + (-1.0)))) + (((_805.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1005 = (((_973 - _992) + (cbMtdParam._m0[21u].x * _992)) * _849) + _992;
    float _1006 = (((_974 - _993) + (cbMtdParam._m0[21u].x * _993)) * _849) + _993;
    float _1007 = (_849 * (sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) - _791)) + _791;
    float _1011 = cbMtdParam._m0[22u].x + _805.w;
    float _1014 = fma(_1007, _256 * NORMAL.x, fma(_1006, _263 * TANGENT.x, (_249 * _241) * _1005));
    float _1017 = fma(_1007, _256 * NORMAL.y, fma(_1006, _263 * TANGENT.y, (_249 * _242) * _1005));
    float _1020 = fma(_1007, _256 * NORMAL.z, fma(_1006, _263 * TANGENT.z, (_249 * _243) * _1005));
    float _1024 = inversesqrt(dot(vec3(_1014, _1017, _1020), vec3(_1014, _1017, _1020)));
    float _1025 = _1024 * _1014;
    float _1026 = _1024 * _1017;
    float _1027 = _1024 * _1020;
    float _4093 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _1028 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4115 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4126 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4137 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4148 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _1033 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _1047 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1097 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1087);
    float _1098 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1087);
    float _1099 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1087);
    float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
    float _1104 = _1097 * _1103;
    float _1105 = _1098 * _1103;
    float _1106 = _1099 * _1103;
    vec4 _1111 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1113 = _1111.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1285 = sqrt(((_1097 * _1097) + (_1098 * _1098)) + (_1099 * _1099));
        float _1291 = (cbMatDynParam._m0[5u].x * _1285) + cbMatDynParam._m0[5u].y;
        float _4159 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1296 = (cbMatDynParam._m0[5u].z * _1285) + cbMatDynParam._m0[5u].w;
        float _4170 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) - _1292)) + _1292) < ((_1113 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1124 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1125 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1143 = fma(_1027, cbSceneParam._m0[5u].z, fma(_1026, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1025));
    float _1146 = fma(_1027, cbSceneParam._m0[6u].z, fma(_1026, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1025));
    float _1149 = fma(_1027, cbSceneParam._m0[7u].z, fma(_1026, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1025));
    uint _1162 = _290 + 9u;
    uint _1163 = _1162 + uint(cbMatDynParam._m0[0u].w);
    float _1169 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_1163].x;
    float _1170 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_1163].y;
    float _1171 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_1163].z;
    float _4181 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _1175 = 1.0 - _1033;
    float _1176 = _1172 * _1175;
    float _1177 = _1173 * _1175;
    float _1178 = _1174 * _1175;
    float _1183 = (_1172 + (-0.039999999105930328369140625)) * _1033;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1033;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1033;
    float _1186 = _1183 + 0.039999999105930328369140625;
    float _1188 = _1184 + 0.039999999105930328369140625;
    float _1189 = _1185 + 0.039999999105930328369140625;
    vec4 _1198 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1124, cbSceneParam._m0[86u].y * _1125));
    float _1202 = ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * TEXCOORD_5.w) * _1198.x;
    float _1203 = dot(vec3(_1025, _1026, _1027), vec3(_1104, _1105, _1106));
    float _1206 = _1203 * 2.0;
    float _1210 = (_1206 * _1025) - _1104;
    float _1211 = (_1206 * _1026) - _1105;
    float _1212 = (_1206 * _1027) - _1106;
    float _1216 = abs(dot(vec3(_1104, _1105, _1106), vec3(_1025, _1026, _1027)));
    float _4214 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1218 = sqrt(_1028);
    float _1231 = exp2((_1218 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1218 * 3.0));
    float _1237 = (1.0 - _1231) * ((_1218 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1238 = _1231 * _1218;
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1603;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1328 = fma(_1274, cbModelParam._m0[26u].z, fma(_1270, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266));
        float _1332 = fma(_1274, cbModelParam._m0[27u].z, fma(_1270, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266));
        float _1336 = fma(_1274, cbModelParam._m0[28u].z, fma(_1270, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266));
        float _1361 = _1266 + _1025;
        float _1362 = _1270 + _1026;
        float _1363 = _1274 + _1027;
        float _1373 = fma(_1363, cbModelParam._m0[26u].z, fma(_1362, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1361)) - _1328;
        float _1374 = fma(_1363, cbModelParam._m0[27u].z, fma(_1362, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1361)) - _1332;
        float _1375 = fma(_1363, cbModelParam._m0[28u].z, fma(_1362, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1361)) - _1336;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1328 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1332 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[34u].z) + ((((((_1336 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1431 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1397.x + (-0.5));
        float _1433 = _1431 * (_1397.y + (-0.5));
        float _1434 = _1431 * (_1397.z + (-0.5));
        float _1441 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1404.x + (-0.5));
        float _1443 = _1441 * (_1404.y + (-0.5));
        float _1444 = _1441 * (_1404.z + (-0.5));
        float _1451 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1411.x + (-0.5));
        float _1453 = _1451 * (_1411.y + (-0.5));
        float _1454 = _1451 * (_1411.z + (-0.5));
        float _1461 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1418.x + (-0.5));
        float _1463 = _1461 * (_1418.y + (-0.5));
        float _1464 = _1461 * (_1418.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1485 = (dot(vec3(_1025, _1026, _1027), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1495 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4262 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1497 + 1.0))) + _1502) * _1465;
        float _1512 = _1433 * 0.5;
        float _1513 = _1443 * 0.5;
        float _1514 = _1453 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_1025, _1026, _1027), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4295 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1539 + 1.0))) + _1544) * _1466;
        float _1554 = _1434 * 0.5;
        float _1555 = _1444 * 0.5;
        float _1556 = _1454 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_1025, _1026, _1027), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4328 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1581 + 1.0))) + _1586) * _1467;
        _1603 = _1434;
        _1605 = _1433;
        _1606 = _1432;
        _1607 = _1444;
        _1608 = _1443;
        _1609 = _1442;
        _1610 = _1454;
        _1611 = _1453;
        _1612 = _1452;
        _1613 = _1467;
        _1614 = _1466;
        _1615 = _1465;
        _1616 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1604;
        _1605 = _1604;
        _1606 = _1604;
        _1607 = _1604;
        _1608 = _1604;
        _1609 = _1604;
        _1610 = _1604;
        _1611 = _1604;
        _1612 = _1604;
        _1613 = _1604;
        _1614 = _1604;
        _1615 = _1604;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1644 = fma(_1274, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1266));
        float _1648 = fma(_1274, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1266));
        float _1652 = fma(_1274, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1266));
        float _1675 = _1266 + _1025;
        float _1676 = _1270 + _1026;
        float _1677 = _1274 + _1027;
        float _1687 = fma(_1677, cbModelParam._m0[30u].z, fma(_1676, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1675)) - _1644;
        float _1688 = fma(_1677, cbModelParam._m0[31u].z, fma(_1676, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1675)) - _1648;
        float _1689 = fma(_1677, cbModelParam._m0[32u].z, fma(_1676, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1675)) - _1652;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1706 = ((_1693 * _1687) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1644 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1707 = ((_1693 * _1688) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1648 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1693 * _1689) / cbModelParam._m0[35u].z) + ((((((_1652 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        float _1743 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1710.x + (-0.5));
        float _1745 = _1743 * (_1710.y + (-0.5));
        float _1746 = _1743 * (_1710.z + (-0.5));
        float _1753 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1717.x + (-0.5));
        float _1755 = _1753 * (_1717.y + (-0.5));
        float _1756 = _1753 * (_1717.z + (-0.5));
        float _1763 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1724.x + (-0.5));
        float _1765 = _1763 * (_1724.y + (-0.5));
        float _1766 = _1763 * (_1724.z + (-0.5));
        float _1773 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1731.x + (-0.5));
        float _1775 = _1773 * (_1731.y + (-0.5));
        float _1776 = _1773 * (_1731.z + (-0.5));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = _1744 * 0.5;
        float _1781 = _1754 * 0.5;
        float _1782 = _1764 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1025, _1026, _1027), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4391 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1807 + 1.0))) + _1812) * _1777;
        float _1822 = _1745 * 0.5;
        float _1823 = _1755 * 0.5;
        float _1824 = _1765 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1025, _1026, _1027), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4424 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1849 + 1.0))) + _1854) * _1778;
        float _1864 = _1746 * 0.5;
        float _1865 = _1756 * 0.5;
        float _1866 = _1766 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1025, _1026, _1027), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4457 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1891 + 1.0))) + _1896) * _1779;
        _1913 = _1746;
        _1914 = _1745;
        _1915 = _1744;
        _1916 = _1756;
        _1917 = _1755;
        _1918 = _1754;
        _1919 = _1766;
        _1920 = _1765;
        _1921 = _1764;
        _1922 = _1779;
        _1923 = _1778;
        _1924 = _1777;
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
    }
    else
    {
        _1913 = _1604;
        _1914 = _1604;
        _1915 = _1604;
        _1916 = _1604;
        _1917 = _1604;
        _1918 = _1604;
        _1919 = _1604;
        _1920 = _1604;
        _1921 = _1604;
        _1922 = _1604;
        _1923 = _1604;
        _1924 = _1604;
        _1925 = 0.0;
        _1926 = 0.0;
        _1927 = 0.0;
    }
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1616)) + _1616;
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1617)) + _1617;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1618)) + _1618;
    float _1960 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1937));
    float _1981 = _1210 * 0.5;
    float _1982 = _1211 * 0.5;
    float _1983 = _1212 * 0.5;
    float _1984 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1987 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _1990 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _2024;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1997 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1603, _1607, _1610, _1613));
        float _2001 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1605, _1608, _1611, _1614));
        float _2005 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1606, _1609, _1612, _1615));
        float _2012 = dot(vec4(cbModelParam._m0[39u]), vec4(_1981, _1982, _1983, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2035;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2026 = dot(vec4(cbModelParam._m0[40u]), vec4(_1981, _1982, _1983, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2026) ? 0.0 : (isnan(0.0) ? _2026 : max(0.0, _2026))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2039 = (_2035 * cbModelParam._m0[1u].x) + (_2024 * (1.0 - cbModelParam._m0[1u].x));
    float _2049 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1028);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2049 : min(cbModelParam._m0[25u].z, _2049));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2097 = fma(_1274, cbModelParam._m0[13u].z, fma(_1270, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1266)) + cbModelParam._m0[13u].w;
        float _2101 = fma(_1274, cbModelParam._m0[14u].z, fma(_1270, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1266)) + cbModelParam._m0[14u].w;
        float _2105 = fma(_1274, cbModelParam._m0[15u].z, fma(_1270, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1266)) + cbModelParam._m0[15u].w;
        float _2108 = fma(_1212, cbModelParam._m0[13u].z, fma(_1211, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1210));
        float _2111 = fma(_1212, cbModelParam._m0[14u].z, fma(_1211, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1210));
        float _2114 = fma(_1212, cbModelParam._m0[15u].z, fma(_1211, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1210));
        float _2142;
        if (_2108 > 0.0)
        {
            _2142 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2142 = frontier_phi_17_15_ladder;
        }
        float _2345;
        if (_2111 > 0.0)
        {
            _2345 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2345 = frontier_phi_26_22_ladder;
        }
        float _2599;
        if (_2114 > 0.0)
        {
            _2599 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2599 = frontier_phi_38_33_ladder;
        }
        float _2601 = isnan(_2345) ? _2142 : (isnan(_2142) ? _2345 : min(_2142, _2345));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2108) + _2097;
        float _2607 = (_2602 * _2111) + _2101;
        float _2608 = (_2602 * _2114) + _2105;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2050);
            frontier_phi_16_38_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2130 = frontier_phi_16_38_ladder_2;
        _2132 = frontier_phi_16_38_ladder_1;
        _2134 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1210, _1211, _1212), _2050);
        _2130 = _2118.x * cbModelParam._m0[1u].y;
        _2132 = _2118.y * cbModelParam._m0[1u].y;
        _2134 = _2118.z * cbModelParam._m0[1u].y;
    }
    float _2138 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1028);
    float _2139 = isnan(_2138) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2138 : min(cbModelParam._m0[25u].w, _2138));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1274, cbModelParam._m0[21u].z, fma(_1270, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1266)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1274, cbModelParam._m0[22u].z, fma(_1270, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1266)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1274, cbModelParam._m0[23u].z, fma(_1270, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1266)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1212, cbModelParam._m0[21u].z, fma(_1211, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1210));
        float _2207 = fma(_1212, cbModelParam._m0[22u].z, fma(_1211, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1210));
        float _2210 = fma(_1212, cbModelParam._m0[23u].z, fma(_1211, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1210));
        float _2350;
        if (_2204 > 0.0)
        {
            _2350 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2350 = frontier_phi_28_24_ladder;
        }
        float _2626;
        if (_2207 > 0.0)
        {
            _2626 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2626 = frontier_phi_40_35_ladder;
        }
        float _2839;
        if (_2210 > 0.0)
        {
            _2839 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2839 = frontier_phi_49_46_ladder;
        }
        float _2841 = isnan(_2626) ? _2350 : (isnan(_2350) ? _2626 : min(_2350, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2204) + _2193;
        float _2847 = (_2842 * _2207) + _2197;
        float _2848 = (_2842 * _2210) + _2201;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2139);
            frontier_phi_25_49_ladder = _3047.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3047.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3047.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_25_49_ladder_2;
        _2231 = frontier_phi_25_49_ladder_1;
        _2233 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1210, _1211, _1212), _2139);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2246 = (((_1237 * _1186) + _1238) * _1202) * ((cbModelParam._m0[1u].w * (_2229 - _2130)) + _2130);
    float _2248 = (((_1237 * _1188) + _1238) * _1202) * ((cbModelParam._m0[1u].w * (_2231 - _2132)) + _2132);
    float _2250 = (((_1237 * _1189) + _1238) * _1202) * ((cbModelParam._m0[1u].w * (_2233 - _2134)) + _2134);
    float _2253 = fma(_2250, cbSceneParam._m0[89u].z, fma(_2248, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2256 = fma(_2250, cbSceneParam._m0[90u].z, fma(_2248, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2259 = fma(_2250, cbSceneParam._m0[91u].z, fma(_2248, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    uvec4 _2269 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2271 = _2269.x * 14u;
    uint _2272 = _2271 + 13u;
    float _2279 = _1202 + (-1.0);
    float _2284 = (cbLight._m0[_2272].x * _2279) + 1.0;
    float _2285 = (cbLight._m0[_2272].y * _2279) + 1.0;
    float _2286 = (cbLight._m0[_2272].z * _2279) + 1.0;
    float _2287 = (cbLight._m0[_2272].w * _2279) + 1.0;
    uint _2288 = _2271 + 5u;
    float _2294 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2298 = _2271 + 4u;
    float _2304 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2308 = _2271 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_1025, _1026, _1027));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1025, _1026, _1027));
    float _4593 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4604 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2288].x * _2294) * _2329) + ((cbLight._m0[_2298].x * _2304) * _2327);
    float _2337 = ((_2294 * cbLight._m0[_2288].y) * _2329) + ((_2304 * cbLight._m0[_2298].y) * _2327);
    float _2338 = ((_2294 * cbLight._m0[_2288].z) * _2329) + ((_2304 * cbLight._m0[_2298].z) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2271 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2344)
    {
        _2355 = _2336;
        _2357 = _2337;
        _2359 = _2338;
    }
    else
    {
        uint _2363 = _2271 + 6u;
        float _2379 = (dot(vec3(cbLight._m0[_2271 + 2u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4615 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2382 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2355 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2336;
        _2357 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2337;
        _2359 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2338;
    }
    bool _2362 = _2342.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2362)
    {
        _2400 = _2355;
        _2402 = _2357;
        _2404 = _2359;
    }
    else
    {
        uint _2570 = _2271 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2271 + 3u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4631 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2589 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2400 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2355;
        _2402 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2357;
        _2404 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2359;
    }
    uint _2407 = _2271 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _1028) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2271].x + _1104;
    float _2423 = cbLight._m0[_2271].y + _1105;
    float _2424 = cbLight._m0[_2271].z + _1106;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2271].xyz));
    float _4647 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _4658 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _2436 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2437 = dot(vec3(_1025, _1026, _1027), vec3(_2429, _2430, _2431));
    float _4669 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2429, _2430, _2431));
    float _4680 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
    float _2458 = 0.959999978542327880859375 - _1183;
    float _2460 = 0.959999978542327880859375 - _1184;
    float _2461 = 0.959999978542327880859375 - _1185;
    float _2468 = 1.0 - _2421;
    float _2479 = (0.5 / (((_2436 * ((_2435 * _2468) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2468) + _2421) * _2435))) * _2435;
    float _4691 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2492 = _2271 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1028) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2308].x + _1104;
    float _2506 = cbLight._m0[_2308].y + _1105;
    float _2507 = cbLight._m0[_2308].z + _1106;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2308].xyz));
    float _4702 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2519 = dot(vec3(_1025, _1026, _1027), vec3(_2512, _2513, _2514));
    float _4713 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2512, _2513, _2514));
    float _4724 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2436 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2545) + _2504) * _2518))) * _2518;
    float _4735 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2458) + _1186) * cbLight._m0[_2492].x) * _2557) * _2294) + (((((_2457 * _2458) + _1186) * cbLight._m0[_2407].x) * _2481) * _2304);
    float _2568 = (((((_2538 * _2460) + _1188) * cbLight._m0[_2492].y) * _2557) * _2294) + (((((_2457 * _2460) + _1188) * cbLight._m0[_2407].y) * _2481) * _2304);
    float _2569 = (((((_2538 * _2461) + _1189) * cbLight._m0[_2492].z) * _2557) * _2294) + (((((_2457 * _2461) + _1189) * cbLight._m0[_2407].z) * _2481) * _2304);
    float _2631;
    float _2633;
    float _2635;
    if (_2344)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2271 + 2u;
        uint _2641 = _2271 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1028) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1104;
        float _2658 = cbLight._m0[_2637].y + _1105;
        float _2659 = cbLight._m0[_2637].z + _1106;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2637].xyz));
        float _4746 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2671 = dot(vec3(_1025, _1026, _1027), vec3(_2664, _2665, _2666));
        float _4757 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4768 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2436 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2697) + _2656) * _2670))) * _2670;
        float _4779 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2631 = (((((_2690 * _2458) + _1186) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2460) + _1188) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2461) + _1189) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2362)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2271 + 3u;
        uint _2760 = _2271 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1028) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1104;
        float _2777 = cbLight._m0[_2756].y + _1105;
        float _2778 = cbLight._m0[_2756].z + _1106;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2756].xyz));
        float _4795 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2790 = dot(vec3(_1025, _1026, _1027), vec3(_2783, _2784, _2785));
        float _4806 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4817 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2436 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2816) + _2775) * _2789))) * _2789;
        float _4828 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2745 = (((((_2809 * _2458) + _1186) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2460) + _1188) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2461) + _1189) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2269.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1125) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1124) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            uint _3211 = 0u;
            uint _3220;
            bool _3221;
            for (;;)
            {
                _3220 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                _3221 = _3220 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3221)
                {
                    frontier_phi_66_pred = _3205;
                    frontier_phi_66_pred_1 = _3210;
                    frontier_phi_66_pred_2 = _3209;
                    frontier_phi_66_pred_3 = _3208;
                    frontier_phi_66_pred_4 = _3207;
                    frontier_phi_66_pred_5 = _3206;
                }
                else
                {
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    uint _3356;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3220;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    for (;;)
                    {
                        uint _3360 = uint(findLSB(_3356)) + (_3211 << 5u);
                        uint _3357 = (_3356 + 4294967295u) & _3356;
                        uint _3362 = _3360 * 48u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3382 = (_3360 * 48u) + 4u;
                        vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3401 = (_3360 * 48u) + 8u;
                        vec3 _3412 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x));
                        float _3416 = _3376.x - _2905;
                        float _3417 = _3376.y - _2906;
                        float _3418 = _3376.z - _2907;
                        float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                        float _3422 = inversesqrt(_3419);
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3426 = dot(vec3(_1143, _1146, _1149), vec3(_3423, _3424, _3425));
                        float _3431 = 1.0 - (_3419 * _3376.w);
                        float _4854 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3433 = sqrt(_3419) * _3395.w;
                        float _3436 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3426) + _3437;
                        float _3443 = _3433 * _3433;
                        float _3447 = ((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3432) / ((_3443 * 0.699999988079071044921875) + 1.0);
                        float _3451 = (-0.0) - _2905;
                        float _3452 = (-0.0) - _2906;
                        float _3453 = (-0.0) - _2907;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3468 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                        float _3469 = 1.0 - _1218;
                        float _3476 = sqrt(1.0 - ((1.0 - (_3469 * _3469)) * (1.0 - (_3468 * _3468))));
                        float _3477 = _3476 * _3476;
                        float _3478 = _3477 * _3477;
                        float _3479 = _3458 + _3423;
                        float _3480 = _3459 + _3424;
                        float _3481 = _3460 + _3425;
                        float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                        float _3489 = dot(vec3(_1143, _1146, _1149), vec3(_3458, _3459, _3460));
                        float _4870 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3493 = dot(vec3(_1143, _1146, _1149), vec3(_3485 * _3479, _3485 * _3480, _3485 * _3481));
                        float _4881 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3496 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3500 = ((_3496 * _3496) * (_3478 + (-1.0))) + 1.0;
                        float _3501 = _3436 * _3477;
                        float _3502 = _3501 * _3501;
                        float _3505 = ((1.0 - _3502) * _3426) + _3502;
                        float _4892 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3506 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3507 = 1.0 - _3477;
                        float _3517 = (0.5 / (((_3506 * ((_3492 * _3507) + _3477)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3477) * _3492))) * _3506;
                        float _4903 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3528 = (((_3478 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3500 * _3500) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125))) * _3432;
                        _3280 = (_3447 * _3395.x) + _3353;
                        _3281 = (_3447 * _3395.y) + _3354;
                        _3282 = (_3447 * _3395.z) + _3355;
                        _3277 = (_3528 * _3412.x) + _3350;
                        _3278 = (_3528 * _3412.y) + _3351;
                        _3279 = (_3528 * _3412.z) + _3352;
                        if (_3357 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3357;
                        }
                    }
                    frontier_phi_66_pred = _3277;
                    frontier_phi_66_pred_1 = _3282;
                    frontier_phi_66_pred_2 = _3281;
                    frontier_phi_66_pred_3 = _3280;
                    frontier_phi_66_pred_4 = _3279;
                    frontier_phi_66_pred_5 = _3278;
                }
                _3053 = frontier_phi_66_pred;
                _3063 = frontier_phi_66_pred_1;
                _3061 = frontier_phi_66_pred_2;
                _3059 = frontier_phi_66_pred_3;
                _3057 = frontier_phi_66_pred_4;
                _3055 = frontier_phi_66_pred_5;
                uint _3212 = _3211 + 1u;
                if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3205 = _3053;
                    _3206 = _3055;
                    _3207 = _3057;
                    _3208 = _3059;
                    _3209 = _3061;
                    _3210 = _3063;
                    _3211 = _3212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((4294967295u << _3069) & _2951) == 0u)
        {
            _3173 = _3052;
            _3175 = _3054;
            _3177 = _3056;
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
        }
        else
        {
            float _3198 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3199 = _3198 * _2905;
            float _3200 = _3198 * _2906;
            float _3201 = _3198 * _2907;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3333 = _3052;
                float _3334 = _3054;
                float _3335 = _3056;
                float _3336 = _3058;
                float _3337 = _3060;
                float _3338 = _3062;
                uint _3339 = _3069;
                uint _3348;
                bool _3349;
                for (;;)
                {
                    _3348 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                    _3349 = _3348 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3349)
                    {
                        frontier_phi_77_pred = _3338;
                        frontier_phi_77_pred_1 = _3337;
                        frontier_phi_77_pred_2 = _3336;
                        frontier_phi_77_pred_3 = _3335;
                        frontier_phi_77_pred_4 = _3334;
                        frontier_phi_77_pred_5 = _3333;
                    }
                    else
                    {
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        float _3557 = _3335;
                        float _3558 = _3336;
                        float _3559 = _3337;
                        float _3560 = _3338;
                        uint _3561 = _3348;
                        uint _3562;
                        vec4 _3587;
                        float _3588;
                        vec4 _3603;
                        vec3 _3615;
                        vec4 _3630;
                        vec4 _3645;
                        float _3691;
                        bool _3692;
                        for (;;)
                        {
                            uint _3572 = ((_3339 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3561));
                            _3562 = (_3561 + 4294967295u) & _3561;
                            uint _3574 = _3572 * 40u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3588 = _3587.w;
                            uint _3590 = (_3572 * 40u) + 4u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3572 * 40u) + 8u;
                            _3615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x));
                            uint _3617 = (_3572 * 40u) + 16u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3572 * 40u) + 20u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3572 * 40u) + 24u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3666 = (_3572 * 40u) + 28u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3691 = fma(_2907, _3679.z, fma(_2906, _3679.y, _3679.x * _2905)) + _3679.w;
                            _3692 = !((fma(_2907, _3660.z, fma(_2906, _3660.y, _3660.x * _2905)) + _3660.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3692)
                            {
                                float _3719 = _3587.x - _2905;
                                float _3720 = _3587.y - _2906;
                                float _3721 = _3587.z - _2907;
                                float _3722 = dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721));
                                float _3725 = inversesqrt(_3722);
                                float _3726 = _3725 * _3719;
                                float _3727 = _3725 * _3720;
                                float _3728 = _3725 * _3721;
                                float _3732 = 1.0 - (_3722 / (_3588 * _3588));
                                float _4914 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3737 = sqrt(_3722) * _3603.w;
                                float _3739 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                                float _3740 = _3739 * _3739;
                                float _3743 = ((1.0 - _3740) * dot(vec3(_3726, _3727, _3728), vec3(_1143, _1146, _1149))) + _3740;
                                float _3746 = _3737 * _3737;
                                float _3750 = (fma(_2907, _3630.z, fma(_2906, _3630.y, _3630.x * _2905)) + _3630.w) / _3691;
                                float _3751 = (fma(_2907, _3645.z, fma(_2906, _3645.y, _3645.x * _2905)) + _3645.w) / _3691;
                                float _3755 = 1.0 - dot(vec2(_3750, _3751), vec2(_3750, _3751));
                                float _4930 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3757 = _3756 * (((isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0))) * _3733) / ((_3746 * 0.699999988079071044921875) + 1.0));
                                float _3769 = exp2(log2(1.0 / ((_3746 * 3.5) + 5.0)) * 0.25);
                                float _3770 = 1.0 - _1218;
                                float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                                float _3778 = _3777 * _3777;
                                float _3779 = _3778 * _3778;
                                float _3780 = _3726 - _3199;
                                float _3781 = _3727 - _3200;
                                float _3782 = _3728 - _3201;
                                float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                                float _3790 = dot(vec3(_1143, _1146, _1149), vec3((-0.0) - _3199, (-0.0) - _3200, (-0.0) - _3201));
                                float _4941 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3794 = dot(vec3(_1143, _1146, _1149), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                                float _4952 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                                float _3802 = _3739 * _3778;
                                float _3803 = _3802 * _3802;
                                float _3809 = ((1.0 - _3803) * dot(vec3(_1143, _1146, _1149), vec3(_3726, _3727, _3728))) + _3803;
                                float _4963 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3811 = 1.0 - _3778;
                                float _3821 = (0.5 / (((_3810 * ((_3793 * _3811) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3778) * _3793))) * _3810;
                                float _4974 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3831 = (_3756 * _3733) * (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3801 * _3801) * ((_3746 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3757 * _3603.y;
                                frontier_phi_83_pred_1 = _3757 * _3603.x;
                                frontier_phi_83_pred_2 = _3831 * _3615.z;
                                frontier_phi_83_pred_3 = _3831 * _3615.y;
                                frontier_phi_83_pred_4 = _3831 * _3615.x;
                                frontier_phi_83_pred_5 = _3757 * _3603.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3839 = frontier_phi_83_pred;
                            _3838 = frontier_phi_83_pred_1;
                            _3837 = frontier_phi_83_pred_2;
                            _3836 = frontier_phi_83_pred_3;
                            _3835 = frontier_phi_83_pred_4;
                            _3840 = frontier_phi_83_pred_5;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            if (_3562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3562;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3547;
                        frontier_phi_77_pred_1 = _3546;
                        frontier_phi_77_pred_2 = _3545;
                        frontier_phi_77_pred_3 = _3544;
                        frontier_phi_77_pred_4 = _3543;
                        frontier_phi_77_pred_5 = _3542;
                    }
                    _3184 = frontier_phi_77_pred;
                    _3182 = frontier_phi_77_pred_1;
                    _3180 = frontier_phi_77_pred_2;
                    _3178 = frontier_phi_77_pred_3;
                    _3176 = frontier_phi_77_pred_4;
                    _3174 = frontier_phi_77_pred_5;
                    uint _3340 = _3339 + 1u;
                    if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3333 = _3174;
                        _3334 = _3176;
                        _3335 = _3178;
                        _3336 = _3180;
                        _3337 = _3182;
                        _3338 = _3184;
                        _3339 = _3340;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3178;
                frontier_phi_58_59_ladder_1 = _3184;
                frontier_phi_58_59_ladder_2 = _3182;
                frontier_phi_58_59_ladder_3 = _3180;
                frontier_phi_58_59_ladder_4 = _3176;
                frontier_phi_58_59_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_58_59_ladder = _3056;
                frontier_phi_58_59_ladder_1 = _3062;
                frontier_phi_58_59_ladder_2 = _3060;
                frontier_phi_58_59_ladder_3 = _3058;
                frontier_phi_58_59_ladder_4 = _3054;
                frontier_phi_58_59_ladder_5 = _3052;
            }
            _3173 = frontier_phi_58_59_ladder_5;
            _3175 = frontier_phi_58_59_ladder_4;
            _3177 = frontier_phi_58_59_ladder;
            _3179 = frontier_phi_58_59_ladder_3;
            _3181 = frontier_phi_58_59_ladder_2;
            _3183 = frontier_phi_58_59_ladder_1;
        }
        float _3188 = isnan(1.0) ? _1202 : (isnan(_1202) ? 1.0 : min(_1202, 1.0));
        _2964 = (_3188 * _3179) + _2400;
        _2966 = (_3188 * _3181) + _2402;
        _2968 = (_3188 * _3183) + _2404;
        _2970 = ((_3173 * _1186) * _3188) + _2745;
        _2972 = ((_3175 * _1188) * _3188) + _2747;
        _2974 = ((_3177 * _1189) * _3188) + _2749;
    }
    else
    {
        _2964 = _2400;
        _2966 = _2402;
        _2968 = _2404;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    float _4990 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _5001 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _5012 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _2991 = ((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2964 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1202))) + ((_2970 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2966 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1202))) + ((_2972 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    float _2993 = ((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2968 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1202))) + ((_2974 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    uint _2994 = _290 + 6u;
    float _3002 = _1124 / cbSceneParam._m0[86u].x;
    float _3003 = _1125 / cbSceneParam._m0[86u].y;
    vec4 _3017 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, (log2((isnan(cbSceneParam._m0[77u].w) ? _1047 : (isnan(_1047) ? cbSceneParam._m0[77u].w : min(_1047, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3019 = _3017.x;
    float _3020 = _3017.y;
    float _3021 = _3017.z;
    float _3022 = _3017.w;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_1047 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_1047) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1047 : min(cbSceneParam._m0[80u].w, _1047));
        float _3078 = _3077 / _1047;
        float _3089 = _3078 * _1097;
        float _3090 = _1098 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3093 = _3078 * _1099;
        float _3095 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3096 = _3095 + cbSceneParam._m0[79u].w;
        float _3097 = cbSceneParam._m0[79u].w - _3090;
        float _3103 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3093 * _3093));
        float _3106 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3103;
        float _3111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3290;
        if (abs((_3091 - _3095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3290 = ((((_3096 > 0.0) ? exp2(_3111 * _3096) : (2.0 - exp2(_3113 * _3096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3106;
        }
        else
        {
            float _3234 = 1.0 / cbSceneParam._m0[80u].x;
            float _3235 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : max(_3096, _3097));
            float _3236 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : min(_3096, _3097));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            _3290 = ((abs(_3103 / _3091) * cbSceneParam._m0[80u].y) * ((((_3245 - _3246) * 2.0) - ((exp2(_3111 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0)))) - exp2(_3111 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))))) * _3234)) - ((exp2(_3113 * _3245) - exp2(_3113 * _3246)) * _3234))) + (_3106 * cbSceneParam._m0[80u].z);
        }
        vec4 _3292 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, 1.0), 0.0);
        float _3301 = exp2((_3290 * (-1.44269502162933349609375)) * (1.0 - _3292.w));
        float _3302 = log2(_3301);
        float _3318 = log2(_3022);
        _3115 = (exp2(_3318 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].x)) * _3292.x) / cbSceneParam._m0[78u].x)) + _3019;
        _3117 = (exp2(_3318 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].y)) * _3292.y) / cbSceneParam._m0[78u].y)) + _3020;
        _3119 = (exp2(_3318 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3302 * cbSceneParam._m0[78u].z)) * _3292.z) / cbSceneParam._m0[78u].z)) + _3021;
        _3121 = _3301 * _3022;
    }
    else
    {
        _3115 = _3019;
        _3117 = _3020;
        _3119 = _3021;
        _3121 = _3022;
    }
    bool _3328;
    vec4 _3131;
    vec4 _3153;
    float _3155;
    float _3159;
    float _3160;
    float _3161;
    float _3162;
    bool _3172;
    for (;;)
    {
        _3131 = cbMatDynParam._m0[0u];
        float _3133 = roundEven(_3131.y);
        bool _3134 = _3133 == 3.0;
        float _3135 = log2(_3121);
        float _3142 = exp2(_3135 * cbSceneParam._m0[78u].x) * _2991;
        float _3143 = exp2(_3135 * cbSceneParam._m0[78u].y) * _2992;
        float _3144 = exp2(_3135 * cbSceneParam._m0[78u].z) * _2993;
        float _3151 = _1113 + (-0.5);
        _3153 = cbMtdParam._m0[1u];
        _3155 = _3153.y * _3151;
        float _3158 = (_3133 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3159 = _3158 * (_3134 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3115)));
        _3160 = _3158 * (_3134 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3117)));
        _3161 = _3158 * (_3134 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3119)));
        _3162 = _3151 * 0.999000012874603271484375;
        _3172 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3172)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3162) < 0.5)
            {
                _3328 = true;
                break;
            }
        }
        uint _3269 = _1162 + uint(_3131.w);
        if ((cbInstanceData._m0[_3269].w < 1.0) && ((cbInstanceData._m0[_3269].w + _3162) < 0.5))
        {
            _3328 = true;
            break;
        }
        if ((_3155 + 1.0) < _3153.x)
        {
            _3328 = true;
            break;
        }
        _3328 = false;
        break;
    }
    float _3533;
    if (_3328)
    {
        discard_state = true;
        _3533 = 0.0;
    }
    else
    {
        _3533 = cbInstanceData._m0[_2994].w;
    }
    SV_Target.x = _3159;
    SV_Target.y = _3160;
    SV_Target.z = _3161;
    SV_Target.w = _3533;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2994].w;
    discard_exit();
}


