#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1499;
float _3876;
float _3877;
float _3878;
float _3879;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _346.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3888 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _424 = (_417 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _425 = (_417 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _426 = (_417 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _346.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3899 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _537 = _535.x;
    float _547 = dot(vec4(_537, _535.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _559 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _346.z) * 2.0) - ((((_537 - _547) * cbMtdParam._m0[23u].w) + _547) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3910 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _567 = (_560 * ((_518.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _568 = (_560 * ((_518.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _569 = (_560 * ((_518.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _628 = _624.z;
    float _635 = ((_607.x - _626) * _417) + _626;
    float _636 = ((_607.y - _627) * _417) + _627;
    float _637 = ((_607.z - _628) * _417) + _628;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_649.x - _635) * _490) + _635;
    float _661 = ((_649.y - _636) * _490) + _636;
    float _662 = ((_649.z - _637) * _490) + _637;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _687 = ((_674.z - _662) * _560) + _662;
    float _690 = ((((_674.x - _660) * _560) + _660) * 2.0) + (-1.0);
    float _692 = ((((_674.y - _661) * _560) + _661) * 2.0) + (-1.0);
    float _693 = dot(vec2(_690, _692), vec2(_690, _692));
    float _3921 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _739 = _737.x;
    float _740 = 1.0 - _739;
    float _755 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_739 - _740) * cbMtdParam._m0[24u].z) + _740) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3932 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _763 = (_756 * ((_587.x * cbMtdParam._m0[18u].x) - _567)) + _567;
    float _764 = (_756 * ((_587.y * cbMtdParam._m0[18u].y) - _568)) + _568;
    float _765 = (_756 * ((_587.z * cbMtdParam._m0[18u].z) - _569)) + _569;
    vec4 _791 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _793 = _791.x;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _793) * _417) + _793;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _811) * _490) + _811;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _828) * _560) + _828;
    float _850 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _846) * cbMtdParam._m0[19u].z) + _846;
    float _852 = _850 - (_850 * _756);
    float _856 = (cbMtdParam._m0[19u].w * (_712.z - _687)) + _687;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _876 = (_869.x * 2.0) + (-1.0);
    float _877 = (_869.y * 2.0) + (-1.0);
    float _878 = dot(vec2(_876, _877), vec2(_876, _877));
    float _3943 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _886 = (_756 * (_869.z - _856)) + _856;
    float _889 = (((_712.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _690;
    float _890 = (((_712.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    float _902 = (((_876 - _889) + (cbMtdParam._m0[21u].x * _889)) * _756) + _889;
    float _903 = (((_877 - _890) + (cbMtdParam._m0[21u].x * _890)) * _756) + _890;
    float _904 = (_756 * (sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) - _698)) + _698;
    float _906 = cbMtdParam._m0[22u].x + _712.w;
    float _909 = fma(_904, _245 * NORMAL.x, fma(_903, _252 * TANGENT.x, (_238 * _230) * _902));
    float _912 = fma(_904, _245 * NORMAL.y, fma(_903, _252 * TANGENT.y, (_238 * _231) * _902));
    float _915 = fma(_904, _245 * NORMAL.z, fma(_903, _252 * TANGENT.z, (_238 * _232) * _902));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _3954 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _923 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _3976 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3987 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3998 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4009 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _928 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    vec4 _1006 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1008 = _1006.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1180 = sqrt(((_992 * _992) + (_993 * _993)) + (_994 * _994));
        float _1186 = (cbMatDynParam._m0[5u].x * _1180) + cbMatDynParam._m0[5u].y;
        float _4020 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1191 = (cbMatDynParam._m0[5u].z * _1180) + cbMatDynParam._m0[5u].w;
        float _4031 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) - _1187)) + _1187) < ((_1008 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1041 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1044 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1057 = _258 + 9u;
    uint _1058 = _1057 + uint(cbMatDynParam._m0[0u].w);
    float _1064 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1058].x;
    float _1065 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_1058].y;
    float _1066 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_1058].z;
    float _4042 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1070 = 1.0 - _928;
    float _1071 = _1067 * _1070;
    float _1072 = _1068 * _1070;
    float _1073 = _1069 * _1070;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _928;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _928;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _928;
    float _1081 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    vec4 _1093 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1097 = ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * TEXCOORD_5.w) * _1093.x;
    float _1098 = dot(vec3(_920, _921, _922), vec3(_999, _1000, _1001));
    float _1101 = _1098 * 2.0;
    float _1105 = (_1101 * _920) - _999;
    float _1106 = (_1101 * _921) - _1000;
    float _1107 = (_1101 * _922) - _1001;
    float _1111 = abs(dot(vec3(_999, _1000, _1001), vec3(_920, _921, _922)));
    float _4075 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1113 = sqrt(_923);
    float _1126 = exp2((_1113 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1113 * 3.0));
    float _1132 = (1.0 - _1126) * ((_1113 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1133 = _1126 * _1113;
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1498;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1223 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1227 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1231 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1256 = _1161 + _920;
        float _1257 = _1165 + _921;
        float _1258 = _1169 + _922;
        float _1268 = fma(_1258, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256)) - _1223;
        float _1269 = fma(_1258, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256)) - _1227;
        float _1270 = fma(_1258, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256)) - _1231;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1223 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1227 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[34u].z) + ((((((_1231 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1326 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1292.x + (-0.5));
        float _1328 = _1326 * (_1292.y + (-0.5));
        float _1329 = _1326 * (_1292.z + (-0.5));
        float _1336 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1299.x + (-0.5));
        float _1338 = _1336 * (_1299.y + (-0.5));
        float _1339 = _1336 * (_1299.z + (-0.5));
        float _1346 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1306.x + (-0.5));
        float _1348 = _1346 * (_1306.y + (-0.5));
        float _1349 = _1346 * (_1306.z + (-0.5));
        float _1356 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1313.x + (-0.5));
        float _1358 = _1356 * (_1313.y + (-0.5));
        float _1359 = _1356 * (_1313.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1380 = (dot(vec3(_920, _921, _922), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1390 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4123 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1392 + 1.0))) + _1397) * _1360;
        float _1407 = _1328 * 0.5;
        float _1408 = _1338 * 0.5;
        float _1409 = _1348 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_920, _921, _922), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4156 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1434 + 1.0))) + _1439) * _1361;
        float _1449 = _1329 * 0.5;
        float _1450 = _1339 * 0.5;
        float _1451 = _1349 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_920, _921, _922), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4189 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1476 + 1.0))) + _1481) * _1362;
        _1498 = _1329;
        _1500 = _1328;
        _1501 = _1327;
        _1502 = _1339;
        _1503 = _1338;
        _1504 = _1337;
        _1505 = _1349;
        _1506 = _1348;
        _1507 = _1347;
        _1508 = _1362;
        _1509 = _1361;
        _1510 = _1360;
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1499;
        _1500 = _1499;
        _1501 = _1499;
        _1502 = _1499;
        _1503 = _1499;
        _1504 = _1499;
        _1505 = _1499;
        _1506 = _1499;
        _1507 = _1499;
        _1508 = _1499;
        _1509 = _1499;
        _1510 = _1499;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1539 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1543 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1547 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1570 = _1161 + _920;
        float _1571 = _1165 + _921;
        float _1572 = _1169 + _922;
        float _1582 = fma(_1572, cbModelParam._m0[30u].z, fma(_1571, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1570)) - _1539;
        float _1583 = fma(_1572, cbModelParam._m0[31u].z, fma(_1571, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1570)) - _1543;
        float _1584 = fma(_1572, cbModelParam._m0[32u].z, fma(_1571, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1570)) - _1547;
        float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
        float _1601 = ((_1588 * _1582) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1539 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1588 * _1583) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1543 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1588 * _1584) / cbModelParam._m0[35u].z) + ((((((_1547 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1601, _1602, _1603), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1601, _1602, _1603), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1601, _1602, _1603), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1601, _1602, _1603), 0.0);
        float _1638 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1605.x + (-0.5));
        float _1640 = _1638 * (_1605.y + (-0.5));
        float _1641 = _1638 * (_1605.z + (-0.5));
        float _1648 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1612.x + (-0.5));
        float _1650 = _1648 * (_1612.y + (-0.5));
        float _1651 = _1648 * (_1612.z + (-0.5));
        float _1658 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1619.x + (-0.5));
        float _1660 = _1658 * (_1619.y + (-0.5));
        float _1661 = _1658 * (_1619.z + (-0.5));
        float _1668 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1626.x + (-0.5));
        float _1670 = _1668 * (_1626.y + (-0.5));
        float _1671 = _1668 * (_1626.z + (-0.5));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = _1639 * 0.5;
        float _1676 = _1649 * 0.5;
        float _1677 = _1659 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_920, _921, _922), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4252 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1702 + 1.0))) + _1707) * _1672;
        float _1717 = _1640 * 0.5;
        float _1718 = _1650 * 0.5;
        float _1719 = _1660 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_920, _921, _922), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4285 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1744 + 1.0))) + _1749) * _1673;
        float _1759 = _1641 * 0.5;
        float _1760 = _1651 * 0.5;
        float _1761 = _1661 * 0.5;
        float _1762 = dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761));
        float _1767 = (_1762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1762);
        float _1775 = (dot(vec3(_920, _921, _922), vec3(_1767 * _1759, _1767 * _1760, _1767 * _1761)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1784 = sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1786 = _1785 * 2.0;
        float _1790 = (1.0 - _1785) / (_1785 + 1.0);
        float _4318 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1800 = ((((1.0 - _1791) * (_1786 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1786 + 1.0))) + _1791) * _1674;
        _1808 = _1641;
        _1809 = _1640;
        _1810 = _1639;
        _1811 = _1651;
        _1812 = _1650;
        _1813 = _1649;
        _1814 = _1661;
        _1815 = _1660;
        _1816 = _1659;
        _1817 = _1674;
        _1818 = _1673;
        _1819 = _1672;
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)));
    }
    else
    {
        _1808 = _1499;
        _1809 = _1499;
        _1810 = _1499;
        _1811 = _1499;
        _1812 = _1499;
        _1813 = _1499;
        _1814 = _1499;
        _1815 = _1499;
        _1816 = _1499;
        _1817 = _1499;
        _1818 = _1499;
        _1819 = _1499;
        _1820 = 0.0;
        _1821 = 0.0;
        _1822 = 0.0;
    }
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1511)) + _1511;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1512)) + _1512;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1513)) + _1513;
    float _1855 = fma(_1834, cbSceneParam._m0[89u].z, fma(_1833, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1834, cbSceneParam._m0[90u].z, fma(_1833, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1834, cbSceneParam._m0[91u].z, fma(_1833, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1832));
    float _1876 = _1105 * 0.5;
    float _1877 = _1106 * 0.5;
    float _1878 = _1107 * 0.5;
    float _1879 = dot(vec4(_1876, _1877, _1878, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1882 = dot(vec4(_1876, _1877, _1878, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1885 = dot(vec4(_1876, _1877, _1878, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1919;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1892 = dot(vec4(_1876, _1877, _1878, 1.0), vec4(_1498, _1502, _1505, _1508));
        float _1896 = dot(vec4(_1876, _1877, _1878, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1900 = dot(vec4(_1876, _1877, _1878, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1907 = dot(vec4(cbModelParam._m0[39u]), vec4(_1876, _1877, _1878, 1.0));
        _1919 = dot(vec3(isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1919 = 1.0;
    }
    float _1930;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1921 = dot(vec4(cbModelParam._m0[40u]), vec4(_1876, _1877, _1878, 1.0));
        _1930 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1921) ? 0.0 : (isnan(0.0) ? _1921 : max(0.0, _1921))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1930 = 1.0;
    }
    float _1934 = (_1930 * cbModelParam._m0[1u].x) + (_1919 * (1.0 - cbModelParam._m0[1u].x));
    float _1944 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1944 : min(cbModelParam._m0[25u].z, _1944));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1992 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1996 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _2000 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _2003 = fma(_1107, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105));
        float _2006 = fma(_1107, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105));
        float _2009 = fma(_1107, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105));
        float _2037;
        if (_2003 > 0.0)
        {
            _2037 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2037 = frontier_phi_17_15_ladder;
        }
        float _2239;
        if (_2006 > 0.0)
        {
            _2239 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2239 = frontier_phi_26_22_ladder;
        }
        float _2493;
        if (_2009 > 0.0)
        {
            _2493 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2493 = frontier_phi_38_33_ladder;
        }
        float _2495 = isnan(_2239) ? _2037 : (isnan(_2037) ? _2239 : min(_2037, _2239));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _2003) + _1992;
        float _2501 = (_2496 * _2006) + _1996;
        float _2502 = (_2496 * _2009) + _2000;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2503;
        float _2507 = _2503 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 > _2507) || ((_2501 < _2505) || ((_2500 < _2505) || (_2500 > _2507))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2502, cbModelParam._m0[9u].z, fma(_2501, cbModelParam._m0[9u].y, _2500 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2502, cbModelParam._m0[10u].z, fma(_2501, cbModelParam._m0[10u].y, _2500 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2502, cbModelParam._m0[11u].z, fma(_2501, cbModelParam._m0[11u].y, _2500 * cbModelParam._m0[11u].x))), _1945);
            frontier_phi_16_38_ladder = _2630.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2630.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2630.x * cbModelParam._m0[1u].y;
        }
        _2025 = frontier_phi_16_38_ladder_2;
        _2027 = frontier_phi_16_38_ladder_1;
        _2029 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1105, _1106, _1107), _1945);
        _2025 = _2013.x * cbModelParam._m0[1u].y;
        _2027 = _2013.y * cbModelParam._m0[1u].y;
        _2029 = _2013.z * cbModelParam._m0[1u].y;
    }
    float _2033 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _2034 = isnan(_2033) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2033 : min(cbModelParam._m0[25u].w, _2033));
    float _2123;
    float _2125;
    float _2127;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2087 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2091 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2095 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2098 = fma(_1107, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105));
        float _2101 = fma(_1107, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105));
        float _2104 = fma(_1107, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105));
        float _2244;
        if (_2098 > 0.0)
        {
            _2244 = abs((1.0 - _2087) / _2098);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2087 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2244 = frontier_phi_28_24_ladder;
        }
        float _2520;
        if (_2101 > 0.0)
        {
            _2520 = abs((1.0 - _2091) / _2101);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2091 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2520 = frontier_phi_40_35_ladder;
        }
        float _2733;
        if (_2104 > 0.0)
        {
            _2733 = abs((1.0 - _2095) / _2104);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2095 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2733 = frontier_phi_49_46_ladder;
        }
        float _2735 = isnan(_2520) ? _2244 : (isnan(_2244) ? _2520 : min(_2244, _2520));
        float _2736 = isnan(_2733) ? _2735 : (isnan(_2735) ? _2733 : min(_2735, _2733));
        float _2740 = (_2736 * _2098) + _2087;
        float _2741 = (_2736 * _2101) + _2091;
        float _2742 = (_2736 * _2104) + _2095;
        float _2743 = _2736 * 9.9999997473787516355514526367188e-05;
        float _2744 = (-1.0) - _2743;
        float _2746 = _2743 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2742 > _2746) || ((_2742 < _2744) || ((_2741 > _2746) || ((_2741 < _2744) || ((_2740 < _2744) || (_2740 > _2746))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2742, cbModelParam._m0[17u].z, fma(_2741, cbModelParam._m0[17u].y, _2740 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2742, cbModelParam._m0[18u].z, fma(_2741, cbModelParam._m0[18u].y, _2740 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2742, cbModelParam._m0[19u].z, fma(_2741, cbModelParam._m0[19u].y, _2740 * cbModelParam._m0[19u].x))), _2034);
            frontier_phi_25_49_ladder = _2941.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2941.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2941.x * cbModelParam._m0[1u].z;
        }
        _2123 = frontier_phi_25_49_ladder_2;
        _2125 = frontier_phi_25_49_ladder_1;
        _2127 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2107 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1105, _1106, _1107), _2034);
        _2123 = _2107.x * cbModelParam._m0[1u].z;
        _2125 = _2107.y * cbModelParam._m0[1u].z;
        _2127 = _2107.z * cbModelParam._m0[1u].z;
    }
    float _2140 = (((_1132 * _1081) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2123 - _2025)) + _2025);
    float _2142 = (((_1132 * _1083) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2125 - _2027)) + _2027);
    float _2144 = (((_1132 * _1084) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2127 - _2029)) + _2029);
    float _2147 = fma(_2144, cbSceneParam._m0[89u].z, fma(_2142, cbSceneParam._m0[89u].y, _2140 * cbSceneParam._m0[89u].x));
    float _2150 = fma(_2144, cbSceneParam._m0[90u].z, fma(_2142, cbSceneParam._m0[90u].y, _2140 * cbSceneParam._m0[90u].x));
    float _2153 = fma(_2144, cbSceneParam._m0[91u].z, fma(_2142, cbSceneParam._m0[91u].y, _2140 * cbSceneParam._m0[91u].x));
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _1097 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2198 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2202 = _2165 | 1u;
    float _2213 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_920, _921, _922));
    float _2216 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_920, _921, _922));
    float _4454 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _4465 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2221 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * 0.3183098733425140380859375;
    float _2223 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2230 = ((cbLight._m0[_2182].x * _2188) * _2223) + ((cbLight._m0[_2192].x * _2198) * _2221);
    float _2231 = ((_2188 * cbLight._m0[_2182].y) * _2223) + ((_2198 * cbLight._m0[_2192].y) * _2221);
    float _2232 = ((_2188 * cbLight._m0[_2182].z) * _2223) + ((_2198 * cbLight._m0[_2192].z) * _2221);
    uvec4 _2236 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2238 = _2236.x == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2238)
    {
        _2249 = _2230;
        _2251 = _2231;
        _2253 = _2232;
    }
    else
    {
        uint _2257 = _2165 + 6u;
        float _2273 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4476 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2276 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2249 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2230;
        _2251 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2231;
        _2253 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2232;
    }
    bool _2256 = _2236.y == 0u;
    float _2294;
    float _2296;
    float _2298;
    if (_2256)
    {
        _2294 = _2249;
        _2296 = _2251;
        _2298 = _2253;
    }
    else
    {
        uint _2464 = _2165 + 7u;
        float _2480 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2481 = _2480 * _2480;
        float _4492 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2482 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2483 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2294 = (((cbLight._m0[_2464].x * 0.3183098733425140380859375) * _2482) * _2483) + _2249;
        _2296 = (((cbLight._m0[_2464].y * 0.3183098733425140380859375) * _2482) * _2483) + _2251;
        _2298 = (((cbLight._m0[_2464].z * 0.3183098733425140380859375) * _2482) * _2483) + _2253;
    }
    uint _2301 = _2165 + 8u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _923) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2165].x + _999;
    float _2317 = cbLight._m0[_2165].y + _1000;
    float _2318 = cbLight._m0[_2165].z + _1001;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2165].xyz));
    float _4508 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _4519 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2330 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2331 = dot(vec3(_920, _921, _922), vec3(_2323, _2324, _2325));
    float _4530 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2335 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2323, _2324, _2325));
    float _4541 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2339 = _2315 * _2315;
    float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
    float _2352 = 0.959999978542327880859375 - _1078;
    float _2354 = 0.959999978542327880859375 - _1079;
    float _2355 = 0.959999978542327880859375 - _1080;
    float _2362 = 1.0 - _2315;
    float _2373 = (0.5 / (((_2330 * ((_2329 * _2362) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2330 * _2362) + _2315) * _2329))) * _2329;
    float _4552 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2375 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
    uint _2386 = _2165 + 9u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _923) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2202].x + _999;
    float _2400 = cbLight._m0[_2202].y + _1000;
    float _2401 = cbLight._m0[_2202].z + _1001;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2202].xyz));
    float _4563 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2413 = dot(vec3(_920, _921, _922), vec3(_2406, _2407, _2408));
    float _4574 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2406, _2407, _2408));
    float _4585 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2398 * _2398;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2432 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
    float _2439 = 1.0 - _2398;
    float _2449 = (0.5 / (((_2330 * ((_2412 * _2439) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2330 * _2439) + _2398) * _2412))) * _2412;
    float _4596 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    float _2461 = (((((_2432 * _2352) + _1081) * cbLight._m0[_2386].x) * _2451) * _2188) + (((((_2351 * _2352) + _1081) * cbLight._m0[_2301].x) * _2375) * _2198);
    float _2462 = (((((_2432 * _2354) + _1083) * cbLight._m0[_2386].y) * _2451) * _2188) + (((((_2351 * _2354) + _1083) * cbLight._m0[_2301].y) * _2375) * _2198);
    float _2463 = (((((_2432 * _2355) + _1084) * cbLight._m0[_2386].z) * _2451) * _2188) + (((((_2351 * _2355) + _1084) * cbLight._m0[_2301].z) * _2375) * _2198);
    float _2525;
    float _2527;
    float _2529;
    if (_2238)
    {
        _2525 = _2461;
        _2527 = _2462;
        _2529 = _2463;
    }
    else
    {
        uint _2531 = _2165 + 2u;
        uint _2535 = _2165 + 10u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _923) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _999;
        float _2552 = cbLight._m0[_2531].y + _1000;
        float _2553 = cbLight._m0[_2531].z + _1001;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2531].xyz));
        float _4607 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2565 = dot(vec3(_920, _921, _922), vec3(_2558, _2559, _2560));
        float _4618 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4629 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
        float _2591 = 1.0 - _2550;
        float _2601 = (0.5 / (((_2330 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2330 * _2591) + _2550) * _2564))) * _2564;
        float _4640 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2525 = (((((_2584 * _2352) + _1081) * cbLight._m0[_2535].x) * _2603) * _2604) + _2461;
        _2527 = (((((_2584 * _2354) + _1083) * cbLight._m0[_2535].y) * _2603) * _2604) + _2462;
        _2529 = (((((_2584 * _2355) + _1084) * cbLight._m0[_2535].z) * _2603) * _2604) + _2463;
    }
    float _2639;
    float _2641;
    float _2643;
    if (_2256)
    {
        _2639 = _2525;
        _2641 = _2527;
        _2643 = _2529;
    }
    else
    {
        uint _2650 = _2165 + 3u;
        uint _2654 = _2165 + 11u;
        float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2650].w)) * _923) * 0.949999988079071044921875);
        float _2669 = _2668 * _2668;
        float _2670 = cbLight._m0[_2650].x + _999;
        float _2671 = cbLight._m0[_2650].y + _1000;
        float _2672 = cbLight._m0[_2650].z + _1001;
        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
        float _2677 = _2676 * _2670;
        float _2678 = _2676 * _2671;
        float _2679 = _2676 * _2672;
        float _2680 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2650].xyz));
        float _4656 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2684 = dot(vec3(_920, _921, _922), vec3(_2677, _2678, _2679));
        float _4667 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2688 = dot(vec3(cbLight._m0[_2650].xyz), vec3(_2677, _2678, _2679));
        float _4678 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2692 = _2669 * _2669;
        float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
        float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2710 = 1.0 - _2669;
        float _2720 = (0.5 / (((_2330 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2330 * _2710) + _2669) * _2683))) * _2683;
        float _4689 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2722 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
        float _2723 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2639 = (((((_2703 * _2352) + _1081) * cbLight._m0[_2654].x) * _2722) * _2723) + _2525;
        _2641 = (((((_2703 * _2354) + _1083) * cbLight._m0[_2654].y) * _2722) * _2723) + _2527;
        _2643 = (((((_2703 * _2355) + _1084) * cbLight._m0[_2654].z) * _2722) * _2723) + _2529;
    }
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_2163.y == 0u)
    {
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2798;
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2798;
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2798;
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.x;
        uint _2825 = uint((float(_2813.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _2814))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _2814)));
        float _2835 = (log2(_2801 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2836 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        uint _2839 = uint(isnan(14.0) ? _2836 : (isnan(_2836) ? 14.0 : min(_2836, 14.0)));
        uvec4 _2844 = texelFetch(g_lightClusterGridBuffer, int(((_2839 << 2u) + (_2825 << 6u)) >> 2u));
        uint _2845 = _2844.x;
        uint _2846 = _2813.z;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        if (((((1u << ((_2846 >> 4u) & 15u)) + 4294967295u) & _2845) == 0u) || ((_2846 & 240u) == 0u))
        {
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
        }
        else
        {
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            uint _3105 = 0u;
            uint _3114;
            bool _3115;
            for (;;)
            {
                _3114 = texelFetch(g_lightClassification, int((((_2839 << 5u) + (_2825 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                _3115 = _3114 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3115)
                {
                    frontier_phi_66_pred = _3099;
                    frontier_phi_66_pred_1 = _3104;
                    frontier_phi_66_pred_2 = _3103;
                    frontier_phi_66_pred_3 = _3102;
                    frontier_phi_66_pred_4 = _3101;
                    frontier_phi_66_pred_5 = _3100;
                }
                else
                {
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    uint _3250;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3114;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    for (;;)
                    {
                        uint _3254 = uint(findLSB(_3250)) + (_3105 << 5u);
                        uint _3251 = (_3250 + 4294967295u) & _3250;
                        uint _3256 = _3254 * 48u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3276 = (_3254 * 48u) + 4u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3295 = (_3254 * 48u) + 8u;
                        vec3 _3306 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x));
                        float _3310 = _3270.x - _2799;
                        float _3311 = _3270.y - _2800;
                        float _3312 = _3270.z - _2801;
                        float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                        float _3316 = inversesqrt(_3313);
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3320 = dot(vec3(_1038, _1041, _1044), vec3(_3317, _3318, _3319));
                        float _3325 = 1.0 - (_3313 * _3270.w);
                        float _4715 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3327 = sqrt(_3313) * _3289.w;
                        float _3330 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3320) + _3331;
                        float _3337 = _3327 * _3327;
                        float _3341 = ((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3326) / ((_3337 * 0.699999988079071044921875) + 1.0);
                        float _3345 = (-0.0) - _2799;
                        float _3346 = (-0.0) - _2800;
                        float _3347 = (-0.0) - _2801;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3362 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                        float _3363 = 1.0 - _1113;
                        float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                        float _3371 = _3370 * _3370;
                        float _3372 = _3371 * _3371;
                        float _3373 = _3352 + _3317;
                        float _3374 = _3353 + _3318;
                        float _3375 = _3354 + _3319;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3383 = dot(vec3(_1038, _1041, _1044), vec3(_3352, _3353, _3354));
                        float _4731 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3387 = dot(vec3(_1038, _1041, _1044), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                        float _4742 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                        float _3395 = _3330 * _3371;
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3320) + _3396;
                        float _4753 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3401 = 1.0 - _3371;
                        float _3411 = (0.5 / (((_3400 * ((_3386 * _3401) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3371) * _3386))) * _3400;
                        float _4764 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3422 = (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3394 * _3394) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125))) * _3326;
                        _3174 = (_3341 * _3289.x) + _3247;
                        _3175 = (_3341 * _3289.y) + _3248;
                        _3176 = (_3341 * _3289.z) + _3249;
                        _3171 = (_3422 * _3306.x) + _3244;
                        _3172 = (_3422 * _3306.y) + _3245;
                        _3173 = (_3422 * _3306.z) + _3246;
                        if (_3251 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3251;
                        }
                    }
                    frontier_phi_66_pred = _3171;
                    frontier_phi_66_pred_1 = _3176;
                    frontier_phi_66_pred_2 = _3175;
                    frontier_phi_66_pred_3 = _3174;
                    frontier_phi_66_pred_4 = _3173;
                    frontier_phi_66_pred_5 = _3172;
                }
                _2947 = frontier_phi_66_pred;
                _2957 = frontier_phi_66_pred_1;
                _2955 = frontier_phi_66_pred_2;
                _2953 = frontier_phi_66_pred_3;
                _2951 = frontier_phi_66_pred_4;
                _2949 = frontier_phi_66_pred_5;
                uint _3106 = _3105 + 1u;
                if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3099 = _2947;
                    _3100 = _2949;
                    _3101 = _2951;
                    _3102 = _2953;
                    _3103 = _2955;
                    _3104 = _2957;
                    _3105 = _3106;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
        }
        uvec4 _2960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2961 = _2960.z;
        uint _2963 = (_2961 >> 8u) & 15u;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((4294967295u << _2963) & _2845) == 0u)
        {
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
        }
        else
        {
            float _3092 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
            float _3093 = _3092 * _2799;
            float _3094 = _3092 * _2800;
            float _3095 = _3092 * _2801;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2963 < ((_2961 >> 12u) & 15u))
            {
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3227 = _2946;
                float _3228 = _2948;
                float _3229 = _2950;
                float _3230 = _2952;
                float _3231 = _2954;
                float _3232 = _2956;
                uint _3233 = _2963;
                uint _3242;
                bool _3243;
                for (;;)
                {
                    _3242 = texelFetch(g_lightClassification, int((((_2839 << 5u) + (_2825 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                    _3243 = _3242 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3243)
                    {
                        frontier_phi_77_pred = _3232;
                        frontier_phi_77_pred_1 = _3231;
                        frontier_phi_77_pred_2 = _3230;
                        frontier_phi_77_pred_3 = _3229;
                        frontier_phi_77_pred_4 = _3228;
                        frontier_phi_77_pred_5 = _3227;
                    }
                    else
                    {
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        uint _3455 = _3242;
                        uint _3456;
                        vec4 _3481;
                        float _3482;
                        vec4 _3497;
                        vec3 _3509;
                        vec4 _3524;
                        vec4 _3539;
                        float _3585;
                        bool _3586;
                        for (;;)
                        {
                            uint _3466 = ((_3233 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3455));
                            _3456 = (_3455 + 4294967295u) & _3455;
                            uint _3468 = _3466 * 40u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3482 = _3481.w;
                            uint _3484 = (_3466 * 40u) + 4u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3466 * 40u) + 8u;
                            _3509 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x));
                            uint _3511 = (_3466 * 40u) + 16u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3466 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3466 * 40u) + 24u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3560 = (_3466 * 40u) + 28u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3585 = fma(_2801, _3573.z, fma(_2800, _3573.y, _3573.x * _2799)) + _3573.w;
                            _3586 = !((fma(_2801, _3554.z, fma(_2800, _3554.y, _3554.x * _2799)) + _3554.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3586)
                            {
                                float _3613 = _3481.x - _2799;
                                float _3614 = _3481.y - _2800;
                                float _3615 = _3481.z - _2801;
                                float _3616 = dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615));
                                float _3619 = inversesqrt(_3616);
                                float _3620 = _3619 * _3613;
                                float _3621 = _3619 * _3614;
                                float _3622 = _3619 * _3615;
                                float _3626 = 1.0 - (_3616 / (_3482 * _3482));
                                float _4775 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3631 = sqrt(_3616) * _3497.w;
                                float _3633 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                                float _3634 = _3633 * _3633;
                                float _3637 = ((1.0 - _3634) * dot(vec3(_3620, _3621, _3622), vec3(_1038, _1041, _1044))) + _3634;
                                float _3640 = _3631 * _3631;
                                float _3644 = (fma(_2801, _3524.z, fma(_2800, _3524.y, _3524.x * _2799)) + _3524.w) / _3585;
                                float _3645 = (fma(_2801, _3539.z, fma(_2800, _3539.y, _3539.x * _2799)) + _3539.w) / _3585;
                                float _3649 = 1.0 - dot(vec2(_3644, _3645), vec2(_3644, _3645));
                                float _4791 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3651 = _3650 * (((isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0))) * _3627) / ((_3640 * 0.699999988079071044921875) + 1.0));
                                float _3663 = exp2(log2(1.0 / ((_3640 * 3.5) + 5.0)) * 0.25);
                                float _3664 = 1.0 - _1113;
                                float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                                float _3672 = _3671 * _3671;
                                float _3673 = _3672 * _3672;
                                float _3674 = _3620 - _3093;
                                float _3675 = _3621 - _3094;
                                float _3676 = _3622 - _3095;
                                float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                                float _3684 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3093, (-0.0) - _3094, (-0.0) - _3095));
                                float _4802 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3688 = dot(vec3(_1038, _1041, _1044), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                                float _4813 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                                float _3696 = _3633 * _3672;
                                float _3697 = _3696 * _3696;
                                float _3703 = ((1.0 - _3697) * dot(vec3(_1038, _1041, _1044), vec3(_3620, _3621, _3622))) + _3697;
                                float _4824 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3705 = 1.0 - _3672;
                                float _3715 = (0.5 / (((_3704 * ((_3687 * _3705) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3672) * _3687))) * _3704;
                                float _4835 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3725 = (_3650 * _3627) * (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3695 * _3695) * ((_3640 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3651 * _3497.y;
                                frontier_phi_83_pred_1 = _3651 * _3497.x;
                                frontier_phi_83_pred_2 = _3725 * _3509.z;
                                frontier_phi_83_pred_3 = _3725 * _3509.y;
                                frontier_phi_83_pred_4 = _3725 * _3509.x;
                                frontier_phi_83_pred_5 = _3651 * _3497.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3733 = frontier_phi_83_pred;
                            _3732 = frontier_phi_83_pred_1;
                            _3731 = frontier_phi_83_pred_2;
                            _3730 = frontier_phi_83_pred_3;
                            _3729 = frontier_phi_83_pred_4;
                            _3734 = frontier_phi_83_pred_5;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            if (_3456 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3456;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3441;
                        frontier_phi_77_pred_1 = _3440;
                        frontier_phi_77_pred_2 = _3439;
                        frontier_phi_77_pred_3 = _3438;
                        frontier_phi_77_pred_4 = _3437;
                        frontier_phi_77_pred_5 = _3436;
                    }
                    _3078 = frontier_phi_77_pred;
                    _3076 = frontier_phi_77_pred_1;
                    _3074 = frontier_phi_77_pred_2;
                    _3072 = frontier_phi_77_pred_3;
                    _3070 = frontier_phi_77_pred_4;
                    _3068 = frontier_phi_77_pred_5;
                    uint _3234 = _3233 + 1u;
                    if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3227 = _3068;
                        _3228 = _3070;
                        _3229 = _3072;
                        _3230 = _3074;
                        _3231 = _3076;
                        _3232 = _3078;
                        _3233 = _3234;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3072;
                frontier_phi_58_59_ladder_1 = _3078;
                frontier_phi_58_59_ladder_2 = _3076;
                frontier_phi_58_59_ladder_3 = _3074;
                frontier_phi_58_59_ladder_4 = _3070;
                frontier_phi_58_59_ladder_5 = _3068;
            }
            else
            {
                frontier_phi_58_59_ladder = _2950;
                frontier_phi_58_59_ladder_1 = _2956;
                frontier_phi_58_59_ladder_2 = _2954;
                frontier_phi_58_59_ladder_3 = _2952;
                frontier_phi_58_59_ladder_4 = _2948;
                frontier_phi_58_59_ladder_5 = _2946;
            }
            _3067 = frontier_phi_58_59_ladder_5;
            _3069 = frontier_phi_58_59_ladder_4;
            _3071 = frontier_phi_58_59_ladder;
            _3073 = frontier_phi_58_59_ladder_3;
            _3075 = frontier_phi_58_59_ladder_2;
            _3077 = frontier_phi_58_59_ladder_1;
        }
        float _3082 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
        _2858 = (_3082 * _3073) + _2294;
        _2860 = (_3082 * _3075) + _2296;
        _2862 = (_3082 * _3077) + _2298;
        _2864 = ((_3067 * _1081) * _3082) + _2639;
        _2866 = ((_3069 * _1083) * _3082) + _2641;
        _2868 = ((_3071 * _1084) * _3082) + _2643;
    }
    else
    {
        _2858 = _2294;
        _2860 = _2296;
        _2862 = _2298;
        _2864 = _2639;
        _2866 = _2641;
        _2868 = _2643;
    }
    float _4851 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4862 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4873 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2885 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2858 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1097))) + ((_2864 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1934)) * cbPerFrame._m0[3u].x);
    float _2886 = ((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2860 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1097))) + ((_2866 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1934)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2862 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1097))) + ((_2868 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1934)) * cbPerFrame._m0[3u].x);
    uint _2888 = _258 + 6u;
    float _2896 = _1019 / cbSceneParam._m0[86u].x;
    float _2897 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _2911 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2896, _2897, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2913 = _2911.x;
    float _2914 = _2911.y;
    float _2915 = _2911.z;
    float _2916 = _2911.w;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _2971 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _2972 = _2971 / _942;
        float _2983 = _2972 * _992;
        float _2984 = _993 * _2972;
        float _2985 = (-0.0) - _2984;
        float _2987 = _2972 * _994;
        float _2989 = (cbSceneParam._m0[77u].w * _2985) / _2971;
        float _2990 = _2989 + cbSceneParam._m0[79u].w;
        float _2991 = cbSceneParam._m0[79u].w - _2984;
        float _2997 = sqrt(((_2983 * _2983) + (_2984 * _2984)) + (_2987 * _2987));
        float _3000 = (1.0 - (cbSceneParam._m0[77u].w / _2971)) * _2997;
        float _3005 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3007 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3184;
        if (abs((_2985 - _2989) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3184 = ((((_2990 > 0.0) ? exp2(_3005 * _2990) : (2.0 - exp2(_3007 * _2990))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3000;
        }
        else
        {
            float _3128 = 1.0 / cbSceneParam._m0[80u].x;
            float _3129 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : max(_2990, _2991));
            float _3130 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : min(_2990, _2991));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            _3184 = ((abs(_2997 / _2985) * cbSceneParam._m0[80u].y) * ((((_3139 - _3140) * 2.0) - ((exp2(_3005 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0)))) - exp2(_3005 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))))) * _3128)) - ((exp2(_3007 * _3139) - exp2(_3007 * _3140)) * _3128))) + (_3000 * cbSceneParam._m0[80u].z);
        }
        vec4 _3186 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2896, _2897, 1.0), 0.0);
        float _3195 = exp2((_3184 * (-1.44269502162933349609375)) * (1.0 - _3186.w));
        float _3196 = log2(_3195);
        float _3212 = log2(_2916);
        _3009 = (exp2(_3212 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].x)) * _3186.x) / cbSceneParam._m0[78u].x)) + _2913;
        _3011 = (exp2(_3212 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].y)) * _3186.y) / cbSceneParam._m0[78u].y)) + _2914;
        _3013 = (exp2(_3212 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].z)) * _3186.z) / cbSceneParam._m0[78u].z)) + _2915;
        _3015 = _3195 * _2916;
    }
    else
    {
        _3009 = _2913;
        _3011 = _2914;
        _3013 = _2915;
        _3015 = _2916;
    }
    bool _3222;
    vec4 _3025;
    vec4 _3047;
    float _3049;
    float _3053;
    float _3054;
    float _3055;
    float _3056;
    bool _3066;
    for (;;)
    {
        _3025 = cbMatDynParam._m0[0u];
        float _3027 = roundEven(_3025.y);
        bool _3028 = _3027 == 3.0;
        float _3029 = log2(_3015);
        float _3036 = exp2(_3029 * cbSceneParam._m0[78u].x) * _2885;
        float _3037 = exp2(_3029 * cbSceneParam._m0[78u].y) * _2886;
        float _3038 = exp2(_3029 * cbSceneParam._m0[78u].z) * _2887;
        float _3045 = _1008 + (-0.5);
        _3047 = cbMtdParam._m0[1u];
        _3049 = _3047.y * _3045;
        float _3052 = (_3027 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3053 = _3052 * (_3028 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3009)));
        _3054 = _3052 * (_3028 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3011)));
        _3055 = _3052 * (_3028 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3013)));
        _3056 = _3045 * 0.999000012874603271484375;
        _3066 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3066)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3056) < 0.5)
            {
                _3222 = true;
                break;
            }
        }
        uint _3163 = _1057 + uint(_3025.w);
        if ((cbInstanceData._m0[_3163].w < 1.0) && ((cbInstanceData._m0[_3163].w + _3056) < 0.5))
        {
            _3222 = true;
            break;
        }
        if ((_3049 + 1.0) < _3047.x)
        {
            _3222 = true;
            break;
        }
        _3222 = false;
        break;
    }
    float _3427;
    if (_3222)
    {
        discard_state = true;
        _3427 = 0.0;
    }
    else
    {
        _3427 = cbInstanceData._m0[_2888].w;
    }
    SV_Target.x = _3053;
    SV_Target.y = _3054;
    SV_Target.z = _3055;
    SV_Target.w = _3427;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2888].w;
    discard_exit();
}


