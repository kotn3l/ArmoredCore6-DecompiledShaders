#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1558;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _355.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3906 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _433 = (_426 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _434 = (_426 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _435 = (_426 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _355.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _546 = _544.x;
    float _556 = dot(vec4(_546, _544.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _568 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _355.z) * 2.0) - ((((_546 - _556) * cbMtdParam._m0[23u].w) + _556) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3928 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _576 = (_569 * ((_527.x * cbMtdParam._m0[14u].x) - _506)) + _506;
    float _577 = (_569 * ((_527.y * cbMtdParam._m0[14u].y) - _507)) + _507;
    float _578 = (_569 * ((_527.z * cbMtdParam._m0[14u].z) - _508)) + _508;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _426) + _615;
    float _625 = ((_596.y - _616) * _426) + _616;
    float _626 = ((_596.z - _617) * _426) + _617;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_638.x - _624) * _499) + _624;
    float _650 = ((_638.y - _625) * _499) + _625;
    float _651 = ((_638.z - _626) * _499) + _626;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _676 = ((_663.z - _651) * _569) + _651;
    float _679 = ((((_663.x - _649) * _569) + _649) * 2.0) + (-1.0);
    float _681 = ((((_663.y - _650) * _569) + _650) * 2.0) + (-1.0);
    float _682 = dot(vec2(_679, _681), vec2(_679, _681));
    float _3939 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _728 = _726.x;
    float _729 = 1.0 - _728;
    float _737 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _740 = ((isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : min(_737, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _749 = (_740 - ((((((_728 - _729) * cbMtdParam._m0[24u].z) + _729) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _740))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3960 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _757 = (_750 * (cbMtdParam._m0[17u].x - _576)) + _576;
    float _758 = (_750 * (cbMtdParam._m0[17u].y - _577)) + _577;
    float _759 = (_750 * (cbMtdParam._m0[17u].z - _578)) + _578;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _773 = _771.x;
    float _774 = 1.0 - _773;
    float _799 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_773 - _774) * cbMtdParam._m0[24u].w) + _774) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3971 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _808 = ((((cbMtdParam._m0[10u].x - _757) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _800) + _757;
    float _809 = ((((cbMtdParam._m0[10u].y - _758) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _800) + _758;
    float _810 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _759)) * _800) + _759;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _838 = _836.x;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _838) * _426) + _838;
    float _873 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _856) * _499) + _856;
    float _890 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _873) * _569) + _873;
    float _894 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _890) * cbMtdParam._m0[19u].z) + _890;
    float _896 = _894 - (_894 * _750);
    float _898 = _896 - (_896 * _800);
    float _902 = (cbMtdParam._m0[19u].w * (_701.z - _676)) + _676;
    vec4 _916 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _923 = (_916.x * 2.0) + (-1.0);
    float _924 = (_916.y * 2.0) + (-1.0);
    float _925 = dot(vec2(_923, _924), vec2(_923, _924));
    float _3982 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _933 = (_750 * (_916.z - _902)) + _902;
    float _936 = ((cbMtdParam._m0[23u].x - _933) * _800) + _933;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _965 = (_959.x * 2.0) + (-1.0);
    float _966 = (_959.y * 2.0) + (-1.0);
    float _967 = dot(vec2(_965, _966), vec2(_965, _966));
    float _3993 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _975 = (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _679;
    float _976 = (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _681;
    float _988 = (((_923 - _975) + (cbMtdParam._m0[21u].x * _975)) * _750) + _975;
    float _989 = (((_924 - _976) + (cbMtdParam._m0[21u].x * _976)) * _750) + _976;
    float _990 = (_750 * (sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _687)) + _687;
    float _1001 = (((_965 - _988) + (_988 * cbMtdParam._m0[22u].z)) * _800) + _988;
    float _1002 = (((_966 - _989) + (_989 * cbMtdParam._m0[22u].z)) * _800) + _989;
    float _1003 = ((sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _990) * _800) + _990;
    float _1005 = cbMtdParam._m0[22u].x + _701.w;
    float _1008 = fma(_1003, _256 * NORMAL.x, fma(_1002, _263 * TANGENT.x, (_249 * _241) * _1001));
    float _1011 = fma(_1003, _256 * NORMAL.y, fma(_1002, _263 * TANGENT.y, (_249 * _242) * _1001));
    float _1014 = fma(_1003, _256 * NORMAL.z, fma(_1002, _263 * TANGENT.z, (_249 * _243) * _1001));
    float _1018 = inversesqrt(dot(vec3(_1008, _1011, _1014), vec3(_1008, _1011, _1014)));
    float _1019 = _1018 * _1008;
    float _1020 = _1018 * _1011;
    float _1021 = _1018 * _1014;
    float _4004 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _1022 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4026 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4037 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4048 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4059 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _1027 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1041 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1091 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1081);
    float _1092 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1081);
    float _1093 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1081);
    float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
    float _1098 = _1091 * _1097;
    float _1099 = _1092 * _1097;
    float _1100 = _1093 * _1097;
    float _1106 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1107 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1125 = fma(_1021, cbSceneParam._m0[5u].z, fma(_1020, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1019));
    float _1128 = fma(_1021, cbSceneParam._m0[6u].z, fma(_1020, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1019));
    float _1131 = fma(_1021, cbSceneParam._m0[7u].z, fma(_1020, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1019));
    uint _1145 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1151 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1145].x;
    float _1152 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1145].y;
    float _1153 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1145].z;
    float _4070 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1154 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _1155 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1156 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1157 = 1.0 - _1027;
    float _1158 = _1154 * _1157;
    float _1159 = _1155 * _1157;
    float _1160 = _1156 * _1157;
    float _1165 = (_1154 + (-0.039999999105930328369140625)) * _1027;
    float _1166 = (_1155 + (-0.039999999105930328369140625)) * _1027;
    float _1167 = (_1156 + (-0.039999999105930328369140625)) * _1027;
    float _1168 = _1165 + 0.039999999105930328369140625;
    float _1170 = _1166 + 0.039999999105930328369140625;
    float _1171 = _1167 + 0.039999999105930328369140625;
    vec4 _1180 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1106, cbSceneParam._m0[86u].y * _1107));
    float _1184 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _1180.x;
    float _1185 = dot(vec3(_1019, _1020, _1021), vec3(_1098, _1099, _1100));
    float _1188 = _1185 * 2.0;
    float _1192 = (_1188 * _1019) - _1098;
    float _1193 = (_1188 * _1020) - _1099;
    float _1194 = (_1188 * _1021) - _1100;
    float _1198 = abs(dot(vec3(_1098, _1099, _1100), vec3(_1019, _1020, _1021)));
    float _4103 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1200 = sqrt(_1022);
    float _1213 = exp2((_1200 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1200 * 3.0));
    float _1219 = (1.0 - _1213) * ((_1200 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1220 = _1213 * _1200;
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1252 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1256 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1557;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1282 = fma(_1256, cbModelParam._m0[26u].z, fma(_1252, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1248));
        float _1286 = fma(_1256, cbModelParam._m0[27u].z, fma(_1252, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1248));
        float _1290 = fma(_1256, cbModelParam._m0[28u].z, fma(_1252, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1248));
        float _1315 = _1248 + _1019;
        float _1316 = _1252 + _1020;
        float _1317 = _1256 + _1021;
        float _1327 = fma(_1317, cbModelParam._m0[26u].z, fma(_1316, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1315)) - _1282;
        float _1328 = fma(_1317, cbModelParam._m0[27u].z, fma(_1316, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1315)) - _1286;
        float _1329 = fma(_1317, cbModelParam._m0[28u].z, fma(_1316, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1315)) - _1290;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1282 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1286 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[34u].z) + ((((((_1290 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1385 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1351.x + (-0.5));
        float _1387 = _1385 * (_1351.y + (-0.5));
        float _1388 = _1385 * (_1351.z + (-0.5));
        float _1395 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1358.x + (-0.5));
        float _1397 = _1395 * (_1358.y + (-0.5));
        float _1398 = _1395 * (_1358.z + (-0.5));
        float _1405 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1365.x + (-0.5));
        float _1407 = _1405 * (_1365.y + (-0.5));
        float _1408 = _1405 * (_1365.z + (-0.5));
        float _1415 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1372.x + (-0.5));
        float _1417 = _1415 * (_1372.y + (-0.5));
        float _1418 = _1415 * (_1372.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1439 = (dot(vec3(_1019, _1020, _1021), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1449 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4151 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1451 + 1.0))) + _1456) * _1419;
        float _1466 = _1387 * 0.5;
        float _1467 = _1397 * 0.5;
        float _1468 = _1407 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_1019, _1020, _1021), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4184 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1493 + 1.0))) + _1498) * _1420;
        float _1508 = _1388 * 0.5;
        float _1509 = _1398 * 0.5;
        float _1510 = _1408 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_1019, _1020, _1021), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4217 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1535 + 1.0))) + _1540) * _1421;
        _1557 = _1388;
        _1559 = _1387;
        _1560 = _1386;
        _1561 = _1398;
        _1562 = _1397;
        _1563 = _1396;
        _1564 = _1408;
        _1565 = _1407;
        _1566 = _1406;
        _1567 = _1421;
        _1568 = _1420;
        _1569 = _1419;
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1571 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1572 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1558;
        _1559 = _1558;
        _1560 = _1558;
        _1561 = _1558;
        _1562 = _1558;
        _1563 = _1558;
        _1564 = _1558;
        _1565 = _1558;
        _1566 = _1558;
        _1567 = _1558;
        _1568 = _1558;
        _1569 = _1558;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1595 = fma(_1256, cbModelParam._m0[30u].z, fma(_1252, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1248));
        float _1599 = fma(_1256, cbModelParam._m0[31u].z, fma(_1252, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1248));
        float _1603 = fma(_1256, cbModelParam._m0[32u].z, fma(_1252, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1248));
        float _1626 = _1248 + _1019;
        float _1627 = _1252 + _1020;
        float _1628 = _1256 + _1021;
        float _1638 = fma(_1628, cbModelParam._m0[30u].z, fma(_1627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1626)) - _1595;
        float _1639 = fma(_1628, cbModelParam._m0[31u].z, fma(_1627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1626)) - _1599;
        float _1640 = fma(_1628, cbModelParam._m0[32u].z, fma(_1627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1626)) - _1603;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1657 = ((_1644 * _1638) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1595 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1644 * _1639) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1599 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1644 * _1640) / cbModelParam._m0[35u].z) + ((((((_1603 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        float _1694 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1661.x + (-0.5));
        float _1696 = _1694 * (_1661.y + (-0.5));
        float _1697 = _1694 * (_1661.z + (-0.5));
        float _1704 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1668.x + (-0.5));
        float _1706 = _1704 * (_1668.y + (-0.5));
        float _1707 = _1704 * (_1668.z + (-0.5));
        float _1714 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1675.x + (-0.5));
        float _1716 = _1714 * (_1675.y + (-0.5));
        float _1717 = _1714 * (_1675.z + (-0.5));
        float _1724 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1682.x + (-0.5));
        float _1726 = _1724 * (_1682.y + (-0.5));
        float _1727 = _1724 * (_1682.z + (-0.5));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = _1695 * 0.5;
        float _1732 = _1705 * 0.5;
        float _1733 = _1715 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_1019, _1020, _1021), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4280 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1758 + 1.0))) + _1763) * _1728;
        float _1773 = _1696 * 0.5;
        float _1774 = _1706 * 0.5;
        float _1775 = _1716 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_1019, _1020, _1021), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4313 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1800 + 1.0))) + _1805) * _1729;
        float _1815 = _1697 * 0.5;
        float _1816 = _1707 * 0.5;
        float _1817 = _1717 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_1019, _1020, _1021), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4346 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1842 + 1.0))) + _1847) * _1730;
        _1864 = _1697;
        _1865 = _1696;
        _1866 = _1695;
        _1867 = _1707;
        _1868 = _1706;
        _1869 = _1705;
        _1870 = _1717;
        _1871 = _1716;
        _1872 = _1715;
        _1873 = _1730;
        _1874 = _1729;
        _1875 = _1728;
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
    }
    else
    {
        _1864 = _1558;
        _1865 = _1558;
        _1866 = _1558;
        _1867 = _1558;
        _1868 = _1558;
        _1869 = _1558;
        _1870 = _1558;
        _1871 = _1558;
        _1872 = _1558;
        _1873 = _1558;
        _1874 = _1558;
        _1875 = _1558;
        _1876 = 0.0;
        _1877 = 0.0;
        _1878 = 0.0;
    }
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1570)) + _1570;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1571)) + _1571;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1572)) + _1572;
    float _1911 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1888));
    float _1932 = _1192 * 0.5;
    float _1933 = _1193 * 0.5;
    float _1934 = _1194 * 0.5;
    float _1935 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1938 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1941 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1975;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1948 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1557, _1561, _1564, _1567));
        float _1952 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1559, _1562, _1565, _1568));
        float _1956 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1560, _1563, _1566, _1569));
        float _1963 = dot(vec4(cbModelParam._m0[39u]), vec4(_1932, _1933, _1934, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1963) ? 0.0 : (isnan(0.0) ? _1963 : max(0.0, _1963))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1986;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1977 = dot(vec4(cbModelParam._m0[40u]), vec4(_1932, _1933, _1934, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1977) ? 0.0 : (isnan(0.0) ? _1977 : max(0.0, _1977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1990 = (_1986 * cbModelParam._m0[1u].x) + (_1975 * (1.0 - cbModelParam._m0[1u].x));
    float _2000 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1022);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2000 : min(cbModelParam._m0[25u].z, _2000));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2048 = fma(_1256, cbModelParam._m0[13u].z, fma(_1252, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1248)) + cbModelParam._m0[13u].w;
        float _2052 = fma(_1256, cbModelParam._m0[14u].z, fma(_1252, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1248)) + cbModelParam._m0[14u].w;
        float _2056 = fma(_1256, cbModelParam._m0[15u].z, fma(_1252, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1248)) + cbModelParam._m0[15u].w;
        float _2059 = fma(_1194, cbModelParam._m0[13u].z, fma(_1193, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1192));
        float _2062 = fma(_1194, cbModelParam._m0[14u].z, fma(_1193, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1192));
        float _2065 = fma(_1194, cbModelParam._m0[15u].z, fma(_1193, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1192));
        float _2093;
        if (_2059 > 0.0)
        {
            _2093 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2093 = frontier_phi_14_12_ladder;
        }
        float _2317;
        if (_2062 > 0.0)
        {
            _2317 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2317 = frontier_phi_23_19_ladder;
        }
        float _2574;
        if (_2065 > 0.0)
        {
            _2574 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2574 = frontier_phi_35_30_ladder;
        }
        float _2576 = isnan(_2317) ? _2093 : (isnan(_2093) ? _2317 : min(_2093, _2317));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _2059) + _2048;
        float _2582 = (_2577 * _2062) + _2052;
        float _2583 = (_2577 * _2065) + _2056;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2586 = (-1.0) - _2584;
        float _2588 = _2584 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2583 > _2588) || ((_2583 < _2586) || ((_2582 > _2588) || ((_2582 < _2586) || ((_2581 < _2586) || (_2581 > _2588))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2583, cbModelParam._m0[9u].z, fma(_2582, cbModelParam._m0[9u].y, _2581 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2583, cbModelParam._m0[10u].z, fma(_2582, cbModelParam._m0[10u].y, _2581 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2583, cbModelParam._m0[11u].z, fma(_2582, cbModelParam._m0[11u].y, _2581 * cbModelParam._m0[11u].x))), _2001);
            frontier_phi_13_35_ladder = _2711.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2711.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2711.x * cbModelParam._m0[1u].y;
        }
        _2081 = frontier_phi_13_35_ladder_2;
        _2083 = frontier_phi_13_35_ladder_1;
        _2085 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1192, _1193, _1194), _2001);
        _2081 = _2069.x * cbModelParam._m0[1u].y;
        _2083 = _2069.y * cbModelParam._m0[1u].y;
        _2085 = _2069.z * cbModelParam._m0[1u].y;
    }
    float _2089 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1022);
    float _2090 = isnan(_2089) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2089 : min(cbModelParam._m0[25u].w, _2089));
    float _2180;
    float _2182;
    float _2184;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2144 = fma(_1256, cbModelParam._m0[21u].z, fma(_1252, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1248)) + cbModelParam._m0[21u].w;
        float _2148 = fma(_1256, cbModelParam._m0[22u].z, fma(_1252, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1248)) + cbModelParam._m0[22u].w;
        float _2152 = fma(_1256, cbModelParam._m0[23u].z, fma(_1252, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1248)) + cbModelParam._m0[23u].w;
        float _2155 = fma(_1194, cbModelParam._m0[21u].z, fma(_1193, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1192));
        float _2158 = fma(_1194, cbModelParam._m0[22u].z, fma(_1193, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1192));
        float _2161 = fma(_1194, cbModelParam._m0[23u].z, fma(_1193, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1192));
        float _2322;
        if (_2155 > 0.0)
        {
            _2322 = abs((1.0 - _2144) / _2155);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2144 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2322 = frontier_phi_25_21_ladder;
        }
        float _2601;
        if (_2158 > 0.0)
        {
            _2601 = abs((1.0 - _2148) / _2158);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2148 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2601 = frontier_phi_37_32_ladder;
        }
        float _2814;
        if (_2161 > 0.0)
        {
            _2814 = abs((1.0 - _2152) / _2161);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2152 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2814 = frontier_phi_46_43_ladder;
        }
        float _2816 = isnan(_2601) ? _2322 : (isnan(_2322) ? _2601 : min(_2322, _2601));
        float _2817 = isnan(_2814) ? _2816 : (isnan(_2816) ? _2814 : min(_2816, _2814));
        float _2821 = (_2817 * _2155) + _2144;
        float _2822 = (_2817 * _2158) + _2148;
        float _2823 = (_2817 * _2161) + _2152;
        float _2824 = _2817 * 9.9999997473787516355514526367188e-05;
        float _2825 = (-1.0) - _2824;
        float _2827 = _2824 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2823 > _2827) || ((_2823 < _2825) || ((_2822 > _2827) || ((_2822 < _2825) || ((_2821 < _2825) || (_2821 > _2827))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2823, cbModelParam._m0[17u].z, fma(_2822, cbModelParam._m0[17u].y, _2821 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2823, cbModelParam._m0[18u].z, fma(_2822, cbModelParam._m0[18u].y, _2821 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2823, cbModelParam._m0[19u].z, fma(_2822, cbModelParam._m0[19u].y, _2821 * cbModelParam._m0[19u].x))), _2090);
            frontier_phi_22_46_ladder = _3022.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3022.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3022.x * cbModelParam._m0[1u].z;
        }
        _2180 = frontier_phi_22_46_ladder_2;
        _2182 = frontier_phi_22_46_ladder_1;
        _2184 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2164 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1192, _1193, _1194), _2090);
        _2180 = _2164.x * cbModelParam._m0[1u].z;
        _2182 = _2164.y * cbModelParam._m0[1u].z;
        _2184 = _2164.z * cbModelParam._m0[1u].z;
    }
    float _2197 = (((_1219 * _1168) + _1220) * _1184) * ((cbModelParam._m0[1u].w * (_2180 - _2081)) + _2081);
    float _2199 = (((_1219 * _1170) + _1220) * _1184) * ((cbModelParam._m0[1u].w * (_2182 - _2083)) + _2083);
    float _2201 = (((_1219 * _1171) + _1220) * _1184) * ((cbModelParam._m0[1u].w * (_2184 - _2085)) + _2085);
    float _2204 = fma(_2201, cbSceneParam._m0[89u].z, fma(_2199, cbSceneParam._m0[89u].y, _2197 * cbSceneParam._m0[89u].x));
    float _2207 = fma(_2201, cbSceneParam._m0[90u].z, fma(_2199, cbSceneParam._m0[90u].y, _2197 * cbSceneParam._m0[90u].x));
    float _2210 = fma(_2201, cbSceneParam._m0[91u].z, fma(_2199, cbSceneParam._m0[91u].y, _2197 * cbSceneParam._m0[91u].x));
    vec4 _2218 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1106, _1107));
    float _2220 = _2218.w;
    float _2232 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2220);
    float _2233 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2220);
    float _2234 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2220);
    uvec4 _2238 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2240 = _2238.x * 14u;
    uint _2241 = _2240 + 13u;
    float _2248 = _1184 + (-1.0);
    float _2253 = (cbLight._m0[_2241].x * _2248) + 1.0;
    float _2254 = (cbLight._m0[_2241].y * _2248) + 1.0;
    float _2255 = (cbLight._m0[_2241].z * _2248) + 1.0;
    float _2256 = (cbLight._m0[_2241].w * _2248) + 1.0;
    uint _2257 = _2240 + 5u;
    float _2263 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2267 = _2240 + 4u;
    float _2276 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
    uint _2280 = _2240 | 1u;
    float _2291 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_1019, _1020, _1021));
    float _2294 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_1019, _1020, _1021));
    float _4482 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _4493 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2299 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2301 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2308 = ((cbLight._m0[_2257].x * _2263) * _2301) + (((cbLight._m0[_2267].x * _2232) * _2276) * _2299);
    float _2309 = ((_2263 * cbLight._m0[_2257].y) * _2301) + (((cbLight._m0[_2267].y * _2233) * _2276) * _2299);
    float _2310 = ((_2263 * cbLight._m0[_2257].z) * _2301) + (((cbLight._m0[_2267].z * _2234) * _2276) * _2299);
    uvec4 _2314 = floatBitsToUint(cbLight._m0[_2240 + 12u]);
    bool _2316 = _2314.x == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2316)
    {
        _2327 = _2308;
        _2329 = _2309;
        _2331 = _2310;
    }
    else
    {
        uint _2335 = _2240 + 6u;
        float _2351 = (dot(vec3(cbLight._m0[_2240 + 2u].xyz), vec3(_1019, _1020, _1021)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4504 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2354 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2327 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2308;
        _2329 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2309;
        _2331 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2310;
    }
    bool _2334 = _2314.y == 0u;
    float _2372;
    float _2374;
    float _2376;
    if (_2334)
    {
        _2372 = _2327;
        _2374 = _2329;
        _2376 = _2331;
    }
    else
    {
        uint _2545 = _2240 + 7u;
        float _2561 = (dot(vec3(cbLight._m0[_2240 + 3u].xyz), vec3(_1019, _1020, _1021)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4520 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2564 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2372 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2327;
        _2374 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2329;
        _2376 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2331;
    }
    uint _2379 = _2240 + 8u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _1022) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2240].x + _1098;
    float _2395 = cbLight._m0[_2240].y + _1099;
    float _2396 = cbLight._m0[_2240].z + _1100;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2240].xyz));
    float _4536 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _2408 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2409 = dot(vec3(_1019, _1020, _1021), vec3(_2401, _2402, _2403));
    float _4558 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2413 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2401, _2402, _2403));
    float _4569 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2417 = _2393 * _2393;
    float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
    float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2430 = 0.959999978542327880859375 - _1165;
    float _2432 = 0.959999978542327880859375 - _1166;
    float _2433 = 0.959999978542327880859375 - _1167;
    float _2440 = 1.0 - _2393;
    float _2451 = (0.5 / (((_2408 * ((_2407 * _2440) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2440) + _2393) * _2407))) * _2407;
    float _4580 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
    uint _2467 = _2240 + 9u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _1022) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2280].x + _1098;
    float _2481 = cbLight._m0[_2280].y + _1099;
    float _2482 = cbLight._m0[_2280].z + _1100;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2280].xyz));
    float _4591 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2494 = dot(vec3(_1019, _1020, _1021), vec3(_2487, _2488, _2489));
    float _4602 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2487, _2488, _2489));
    float _4613 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2479 * _2479;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2520 = 1.0 - _2479;
    float _2530 = (0.5 / (((_2408 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2520) + _2479) * _2493))) * _2493;
    float _4624 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2532 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    float _2542 = (((((_2513 * _2430) + _1168) * cbLight._m0[_2467].x) * _2532) * _2263) + ((((cbLight._m0[_2379].x * _2232) * ((_2429 * _2430) + _1168)) * _2453) * _2276);
    float _2543 = (((((_2513 * _2432) + _1170) * cbLight._m0[_2467].y) * _2532) * _2263) + ((((cbLight._m0[_2379].y * _2233) * ((_2429 * _2432) + _1170)) * _2453) * _2276);
    float _2544 = (((((_2513 * _2433) + _1171) * cbLight._m0[_2467].z) * _2532) * _2263) + ((((cbLight._m0[_2379].z * _2234) * ((_2429 * _2433) + _1171)) * _2453) * _2276);
    float _2606;
    float _2608;
    float _2610;
    if (_2316)
    {
        _2606 = _2542;
        _2608 = _2543;
        _2610 = _2544;
    }
    else
    {
        uint _2612 = _2240 + 2u;
        uint _2616 = _2240 + 10u;
        float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2612].w)) * _1022) * 0.949999988079071044921875);
        float _2631 = _2630 * _2630;
        float _2632 = cbLight._m0[_2612].x + _1098;
        float _2633 = cbLight._m0[_2612].y + _1099;
        float _2634 = cbLight._m0[_2612].z + _1100;
        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
        float _2639 = _2638 * _2632;
        float _2640 = _2638 * _2633;
        float _2641 = _2638 * _2634;
        float _2642 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2612].xyz));
        float _4635 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2646 = dot(vec3(_1019, _1020, _1021), vec3(_2639, _2640, _2641));
        float _4646 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2650 = dot(vec3(cbLight._m0[_2612].xyz), vec3(_2639, _2640, _2641));
        float _4657 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2654 = _2631 * _2631;
        float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
        float _2665 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2672 = 1.0 - _2631;
        float _2682 = (0.5 / (((_2408 * ((_2645 * _2672) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2672) + _2631) * _2645))) * _2645;
        float _4668 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2606 = (((((_2665 * _2430) + _1168) * cbLight._m0[_2616].x) * _2684) * _2685) + _2542;
        _2608 = (((((_2665 * _2432) + _1170) * cbLight._m0[_2616].y) * _2684) * _2685) + _2543;
        _2610 = (((((_2665 * _2433) + _1171) * cbLight._m0[_2616].z) * _2684) * _2685) + _2544;
    }
    float _2720;
    float _2722;
    float _2724;
    if (_2334)
    {
        _2720 = _2606;
        _2722 = _2608;
        _2724 = _2610;
    }
    else
    {
        uint _2731 = _2240 + 3u;
        uint _2735 = _2240 + 11u;
        float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2731].w)) * _1022) * 0.949999988079071044921875);
        float _2750 = _2749 * _2749;
        float _2751 = cbLight._m0[_2731].x + _1098;
        float _2752 = cbLight._m0[_2731].y + _1099;
        float _2753 = cbLight._m0[_2731].z + _1100;
        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
        float _2758 = _2757 * _2751;
        float _2759 = _2757 * _2752;
        float _2760 = _2757 * _2753;
        float _2761 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2731].xyz));
        float _4684 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2765 = dot(vec3(_1019, _1020, _1021), vec3(_2758, _2759, _2760));
        float _4695 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2769 = dot(vec3(cbLight._m0[_2731].xyz), vec3(_2758, _2759, _2760));
        float _4706 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2773 = _2750 * _2750;
        float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
        float _2784 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2791 = 1.0 - _2750;
        float _2801 = (0.5 / (((_2408 * ((_2764 * _2791) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2791) + _2750) * _2764))) * _2764;
        float _4717 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2720 = (((((_2784 * _2430) + _1168) * cbLight._m0[_2735].x) * _2803) * _2804) + _2606;
        _2722 = (((((_2784 * _2432) + _1170) * cbLight._m0[_2735].y) * _2803) * _2804) + _2608;
        _2724 = (((((_2784 * _2433) + _1171) * cbLight._m0[_2735].z) * _2803) * _2804) + _2610;
    }
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_2238.y == 0u)
    {
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2879;
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2879;
        float _2882 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2879;
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.x;
        uint _2906 = uint((float(_2894.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1107) / _2895))) + floor(float(uint(cbSceneParam._m0[85u].x * _1106) / _2895)));
        float _2916 = (log2(_2882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2917 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        uint _2920 = uint(isnan(14.0) ? _2917 : (isnan(_2917) ? 14.0 : min(_2917, 14.0)));
        uvec4 _2925 = texelFetch(g_lightClusterGridBuffer, int(((_2920 << 2u) + (_2906 << 6u)) >> 2u));
        uint _2926 = _2925.x;
        uint _2927 = _2894.z;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((((1u << ((_2927 >> 4u) & 15u)) + 4294967295u) & _2926) == 0u) || ((_2927 & 240u) == 0u))
        {
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
        }
        else
        {
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            uint _3178 = 0u;
            uint _3187;
            bool _3188;
            for (;;)
            {
                _3187 = texelFetch(g_lightClassification, int((((_2920 << 5u) + (_2906 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                _3188 = _3187 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3188)
                {
                    frontier_phi_61_pred = _3172;
                    frontier_phi_61_pred_1 = _3177;
                    frontier_phi_61_pred_2 = _3176;
                    frontier_phi_61_pred_3 = _3175;
                    frontier_phi_61_pred_4 = _3174;
                    frontier_phi_61_pred_5 = _3173;
                }
                else
                {
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    uint _3302;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3187;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    for (;;)
                    {
                        uint _3306 = uint(findLSB(_3302)) + (_3178 << 5u);
                        uint _3303 = (_3302 + 4294967295u) & _3302;
                        uint _3308 = _3306 * 48u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3328 = (_3306 * 48u) + 4u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 3u)).x));
                        uint _3347 = (_3306 * 48u) + 8u;
                        vec3 _3358 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x));
                        float _3362 = _3322.x - _2880;
                        float _3363 = _3322.y - _2881;
                        float _3364 = _3322.z - _2882;
                        float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                        float _3368 = inversesqrt(_3365);
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3372 = dot(vec3(_1125, _1128, _1131), vec3(_3369, _3370, _3371));
                        float _3377 = 1.0 - (_3365 * _3322.w);
                        float _4743 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3379 = sqrt(_3365) * _3341.w;
                        float _3382 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3372) + _3383;
                        float _3389 = _3379 * _3379;
                        float _3393 = ((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3378) / ((_3389 * 0.699999988079071044921875) + 1.0);
                        float _3397 = (-0.0) - _2880;
                        float _3398 = (-0.0) - _2881;
                        float _3399 = (-0.0) - _2882;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3414 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                        float _3415 = 1.0 - _1200;
                        float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                        float _3423 = _3422 * _3422;
                        float _3424 = _3423 * _3423;
                        float _3425 = _3404 + _3369;
                        float _3426 = _3405 + _3370;
                        float _3427 = _3406 + _3371;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3435 = dot(vec3(_1125, _1128, _1131), vec3(_3404, _3405, _3406));
                        float _4759 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3439 = dot(vec3(_1125, _1128, _1131), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                        float _4770 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                        float _3447 = _3382 * _3423;
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3372) + _3448;
                        float _4781 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3453 = 1.0 - _3423;
                        float _3463 = (0.5 / (((_3452 * ((_3438 * _3453) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3423) * _3438))) * _3452;
                        float _4792 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3474 = (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3446 * _3446) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125))) * _3378;
                        _3231 = (_3393 * _3341.x) + _3299;
                        _3232 = (_3393 * _3341.y) + _3300;
                        _3233 = (_3393 * _3341.z) + _3301;
                        _3228 = (_3474 * _3358.x) + _3296;
                        _3229 = (_3474 * _3358.y) + _3297;
                        _3230 = (_3474 * _3358.z) + _3298;
                        if (_3303 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3303;
                        }
                    }
                    frontier_phi_61_pred = _3228;
                    frontier_phi_61_pred_1 = _3233;
                    frontier_phi_61_pred_2 = _3232;
                    frontier_phi_61_pred_3 = _3231;
                    frontier_phi_61_pred_4 = _3230;
                    frontier_phi_61_pred_5 = _3229;
                }
                _3028 = frontier_phi_61_pred;
                _3038 = frontier_phi_61_pred_1;
                _3036 = frontier_phi_61_pred_2;
                _3034 = frontier_phi_61_pred_3;
                _3032 = frontier_phi_61_pred_4;
                _3030 = frontier_phi_61_pred_5;
                uint _3179 = _3178 + 1u;
                if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3172 = _3028;
                    _3173 = _3030;
                    _3174 = _3032;
                    _3175 = _3034;
                    _3176 = _3036;
                    _3177 = _3038;
                    _3178 = _3179;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
        }
        uvec4 _3041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3042 = _3041.z;
        uint _3044 = (_3042 >> 8u) & 15u;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        if (((4294967295u << _3044) & _2926) == 0u)
        {
            _3140 = _3027;
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
        }
        else
        {
            float _3165 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
            float _3166 = _3165 * _2880;
            float _3167 = _3165 * _2881;
            float _3168 = _3165 * _2882;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3044 < ((_3042 >> 12u) & 15u))
            {
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3279 = _3027;
                float _3280 = _3029;
                float _3281 = _3031;
                float _3282 = _3033;
                float _3283 = _3035;
                float _3284 = _3037;
                uint _3285 = _3044;
                uint _3294;
                bool _3295;
                for (;;)
                {
                    _3294 = texelFetch(g_lightClassification, int((((_2920 << 5u) + (_2906 << 9u)) + (_3285 << 2u)) >> 2u)).x;
                    _3295 = _3294 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3295)
                    {
                        frontier_phi_67_pred = _3282;
                        frontier_phi_67_pred_1 = _3283;
                        frontier_phi_67_pred_2 = _3284;
                        frontier_phi_67_pred_3 = _3281;
                        frontier_phi_67_pred_4 = _3280;
                        frontier_phi_67_pred_5 = _3279;
                    }
                    else
                    {
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        uint _3498 = _3294;
                        uint _3499;
                        vec4 _3524;
                        float _3525;
                        vec4 _3540;
                        vec3 _3552;
                        vec4 _3567;
                        vec4 _3582;
                        float _3628;
                        bool _3629;
                        for (;;)
                        {
                            uint _3509 = ((_3285 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3498));
                            _3499 = (_3498 + 4294967295u) & _3498;
                            uint _3511 = _3509 * 40u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3525 = _3524.w;
                            uint _3527 = (_3509 * 40u) + 4u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3509 * 40u) + 8u;
                            _3552 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x));
                            uint _3554 = (_3509 * 40u) + 16u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3509 * 40u) + 20u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3509 * 40u) + 24u;
                            vec4 _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3603 = (_3509 * 40u) + 28u;
                            vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3628 = fma(_2882, _3616.z, fma(_2881, _3616.y, _3616.x * _2880)) + _3616.w;
                            _3629 = !((fma(_2882, _3597.z, fma(_2881, _3597.y, _3597.x * _2880)) + _3597.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3629)
                            {
                                float _3656 = _3524.x - _2880;
                                float _3657 = _3524.y - _2881;
                                float _3658 = _3524.z - _2882;
                                float _3659 = dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658));
                                float _3662 = inversesqrt(_3659);
                                float _3663 = _3662 * _3656;
                                float _3664 = _3662 * _3657;
                                float _3665 = _3662 * _3658;
                                float _3669 = 1.0 - (_3659 / (_3525 * _3525));
                                float _4803 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3674 = sqrt(_3659) * _3540.w;
                                float _3676 = 1.39999997615814208984375 / (_3674 + 1.39999997615814208984375);
                                float _3677 = _3676 * _3676;
                                float _3680 = ((1.0 - _3677) * dot(vec3(_3663, _3664, _3665), vec3(_1125, _1128, _1131))) + _3677;
                                float _3683 = _3674 * _3674;
                                float _3687 = (fma(_2882, _3567.z, fma(_2881, _3567.y, _3567.x * _2880)) + _3567.w) / _3628;
                                float _3688 = (fma(_2882, _3582.z, fma(_2881, _3582.y, _3582.x * _2880)) + _3582.w) / _3628;
                                float _3692 = 1.0 - dot(vec2(_3687, _3688), vec2(_3687, _3688));
                                float _4819 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3694 = _3693 * (((isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0))) * _3670) / ((_3683 * 0.699999988079071044921875) + 1.0));
                                float _3706 = exp2(log2(1.0 / ((_3683 * 3.5) + 5.0)) * 0.25);
                                float _3707 = 1.0 - _1200;
                                float _3714 = sqrt(1.0 - ((1.0 - (_3707 * _3707)) * (1.0 - (_3706 * _3706))));
                                float _3715 = _3714 * _3714;
                                float _3716 = _3715 * _3715;
                                float _3717 = _3663 - _3166;
                                float _3718 = _3664 - _3167;
                                float _3719 = _3665 - _3168;
                                float _3723 = inversesqrt(dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719)));
                                float _3727 = dot(vec3(_1125, _1128, _1131), vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168));
                                float _4830 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3731 = dot(vec3(_1125, _1128, _1131), vec3(_3723 * _3717, _3723 * _3718, _3723 * _3719));
                                float _4841 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3738 = ((_3734 * _3734) * (_3716 + (-1.0))) + 1.0;
                                float _3739 = _3676 * _3715;
                                float _3740 = _3739 * _3739;
                                float _3746 = ((1.0 - _3740) * dot(vec3(_1125, _1128, _1131), vec3(_3663, _3664, _3665))) + _3740;
                                float _4852 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3748 = 1.0 - _3715;
                                float _3758 = (0.5 / (((_3747 * ((_3730 * _3748) + _3715)) + 9.9999999392252902907785028219223e-09) + (((_3747 * _3748) + _3715) * _3730))) * _3747;
                                float _4863 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3768 = (_3693 * _3670) * (((_3716 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3738 * _3738) * ((_3683 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3768 * _3552.x;
                                frontier_phi_73_pred_1 = _3768 * _3552.y;
                                frontier_phi_73_pred_2 = _3694 * _3540.z;
                                frontier_phi_73_pred_3 = _3694 * _3540.y;
                                frontier_phi_73_pred_4 = _3694 * _3540.x;
                                frontier_phi_73_pred_5 = _3768 * _3552.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_73_pred;
                            _3773 = frontier_phi_73_pred_1;
                            _3777 = frontier_phi_73_pred_2;
                            _3776 = frontier_phi_73_pred_3;
                            _3775 = frontier_phi_73_pred_4;
                            _3774 = frontier_phi_73_pred_5;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            if (_3499 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3499;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3482;
                        frontier_phi_67_pred_1 = _3483;
                        frontier_phi_67_pred_2 = _3484;
                        frontier_phi_67_pred_3 = _3481;
                        frontier_phi_67_pred_4 = _3480;
                        frontier_phi_67_pred_5 = _3479;
                    }
                    _3147 = frontier_phi_67_pred;
                    _3149 = frontier_phi_67_pred_1;
                    _3151 = frontier_phi_67_pred_2;
                    _3145 = frontier_phi_67_pred_3;
                    _3143 = frontier_phi_67_pred_4;
                    _3141 = frontier_phi_67_pred_5;
                    uint _3286 = _3285 + 1u;
                    if (_3286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3279 = _3141;
                        _3280 = _3143;
                        _3281 = _3145;
                        _3282 = _3147;
                        _3283 = _3149;
                        _3284 = _3151;
                        _3285 = _3286;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3149;
                frontier_phi_55_56_ladder_1 = _3151;
                frontier_phi_55_56_ladder_2 = _3147;
                frontier_phi_55_56_ladder_3 = _3145;
                frontier_phi_55_56_ladder_4 = _3143;
                frontier_phi_55_56_ladder_5 = _3141;
            }
            else
            {
                frontier_phi_55_56_ladder = _3035;
                frontier_phi_55_56_ladder_1 = _3037;
                frontier_phi_55_56_ladder_2 = _3033;
                frontier_phi_55_56_ladder_3 = _3031;
                frontier_phi_55_56_ladder_4 = _3029;
                frontier_phi_55_56_ladder_5 = _3027;
            }
            _3140 = frontier_phi_55_56_ladder_5;
            _3142 = frontier_phi_55_56_ladder_4;
            _3144 = frontier_phi_55_56_ladder_3;
            _3146 = frontier_phi_55_56_ladder_2;
            _3148 = frontier_phi_55_56_ladder;
            _3150 = frontier_phi_55_56_ladder_1;
        }
        float _3155 = isnan(1.0) ? _1184 : (isnan(_1184) ? 1.0 : min(_1184, 1.0));
        _2939 = (_3155 * _3146) + _2372;
        _2941 = (_3155 * _3148) + _2374;
        _2943 = (_3155 * _3150) + _2376;
        _2945 = ((_3140 * _1168) * _3155) + _2720;
        _2947 = ((_3142 * _1170) * _3155) + _2722;
        _2949 = ((_3144 * _1171) * _3155) + _2724;
    }
    else
    {
        _2939 = _2372;
        _2941 = _2374;
        _2943 = _2376;
        _2945 = _2720;
        _2947 = _2722;
        _2949 = _2724;
    }
    float _4879 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _4890 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _4901 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    uint _2969 = _269 + 6u;
    float _2977 = _1106 / cbSceneParam._m0[86u].x;
    float _2978 = _1107 / cbSceneParam._m0[86u].y;
    vec4 _2992 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2977, _2978, (log2((isnan(cbSceneParam._m0[77u].w) ? _1041 : (isnan(_1041) ? cbSceneParam._m0[77u].w : min(_1041, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2994 = _2992.x;
    float _2995 = _2992.y;
    float _2996 = _2992.z;
    float _2997 = _2992.w;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    if (_1041 > cbSceneParam._m0[78u].w)
    {
        float _3052 = isnan(_1041) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1041 : min(cbSceneParam._m0[80u].w, _1041));
        float _3053 = _3052 / _1041;
        float _3064 = _3053 * _1091;
        float _3065 = _1092 * _3053;
        float _3066 = (-0.0) - _3065;
        float _3068 = _3053 * _1093;
        float _3070 = (cbSceneParam._m0[77u].w * _3066) / _3052;
        float _3071 = _3070 + cbSceneParam._m0[79u].w;
        float _3072 = cbSceneParam._m0[79u].w - _3065;
        float _3078 = sqrt(((_3064 * _3064) + (_3065 * _3065)) + (_3068 * _3068));
        float _3081 = (1.0 - (cbSceneParam._m0[77u].w / _3052)) * _3078;
        float _3086 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3088 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3241;
        if (abs((_3066 - _3070) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3241 = ((((_3071 > 0.0) ? exp2(_3086 * _3071) : (2.0 - exp2(_3088 * _3071))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3081;
        }
        else
        {
            float _3201 = 1.0 / cbSceneParam._m0[80u].x;
            float _3202 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : max(_3071, _3072));
            float _3203 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : min(_3071, _3072));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            _3241 = ((abs(_3078 / _3066) * cbSceneParam._m0[80u].y) * ((((_3212 - _3213) * 2.0) - ((exp2(_3086 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0)))) - exp2(_3086 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))))) * _3201)) - ((exp2(_3088 * _3212) - exp2(_3088 * _3213)) * _3201))) + (_3081 * cbSceneParam._m0[80u].z);
        }
        vec4 _3243 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2977, _2978, 1.0), 0.0);
        float _3252 = exp2((_3241 * (-1.44269502162933349609375)) * (1.0 - _3243.w));
        float _3253 = log2(_3252);
        float _3269 = log2(_2997);
        _3090 = (exp2(_3269 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].x)) * _3243.x) / cbSceneParam._m0[78u].x)) + _2994;
        _3092 = (exp2(_3269 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].y)) * _3243.y) / cbSceneParam._m0[78u].y)) + _2995;
        _3094 = (exp2(_3269 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].z)) * _3243.z) / cbSceneParam._m0[78u].z)) + _2996;
        _3096 = _3252 * _2997;
    }
    else
    {
        _3090 = _2994;
        _3092 = _2995;
        _3094 = _2996;
        _3096 = _2997;
    }
    float _3108 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3109 = _3108 == 3.0;
    float _3110 = log2(_3096);
    float _3117 = exp2(_3110 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2939 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1184))) + ((_2945 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1990)) * cbPerFrame._m0[3u].x));
    float _3118 = exp2(_3110 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2941 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1184))) + ((_2947 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1990)) * cbPerFrame._m0[3u].x));
    float _3119 = exp2(_3110 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2943 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1184))) + ((_2949 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1990)) * cbPerFrame._m0[3u].x));
    float _3128 = (_3108 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3128 * (_3109 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.y = _3128 * (_3109 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.z = _3128 * (_3109 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.w = cbInstanceData._m0[_2969].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2969].w;
}


