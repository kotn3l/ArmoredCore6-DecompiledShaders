#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1185;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3798 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3809 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3820 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _399 = _397.x;
    float _411 = dot(vec4(_399, _397.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _428 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_399 - _411) * cbMtdParam._m0[23u].w) + _411) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3831 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _436 = (_429 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _437 = (_429 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _438 = (_429 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _442 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _436;
    float _445 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _437;
    float _448 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _438;
    float _455 = ((_436 - _442) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _442;
    float _456 = ((_437 - _445) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) + _445;
    float _457 = ((_438 - _448) * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) + _448;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _512.x;
    float _515 = _512.y;
    float _516 = _512.z;
    float _525 = ((_495.z - _516) * _429) + _516;
    float _528 = ((((_495.x - _514) * _429) + _514) * 2.0) + (-1.0);
    float _529 = ((((_495.y - _515) * _429) + _515) * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3842 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _569 = (_528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_470.x * 2.0) + (-1.0)))) + (((_557.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _570 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_470.y * 2.0) + (-1.0)))) + (((_557.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _598 = _596.x;
    float _616 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _285) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _286) + cbTextureTilingScale._m0[9u].w)).x - _598) * _429) + _598;
    float _620 = ((_582.x - _616) * cbMtdParam._m0[19u].z) + _616;
    float _625 = (((_470.z - _525) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _525;
    float _629 = ((_557.z - _625) * cbMtdParam._m0[19u].w) + _625;
    float _631 = cbMtdParam._m0[22u].x + _557.w;
    float _634 = fma(_535, _232 * NORMAL.x, fma(_570, _239 * TANGENT.x, (_225 * _217) * _569));
    float _637 = fma(_535, _232 * NORMAL.y, fma(_570, _239 * TANGENT.y, (_225 * _218) * _569));
    float _640 = fma(_535, _232 * NORMAL.z, fma(_570, _239 * TANGENT.z, (_225 * _219) * _569));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    float _645 = _644 * _634;
    float _646 = _644 * _637;
    float _647 = _644 * _640;
    float _3853 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _648 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3875 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3886 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3897 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3908 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _653 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _667 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _718 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _708);
    float _719 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _708);
    float _720 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _708);
    float _724 = inversesqrt(dot(vec3(_718, _719, _720), vec3(_718, _719, _720)));
    float _725 = _718 * _724;
    float _726 = _719 * _724;
    float _727 = _720 * _724;
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_647, cbSceneParam._m0[5u].z, fma(_646, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _645));
    float _755 = fma(_647, cbSceneParam._m0[6u].z, fma(_646, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _645));
    float _758 = fma(_647, cbSceneParam._m0[7u].z, fma(_646, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _645));
    uint _772 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3919 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _784 = 1.0 - _653;
    float _785 = _781 * _784;
    float _786 = _782 * _784;
    float _787 = _783 * _784;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _653;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _653;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _653;
    float _795 = _792 + 0.039999999105930328369140625;
    float _797 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    vec4 _807 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _811 = ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * TEXCOORD_5.w) * _807.x;
    float _812 = dot(vec3(_645, _646, _647), vec3(_725, _726, _727));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _645) - _725;
    float _820 = (_815 * _646) - _726;
    float _821 = (_815 * _647) - _727;
    float _825 = abs(dot(vec3(_725, _726, _727), vec3(_645, _646, _647)));
    float _3952 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_648);
    float _840 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _846 = (1.0 - _840) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _847 = _840 * _827;
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1184;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_883, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875));
        float _913 = fma(_883, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875));
        float _917 = fma(_883, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875));
        float _942 = _875 + _645;
        float _943 = _879 + _646;
        float _944 = _883 + _647;
        float _954 = fma(_944, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942)) - _909;
        float _955 = fma(_944, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942)) - _913;
        float _956 = fma(_944, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942)) - _917;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1012 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_978.x + (-0.5));
        float _1014 = _1012 * (_978.y + (-0.5));
        float _1015 = _1012 * (_978.z + (-0.5));
        float _1022 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_985.x + (-0.5));
        float _1024 = _1022 * (_985.y + (-0.5));
        float _1025 = _1022 * (_985.z + (-0.5));
        float _1032 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_992.x + (-0.5));
        float _1034 = _1032 * (_992.y + (-0.5));
        float _1035 = _1032 * (_992.z + (-0.5));
        float _1042 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_999.x + (-0.5));
        float _1044 = _1042 * (_999.y + (-0.5));
        float _1045 = _1042 * (_999.z + (-0.5));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1013 * 0.5;
        float _1050 = _1023 * 0.5;
        float _1051 = _1033 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1066 = (dot(vec3(_645, _646, _647), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1076 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _4000 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1078 + 1.0))) + _1083) * _1046;
        float _1093 = _1014 * 0.5;
        float _1094 = _1024 * 0.5;
        float _1095 = _1034 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_645, _646, _647), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4033 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1120 + 1.0))) + _1125) * _1047;
        float _1135 = _1015 * 0.5;
        float _1136 = _1025 * 0.5;
        float _1137 = _1035 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_645, _646, _647), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4066 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1162 + 1.0))) + _1167) * _1048;
        _1184 = _1015;
        _1186 = _1014;
        _1187 = _1013;
        _1188 = _1025;
        _1189 = _1024;
        _1190 = _1023;
        _1191 = _1035;
        _1192 = _1034;
        _1193 = _1033;
        _1194 = _1048;
        _1195 = _1047;
        _1196 = _1046;
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
    }
    else
    {
        _1184 = _1185;
        _1186 = _1185;
        _1187 = _1185;
        _1188 = _1185;
        _1189 = _1185;
        _1190 = _1185;
        _1191 = _1185;
        _1192 = _1185;
        _1193 = _1185;
        _1194 = _1185;
        _1195 = _1185;
        _1196 = _1185;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1224 = fma(_883, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875));
        float _1228 = fma(_883, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875));
        float _1232 = fma(_883, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875));
        float _1255 = _875 + _645;
        float _1256 = _879 + _646;
        float _1257 = _883 + _647;
        float _1267 = fma(_1257, cbModelParam._m0[30u].z, fma(_1256, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255)) - _1224;
        float _1268 = fma(_1257, cbModelParam._m0[31u].z, fma(_1256, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255)) - _1228;
        float _1269 = fma(_1257, cbModelParam._m0[32u].z, fma(_1256, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255)) - _1232;
        float _1273 = inversesqrt(dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269)));
        float _1286 = ((_1273 * _1267) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1224 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1273 * _1268) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1228 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1273 * _1269) / cbModelParam._m0[35u].z) + ((((((_1232 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        float _1323 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1290.x + (-0.5));
        float _1325 = _1323 * (_1290.y + (-0.5));
        float _1326 = _1323 * (_1290.z + (-0.5));
        float _1333 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1297.x + (-0.5));
        float _1335 = _1333 * (_1297.y + (-0.5));
        float _1336 = _1333 * (_1297.z + (-0.5));
        float _1343 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1304.x + (-0.5));
        float _1345 = _1343 * (_1304.y + (-0.5));
        float _1346 = _1343 * (_1304.z + (-0.5));
        float _1353 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1311.x + (-0.5));
        float _1355 = _1353 * (_1311.y + (-0.5));
        float _1356 = _1353 * (_1311.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_645, _646, _647), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4129 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1387 + 1.0))) + _1392) * _1357;
        float _1402 = _1325 * 0.5;
        float _1403 = _1335 * 0.5;
        float _1404 = _1345 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_645, _646, _647), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4162 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1429 + 1.0))) + _1434) * _1358;
        float _1444 = _1326 * 0.5;
        float _1445 = _1336 * 0.5;
        float _1446 = _1346 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_645, _646, _647), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4195 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1471 + 1.0))) + _1476) * _1359;
        _1493 = _1326;
        _1494 = _1325;
        _1495 = _1324;
        _1496 = _1336;
        _1497 = _1335;
        _1498 = _1334;
        _1499 = _1346;
        _1500 = _1345;
        _1501 = _1344;
        _1502 = _1359;
        _1503 = _1358;
        _1504 = _1357;
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1185;
        _1494 = _1185;
        _1495 = _1185;
        _1496 = _1185;
        _1497 = _1185;
        _1498 = _1185;
        _1499 = _1185;
        _1500 = _1185;
        _1501 = _1185;
        _1502 = _1185;
        _1503 = _1185;
        _1504 = _1185;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1197)) + _1197;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1198)) + _1198;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1199)) + _1199;
    float _1540 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1517));
    float _1561 = _819 * 0.5;
    float _1562 = _820 * 0.5;
    float _1563 = _821 * 0.5;
    float _1564 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1567 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1570 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1604;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1577 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1184, _1188, _1191, _1194));
        float _1581 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1585 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1592 = dot(vec4(cbModelParam._m0[39u]), vec4(_1561, _1562, _1563, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1615;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1606 = dot(vec4(cbModelParam._m0[40u]), vec4(_1561, _1562, _1563, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1619 = (_1615 * cbModelParam._m0[1u].x) + (_1604 * (1.0 - cbModelParam._m0[1u].x));
    float _1629 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _648);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1629 : min(cbModelParam._m0[25u].z, _1629));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_883, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_883, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_883, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1693 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1696 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1724 = frontier_phi_14_12_ladder;
        }
        float _1897;
        if (_1693 > 0.0)
        {
            _1897 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1897 = frontier_phi_23_19_ladder;
        }
        float _2192;
        if (_1696 > 0.0)
        {
            _2192 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2192 = frontier_phi_35_30_ladder;
        }
        float _2194 = isnan(_1897) ? _1724 : (isnan(_1724) ? _1897 : min(_1724, _1897));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1690) + _1679;
        float _2200 = (_2195 * _1693) + _1683;
        float _2201 = (_2195 * _1696) + _1687;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2202;
        float _2206 = _2202 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 > _2206) || ((_2200 < _2204) || ((_2199 < _2204) || (_2199 > _2206))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2201, cbModelParam._m0[9u].z, fma(_2200, cbModelParam._m0[9u].y, _2199 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2201, cbModelParam._m0[10u].z, fma(_2200, cbModelParam._m0[10u].y, _2199 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2201, cbModelParam._m0[11u].z, fma(_2200, cbModelParam._m0[11u].y, _2199 * cbModelParam._m0[11u].x))), _1630);
            frontier_phi_13_35_ladder = _2346.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2346.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2346.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_13_35_ladder_2;
        _1714 = frontier_phi_13_35_ladder_1;
        _1716 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1630);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _648);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1776 = fma(_883, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875)) + cbModelParam._m0[21u].w;
        float _1780 = fma(_883, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875)) + cbModelParam._m0[22u].w;
        float _1784 = fma(_883, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875)) + cbModelParam._m0[23u].w;
        float _1787 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1790 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1793 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1902;
        if (_1787 > 0.0)
        {
            _1902 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1902 = frontier_phi_25_21_ladder;
        }
        float _2219;
        if (_1790 > 0.0)
        {
            _2219 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2219 = frontier_phi_37_32_ladder;
        }
        float _2557;
        if (_1793 > 0.0)
        {
            _2557 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2557 = frontier_phi_47_44_ladder;
        }
        float _2559 = isnan(_2219) ? _1902 : (isnan(_1902) ? _2219 : min(_1902, _2219));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1787) + _1776;
        float _2565 = (_2560 * _1790) + _1780;
        float _2566 = (_2560 * _1793) + _1784;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_22_47_ladder = _2688.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2688.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2688.x * cbModelParam._m0[1u].z;
        }
        _1812 = frontier_phi_22_47_ladder_2;
        _1814 = frontier_phi_22_47_ladder_1;
        _1816 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1721);
        _1812 = _1796.x * cbModelParam._m0[1u].z;
        _1814 = _1796.y * cbModelParam._m0[1u].z;
        _1816 = _1796.z * cbModelParam._m0[1u].z;
    }
    float _1829 = (((_846 * _795) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1812 - _1712)) + _1712);
    float _1831 = (((_846 * _797) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1814 - _1714)) + _1714);
    float _1833 = (((_846 * _798) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1816 - _1716)) + _1716);
    float _1836 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, _1829 * cbSceneParam._m0[91u].x));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1889 = _1876 / _1888;
    float _1890 = _1880 / _1888;
    float _1891 = _1884 / _1888;
    float _2038;
    float _2039;
    float _2040;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1918 = ((uint(_1891 > cbSceneParam._m0[59u].y) + uint(_1891 > cbSceneParam._m0[59u].x)) + uint(_1891 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1919 = _1918 + 43u;
        uint _1927 = _1918 + 44u;
        uint _1935 = _1918 + 45u;
        uint _1943 = _1918 + 46u;
        float _1954 = fma(_1888, cbSceneParam._m0[_1919].w, fma(_1884, cbSceneParam._m0[_1919].z, fma(_1880, cbSceneParam._m0[_1919].y, _1876 * cbSceneParam._m0[_1919].x)));
        float _1958 = fma(_1888, cbSceneParam._m0[_1927].w, fma(_1884, cbSceneParam._m0[_1927].z, fma(_1880, cbSceneParam._m0[_1927].y, _1876 * cbSceneParam._m0[_1927].x)));
        float _1966 = fma(_1888, cbSceneParam._m0[_1943].w, fma(_1884, cbSceneParam._m0[_1943].z, fma(_1880, cbSceneParam._m0[_1943].y, _1876 * cbSceneParam._m0[_1943].x)));
        float _1971 = cbSceneParam._m0[33u].z * _1966;
        float _1973 = cbSceneParam._m0[33u].w * _1966;
        float _1976 = fma(_1888, cbSceneParam._m0[_1935].w, fma(_1884, cbSceneParam._m0[_1935].z, fma(_1880, cbSceneParam._m0[_1935].y, _1876 * cbSceneParam._m0[_1935].x))) / _1966;
        float _2024 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
        float _4321 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2031 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1954) / _1966, (_1973 + _1958) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 + _1954) / _1966, (_1958 - _1971) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1971) / _1966, (_1958 - _1973) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1973) / _1966, (_1971 + _1958) / _1966), _1976), 0.0)).x), vec4(0.25)));
        _2038 = 1.0 - (_2031 * cbSceneParam._m0[34u].x);
        _2039 = 1.0 - (_2031 * cbSceneParam._m0[34u].y);
        _2040 = 1.0 - (_2031 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2038 = 1.0;
        _2039 = 1.0;
        _2040 = 1.0;
    }
    float _2104;
    float _2106;
    float _2108;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2092 = fma(_1888, cbSceneParam._m0[63u].w, fma(_1884, cbSceneParam._m0[63u].z, fma(_1880, cbSceneParam._m0[63u].y, _1876 * cbSceneParam._m0[63u].x)));
        float _2093 = fma(_1888, cbSceneParam._m0[60u].w, fma(_1884, cbSceneParam._m0[60u].z, fma(_1880, cbSceneParam._m0[60u].y, _1876 * cbSceneParam._m0[60u].x))) / _2092;
        float _2094 = fma(_1888, cbSceneParam._m0[61u].w, fma(_1884, cbSceneParam._m0[61u].z, fma(_1880, cbSceneParam._m0[61u].y, _1876 * cbSceneParam._m0[61u].x))) / _2092;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2093 >= cbSceneParam._m0[64u].x) && (_2094 >= cbSceneParam._m0[64u].y)) && (_2093 <= cbSceneParam._m0[64u].z)) && (_2094 <= cbSceneParam._m0[64u].w))
        {
            float _2232 = fma(_1888, cbSceneParam._m0[62u].w, fma(_1884, cbSceneParam._m0[62u].z, fma(_1880, cbSceneParam._m0[62u].y, _1876 * cbSceneParam._m0[62u].x))) / _2092;
            float _2236 = isnan(cbSceneParam._m0[41u].w) ? _2232 : (isnan(_2232) ? cbSceneParam._m0[41u].w : max(_2232, cbSceneParam._m0[41u].w));
            float _2279 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
            float _4337 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
            float _2286 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2093, cbSceneParam._m0[33u].w + _2094), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2093, _2094 - cbSceneParam._m0[33u].z), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].z, _2094 - cbSceneParam._m0[33u].w), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2094), _2236), 0.0)).x), vec4(0.25)));
            float _2290 = 1.0 - (_2286 * cbSceneParam._m0[34u].x);
            float _2291 = 1.0 - (_2286 * cbSceneParam._m0[34u].y);
            float _2292 = 1.0 - (_2286 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2292) ? _2040 : (isnan(_2040) ? _2292 : min(_2040, _2292));
            frontier_phi_34_33_ladder_1 = isnan(_2291) ? _2039 : (isnan(_2039) ? _2291 : min(_2039, _2291));
            frontier_phi_34_33_ladder_2 = isnan(_2290) ? _2038 : (isnan(_2038) ? _2290 : min(_2038, _2290));
        }
        else
        {
            frontier_phi_34_33_ladder = _2040;
            frontier_phi_34_33_ladder_1 = _2039;
            frontier_phi_34_33_ladder_2 = _2038;
        }
        _2104 = frontier_phi_34_33_ladder_2;
        _2106 = frontier_phi_34_33_ladder_1;
        _2108 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2104 = _2038;
        _2106 = _2039;
        _2108 = _2040;
    }
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _811 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2151 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2155 = _2115 | 1u;
    float _2166 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_645, _646, _647));
    float _2169 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_645, _646, _647));
    float _4373 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _4384 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2174 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2176 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.3183098733425140380859375;
    float _2183 = ((cbLight._m0[_2132].x * _2138) * _2176) + (((cbLight._m0[_2142].x * _2104) * _2151) * _2174);
    float _2184 = ((_2138 * cbLight._m0[_2132].y) * _2176) + (((cbLight._m0[_2142].y * _2106) * _2151) * _2174);
    float _2185 = ((_2138 * cbLight._m0[_2132].z) * _2176) + (((cbLight._m0[_2142].z * _2108) * _2151) * _2174);
    uvec4 _2189 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2191 = _2189.x == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2191)
    {
        _2293 = _2183;
        _2295 = _2184;
        _2297 = _2185;
    }
    else
    {
        uint _2301 = _2115 + 6u;
        float _2317 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_645, _646, _647)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4395 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2320 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2293 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2183;
        _2295 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2184;
        _2297 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2185;
    }
    bool _2300 = _2189.y == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2300)
    {
        _2355 = _2293;
        _2357 = _2295;
        _2359 = _2297;
    }
    else
    {
        uint _2528 = _2115 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_645, _646, _647)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4411 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2547 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2355 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2293;
        _2357 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2295;
        _2359 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2297;
    }
    uint _2362 = _2115 + 8u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _648) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2115].x + _725;
    float _2378 = cbLight._m0[_2115].y + _726;
    float _2379 = cbLight._m0[_2115].z + _727;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2115].xyz));
    float _4427 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _4438 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2391 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2392 = dot(vec3(_645, _646, _647), vec3(_2384, _2385, _2386));
    float _4449 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2384, _2385, _2386));
    float _4460 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2376 * _2376;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
    float _2413 = 0.959999978542327880859375 - _792;
    float _2415 = 0.959999978542327880859375 - _793;
    float _2416 = 0.959999978542327880859375 - _794;
    float _2423 = 1.0 - _2376;
    float _2434 = (0.5 / (((_2391 * ((_2390 * _2423) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2423) + _2376) * _2390))) * _2390;
    float _4471 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    uint _2450 = _2115 + 9u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _648) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2155].x + _725;
    float _2464 = cbLight._m0[_2155].y + _726;
    float _2465 = cbLight._m0[_2155].z + _727;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2155].xyz));
    float _4482 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2477 = dot(vec3(_645, _646, _647), vec3(_2470, _2471, _2472));
    float _4493 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2470, _2471, _2472));
    float _4504 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2462 * _2462;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
    float _2503 = 1.0 - _2462;
    float _2513 = (0.5 / (((_2391 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2503) + _2462) * _2476))) * _2476;
    float _4515 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    float _2525 = (((((_2496 * _2413) + _795) * cbLight._m0[_2450].x) * _2515) * _2138) + ((((cbLight._m0[_2362].x * _2104) * ((_2412 * _2413) + _795)) * _2436) * _2151);
    float _2526 = (((((_2496 * _2415) + _797) * cbLight._m0[_2450].y) * _2515) * _2138) + ((((cbLight._m0[_2362].y * _2106) * ((_2412 * _2415) + _797)) * _2436) * _2151);
    float _2527 = (((((_2496 * _2416) + _798) * cbLight._m0[_2450].z) * _2515) * _2138) + ((((cbLight._m0[_2362].z * _2108) * ((_2412 * _2416) + _798)) * _2436) * _2151);
    float _2583;
    float _2585;
    float _2587;
    if (_2191)
    {
        _2583 = _2525;
        _2585 = _2526;
        _2587 = _2527;
    }
    else
    {
        uint _2589 = _2115 + 2u;
        uint _2593 = _2115 + 10u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _648) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _725;
        float _2610 = cbLight._m0[_2589].y + _726;
        float _2611 = cbLight._m0[_2589].z + _727;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2589].xyz));
        float _4526 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2623 = dot(vec3(_645, _646, _647), vec3(_2616, _2617, _2618));
        float _4537 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4548 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2391 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2649) + _2608) * _2622))) * _2622;
        float _4559 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2583 = (((((_2642 * _2413) + _795) * cbLight._m0[_2593].x) * _2661) * _2662) + _2525;
        _2585 = (((((_2642 * _2415) + _797) * cbLight._m0[_2593].y) * _2661) * _2662) + _2526;
        _2587 = (((((_2642 * _2416) + _798) * cbLight._m0[_2593].z) * _2661) * _2662) + _2527;
    }
    float _2693;
    float _2695;
    float _2697;
    if (_2300)
    {
        _2693 = _2583;
        _2695 = _2585;
        _2697 = _2587;
    }
    else
    {
        uint _2704 = _2115 + 3u;
        uint _2708 = _2115 + 11u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _648) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _725;
        float _2725 = cbLight._m0[_2704].y + _726;
        float _2726 = cbLight._m0[_2704].z + _727;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2704].xyz));
        float _4575 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2738 = dot(vec3(_645, _646, _647), vec3(_2731, _2732, _2733));
        float _4586 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4597 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
        float _2764 = 1.0 - _2723;
        float _2774 = (0.5 / (((_2391 * ((_2737 * _2764) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2764) + _2723) * _2737))) * _2737;
        float _4608 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2693 = (((((_2757 * _2413) + _795) * cbLight._m0[_2708].x) * _2776) * _2777) + _2583;
        _2695 = (((((_2757 * _2415) + _797) * cbLight._m0[_2708].y) * _2776) * _2777) + _2585;
        _2697 = (((((_2757 * _2416) + _798) * cbLight._m0[_2708].z) * _2776) * _2777) + _2587;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2113.y == 0u)
    {
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.x;
        uint _2810 = uint((float(_2798.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2799))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2799)));
        float _2820 = (log2(_1891 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2821 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        uint _2824 = uint(isnan(14.0) ? _2821 : (isnan(_2821) ? 14.0 : min(_2821, 14.0)));
        uvec4 _2829 = texelFetch(g_lightClusterGridBuffer, int(((_2824 << 2u) + (_2810 << 6u)) >> 2u));
        uint _2830 = _2829.x;
        uint _2831 = _2798.z;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((((1u << ((_2831 >> 4u) & 15u)) + 4294967295u) & _2830) == 0u) || ((_2831 & 240u) == 0u))
        {
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
        }
        else
        {
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            uint _3061 = 0u;
            uint _3070;
            bool _3071;
            for (;;)
            {
                _3070 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                _3071 = _3070 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3071)
                {
                    frontier_phi_66_pred = _3060;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                else
                {
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    uint _3185;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3070;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    for (;;)
                    {
                        uint _3189 = uint(findLSB(_3185)) + (_3061 << 5u);
                        uint _3186 = (_3185 + 4294967295u) & _3185;
                        uint _3191 = _3189 * 48u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 3u)).x));
                        uint _3211 = (_3189 * 48u) + 4u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3230 = (_3189 * 48u) + 8u;
                        vec3 _3241 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x));
                        float _3245 = _3205.x - _1889;
                        float _3246 = _3205.y - _1890;
                        float _3247 = _3205.z - _1891;
                        float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                        float _3251 = inversesqrt(_3248);
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3255 = dot(vec3(_752, _755, _758), vec3(_3252, _3253, _3254));
                        float _3260 = 1.0 - (_3248 * _3205.w);
                        float _4634 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3262 = sqrt(_3248) * _3224.w;
                        float _3265 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3255) + _3266;
                        float _3272 = _3262 * _3262;
                        float _3276 = ((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3261) / ((_3272 * 0.699999988079071044921875) + 1.0);
                        float _3280 = (-0.0) - _1889;
                        float _3281 = (-0.0) - _1890;
                        float _3282 = (-0.0) - _1891;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3296 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                        float _3297 = 1.0 - _827;
                        float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                        float _3305 = _3304 * _3304;
                        float _3306 = _3305 * _3305;
                        float _3307 = _3287 + _3252;
                        float _3308 = _3288 + _3253;
                        float _3309 = _3289 + _3254;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3317 = dot(vec3(_752, _755, _758), vec3(_3287, _3288, _3289));
                        float _4650 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3320 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3321 = dot(vec3(_752, _755, _758), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                        float _4661 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                        float _3329 = _3265 * _3305;
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3255) + _3330;
                        float _4672 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3335 = 1.0 - _3305;
                        float _3345 = (0.5 / (((_3334 * ((_3320 * _3335) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3305) * _3320))) * _3334;
                        float _4683 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3356 = (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) / ((_3328 * _3328) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125))) * _3261;
                        _3114 = (_3276 * _3224.x) + _3182;
                        _3115 = (_3276 * _3224.y) + _3183;
                        _3116 = (_3276 * _3224.z) + _3184;
                        _3111 = (_3356 * _3241.x) + _3179;
                        _3112 = (_3356 * _3241.y) + _3180;
                        _3113 = (_3356 * _3241.z) + _3181;
                        if (_3186 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3186;
                        }
                    }
                    frontier_phi_66_pred = _3116;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                _2921 = frontier_phi_66_pred;
                _2919 = frontier_phi_66_pred_1;
                _2917 = frontier_phi_66_pred_2;
                _2915 = frontier_phi_66_pred_3;
                _2913 = frontier_phi_66_pred_4;
                _2911 = frontier_phi_66_pred_5;
                uint _3062 = _3061 + 1u;
                if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3055 = _2911;
                    _3056 = _2913;
                    _3057 = _2915;
                    _3058 = _2917;
                    _3059 = _2919;
                    _3060 = _2921;
                    _3061 = _3062;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
        }
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.z;
        uint _2927 = (_2925 >> 8u) & 15u;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((4294967295u << _2927) & _2830) == 0u)
        {
            _3023 = _2910;
            _3025 = _2912;
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
        }
        else
        {
            float _3048 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
            float _3049 = _3048 * _1889;
            float _3050 = _3048 * _1890;
            float _3051 = _3048 * _1891;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2927 < ((_2925 >> 12u) & 15u))
            {
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3162 = _2910;
                float _3163 = _2912;
                float _3164 = _2914;
                float _3165 = _2916;
                float _3166 = _2918;
                float _3167 = _2920;
                uint _3168 = _2927;
                uint _3177;
                bool _3178;
                for (;;)
                {
                    _3177 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                    _3178 = _3177 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3178)
                    {
                        frontier_phi_72_pred = _3167;
                        frontier_phi_72_pred_1 = _3166;
                        frontier_phi_72_pred_2 = _3165;
                        frontier_phi_72_pred_3 = _3164;
                        frontier_phi_72_pred_4 = _3163;
                        frontier_phi_72_pred_5 = _3162;
                    }
                    else
                    {
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3374 = _3162;
                        float _3375 = _3163;
                        float _3376 = _3164;
                        float _3377 = _3165;
                        float _3378 = _3166;
                        float _3379 = _3167;
                        uint _3380 = _3177;
                        uint _3381;
                        vec4 _3406;
                        float _3407;
                        vec4 _3422;
                        vec3 _3434;
                        vec4 _3449;
                        vec4 _3464;
                        float _3511;
                        bool _3512;
                        for (;;)
                        {
                            uint _3391 = ((_3168 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3380));
                            _3381 = (_3380 + 4294967295u) & _3380;
                            uint _3393 = _3391 * 40u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3407 = _3406.w;
                            uint _3409 = (_3391 * 40u) + 4u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3391 * 40u) + 8u;
                            _3434 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x));
                            uint _3436 = (_3391 * 40u) + 16u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3391 * 40u) + 20u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3467 = (_3391 * 40u) + 24u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3486 = (_3391 * 40u) + 28u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3511 = fma(_1891, _3499.z, fma(_1890, _3499.y, _3499.x * _1889)) + _3499.w;
                            _3512 = !((fma(_1891, _3480.z, fma(_1890, _3480.y, _3480.x * _1889)) + _3480.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3512)
                            {
                                float _3539 = _3406.x - _1889;
                                float _3540 = _3406.y - _1890;
                                float _3541 = _3406.z - _1891;
                                float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                                float _3545 = inversesqrt(_3542);
                                float _3546 = _3545 * _3539;
                                float _3547 = _3545 * _3540;
                                float _3548 = _3545 * _3541;
                                float _3552 = 1.0 - (_3542 / (_3407 * _3407));
                                float _4694 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3557 = sqrt(_3542) * _3422.w;
                                float _3559 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                                float _3560 = _3559 * _3559;
                                float _3563 = ((1.0 - _3560) * dot(vec3(_3546, _3547, _3548), vec3(_752, _755, _758))) + _3560;
                                float _3566 = _3557 * _3557;
                                float _3570 = (fma(_1891, _3449.z, fma(_1890, _3449.y, _3449.x * _1889)) + _3449.w) / _3511;
                                float _3571 = (fma(_1891, _3464.z, fma(_1890, _3464.y, _3464.x * _1889)) + _3464.w) / _3511;
                                float _3575 = 1.0 - dot(vec2(_3570, _3571), vec2(_3570, _3571));
                                float _4710 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3577 = _3576 * (((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3553) / ((_3566 * 0.699999988079071044921875) + 1.0));
                                float _3589 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                                float _3590 = 1.0 - _827;
                                float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                                float _3598 = _3597 * _3597;
                                float _3599 = _3598 * _3598;
                                float _3600 = _3546 - _3049;
                                float _3601 = _3547 - _3050;
                                float _3602 = _3548 - _3051;
                                float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                                float _3610 = dot(vec3(_752, _755, _758), vec3((-0.0) - _3049, (-0.0) - _3050, (-0.0) - _3051));
                                float _4721 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3614 = dot(vec3(_752, _755, _758), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                                float _4732 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                                float _3622 = _3559 * _3598;
                                float _3623 = _3622 * _3622;
                                float _3629 = ((1.0 - _3623) * dot(vec3(_752, _755, _758), vec3(_3546, _3547, _3548))) + _3623;
                                float _4743 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3631 = 1.0 - _3598;
                                float _3641 = (0.5 / (((_3630 * ((_3613 * _3631) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3598) * _3613))) * _3630;
                                float _4754 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3651 = (_3576 * _3553) * (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) / ((_3621 * _3621) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3577 * _3422.y;
                                frontier_phi_78_pred_1 = _3577 * _3422.x;
                                frontier_phi_78_pred_2 = _3651 * _3434.z;
                                frontier_phi_78_pred_3 = _3651 * _3434.y;
                                frontier_phi_78_pred_4 = _3651 * _3434.x;
                                frontier_phi_78_pred_5 = _3577 * _3422.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_78_pred;
                            _3658 = frontier_phi_78_pred_1;
                            _3657 = frontier_phi_78_pred_2;
                            _3656 = frontier_phi_78_pred_3;
                            _3655 = frontier_phi_78_pred_4;
                            _3660 = frontier_phi_78_pred_5;
                            _3364 = _3658 + _3377;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            _3361 = _3655 + _3374;
                            _3362 = _3656 + _3375;
                            _3363 = _3657 + _3376;
                            if (_3381 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3381;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3366;
                        frontier_phi_72_pred_1 = _3365;
                        frontier_phi_72_pred_2 = _3364;
                        frontier_phi_72_pred_3 = _3363;
                        frontier_phi_72_pred_4 = _3362;
                        frontier_phi_72_pred_5 = _3361;
                    }
                    _3034 = frontier_phi_72_pred;
                    _3032 = frontier_phi_72_pred_1;
                    _3030 = frontier_phi_72_pred_2;
                    _3028 = frontier_phi_72_pred_3;
                    _3026 = frontier_phi_72_pred_4;
                    _3024 = frontier_phi_72_pred_5;
                    uint _3169 = _3168 + 1u;
                    if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3162 = _3024;
                        _3163 = _3026;
                        _3164 = _3028;
                        _3165 = _3030;
                        _3166 = _3032;
                        _3167 = _3034;
                        _3168 = _3169;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3034;
                frontier_phi_60_61_ladder_1 = _3032;
                frontier_phi_60_61_ladder_2 = _3028;
                frontier_phi_60_61_ladder_3 = _3026;
                frontier_phi_60_61_ladder_4 = _3024;
                frontier_phi_60_61_ladder_5 = _3030;
            }
            else
            {
                frontier_phi_60_61_ladder = _2920;
                frontier_phi_60_61_ladder_1 = _2918;
                frontier_phi_60_61_ladder_2 = _2914;
                frontier_phi_60_61_ladder_3 = _2912;
                frontier_phi_60_61_ladder_4 = _2910;
                frontier_phi_60_61_ladder_5 = _2916;
            }
            _3023 = frontier_phi_60_61_ladder_4;
            _3025 = frontier_phi_60_61_ladder_3;
            _3027 = frontier_phi_60_61_ladder_2;
            _3029 = frontier_phi_60_61_ladder_5;
            _3031 = frontier_phi_60_61_ladder_1;
            _3033 = frontier_phi_60_61_ladder;
        }
        float _3038 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2843 = (_3038 * _3029) + _2355;
        _2845 = (_3038 * _3031) + _2357;
        _2847 = (_3038 * _3033) + _2359;
        _2849 = ((_3023 * _795) * _3038) + _2693;
        _2851 = ((_3025 * _797) * _3038) + _2695;
        _2853 = ((_3027 * _798) * _3038) + _2697;
    }
    else
    {
        _2843 = _2355;
        _2845 = _2357;
        _2847 = _2359;
        _2849 = _2693;
        _2851 = _2695;
        _2853 = _2697;
    }
    float _4770 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4781 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4792 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    uint _2873 = _266 + 6u;
    float _2881 = _733 / cbSceneParam._m0[86u].x;
    float _2882 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2896 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, (log2((isnan(cbSceneParam._m0[77u].w) ? _667 : (isnan(_667) ? cbSceneParam._m0[77u].w : min(_667, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2898 = _2896.x;
    float _2899 = _2896.y;
    float _2900 = _2896.z;
    float _2901 = _2896.w;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_667 > cbSceneParam._m0[78u].w)
    {
        float _2935 = isnan(_667) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _667 : min(cbSceneParam._m0[80u].w, _667));
        float _2936 = _2935 / _667;
        float _2947 = _2936 * _718;
        float _2948 = _719 * _2936;
        float _2949 = (-0.0) - _2948;
        float _2951 = _2936 * _720;
        float _2953 = (cbSceneParam._m0[77u].w * _2949) / _2935;
        float _2954 = _2953 + cbSceneParam._m0[79u].w;
        float _2955 = cbSceneParam._m0[79u].w - _2948;
        float _2961 = sqrt(((_2947 * _2947) + (_2948 * _2948)) + (_2951 * _2951));
        float _2964 = (1.0 - (cbSceneParam._m0[77u].w / _2935)) * _2961;
        float _2969 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3124;
        if (abs((_2949 - _2953) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3124 = ((((_2954 > 0.0) ? exp2(_2969 * _2954) : (2.0 - exp2(_2971 * _2954))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2964;
        }
        else
        {
            float _3084 = 1.0 / cbSceneParam._m0[80u].x;
            float _3085 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : max(_2954, _2955));
            float _3086 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : min(_2954, _2955));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            _3124 = ((abs(_2961 / _2949) * cbSceneParam._m0[80u].y) * ((((_3095 - _3096) * 2.0) - ((exp2(_2969 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)))) - exp2(_2969 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))))) * _3084)) - ((exp2(_2971 * _3095) - exp2(_2971 * _3096)) * _3084))) + (_2964 * cbSceneParam._m0[80u].z);
        }
        vec4 _3126 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, 1.0), 0.0);
        float _3135 = exp2((_3124 * (-1.44269502162933349609375)) * (1.0 - _3126.w));
        float _3136 = log2(_3135);
        float _3152 = log2(_2901);
        _2973 = (exp2(_3152 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].x)) * _3126.x) / cbSceneParam._m0[78u].x)) + _2898;
        _2975 = (exp2(_3152 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].y)) * _3126.y) / cbSceneParam._m0[78u].y)) + _2899;
        _2977 = (exp2(_3152 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].z)) * _3126.z) / cbSceneParam._m0[78u].z)) + _2900;
        _2979 = _3135 * _2901;
    }
    else
    {
        _2973 = _2898;
        _2975 = _2899;
        _2977 = _2900;
        _2979 = _2901;
    }
    float _2991 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2992 = _2991 == 3.0;
    float _2993 = log2(_2979);
    float _3000 = exp2(_2993 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2843 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _811))) + ((_2849 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1619)) * cbPerFrame._m0[3u].x));
    float _3001 = exp2(_2993 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2845 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _811))) + ((_2851 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1619)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2993 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2847 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _811))) + ((_2853 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1619)) * cbPerFrame._m0[3u].x));
    float _3011 = (_2991 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3011 * (_2992 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.y = _3011 * (_2992 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.z = _3011 * (_2992 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.w = cbInstanceData._m0[_2873].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2873].w;
}


