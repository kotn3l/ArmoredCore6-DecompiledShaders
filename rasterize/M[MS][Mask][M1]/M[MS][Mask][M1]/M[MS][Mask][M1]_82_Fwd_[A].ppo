#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1411;
float _3789;
float _3790;
float _3791;
float _3792;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3801 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _437 = (_430 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _438 = (_430 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _439 = (_430 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3812 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _516 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437);
    float _519 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438);
    float _522 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439);
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    float _589 = ((_561.x - _580) * _430) + _580;
    float _590 = ((_561.y - _581) * _430) + _581;
    float _591 = ((_561.z - _582) * _430) + _582;
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _616 = ((_603.z - _591) * _503) + _591;
    float _619 = ((((_603.x - _589) * _503) + _589) * 2.0) + (-1.0);
    float _621 = ((((_603.y - _590) * _503) + _590) * 2.0) + (-1.0);
    float _622 = dot(vec2(_619, _621), vec2(_619, _621));
    float _3823 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _685 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_668 - _669) * cbMtdParam._m0[24u].z) + _669) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3834 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _693 = (_686 * ((_541.x * cbMtdParam._m0[18u].x) - _516)) + _516;
    float _694 = (_686 * ((_541.y * cbMtdParam._m0[18u].y) - _519)) + _519;
    float _695 = (_686 * ((_541.z * cbMtdParam._m0[18u].z) - _522)) + _522;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _723 = _721.x;
    float _740 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _723) * _430) + _723;
    float _757 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _740) * _503) + _740;
    float _761 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _757) * cbMtdParam._m0[19u].z) + _757;
    float _763 = _761 - (_761 * _686);
    float _767 = (cbMtdParam._m0[19u].w * (_641.z - _616)) + _616;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _787 = (_780.x * 2.0) + (-1.0);
    float _788 = (_780.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _3845 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _797 = (_686 * (_780.z - _767)) + _767;
    float _800 = (((_641.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _619;
    float _801 = (((_641.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _621;
    float _813 = (((_787 - _800) + (cbMtdParam._m0[21u].x * _800)) * _686) + _800;
    float _814 = (((_788 - _801) + (cbMtdParam._m0[21u].x * _801)) * _686) + _801;
    float _815 = (_686 * (sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _627)) + _627;
    float _817 = cbMtdParam._m0[22u].x + _641.w;
    float _820 = fma(_815, _239 * NORMAL.x, fma(_814, _246 * TANGENT.x, (_232 * _224) * _813));
    float _823 = fma(_815, _239 * NORMAL.y, fma(_814, _246 * TANGENT.y, (_232 * _225) * _813));
    float _826 = fma(_815, _239 * NORMAL.z, fma(_814, _246 * TANGENT.z, (_232 * _226) * _813));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _3856 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _834 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _3878 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3889 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _3900 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3911 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _839 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    vec4 _918 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _920 = _918.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1092 = sqrt(((_904 * _904) + (_905 * _905)) + (_906 * _906));
        float _1098 = (cbMatDynParam._m0[5u].x * _1092) + cbMatDynParam._m0[5u].y;
        float _3922 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1103 = (cbMatDynParam._m0[5u].z * _1092) + cbMatDynParam._m0[5u].w;
        float _3933 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) - _1099)) + _1099) < ((_920 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _950 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _953 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _956 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _969 = _252 + 9u;
    uint _970 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_970].z;
    float _3944 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _982 = 1.0 - _839;
    float _983 = _979 * _982;
    float _984 = _980 * _982;
    float _985 = _981 * _982;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _839;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _839;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _839;
    float _993 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    float _996 = _992 + 0.039999999105930328369140625;
    vec4 _1005 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _1009 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _1005.x;
    float _1010 = dot(vec3(_831, _832, _833), vec3(_911, _912, _913));
    float _1013 = _1010 * 2.0;
    float _1017 = (_1013 * _831) - _911;
    float _1018 = (_1013 * _832) - _912;
    float _1019 = (_1013 * _833) - _913;
    float _1023 = abs(dot(vec3(_911, _912, _913), vec3(_831, _832, _833)));
    float _3977 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1025 = sqrt(_834);
    float _1038 = exp2((_1025 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1025 * 3.0));
    float _1044 = (1.0 - _1038) * ((_1025 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1045 = _1038 * _1025;
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1081, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073));
        float _1139 = fma(_1081, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073));
        float _1143 = fma(_1081, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073));
        float _1168 = _1073 + _831;
        float _1169 = _1077 + _832;
        float _1170 = _1081 + _833;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_831, _832, _833), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4025 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_831, _832, _833), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4058 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_831, _832, _833), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4091 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1452 = fma(_1081, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073));
        float _1456 = fma(_1081, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073));
        float _1460 = fma(_1081, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073));
        float _1483 = _1073 + _831;
        float _1484 = _1077 + _832;
        float _1485 = _1081 + _833;
        float _1495 = fma(_1485, cbModelParam._m0[30u].z, fma(_1484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1483)) - _1452;
        float _1496 = fma(_1485, cbModelParam._m0[31u].z, fma(_1484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1483)) - _1456;
        float _1497 = fma(_1485, cbModelParam._m0[32u].z, fma(_1484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1483)) - _1460;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1452 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1456 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[35u].z) + ((((((_1460 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1551 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1518.x + (-0.5));
        float _1553 = _1551 * (_1518.y + (-0.5));
        float _1554 = _1551 * (_1518.z + (-0.5));
        float _1561 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1525.x + (-0.5));
        float _1563 = _1561 * (_1525.y + (-0.5));
        float _1564 = _1561 * (_1525.z + (-0.5));
        float _1571 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1532.x + (-0.5));
        float _1573 = _1571 * (_1532.y + (-0.5));
        float _1574 = _1571 * (_1532.z + (-0.5));
        float _1581 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1539.x + (-0.5));
        float _1583 = _1581 * (_1539.y + (-0.5));
        float _1584 = _1581 * (_1539.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_831, _832, _833), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4154 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1615 + 1.0))) + _1620) * _1585;
        float _1630 = _1553 * 0.5;
        float _1631 = _1563 * 0.5;
        float _1632 = _1573 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_831, _832, _833), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4187 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1657 + 1.0))) + _1662) * _1586;
        float _1672 = _1554 * 0.5;
        float _1673 = _1564 * 0.5;
        float _1674 = _1574 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_831, _832, _833), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4220 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1699 + 1.0))) + _1704) * _1587;
        _1721 = _1554;
        _1722 = _1553;
        _1723 = _1552;
        _1724 = _1564;
        _1725 = _1563;
        _1726 = _1562;
        _1727 = _1574;
        _1728 = _1573;
        _1729 = _1572;
        _1730 = _1587;
        _1731 = _1586;
        _1732 = _1585;
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
    }
    else
    {
        _1721 = _1411;
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = _1411;
        _1731 = _1411;
        _1732 = _1411;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1423)) + _1423;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1424)) + _1424;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1425)) + _1425;
    float _1768 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1745));
    float _1789 = _1017 * 0.5;
    float _1790 = _1018 * 0.5;
    float _1791 = _1019 * 0.5;
    float _1792 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1795 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1798 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1805 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1809 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1813 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1820 = dot(vec4(cbModelParam._m0[39u]), vec4(_1789, _1790, _1791, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1834 = dot(vec4(cbModelParam._m0[40u]), vec4(_1789, _1790, _1791, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1847 = (_1843 * cbModelParam._m0[1u].x) + (_1832 * (1.0 - cbModelParam._m0[1u].x));
    float _1857 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1857 : min(cbModelParam._m0[25u].z, _1857));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1081, cbModelParam._m0[13u].z, fma(_1077, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1081, cbModelParam._m0[14u].z, fma(_1077, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1081, cbModelParam._m0[15u].z, fma(_1077, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1019, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017));
        float _1919 = fma(_1019, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017));
        float _1922 = fma(_1019, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1950 = frontier_phi_17_15_ladder;
        }
        float _2152;
        if (_1919 > 0.0)
        {
            _2152 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2152 = frontier_phi_26_22_ladder;
        }
        float _2406;
        if (_1922 > 0.0)
        {
            _2406 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2406 = frontier_phi_38_33_ladder;
        }
        float _2408 = isnan(_2152) ? _1950 : (isnan(_1950) ? _2152 : min(_1950, _2152));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1916) + _1905;
        float _2414 = (_2409 * _1919) + _1909;
        float _2415 = (_2409 * _1922) + _1913;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2416;
        float _2420 = _2416 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 > _2420) || ((_2414 < _2418) || ((_2413 < _2418) || (_2413 > _2420))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2415, cbModelParam._m0[9u].z, fma(_2414, cbModelParam._m0[9u].y, _2413 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2415, cbModelParam._m0[10u].z, fma(_2414, cbModelParam._m0[10u].y, _2413 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2415, cbModelParam._m0[11u].z, fma(_2414, cbModelParam._m0[11u].y, _2413 * cbModelParam._m0[11u].x))), _1858);
            frontier_phi_16_38_ladder = _2543.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2543.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_16_38_ladder_2;
        _1940 = frontier_phi_16_38_ladder_1;
        _1942 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1017, _1018, _1019), _1858);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2000 = fma(_1081, cbModelParam._m0[21u].z, fma(_1077, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073)) + cbModelParam._m0[21u].w;
        float _2004 = fma(_1081, cbModelParam._m0[22u].z, fma(_1077, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073)) + cbModelParam._m0[22u].w;
        float _2008 = fma(_1081, cbModelParam._m0[23u].z, fma(_1077, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073)) + cbModelParam._m0[23u].w;
        float _2011 = fma(_1019, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017));
        float _2014 = fma(_1019, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017));
        float _2017 = fma(_1019, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017));
        float _2157;
        if (_2011 > 0.0)
        {
            _2157 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2157 = frontier_phi_28_24_ladder;
        }
        float _2433;
        if (_2014 > 0.0)
        {
            _2433 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2433 = frontier_phi_40_35_ladder;
        }
        float _2646;
        if (_2017 > 0.0)
        {
            _2646 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2646 = frontier_phi_49_46_ladder;
        }
        float _2648 = isnan(_2433) ? _2157 : (isnan(_2157) ? _2433 : min(_2157, _2433));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _2011) + _2000;
        float _2654 = (_2649 * _2014) + _2004;
        float _2655 = (_2649 * _2017) + _2008;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2656;
        float _2659 = _2656 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2655 > _2659) || ((_2655 < _2657) || ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 < _2657) || (_2653 > _2659))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2655, cbModelParam._m0[17u].z, fma(_2654, cbModelParam._m0[17u].y, _2653 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2655, cbModelParam._m0[18u].z, fma(_2654, cbModelParam._m0[18u].y, _2653 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2655, cbModelParam._m0[19u].z, fma(_2654, cbModelParam._m0[19u].y, _2653 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_25_49_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2854.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2854.x * cbModelParam._m0[1u].z;
        }
        _2036 = frontier_phi_25_49_ladder_2;
        _2038 = frontier_phi_25_49_ladder_1;
        _2040 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1017, _1018, _1019), _1947);
        _2036 = _2020.x * cbModelParam._m0[1u].z;
        _2038 = _2020.y * cbModelParam._m0[1u].z;
        _2040 = _2020.z * cbModelParam._m0[1u].z;
    }
    float _2053 = (((_1044 * _993) + _1045) * _1009) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1044 * _995) + _1045) * _1009) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2057 = (((_1044 * _996) + _1045) * _1009) * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2060 = fma(_2057, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2053 * cbSceneParam._m0[89u].x));
    float _2063 = fma(_2057, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2053 * cbSceneParam._m0[90u].x));
    float _2066 = fma(_2057, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2053 * cbSceneParam._m0[91u].x));
    uvec4 _2076 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2078 = _2076.x * 14u;
    uint _2079 = _2078 + 13u;
    float _2086 = _1009 + (-1.0);
    float _2091 = (cbLight._m0[_2079].x * _2086) + 1.0;
    float _2092 = (cbLight._m0[_2079].y * _2086) + 1.0;
    float _2093 = (cbLight._m0[_2079].z * _2086) + 1.0;
    float _2094 = (cbLight._m0[_2079].w * _2086) + 1.0;
    uint _2095 = _2078 + 5u;
    float _2101 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2105 = _2078 + 4u;
    float _2111 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2115 = _2078 | 1u;
    float _2126 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_831, _832, _833));
    float _2129 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_831, _832, _833));
    float _4356 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _4367 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2134 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2136 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2143 = ((cbLight._m0[_2095].x * _2101) * _2136) + ((cbLight._m0[_2105].x * _2111) * _2134);
    float _2144 = ((_2101 * cbLight._m0[_2095].y) * _2136) + ((_2111 * cbLight._m0[_2105].y) * _2134);
    float _2145 = ((_2101 * cbLight._m0[_2095].z) * _2136) + ((_2111 * cbLight._m0[_2105].z) * _2134);
    uvec4 _2149 = floatBitsToUint(cbLight._m0[_2078 + 12u]);
    bool _2151 = _2149.x == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2151)
    {
        _2162 = _2143;
        _2164 = _2144;
        _2166 = _2145;
    }
    else
    {
        uint _2170 = _2078 + 6u;
        float _2186 = (dot(vec3(cbLight._m0[_2078 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4378 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2189 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2162 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _2143;
        _2164 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _2144;
        _2166 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _2145;
    }
    bool _2169 = _2149.y == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2169)
    {
        _2207 = _2162;
        _2209 = _2164;
        _2211 = _2166;
    }
    else
    {
        uint _2377 = _2078 + 7u;
        float _2393 = (dot(vec3(cbLight._m0[_2078 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4394 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2396 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2207 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2162;
        _2209 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2164;
        _2211 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2166;
    }
    uint _2214 = _2078 + 8u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _834) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2078].x + _911;
    float _2230 = cbLight._m0[_2078].y + _912;
    float _2231 = cbLight._m0[_2078].z + _913;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2078].xyz));
    float _4410 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _4421 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _2243 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2244 = dot(vec3(_831, _832, _833), vec3(_2236, _2237, _2238));
    float _4432 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2236, _2237, _2238));
    float _4443 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2228 * _2228;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0);
    float _2265 = 0.959999978542327880859375 - _990;
    float _2267 = 0.959999978542327880859375 - _991;
    float _2268 = 0.959999978542327880859375 - _992;
    float _2275 = 1.0 - _2228;
    float _2286 = (0.5 / (((_2243 * ((_2242 * _2275) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2275) + _2228) * _2242))) * _2242;
    float _4454 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    uint _2299 = _2078 + 9u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _834) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2115].x + _911;
    float _2313 = cbLight._m0[_2115].y + _912;
    float _2314 = cbLight._m0[_2115].z + _913;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2115].xyz));
    float _4465 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2326 = dot(vec3(_831, _832, _833), vec3(_2319, _2320, _2321));
    float _4476 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2319, _2320, _2321));
    float _4487 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2311 * _2311;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0);
    float _2352 = 1.0 - _2311;
    float _2362 = (0.5 / (((_2243 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2352) + _2311) * _2325))) * _2325;
    float _4498 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    float _2374 = (((((_2345 * _2265) + _993) * cbLight._m0[_2299].x) * _2364) * _2101) + (((((_2264 * _2265) + _993) * cbLight._m0[_2214].x) * _2288) * _2111);
    float _2375 = (((((_2345 * _2267) + _995) * cbLight._m0[_2299].y) * _2364) * _2101) + (((((_2264 * _2267) + _995) * cbLight._m0[_2214].y) * _2288) * _2111);
    float _2376 = (((((_2345 * _2268) + _996) * cbLight._m0[_2299].z) * _2364) * _2101) + (((((_2264 * _2268) + _996) * cbLight._m0[_2214].z) * _2288) * _2111);
    float _2438;
    float _2440;
    float _2442;
    if (_2151)
    {
        _2438 = _2374;
        _2440 = _2375;
        _2442 = _2376;
    }
    else
    {
        uint _2444 = _2078 + 2u;
        uint _2448 = _2078 + 10u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _834) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _911;
        float _2465 = cbLight._m0[_2444].y + _912;
        float _2466 = cbLight._m0[_2444].z + _913;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2444].xyz));
        float _4509 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2478 = dot(vec3(_831, _832, _833), vec3(_2471, _2472, _2473));
        float _4520 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4531 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2243 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2504) + _2463) * _2477))) * _2477;
        float _4542 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2438 = (((((_2497 * _2265) + _993) * cbLight._m0[_2448].x) * _2516) * _2517) + _2374;
        _2440 = (((((_2497 * _2267) + _995) * cbLight._m0[_2448].y) * _2516) * _2517) + _2375;
        _2442 = (((((_2497 * _2268) + _996) * cbLight._m0[_2448].z) * _2516) * _2517) + _2376;
    }
    float _2552;
    float _2554;
    float _2556;
    if (_2169)
    {
        _2552 = _2438;
        _2554 = _2440;
        _2556 = _2442;
    }
    else
    {
        uint _2563 = _2078 + 3u;
        uint _2567 = _2078 + 11u;
        float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2563].w)) * _834) * 0.949999988079071044921875);
        float _2582 = _2581 * _2581;
        float _2583 = cbLight._m0[_2563].x + _911;
        float _2584 = cbLight._m0[_2563].y + _912;
        float _2585 = cbLight._m0[_2563].z + _913;
        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
        float _2590 = _2589 * _2583;
        float _2591 = _2589 * _2584;
        float _2592 = _2589 * _2585;
        float _2593 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2563].xyz));
        float _4558 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2597 = dot(vec3(_831, _832, _833), vec3(_2590, _2591, _2592));
        float _4569 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2601 = dot(vec3(cbLight._m0[_2563].xyz), vec3(_2590, _2591, _2592));
        float _4580 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2605 = _2582 * _2582;
        float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
        float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
        float _2623 = 1.0 - _2582;
        float _2633 = (0.5 / (((_2243 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2623) + _2582) * _2596))) * _2596;
        float _4591 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2552 = (((((_2616 * _2265) + _993) * cbLight._m0[_2567].x) * _2635) * _2636) + _2438;
        _2554 = (((((_2616 * _2267) + _995) * cbLight._m0[_2567].y) * _2635) * _2636) + _2440;
        _2556 = (((((_2616 * _2268) + _996) * cbLight._m0[_2567].z) * _2635) * _2636) + _2442;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2076.y == 0u)
    {
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2711;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2711;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2711;
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.x;
        uint _2738 = uint((float(_2726.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _2727))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _2727)));
        float _2748 = (log2(_2714 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2749 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        uint _2752 = uint(isnan(14.0) ? _2749 : (isnan(_2749) ? 14.0 : min(_2749, 14.0)));
        uvec4 _2757 = texelFetch(g_lightClusterGridBuffer, int(((_2752 << 2u) + (_2738 << 6u)) >> 2u));
        uint _2758 = _2757.x;
        uint _2759 = _2726.z;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((((1u << ((_2759 >> 4u) & 15u)) + 4294967295u) & _2758) == 0u) || ((_2759 & 240u) == 0u))
        {
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
        }
        else
        {
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            uint _3018 = 0u;
            uint _3027;
            bool _3028;
            for (;;)
            {
                _3027 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                _3028 = _3027 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3028)
                {
                    frontier_phi_66_pred = _3012;
                    frontier_phi_66_pred_1 = _3017;
                    frontier_phi_66_pred_2 = _3016;
                    frontier_phi_66_pred_3 = _3015;
                    frontier_phi_66_pred_4 = _3014;
                    frontier_phi_66_pred_5 = _3013;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3027;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3018 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _2712;
                        float _3224 = _3183.y - _2713;
                        float _3225 = _3183.z - _2714;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_950, _953, _956), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4617 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _2712;
                        float _3259 = (-0.0) - _2713;
                        float _3260 = (-0.0) - _2714;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3275 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3276 = 1.0 - _1025;
                        float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                        float _3284 = _3283 * _3283;
                        float _3285 = _3284 * _3284;
                        float _3286 = _3265 + _3230;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3296 = dot(vec3(_950, _953, _956), vec3(_3265, _3266, _3267));
                        float _4633 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3300 = dot(vec3(_950, _953, _956), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                        float _4644 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                        float _3308 = _3243 * _3284;
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3233) + _3309;
                        float _4655 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3314 = 1.0 - _3284;
                        float _3324 = (0.5 / (((_3313 * ((_3299 * _3314) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3284) * _3299))) * _3313;
                        float _4666 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3335 = (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3307 * _3307) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3087 = (_3254 * _3202.x) + _3160;
                        _3088 = (_3254 * _3202.y) + _3161;
                        _3089 = (_3254 * _3202.z) + _3162;
                        _3084 = (_3335 * _3219.x) + _3157;
                        _3085 = (_3335 * _3219.y) + _3158;
                        _3086 = (_3335 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3089;
                    frontier_phi_66_pred_2 = _3088;
                    frontier_phi_66_pred_3 = _3087;
                    frontier_phi_66_pred_4 = _3086;
                    frontier_phi_66_pred_5 = _3085;
                }
                _2860 = frontier_phi_66_pred;
                _2870 = frontier_phi_66_pred_1;
                _2868 = frontier_phi_66_pred_2;
                _2866 = frontier_phi_66_pred_3;
                _2864 = frontier_phi_66_pred_4;
                _2862 = frontier_phi_66_pred_5;
                uint _3019 = _3018 + 1u;
                if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3012 = _2860;
                    _3013 = _2862;
                    _3014 = _2864;
                    _3015 = _2866;
                    _3016 = _2868;
                    _3017 = _2870;
                    _3018 = _3019;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
        }
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.z;
        uint _2876 = (_2874 >> 8u) & 15u;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((4294967295u << _2876) & _2758) == 0u)
        {
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
            _2990 = _2869;
        }
        else
        {
            float _3005 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
            float _3006 = _3005 * _2712;
            float _3007 = _3005 * _2713;
            float _3008 = _3005 * _2714;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2876 < ((_2874 >> 12u) & 15u))
            {
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _3140 = _2859;
                float _3141 = _2861;
                float _3142 = _2863;
                float _3143 = _2865;
                float _3144 = _2867;
                float _3145 = _2869;
                uint _3146 = _2876;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3156)
                    {
                        frontier_phi_77_pred = _3145;
                        frontier_phi_77_pred_1 = _3144;
                        frontier_phi_77_pred_2 = _3143;
                        frontier_phi_77_pred_3 = _3142;
                        frontier_phi_77_pred_4 = _3141;
                        frontier_phi_77_pred_5 = _3140;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        uint _3368 = _3155;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3379 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3379 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3379 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_2714, _3486.z, fma(_2713, _3486.y, _3486.x * _2712)) + _3486.w;
                            _3499 = !((fma(_2714, _3467.z, fma(_2713, _3467.y, _3467.x * _2712)) + _3467.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3394.x - _2712;
                                float _3527 = _3394.y - _2713;
                                float _3528 = _3394.z - _2714;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3395 * _3395));
                                float _4677 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3544 = sqrt(_3529) * _3410.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_950, _953, _956))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_2714, _3437.z, fma(_2713, _3437.y, _3437.x * _2712)) + _3437.w) / _3498;
                                float _3558 = (fma(_2714, _3452.z, fma(_2713, _3452.y, _3452.x * _2712)) + _3452.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4693 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _1025;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3006;
                                float _3588 = _3534 - _3007;
                                float _3589 = _3535 - _3008;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_950, _953, _956), vec3((-0.0) - _3006, (-0.0) - _3007, (-0.0) - _3008));
                                float _4704 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3601 = dot(vec3(_950, _953, _956), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4715 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_950, _953, _956), vec3(_3533, _3534, _3535))) + _3610;
                                float _4726 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4737 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3564 * _3410.y;
                                frontier_phi_83_pred_1 = _3564 * _3410.x;
                                frontier_phi_83_pred_2 = _3638 * _3422.z;
                                frontier_phi_83_pred_3 = _3638 * _3422.y;
                                frontier_phi_83_pred_4 = _3638 * _3422.x;
                                frontier_phi_83_pred_5 = _3564 * _3410.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3646 = frontier_phi_83_pred;
                            _3645 = frontier_phi_83_pred_1;
                            _3644 = frontier_phi_83_pred_2;
                            _3643 = frontier_phi_83_pred_3;
                            _3642 = frontier_phi_83_pred_4;
                            _3647 = frontier_phi_83_pred_5;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3354;
                        frontier_phi_77_pred_1 = _3353;
                        frontier_phi_77_pred_2 = _3352;
                        frontier_phi_77_pred_3 = _3351;
                        frontier_phi_77_pred_4 = _3350;
                        frontier_phi_77_pred_5 = _3349;
                    }
                    _2991 = frontier_phi_77_pred;
                    _2989 = frontier_phi_77_pred_1;
                    _2987 = frontier_phi_77_pred_2;
                    _2985 = frontier_phi_77_pred_3;
                    _2983 = frontier_phi_77_pred_4;
                    _2981 = frontier_phi_77_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _2981;
                        _3141 = _2983;
                        _3142 = _2985;
                        _3143 = _2987;
                        _3144 = _2989;
                        _3145 = _2991;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2985;
                frontier_phi_58_59_ladder_1 = _2991;
                frontier_phi_58_59_ladder_2 = _2989;
                frontier_phi_58_59_ladder_3 = _2987;
                frontier_phi_58_59_ladder_4 = _2983;
                frontier_phi_58_59_ladder_5 = _2981;
            }
            else
            {
                frontier_phi_58_59_ladder = _2863;
                frontier_phi_58_59_ladder_1 = _2869;
                frontier_phi_58_59_ladder_2 = _2867;
                frontier_phi_58_59_ladder_3 = _2865;
                frontier_phi_58_59_ladder_4 = _2861;
                frontier_phi_58_59_ladder_5 = _2859;
            }
            _2980 = frontier_phi_58_59_ladder_5;
            _2982 = frontier_phi_58_59_ladder_4;
            _2984 = frontier_phi_58_59_ladder;
            _2986 = frontier_phi_58_59_ladder_3;
            _2988 = frontier_phi_58_59_ladder_2;
            _2990 = frontier_phi_58_59_ladder_1;
        }
        float _2995 = isnan(1.0) ? _1009 : (isnan(_1009) ? 1.0 : min(_1009, 1.0));
        _2771 = (_2995 * _2986) + _2207;
        _2773 = (_2995 * _2988) + _2209;
        _2775 = (_2995 * _2990) + _2211;
        _2777 = ((_2980 * _993) * _2995) + _2552;
        _2779 = ((_2982 * _995) * _2995) + _2554;
        _2781 = ((_2984 * _996) * _2995) + _2556;
    }
    else
    {
        _2771 = _2207;
        _2773 = _2209;
        _2775 = _2211;
        _2777 = _2552;
        _2779 = _2554;
        _2781 = _2556;
    }
    float _4753 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4764 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4775 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2798 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2771 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1009))) + ((_2777 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _2799 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2773 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1009))) + ((_2779 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2775 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1009))) + ((_2781 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    uint _2801 = _252 + 6u;
    float _2809 = _931 / cbSceneParam._m0[86u].x;
    float _2810 = _932 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _2884 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _2885 = _2884 / _853;
        float _2896 = _2885 * _904;
        float _2897 = _905 * _2885;
        float _2898 = (-0.0) - _2897;
        float _2900 = _2885 * _906;
        float _2902 = (cbSceneParam._m0[77u].w * _2898) / _2884;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2897;
        float _2910 = sqrt(((_2896 * _2896) + (_2897 * _2897)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2884)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2898 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3041 = 1.0 / cbSceneParam._m0[80u].x;
            float _3042 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3043 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            _3097 = ((abs(_2910 / _2898) * cbSceneParam._m0[80u].y) * ((((_3052 - _3053) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))))) * _3041)) - ((exp2(_2920 * _3052) - exp2(_2920 * _3053)) * _3041))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2829);
        _2922 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2924 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2926 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2928 = _3108 * _2829;
    }
    else
    {
        _2922 = _2826;
        _2924 = _2827;
        _2926 = _2828;
        _2928 = _2829;
    }
    bool _3135;
    vec4 _2938;
    vec4 _2960;
    float _2962;
    float _2966;
    float _2967;
    float _2968;
    float _2969;
    bool _2979;
    for (;;)
    {
        _2938 = cbMatDynParam._m0[0u];
        float _2940 = roundEven(_2938.y);
        bool _2941 = _2940 == 3.0;
        float _2942 = log2(_2928);
        float _2949 = exp2(_2942 * cbSceneParam._m0[78u].x) * _2798;
        float _2950 = exp2(_2942 * cbSceneParam._m0[78u].y) * _2799;
        float _2951 = exp2(_2942 * cbSceneParam._m0[78u].z) * _2800;
        float _2958 = _920 + (-0.5);
        _2960 = cbMtdParam._m0[1u];
        _2962 = _2960.y * _2958;
        float _2965 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2966 = _2965 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
        _2967 = _2965 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
        _2968 = _2965 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
        _2969 = _2958 * 0.999000012874603271484375;
        _2979 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2979)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2969) < 0.5)
            {
                _3135 = true;
                break;
            }
        }
        uint _3076 = _969 + uint(_2938.w);
        if ((cbInstanceData._m0[_3076].w < 1.0) && ((cbInstanceData._m0[_3076].w + _2969) < 0.5))
        {
            _3135 = true;
            break;
        }
        if ((_2962 + 1.0) < _2960.x)
        {
            _3135 = true;
            break;
        }
        _3135 = false;
        break;
    }
    float _3340;
    if (_3135)
    {
        discard_state = true;
        _3340 = 0.0;
    }
    else
    {
        _3340 = cbInstanceData._m0[_2801].w;
    }
    SV_Target.x = _2966;
    SV_Target.y = _2967;
    SV_Target.z = _2968;
    SV_Target.w = _3340;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
    discard_exit();
}


