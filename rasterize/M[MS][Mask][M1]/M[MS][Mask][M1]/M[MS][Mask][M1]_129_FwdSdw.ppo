#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1731;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _263 = _262 * _254;
    float _264 = _262 * _255;
    float _265 = _262 * _256;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4337 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4348 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4359 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = _383.x * cbMtdParam._m0[11u].x;
    float _389 = _383.y * cbMtdParam._m0[11u].y;
    float _390 = _383.z * cbMtdParam._m0[11u].z;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _477 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _494 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _428.x) * 2.0) - ((((_465 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4370 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _502 = (_495 * ((_409.x * cbMtdParam._m0[12u].x) - _388)) + _388;
    float _503 = (_495 * ((_409.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _504 = (_495 * ((_409.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _543 = _541.x;
    float _553 = dot(vec4(_543, _541.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _567 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _428.y) * 2.0) - ((((_543 - _553) * cbMtdParam._m0[23u].w) + _553) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4381 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _575 = (_568 * ((_521.x * cbMtdParam._m0[13u].x) - _502)) + _502;
    float _576 = (_568 * ((_521.y * cbMtdParam._m0[13u].y) - _503)) + _503;
    float _577 = (_568 * ((_521.z * cbMtdParam._m0[13u].z) - _504)) + _504;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _625 = dot(vec4(_615, _613.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _637 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _428.z) * 2.0) - ((((_615 - _625) * cbMtdParam._m0[23u].w) + _625) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4392 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _648 = (_357.x * cbMtdParam._m0[9u].x) * ((_638 * ((_596.x * cbMtdParam._m0[14u].x) - _575)) + _575);
    float _649 = (_357.y * cbMtdParam._m0[9u].y) * ((_638 * ((_596.y * cbMtdParam._m0[14u].y) - _576)) + _576);
    float _650 = (_357.z * cbMtdParam._m0[9u].z) * ((_638 * ((_596.z * cbMtdParam._m0[14u].z) - _577)) + _577);
    float _654 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _648;
    float _657 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _649;
    float _660 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _650;
    float _668 = (((_648 - _654) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) + _654) * 4.55000019073486328125;
    float _670 = (((_649 - _657) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) + _657) * 4.55000019073486328125;
    float _672 = (((_650 - _660) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) + _660) * 4.55000019073486328125;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _735 = _731.z;
    float _742 = ((_714.x - _733) * _495) + _733;
    float _743 = ((_714.y - _734) * _495) + _734;
    float _744 = ((_714.z - _735) * _495) + _735;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _767 = ((_756.x - _742) * _568) + _742;
    float _768 = ((_756.y - _743) * _568) + _743;
    float _769 = ((_756.z - _744) * _568) + _744;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _794 = ((_781.z - _769) * _638) + _769;
    float _797 = ((((_781.x - _767) * _638) + _767) * 2.0) + (-1.0);
    float _798 = ((((_781.y - _768) * _638) + _768) * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _4403 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _804 = sqrt(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))));
    vec4 _822 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _834 = (_797 + ((((_689.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_822.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _835 = (_798 + ((((_689.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_822.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _838 = fma(_804, _270, fma(_835, _277, _834 * _263));
    float _841 = fma(_804, _271, fma(_835, _278, _834 * _264));
    float _844 = fma(_804, _272, fma(_835, _279, _834 * _265));
    float _848 = inversesqrt(dot(vec3(_838, _841, _844), vec3(_838, _841, _844)));
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _877 = _875.x;
    float _878 = 1.0 - _877;
    float _886 = (cbMtdParam._m0[19u].x + dot(vec4(_848 * _838, _848 * _841, _848 * _844, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_877 - _878) * cbMtdParam._m0[24u].z) + _878) * cbMtdParam._m0[21u].z);
    float _4414 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _889 = (-0.0) - cbMtdParam._m0[24u].x;
    float _891 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
    float _899 = _887 - ((_887 * TEXCOORD_8.x) * _892);
    float _900 = _887 - ((_887 * TEXCOORD_8.y) * _892);
    float _901 = _887 - ((_887 * TEXCOORD_8.z) * _892);
    float _908 = (_899 * (cbMtdParam._m0[17u].x - _668)) + _668;
    float _909 = (_900 * (cbMtdParam._m0[17u].y - _670)) + _670;
    float _910 = (_901 * (cbMtdParam._m0[17u].z - _672)) + _672;
    float _925 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _926 = _925 * TEXCOORD.z;
    float _927 = _925 * TEXCOORD.w;
    vec4 _939 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _926) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _927) + cbTextureTilingScale._m0[19u].w));
    float _941 = _939.x;
    float _942 = 1.0 - _941;
    float _968 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_941 - _942) * cbMtdParam._m0[24u].w) + _942) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4435 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _969 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _977 = ((((cbMtdParam._m0[10u].x - _908) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _969) + _908;
    float _978 = ((((cbMtdParam._m0[10u].y - _909) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _969) + _909;
    float _979 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _910)) * _969) + _910;
    vec4 _1005 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1007 = _1005.x;
    float _1024 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _1007) * _495) + _1007;
    float _1041 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _1024) * _568) + _1024;
    float _1058 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1041) * _638) + _1041;
    float _1064 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1058) * cbMtdParam._m0[19u].z) + _1058;
    float _1066 = _1064 - (_1064 * _899);
    float _1068 = _1066 - (_1066 * _969);
    float _1073 = (((_689.z - _794) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _794;
    float _1077 = ((_822.z - _1073) * cbMtdParam._m0[19u].w) + _1073;
    vec4 _1093 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1100 = (_1093.x * 2.0) + (-1.0);
    float _1101 = (_1093.y * 2.0) + (-1.0);
    float _1102 = dot(vec2(_1100, _1101), vec2(_1100, _1101));
    float _4446 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1110 = ((_1093.z - _1077) * _899) + _1077;
    float _1113 = ((cbMtdParam._m0[23u].x - _1110) * _969) + _1110;
    vec4 _1136 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _926) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _927) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1142 = (_1136.x * 2.0) + (-1.0);
    float _1143 = (_1136.y * 2.0) + (-1.0);
    float _1144 = dot(vec2(_1142, _1143), vec2(_1142, _1143));
    float _4457 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1159 = ((sqrt(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) - _804) * _901) + _804;
    float _1162 = (((_1100 - _834) * _899) + _834) + (cbMtdParam._m0[21u].x * _834);
    float _1163 = (((_1101 - _835) * _900) + _835) + (cbMtdParam._m0[21u].x * _835);
    float _1174 = (((_1142 - _1162) + (_1162 * cbMtdParam._m0[22u].z)) * _969) + _1162;
    float _1175 = (((_1143 - _1163) + (_1163 * cbMtdParam._m0[22u].z)) * _969) + _1163;
    float _1176 = (_969 * (sqrt(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) - _1159)) + _1159;
    float _1178 = cbMtdParam._m0[22u].x + _822.w;
    float _1181 = fma(_1176, _270, fma(_1175, _277, _1174 * _263));
    float _1184 = fma(_1176, _271, fma(_1175, _278, _1174 * _264));
    float _1187 = fma(_1176, _272, fma(_1175, _279, _1174 * _265));
    float _1191 = inversesqrt(dot(vec3(_1181, _1184, _1187), vec3(_1181, _1184, _1187)));
    float _1192 = _1191 * _1181;
    float _1193 = _1191 * _1184;
    float _1194 = _1191 * _1187;
    float _4468 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1195 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _4490 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4501 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4512 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4523 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1200 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _1214 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1254);
    float _1265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1254);
    float _1266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1254);
    float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
    float _1271 = _1264 * _1270;
    float _1272 = _1265 * _1270;
    float _1273 = _1266 * _1270;
    float _1279 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1280 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1298 = fma(_1194, cbSceneParam._m0[5u].z, fma(_1193, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1192));
    float _1301 = fma(_1194, cbSceneParam._m0[6u].z, fma(_1193, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1192));
    float _1304 = fma(_1194, cbSceneParam._m0[7u].z, fma(_1193, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1192));
    uint _1318 = (_301 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1324 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * cbInstanceData._m0[_1318].x;
    float _1325 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * cbInstanceData._m0[_1318].y;
    float _1326 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * cbInstanceData._m0[_1318].z;
    float _4534 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _1327 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _4545 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1328 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _4556 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _1329 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _1330 = 1.0 - _1200;
    float _1331 = _1327 * _1330;
    float _1332 = _1328 * _1330;
    float _1333 = _1329 * _1330;
    float _1338 = (_1327 + (-0.039999999105930328369140625)) * _1200;
    float _1339 = (_1328 + (-0.039999999105930328369140625)) * _1200;
    float _1340 = (_1329 + (-0.039999999105930328369140625)) * _1200;
    float _1341 = _1338 + 0.039999999105930328369140625;
    float _1343 = _1339 + 0.039999999105930328369140625;
    float _1344 = _1340 + 0.039999999105930328369140625;
    vec4 _1353 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1279, cbSceneParam._m0[86u].y * _1280));
    float _1357 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * TEXCOORD_5.w) * _1353.x;
    float _1358 = dot(vec3(_1192, _1193, _1194), vec3(_1271, _1272, _1273));
    float _1361 = _1358 * 2.0;
    float _1365 = (_1361 * _1192) - _1271;
    float _1366 = (_1361 * _1193) - _1272;
    float _1367 = (_1361 * _1194) - _1273;
    float _1371 = abs(dot(vec3(_1271, _1272, _1273), vec3(_1192, _1193, _1194)));
    float _4567 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _1373 = sqrt(_1195);
    float _1386 = exp2((_1373 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1373 * 3.0));
    float _1392 = (1.0 - _1386) * ((_1373 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1393 = _1386 * _1373;
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1429 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1730;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1455 = fma(_1429, cbModelParam._m0[26u].z, fma(_1425, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1421));
        float _1459 = fma(_1429, cbModelParam._m0[27u].z, fma(_1425, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1421));
        float _1463 = fma(_1429, cbModelParam._m0[28u].z, fma(_1425, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1421));
        float _1488 = _1421 + _1192;
        float _1489 = _1425 + _1193;
        float _1490 = _1429 + _1194;
        float _1500 = fma(_1490, cbModelParam._m0[26u].z, fma(_1489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1488)) - _1455;
        float _1501 = fma(_1490, cbModelParam._m0[27u].z, fma(_1489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1488)) - _1459;
        float _1502 = fma(_1490, cbModelParam._m0[28u].z, fma(_1489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1488)) - _1463;
        float _1506 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
        float _1519 = ((_1506 * _1500) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1455 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1506 * _1501) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1459 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1506 * _1502) / cbModelParam._m0[34u].z) + ((((((_1463 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        float _1558 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1524.x + (-0.5));
        float _1560 = _1558 * (_1524.y + (-0.5));
        float _1561 = _1558 * (_1524.z + (-0.5));
        float _1568 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1531.x + (-0.5));
        float _1570 = _1568 * (_1531.y + (-0.5));
        float _1571 = _1568 * (_1531.z + (-0.5));
        float _1578 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1538.x + (-0.5));
        float _1580 = _1578 * (_1538.y + (-0.5));
        float _1581 = _1578 * (_1538.z + (-0.5));
        float _1588 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1545.x + (-0.5));
        float _1590 = _1588 * (_1545.y + (-0.5));
        float _1591 = _1588 * (_1545.z + (-0.5));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = _1559 * 0.5;
        float _1596 = _1569 * 0.5;
        float _1597 = _1579 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1612 = (dot(vec3(_1192, _1193, _1194), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1622 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4615 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1624 + 1.0))) + _1629) * _1592;
        float _1639 = _1560 * 0.5;
        float _1640 = _1570 * 0.5;
        float _1641 = _1580 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_1192, _1193, _1194), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4626 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4637 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4648 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_1666 + 1.0))) + _1671) * _1593;
        float _1681 = _1561 * 0.5;
        float _1682 = _1571 * 0.5;
        float _1683 = _1581 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_1192, _1193, _1194), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4659 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4670 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4681 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_1708 + 1.0))) + _1713) * _1594;
        _1730 = _1561;
        _1732 = _1560;
        _1733 = _1559;
        _1734 = _1571;
        _1735 = _1570;
        _1736 = _1569;
        _1737 = _1581;
        _1738 = _1580;
        _1739 = _1579;
        _1740 = _1594;
        _1741 = _1593;
        _1742 = _1592;
        _1743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
    }
    else
    {
        _1730 = _1731;
        _1732 = _1731;
        _1733 = _1731;
        _1734 = _1731;
        _1735 = _1731;
        _1736 = _1731;
        _1737 = _1731;
        _1738 = _1731;
        _1739 = _1731;
        _1740 = _1731;
        _1741 = _1731;
        _1742 = _1731;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    float _2047;
    float _2048;
    float _2049;
    float _2050;
    float _2051;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1768 = fma(_1429, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421));
        float _1772 = fma(_1429, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421));
        float _1776 = fma(_1429, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421));
        float _1799 = _1421 + _1192;
        float _1800 = _1425 + _1193;
        float _1801 = _1429 + _1194;
        float _1811 = fma(_1801, cbModelParam._m0[30u].z, fma(_1800, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1799)) - _1768;
        float _1812 = fma(_1801, cbModelParam._m0[31u].z, fma(_1800, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1799)) - _1772;
        float _1813 = fma(_1801, cbModelParam._m0[32u].z, fma(_1800, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1799)) - _1776;
        float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
        float _1830 = ((_1817 * _1811) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1768 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1831 = ((_1817 * _1812) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1772 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1832 = ((_1817 * _1813) / cbModelParam._m0[35u].z) + ((((((_1776 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1834 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1830, _1831, _1832), 0.0);
        vec4 _1841 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1830, _1831, _1832), 0.0);
        vec4 _1848 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1830, _1831, _1832), 0.0);
        vec4 _1855 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1830, _1831, _1832), 0.0);
        float _1867 = exp2((_1834.w + (-0.5)) * 20.0) * 2.0;
        float _1868 = _1867 * (_1834.x + (-0.5));
        float _1869 = _1867 * (_1834.y + (-0.5));
        float _1870 = _1867 * (_1834.z + (-0.5));
        float _1877 = exp2((_1841.w + (-0.5)) * 20.0) * 2.0;
        float _1878 = _1877 * (_1841.x + (-0.5));
        float _1879 = _1877 * (_1841.y + (-0.5));
        float _1880 = _1877 * (_1841.z + (-0.5));
        float _1887 = exp2((_1848.w + (-0.5)) * 20.0) * 2.0;
        float _1888 = _1887 * (_1848.x + (-0.5));
        float _1889 = _1887 * (_1848.y + (-0.5));
        float _1890 = _1887 * (_1848.z + (-0.5));
        float _1897 = exp2((_1855.w + (-0.5)) * 20.0) * 2.0;
        float _1898 = _1897 * (_1855.x + (-0.5));
        float _1899 = _1897 * (_1855.y + (-0.5));
        float _1900 = _1897 * (_1855.z + (-0.5));
        float _1901 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1902 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1903 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1904 = _1868 * 0.5;
        float _1905 = _1878 * 0.5;
        float _1906 = _1888 * 0.5;
        float _1907 = dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906));
        float _1912 = (_1907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1907);
        float _1920 = (dot(vec3(_1192, _1193, _1194), vec3(_1912 * _1904, _1912 * _1905, _1912 * _1906)) + 1.0) * 0.5;
        float _4722 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1929 = sqrt(((_1905 * _1905) + (_1904 * _1904)) + (_1906 * _1906)) / (_1901 + 9.9999997473787516355514526367188e-06);
        float _4733 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _1931 = _1930 * 2.0;
        float _1935 = (1.0 - _1930) / (_1930 + 1.0);
        float _4744 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1945 = ((((1.0 - _1936) * (_1931 + 2.0)) * exp2(log2(isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_1931 + 1.0))) + _1936) * _1901;
        float _1946 = _1869 * 0.5;
        float _1947 = _1879 * 0.5;
        float _1948 = _1889 * 0.5;
        float _1949 = dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948));
        float _1954 = (_1949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1949);
        float _1962 = (dot(vec3(_1192, _1193, _1194), vec3(_1954 * _1946, _1954 * _1947, _1954 * _1948)) + 1.0) * 0.5;
        float _4755 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1971 = sqrt(((_1947 * _1947) + (_1946 * _1946)) + (_1948 * _1948)) / (_1902 + 9.9999997473787516355514526367188e-06);
        float _4766 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _1973 = _1972 * 2.0;
        float _1977 = (1.0 - _1972) / (_1972 + 1.0);
        float _4777 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _1987 = ((((1.0 - _1978) * (_1973 + 2.0)) * exp2(log2(isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_1973 + 1.0))) + _1978) * _1902;
        float _1988 = _1870 * 0.5;
        float _1989 = _1880 * 0.5;
        float _1990 = _1890 * 0.5;
        float _1991 = dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990));
        float _1996 = (_1991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1991);
        float _2004 = (dot(vec3(_1192, _1193, _1194), vec3(_1996 * _1988, _1996 * _1989, _1996 * _1990)) + 1.0) * 0.5;
        float _4788 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2013 = sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990)) / (_1903 + 9.9999997473787516355514526367188e-06);
        float _4799 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2015 = _2014 * 2.0;
        float _2019 = (1.0 - _2014) / (_2014 + 1.0);
        float _4810 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2029 = ((((1.0 - _2020) * (_2015 + 2.0)) * exp2(log2(isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2015 + 1.0))) + _2020) * _1903;
        _2037 = _1870;
        _2038 = _1869;
        _2039 = _1868;
        _2040 = _1880;
        _2041 = _1879;
        _2042 = _1878;
        _2043 = _1890;
        _2044 = _1889;
        _2045 = _1888;
        _2046 = _1903;
        _2047 = _1902;
        _2048 = _1901;
        _2049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)));
        _2050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)));
        _2051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)));
    }
    else
    {
        _2037 = _1731;
        _2038 = _1731;
        _2039 = _1731;
        _2040 = _1731;
        _2041 = _1731;
        _2042 = _1731;
        _2043 = _1731;
        _2044 = _1731;
        _2045 = _1731;
        _2046 = _1731;
        _2047 = _1731;
        _2048 = _1731;
        _2049 = 0.0;
        _2050 = 0.0;
        _2051 = 0.0;
    }
    float _2061 = (cbModelParam._m0[1u].x * (_2049 - _1743)) + _1743;
    float _2062 = (cbModelParam._m0[1u].x * (_2050 - _1744)) + _1744;
    float _2063 = (cbModelParam._m0[1u].x * (_2051 - _1745)) + _1745;
    float _2084 = fma(_2063, cbSceneParam._m0[89u].z, fma(_2062, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2087 = fma(_2063, cbSceneParam._m0[90u].z, fma(_2062, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2090 = fma(_2063, cbSceneParam._m0[91u].z, fma(_2062, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2061));
    float _2105 = _1365 * 0.5;
    float _2106 = _1366 * 0.5;
    float _2107 = _1367 * 0.5;
    float _2108 = dot(vec4(_2105, _2106, _2107, 1.0), vec4(_2039, _2042, _2045, _2048));
    float _2111 = dot(vec4(_2105, _2106, _2107, 1.0), vec4(_2038, _2041, _2044, _2047));
    float _2114 = dot(vec4(_2105, _2106, _2107, 1.0), vec4(_2037, _2040, _2043, _2046));
    float _2148;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2121 = dot(vec4(_2105, _2106, _2107, 1.0), vec4(_1730, _1734, _1737, _1740));
        float _2125 = dot(vec4(_2105, _2106, _2107, 1.0), vec4(_1732, _1735, _1738, _1741));
        float _2129 = dot(vec4(_2105, _2106, _2107, 1.0), vec4(_1733, _1736, _1739, _1742));
        float _2136 = dot(vec4(cbModelParam._m0[39u]), vec4(_2105, _2106, _2107, 1.0));
        _2148 = dot(vec3(isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)), isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0)), isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2136) ? 0.0 : (isnan(0.0) ? _2136 : max(0.0, _2136))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2148 = 1.0;
    }
    float _2159;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2150 = dot(vec4(cbModelParam._m0[40u]), vec4(_2105, _2106, _2107, 1.0));
        _2159 = dot(vec3(isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0)), isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0)), isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2150) ? 0.0 : (isnan(0.0) ? _2150 : max(0.0, _2150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2159 = 1.0;
    }
    float _2163 = (_2159 * cbModelParam._m0[1u].x) + (_2148 * (1.0 - cbModelParam._m0[1u].x));
    float _2173 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1195);
    float _2174 = isnan(_2173) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2173 : min(cbModelParam._m0[25u].z, _2173));
    float _2254;
    float _2256;
    float _2258;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2221 = fma(_1429, cbModelParam._m0[13u].z, fma(_1425, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1421)) + cbModelParam._m0[13u].w;
        float _2225 = fma(_1429, cbModelParam._m0[14u].z, fma(_1425, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1421)) + cbModelParam._m0[14u].w;
        float _2229 = fma(_1429, cbModelParam._m0[15u].z, fma(_1425, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1421)) + cbModelParam._m0[15u].w;
        float _2232 = fma(_1367, cbModelParam._m0[13u].z, fma(_1366, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1365));
        float _2235 = fma(_1367, cbModelParam._m0[14u].z, fma(_1366, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1365));
        float _2238 = fma(_1367, cbModelParam._m0[15u].z, fma(_1366, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1365));
        float _2266;
        if (_2232 > 0.0)
        {
            _2266 = abs((1.0 - _2221) / _2232);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2221 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2266 = frontier_phi_14_12_ladder;
        }
        float _2438;
        if (_2235 > 0.0)
        {
            _2438 = abs((1.0 - _2225) / _2235);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2225 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2438 = frontier_phi_23_19_ladder;
        }
        float _2733;
        if (_2238 > 0.0)
        {
            _2733 = abs((1.0 - _2229) / _2238);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2238 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2229 + 1.0) / _2238);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2733 = frontier_phi_35_30_ladder;
        }
        float _2735 = isnan(_2438) ? _2266 : (isnan(_2266) ? _2438 : min(_2266, _2438));
        float _2736 = isnan(_2733) ? _2735 : (isnan(_2735) ? _2733 : min(_2735, _2733));
        float _2740 = (_2736 * _2232) + _2221;
        float _2741 = (_2736 * _2235) + _2225;
        float _2742 = (_2736 * _2238) + _2229;
        float _2743 = _2736 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2743;
        float _2747 = _2743 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 > _2747) || ((_2741 < _2745) || ((_2740 < _2745) || (_2740 > _2747))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2742, cbModelParam._m0[9u].z, fma(_2741, cbModelParam._m0[9u].y, _2740 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2742, cbModelParam._m0[10u].z, fma(_2741, cbModelParam._m0[10u].y, _2740 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2742, cbModelParam._m0[11u].z, fma(_2741, cbModelParam._m0[11u].y, _2740 * cbModelParam._m0[11u].x))), _2174);
            frontier_phi_13_35_ladder = _2887.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2887.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2887.x * cbModelParam._m0[1u].y;
        }
        _2254 = frontier_phi_13_35_ladder_2;
        _2256 = frontier_phi_13_35_ladder_1;
        _2258 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1365, _1366, _1367), _2174);
        _2254 = _2242.x * cbModelParam._m0[1u].y;
        _2256 = _2242.y * cbModelParam._m0[1u].y;
        _2258 = _2242.z * cbModelParam._m0[1u].y;
    }
    float _2262 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1195);
    float _2263 = isnan(_2262) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2262 : min(cbModelParam._m0[25u].w, _2262));
    float _2353;
    float _2355;
    float _2357;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2317 = fma(_1429, cbModelParam._m0[21u].z, fma(_1425, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1421)) + cbModelParam._m0[21u].w;
        float _2321 = fma(_1429, cbModelParam._m0[22u].z, fma(_1425, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1421)) + cbModelParam._m0[22u].w;
        float _2325 = fma(_1429, cbModelParam._m0[23u].z, fma(_1425, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1421)) + cbModelParam._m0[23u].w;
        float _2328 = fma(_1367, cbModelParam._m0[21u].z, fma(_1366, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1365));
        float _2331 = fma(_1367, cbModelParam._m0[22u].z, fma(_1366, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1365));
        float _2334 = fma(_1367, cbModelParam._m0[23u].z, fma(_1366, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1365));
        float _2443;
        if (_2328 > 0.0)
        {
            _2443 = abs((1.0 - _2317) / _2328);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2328 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2317 + 1.0) / _2328);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2443 = frontier_phi_25_21_ladder;
        }
        float _2760;
        if (_2331 > 0.0)
        {
            _2760 = abs((1.0 - _2321) / _2331);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2331 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2321 + 1.0) / _2331);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2760 = frontier_phi_37_32_ladder;
        }
        float _3098;
        if (_2334 > 0.0)
        {
            _3098 = abs((1.0 - _2325) / _2334);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2334 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2325 + 1.0) / _2334);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3098 = frontier_phi_47_44_ladder;
        }
        float _3100 = isnan(_2760) ? _2443 : (isnan(_2443) ? _2760 : min(_2443, _2760));
        float _3101 = isnan(_3098) ? _3100 : (isnan(_3100) ? _3098 : min(_3100, _3098));
        float _3105 = (_3101 * _2328) + _2317;
        float _3106 = (_3101 * _2331) + _2321;
        float _3107 = (_3101 * _2334) + _2325;
        float _3108 = _3101 * 9.9999997473787516355514526367188e-05;
        float _3109 = (-1.0) - _3108;
        float _3111 = _3108 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3107 > _3111) || ((_3107 < _3109) || ((_3106 > _3111) || ((_3106 < _3109) || ((_3105 < _3109) || (_3105 > _3111))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3229 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3107, cbModelParam._m0[17u].z, fma(_3106, cbModelParam._m0[17u].y, _3105 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3107, cbModelParam._m0[18u].z, fma(_3106, cbModelParam._m0[18u].y, _3105 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3107, cbModelParam._m0[19u].z, fma(_3106, cbModelParam._m0[19u].y, _3105 * cbModelParam._m0[19u].x))), _2263);
            frontier_phi_22_47_ladder = _3229.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3229.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3229.x * cbModelParam._m0[1u].z;
        }
        _2353 = frontier_phi_22_47_ladder_2;
        _2355 = frontier_phi_22_47_ladder_1;
        _2357 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1365, _1366, _1367), _2263);
        _2353 = _2337.x * cbModelParam._m0[1u].z;
        _2355 = _2337.y * cbModelParam._m0[1u].z;
        _2357 = _2337.z * cbModelParam._m0[1u].z;
    }
    float _2370 = (((_1392 * _1341) + _1393) * _1357) * ((cbModelParam._m0[1u].w * (_2353 - _2254)) + _2254);
    float _2372 = (((_1392 * _1343) + _1393) * _1357) * ((cbModelParam._m0[1u].w * (_2355 - _2256)) + _2256);
    float _2374 = (((_1392 * _1344) + _1393) * _1357) * ((cbModelParam._m0[1u].w * (_2357 - _2258)) + _2258);
    float _2377 = fma(_2374, cbSceneParam._m0[89u].z, fma(_2372, cbSceneParam._m0[89u].y, _2370 * cbSceneParam._m0[89u].x));
    float _2380 = fma(_2374, cbSceneParam._m0[90u].z, fma(_2372, cbSceneParam._m0[90u].y, _2370 * cbSceneParam._m0[90u].x));
    float _2383 = fma(_2374, cbSceneParam._m0[91u].z, fma(_2372, cbSceneParam._m0[91u].y, _2370 * cbSceneParam._m0[91u].x));
    float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2421 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2430 = _2417 / _2429;
    float _2431 = _2421 / _2429;
    float _2432 = _2425 / _2429;
    float _2579;
    float _2580;
    float _2581;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2459 = ((uint(_2432 > cbSceneParam._m0[59u].y) + uint(_2432 > cbSceneParam._m0[59u].x)) + uint(_2432 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2460 = _2459 + 43u;
        uint _2468 = _2459 + 44u;
        uint _2476 = _2459 + 45u;
        uint _2484 = _2459 + 46u;
        float _2495 = fma(_2429, cbSceneParam._m0[_2460].w, fma(_2425, cbSceneParam._m0[_2460].z, fma(_2421, cbSceneParam._m0[_2460].y, _2417 * cbSceneParam._m0[_2460].x)));
        float _2499 = fma(_2429, cbSceneParam._m0[_2468].w, fma(_2425, cbSceneParam._m0[_2468].z, fma(_2421, cbSceneParam._m0[_2468].y, _2417 * cbSceneParam._m0[_2468].x)));
        float _2507 = fma(_2429, cbSceneParam._m0[_2484].w, fma(_2425, cbSceneParam._m0[_2484].z, fma(_2421, cbSceneParam._m0[_2484].y, _2417 * cbSceneParam._m0[_2484].x)));
        float _2512 = cbSceneParam._m0[33u].z * _2507;
        float _2514 = cbSceneParam._m0[33u].w * _2507;
        float _2517 = fma(_2429, cbSceneParam._m0[_2476].w, fma(_2425, cbSceneParam._m0[_2476].z, fma(_2421, cbSceneParam._m0[_2476].y, _2417 * cbSceneParam._m0[_2476].x))) / _2507;
        float _2565 = (cbSceneParam._m0[33u].x - sqrt(((_2431 * _2431) + (_2430 * _2430)) + (_2432 * _2432))) * cbSceneParam._m0[33u].y;
        float _4936 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2572 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2512 + _2495) / _2507, (_2514 + _2499) / _2507), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2514 + _2495) / _2507, (_2499 - _2512) / _2507), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2495 - _2512) / _2507, (_2499 - _2514) / _2507), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2495 - _2514) / _2507, (_2512 + _2499) / _2507), _2517), 0.0)).x), vec4(0.25)));
        _2579 = 1.0 - (_2572 * cbSceneParam._m0[34u].x);
        _2580 = 1.0 - (_2572 * cbSceneParam._m0[34u].y);
        _2581 = 1.0 - (_2572 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2579 = 1.0;
        _2580 = 1.0;
        _2581 = 1.0;
    }
    float _2645;
    float _2647;
    float _2649;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2633 = fma(_2429, cbSceneParam._m0[63u].w, fma(_2425, cbSceneParam._m0[63u].z, fma(_2421, cbSceneParam._m0[63u].y, _2417 * cbSceneParam._m0[63u].x)));
        float _2634 = fma(_2429, cbSceneParam._m0[60u].w, fma(_2425, cbSceneParam._m0[60u].z, fma(_2421, cbSceneParam._m0[60u].y, _2417 * cbSceneParam._m0[60u].x))) / _2633;
        float _2635 = fma(_2429, cbSceneParam._m0[61u].w, fma(_2425, cbSceneParam._m0[61u].z, fma(_2421, cbSceneParam._m0[61u].y, _2417 * cbSceneParam._m0[61u].x))) / _2633;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2634 >= cbSceneParam._m0[64u].x) && (_2635 >= cbSceneParam._m0[64u].y)) && (_2634 <= cbSceneParam._m0[64u].z)) && (_2635 <= cbSceneParam._m0[64u].w))
        {
            float _2773 = fma(_2429, cbSceneParam._m0[62u].w, fma(_2425, cbSceneParam._m0[62u].z, fma(_2421, cbSceneParam._m0[62u].y, _2417 * cbSceneParam._m0[62u].x))) / _2633;
            float _2777 = isnan(cbSceneParam._m0[41u].w) ? _2773 : (isnan(_2773) ? cbSceneParam._m0[41u].w : max(_2773, cbSceneParam._m0[41u].w));
            float _2820 = (cbSceneParam._m0[33u].x - sqrt(((_2431 * _2431) + (_2430 * _2430)) + (_2432 * _2432))) * cbSceneParam._m0[33u].y;
            float _4952 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
            float _2827 = (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2634, cbSceneParam._m0[33u].w + _2635), _2777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2634, _2635 - cbSceneParam._m0[33u].z), _2777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2634 - cbSceneParam._m0[33u].z, _2635 - cbSceneParam._m0[33u].w), _2777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2634 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2635), _2777), 0.0)).x), vec4(0.25)));
            float _2831 = 1.0 - (_2827 * cbSceneParam._m0[34u].x);
            float _2832 = 1.0 - (_2827 * cbSceneParam._m0[34u].y);
            float _2833 = 1.0 - (_2827 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2833) ? _2581 : (isnan(_2581) ? _2833 : min(_2581, _2833));
            frontier_phi_34_33_ladder_1 = isnan(_2832) ? _2580 : (isnan(_2580) ? _2832 : min(_2580, _2832));
            frontier_phi_34_33_ladder_2 = isnan(_2831) ? _2579 : (isnan(_2579) ? _2831 : min(_2579, _2831));
        }
        else
        {
            frontier_phi_34_33_ladder = _2581;
            frontier_phi_34_33_ladder_1 = _2580;
            frontier_phi_34_33_ladder_2 = _2579;
        }
        _2645 = frontier_phi_34_33_ladder_2;
        _2647 = frontier_phi_34_33_ladder_1;
        _2649 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2645 = _2579;
        _2647 = _2580;
        _2649 = _2581;
    }
    uvec4 _2654 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2656 = _2654.x * 14u;
    uint _2657 = _2656 + 13u;
    float _2664 = _1357 + (-1.0);
    float _2669 = (cbLight._m0[_2657].x * _2664) + 1.0;
    float _2670 = (cbLight._m0[_2657].y * _2664) + 1.0;
    float _2671 = (cbLight._m0[_2657].z * _2664) + 1.0;
    float _2672 = (cbLight._m0[_2657].w * _2664) + 1.0;
    uint _2673 = _2656 + 5u;
    float _2679 = isnan(1.0) ? _2670 : (isnan(_2670) ? 1.0 : min(_2670, 1.0));
    uint _2683 = _2656 + 4u;
    float _2692 = isnan(1.0) ? _2669 : (isnan(_2669) ? 1.0 : min(_2669, 1.0));
    uint _2696 = _2656 | 1u;
    float _2707 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_1192, _1193, _1194));
    float _2710 = dot(vec3(cbLight._m0[_2696].xyz), vec3(_1192, _1193, _1194));
    float _4988 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _4999 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2715 = (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * 0.3183098733425140380859375;
    float _2717 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * 0.3183098733425140380859375;
    float _2724 = ((cbLight._m0[_2673].x * _2679) * _2717) + (((cbLight._m0[_2683].x * _2645) * _2692) * _2715);
    float _2725 = ((_2679 * cbLight._m0[_2673].y) * _2717) + (((cbLight._m0[_2683].y * _2647) * _2692) * _2715);
    float _2726 = ((_2679 * cbLight._m0[_2673].z) * _2717) + (((cbLight._m0[_2683].z * _2649) * _2692) * _2715);
    uvec4 _2730 = floatBitsToUint(cbLight._m0[_2656 + 12u]);
    bool _2732 = _2730.x == 0u;
    float _2834;
    float _2836;
    float _2838;
    if (_2732)
    {
        _2834 = _2724;
        _2836 = _2725;
        _2838 = _2726;
    }
    else
    {
        uint _2842 = _2656 + 6u;
        float _2858 = (dot(vec3(cbLight._m0[_2656 + 2u].xyz), vec3(_1192, _1193, _1194)) * 0.5) + 0.5;
        float _2859 = _2858 * _2858;
        float _5010 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2860 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _2861 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
        _2834 = (((cbLight._m0[_2842].x * 0.3183098733425140380859375) * _2860) * _2861) + _2724;
        _2836 = (((cbLight._m0[_2842].y * 0.3183098733425140380859375) * _2860) * _2861) + _2725;
        _2838 = (((cbLight._m0[_2842].z * 0.3183098733425140380859375) * _2860) * _2861) + _2726;
    }
    bool _2841 = _2730.y == 0u;
    float _2896;
    float _2898;
    float _2900;
    if (_2841)
    {
        _2896 = _2834;
        _2898 = _2836;
        _2900 = _2838;
    }
    else
    {
        uint _3069 = _2656 + 7u;
        float _3085 = (dot(vec3(cbLight._m0[_2656 + 3u].xyz), vec3(_1192, _1193, _1194)) * 0.5) + 0.5;
        float _3086 = _3085 * _3085;
        float _5026 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3087 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
        float _3088 = isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0));
        _2896 = (((cbLight._m0[_3069].x * 0.3183098733425140380859375) * _3087) * _3088) + _2834;
        _2898 = (((cbLight._m0[_3069].y * 0.3183098733425140380859375) * _3087) * _3088) + _2836;
        _2900 = (((cbLight._m0[_3069].z * 0.3183098733425140380859375) * _3087) * _3088) + _2838;
    }
    uint _2903 = _2656 + 8u;
    float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _1195) * 0.949999988079071044921875);
    float _2917 = _2916 * _2916;
    float _2918 = cbLight._m0[_2656].x + _1271;
    float _2919 = cbLight._m0[_2656].y + _1272;
    float _2920 = cbLight._m0[_2656].z + _1273;
    float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
    float _2925 = _2924 * _2918;
    float _2926 = _2924 * _2919;
    float _2927 = _2924 * _2920;
    float _2928 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_2656].xyz));
    float _5042 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
    float _2931 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
    float _5053 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
    float _2932 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
    float _2933 = dot(vec3(_1192, _1193, _1194), vec3(_2925, _2926, _2927));
    float _5064 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
    float _2936 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
    float _2937 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2925, _2926, _2927));
    float _5075 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
    float _2941 = _2917 * _2917;
    float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
    float _2953 = exp2(log2(1.0 - (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) * 5.0);
    float _2954 = 0.959999978542327880859375 - _1338;
    float _2956 = 0.959999978542327880859375 - _1339;
    float _2957 = 0.959999978542327880859375 - _1340;
    float _2964 = 1.0 - _2917;
    float _2975 = (0.5 / (((_2932 * ((_2931 * _2964) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _2964) + _2917) * _2931))) * _2931;
    float _5086 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
    float _2977 = (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
    uint _2991 = _2656 + 9u;
    float _3002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2696].w)) * _1195) * 0.949999988079071044921875);
    float _3003 = _3002 * _3002;
    float _3004 = cbLight._m0[_2696].x + _1271;
    float _3005 = cbLight._m0[_2696].y + _1272;
    float _3006 = cbLight._m0[_2696].z + _1273;
    float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
    float _3011 = _3010 * _3004;
    float _3012 = _3010 * _3005;
    float _3013 = _3010 * _3006;
    float _3014 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_2696].xyz));
    float _5097 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
    float _3017 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
    float _3018 = dot(vec3(_1192, _1193, _1194), vec3(_3011, _3012, _3013));
    float _5108 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
    float _3021 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
    float _3022 = dot(vec3(cbLight._m0[_2696].xyz), vec3(_3011, _3012, _3013));
    float _5119 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
    float _3026 = _3003 * _3003;
    float _3030 = ((_3021 * _3021) * (_3026 + (-1.0))) + 1.0;
    float _3037 = exp2(log2(1.0 - (isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0)))) * 5.0);
    float _3044 = 1.0 - _3003;
    float _3054 = (0.5 / (((_2932 * ((_3017 * _3044) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _3044) + _3003) * _3017))) * _3017;
    float _5130 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
    float _3056 = (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0))) * (_3026 / ((_3030 * _3030) * 3.141590118408203125));
    float _3066 = (((((_3037 * _2954) + _1341) * cbLight._m0[_2991].x) * _3056) * _2679) + ((((cbLight._m0[_2903].x * _2645) * ((_2953 * _2954) + _1341)) * _2977) * _2692);
    float _3067 = (((((_3037 * _2956) + _1343) * cbLight._m0[_2991].y) * _3056) * _2679) + ((((cbLight._m0[_2903].y * _2647) * ((_2953 * _2956) + _1343)) * _2977) * _2692);
    float _3068 = (((((_3037 * _2957) + _1344) * cbLight._m0[_2991].z) * _3056) * _2679) + ((((cbLight._m0[_2903].z * _2649) * ((_2953 * _2957) + _1344)) * _2977) * _2692);
    float _3124;
    float _3126;
    float _3128;
    if (_2732)
    {
        _3124 = _3066;
        _3126 = _3067;
        _3128 = _3068;
    }
    else
    {
        uint _3130 = _2656 + 2u;
        uint _3134 = _2656 + 10u;
        float _3148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3130].w)) * _1195) * 0.949999988079071044921875);
        float _3149 = _3148 * _3148;
        float _3150 = cbLight._m0[_3130].x + _1271;
        float _3151 = cbLight._m0[_3130].y + _1272;
        float _3152 = cbLight._m0[_3130].z + _1273;
        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
        float _3157 = _3156 * _3150;
        float _3158 = _3156 * _3151;
        float _3159 = _3156 * _3152;
        float _3160 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_3130].xyz));
        float _5141 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
        float _3163 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
        float _3164 = dot(vec3(_1192, _1193, _1194), vec3(_3157, _3158, _3159));
        float _5152 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
        float _3167 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
        float _3168 = dot(vec3(cbLight._m0[_3130].xyz), vec3(_3157, _3158, _3159));
        float _5163 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3172 = _3149 * _3149;
        float _3176 = ((_3167 * _3167) * (_3172 + (-1.0))) + 1.0;
        float _3183 = exp2(log2(1.0 - (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) * 5.0);
        float _3190 = 1.0 - _3149;
        float _3200 = (0.5 / (((_2932 * ((_3163 * _3190) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _3190) + _3149) * _3163))) * _3163;
        float _5174 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
        float _3202 = (isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0))) * (_3172 / ((_3176 * _3176) * 3.141590118408203125));
        float _3203 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
        _3124 = (((((_3183 * _2954) + _1341) * cbLight._m0[_3134].x) * _3202) * _3203) + _3066;
        _3126 = (((((_3183 * _2956) + _1343) * cbLight._m0[_3134].y) * _3202) * _3203) + _3067;
        _3128 = (((((_3183 * _2957) + _1344) * cbLight._m0[_3134].z) * _3202) * _3203) + _3068;
    }
    float _3234;
    float _3236;
    float _3238;
    if (_2841)
    {
        _3234 = _3124;
        _3236 = _3126;
        _3238 = _3128;
    }
    else
    {
        uint _3245 = _2656 + 3u;
        uint _3249 = _2656 + 11u;
        float _3263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3245].w)) * _1195) * 0.949999988079071044921875);
        float _3264 = _3263 * _3263;
        float _3265 = cbLight._m0[_3245].x + _1271;
        float _3266 = cbLight._m0[_3245].y + _1272;
        float _3267 = cbLight._m0[_3245].z + _1273;
        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
        float _3272 = _3271 * _3265;
        float _3273 = _3271 * _3266;
        float _3274 = _3271 * _3267;
        float _3275 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_3245].xyz));
        float _5190 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
        float _3278 = isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0));
        float _3279 = dot(vec3(_1192, _1193, _1194), vec3(_3272, _3273, _3274));
        float _5201 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
        float _3282 = isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0));
        float _3283 = dot(vec3(cbLight._m0[_3245].xyz), vec3(_3272, _3273, _3274));
        float _5212 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
        float _3287 = _3264 * _3264;
        float _3291 = ((_3282 * _3282) * (_3287 + (-1.0))) + 1.0;
        float _3298 = exp2(log2(1.0 - (isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0)))) * 5.0);
        float _3305 = 1.0 - _3264;
        float _3315 = (0.5 / (((_2932 * ((_3278 * _3305) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _3305) + _3264) * _3278))) * _3278;
        float _5223 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
        float _3317 = (isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * (_3287 / ((_3291 * _3291) * 3.141590118408203125));
        float _3318 = isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0));
        _3234 = (((((_3298 * _2954) + _1341) * cbLight._m0[_3249].x) * _3317) * _3318) + _3124;
        _3236 = (((((_3298 * _2956) + _1343) * cbLight._m0[_3249].y) * _3317) * _3318) + _3126;
        _3238 = (((((_3298 * _2957) + _1344) * cbLight._m0[_3249].z) * _3317) * _3318) + _3128;
    }
    float _3384;
    float _3386;
    float _3388;
    float _3390;
    float _3392;
    float _3394;
    if (_2654.y == 0u)
    {
        uvec4 _3339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3340 = _3339.x;
        uint _3351 = uint((float(_3339.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1280) / _3340))) + floor(float(uint(cbSceneParam._m0[85u].x * _1279) / _3340)));
        float _3361 = (log2(_2432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3362 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
        uint _3365 = uint(isnan(14.0) ? _3362 : (isnan(_3362) ? 14.0 : min(_3362, 14.0)));
        uvec4 _3370 = texelFetch(g_lightClusterGridBuffer, int(((_3365 << 2u) + (_3351 << 6u)) >> 2u));
        uint _3371 = _3370.x;
        uint _3372 = _3339.z;
        float _3451;
        float _3453;
        float _3455;
        float _3457;
        float _3459;
        float _3461;
        if (((((1u << ((_3372 >> 4u) & 15u)) + 4294967295u) & _3371) == 0u) || ((_3372 & 240u) == 0u))
        {
            _3451 = 0.0;
            _3453 = 0.0;
            _3455 = 0.0;
            _3457 = 0.0;
            _3459 = 0.0;
            _3461 = 0.0;
        }
        else
        {
            float _3452;
            float _3454;
            float _3456;
            float _3458;
            float _3460;
            float _3462;
            float _3595 = 0.0;
            float _3596 = 0.0;
            float _3597 = 0.0;
            float _3598 = 0.0;
            float _3599 = 0.0;
            float _3600 = 0.0;
            uint _3601 = 0u;
            uint _3610;
            bool _3611;
            for (;;)
            {
                _3610 = texelFetch(g_lightClassification, int((((_3365 << 5u) + (_3351 << 9u)) + (_3601 << 2u)) >> 2u)).x;
                _3611 = _3610 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3611)
                {
                    frontier_phi_66_pred = _3600;
                    frontier_phi_66_pred_1 = _3599;
                    frontier_phi_66_pred_2 = _3598;
                    frontier_phi_66_pred_3 = _3597;
                    frontier_phi_66_pred_4 = _3596;
                    frontier_phi_66_pred_5 = _3595;
                }
                else
                {
                    float _3719;
                    float _3720;
                    float _3721;
                    float _3722;
                    float _3723;
                    float _3724;
                    uint _3725;
                    _3719 = _3595;
                    _3720 = _3596;
                    _3721 = _3597;
                    _3722 = _3598;
                    _3723 = _3599;
                    _3724 = _3600;
                    _3725 = _3610;
                    float _3651;
                    float _3652;
                    float _3653;
                    float _3654;
                    float _3655;
                    float _3656;
                    for (;;)
                    {
                        uint _3729 = uint(findLSB(_3725)) + (_3601 << 5u);
                        uint _3726 = (_3725 + 4294967295u) & _3725;
                        uint _3731 = _3729 * 48u;
                        vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3731)).x, texelFetch(g_PointLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3731 + 3u)).x));
                        uint _3751 = (_3729 * 48u) + 4u;
                        vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3751)).x, texelFetch(g_PointLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3751 + 3u)).x));
                        uint _3770 = (_3729 * 48u) + 8u;
                        vec3 _3781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3770)).x, texelFetch(g_PointLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3770 + 2u)).x));
                        float _3785 = _3745.x - _2430;
                        float _3786 = _3745.y - _2431;
                        float _3787 = _3745.z - _2432;
                        float _3788 = dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787));
                        float _3791 = inversesqrt(_3788);
                        float _3792 = _3791 * _3785;
                        float _3793 = _3791 * _3786;
                        float _3794 = _3791 * _3787;
                        float _3795 = dot(vec3(_1298, _1301, _1304), vec3(_3792, _3793, _3794));
                        float _3800 = 1.0 - (_3788 * _3745.w);
                        float _5249 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                        float _3801 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                        float _3802 = sqrt(_3788) * _3764.w;
                        float _3805 = 1.39999997615814208984375 / (_3802 + 1.39999997615814208984375);
                        float _3806 = _3805 * _3805;
                        float _3809 = ((1.0 - _3806) * _3795) + _3806;
                        float _3812 = _3802 * _3802;
                        float _3816 = ((isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0))) * _3801) / ((_3812 * 0.699999988079071044921875) + 1.0);
                        float _3820 = (-0.0) - _2430;
                        float _3821 = (-0.0) - _2431;
                        float _3822 = (-0.0) - _2432;
                        float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                        float _3827 = _3826 * _3820;
                        float _3828 = _3826 * _3821;
                        float _3829 = _3826 * _3822;
                        float _3836 = exp2(log2(1.0 / ((_3812 * 3.5) + 5.0)) * 0.25);
                        float _3837 = 1.0 - _1373;
                        float _3844 = sqrt(1.0 - ((1.0 - (_3837 * _3837)) * (1.0 - (_3836 * _3836))));
                        float _3845 = _3844 * _3844;
                        float _3846 = _3845 * _3845;
                        float _3847 = _3827 + _3792;
                        float _3848 = _3828 + _3793;
                        float _3849 = _3829 + _3794;
                        float _3853 = inversesqrt(dot(vec3(_3847, _3848, _3849), vec3(_3847, _3848, _3849)));
                        float _3857 = dot(vec3(_1298, _1301, _1304), vec3(_3827, _3828, _3829));
                        float _5265 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                        float _3860 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
                        float _3861 = dot(vec3(_1298, _1301, _1304), vec3(_3853 * _3847, _3853 * _3848, _3853 * _3849));
                        float _5276 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                        float _3864 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                        float _3868 = ((_3864 * _3864) * (_3846 + (-1.0))) + 1.0;
                        float _3869 = _3805 * _3845;
                        float _3870 = _3869 * _3869;
                        float _3873 = ((1.0 - _3870) * _3795) + _3870;
                        float _5287 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                        float _3874 = isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0));
                        float _3875 = 1.0 - _3845;
                        float _3885 = (0.5 / (((_3874 * ((_3860 * _3875) + _3845)) + 9.9999999392252902907785028219223e-09) + (((_3874 * _3875) + _3845) * _3860))) * _3874;
                        float _5298 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                        float _3896 = (((_3846 * 3.1415927410125732421875) * (isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0)))) / ((_3868 * _3868) * ((_3812 * 2.1991131305694580078125) + 3.141590118408203125))) * _3801;
                        _3654 = (_3816 * _3764.x) + _3722;
                        _3655 = (_3816 * _3764.y) + _3723;
                        _3656 = (_3816 * _3764.z) + _3724;
                        _3651 = (_3896 * _3781.x) + _3719;
                        _3652 = (_3896 * _3781.y) + _3720;
                        _3653 = (_3896 * _3781.z) + _3721;
                        if (_3726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3719 = _3651;
                            _3720 = _3652;
                            _3721 = _3653;
                            _3722 = _3654;
                            _3723 = _3655;
                            _3724 = _3656;
                            _3725 = _3726;
                        }
                    }
                    frontier_phi_66_pred = _3656;
                    frontier_phi_66_pred_1 = _3655;
                    frontier_phi_66_pred_2 = _3654;
                    frontier_phi_66_pred_3 = _3653;
                    frontier_phi_66_pred_4 = _3652;
                    frontier_phi_66_pred_5 = _3651;
                }
                _3462 = frontier_phi_66_pred;
                _3460 = frontier_phi_66_pred_1;
                _3458 = frontier_phi_66_pred_2;
                _3456 = frontier_phi_66_pred_3;
                _3454 = frontier_phi_66_pred_4;
                _3452 = frontier_phi_66_pred_5;
                uint _3602 = _3601 + 1u;
                if (_3602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3595 = _3452;
                    _3596 = _3454;
                    _3597 = _3456;
                    _3598 = _3458;
                    _3599 = _3460;
                    _3600 = _3462;
                    _3601 = _3602;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3451 = _3452;
            _3453 = _3454;
            _3455 = _3456;
            _3457 = _3458;
            _3459 = _3460;
            _3461 = _3462;
        }
        uvec4 _3465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3466 = _3465.z;
        uint _3468 = (_3466 >> 8u) & 15u;
        float _3563;
        float _3565;
        float _3567;
        float _3569;
        float _3571;
        float _3573;
        if (((4294967295u << _3468) & _3371) == 0u)
        {
            _3563 = _3451;
            _3565 = _3453;
            _3567 = _3455;
            _3569 = _3457;
            _3571 = _3459;
            _3573 = _3461;
        }
        else
        {
            float _3588 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
            float _3589 = _3588 * _2430;
            float _3590 = _3588 * _2431;
            float _3591 = _3588 * _2432;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3468 < ((_3466 >> 12u) & 15u))
            {
                float _3564;
                float _3566;
                float _3568;
                float _3570;
                float _3572;
                float _3574;
                float _3702 = _3451;
                float _3703 = _3453;
                float _3704 = _3455;
                float _3705 = _3457;
                float _3706 = _3459;
                float _3707 = _3461;
                uint _3708 = _3468;
                uint _3717;
                bool _3718;
                for (;;)
                {
                    _3717 = texelFetch(g_lightClassification, int((((_3365 << 5u) + (_3351 << 9u)) + (_3708 << 2u)) >> 2u)).x;
                    _3718 = _3717 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3718)
                    {
                        frontier_phi_72_pred = _3707;
                        frontier_phi_72_pred_1 = _3706;
                        frontier_phi_72_pred_2 = _3705;
                        frontier_phi_72_pred_3 = _3704;
                        frontier_phi_72_pred_4 = _3703;
                        frontier_phi_72_pred_5 = _3702;
                    }
                    else
                    {
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _4194;
                        float _4195;
                        float _4196;
                        float _4197;
                        float _4198;
                        float _4199;
                        float _3914 = _3702;
                        float _3915 = _3703;
                        float _3916 = _3704;
                        float _3917 = _3705;
                        float _3918 = _3706;
                        float _3919 = _3707;
                        uint _3920 = _3717;
                        uint _3921;
                        vec4 _3946;
                        float _3947;
                        vec4 _3962;
                        vec3 _3974;
                        vec4 _3989;
                        vec4 _4004;
                        float _4050;
                        bool _4051;
                        for (;;)
                        {
                            uint _3931 = ((_3708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3920));
                            _3921 = (_3920 + 4294967295u) & _3920;
                            uint _3933 = _3931 * 40u;
                            _3946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 3u)).x));
                            _3947 = _3946.w;
                            uint _3949 = (_3931 * 40u) + 4u;
                            _3962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3949 + 3u)).x));
                            uint _3964 = (_3931 * 40u) + 8u;
                            _3974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 2u)).x));
                            uint _3976 = (_3931 * 40u) + 16u;
                            _3989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3976 + 3u)).x));
                            uint _3991 = (_3931 * 40u) + 20u;
                            _4004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3991 + 3u)).x));
                            uint _4006 = (_3931 * 40u) + 24u;
                            vec4 _4019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4006 + 3u)).x));
                            uint _4025 = (_3931 * 40u) + 28u;
                            vec4 _4038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 3u)).x));
                            _4050 = fma(_2432, _4038.z, fma(_2431, _4038.y, _4038.x * _2430)) + _4038.w;
                            _4051 = !((fma(_2432, _4019.z, fma(_2431, _4019.y, _4019.x * _2430)) + _4019.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_4051)
                            {
                                float _4078 = _3946.x - _2430;
                                float _4079 = _3946.y - _2431;
                                float _4080 = _3946.z - _2432;
                                float _4081 = dot(vec3(_4078, _4079, _4080), vec3(_4078, _4079, _4080));
                                float _4084 = inversesqrt(_4081);
                                float _4085 = _4084 * _4078;
                                float _4086 = _4084 * _4079;
                                float _4087 = _4084 * _4080;
                                float _4091 = 1.0 - (_4081 / (_3947 * _3947));
                                float _5309 = isnan(0.0) ? _4091 : (isnan(_4091) ? 0.0 : max(_4091, 0.0));
                                float _4092 = isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0));
                                float _4096 = sqrt(_4081) * _3962.w;
                                float _4098 = 1.39999997615814208984375 / (_4096 + 1.39999997615814208984375);
                                float _4099 = _4098 * _4098;
                                float _4102 = ((1.0 - _4099) * dot(vec3(_4085, _4086, _4087), vec3(_1298, _1301, _1304))) + _4099;
                                float _4105 = _4096 * _4096;
                                float _4109 = (fma(_2432, _3989.z, fma(_2431, _3989.y, _3989.x * _2430)) + _3989.w) / _4050;
                                float _4110 = (fma(_2432, _4004.z, fma(_2431, _4004.y, _4004.x * _2430)) + _4004.w) / _4050;
                                float _4114 = 1.0 - dot(vec2(_4109, _4110), vec2(_4109, _4110));
                                float _5325 = isnan(0.0) ? _4114 : (isnan(_4114) ? 0.0 : max(_4114, 0.0));
                                float _4115 = isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0));
                                float _4116 = _4115 * (((isnan(0.0) ? _4102 : (isnan(_4102) ? 0.0 : max(_4102, 0.0))) * _4092) / ((_4105 * 0.699999988079071044921875) + 1.0));
                                float _4128 = exp2(log2(1.0 / ((_4105 * 3.5) + 5.0)) * 0.25);
                                float _4129 = 1.0 - _1373;
                                float _4136 = sqrt(1.0 - ((1.0 - (_4129 * _4129)) * (1.0 - (_4128 * _4128))));
                                float _4137 = _4136 * _4136;
                                float _4138 = _4137 * _4137;
                                float _4139 = _4085 - _3589;
                                float _4140 = _4086 - _3590;
                                float _4141 = _4087 - _3591;
                                float _4145 = inversesqrt(dot(vec3(_4139, _4140, _4141), vec3(_4139, _4140, _4141)));
                                float _4149 = dot(vec3(_1298, _1301, _1304), vec3((-0.0) - _3589, (-0.0) - _3590, (-0.0) - _3591));
                                float _5336 = isnan(0.0) ? _4149 : (isnan(_4149) ? 0.0 : max(_4149, 0.0));
                                float _4152 = isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0));
                                float _4153 = dot(vec3(_1298, _1301, _1304), vec3(_4145 * _4139, _4145 * _4140, _4145 * _4141));
                                float _5347 = isnan(0.0) ? _4153 : (isnan(_4153) ? 0.0 : max(_4153, 0.0));
                                float _4156 = isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0));
                                float _4160 = ((_4156 * _4156) * (_4138 + (-1.0))) + 1.0;
                                float _4161 = _4098 * _4137;
                                float _4162 = _4161 * _4161;
                                float _4168 = ((1.0 - _4162) * dot(vec3(_1298, _1301, _1304), vec3(_4085, _4086, _4087))) + _4162;
                                float _5358 = isnan(0.0) ? _4168 : (isnan(_4168) ? 0.0 : max(_4168, 0.0));
                                float _4169 = isnan(1.0) ? _5358 : (isnan(_5358) ? 1.0 : min(_5358, 1.0));
                                float _4170 = 1.0 - _4137;
                                float _4180 = (0.5 / (((_4169 * ((_4152 * _4170) + _4137)) + 9.9999999392252902907785028219223e-09) + (((_4169 * _4170) + _4137) * _4152))) * _4169;
                                float _5369 = isnan(0.0) ? _4180 : (isnan(_4180) ? 0.0 : max(_4180, 0.0));
                                float _4190 = (_4115 * _4092) * (((_4138 * 3.1415927410125732421875) * (isnan(1.0) ? _5369 : (isnan(_5369) ? 1.0 : min(_5369, 1.0)))) / ((_4160 * _4160) * ((_4105 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4116 * _3962.y;
                                frontier_phi_78_pred_1 = _4116 * _3962.x;
                                frontier_phi_78_pred_2 = _4190 * _3974.z;
                                frontier_phi_78_pred_3 = _4190 * _3974.y;
                                frontier_phi_78_pred_4 = _4190 * _3974.x;
                                frontier_phi_78_pred_5 = _4116 * _3962.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4198 = frontier_phi_78_pred;
                            _4197 = frontier_phi_78_pred_1;
                            _4196 = frontier_phi_78_pred_2;
                            _4195 = frontier_phi_78_pred_3;
                            _4194 = frontier_phi_78_pred_4;
                            _4199 = frontier_phi_78_pred_5;
                            _3904 = _4197 + _3917;
                            _3905 = _4198 + _3918;
                            _3906 = _4199 + _3919;
                            _3901 = _4194 + _3914;
                            _3902 = _4195 + _3915;
                            _3903 = _4196 + _3916;
                            if (_3921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3914 = _3901;
                                _3915 = _3902;
                                _3916 = _3903;
                                _3917 = _3904;
                                _3918 = _3905;
                                _3919 = _3906;
                                _3920 = _3921;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3906;
                        frontier_phi_72_pred_1 = _3905;
                        frontier_phi_72_pred_2 = _3904;
                        frontier_phi_72_pred_3 = _3903;
                        frontier_phi_72_pred_4 = _3902;
                        frontier_phi_72_pred_5 = _3901;
                    }
                    _3574 = frontier_phi_72_pred;
                    _3572 = frontier_phi_72_pred_1;
                    _3570 = frontier_phi_72_pred_2;
                    _3568 = frontier_phi_72_pred_3;
                    _3566 = frontier_phi_72_pred_4;
                    _3564 = frontier_phi_72_pred_5;
                    uint _3709 = _3708 + 1u;
                    if (_3709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3702 = _3564;
                        _3703 = _3566;
                        _3704 = _3568;
                        _3705 = _3570;
                        _3706 = _3572;
                        _3707 = _3574;
                        _3708 = _3709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3574;
                frontier_phi_60_61_ladder_1 = _3572;
                frontier_phi_60_61_ladder_2 = _3568;
                frontier_phi_60_61_ladder_3 = _3566;
                frontier_phi_60_61_ladder_4 = _3564;
                frontier_phi_60_61_ladder_5 = _3570;
            }
            else
            {
                frontier_phi_60_61_ladder = _3461;
                frontier_phi_60_61_ladder_1 = _3459;
                frontier_phi_60_61_ladder_2 = _3455;
                frontier_phi_60_61_ladder_3 = _3453;
                frontier_phi_60_61_ladder_4 = _3451;
                frontier_phi_60_61_ladder_5 = _3457;
            }
            _3563 = frontier_phi_60_61_ladder_4;
            _3565 = frontier_phi_60_61_ladder_3;
            _3567 = frontier_phi_60_61_ladder_2;
            _3569 = frontier_phi_60_61_ladder_5;
            _3571 = frontier_phi_60_61_ladder_1;
            _3573 = frontier_phi_60_61_ladder;
        }
        float _3578 = isnan(1.0) ? _1357 : (isnan(_1357) ? 1.0 : min(_1357, 1.0));
        _3384 = (_3578 * _3569) + _2896;
        _3386 = (_3578 * _3571) + _2898;
        _3388 = (_3578 * _3573) + _2900;
        _3390 = ((_3563 * _1341) * _3578) + _3234;
        _3392 = ((_3565 * _1343) * _3578) + _3236;
        _3394 = ((_3567 * _1344) * _3578) + _3238;
    }
    else
    {
        _3384 = _2896;
        _3386 = _2898;
        _3388 = _2900;
        _3390 = _3234;
        _3392 = _3236;
        _3394 = _3238;
    }
    float _5385 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _5396 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _5407 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    uint _3414 = _301 + 6u;
    float _3422 = _1279 / cbSceneParam._m0[86u].x;
    float _3423 = _1280 / cbSceneParam._m0[86u].y;
    vec4 _3437 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3422, _3423, (log2((isnan(cbSceneParam._m0[77u].w) ? _1214 : (isnan(_1214) ? cbSceneParam._m0[77u].w : min(_1214, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3439 = _3437.x;
    float _3440 = _3437.y;
    float _3441 = _3437.z;
    float _3442 = _3437.w;
    float _3513;
    float _3515;
    float _3517;
    float _3519;
    if (_1214 > cbSceneParam._m0[78u].w)
    {
        float _3476 = isnan(_1214) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1214 : min(cbSceneParam._m0[80u].w, _1214));
        float _3477 = _3476 / _1214;
        float _3488 = _3477 * _1264;
        float _3489 = _1265 * _3477;
        float _3490 = (-0.0) - _3489;
        float _3491 = _3477 * _1266;
        float _3493 = (cbSceneParam._m0[77u].w * _3490) / _3476;
        float _3494 = _3493 + cbSceneParam._m0[79u].w;
        float _3495 = cbSceneParam._m0[79u].w - _3489;
        float _3501 = sqrt(((_3488 * _3488) + (_3489 * _3489)) + (_3491 * _3491));
        float _3504 = (1.0 - (cbSceneParam._m0[77u].w / _3476)) * _3501;
        float _3509 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3511 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3664;
        if (abs((_3490 - _3493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3664 = ((((_3494 > 0.0) ? exp2(_3509 * _3494) : (2.0 - exp2(_3511 * _3494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3504;
        }
        else
        {
            float _3624 = 1.0 / cbSceneParam._m0[80u].x;
            float _3625 = isnan(_3495) ? _3494 : (isnan(_3494) ? _3495 : max(_3494, _3495));
            float _3626 = isnan(_3495) ? _3494 : (isnan(_3494) ? _3495 : min(_3494, _3495));
            float _3635 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : min(_3625, 0.0));
            float _3636 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : min(_3626, 0.0));
            _3664 = ((abs(_3501 / _3490) * cbSceneParam._m0[80u].y) * ((((_3635 - _3636) * 2.0) - ((exp2(_3509 * (isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0)))) - exp2(_3509 * (isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))))) * _3624)) - ((exp2(_3511 * _3635) - exp2(_3511 * _3636)) * _3624))) + (_3504 * cbSceneParam._m0[80u].z);
        }
        vec4 _3666 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3422, _3423, 1.0), 0.0);
        float _3675 = exp2((_3664 * (-1.44269502162933349609375)) * (1.0 - _3666.w));
        float _3676 = log2(_3675);
        float _3692 = log2(_3442);
        _3513 = (exp2(_3692 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3676 * cbSceneParam._m0[78u].x)) * _3666.x) / cbSceneParam._m0[78u].x)) + _3439;
        _3515 = (exp2(_3692 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3676 * cbSceneParam._m0[78u].y)) * _3666.y) / cbSceneParam._m0[78u].y)) + _3440;
        _3517 = (exp2(_3692 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3676 * cbSceneParam._m0[78u].z)) * _3666.z) / cbSceneParam._m0[78u].z)) + _3441;
        _3519 = _3675 * _3442;
    }
    else
    {
        _3513 = _3439;
        _3515 = _3440;
        _3517 = _3441;
        _3519 = _3442;
    }
    float _3531 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3532 = _3531 == 3.0;
    float _3533 = log2(_3519);
    float _3540 = exp2(_3533 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5385 : (isnan(_5385) ? 1.0 : min(_5385, 1.0))) * (_3384 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1357))) + ((_3390 + ((isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0))) * _2163)) * cbPerFrame._m0[3u].x));
    float _3541 = exp2(_3533 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5396 : (isnan(_5396) ? 1.0 : min(_5396, 1.0))) * (_3386 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1357))) + ((_3392 + ((isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))) * _2163)) * cbPerFrame._m0[3u].x));
    float _3542 = exp2(_3533 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5407 : (isnan(_5407) ? 1.0 : min(_5407, 1.0))) * (_3388 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1357))) + ((_3394 + ((isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0))) * _2163)) * cbPerFrame._m0[3u].x));
    float _3551 = (_3531 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3551 * (_3532 ? _3540 : (_3540 + (cbSceneParam._m0[72u].w * _3513)));
    SV_Target.y = _3551 * (_3532 ? _3541 : (_3541 + (cbSceneParam._m0[72u].w * _3515)));
    SV_Target.z = _3551 * (_3532 ? _3542 : (_3542 + (cbSceneParam._m0[72u].w * _3517)));
    SV_Target.w = cbInstanceData._m0[_3414].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3414].w;
}


