#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1352;
float _3758;
float _3759;
float _3760;
float _3761;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[23u].w) + _390) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3770 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _415 = (_408 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _416 = (_408 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _417 = (_408 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _465 = ((_435.z - _456) * _408) + _456;
    float _468 = ((((_435.x - _454) * _408) + _454) * 2.0) + (-1.0);
    float _470 = ((((_435.y - _455) * _408) + _455) * 2.0) + (-1.0);
    float _471 = dot(vec2(_468, _470), vec2(_468, _470));
    float _3781 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _519 = _517.x;
    float _520 = 1.0 - _519;
    float _529 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _532 = ((isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : min(_529, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _541 = (_532 - ((((((_519 - _520) * cbMtdParam._m0[24u].z) + _520) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _532))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3802 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _549 = (_542 * (cbMtdParam._m0[17u].x - _415)) + _415;
    float _550 = (_542 * (cbMtdParam._m0[17u].y - _416)) + _416;
    float _551 = (_542 * (cbMtdParam._m0[17u].z - _417)) + _417;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _591 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_565 - _566) * cbMtdParam._m0[24u].w) + _566) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3813 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _600 = ((((cbMtdParam._m0[10u].x - _549) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _592) + _549;
    float _601 = ((((cbMtdParam._m0[10u].y - _550) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _592) + _550;
    float _602 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _551)) * _592) + _551;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _630 = _628.x;
    float _648 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _630) * _408) + _630;
    float _652 = ((_614.x - _648) * cbMtdParam._m0[19u].z) + _648;
    float _654 = _652 - (_652 * _542);
    float _656 = _654 - (_654 * _592);
    float _660 = (cbMtdParam._m0[19u].w * (_492.z - _465)) + _465;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _681 = (_674.x * 2.0) + (-1.0);
    float _682 = (_674.y * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _3824 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _691 = (_542 * (_674.z - _660)) + _660;
    float _694 = ((cbMtdParam._m0[23u].x - _691) * _592) + _691;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _719 = (_713.x * 2.0) + (-1.0);
    float _720 = (_713.y * 2.0) + (-1.0);
    float _721 = dot(vec2(_719, _720), vec2(_719, _720));
    float _3835 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _729 = (((_492.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _468;
    float _730 = (((_492.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _470;
    float _742 = (((_681 - _729) + (cbMtdParam._m0[21u].x * _729)) * _542) + _729;
    float _743 = (((_682 - _730) + (cbMtdParam._m0[21u].x * _730)) * _542) + _730;
    float _744 = (_542 * (sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) - _476)) + _476;
    float _755 = (((_719 - _742) + (_742 * cbMtdParam._m0[22u].z)) * _592) + _742;
    float _756 = (((_720 - _743) + (_743 * cbMtdParam._m0[22u].z)) * _592) + _743;
    float _757 = ((sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) - _744) * _592) + _744;
    float _759 = cbMtdParam._m0[22u].x + _492.w;
    float _762 = fma(_757, _244 * NORMAL.x, fma(_756, _251 * TANGENT.x, (_237 * _229) * _755));
    float _765 = fma(_757, _244 * NORMAL.y, fma(_756, _251 * TANGENT.y, (_237 * _230) * _755));
    float _768 = fma(_757, _244 * NORMAL.z, fma(_756, _251 * TANGENT.z, (_237 * _231) * _755));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    float _773 = _772 * _762;
    float _774 = _772 * _765;
    float _775 = _772 * _768;
    float _3846 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _776 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3868 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3879 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3890 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3901 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _781 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _845 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _835);
    float _846 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _835);
    float _847 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _835);
    float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
    float _852 = _845 * _851;
    float _853 = _846 * _851;
    float _854 = _847 * _851;
    vec4 _859 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _861 = _859.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1033 = sqrt(((_845 * _845) + (_846 * _846)) + (_847 * _847));
        float _1039 = (cbMatDynParam._m0[5u].x * _1033) + cbMatDynParam._m0[5u].y;
        float _3912 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1044 = (cbMatDynParam._m0[5u].z * _1033) + cbMatDynParam._m0[5u].w;
        float _3923 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) - _1040)) + _1040) < ((_861 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _891 = fma(_775, cbSceneParam._m0[5u].z, fma(_774, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _773));
    float _894 = fma(_775, cbSceneParam._m0[6u].z, fma(_774, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _773));
    float _897 = fma(_775, cbSceneParam._m0[7u].z, fma(_774, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _773));
    uint _910 = _257 + 9u;
    uint _911 = _910 + uint(cbMatDynParam._m0[0u].w);
    float _917 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_911].x;
    float _918 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_911].y;
    float _919 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_911].z;
    float _3934 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _923 = 1.0 - _781;
    float _924 = _920 * _923;
    float _925 = _921 * _923;
    float _926 = _922 * _923;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _781;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _781;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _781;
    float _934 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    float _937 = _933 + 0.039999999105930328369140625;
    vec4 _946 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _950 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * TEXCOORD_5.w) * _946.x;
    float _951 = dot(vec3(_773, _774, _775), vec3(_852, _853, _854));
    float _954 = _951 * 2.0;
    float _958 = (_954 * _773) - _852;
    float _959 = (_954 * _774) - _853;
    float _960 = (_954 * _775) - _854;
    float _964 = abs(dot(vec3(_852, _853, _854), vec3(_773, _774, _775)));
    float _3967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _966 = sqrt(_776);
    float _979 = exp2((_966 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_966 * 3.0));
    float _985 = (1.0 - _979) * ((_966 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _986 = _979 * _966;
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1022, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014));
        float _1080 = fma(_1022, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014));
        float _1084 = fma(_1022, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014));
        float _1109 = _1014 + _773;
        float _1110 = _1018 + _774;
        float _1111 = _1022 + _775;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_773, _774, _775), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4015 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_773, _774, _775), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4048 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_773, _774, _775), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4081 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1022, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014));
        float _1398 = fma(_1022, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014));
        float _1402 = fma(_1022, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014));
        float _1425 = _1014 + _773;
        float _1426 = _1018 + _774;
        float _1427 = _1022 + _775;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_773, _774, _775), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4144 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_773, _774, _775), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4177 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_773, _774, _775), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4210 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = _1352;
        _1673 = _1352;
        _1674 = _1352;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1365)) + _1365;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1366)) + _1366;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _958 * 0.5;
    float _1732 = _959 * 0.5;
    float _1733 = _960 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _776);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1848 = fma(_1022, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014)) + cbModelParam._m0[13u].w;
        float _1852 = fma(_1022, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014)) + cbModelParam._m0[14u].w;
        float _1856 = fma(_1022, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014)) + cbModelParam._m0[15u].w;
        float _1859 = fma(_960, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958));
        float _1862 = fma(_960, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958));
        float _1865 = fma(_960, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958));
        float _1893;
        if (_1859 > 0.0)
        {
            _1893 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1893 = frontier_phi_17_15_ladder;
        }
        float _2117;
        if (_1862 > 0.0)
        {
            _2117 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2117 = frontier_phi_26_22_ladder;
        }
        float _2374;
        if (_1865 > 0.0)
        {
            _2374 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2374 = frontier_phi_38_33_ladder;
        }
        float _2376 = isnan(_2117) ? _1893 : (isnan(_1893) ? _2117 : min(_1893, _2117));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1859) + _1848;
        float _2382 = (_2377 * _1862) + _1852;
        float _2383 = (_2377 * _1865) + _1856;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_16_38_ladder = _2511.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2511.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2511.x * cbModelParam._m0[1u].y;
        }
        _1881 = frontier_phi_16_38_ladder_2;
        _1883 = frontier_phi_16_38_ladder_1;
        _1885 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_958, _959, _960), _1800);
        _1881 = _1869.x * cbModelParam._m0[1u].y;
        _1883 = _1869.y * cbModelParam._m0[1u].y;
        _1885 = _1869.z * cbModelParam._m0[1u].y;
    }
    float _1889 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _776);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1889 : min(cbModelParam._m0[25u].w, _1889));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1022, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1022, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1022, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_960, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958));
        float _1958 = fma(_960, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958));
        float _1961 = fma(_960, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958));
        float _2122;
        if (_1955 > 0.0)
        {
            _2122 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2122 = frontier_phi_28_24_ladder;
        }
        float _2401;
        if (_1958 > 0.0)
        {
            _2401 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2401 = frontier_phi_40_35_ladder;
        }
        float _2614;
        if (_1961 > 0.0)
        {
            _2614 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2614 = frontier_phi_49_46_ladder;
        }
        float _2616 = isnan(_2401) ? _2122 : (isnan(_2122) ? _2401 : min(_2122, _2401));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _1955) + _1944;
        float _2622 = (_2617 * _1958) + _1948;
        float _2623 = (_2617 * _1961) + _1952;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1890);
            frontier_phi_25_49_ladder = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_25_49_ladder_2;
        _1982 = frontier_phi_25_49_ladder_1;
        _1984 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_958, _959, _960), _1890);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1997 = (((_985 * _934) + _986) * _950) * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1999 = (((_985 * _936) + _986) * _950) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2001 = (((_985 * _937) + _986) * _950) * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2004 = fma(_2001, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_2001, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_2001, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    vec4 _2018 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_872, _873));
    float _2020 = _2018.w;
    float _2032 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2020);
    float _2033 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2020);
    float _2034 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2020);
    uvec4 _2038 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2040 = _2038.x * 14u;
    uint _2041 = _2040 + 13u;
    float _2048 = _950 + (-1.0);
    float _2053 = (cbLight._m0[_2041].x * _2048) + 1.0;
    float _2054 = (cbLight._m0[_2041].y * _2048) + 1.0;
    float _2055 = (cbLight._m0[_2041].z * _2048) + 1.0;
    float _2056 = (cbLight._m0[_2041].w * _2048) + 1.0;
    uint _2057 = _2040 + 5u;
    float _2063 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2067 = _2040 + 4u;
    float _2076 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2080 = _2040 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_773, _774, _775));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_773, _774, _775));
    float _4346 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4357 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2057].x * _2063) * _2101) + (((cbLight._m0[_2067].x * _2032) * _2076) * _2099);
    float _2109 = ((_2063 * cbLight._m0[_2057].y) * _2101) + (((cbLight._m0[_2067].y * _2033) * _2076) * _2099);
    float _2110 = ((_2063 * cbLight._m0[_2057].z) * _2101) + (((cbLight._m0[_2067].z * _2034) * _2076) * _2099);
    uvec4 _2114 = floatBitsToUint(cbLight._m0[_2040 + 12u]);
    bool _2116 = _2114.x == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2116)
    {
        _2127 = _2108;
        _2129 = _2109;
        _2131 = _2110;
    }
    else
    {
        uint _2135 = _2040 + 6u;
        float _2151 = (dot(vec3(cbLight._m0[_2040 + 2u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4368 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2154 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2127 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _2108;
        _2129 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _2109;
        _2131 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _2110;
    }
    bool _2134 = _2114.y == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2134)
    {
        _2172 = _2127;
        _2174 = _2129;
        _2176 = _2131;
    }
    else
    {
        uint _2345 = _2040 + 7u;
        float _2361 = (dot(vec3(cbLight._m0[_2040 + 3u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4384 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2364 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2172 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2127;
        _2174 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2129;
        _2176 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2131;
    }
    uint _2179 = _2040 + 8u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _776) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_2040].x + _852;
    float _2195 = cbLight._m0[_2040].y + _853;
    float _2196 = cbLight._m0[_2040].z + _854;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2040].xyz));
    float _4400 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _2208 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2209 = dot(vec3(_773, _774, _775), vec3(_2201, _2202, _2203));
    float _4422 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2201, _2202, _2203));
    float _4433 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2193 * _2193;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
    float _2230 = 0.959999978542327880859375 - _931;
    float _2232 = 0.959999978542327880859375 - _932;
    float _2233 = 0.959999978542327880859375 - _933;
    float _2240 = 1.0 - _2193;
    float _2251 = (0.5 / (((_2208 * ((_2207 * _2240) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2240) + _2193) * _2207))) * _2207;
    float _4444 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    uint _2267 = _2040 + 9u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _776) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2080].x + _852;
    float _2281 = cbLight._m0[_2080].y + _853;
    float _2282 = cbLight._m0[_2080].z + _854;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2080].xyz));
    float _4455 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2294 = dot(vec3(_773, _774, _775), vec3(_2287, _2288, _2289));
    float _4466 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2287, _2288, _2289));
    float _4477 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2279 * _2279;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2320 = 1.0 - _2279;
    float _2330 = (0.5 / (((_2208 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2320) + _2279) * _2293))) * _2293;
    float _4488 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    float _2342 = (((((_2313 * _2230) + _934) * cbLight._m0[_2267].x) * _2332) * _2063) + ((((cbLight._m0[_2179].x * _2032) * ((_2229 * _2230) + _934)) * _2253) * _2076);
    float _2343 = (((((_2313 * _2232) + _936) * cbLight._m0[_2267].y) * _2332) * _2063) + ((((cbLight._m0[_2179].y * _2033) * ((_2229 * _2232) + _936)) * _2253) * _2076);
    float _2344 = (((((_2313 * _2233) + _937) * cbLight._m0[_2267].z) * _2332) * _2063) + ((((cbLight._m0[_2179].z * _2034) * ((_2229 * _2233) + _937)) * _2253) * _2076);
    float _2406;
    float _2408;
    float _2410;
    if (_2116)
    {
        _2406 = _2342;
        _2408 = _2343;
        _2410 = _2344;
    }
    else
    {
        uint _2412 = _2040 + 2u;
        uint _2416 = _2040 + 10u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _776) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _852;
        float _2433 = cbLight._m0[_2412].y + _853;
        float _2434 = cbLight._m0[_2412].z + _854;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2412].xyz));
        float _4499 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2446 = dot(vec3(_773, _774, _775), vec3(_2439, _2440, _2441));
        float _4510 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4521 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2472 = 1.0 - _2431;
        float _2482 = (0.5 / (((_2208 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2472) + _2431) * _2445))) * _2445;
        float _4532 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2406 = (((((_2465 * _2230) + _934) * cbLight._m0[_2416].x) * _2484) * _2485) + _2342;
        _2408 = (((((_2465 * _2232) + _936) * cbLight._m0[_2416].y) * _2484) * _2485) + _2343;
        _2410 = (((((_2465 * _2233) + _937) * cbLight._m0[_2416].z) * _2484) * _2485) + _2344;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2134)
    {
        _2520 = _2406;
        _2522 = _2408;
        _2524 = _2410;
    }
    else
    {
        uint _2531 = _2040 + 3u;
        uint _2535 = _2040 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _776) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _852;
        float _2552 = cbLight._m0[_2531].y + _853;
        float _2553 = cbLight._m0[_2531].z + _854;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2531].xyz));
        float _4548 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2565 = dot(vec3(_773, _774, _775), vec3(_2558, _2559, _2560));
        float _4559 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4570 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2591 = 1.0 - _2550;
        float _2601 = (0.5 / (((_2208 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2591) + _2550) * _2564))) * _2564;
        float _4581 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2520 = (((((_2584 * _2230) + _934) * cbLight._m0[_2535].x) * _2603) * _2604) + _2406;
        _2522 = (((((_2584 * _2232) + _936) * cbLight._m0[_2535].y) * _2603) * _2604) + _2408;
        _2524 = (((((_2584 * _2233) + _937) * cbLight._m0[_2535].z) * _2603) * _2604) + _2410;
    }
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_2038.y == 0u)
    {
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2679;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2679;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2679;
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.x;
        uint _2706 = uint((float(_2694.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _2695))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _2695)));
        float _2716 = (log2(_2682 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2717 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        uint _2720 = uint(isnan(14.0) ? _2717 : (isnan(_2717) ? 14.0 : min(_2717, 14.0)));
        uvec4 _2725 = texelFetch(g_lightClusterGridBuffer, int(((_2720 << 2u) + (_2706 << 6u)) >> 2u));
        uint _2726 = _2725.x;
        uint _2727 = _2694.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2727 >> 4u) & 15u)) + 4294967295u) & _2726) == 0u) || ((_2727 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            uint _2986 = 0u;
            uint _2995;
            bool _2996;
            for (;;)
            {
                _2995 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                _2996 = _2995 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2996)
                {
                    frontier_phi_66_pred = _2980;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2995;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_2986 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _2680;
                        float _3192 = _3151.y - _2681;
                        float _3193 = _3151.z - _2682;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_891, _894, _897), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4607 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _2680;
                        float _3227 = (-0.0) - _2681;
                        float _3228 = (-0.0) - _2682;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3243 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _966;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3256 = _3235 + _3200;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_891, _894, _897), vec3(_3233, _3234, _3235));
                        float _4623 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3268 = dot(vec3(_891, _894, _897), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4634 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3211 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3201) + _3277;
                        float _4645 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4656 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3275 * _3275) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3055 = (_3222 * _3170.x) + _3128;
                        _3056 = (_3222 * _3170.y) + _3129;
                        _3057 = (_3222 * _3170.z) + _3130;
                        _3052 = (_3303 * _3187.x) + _3125;
                        _3053 = (_3303 * _3187.y) + _3126;
                        _3054 = (_3303 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_66_pred = _3052;
                    frontier_phi_66_pred_1 = _3057;
                    frontier_phi_66_pred_2 = _3056;
                    frontier_phi_66_pred_3 = _3055;
                    frontier_phi_66_pred_4 = _3054;
                    frontier_phi_66_pred_5 = _3053;
                }
                _2828 = frontier_phi_66_pred;
                _2838 = frontier_phi_66_pred_1;
                _2836 = frontier_phi_66_pred_2;
                _2834 = frontier_phi_66_pred_3;
                _2832 = frontier_phi_66_pred_4;
                _2830 = frontier_phi_66_pred_5;
                uint _2987 = _2986 + 1u;
                if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2980 = _2828;
                    _2981 = _2830;
                    _2982 = _2832;
                    _2983 = _2834;
                    _2984 = _2836;
                    _2985 = _2838;
                    _2986 = _2987;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((4294967295u << _2844) & _2726) == 0u)
        {
            _2948 = _2827;
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
        }
        else
        {
            float _2973 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
            float _2974 = _2973 * _2680;
            float _2975 = _2973 * _2681;
            float _2976 = _2973 * _2682;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _3108 = _2827;
                float _3109 = _2829;
                float _3110 = _2831;
                float _3111 = _2833;
                float _3112 = _2835;
                float _3113 = _2837;
                uint _3114 = _2844;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3124)
                    {
                        frontier_phi_77_pred = _3113;
                        frontier_phi_77_pred_1 = _3112;
                        frontier_phi_77_pred_2 = _3111;
                        frontier_phi_77_pred_3 = _3110;
                        frontier_phi_77_pred_4 = _3109;
                        frontier_phi_77_pred_5 = _3108;
                    }
                    else
                    {
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        uint _3336 = _3123;
                        uint _3337;
                        vec4 _3362;
                        float _3363;
                        vec4 _3378;
                        vec3 _3390;
                        vec4 _3405;
                        vec4 _3421;
                        float _3467;
                        bool _3468;
                        for (;;)
                        {
                            uint _3347 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3336));
                            _3337 = (_3336 + 4294967295u) & _3336;
                            uint _3349 = _3347 * 40u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.w;
                            uint _3365 = (_3347 * 40u) + 4u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3347 * 40u) + 8u;
                            _3390 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x));
                            uint _3392 = (_3347 * 40u) + 16u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3408 = (_3347 * 40u) + 20u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3347 * 40u) + 24u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3442 = (_3347 * 40u) + 28u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3467 = fma(_2682, _3455.z, fma(_2681, _3455.y, _3455.x * _2680)) + _3455.w;
                            _3468 = !((fma(_2682, _3436.z, fma(_2681, _3436.y, _3436.x * _2680)) + _3436.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3468)
                            {
                                float _3495 = _3362.x - _2680;
                                float _3496 = _3362.y - _2681;
                                float _3497 = _3362.z - _2682;
                                float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                                float _3501 = inversesqrt(_3498);
                                float _3502 = _3501 * _3495;
                                float _3503 = _3501 * _3496;
                                float _3504 = _3501 * _3497;
                                float _3508 = 1.0 - (_3498 / (_3363 * _3363));
                                float _4667 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3513 = sqrt(_3498) * _3378.w;
                                float _3515 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                                float _3516 = _3515 * _3515;
                                float _3519 = ((1.0 - _3516) * dot(vec3(_3502, _3503, _3504), vec3(_891, _894, _897))) + _3516;
                                float _3522 = _3513 * _3513;
                                float _3526 = (fma(_2682, _3405.z, fma(_2681, _3405.y, _3405.x * _2680)) + _3405.w) / _3467;
                                float _3527 = (fma(_2682, _3421.z, fma(_2681, _3421.y, _3421.x * _2680)) + _3421.w) / _3467;
                                float _3531 = 1.0 - dot(vec2(_3526, _3527), vec2(_3526, _3527));
                                float _4683 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3533 = _3532 * (((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3509) / ((_3522 * 0.699999988079071044921875) + 1.0));
                                float _3545 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                                float _3546 = 1.0 - _966;
                                float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                                float _3554 = _3553 * _3553;
                                float _3555 = _3554 * _3554;
                                float _3556 = _3502 - _2974;
                                float _3557 = _3503 - _2975;
                                float _3558 = _3504 - _2976;
                                float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                                float _3566 = dot(vec3(_891, _894, _897), vec3((-0.0) - _2974, (-0.0) - _2975, (-0.0) - _2976));
                                float _4694 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3570 = dot(vec3(_891, _894, _897), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                                float _4705 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                                float _3578 = _3515 * _3554;
                                float _3579 = _3578 * _3578;
                                float _3585 = ((1.0 - _3579) * dot(vec3(_891, _894, _897), vec3(_3502, _3503, _3504))) + _3579;
                                float _4716 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3587 = 1.0 - _3554;
                                float _3597 = (0.5 / (((_3586 * ((_3569 * _3587) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3554) * _3569))) * _3586;
                                float _4727 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3607 = (_3532 * _3509) * (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3577 * _3577) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3533 * _3378.y;
                                frontier_phi_83_pred_1 = _3533 * _3378.x;
                                frontier_phi_83_pred_2 = _3607 * _3390.z;
                                frontier_phi_83_pred_3 = _3607 * _3390.y;
                                frontier_phi_83_pred_4 = _3607 * _3390.x;
                                frontier_phi_83_pred_5 = _3533 * _3378.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3615 = frontier_phi_83_pred;
                            _3614 = frontier_phi_83_pred_1;
                            _3613 = frontier_phi_83_pred_2;
                            _3612 = frontier_phi_83_pred_3;
                            _3611 = frontier_phi_83_pred_4;
                            _3616 = frontier_phi_83_pred_5;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            _3319 = _3613 + _3332;
                            if (_3337 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3337;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3322;
                        frontier_phi_77_pred_1 = _3321;
                        frontier_phi_77_pred_2 = _3320;
                        frontier_phi_77_pred_3 = _3319;
                        frontier_phi_77_pred_4 = _3318;
                        frontier_phi_77_pred_5 = _3317;
                    }
                    _2959 = frontier_phi_77_pred;
                    _2957 = frontier_phi_77_pred_1;
                    _2955 = frontier_phi_77_pred_2;
                    _2953 = frontier_phi_77_pred_3;
                    _2951 = frontier_phi_77_pred_4;
                    _2949 = frontier_phi_77_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2949;
                        _3109 = _2951;
                        _3110 = _2953;
                        _3111 = _2955;
                        _3112 = _2957;
                        _3113 = _2959;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2953;
                frontier_phi_58_59_ladder_1 = _2959;
                frontier_phi_58_59_ladder_2 = _2957;
                frontier_phi_58_59_ladder_3 = _2955;
                frontier_phi_58_59_ladder_4 = _2951;
                frontier_phi_58_59_ladder_5 = _2949;
            }
            else
            {
                frontier_phi_58_59_ladder = _2831;
                frontier_phi_58_59_ladder_1 = _2837;
                frontier_phi_58_59_ladder_2 = _2835;
                frontier_phi_58_59_ladder_3 = _2833;
                frontier_phi_58_59_ladder_4 = _2829;
                frontier_phi_58_59_ladder_5 = _2827;
            }
            _2948 = frontier_phi_58_59_ladder_5;
            _2950 = frontier_phi_58_59_ladder_4;
            _2952 = frontier_phi_58_59_ladder;
            _2954 = frontier_phi_58_59_ladder_3;
            _2956 = frontier_phi_58_59_ladder_2;
            _2958 = frontier_phi_58_59_ladder_1;
        }
        float _2963 = isnan(1.0) ? _950 : (isnan(_950) ? 1.0 : min(_950, 1.0));
        _2739 = (_2963 * _2954) + _2172;
        _2741 = (_2963 * _2956) + _2174;
        _2743 = (_2963 * _2958) + _2176;
        _2745 = ((_2948 * _934) * _2963) + _2520;
        _2747 = ((_2950 * _936) * _2963) + _2522;
        _2749 = ((_2952 * _937) * _2963) + _2524;
    }
    else
    {
        _2739 = _2172;
        _2741 = _2174;
        _2743 = _2176;
        _2745 = _2520;
        _2747 = _2522;
        _2749 = _2524;
    }
    float _4743 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4754 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4765 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2766 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2739 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _950))) + ((_2745 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2741 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _950))) + ((_2747 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    float _2768 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2743 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _950))) + ((_2749 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    uint _2769 = _257 + 6u;
    float _2777 = _872 / cbSceneParam._m0[86u].x;
    float _2778 = _873 / cbSceneParam._m0[86u].y;
    vec4 _2792 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2794 = _2792.x;
    float _2795 = _2792.y;
    float _2796 = _2792.z;
    float _2797 = _2792.w;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _2853 = _2852 / _795;
        float _2864 = _2853 * _845;
        float _2865 = _846 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2868 = _2853 * _847;
        float _2870 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2871 = _2870 + cbSceneParam._m0[79u].w;
        float _2872 = cbSceneParam._m0[79u].w - _2865;
        float _2878 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2868 * _2868));
        float _2881 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2878;
        float _2886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2866 - _2870) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2871 > 0.0) ? exp2(_2886 * _2871) : (2.0 - exp2(_2888 * _2871))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2881;
        }
        else
        {
            float _3009 = 1.0 / cbSceneParam._m0[80u].x;
            float _3010 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : max(_2871, _2872));
            float _3011 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : min(_2871, _2872));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            _3065 = ((abs(_2878 / _2866) * cbSceneParam._m0[80u].y) * ((((_3020 - _3021) * 2.0) - ((exp2(_2886 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0)))) - exp2(_2886 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))))) * _3009)) - ((exp2(_2888 * _3020) - exp2(_2888 * _3021)) * _3009))) + (_2881 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2797);
        _2890 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2794;
        _2892 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2795;
        _2894 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2796;
        _2896 = _3076 * _2797;
    }
    else
    {
        _2890 = _2794;
        _2892 = _2795;
        _2894 = _2796;
        _2896 = _2797;
    }
    bool _3103;
    vec4 _2906;
    vec4 _2928;
    float _2930;
    float _2934;
    float _2935;
    float _2936;
    float _2937;
    bool _2947;
    for (;;)
    {
        _2906 = cbMatDynParam._m0[0u];
        float _2908 = roundEven(_2906.y);
        bool _2909 = _2908 == 3.0;
        float _2910 = log2(_2896);
        float _2917 = exp2(_2910 * cbSceneParam._m0[78u].x) * _2766;
        float _2918 = exp2(_2910 * cbSceneParam._m0[78u].y) * _2767;
        float _2919 = exp2(_2910 * cbSceneParam._m0[78u].z) * _2768;
        float _2926 = _861 + (-0.5);
        _2928 = cbMtdParam._m0[1u];
        _2930 = _2928.y * _2926;
        float _2933 = (_2908 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2934 = _2933 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2890)));
        _2935 = _2933 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2892)));
        _2936 = _2933 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2894)));
        _2937 = _2926 * 0.999000012874603271484375;
        _2947 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2947)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2937) < 0.5)
            {
                _3103 = true;
                break;
            }
        }
        uint _3044 = _910 + uint(_2906.w);
        if ((cbInstanceData._m0[_3044].w < 1.0) && ((cbInstanceData._m0[_3044].w + _2937) < 0.5))
        {
            _3103 = true;
            break;
        }
        if ((_2930 + 1.0) < _2928.x)
        {
            _3103 = true;
            break;
        }
        _3103 = false;
        break;
    }
    float _3308;
    if (_3103)
    {
        discard_state = true;
        _3308 = 0.0;
    }
    else
    {
        _3308 = cbInstanceData._m0[_2769].w;
    }
    SV_Target.x = _2934;
    SV_Target.y = _2935;
    SV_Target.z = _2936;
    SV_Target.w = _3308;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2769].w;
    discard_exit();
}


