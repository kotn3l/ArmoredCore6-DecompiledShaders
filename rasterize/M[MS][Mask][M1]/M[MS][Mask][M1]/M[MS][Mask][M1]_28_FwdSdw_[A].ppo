#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1477;
float _4140;
float _4141;
float _4142;
float _4143;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4152 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4163 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4174 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4185 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _457 = (_450 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _458 = (_450 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _459 = (_450 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _463 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _457;
    float _466 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _458;
    float _469 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _459;
    float _476 = ((_457 - _463) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) + _463;
    float _477 = ((_458 - _466) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) + _466;
    float _478 = ((_459 - _469) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) + _469;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    float _553 = ((_523.z - _544) * _450) + _544;
    float _556 = ((((_523.x - _542) * _450) + _542) * 2.0) + (-1.0);
    float _557 = ((((_523.y - _543) * _450) + _543) * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _4196 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _595 = (_556 + ((((_496.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_583.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _596 = (_557 + ((((_496.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_583.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _599 = fma(_563, _256, fma(_596, _263, _595 * _249));
    float _602 = fma(_563, _257, fma(_596, _264, _595 * _250));
    float _605 = fma(_563, _258, fma(_596, _265, _595 * _251));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _638 = _636.x;
    float _639 = 1.0 - _638;
    float _648 = (cbMtdParam._m0[19u].x + dot(vec4(_609 * _599, _609 * _602, _609 * _605, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_638 - _639) * cbMtdParam._m0[24u].z) + _639) * cbMtdParam._m0[21u].z);
    float _4207 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _651 = (-0.0) - cbMtdParam._m0[24u].x;
    float _653 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
    float _661 = _649 - ((_649 * TEXCOORD_8.x) * _654);
    float _662 = _649 - ((_649 * TEXCOORD_8.y) * _654);
    float _663 = _649 - ((_649 * TEXCOORD_8.z) * _654);
    float _670 = (_661 * (cbMtdParam._m0[17u].x - _476)) + _476;
    float _671 = (_662 * (cbMtdParam._m0[17u].y - _477)) + _477;
    float _672 = (_663 * (cbMtdParam._m0[17u].z - _478)) + _478;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _713 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_686 - _687) * cbMtdParam._m0[24u].w) + _687) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4228 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _722 = ((((cbMtdParam._m0[10u].x - _670) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _714) + _670;
    float _723 = ((((cbMtdParam._m0[10u].y - _671) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _714) + _671;
    float _724 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _672)) * _714) + _672;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _752 = _750.x;
    float _770 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _752) * _450) + _752;
    float _774 = ((_736.x - _770) * cbMtdParam._m0[19u].z) + _770;
    float _776 = _774 - (_774 * _661);
    float _778 = _776 - (_776 * _714);
    float _783 = (((_496.z - _553) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _553;
    float _787 = ((_583.z - _783) * cbMtdParam._m0[19u].w) + _783;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _808 = (_801.x * 2.0) + (-1.0);
    float _809 = (_801.y * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _4239 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _818 = ((_801.z - _787) * _661) + _787;
    float _821 = ((cbMtdParam._m0[23u].x - _818) * _714) + _818;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _846 = (_840.x * 2.0) + (-1.0);
    float _847 = (_840.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _4250 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _863 = ((sqrt(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) - _563) * _663) + _563;
    float _866 = (((_808 - _595) * _661) + _595) + (cbMtdParam._m0[21u].x * _595);
    float _867 = (((_809 - _596) * _662) + _596) + (cbMtdParam._m0[21u].x * _596);
    float _878 = (((_846 - _866) + (_866 * cbMtdParam._m0[22u].z)) * _714) + _866;
    float _879 = (((_847 - _867) + (_867 * cbMtdParam._m0[22u].z)) * _714) + _867;
    float _880 = (_714 * (sqrt(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) - _863)) + _863;
    float _884 = cbMtdParam._m0[22u].x + _583.w;
    float _887 = fma(_880, _256, fma(_879, _263, _878 * _249));
    float _890 = fma(_880, _257, fma(_879, _264, _878 * _250));
    float _893 = fma(_880, _258, fma(_879, _265, _878 * _251));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _4261 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _901 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4283 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4294 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4305 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4316 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _906 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _920 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _970 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _960);
    float _971 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _960);
    float _972 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _960);
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    vec4 _984 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _986 = _984.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1158 = sqrt(((_970 * _970) + (_971 * _971)) + (_972 * _972));
        float _1164 = (cbMatDynParam._m0[5u].x * _1158) + cbMatDynParam._m0[5u].y;
        float _4327 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1169 = (cbMatDynParam._m0[5u].z * _1158) + cbMatDynParam._m0[5u].w;
        float _4338 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) - _1165)) + _1165) < ((_986 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _997 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _998 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1016 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1019 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1022 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1035 = _287 + 9u;
    uint _1036 = _1035 + uint(cbMatDynParam._m0[0u].w);
    float _1042 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * cbInstanceData._m0[_1036].x;
    float _1043 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * cbInstanceData._m0[_1036].y;
    float _1044 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * cbInstanceData._m0[_1036].z;
    float _4349 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _4371 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _1048 = 1.0 - _906;
    float _1049 = _1045 * _1048;
    float _1050 = _1046 * _1048;
    float _1051 = _1047 * _1048;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _906;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _906;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _906;
    float _1059 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _997, cbSceneParam._m0[86u].y * _998));
    float _1075 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_898, _899, _900), vec3(_977, _978, _979));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _898) - _977;
    float _1084 = (_1079 * _899) - _978;
    float _1085 = (_1079 * _900) - _979;
    float _1089 = abs(dot(vec3(_977, _978, _979), vec3(_898, _899, _900)));
    float _4382 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_901);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1091;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1476;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1201 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1205 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1209 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1234 = _1139 + _898;
        float _1235 = _1143 + _899;
        float _1236 = _1147 + _900;
        float _1246 = fma(_1236, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1234)) - _1201;
        float _1247 = fma(_1236, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1234)) - _1205;
        float _1248 = fma(_1236, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1234)) - _1209;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1201 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1205 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[34u].z) + ((((((_1209 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1304 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1270.x + (-0.5));
        float _1306 = _1304 * (_1270.y + (-0.5));
        float _1307 = _1304 * (_1270.z + (-0.5));
        float _1314 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1277.x + (-0.5));
        float _1316 = _1314 * (_1277.y + (-0.5));
        float _1317 = _1314 * (_1277.z + (-0.5));
        float _1324 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1284.x + (-0.5));
        float _1326 = _1324 * (_1284.y + (-0.5));
        float _1327 = _1324 * (_1284.z + (-0.5));
        float _1334 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1291.x + (-0.5));
        float _1336 = _1334 * (_1291.y + (-0.5));
        float _1337 = _1334 * (_1291.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1358 = (dot(vec3(_898, _899, _900), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1368 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4430 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1370 + 1.0))) + _1375) * _1338;
        float _1385 = _1306 * 0.5;
        float _1386 = _1316 * 0.5;
        float _1387 = _1326 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_898, _899, _900), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4463 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1412 + 1.0))) + _1417) * _1339;
        float _1427 = _1307 * 0.5;
        float _1428 = _1317 * 0.5;
        float _1429 = _1327 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_898, _899, _900), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4496 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1454 + 1.0))) + _1459) * _1340;
        _1476 = _1307;
        _1478 = _1306;
        _1479 = _1305;
        _1480 = _1317;
        _1481 = _1316;
        _1482 = _1315;
        _1483 = _1327;
        _1484 = _1326;
        _1485 = _1325;
        _1486 = _1340;
        _1487 = _1339;
        _1488 = _1338;
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1477;
        _1478 = _1477;
        _1479 = _1477;
        _1480 = _1477;
        _1481 = _1477;
        _1482 = _1477;
        _1483 = _1477;
        _1484 = _1477;
        _1485 = _1477;
        _1486 = _1477;
        _1487 = _1477;
        _1488 = _1477;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1519 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1523 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1527 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1550 = _1139 + _898;
        float _1551 = _1143 + _899;
        float _1552 = _1147 + _900;
        float _1562 = fma(_1552, cbModelParam._m0[30u].z, fma(_1551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1550)) - _1519;
        float _1563 = fma(_1552, cbModelParam._m0[31u].z, fma(_1551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1550)) - _1523;
        float _1564 = fma(_1552, cbModelParam._m0[32u].z, fma(_1551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1550)) - _1527;
        float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
        float _1581 = ((_1568 * _1562) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1519 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1568 * _1563) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1523 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1568 * _1564) / cbModelParam._m0[35u].z) + ((((((_1527 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        float _1618 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1585.x + (-0.5));
        float _1620 = _1618 * (_1585.y + (-0.5));
        float _1621 = _1618 * (_1585.z + (-0.5));
        float _1628 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1592.x + (-0.5));
        float _1630 = _1628 * (_1592.y + (-0.5));
        float _1631 = _1628 * (_1592.z + (-0.5));
        float _1638 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1599.x + (-0.5));
        float _1640 = _1638 * (_1599.y + (-0.5));
        float _1641 = _1638 * (_1599.z + (-0.5));
        float _1648 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1606.x + (-0.5));
        float _1650 = _1648 * (_1606.y + (-0.5));
        float _1651 = _1648 * (_1606.z + (-0.5));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = _1619 * 0.5;
        float _1656 = _1629 * 0.5;
        float _1657 = _1639 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_898, _899, _900), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4537 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4548 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4559 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_1682 + 1.0))) + _1687) * _1652;
        float _1697 = _1620 * 0.5;
        float _1698 = _1630 * 0.5;
        float _1699 = _1640 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_898, _899, _900), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4570 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4581 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4592 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_1724 + 1.0))) + _1729) * _1653;
        float _1739 = _1621 * 0.5;
        float _1740 = _1631 * 0.5;
        float _1741 = _1641 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_898, _899, _900), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4603 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4614 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4625 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_1766 + 1.0))) + _1771) * _1654;
        _1788 = _1621;
        _1789 = _1620;
        _1790 = _1619;
        _1791 = _1631;
        _1792 = _1630;
        _1793 = _1629;
        _1794 = _1641;
        _1795 = _1640;
        _1796 = _1639;
        _1797 = _1654;
        _1798 = _1653;
        _1799 = _1652;
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
    }
    else
    {
        _1788 = _1477;
        _1789 = _1477;
        _1790 = _1477;
        _1791 = _1477;
        _1792 = _1477;
        _1793 = _1477;
        _1794 = _1477;
        _1795 = _1477;
        _1796 = _1477;
        _1797 = _1477;
        _1798 = _1477;
        _1799 = _1477;
        _1800 = 0.0;
        _1801 = 0.0;
        _1802 = 0.0;
    }
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1489)) + _1489;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1490)) + _1490;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1491)) + _1491;
    float _1835 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1812));
    float _1856 = _1083 * 0.5;
    float _1857 = _1084 * 0.5;
    float _1858 = _1085 * 0.5;
    float _1859 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1862 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1865 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1899;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1872 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1476, _1480, _1483, _1486));
        float _1876 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1880 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1887 = dot(vec4(cbModelParam._m0[39u]), vec4(_1856, _1857, _1858, 1.0));
        _1899 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1899 = 1.0;
    }
    float _1910;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1901 = dot(vec4(cbModelParam._m0[40u]), vec4(_1856, _1857, _1858, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1901) ? 0.0 : (isnan(0.0) ? _1901 : max(0.0, _1901))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1914 = (_1910 * cbModelParam._m0[1u].x) + (_1899 * (1.0 - cbModelParam._m0[1u].x));
    float _1924 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1924 : min(cbModelParam._m0[25u].z, _1924));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1987 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1990 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2018 = frontier_phi_17_15_ladder;
        }
        float _2190;
        if (_1987 > 0.0)
        {
            _2190 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2190 = frontier_phi_26_22_ladder;
        }
        float _2485;
        if (_1990 > 0.0)
        {
            _2485 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2485 = frontier_phi_38_33_ladder;
        }
        float _2487 = isnan(_2190) ? _2018 : (isnan(_2018) ? _2190 : min(_2018, _2190));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1984) + _1973;
        float _2493 = (_2488 * _1987) + _1977;
        float _2494 = (_2488 * _1990) + _1981;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2495;
        float _2499 = _2495 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 > _2499) || ((_2493 < _2497) || ((_2492 < _2497) || (_2492 > _2499))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2494, cbModelParam._m0[9u].z, fma(_2493, cbModelParam._m0[9u].y, _2492 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2494, cbModelParam._m0[10u].z, fma(_2493, cbModelParam._m0[10u].y, _2492 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2494, cbModelParam._m0[11u].z, fma(_2493, cbModelParam._m0[11u].y, _2492 * cbModelParam._m0[11u].x))), _1925);
            frontier_phi_16_38_ladder = _2639.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2639.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2639.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_16_38_ladder_2;
        _2008 = frontier_phi_16_38_ladder_1;
        _2010 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1925);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2083 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2086 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2195;
        if (_2080 > 0.0)
        {
            _2195 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2195 = frontier_phi_28_24_ladder;
        }
        float _2512;
        if (_2083 > 0.0)
        {
            _2512 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2512 = frontier_phi_40_35_ladder;
        }
        float _2850;
        if (_2086 > 0.0)
        {
            _2850 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2850 = frontier_phi_50_47_ladder;
        }
        float _2852 = isnan(_2512) ? _2195 : (isnan(_2195) ? _2512 : min(_2195, _2512));
        float _2853 = isnan(_2850) ? _2852 : (isnan(_2852) ? _2850 : min(_2852, _2850));
        float _2857 = (_2853 * _2080) + _2069;
        float _2858 = (_2853 * _2083) + _2073;
        float _2859 = (_2853 * _2086) + _2077;
        float _2860 = _2853 * 9.9999997473787516355514526367188e-05;
        float _2861 = (-1.0) - _2860;
        float _2863 = _2860 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2859 > _2863) || ((_2859 < _2861) || ((_2858 > _2863) || ((_2858 < _2861) || ((_2857 < _2861) || (_2857 > _2863))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2859, cbModelParam._m0[17u].z, fma(_2858, cbModelParam._m0[17u].y, _2857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2859, cbModelParam._m0[18u].z, fma(_2858, cbModelParam._m0[18u].y, _2857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2859, cbModelParam._m0[19u].z, fma(_2858, cbModelParam._m0[19u].y, _2857 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_25_50_ladder = _2981.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2981.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2981.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_25_50_ladder_2;
        _2107 = frontier_phi_25_50_ladder_1;
        _2109 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2015);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2122 = (((_1110 * _1059) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1110 * _1061) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2126 = (((_1110 * _1062) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2124, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2124, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2124, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    float _2169 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2182 = _2169 / _2181;
    float _2183 = _2173 / _2181;
    float _2184 = _2177 / _2181;
    float _2331;
    float _2332;
    float _2333;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2211 = ((uint(_2184 > cbSceneParam._m0[59u].y) + uint(_2184 > cbSceneParam._m0[59u].x)) + uint(_2184 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2212 = _2211 + 43u;
        uint _2220 = _2211 + 44u;
        uint _2228 = _2211 + 45u;
        uint _2236 = _2211 + 46u;
        float _2247 = fma(_2181, cbSceneParam._m0[_2212].w, fma(_2177, cbSceneParam._m0[_2212].z, fma(_2173, cbSceneParam._m0[_2212].y, _2169 * cbSceneParam._m0[_2212].x)));
        float _2251 = fma(_2181, cbSceneParam._m0[_2220].w, fma(_2177, cbSceneParam._m0[_2220].z, fma(_2173, cbSceneParam._m0[_2220].y, _2169 * cbSceneParam._m0[_2220].x)));
        float _2259 = fma(_2181, cbSceneParam._m0[_2236].w, fma(_2177, cbSceneParam._m0[_2236].z, fma(_2173, cbSceneParam._m0[_2236].y, _2169 * cbSceneParam._m0[_2236].x)));
        float _2264 = cbSceneParam._m0[33u].z * _2259;
        float _2266 = cbSceneParam._m0[33u].w * _2259;
        float _2269 = fma(_2181, cbSceneParam._m0[_2228].w, fma(_2177, cbSceneParam._m0[_2228].z, fma(_2173, cbSceneParam._m0[_2228].y, _2169 * cbSceneParam._m0[_2228].x))) / _2259;
        float _2317 = (cbSceneParam._m0[33u].x - sqrt(((_2183 * _2183) + (_2182 * _2182)) + (_2184 * _2184))) * cbSceneParam._m0[33u].y;
        float _4751 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2324 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 + _2247) / _2259, (_2266 + _2251) / _2259), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 + _2247) / _2259, (_2251 - _2264) / _2259), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 - _2264) / _2259, (_2251 - _2266) / _2259), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 - _2266) / _2259, (_2264 + _2251) / _2259), _2269), 0.0)).x), vec4(0.25)));
        _2331 = 1.0 - (_2324 * cbSceneParam._m0[34u].x);
        _2332 = 1.0 - (_2324 * cbSceneParam._m0[34u].y);
        _2333 = 1.0 - (_2324 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2331 = 1.0;
        _2332 = 1.0;
        _2333 = 1.0;
    }
    float _2397;
    float _2399;
    float _2401;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2385 = fma(_2181, cbSceneParam._m0[63u].w, fma(_2177, cbSceneParam._m0[63u].z, fma(_2173, cbSceneParam._m0[63u].y, _2169 * cbSceneParam._m0[63u].x)));
        float _2386 = fma(_2181, cbSceneParam._m0[60u].w, fma(_2177, cbSceneParam._m0[60u].z, fma(_2173, cbSceneParam._m0[60u].y, _2169 * cbSceneParam._m0[60u].x))) / _2385;
        float _2387 = fma(_2181, cbSceneParam._m0[61u].w, fma(_2177, cbSceneParam._m0[61u].z, fma(_2173, cbSceneParam._m0[61u].y, _2169 * cbSceneParam._m0[61u].x))) / _2385;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2386 >= cbSceneParam._m0[64u].x) && (_2387 >= cbSceneParam._m0[64u].y)) && (_2386 <= cbSceneParam._m0[64u].z)) && (_2387 <= cbSceneParam._m0[64u].w))
        {
            float _2525 = fma(_2181, cbSceneParam._m0[62u].w, fma(_2177, cbSceneParam._m0[62u].z, fma(_2173, cbSceneParam._m0[62u].y, _2169 * cbSceneParam._m0[62u].x))) / _2385;
            float _2529 = isnan(cbSceneParam._m0[41u].w) ? _2525 : (isnan(_2525) ? cbSceneParam._m0[41u].w : max(_2525, cbSceneParam._m0[41u].w));
            float _2572 = (cbSceneParam._m0[33u].x - sqrt(((_2183 * _2183) + (_2182 * _2182)) + (_2184 * _2184))) * cbSceneParam._m0[33u].y;
            float _4767 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
            float _2579 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2386, cbSceneParam._m0[33u].w + _2387), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2386, _2387 - cbSceneParam._m0[33u].z), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2386 - cbSceneParam._m0[33u].z, _2387 - cbSceneParam._m0[33u].w), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2386 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2387), _2529), 0.0)).x), vec4(0.25)));
            float _2583 = 1.0 - (_2579 * cbSceneParam._m0[34u].x);
            float _2584 = 1.0 - (_2579 * cbSceneParam._m0[34u].y);
            float _2585 = 1.0 - (_2579 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_37_36_ladder_1 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
            frontier_phi_37_36_ladder_2 = isnan(_2583) ? _2331 : (isnan(_2331) ? _2583 : min(_2331, _2583));
        }
        else
        {
            frontier_phi_37_36_ladder = _2333;
            frontier_phi_37_36_ladder_1 = _2332;
            frontier_phi_37_36_ladder_2 = _2331;
        }
        _2397 = frontier_phi_37_36_ladder_2;
        _2399 = frontier_phi_37_36_ladder_1;
        _2401 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2397 = _2331;
        _2399 = _2332;
        _2401 = _2333;
    }
    uvec4 _2406 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2408 = _2406.x * 14u;
    uint _2409 = _2408 + 13u;
    float _2416 = _1075 + (-1.0);
    float _2421 = (cbLight._m0[_2409].x * _2416) + 1.0;
    float _2422 = (cbLight._m0[_2409].y * _2416) + 1.0;
    float _2423 = (cbLight._m0[_2409].z * _2416) + 1.0;
    float _2424 = (cbLight._m0[_2409].w * _2416) + 1.0;
    uint _2425 = _2408 + 5u;
    float _2431 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2435 = _2408 + 4u;
    float _2444 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
    uint _2448 = _2408 | 1u;
    float _2459 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_898, _899, _900));
    float _2462 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_898, _899, _900));
    float _4803 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _4814 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2467 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * 0.3183098733425140380859375;
    float _2469 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * 0.3183098733425140380859375;
    float _2476 = ((cbLight._m0[_2425].x * _2431) * _2469) + (((cbLight._m0[_2435].x * _2397) * _2444) * _2467);
    float _2477 = ((_2431 * cbLight._m0[_2425].y) * _2469) + (((cbLight._m0[_2435].y * _2399) * _2444) * _2467);
    float _2478 = ((_2431 * cbLight._m0[_2425].z) * _2469) + (((cbLight._m0[_2435].z * _2401) * _2444) * _2467);
    uvec4 _2482 = floatBitsToUint(cbLight._m0[_2408 + 12u]);
    bool _2484 = _2482.x == 0u;
    float _2586;
    float _2588;
    float _2590;
    if (_2484)
    {
        _2586 = _2476;
        _2588 = _2477;
        _2590 = _2478;
    }
    else
    {
        uint _2594 = _2408 + 6u;
        float _2610 = (dot(vec3(cbLight._m0[_2408 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2611 = _2610 * _2610;
        float _4825 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2612 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2613 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
        _2586 = (((cbLight._m0[_2594].x * 0.3183098733425140380859375) * _2612) * _2613) + _2476;
        _2588 = (((cbLight._m0[_2594].y * 0.3183098733425140380859375) * _2612) * _2613) + _2477;
        _2590 = (((cbLight._m0[_2594].z * 0.3183098733425140380859375) * _2612) * _2613) + _2478;
    }
    bool _2593 = _2482.y == 0u;
    float _2648;
    float _2650;
    float _2652;
    if (_2593)
    {
        _2648 = _2586;
        _2650 = _2588;
        _2652 = _2590;
    }
    else
    {
        uint _2821 = _2408 + 7u;
        float _2837 = (dot(vec3(cbLight._m0[_2408 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2838 = _2837 * _2837;
        float _4841 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2839 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2840 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2648 = (((cbLight._m0[_2821].x * 0.3183098733425140380859375) * _2839) * _2840) + _2586;
        _2650 = (((cbLight._m0[_2821].y * 0.3183098733425140380859375) * _2839) * _2840) + _2588;
        _2652 = (((cbLight._m0[_2821].z * 0.3183098733425140380859375) * _2839) * _2840) + _2590;
    }
    uint _2655 = _2408 + 8u;
    float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _901) * 0.949999988079071044921875);
    float _2669 = _2668 * _2668;
    float _2670 = cbLight._m0[_2408].x + _977;
    float _2671 = cbLight._m0[_2408].y + _978;
    float _2672 = cbLight._m0[_2408].z + _979;
    float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
    float _2677 = _2676 * _2670;
    float _2678 = _2676 * _2671;
    float _2679 = _2676 * _2672;
    float _2680 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2408].xyz));
    float _4857 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
    float _4868 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2684 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _2685 = dot(vec3(_898, _899, _900), vec3(_2677, _2678, _2679));
    float _4879 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2677, _2678, _2679));
    float _4890 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2669 * _2669;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
    float _2706 = 0.959999978542327880859375 - _1056;
    float _2708 = 0.959999978542327880859375 - _1057;
    float _2709 = 0.959999978542327880859375 - _1058;
    float _2716 = 1.0 - _2669;
    float _2727 = (0.5 / (((_2684 * ((_2683 * _2716) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2716) + _2669) * _2683))) * _2683;
    float _4901 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2729 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    uint _2743 = _2408 + 9u;
    float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _901) * 0.949999988079071044921875);
    float _2755 = _2754 * _2754;
    float _2756 = cbLight._m0[_2448].x + _977;
    float _2757 = cbLight._m0[_2448].y + _978;
    float _2758 = cbLight._m0[_2448].z + _979;
    float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
    float _2763 = _2762 * _2756;
    float _2764 = _2762 * _2757;
    float _2765 = _2762 * _2758;
    float _2766 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2448].xyz));
    float _4912 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
    float _2770 = dot(vec3(_898, _899, _900), vec3(_2763, _2764, _2765));
    float _4923 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2773 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
    float _2774 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2763, _2764, _2765));
    float _4934 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2778 = _2755 * _2755;
    float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
    float _2789 = exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0);
    float _2796 = 1.0 - _2755;
    float _2806 = (0.5 / (((_2684 * ((_2769 * _2796) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2796) + _2755) * _2769))) * _2769;
    float _4945 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2808 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
    float _2818 = (((((_2789 * _2706) + _1059) * cbLight._m0[_2743].x) * _2808) * _2431) + ((((cbLight._m0[_2655].x * _2397) * ((_2705 * _2706) + _1059)) * _2729) * _2444);
    float _2819 = (((((_2789 * _2708) + _1061) * cbLight._m0[_2743].y) * _2808) * _2431) + ((((cbLight._m0[_2655].y * _2399) * ((_2705 * _2708) + _1061)) * _2729) * _2444);
    float _2820 = (((((_2789 * _2709) + _1062) * cbLight._m0[_2743].z) * _2808) * _2431) + ((((cbLight._m0[_2655].z * _2401) * ((_2705 * _2709) + _1062)) * _2729) * _2444);
    float _2876;
    float _2878;
    float _2880;
    if (_2484)
    {
        _2876 = _2818;
        _2878 = _2819;
        _2880 = _2820;
    }
    else
    {
        uint _2882 = _2408 + 2u;
        uint _2886 = _2408 + 10u;
        float _2900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2882].w)) * _901) * 0.949999988079071044921875);
        float _2901 = _2900 * _2900;
        float _2902 = cbLight._m0[_2882].x + _977;
        float _2903 = cbLight._m0[_2882].y + _978;
        float _2904 = cbLight._m0[_2882].z + _979;
        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
        float _2909 = _2908 * _2902;
        float _2910 = _2908 * _2903;
        float _2911 = _2908 * _2904;
        float _2912 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2882].xyz));
        float _4956 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _2916 = dot(vec3(_898, _899, _900), vec3(_2909, _2910, _2911));
        float _4967 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _2920 = dot(vec3(cbLight._m0[_2882].xyz), vec3(_2909, _2910, _2911));
        float _4978 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2924 = _2901 * _2901;
        float _2928 = ((_2919 * _2919) * (_2924 + (-1.0))) + 1.0;
        float _2935 = exp2(log2(1.0 - (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0)))) * 5.0);
        float _2942 = 1.0 - _2901;
        float _2952 = (0.5 / (((_2684 * ((_2915 * _2942) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2942) + _2901) * _2915))) * _2915;
        float _4989 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2954 = (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2924 / ((_2928 * _2928) * 3.141590118408203125));
        float _2955 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
        _2876 = (((((_2935 * _2706) + _1059) * cbLight._m0[_2886].x) * _2954) * _2955) + _2818;
        _2878 = (((((_2935 * _2708) + _1061) * cbLight._m0[_2886].y) * _2954) * _2955) + _2819;
        _2880 = (((((_2935 * _2709) + _1062) * cbLight._m0[_2886].z) * _2954) * _2955) + _2820;
    }
    float _2986;
    float _2988;
    float _2990;
    if (_2593)
    {
        _2986 = _2876;
        _2988 = _2878;
        _2990 = _2880;
    }
    else
    {
        uint _2997 = _2408 + 3u;
        uint _3001 = _2408 + 11u;
        float _3015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2997].w)) * _901) * 0.949999988079071044921875);
        float _3016 = _3015 * _3015;
        float _3017 = cbLight._m0[_2997].x + _977;
        float _3018 = cbLight._m0[_2997].y + _978;
        float _3019 = cbLight._m0[_2997].z + _979;
        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
        float _3024 = _3023 * _3017;
        float _3025 = _3023 * _3018;
        float _3026 = _3023 * _3019;
        float _3027 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2997].xyz));
        float _5005 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3030 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
        float _3031 = dot(vec3(_898, _899, _900), vec3(_3024, _3025, _3026));
        float _5016 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3034 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
        float _3035 = dot(vec3(cbLight._m0[_2997].xyz), vec3(_3024, _3025, _3026));
        float _5027 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3039 = _3016 * _3016;
        float _3043 = ((_3034 * _3034) * (_3039 + (-1.0))) + 1.0;
        float _3050 = exp2(log2(1.0 - (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0)))) * 5.0);
        float _3057 = 1.0 - _3016;
        float _3067 = (0.5 / (((_2684 * ((_3030 * _3057) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _3057) + _3016) * _3030))) * _3030;
        float _5038 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3069 = (isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3039 / ((_3043 * _3043) * 3.141590118408203125));
        float _3070 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2986 = (((((_3050 * _2706) + _1059) * cbLight._m0[_3001].x) * _3069) * _3070) + _2876;
        _2988 = (((((_3050 * _2708) + _1061) * cbLight._m0[_3001].y) * _3069) * _3070) + _2878;
        _2990 = (((((_3050 * _2709) + _1062) * cbLight._m0[_3001].z) * _3069) * _3070) + _2880;
    }
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_2406.y == 0u)
    {
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.x;
        uint _3103 = uint((float(_3091.y) * floor(float(uint(cbSceneParam._m0[85u].y * _998) / _3092))) + floor(float(uint(cbSceneParam._m0[85u].x * _997) / _3092)));
        float _3113 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3114 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
        uint _3117 = uint(isnan(14.0) ? _3114 : (isnan(_3114) ? 14.0 : min(_3114, 14.0)));
        uvec4 _3122 = texelFetch(g_lightClusterGridBuffer, int(((_3117 << 2u) + (_3103 << 6u)) >> 2u));
        uint _3123 = _3122.x;
        uint _3124 = _3091.z;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((((1u << ((_3124 >> 4u) & 15u)) + 4294967295u) & _3123) == 0u) || ((_3124 & 240u) == 0u))
        {
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
        }
        else
        {
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            uint _3361 = 0u;
            uint _3370;
            bool _3371;
            for (;;)
            {
                _3370 = texelFetch(g_lightClassification, int((((_3117 << 5u) + (_3103 << 9u)) + (_3361 << 2u)) >> 2u)).x;
                _3371 = _3370 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3371)
                {
                    frontier_phi_71_pred = _3360;
                    frontier_phi_71_pred_1 = _3359;
                    frontier_phi_71_pred_2 = _3358;
                    frontier_phi_71_pred_3 = _3357;
                    frontier_phi_71_pred_4 = _3356;
                    frontier_phi_71_pred_5 = _3355;
                }
                else
                {
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    uint _3506;
                    _3500 = _3355;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3360;
                    _3506 = _3370;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    for (;;)
                    {
                        uint _3510 = uint(findLSB(_3506)) + (_3361 << 5u);
                        uint _3507 = (_3506 + 4294967295u) & _3506;
                        uint _3512 = _3510 * 48u;
                        vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 3u)).x));
                        uint _3532 = (_3510 * 48u) + 4u;
                        vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 3u)).x));
                        uint _3551 = (_3510 * 48u) + 8u;
                        vec3 _3562 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3551)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 2u)).x));
                        float _3566 = _3526.x - _2182;
                        float _3567 = _3526.y - _2183;
                        float _3568 = _3526.z - _2184;
                        float _3569 = dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568));
                        float _3572 = inversesqrt(_3569);
                        float _3573 = _3572 * _3566;
                        float _3574 = _3572 * _3567;
                        float _3575 = _3572 * _3568;
                        float _3576 = dot(vec3(_1016, _1019, _1022), vec3(_3573, _3574, _3575));
                        float _3581 = 1.0 - (_3569 * _3526.w);
                        float _5064 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3582 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3583 = sqrt(_3569) * _3545.w;
                        float _3586 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                        float _3587 = _3586 * _3586;
                        float _3590 = ((1.0 - _3587) * _3576) + _3587;
                        float _3593 = _3583 * _3583;
                        float _3597 = ((isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0))) * _3582) / ((_3593 * 0.699999988079071044921875) + 1.0);
                        float _3601 = (-0.0) - _2182;
                        float _3602 = (-0.0) - _2183;
                        float _3603 = (-0.0) - _2184;
                        float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                        float _3608 = _3607 * _3601;
                        float _3609 = _3607 * _3602;
                        float _3610 = _3607 * _3603;
                        float _3617 = exp2(log2(1.0 / ((_3593 * 3.5) + 5.0)) * 0.25);
                        float _3618 = 1.0 - _1091;
                        float _3625 = sqrt(1.0 - ((1.0 - (_3618 * _3618)) * (1.0 - (_3617 * _3617))));
                        float _3626 = _3625 * _3625;
                        float _3627 = _3626 * _3626;
                        float _3628 = _3608 + _3573;
                        float _3629 = _3609 + _3574;
                        float _3630 = _3610 + _3575;
                        float _3634 = inversesqrt(dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630)));
                        float _3638 = dot(vec3(_1016, _1019, _1022), vec3(_3608, _3609, _3610));
                        float _5080 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                        float _3641 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                        float _3642 = dot(vec3(_1016, _1019, _1022), vec3(_3634 * _3628, _3634 * _3629, _3634 * _3630));
                        float _5091 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                        float _3645 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                        float _3649 = ((_3645 * _3645) * (_3627 + (-1.0))) + 1.0;
                        float _3650 = _3586 * _3626;
                        float _3651 = _3650 * _3650;
                        float _3654 = ((1.0 - _3651) * _3576) + _3651;
                        float _5102 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                        float _3655 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                        float _3656 = 1.0 - _3626;
                        float _3666 = (0.5 / (((_3655 * ((_3641 * _3656) + _3626)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3626) * _3641))) * _3655;
                        float _5113 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                        float _3677 = (((_3627 * 3.1415927410125732421875) * (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0)))) / ((_3649 * _3649) * ((_3593 * 2.1991131305694580078125) + 3.141590118408203125))) * _3582;
                        _3430 = (_3597 * _3545.x) + _3503;
                        _3431 = (_3597 * _3545.y) + _3504;
                        _3432 = (_3597 * _3545.z) + _3505;
                        _3427 = (_3677 * _3562.x) + _3500;
                        _3428 = (_3677 * _3562.y) + _3501;
                        _3429 = (_3677 * _3562.z) + _3502;
                        if (_3507 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3500 = _3427;
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3432;
                            _3506 = _3507;
                        }
                    }
                    frontier_phi_71_pred = _3432;
                    frontier_phi_71_pred_1 = _3431;
                    frontier_phi_71_pred_2 = _3430;
                    frontier_phi_71_pred_3 = _3429;
                    frontier_phi_71_pred_4 = _3428;
                    frontier_phi_71_pred_5 = _3427;
                }
                _3214 = frontier_phi_71_pred;
                _3212 = frontier_phi_71_pred_1;
                _3210 = frontier_phi_71_pred_2;
                _3208 = frontier_phi_71_pred_3;
                _3206 = frontier_phi_71_pred_4;
                _3204 = frontier_phi_71_pred_5;
                uint _3362 = _3361 + 1u;
                if (_3362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3355 = _3204;
                    _3356 = _3206;
                    _3357 = _3208;
                    _3358 = _3210;
                    _3359 = _3212;
                    _3360 = _3214;
                    _3361 = _3362;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
        }
        uvec4 _3217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3218 = _3217.z;
        uint _3220 = (_3218 >> 8u) & 15u;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        if (((4294967295u << _3220) & _3123) == 0u)
        {
            _3323 = _3203;
            _3325 = _3205;
            _3327 = _3207;
            _3329 = _3209;
            _3331 = _3211;
            _3333 = _3213;
        }
        else
        {
            float _3348 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _3349 = _3348 * _2182;
            float _3350 = _3348 * _2183;
            float _3351 = _3348 * _2184;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3220 < ((_3218 >> 12u) & 15u))
            {
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3483 = _3203;
                float _3484 = _3205;
                float _3485 = _3207;
                float _3486 = _3209;
                float _3487 = _3211;
                float _3488 = _3213;
                uint _3489 = _3220;
                uint _3498;
                bool _3499;
                for (;;)
                {
                    _3498 = texelFetch(g_lightClassification, int((((_3117 << 5u) + (_3103 << 9u)) + (_3489 << 2u)) >> 2u)).x;
                    _3499 = _3498 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3499)
                    {
                        frontier_phi_82_pred = _3488;
                        frontier_phi_82_pred_1 = _3487;
                        frontier_phi_82_pred_2 = _3486;
                        frontier_phi_82_pred_3 = _3485;
                        frontier_phi_82_pred_4 = _3484;
                        frontier_phi_82_pred_5 = _3483;
                    }
                    else
                    {
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3989;
                        float _3704 = _3483;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        float _3709 = _3488;
                        uint _3710 = _3498;
                        uint _3711;
                        vec4 _3736;
                        float _3737;
                        vec4 _3752;
                        vec3 _3764;
                        vec4 _3779;
                        vec4 _3794;
                        float _3840;
                        bool _3841;
                        for (;;)
                        {
                            uint _3721 = ((_3489 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3710));
                            _3711 = (_3710 + 4294967295u) & _3710;
                            uint _3723 = _3721 * 40u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            _3737 = _3736.w;
                            uint _3739 = (_3721 * 40u) + 4u;
                            _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3754 = (_3721 * 40u) + 8u;
                            _3764 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x));
                            uint _3766 = (_3721 * 40u) + 16u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3721 * 40u) + 20u;
                            _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            uint _3796 = (_3721 * 40u) + 24u;
                            vec4 _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3815 = (_3721 * 40u) + 28u;
                            vec4 _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            _3840 = fma(_2184, _3828.z, fma(_2183, _3828.y, _3828.x * _2182)) + _3828.w;
                            _3841 = !((fma(_2184, _3809.z, fma(_2183, _3809.y, _3809.x * _2182)) + _3809.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3841)
                            {
                                float _3868 = _3736.x - _2182;
                                float _3869 = _3736.y - _2183;
                                float _3870 = _3736.z - _2184;
                                float _3871 = dot(vec3(_3868, _3869, _3870), vec3(_3868, _3869, _3870));
                                float _3874 = inversesqrt(_3871);
                                float _3875 = _3874 * _3868;
                                float _3876 = _3874 * _3869;
                                float _3877 = _3874 * _3870;
                                float _3881 = 1.0 - (_3871 / (_3737 * _3737));
                                float _5124 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3886 = sqrt(_3871) * _3752.w;
                                float _3888 = 1.39999997615814208984375 / (_3886 + 1.39999997615814208984375);
                                float _3889 = _3888 * _3888;
                                float _3892 = ((1.0 - _3889) * dot(vec3(_3875, _3876, _3877), vec3(_1016, _1019, _1022))) + _3889;
                                float _3895 = _3886 * _3886;
                                float _3899 = (fma(_2184, _3779.z, fma(_2183, _3779.y, _3779.x * _2182)) + _3779.w) / _3840;
                                float _3900 = (fma(_2184, _3794.z, fma(_2183, _3794.y, _3794.x * _2182)) + _3794.w) / _3840;
                                float _3904 = 1.0 - dot(vec2(_3899, _3900), vec2(_3899, _3900));
                                float _5140 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3905 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3906 = _3905 * (((isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0))) * _3882) / ((_3895 * 0.699999988079071044921875) + 1.0));
                                float _3918 = exp2(log2(1.0 / ((_3895 * 3.5) + 5.0)) * 0.25);
                                float _3919 = 1.0 - _1091;
                                float _3926 = sqrt(1.0 - ((1.0 - (_3919 * _3919)) * (1.0 - (_3918 * _3918))));
                                float _3927 = _3926 * _3926;
                                float _3928 = _3927 * _3927;
                                float _3929 = _3875 - _3349;
                                float _3930 = _3876 - _3350;
                                float _3931 = _3877 - _3351;
                                float _3935 = inversesqrt(dot(vec3(_3929, _3930, _3931), vec3(_3929, _3930, _3931)));
                                float _3939 = dot(vec3(_1016, _1019, _1022), vec3((-0.0) - _3349, (-0.0) - _3350, (-0.0) - _3351));
                                float _5151 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3942 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3943 = dot(vec3(_1016, _1019, _1022), vec3(_3935 * _3929, _3935 * _3930, _3935 * _3931));
                                float _5162 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3946 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3950 = ((_3946 * _3946) * (_3928 + (-1.0))) + 1.0;
                                float _3951 = _3888 * _3927;
                                float _3952 = _3951 * _3951;
                                float _3958 = ((1.0 - _3952) * dot(vec3(_1016, _1019, _1022), vec3(_3875, _3876, _3877))) + _3952;
                                float _5173 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3959 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3960 = 1.0 - _3927;
                                float _3970 = (0.5 / (((_3959 * ((_3942 * _3960) + _3927)) + 9.9999999392252902907785028219223e-09) + (((_3959 * _3960) + _3927) * _3942))) * _3959;
                                float _5184 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3980 = (_3905 * _3882) * (((_3928 * 3.1415927410125732421875) * (isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0)))) / ((_3950 * _3950) * ((_3895 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3906 * _3752.z;
                                frontier_phi_88_pred_1 = _3906 * _3752.y;
                                frontier_phi_88_pred_2 = _3906 * _3752.x;
                                frontier_phi_88_pred_3 = _3980 * _3764.z;
                                frontier_phi_88_pred_4 = _3980 * _3764.y;
                                frontier_phi_88_pred_5 = _3980 * _3764.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3989 = frontier_phi_88_pred;
                            _3988 = frontier_phi_88_pred_1;
                            _3987 = frontier_phi_88_pred_2;
                            _3986 = frontier_phi_88_pred_3;
                            _3985 = frontier_phi_88_pred_4;
                            _3984 = frontier_phi_88_pred_5;
                            _3694 = _3987 + _3707;
                            _3695 = _3988 + _3708;
                            _3696 = _3989 + _3709;
                            _3691 = _3984 + _3704;
                            _3692 = _3985 + _3705;
                            _3693 = _3986 + _3706;
                            if (_3711 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3696;
                                _3710 = _3711;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3696;
                        frontier_phi_82_pred_1 = _3695;
                        frontier_phi_82_pred_2 = _3694;
                        frontier_phi_82_pred_3 = _3693;
                        frontier_phi_82_pred_4 = _3692;
                        frontier_phi_82_pred_5 = _3691;
                    }
                    _3334 = frontier_phi_82_pred;
                    _3332 = frontier_phi_82_pred_1;
                    _3330 = frontier_phi_82_pred_2;
                    _3328 = frontier_phi_82_pred_3;
                    _3326 = frontier_phi_82_pred_4;
                    _3324 = frontier_phi_82_pred_5;
                    uint _3490 = _3489 + 1u;
                    if (_3490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3483 = _3324;
                        _3484 = _3326;
                        _3485 = _3328;
                        _3486 = _3330;
                        _3487 = _3332;
                        _3488 = _3334;
                        _3489 = _3490;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3330;
                frontier_phi_63_64_ladder_1 = _3334;
                frontier_phi_63_64_ladder_2 = _3332;
                frontier_phi_63_64_ladder_3 = _3328;
                frontier_phi_63_64_ladder_4 = _3326;
                frontier_phi_63_64_ladder_5 = _3324;
            }
            else
            {
                frontier_phi_63_64_ladder = _3209;
                frontier_phi_63_64_ladder_1 = _3213;
                frontier_phi_63_64_ladder_2 = _3211;
                frontier_phi_63_64_ladder_3 = _3207;
                frontier_phi_63_64_ladder_4 = _3205;
                frontier_phi_63_64_ladder_5 = _3203;
            }
            _3323 = frontier_phi_63_64_ladder_5;
            _3325 = frontier_phi_63_64_ladder_4;
            _3327 = frontier_phi_63_64_ladder_3;
            _3329 = frontier_phi_63_64_ladder;
            _3331 = frontier_phi_63_64_ladder_2;
            _3333 = frontier_phi_63_64_ladder_1;
        }
        float _3338 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _3136 = (_3338 * _3329) + _2648;
        _3138 = (_3338 * _3331) + _2650;
        _3140 = (_3338 * _3333) + _2652;
        _3142 = ((_3323 * _1059) * _3338) + _2986;
        _3144 = ((_3325 * _1061) * _3338) + _2988;
        _3146 = ((_3327 * _1062) * _3338) + _2990;
    }
    else
    {
        _3136 = _2648;
        _3138 = _2650;
        _3140 = _2652;
        _3142 = _2986;
        _3144 = _2988;
        _3146 = _2990;
    }
    float _5200 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5211 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _5222 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _3163 = ((isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0))) * (_3136 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1075))) + ((_3142 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    float _3164 = ((isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0))) * (_3138 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1075))) + ((_3144 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    float _3165 = ((isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0))) * (_3140 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1075))) + ((_3146 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    uint _3166 = _287 + 6u;
    float _3174 = _997 / cbSceneParam._m0[86u].x;
    float _3175 = _998 / cbSceneParam._m0[86u].y;
    vec4 _3189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, (log2((isnan(cbSceneParam._m0[77u].w) ? _920 : (isnan(_920) ? cbSceneParam._m0[77u].w : min(_920, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3191 = _3189.x;
    float _3192 = _3189.y;
    float _3193 = _3189.z;
    float _3194 = _3189.w;
    float _3265;
    float _3267;
    float _3269;
    float _3271;
    if (_920 > cbSceneParam._m0[78u].w)
    {
        float _3228 = isnan(_920) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _920 : min(cbSceneParam._m0[80u].w, _920));
        float _3229 = _3228 / _920;
        float _3240 = _3229 * _970;
        float _3241 = _971 * _3229;
        float _3242 = (-0.0) - _3241;
        float _3243 = _3229 * _972;
        float _3245 = (cbSceneParam._m0[77u].w * _3242) / _3228;
        float _3246 = _3245 + cbSceneParam._m0[79u].w;
        float _3247 = cbSceneParam._m0[79u].w - _3241;
        float _3253 = sqrt(((_3240 * _3240) + (_3241 * _3241)) + (_3243 * _3243));
        float _3256 = (1.0 - (cbSceneParam._m0[77u].w / _3228)) * _3253;
        float _3261 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3263 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3440;
        if (abs((_3242 - _3245) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3440 = ((((_3246 > 0.0) ? exp2(_3261 * _3246) : (2.0 - exp2(_3263 * _3246))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3256;
        }
        else
        {
            float _3384 = 1.0 / cbSceneParam._m0[80u].x;
            float _3385 = isnan(_3247) ? _3246 : (isnan(_3246) ? _3247 : max(_3246, _3247));
            float _3386 = isnan(_3247) ? _3246 : (isnan(_3246) ? _3247 : min(_3246, _3247));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            float _3396 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : min(_3386, 0.0));
            _3440 = ((abs(_3253 / _3242) * cbSceneParam._m0[80u].y) * ((((_3395 - _3396) * 2.0) - ((exp2(_3261 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0)))) - exp2(_3261 * (isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))))) * _3384)) - ((exp2(_3263 * _3395) - exp2(_3263 * _3396)) * _3384))) + (_3256 * cbSceneParam._m0[80u].z);
        }
        vec4 _3442 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, 1.0), 0.0);
        float _3451 = exp2((_3440 * (-1.44269502162933349609375)) * (1.0 - _3442.w));
        float _3452 = log2(_3451);
        float _3468 = log2(_3194);
        _3265 = (exp2(_3468 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3452 * cbSceneParam._m0[78u].x)) * _3442.x) / cbSceneParam._m0[78u].x)) + _3191;
        _3267 = (exp2(_3468 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3452 * cbSceneParam._m0[78u].y)) * _3442.y) / cbSceneParam._m0[78u].y)) + _3192;
        _3269 = (exp2(_3468 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3452 * cbSceneParam._m0[78u].z)) * _3442.z) / cbSceneParam._m0[78u].z)) + _3193;
        _3271 = _3451 * _3194;
    }
    else
    {
        _3265 = _3191;
        _3267 = _3192;
        _3269 = _3193;
        _3271 = _3194;
    }
    bool _3478;
    vec4 _3281;
    vec4 _3303;
    float _3305;
    float _3309;
    float _3310;
    float _3311;
    float _3312;
    bool _3322;
    for (;;)
    {
        _3281 = cbMatDynParam._m0[0u];
        float _3283 = roundEven(_3281.y);
        bool _3284 = _3283 == 3.0;
        float _3285 = log2(_3271);
        float _3292 = exp2(_3285 * cbSceneParam._m0[78u].x) * _3163;
        float _3293 = exp2(_3285 * cbSceneParam._m0[78u].y) * _3164;
        float _3294 = exp2(_3285 * cbSceneParam._m0[78u].z) * _3165;
        float _3301 = _986 + (-0.5);
        _3303 = cbMtdParam._m0[1u];
        _3305 = _3303.y * _3301;
        float _3308 = (_3283 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3309 = _3308 * (_3284 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3265)));
        _3310 = _3308 * (_3284 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3267)));
        _3311 = _3308 * (_3284 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3269)));
        _3312 = _3301 * 0.999000012874603271484375;
        _3322 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3322)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3312) < 0.5)
            {
                _3478 = true;
                break;
            }
        }
        uint _3419 = _1035 + uint(_3281.w);
        if ((cbInstanceData._m0[_3419].w < 1.0) && ((cbInstanceData._m0[_3419].w + _3312) < 0.5))
        {
            _3478 = true;
            break;
        }
        if ((_3305 + 1.0) < _3303.x)
        {
            _3478 = true;
            break;
        }
        _3478 = false;
        break;
    }
    float _3682;
    if (_3478)
    {
        discard_state = true;
        _3682 = 0.0;
    }
    else
    {
        _3682 = cbInstanceData._m0[_3166].w;
    }
    SV_Target.x = _3309;
    SV_Target.y = _3310;
    SV_Target.z = _3311;
    SV_Target.w = _3682;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3166].w;
    discard_exit();
}


