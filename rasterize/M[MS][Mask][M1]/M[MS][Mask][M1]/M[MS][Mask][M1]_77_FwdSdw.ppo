#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1492;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4100 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _446 = (_439 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _447 = (_439 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _448 = (_439 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4111 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _525 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446);
    float _528 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447);
    float _531 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448);
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _577 = ((_549.x - _568) * _439) + _568;
    float _578 = ((_549.y - _569) * _439) + _569;
    float _579 = ((_549.z - _570) * _439) + _570;
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _604 = ((_591.z - _579) * _512) + _579;
    float _607 = ((((_591.x - _577) * _512) + _577) * 2.0) + (-1.0);
    float _609 = ((((_591.y - _578) * _512) + _578) * 2.0) + (-1.0);
    float _610 = dot(vec2(_607, _609), vec2(_607, _609));
    float _4122 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _641 = (((_629.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _607;
    float _642 = (((_629.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _609;
    float _645 = fma(_615, _251, fma(_642, _258, _641 * _244));
    float _648 = fma(_615, _252, fma(_642, _259, _641 * _245));
    float _651 = fma(_615, _253, fma(_642, _260, _641 * _246));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _694 = (cbMtdParam._m0[19u].x + dot(vec4(_655 * _645, _655 * _648, _655 * _651, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_684 - _685) * cbMtdParam._m0[24u].z) + _685) * cbMtdParam._m0[21u].z);
    float _4133 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _697 = (-0.0) - cbMtdParam._m0[24u].x;
    float _699 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
    float _707 = _695 - ((_695 * TEXCOORD_8.x) * _700);
    float _708 = _695 - ((_695 * TEXCOORD_8.y) * _700);
    float _709 = _695 - ((_695 * TEXCOORD_8.z) * _700);
    float _716 = (_707 * (cbMtdParam._m0[17u].x - _525)) + _525;
    float _717 = (_708 * (cbMtdParam._m0[17u].y - _528)) + _528;
    float _718 = (_709 * (cbMtdParam._m0[17u].z - _531)) + _531;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _732 = _730.x;
    float _733 = 1.0 - _732;
    float _759 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_732 - _733) * cbMtdParam._m0[24u].w) + _733) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4154 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _768 = ((((cbMtdParam._m0[10u].x - _716) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _760) + _716;
    float _769 = ((((cbMtdParam._m0[10u].y - _717) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _760) + _717;
    float _770 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _718)) * _760) + _718;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _798 = _796.x;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _798) * _439) + _798;
    float _832 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _815) * _512) + _815;
    float _836 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _832) * cbMtdParam._m0[19u].z) + _832;
    float _838 = _836 - (_836 * _707);
    float _840 = _838 - (_838 * _760);
    float _844 = (cbMtdParam._m0[19u].w * (_629.z - _604)) + _604;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _865 = (_858.x * 2.0) + (-1.0);
    float _866 = (_858.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _4165 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = ((_858.z - _844) * _707) + _844;
    float _878 = ((cbMtdParam._m0[23u].x - _875) * _760) + _875;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _903 = (_897.x * 2.0) + (-1.0);
    float _904 = (_897.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _4176 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _920 = ((sqrt(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) - _615) * _709) + _615;
    float _923 = (((_865 - _641) * _707) + _641) + (cbMtdParam._m0[21u].x * _641);
    float _924 = (((_866 - _642) * _708) + _642) + (cbMtdParam._m0[21u].x * _642);
    float _935 = (((_903 - _923) + (_923 * cbMtdParam._m0[22u].z)) * _760) + _923;
    float _936 = (((_904 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _760) + _924;
    float _937 = (_760 * (sqrt(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) - _920)) + _920;
    float _939 = cbMtdParam._m0[22u].x + _629.w;
    float _942 = fma(_937, _251, fma(_936, _258, _935 * _244));
    float _945 = fma(_937, _252, fma(_936, _259, _935 * _245));
    float _948 = fma(_937, _253, fma(_936, _260, _935 * _246));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4187 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _956 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4209 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4220 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4231 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4242 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _961 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    float _1040 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1041 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1059 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1062 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1065 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1079 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1085 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * cbInstanceData._m0[_1079].x;
    float _1086 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * cbInstanceData._m0[_1079].y;
    float _1087 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * cbInstanceData._m0[_1079].z;
    float _4253 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _1091 = 1.0 - _961;
    float _1092 = _1088 * _1091;
    float _1093 = _1089 * _1091;
    float _1094 = _1090 * _1091;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _961;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _961;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _961;
    float _1102 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    float _1105 = _1101 + 0.039999999105930328369140625;
    vec4 _1114 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1040, cbSceneParam._m0[86u].y * _1041));
    float _1118 = ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * TEXCOORD_5.w) * _1114.x;
    float _1119 = dot(vec3(_953, _954, _955), vec3(_1032, _1033, _1034));
    float _1122 = _1119 * 2.0;
    float _1126 = (_1122 * _953) - _1032;
    float _1127 = (_1122 * _954) - _1033;
    float _1128 = (_1122 * _955) - _1034;
    float _1132 = abs(dot(vec3(_1032, _1033, _1034), vec3(_953, _954, _955)));
    float _4286 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1134 = sqrt(_956);
    float _1147 = exp2((_1134 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1134 * 3.0));
    float _1153 = (1.0 - _1147) * ((_1134 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1154 = _1147 * _1134;
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1491;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1216 = fma(_1190, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182));
        float _1220 = fma(_1190, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182));
        float _1224 = fma(_1190, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182));
        float _1249 = _1182 + _953;
        float _1250 = _1186 + _954;
        float _1251 = _1190 + _955;
        float _1261 = fma(_1251, cbModelParam._m0[26u].z, fma(_1250, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1249)) - _1216;
        float _1262 = fma(_1251, cbModelParam._m0[27u].z, fma(_1250, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1249)) - _1220;
        float _1263 = fma(_1251, cbModelParam._m0[28u].z, fma(_1250, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1249)) - _1224;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1216 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1220 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[34u].z) + ((((((_1224 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1319 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1285.x + (-0.5));
        float _1321 = _1319 * (_1285.y + (-0.5));
        float _1322 = _1319 * (_1285.z + (-0.5));
        float _1329 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1292.x + (-0.5));
        float _1331 = _1329 * (_1292.y + (-0.5));
        float _1332 = _1329 * (_1292.z + (-0.5));
        float _1339 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1299.x + (-0.5));
        float _1341 = _1339 * (_1299.y + (-0.5));
        float _1342 = _1339 * (_1299.z + (-0.5));
        float _1349 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1306.x + (-0.5));
        float _1351 = _1349 * (_1306.y + (-0.5));
        float _1352 = _1349 * (_1306.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1373 = (dot(vec3(_953, _954, _955), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1383 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4334 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1385 + 1.0))) + _1390) * _1353;
        float _1400 = _1321 * 0.5;
        float _1401 = _1331 * 0.5;
        float _1402 = _1341 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_953, _954, _955), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4367 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1427 + 1.0))) + _1432) * _1354;
        float _1442 = _1322 * 0.5;
        float _1443 = _1332 * 0.5;
        float _1444 = _1342 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_953, _954, _955), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4400 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1469 + 1.0))) + _1474) * _1355;
        _1491 = _1322;
        _1493 = _1321;
        _1494 = _1320;
        _1495 = _1332;
        _1496 = _1331;
        _1497 = _1330;
        _1498 = _1342;
        _1499 = _1341;
        _1500 = _1340;
        _1501 = _1355;
        _1502 = _1354;
        _1503 = _1353;
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
    }
    else
    {
        _1491 = _1492;
        _1493 = _1492;
        _1494 = _1492;
        _1495 = _1492;
        _1496 = _1492;
        _1497 = _1492;
        _1498 = _1492;
        _1499 = _1492;
        _1500 = _1492;
        _1501 = _1492;
        _1502 = _1492;
        _1503 = _1492;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1530 = fma(_1190, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182));
        float _1534 = fma(_1190, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182));
        float _1538 = fma(_1190, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182));
        float _1561 = _1182 + _953;
        float _1562 = _1186 + _954;
        float _1563 = _1190 + _955;
        float _1573 = fma(_1563, cbModelParam._m0[30u].z, fma(_1562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1561)) - _1530;
        float _1574 = fma(_1563, cbModelParam._m0[31u].z, fma(_1562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1561)) - _1534;
        float _1575 = fma(_1563, cbModelParam._m0[32u].z, fma(_1562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1561)) - _1538;
        float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
        float _1592 = ((_1579 * _1573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1593 = ((_1579 * _1574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1579 * _1575) / cbModelParam._m0[35u].z) + ((((((_1538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        float _1629 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1596.x + (-0.5));
        float _1631 = _1629 * (_1596.y + (-0.5));
        float _1632 = _1629 * (_1596.z + (-0.5));
        float _1639 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1603.x + (-0.5));
        float _1641 = _1639 * (_1603.y + (-0.5));
        float _1642 = _1639 * (_1603.z + (-0.5));
        float _1649 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1610.x + (-0.5));
        float _1651 = _1649 * (_1610.y + (-0.5));
        float _1652 = _1649 * (_1610.z + (-0.5));
        float _1659 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1617.x + (-0.5));
        float _1661 = _1659 * (_1617.y + (-0.5));
        float _1662 = _1659 * (_1617.z + (-0.5));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = _1630 * 0.5;
        float _1667 = _1640 * 0.5;
        float _1668 = _1650 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_953, _954, _955), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4463 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1693 + 1.0))) + _1698) * _1663;
        float _1708 = _1631 * 0.5;
        float _1709 = _1641 * 0.5;
        float _1710 = _1651 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_953, _954, _955), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4496 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1735 + 1.0))) + _1740) * _1664;
        float _1750 = _1632 * 0.5;
        float _1751 = _1642 * 0.5;
        float _1752 = _1652 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_953, _954, _955), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4529 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1777 + 1.0))) + _1782) * _1665;
        _1799 = _1632;
        _1800 = _1631;
        _1801 = _1630;
        _1802 = _1642;
        _1803 = _1641;
        _1804 = _1640;
        _1805 = _1652;
        _1806 = _1651;
        _1807 = _1650;
        _1808 = _1665;
        _1809 = _1664;
        _1810 = _1663;
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    }
    else
    {
        _1799 = _1492;
        _1800 = _1492;
        _1801 = _1492;
        _1802 = _1492;
        _1803 = _1492;
        _1804 = _1492;
        _1805 = _1492;
        _1806 = _1492;
        _1807 = _1492;
        _1808 = _1492;
        _1809 = _1492;
        _1810 = _1492;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1504)) + _1504;
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1505)) + _1505;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1506)) + _1506;
    float _1846 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1823));
    float _1867 = _1126 * 0.5;
    float _1868 = _1127 * 0.5;
    float _1869 = _1128 * 0.5;
    float _1870 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1873 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1876 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1910;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1883 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1491, _1495, _1498, _1501));
        float _1887 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1493, _1496, _1499, _1502));
        float _1891 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1898 = dot(vec4(cbModelParam._m0[39u]), vec4(_1867, _1868, _1869, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1921;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1912 = dot(vec4(cbModelParam._m0[40u]), vec4(_1867, _1868, _1869, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1925 = (_1921 * cbModelParam._m0[1u].x) + (_1910 * (1.0 - cbModelParam._m0[1u].x));
    float _1935 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1935 : min(cbModelParam._m0[25u].z, _1935));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1984 = fma(_1190, cbModelParam._m0[13u].z, fma(_1186, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1182)) + cbModelParam._m0[13u].w;
        float _1988 = fma(_1190, cbModelParam._m0[14u].z, fma(_1186, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1182)) + cbModelParam._m0[14u].w;
        float _1992 = fma(_1190, cbModelParam._m0[15u].z, fma(_1186, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1182)) + cbModelParam._m0[15u].w;
        float _1995 = fma(_1128, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126));
        float _1998 = fma(_1128, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126));
        float _2001 = fma(_1128, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126));
        float _2029;
        if (_1995 > 0.0)
        {
            _2029 = abs((1.0 - _1984) / _1995);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1984 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2029 = frontier_phi_14_12_ladder;
        }
        float _2201;
        if (_1998 > 0.0)
        {
            _2201 = abs((1.0 - _1988) / _1998);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1988 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2201 = frontier_phi_23_19_ladder;
        }
        float _2496;
        if (_2001 > 0.0)
        {
            _2496 = abs((1.0 - _1992) / _2001);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1992 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2496 = frontier_phi_35_30_ladder;
        }
        float _2498 = isnan(_2201) ? _2029 : (isnan(_2029) ? _2201 : min(_2029, _2201));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1995) + _1984;
        float _2504 = (_2499 * _1998) + _1988;
        float _2505 = (_2499 * _2001) + _1992;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2506;
        float _2510 = _2506 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 > _2510) || ((_2504 < _2508) || ((_2503 < _2508) || (_2503 > _2510))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2505, cbModelParam._m0[9u].z, fma(_2504, cbModelParam._m0[9u].y, _2503 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2505, cbModelParam._m0[10u].z, fma(_2504, cbModelParam._m0[10u].y, _2503 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2505, cbModelParam._m0[11u].z, fma(_2504, cbModelParam._m0[11u].y, _2503 * cbModelParam._m0[11u].x))), _1936);
            frontier_phi_13_35_ladder = _2650.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2650.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2650.x * cbModelParam._m0[1u].y;
        }
        _2017 = frontier_phi_13_35_ladder_2;
        _2019 = frontier_phi_13_35_ladder_1;
        _2021 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1126, _1127, _1128), _1936);
        _2017 = _2005.x * cbModelParam._m0[1u].y;
        _2019 = _2005.y * cbModelParam._m0[1u].y;
        _2021 = _2005.z * cbModelParam._m0[1u].y;
    }
    float _2025 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2026 = isnan(_2025) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2025 : min(cbModelParam._m0[25u].w, _2025));
    float _2116;
    float _2118;
    float _2120;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2080 = fma(_1190, cbModelParam._m0[21u].z, fma(_1186, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1182)) + cbModelParam._m0[21u].w;
        float _2084 = fma(_1190, cbModelParam._m0[22u].z, fma(_1186, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1182)) + cbModelParam._m0[22u].w;
        float _2088 = fma(_1190, cbModelParam._m0[23u].z, fma(_1186, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1182)) + cbModelParam._m0[23u].w;
        float _2091 = fma(_1128, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126));
        float _2094 = fma(_1128, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126));
        float _2097 = fma(_1128, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126));
        float _2206;
        if (_2091 > 0.0)
        {
            _2206 = abs((1.0 - _2080) / _2091);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2080 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2206 = frontier_phi_25_21_ladder;
        }
        float _2523;
        if (_2094 > 0.0)
        {
            _2523 = abs((1.0 - _2084) / _2094);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2084 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2523 = frontier_phi_37_32_ladder;
        }
        float _2861;
        if (_2097 > 0.0)
        {
            _2861 = abs((1.0 - _2088) / _2097);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2088 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2861 = frontier_phi_47_44_ladder;
        }
        float _2863 = isnan(_2523) ? _2206 : (isnan(_2206) ? _2523 : min(_2206, _2523));
        float _2864 = isnan(_2861) ? _2863 : (isnan(_2863) ? _2861 : min(_2863, _2861));
        float _2868 = (_2864 * _2091) + _2080;
        float _2869 = (_2864 * _2094) + _2084;
        float _2870 = (_2864 * _2097) + _2088;
        float _2871 = _2864 * 9.9999997473787516355514526367188e-05;
        float _2872 = (-1.0) - _2871;
        float _2874 = _2871 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2870 > _2874) || ((_2870 < _2872) || ((_2869 > _2874) || ((_2869 < _2872) || ((_2868 < _2872) || (_2868 > _2874))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2870, cbModelParam._m0[17u].z, fma(_2869, cbModelParam._m0[17u].y, _2868 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2870, cbModelParam._m0[18u].z, fma(_2869, cbModelParam._m0[18u].y, _2868 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2870, cbModelParam._m0[19u].z, fma(_2869, cbModelParam._m0[19u].y, _2868 * cbModelParam._m0[19u].x))), _2026);
            frontier_phi_22_47_ladder = _2992.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2992.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2992.x * cbModelParam._m0[1u].z;
        }
        _2116 = frontier_phi_22_47_ladder_2;
        _2118 = frontier_phi_22_47_ladder_1;
        _2120 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2100 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1126, _1127, _1128), _2026);
        _2116 = _2100.x * cbModelParam._m0[1u].z;
        _2118 = _2100.y * cbModelParam._m0[1u].z;
        _2120 = _2100.z * cbModelParam._m0[1u].z;
    }
    float _2133 = (((_1153 * _1102) + _1154) * _1118) * ((cbModelParam._m0[1u].w * (_2116 - _2017)) + _2017);
    float _2135 = (((_1153 * _1104) + _1154) * _1118) * ((cbModelParam._m0[1u].w * (_2118 - _2019)) + _2019);
    float _2137 = (((_1153 * _1105) + _1154) * _1118) * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2140 = fma(_2137, cbSceneParam._m0[89u].z, fma(_2135, cbSceneParam._m0[89u].y, _2133 * cbSceneParam._m0[89u].x));
    float _2143 = fma(_2137, cbSceneParam._m0[90u].z, fma(_2135, cbSceneParam._m0[90u].y, _2133 * cbSceneParam._m0[90u].x));
    float _2146 = fma(_2137, cbSceneParam._m0[91u].z, fma(_2135, cbSceneParam._m0[91u].y, _2133 * cbSceneParam._m0[91u].x));
    float _2180 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2184 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2188 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2192 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2193 = _2180 / _2192;
    float _2194 = _2184 / _2192;
    float _2195 = _2188 / _2192;
    float _2342;
    float _2343;
    float _2344;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2222 = ((uint(_2195 > cbSceneParam._m0[59u].y) + uint(_2195 > cbSceneParam._m0[59u].x)) + uint(_2195 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2223 = _2222 + 43u;
        uint _2231 = _2222 + 44u;
        uint _2239 = _2222 + 45u;
        uint _2247 = _2222 + 46u;
        float _2258 = fma(_2192, cbSceneParam._m0[_2223].w, fma(_2188, cbSceneParam._m0[_2223].z, fma(_2184, cbSceneParam._m0[_2223].y, _2180 * cbSceneParam._m0[_2223].x)));
        float _2262 = fma(_2192, cbSceneParam._m0[_2231].w, fma(_2188, cbSceneParam._m0[_2231].z, fma(_2184, cbSceneParam._m0[_2231].y, _2180 * cbSceneParam._m0[_2231].x)));
        float _2270 = fma(_2192, cbSceneParam._m0[_2247].w, fma(_2188, cbSceneParam._m0[_2247].z, fma(_2184, cbSceneParam._m0[_2247].y, _2180 * cbSceneParam._m0[_2247].x)));
        float _2275 = cbSceneParam._m0[33u].z * _2270;
        float _2277 = cbSceneParam._m0[33u].w * _2270;
        float _2280 = fma(_2192, cbSceneParam._m0[_2239].w, fma(_2188, cbSceneParam._m0[_2239].z, fma(_2184, cbSceneParam._m0[_2239].y, _2180 * cbSceneParam._m0[_2239].x))) / _2270;
        float _2328 = (cbSceneParam._m0[33u].x - sqrt(((_2194 * _2194) + (_2193 * _2193)) + (_2195 * _2195))) * cbSceneParam._m0[33u].y;
        float _4655 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2335 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 + _2258) / _2270, (_2277 + _2262) / _2270), _2280), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 + _2258) / _2270, (_2262 - _2275) / _2270), _2280), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 - _2275) / _2270, (_2262 - _2277) / _2270), _2280), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 - _2277) / _2270, (_2275 + _2262) / _2270), _2280), 0.0)).x), vec4(0.25)));
        _2342 = 1.0 - (_2335 * cbSceneParam._m0[34u].x);
        _2343 = 1.0 - (_2335 * cbSceneParam._m0[34u].y);
        _2344 = 1.0 - (_2335 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2342 = 1.0;
        _2343 = 1.0;
        _2344 = 1.0;
    }
    float _2408;
    float _2410;
    float _2412;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2396 = fma(_2192, cbSceneParam._m0[63u].w, fma(_2188, cbSceneParam._m0[63u].z, fma(_2184, cbSceneParam._m0[63u].y, _2180 * cbSceneParam._m0[63u].x)));
        float _2397 = fma(_2192, cbSceneParam._m0[60u].w, fma(_2188, cbSceneParam._m0[60u].z, fma(_2184, cbSceneParam._m0[60u].y, _2180 * cbSceneParam._m0[60u].x))) / _2396;
        float _2398 = fma(_2192, cbSceneParam._m0[61u].w, fma(_2188, cbSceneParam._m0[61u].z, fma(_2184, cbSceneParam._m0[61u].y, _2180 * cbSceneParam._m0[61u].x))) / _2396;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2397 >= cbSceneParam._m0[64u].x) && (_2398 >= cbSceneParam._m0[64u].y)) && (_2397 <= cbSceneParam._m0[64u].z)) && (_2398 <= cbSceneParam._m0[64u].w))
        {
            float _2536 = fma(_2192, cbSceneParam._m0[62u].w, fma(_2188, cbSceneParam._m0[62u].z, fma(_2184, cbSceneParam._m0[62u].y, _2180 * cbSceneParam._m0[62u].x))) / _2396;
            float _2540 = isnan(cbSceneParam._m0[41u].w) ? _2536 : (isnan(_2536) ? cbSceneParam._m0[41u].w : max(_2536, cbSceneParam._m0[41u].w));
            float _2583 = (cbSceneParam._m0[33u].x - sqrt(((_2194 * _2194) + (_2193 * _2193)) + (_2195 * _2195))) * cbSceneParam._m0[33u].y;
            float _4671 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
            float _2590 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2397, cbSceneParam._m0[33u].w + _2398), _2540), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2397, _2398 - cbSceneParam._m0[33u].z), _2540), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2397 - cbSceneParam._m0[33u].z, _2398 - cbSceneParam._m0[33u].w), _2540), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2397 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2398), _2540), 0.0)).x), vec4(0.25)));
            float _2594 = 1.0 - (_2590 * cbSceneParam._m0[34u].x);
            float _2595 = 1.0 - (_2590 * cbSceneParam._m0[34u].y);
            float _2596 = 1.0 - (_2590 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2596) ? _2344 : (isnan(_2344) ? _2596 : min(_2344, _2596));
            frontier_phi_34_33_ladder_1 = isnan(_2595) ? _2343 : (isnan(_2343) ? _2595 : min(_2343, _2595));
            frontier_phi_34_33_ladder_2 = isnan(_2594) ? _2342 : (isnan(_2342) ? _2594 : min(_2342, _2594));
        }
        else
        {
            frontier_phi_34_33_ladder = _2344;
            frontier_phi_34_33_ladder_1 = _2343;
            frontier_phi_34_33_ladder_2 = _2342;
        }
        _2408 = frontier_phi_34_33_ladder_2;
        _2410 = frontier_phi_34_33_ladder_1;
        _2412 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2408 = _2342;
        _2410 = _2343;
        _2412 = _2344;
    }
    uvec4 _2417 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2419 = _2417.x * 14u;
    uint _2420 = _2419 + 13u;
    float _2427 = _1118 + (-1.0);
    float _2432 = (cbLight._m0[_2420].x * _2427) + 1.0;
    float _2433 = (cbLight._m0[_2420].y * _2427) + 1.0;
    float _2434 = (cbLight._m0[_2420].z * _2427) + 1.0;
    float _2435 = (cbLight._m0[_2420].w * _2427) + 1.0;
    uint _2436 = _2419 + 5u;
    float _2442 = isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0));
    uint _2446 = _2419 + 4u;
    float _2455 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
    uint _2459 = _2419 | 1u;
    float _2470 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_953, _954, _955));
    float _2473 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_953, _954, _955));
    float _4707 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _4718 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2478 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * 0.3183098733425140380859375;
    float _2480 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * 0.3183098733425140380859375;
    float _2487 = ((cbLight._m0[_2436].x * _2442) * _2480) + (((cbLight._m0[_2446].x * _2408) * _2455) * _2478);
    float _2488 = ((_2442 * cbLight._m0[_2436].y) * _2480) + (((cbLight._m0[_2446].y * _2410) * _2455) * _2478);
    float _2489 = ((_2442 * cbLight._m0[_2436].z) * _2480) + (((cbLight._m0[_2446].z * _2412) * _2455) * _2478);
    uvec4 _2493 = floatBitsToUint(cbLight._m0[_2419 + 12u]);
    bool _2495 = _2493.x == 0u;
    float _2597;
    float _2599;
    float _2601;
    if (_2495)
    {
        _2597 = _2487;
        _2599 = _2488;
        _2601 = _2489;
    }
    else
    {
        uint _2605 = _2419 + 6u;
        float _2621 = (dot(vec3(cbLight._m0[_2419 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2622 = _2621 * _2621;
        float _4729 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2623 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2624 = isnan(1.0) ? _2434 : (isnan(_2434) ? 1.0 : min(_2434, 1.0));
        _2597 = (((cbLight._m0[_2605].x * 0.3183098733425140380859375) * _2623) * _2624) + _2487;
        _2599 = (((cbLight._m0[_2605].y * 0.3183098733425140380859375) * _2623) * _2624) + _2488;
        _2601 = (((cbLight._m0[_2605].z * 0.3183098733425140380859375) * _2623) * _2624) + _2489;
    }
    bool _2604 = _2493.y == 0u;
    float _2659;
    float _2661;
    float _2663;
    if (_2604)
    {
        _2659 = _2597;
        _2661 = _2599;
        _2663 = _2601;
    }
    else
    {
        uint _2832 = _2419 + 7u;
        float _2848 = (dot(vec3(cbLight._m0[_2419 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2849 = _2848 * _2848;
        float _4745 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2850 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2851 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
        _2659 = (((cbLight._m0[_2832].x * 0.3183098733425140380859375) * _2850) * _2851) + _2597;
        _2661 = (((cbLight._m0[_2832].y * 0.3183098733425140380859375) * _2850) * _2851) + _2599;
        _2663 = (((cbLight._m0[_2832].z * 0.3183098733425140380859375) * _2850) * _2851) + _2601;
    }
    uint _2666 = _2419 + 8u;
    float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _956) * 0.949999988079071044921875);
    float _2680 = _2679 * _2679;
    float _2681 = cbLight._m0[_2419].x + _1032;
    float _2682 = cbLight._m0[_2419].y + _1033;
    float _2683 = cbLight._m0[_2419].z + _1034;
    float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
    float _2688 = _2687 * _2681;
    float _2689 = _2687 * _2682;
    float _2690 = _2687 * _2683;
    float _2691 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2419].xyz));
    float _4761 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _4772 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _2695 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2696 = dot(vec3(_953, _954, _955), vec3(_2688, _2689, _2690));
    float _4783 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2700 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2688, _2689, _2690));
    float _4794 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2704 = _2680 * _2680;
    float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
    float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
    float _2717 = 0.959999978542327880859375 - _1099;
    float _2719 = 0.959999978542327880859375 - _1100;
    float _2720 = 0.959999978542327880859375 - _1101;
    float _2727 = 1.0 - _2680;
    float _2738 = (0.5 / (((_2695 * ((_2694 * _2727) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2695 * _2727) + _2680) * _2694))) * _2694;
    float _4805 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2740 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
    uint _2754 = _2419 + 9u;
    float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _956) * 0.949999988079071044921875);
    float _2766 = _2765 * _2765;
    float _2767 = cbLight._m0[_2459].x + _1032;
    float _2768 = cbLight._m0[_2459].y + _1033;
    float _2769 = cbLight._m0[_2459].z + _1034;
    float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
    float _2774 = _2773 * _2767;
    float _2775 = _2773 * _2768;
    float _2776 = _2773 * _2769;
    float _2777 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2459].xyz));
    float _4816 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2780 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _2781 = dot(vec3(_953, _954, _955), vec3(_2774, _2775, _2776));
    float _4827 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2784 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _2785 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2774, _2775, _2776));
    float _4838 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2789 = _2766 * _2766;
    float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
    float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
    float _2807 = 1.0 - _2766;
    float _2817 = (0.5 / (((_2695 * ((_2780 * _2807) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2695 * _2807) + _2766) * _2780))) * _2780;
    float _4849 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2819 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
    float _2829 = (((((_2800 * _2717) + _1102) * cbLight._m0[_2754].x) * _2819) * _2442) + ((((cbLight._m0[_2666].x * _2408) * ((_2716 * _2717) + _1102)) * _2740) * _2455);
    float _2830 = (((((_2800 * _2719) + _1104) * cbLight._m0[_2754].y) * _2819) * _2442) + ((((cbLight._m0[_2666].y * _2410) * ((_2716 * _2719) + _1104)) * _2740) * _2455);
    float _2831 = (((((_2800 * _2720) + _1105) * cbLight._m0[_2754].z) * _2819) * _2442) + ((((cbLight._m0[_2666].z * _2412) * ((_2716 * _2720) + _1105)) * _2740) * _2455);
    float _2887;
    float _2889;
    float _2891;
    if (_2495)
    {
        _2887 = _2829;
        _2889 = _2830;
        _2891 = _2831;
    }
    else
    {
        uint _2893 = _2419 + 2u;
        uint _2897 = _2419 + 10u;
        float _2911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2893].w)) * _956) * 0.949999988079071044921875);
        float _2912 = _2911 * _2911;
        float _2913 = cbLight._m0[_2893].x + _1032;
        float _2914 = cbLight._m0[_2893].y + _1033;
        float _2915 = cbLight._m0[_2893].z + _1034;
        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
        float _2920 = _2919 * _2913;
        float _2921 = _2919 * _2914;
        float _2922 = _2919 * _2915;
        float _2923 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2893].xyz));
        float _4860 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2927 = dot(vec3(_953, _954, _955), vec3(_2920, _2921, _2922));
        float _4871 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2930 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2931 = dot(vec3(cbLight._m0[_2893].xyz), vec3(_2920, _2921, _2922));
        float _4882 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2935 = _2912 * _2912;
        float _2939 = ((_2930 * _2930) * (_2935 + (-1.0))) + 1.0;
        float _2946 = exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0);
        float _2953 = 1.0 - _2912;
        float _2963 = (0.5 / (((_2695 * ((_2926 * _2953) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2695 * _2953) + _2912) * _2926))) * _2926;
        float _4893 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2965 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2935 / ((_2939 * _2939) * 3.141590118408203125));
        float _2966 = isnan(1.0) ? _2434 : (isnan(_2434) ? 1.0 : min(_2434, 1.0));
        _2887 = (((((_2946 * _2717) + _1102) * cbLight._m0[_2897].x) * _2965) * _2966) + _2829;
        _2889 = (((((_2946 * _2719) + _1104) * cbLight._m0[_2897].y) * _2965) * _2966) + _2830;
        _2891 = (((((_2946 * _2720) + _1105) * cbLight._m0[_2897].z) * _2965) * _2966) + _2831;
    }
    float _2997;
    float _2999;
    float _3001;
    if (_2604)
    {
        _2997 = _2887;
        _2999 = _2889;
        _3001 = _2891;
    }
    else
    {
        uint _3008 = _2419 + 3u;
        uint _3012 = _2419 + 11u;
        float _3026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3008].w)) * _956) * 0.949999988079071044921875);
        float _3027 = _3026 * _3026;
        float _3028 = cbLight._m0[_3008].x + _1032;
        float _3029 = cbLight._m0[_3008].y + _1033;
        float _3030 = cbLight._m0[_3008].z + _1034;
        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
        float _3035 = _3034 * _3028;
        float _3036 = _3034 * _3029;
        float _3037 = _3034 * _3030;
        float _3038 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_3008].xyz));
        float _4909 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        float _3041 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _3042 = dot(vec3(_953, _954, _955), vec3(_3035, _3036, _3037));
        float _4920 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3045 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
        float _3046 = dot(vec3(cbLight._m0[_3008].xyz), vec3(_3035, _3036, _3037));
        float _4931 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3050 = _3027 * _3027;
        float _3054 = ((_3045 * _3045) * (_3050 + (-1.0))) + 1.0;
        float _3061 = exp2(log2(1.0 - (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) * 5.0);
        float _3068 = 1.0 - _3027;
        float _3078 = (0.5 / (((_2695 * ((_3041 * _3068) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_2695 * _3068) + _3027) * _3041))) * _3041;
        float _4942 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        float _3080 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_3050 / ((_3054 * _3054) * 3.141590118408203125));
        float _3081 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
        _2997 = (((((_3061 * _2717) + _1102) * cbLight._m0[_3012].x) * _3080) * _3081) + _2887;
        _2999 = (((((_3061 * _2719) + _1104) * cbLight._m0[_3012].y) * _3080) * _3081) + _2889;
        _3001 = (((((_3061 * _2720) + _1105) * cbLight._m0[_3012].z) * _3080) * _3081) + _2891;
    }
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    if (_2417.y == 0u)
    {
        uvec4 _3102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3103 = _3102.x;
        uint _3114 = uint((float(_3102.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1041) / _3103))) + floor(float(uint(cbSceneParam._m0[85u].x * _1040) / _3103)));
        float _3124 = (log2(_2195 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3125 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
        uint _3128 = uint(isnan(14.0) ? _3125 : (isnan(_3125) ? 14.0 : min(_3125, 14.0)));
        uvec4 _3133 = texelFetch(g_lightClusterGridBuffer, int(((_3128 << 2u) + (_3114 << 6u)) >> 2u));
        uint _3134 = _3133.x;
        uint _3135 = _3102.z;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        if (((((1u << ((_3135 >> 4u) & 15u)) + 4294967295u) & _3134) == 0u) || ((_3135 & 240u) == 0u))
        {
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
        }
        else
        {
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3225;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            uint _3364 = 0u;
            uint _3373;
            bool _3374;
            for (;;)
            {
                _3373 = texelFetch(g_lightClassification, int((((_3128 << 5u) + (_3114 << 9u)) + (_3364 << 2u)) >> 2u)).x;
                _3374 = _3373 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3374)
                {
                    frontier_phi_66_pred = _3363;
                    frontier_phi_66_pred_1 = _3362;
                    frontier_phi_66_pred_2 = _3361;
                    frontier_phi_66_pred_3 = _3360;
                    frontier_phi_66_pred_4 = _3359;
                    frontier_phi_66_pred_5 = _3358;
                }
                else
                {
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    uint _3488;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3360;
                    _3485 = _3361;
                    _3486 = _3362;
                    _3487 = _3363;
                    _3488 = _3373;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    for (;;)
                    {
                        uint _3492 = uint(findLSB(_3488)) + (_3364 << 5u);
                        uint _3489 = (_3488 + 4294967295u) & _3488;
                        uint _3494 = _3492 * 48u;
                        vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3514 = (_3492 * 48u) + 4u;
                        vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 3u)).x));
                        uint _3533 = (_3492 * 48u) + 8u;
                        vec3 _3544 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x));
                        float _3548 = _3508.x - _2193;
                        float _3549 = _3508.y - _2194;
                        float _3550 = _3508.z - _2195;
                        float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                        float _3554 = inversesqrt(_3551);
                        float _3555 = _3554 * _3548;
                        float _3556 = _3554 * _3549;
                        float _3557 = _3554 * _3550;
                        float _3558 = dot(vec3(_1059, _1062, _1065), vec3(_3555, _3556, _3557));
                        float _3563 = 1.0 - (_3551 * _3508.w);
                        float _4968 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3564 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3565 = sqrt(_3551) * _3527.w;
                        float _3568 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                        float _3569 = _3568 * _3568;
                        float _3572 = ((1.0 - _3569) * _3558) + _3569;
                        float _3575 = _3565 * _3565;
                        float _3579 = ((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3564) / ((_3575 * 0.699999988079071044921875) + 1.0);
                        float _3583 = (-0.0) - _2193;
                        float _3584 = (-0.0) - _2194;
                        float _3585 = (-0.0) - _2195;
                        float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3599 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                        float _3600 = 1.0 - _1134;
                        float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                        float _3608 = _3607 * _3607;
                        float _3609 = _3608 * _3608;
                        float _3610 = _3590 + _3555;
                        float _3611 = _3591 + _3556;
                        float _3612 = _3592 + _3557;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3620 = dot(vec3(_1059, _1062, _1065), vec3(_3590, _3591, _3592));
                        float _4984 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3624 = dot(vec3(_1059, _1062, _1065), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                        float _4995 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                        float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                        float _3632 = _3568 * _3608;
                        float _3633 = _3632 * _3632;
                        float _3636 = ((1.0 - _3633) * _3558) + _3633;
                        float _5006 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                        float _3638 = 1.0 - _3608;
                        float _3648 = (0.5 / (((_3637 * ((_3623 * _3638) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3608) * _3623))) * _3637;
                        float _5017 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3659 = (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) / ((_3631 * _3631) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125))) * _3564;
                        _3417 = (_3579 * _3527.x) + _3485;
                        _3418 = (_3579 * _3527.y) + _3486;
                        _3419 = (_3579 * _3527.z) + _3487;
                        _3414 = (_3659 * _3544.x) + _3482;
                        _3415 = (_3659 * _3544.y) + _3483;
                        _3416 = (_3659 * _3544.z) + _3484;
                        if (_3489 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3416;
                            _3485 = _3417;
                            _3486 = _3418;
                            _3487 = _3419;
                            _3488 = _3489;
                        }
                    }
                    frontier_phi_66_pred = _3419;
                    frontier_phi_66_pred_1 = _3418;
                    frontier_phi_66_pred_2 = _3417;
                    frontier_phi_66_pred_3 = _3416;
                    frontier_phi_66_pred_4 = _3415;
                    frontier_phi_66_pred_5 = _3414;
                }
                _3225 = frontier_phi_66_pred;
                _3223 = frontier_phi_66_pred_1;
                _3221 = frontier_phi_66_pred_2;
                _3219 = frontier_phi_66_pred_3;
                _3217 = frontier_phi_66_pred_4;
                _3215 = frontier_phi_66_pred_5;
                uint _3365 = _3364 + 1u;
                if (_3365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3358 = _3215;
                    _3359 = _3217;
                    _3360 = _3219;
                    _3361 = _3221;
                    _3362 = _3223;
                    _3363 = _3225;
                    _3364 = _3365;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
        }
        uvec4 _3228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3229 = _3228.z;
        uint _3231 = (_3229 >> 8u) & 15u;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        if (((4294967295u << _3231) & _3134) == 0u)
        {
            _3326 = _3214;
            _3328 = _3216;
            _3330 = _3218;
            _3332 = _3220;
            _3334 = _3222;
            _3336 = _3224;
        }
        else
        {
            float _3351 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
            float _3352 = _3351 * _2193;
            float _3353 = _3351 * _2194;
            float _3354 = _3351 * _2195;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3231 < ((_3229 >> 12u) & 15u))
            {
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3335;
                float _3337;
                float _3465 = _3214;
                float _3466 = _3216;
                float _3467 = _3218;
                float _3468 = _3220;
                float _3469 = _3222;
                float _3470 = _3224;
                uint _3471 = _3231;
                uint _3480;
                bool _3481;
                for (;;)
                {
                    _3480 = texelFetch(g_lightClassification, int((((_3128 << 5u) + (_3114 << 9u)) + (_3471 << 2u)) >> 2u)).x;
                    _3481 = _3480 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3481)
                    {
                        frontier_phi_72_pred = _3470;
                        frontier_phi_72_pred_1 = _3469;
                        frontier_phi_72_pred_2 = _3468;
                        frontier_phi_72_pred_3 = _3467;
                        frontier_phi_72_pred_4 = _3466;
                        frontier_phi_72_pred_5 = _3465;
                    }
                    else
                    {
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _3960;
                        float _3961;
                        float _3962;
                        float _3677 = _3465;
                        float _3678 = _3466;
                        float _3679 = _3467;
                        float _3680 = _3468;
                        float _3681 = _3469;
                        float _3682 = _3470;
                        uint _3683 = _3480;
                        uint _3684;
                        vec4 _3709;
                        float _3710;
                        vec4 _3725;
                        vec3 _3737;
                        vec4 _3752;
                        vec4 _3767;
                        float _3813;
                        bool _3814;
                        for (;;)
                        {
                            uint _3694 = ((_3471 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3683));
                            _3684 = (_3683 + 4294967295u) & _3683;
                            uint _3696 = _3694 * 40u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            _3710 = _3709.w;
                            uint _3712 = (_3694 * 40u) + 4u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3727 = (_3694 * 40u) + 8u;
                            _3737 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x));
                            uint _3739 = (_3694 * 40u) + 16u;
                            _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3754 = (_3694 * 40u) + 20u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3694 * 40u) + 24u;
                            vec4 _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3788 = (_3694 * 40u) + 28u;
                            vec4 _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            _3813 = fma(_2195, _3801.z, fma(_2194, _3801.y, _3801.x * _2193)) + _3801.w;
                            _3814 = !((fma(_2195, _3782.z, fma(_2194, _3782.y, _3782.x * _2193)) + _3782.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3814)
                            {
                                float _3841 = _3709.x - _2193;
                                float _3842 = _3709.y - _2194;
                                float _3843 = _3709.z - _2195;
                                float _3844 = dot(vec3(_3841, _3842, _3843), vec3(_3841, _3842, _3843));
                                float _3847 = inversesqrt(_3844);
                                float _3848 = _3847 * _3841;
                                float _3849 = _3847 * _3842;
                                float _3850 = _3847 * _3843;
                                float _3854 = 1.0 - (_3844 / (_3710 * _3710));
                                float _5028 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3855 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3859 = sqrt(_3844) * _3725.w;
                                float _3861 = 1.39999997615814208984375 / (_3859 + 1.39999997615814208984375);
                                float _3862 = _3861 * _3861;
                                float _3865 = ((1.0 - _3862) * dot(vec3(_3848, _3849, _3850), vec3(_1059, _1062, _1065))) + _3862;
                                float _3868 = _3859 * _3859;
                                float _3872 = (fma(_2195, _3752.z, fma(_2194, _3752.y, _3752.x * _2193)) + _3752.w) / _3813;
                                float _3873 = (fma(_2195, _3767.z, fma(_2194, _3767.y, _3767.x * _2193)) + _3767.w) / _3813;
                                float _3877 = 1.0 - dot(vec2(_3872, _3873), vec2(_3872, _3873));
                                float _5044 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3878 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3879 = _3878 * (((isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0))) * _3855) / ((_3868 * 0.699999988079071044921875) + 1.0));
                                float _3891 = exp2(log2(1.0 / ((_3868 * 3.5) + 5.0)) * 0.25);
                                float _3892 = 1.0 - _1134;
                                float _3899 = sqrt(1.0 - ((1.0 - (_3892 * _3892)) * (1.0 - (_3891 * _3891))));
                                float _3900 = _3899 * _3899;
                                float _3901 = _3900 * _3900;
                                float _3902 = _3848 - _3352;
                                float _3903 = _3849 - _3353;
                                float _3904 = _3850 - _3354;
                                float _3908 = inversesqrt(dot(vec3(_3902, _3903, _3904), vec3(_3902, _3903, _3904)));
                                float _3912 = dot(vec3(_1059, _1062, _1065), vec3((-0.0) - _3352, (-0.0) - _3353, (-0.0) - _3354));
                                float _5055 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3915 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                                float _3916 = dot(vec3(_1059, _1062, _1065), vec3(_3908 * _3902, _3908 * _3903, _3908 * _3904));
                                float _5066 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3919 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                                float _3923 = ((_3919 * _3919) * (_3901 + (-1.0))) + 1.0;
                                float _3924 = _3861 * _3900;
                                float _3925 = _3924 * _3924;
                                float _3931 = ((1.0 - _3925) * dot(vec3(_1059, _1062, _1065), vec3(_3848, _3849, _3850))) + _3925;
                                float _5077 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3932 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                                float _3933 = 1.0 - _3900;
                                float _3943 = (0.5 / (((_3932 * ((_3915 * _3933) + _3900)) + 9.9999999392252902907785028219223e-09) + (((_3932 * _3933) + _3900) * _3915))) * _3932;
                                float _5088 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3953 = (_3878 * _3855) * (((_3901 * 3.1415927410125732421875) * (isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0)))) / ((_3923 * _3923) * ((_3868 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3879 * _3725.y;
                                frontier_phi_78_pred_1 = _3879 * _3725.x;
                                frontier_phi_78_pred_2 = _3953 * _3737.z;
                                frontier_phi_78_pred_3 = _3953 * _3737.y;
                                frontier_phi_78_pred_4 = _3953 * _3737.x;
                                frontier_phi_78_pred_5 = _3879 * _3725.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3961 = frontier_phi_78_pred;
                            _3960 = frontier_phi_78_pred_1;
                            _3959 = frontier_phi_78_pred_2;
                            _3958 = frontier_phi_78_pred_3;
                            _3957 = frontier_phi_78_pred_4;
                            _3962 = frontier_phi_78_pred_5;
                            _3667 = _3960 + _3680;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            if (_3684 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3684;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3669;
                        frontier_phi_72_pred_1 = _3668;
                        frontier_phi_72_pred_2 = _3667;
                        frontier_phi_72_pred_3 = _3666;
                        frontier_phi_72_pred_4 = _3665;
                        frontier_phi_72_pred_5 = _3664;
                    }
                    _3337 = frontier_phi_72_pred;
                    _3335 = frontier_phi_72_pred_1;
                    _3333 = frontier_phi_72_pred_2;
                    _3331 = frontier_phi_72_pred_3;
                    _3329 = frontier_phi_72_pred_4;
                    _3327 = frontier_phi_72_pred_5;
                    uint _3472 = _3471 + 1u;
                    if (_3472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3465 = _3327;
                        _3466 = _3329;
                        _3467 = _3331;
                        _3468 = _3333;
                        _3469 = _3335;
                        _3470 = _3337;
                        _3471 = _3472;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3337;
                frontier_phi_60_61_ladder_1 = _3335;
                frontier_phi_60_61_ladder_2 = _3331;
                frontier_phi_60_61_ladder_3 = _3329;
                frontier_phi_60_61_ladder_4 = _3327;
                frontier_phi_60_61_ladder_5 = _3333;
            }
            else
            {
                frontier_phi_60_61_ladder = _3224;
                frontier_phi_60_61_ladder_1 = _3222;
                frontier_phi_60_61_ladder_2 = _3218;
                frontier_phi_60_61_ladder_3 = _3216;
                frontier_phi_60_61_ladder_4 = _3214;
                frontier_phi_60_61_ladder_5 = _3220;
            }
            _3326 = frontier_phi_60_61_ladder_4;
            _3328 = frontier_phi_60_61_ladder_3;
            _3330 = frontier_phi_60_61_ladder_2;
            _3332 = frontier_phi_60_61_ladder_5;
            _3334 = frontier_phi_60_61_ladder_1;
            _3336 = frontier_phi_60_61_ladder;
        }
        float _3341 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
        _3147 = (_3341 * _3332) + _2659;
        _3149 = (_3341 * _3334) + _2661;
        _3151 = (_3341 * _3336) + _2663;
        _3153 = ((_3326 * _1102) * _3341) + _2997;
        _3155 = ((_3328 * _1104) * _3341) + _2999;
        _3157 = ((_3330 * _1105) * _3341) + _3001;
    }
    else
    {
        _3147 = _2659;
        _3149 = _2661;
        _3151 = _2663;
        _3153 = _2997;
        _3155 = _2999;
        _3157 = _3001;
    }
    float _5104 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _5115 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _5126 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    uint _3177 = _263 + 6u;
    float _3185 = _1040 / cbSceneParam._m0[86u].x;
    float _3186 = _1041 / cbSceneParam._m0[86u].y;
    vec4 _3200 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3185, _3186, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3202 = _3200.x;
    float _3203 = _3200.y;
    float _3204 = _3200.z;
    float _3205 = _3200.w;
    float _3276;
    float _3278;
    float _3280;
    float _3282;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3239 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3240 = _3239 / _975;
        float _3251 = _3240 * _1025;
        float _3252 = _1026 * _3240;
        float _3253 = (-0.0) - _3252;
        float _3254 = _3240 * _1027;
        float _3256 = (cbSceneParam._m0[77u].w * _3253) / _3239;
        float _3257 = _3256 + cbSceneParam._m0[79u].w;
        float _3258 = cbSceneParam._m0[79u].w - _3252;
        float _3264 = sqrt(((_3251 * _3251) + (_3252 * _3252)) + (_3254 * _3254));
        float _3267 = (1.0 - (cbSceneParam._m0[77u].w / _3239)) * _3264;
        float _3272 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3274 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3427;
        if (abs((_3253 - _3256) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3427 = ((((_3257 > 0.0) ? exp2(_3272 * _3257) : (2.0 - exp2(_3274 * _3257))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3267;
        }
        else
        {
            float _3387 = 1.0 / cbSceneParam._m0[80u].x;
            float _3388 = isnan(_3258) ? _3257 : (isnan(_3257) ? _3258 : max(_3257, _3258));
            float _3389 = isnan(_3258) ? _3257 : (isnan(_3257) ? _3258 : min(_3257, _3258));
            float _3398 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : min(_3388, 0.0));
            float _3399 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : min(_3389, 0.0));
            _3427 = ((abs(_3264 / _3253) * cbSceneParam._m0[80u].y) * ((((_3398 - _3399) * 2.0) - ((exp2(_3272 * (isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0)))) - exp2(_3272 * (isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))))) * _3387)) - ((exp2(_3274 * _3398) - exp2(_3274 * _3399)) * _3387))) + (_3267 * cbSceneParam._m0[80u].z);
        }
        vec4 _3429 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3185, _3186, 1.0), 0.0);
        float _3438 = exp2((_3427 * (-1.44269502162933349609375)) * (1.0 - _3429.w));
        float _3439 = log2(_3438);
        float _3455 = log2(_3205);
        _3276 = (exp2(_3455 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3439 * cbSceneParam._m0[78u].x)) * _3429.x) / cbSceneParam._m0[78u].x)) + _3202;
        _3278 = (exp2(_3455 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3439 * cbSceneParam._m0[78u].y)) * _3429.y) / cbSceneParam._m0[78u].y)) + _3203;
        _3280 = (exp2(_3455 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3439 * cbSceneParam._m0[78u].z)) * _3429.z) / cbSceneParam._m0[78u].z)) + _3204;
        _3282 = _3438 * _3205;
    }
    else
    {
        _3276 = _3202;
        _3278 = _3203;
        _3280 = _3204;
        _3282 = _3205;
    }
    float _3294 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3295 = _3294 == 3.0;
    float _3296 = log2(_3282);
    float _3303 = exp2(_3296 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_3147 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1118))) + ((_3153 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3304 = exp2(_3296 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0))) * (_3149 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1118))) + ((_3155 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3305 = exp2(_3296 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0))) * (_3151 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1118))) + ((_3157 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3314 = (_3294 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3314 * (_3295 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3276)));
    SV_Target.y = _3314 * (_3295 ? _3304 : (_3304 + (cbSceneParam._m0[72u].w * _3278)));
    SV_Target.z = _3314 * (_3295 ? _3305 : (_3305 + (cbSceneParam._m0[72u].w * _3280)));
    SV_Target.w = cbInstanceData._m0[_3177].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3177].w;
}


