#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1574;
float _3976;
float _3977;
float _3978;
float _3979;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3988 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3999 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4010 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _352 = _347.x * cbMtdParam._m0[11u].x;
    float _353 = _347.y * cbMtdParam._m0[11u].y;
    float _354 = _347.z * cbMtdParam._m0[11u].z;
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _392.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4021 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _466 = (_459 * ((_373.x * cbMtdParam._m0[12u].x) - _352)) + _352;
    float _467 = (_459 * ((_373.y * cbMtdParam._m0[12u].y) - _353)) + _353;
    float _468 = (_459 * ((_373.z * cbMtdParam._m0[12u].z) - _354)) + _354;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _392.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4032 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _579 = _577.x;
    float _589 = dot(vec4(_579, _577.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _601 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _392.z) * 2.0) - ((((_579 - _589) * cbMtdParam._m0[23u].w) + _589) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4043 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _609 = (_602 * ((_560.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _610 = (_602 * ((_560.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _611 = (_602 * ((_560.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _615 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _609;
    float _618 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _610;
    float _621 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _611;
    float _628 = ((_609 - _615) * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) + _615;
    float _629 = ((_610 - _618) * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) + _618;
    float _630 = ((_611 - _621) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) + _621;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _689 = _687.x;
    float _690 = _687.y;
    float _691 = _687.z;
    float _698 = ((_670.x - _689) * _459) + _689;
    float _699 = ((_670.y - _690) * _459) + _690;
    float _700 = ((_670.z - _691) * _459) + _691;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _723 = ((_712.x - _698) * _532) + _698;
    float _724 = ((_712.y - _699) * _532) + _699;
    float _725 = ((_712.z - _700) * _532) + _700;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _750 = ((_737.z - _725) * _602) + _725;
    float _753 = ((((_737.x - _723) * _602) + _723) * 2.0) + (-1.0);
    float _754 = ((((_737.y - _724) * _602) + _724) * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _4054 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _760 = sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))));
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _817 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_801 - _802) * cbMtdParam._m0[24u].z) + _802) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4065 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _818 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _825 = (_818 * (cbMtdParam._m0[17u].x - _628)) + _628;
    float _826 = (_818 * (cbMtdParam._m0[17u].y - _629)) + _629;
    float _827 = (_818 * (cbMtdParam._m0[17u].z - _630)) + _630;
    vec4 _853 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _855 = _853.x;
    float _873 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _855) * _459) + _855;
    float _890 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _873) * _532) + _873;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _890) * _602) + _890;
    float _912 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _908) * cbMtdParam._m0[19u].z) + _908;
    float _914 = _912 - (_912 * _818);
    float _919 = (((_647.z - _750) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _750;
    float _923 = ((_774.z - _919) * cbMtdParam._m0[19u].w) + _919;
    vec4 _936 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _943 = (_936.x * 2.0) + (-1.0);
    float _944 = (_936.y * 2.0) + (-1.0);
    float _945 = dot(vec2(_943, _944), vec2(_943, _944));
    float _4076 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _953 = (_818 * (_936.z - _923)) + _923;
    float _962 = (_753 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_647.x * 2.0) + (-1.0)))) + (((_774.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _963 = (_754 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_647.y * 2.0) + (-1.0)))) + (((_774.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _975 = (((_943 - _962) + (cbMtdParam._m0[21u].x * _962)) * _818) + _962;
    float _976 = (((_944 - _963) + (cbMtdParam._m0[21u].x * _963)) * _818) + _963;
    float _977 = (_818 * (sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) - _760)) + _760;
    float _981 = cbMtdParam._m0[22u].x + _774.w;
    float _984 = fma(_977, _256 * NORMAL.x, fma(_976, _263 * TANGENT.x, (_249 * _241) * _975));
    float _987 = fma(_977, _256 * NORMAL.y, fma(_976, _263 * TANGENT.y, (_249 * _242) * _975));
    float _990 = fma(_977, _256 * NORMAL.z, fma(_976, _263 * TANGENT.z, (_249 * _243) * _975));
    float _994 = inversesqrt(dot(vec3(_984, _987, _990), vec3(_984, _987, _990)));
    float _995 = _994 * _984;
    float _996 = _994 * _987;
    float _997 = _994 * _990;
    float _4087 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _998 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4109 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4120 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4131 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4142 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _1003 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _1017 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1067 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1057);
    float _1068 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1057);
    float _1069 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1057);
    float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
    float _1074 = _1067 * _1073;
    float _1075 = _1068 * _1073;
    float _1076 = _1069 * _1073;
    vec4 _1081 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1083 = _1081.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1255 = sqrt(((_1067 * _1067) + (_1068 * _1068)) + (_1069 * _1069));
        float _1261 = (cbMatDynParam._m0[5u].x * _1255) + cbMatDynParam._m0[5u].y;
        float _4153 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1266 = (cbMatDynParam._m0[5u].z * _1255) + cbMatDynParam._m0[5u].w;
        float _4164 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) - _1262)) + _1262) < ((_1083 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1094 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1095 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1113 = fma(_997, cbSceneParam._m0[5u].z, fma(_996, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _995));
    float _1116 = fma(_997, cbSceneParam._m0[6u].z, fma(_996, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _995));
    float _1119 = fma(_997, cbSceneParam._m0[7u].z, fma(_996, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _995));
    uint _1132 = _290 + 9u;
    uint _1133 = _1132 + uint(cbMatDynParam._m0[0u].w);
    float _1139 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_1133].x;
    float _1140 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_1133].y;
    float _1141 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_1133].z;
    float _4175 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _1145 = 1.0 - _1003;
    float _1146 = _1142 * _1145;
    float _1147 = _1143 * _1145;
    float _1148 = _1144 * _1145;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1003;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1003;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1003;
    float _1156 = _1153 + 0.039999999105930328369140625;
    float _1158 = _1154 + 0.039999999105930328369140625;
    float _1159 = _1155 + 0.039999999105930328369140625;
    vec4 _1168 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1094, cbSceneParam._m0[86u].y * _1095));
    float _1172 = ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * TEXCOORD_5.w) * _1168.x;
    float _1173 = dot(vec3(_995, _996, _997), vec3(_1074, _1075, _1076));
    float _1176 = _1173 * 2.0;
    float _1180 = (_1176 * _995) - _1074;
    float _1181 = (_1176 * _996) - _1075;
    float _1182 = (_1176 * _997) - _1076;
    float _1186 = abs(dot(vec3(_1074, _1075, _1076), vec3(_995, _996, _997)));
    float _4208 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1188 = sqrt(_998);
    float _1201 = exp2((_1188 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1188 * 3.0));
    float _1207 = (1.0 - _1201) * ((_1188 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1208 = _1201 * _1188;
    float _1236 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1240 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1573;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1298 = fma(_1244, cbModelParam._m0[26u].z, fma(_1240, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236));
        float _1302 = fma(_1244, cbModelParam._m0[27u].z, fma(_1240, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236));
        float _1306 = fma(_1244, cbModelParam._m0[28u].z, fma(_1240, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236));
        float _1331 = _1236 + _995;
        float _1332 = _1240 + _996;
        float _1333 = _1244 + _997;
        float _1343 = fma(_1333, cbModelParam._m0[26u].z, fma(_1332, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1331)) - _1298;
        float _1344 = fma(_1333, cbModelParam._m0[27u].z, fma(_1332, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1331)) - _1302;
        float _1345 = fma(_1333, cbModelParam._m0[28u].z, fma(_1332, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1331)) - _1306;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1298 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1302 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[34u].z) + ((((((_1306 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1401 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1367.x + (-0.5));
        float _1403 = _1401 * (_1367.y + (-0.5));
        float _1404 = _1401 * (_1367.z + (-0.5));
        float _1411 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1374.x + (-0.5));
        float _1413 = _1411 * (_1374.y + (-0.5));
        float _1414 = _1411 * (_1374.z + (-0.5));
        float _1421 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1381.x + (-0.5));
        float _1423 = _1421 * (_1381.y + (-0.5));
        float _1424 = _1421 * (_1381.z + (-0.5));
        float _1431 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1388.x + (-0.5));
        float _1433 = _1431 * (_1388.y + (-0.5));
        float _1434 = _1431 * (_1388.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1455 = (dot(vec3(_995, _996, _997), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1465 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4256 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1467 + 1.0))) + _1472) * _1435;
        float _1482 = _1403 * 0.5;
        float _1483 = _1413 * 0.5;
        float _1484 = _1423 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_995, _996, _997), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4289 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1509 + 1.0))) + _1514) * _1436;
        float _1524 = _1404 * 0.5;
        float _1525 = _1414 * 0.5;
        float _1526 = _1424 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_995, _996, _997), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4322 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1551 + 1.0))) + _1556) * _1437;
        _1573 = _1404;
        _1575 = _1403;
        _1576 = _1402;
        _1577 = _1414;
        _1578 = _1413;
        _1579 = _1412;
        _1580 = _1424;
        _1581 = _1423;
        _1582 = _1422;
        _1583 = _1437;
        _1584 = _1436;
        _1585 = _1435;
        _1586 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1574;
        _1575 = _1574;
        _1576 = _1574;
        _1577 = _1574;
        _1578 = _1574;
        _1579 = _1574;
        _1580 = _1574;
        _1581 = _1574;
        _1582 = _1574;
        _1583 = _1574;
        _1584 = _1574;
        _1585 = _1574;
        _1586 = 0.0;
        _1587 = 0.0;
        _1588 = 0.0;
    }
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1614 = fma(_1244, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236));
        float _1618 = fma(_1244, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236));
        float _1622 = fma(_1244, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236));
        float _1645 = _1236 + _995;
        float _1646 = _1240 + _996;
        float _1647 = _1244 + _997;
        float _1657 = fma(_1647, cbModelParam._m0[30u].z, fma(_1646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1645)) - _1614;
        float _1658 = fma(_1647, cbModelParam._m0[31u].z, fma(_1646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1645)) - _1618;
        float _1659 = fma(_1647, cbModelParam._m0[32u].z, fma(_1646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1645)) - _1622;
        float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
        float _1676 = ((_1663 * _1657) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1614 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1677 = ((_1663 * _1658) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1618 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1663 * _1659) / cbModelParam._m0[35u].z) + ((((((_1622 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        float _1713 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1680.x + (-0.5));
        float _1715 = _1713 * (_1680.y + (-0.5));
        float _1716 = _1713 * (_1680.z + (-0.5));
        float _1723 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1687.x + (-0.5));
        float _1725 = _1723 * (_1687.y + (-0.5));
        float _1726 = _1723 * (_1687.z + (-0.5));
        float _1733 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1694.x + (-0.5));
        float _1735 = _1733 * (_1694.y + (-0.5));
        float _1736 = _1733 * (_1694.z + (-0.5));
        float _1743 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1701.x + (-0.5));
        float _1745 = _1743 * (_1701.y + (-0.5));
        float _1746 = _1743 * (_1701.z + (-0.5));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = _1714 * 0.5;
        float _1751 = _1724 * 0.5;
        float _1752 = _1734 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_995, _996, _997), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4385 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1777 + 1.0))) + _1782) * _1747;
        float _1792 = _1715 * 0.5;
        float _1793 = _1725 * 0.5;
        float _1794 = _1735 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_995, _996, _997), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4418 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1819 + 1.0))) + _1824) * _1748;
        float _1834 = _1716 * 0.5;
        float _1835 = _1726 * 0.5;
        float _1836 = _1736 * 0.5;
        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
        float _1842 = (_1837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1837);
        float _1850 = (dot(vec3(_995, _996, _997), vec3(_1842 * _1834, _1842 * _1835, _1842 * _1836)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1861 = _1860 * 2.0;
        float _1865 = (1.0 - _1860) / (_1860 + 1.0);
        float _4451 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1875 = ((((1.0 - _1866) * (_1861 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1861 + 1.0))) + _1866) * _1749;
        _1883 = _1716;
        _1884 = _1715;
        _1885 = _1714;
        _1886 = _1726;
        _1887 = _1725;
        _1888 = _1724;
        _1889 = _1736;
        _1890 = _1735;
        _1891 = _1734;
        _1892 = _1749;
        _1893 = _1748;
        _1894 = _1747;
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    }
    else
    {
        _1883 = _1574;
        _1884 = _1574;
        _1885 = _1574;
        _1886 = _1574;
        _1887 = _1574;
        _1888 = _1574;
        _1889 = _1574;
        _1890 = _1574;
        _1891 = _1574;
        _1892 = _1574;
        _1893 = _1574;
        _1894 = _1574;
        _1895 = 0.0;
        _1896 = 0.0;
        _1897 = 0.0;
    }
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1586)) + _1586;
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1587)) + _1587;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1588)) + _1588;
    float _1930 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1907));
    float _1951 = _1180 * 0.5;
    float _1952 = _1181 * 0.5;
    float _1953 = _1182 * 0.5;
    float _1954 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1957 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1960 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1994;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1967 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1573, _1577, _1580, _1583));
        float _1971 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1575, _1578, _1581, _1584));
        float _1975 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1576, _1579, _1582, _1585));
        float _1982 = dot(vec4(cbModelParam._m0[39u]), vec4(_1951, _1952, _1953, 1.0));
        _1994 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1994 = 1.0;
    }
    float _2005;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1996 = dot(vec4(cbModelParam._m0[40u]), vec4(_1951, _1952, _1953, 1.0));
        _2005 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2005 = 1.0;
    }
    float _2009 = (_2005 * cbModelParam._m0[1u].x) + (_1994 * (1.0 - cbModelParam._m0[1u].x));
    float _2019 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _998);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2019 : min(cbModelParam._m0[25u].z, _2019));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2067 = fma(_1244, cbModelParam._m0[13u].z, fma(_1240, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1236)) + cbModelParam._m0[13u].w;
        float _2071 = fma(_1244, cbModelParam._m0[14u].z, fma(_1240, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1236)) + cbModelParam._m0[14u].w;
        float _2075 = fma(_1244, cbModelParam._m0[15u].z, fma(_1240, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1236)) + cbModelParam._m0[15u].w;
        float _2078 = fma(_1182, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1180));
        float _2081 = fma(_1182, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1180));
        float _2084 = fma(_1182, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1180));
        float _2112;
        if (_2078 > 0.0)
        {
            _2112 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2112 = frontier_phi_17_15_ladder;
        }
        float _2336;
        if (_2081 > 0.0)
        {
            _2336 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2336 = frontier_phi_26_22_ladder;
        }
        float _2593;
        if (_2084 > 0.0)
        {
            _2593 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2593 = frontier_phi_38_33_ladder;
        }
        float _2595 = isnan(_2336) ? _2112 : (isnan(_2112) ? _2336 : min(_2112, _2336));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _2078) + _2067;
        float _2601 = (_2596 * _2081) + _2071;
        float _2602 = (_2596 * _2084) + _2075;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2603;
        float _2607 = _2603 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 > _2607) || ((_2601 < _2605) || ((_2600 < _2605) || (_2600 > _2607))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2602, cbModelParam._m0[9u].z, fma(_2601, cbModelParam._m0[9u].y, _2600 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2602, cbModelParam._m0[10u].z, fma(_2601, cbModelParam._m0[10u].y, _2600 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2602, cbModelParam._m0[11u].z, fma(_2601, cbModelParam._m0[11u].y, _2600 * cbModelParam._m0[11u].x))), _2020);
            frontier_phi_16_38_ladder = _2730.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2730.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2730.x * cbModelParam._m0[1u].y;
        }
        _2100 = frontier_phi_16_38_ladder_2;
        _2102 = frontier_phi_16_38_ladder_1;
        _2104 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1180, _1181, _1182), _2020);
        _2100 = _2088.x * cbModelParam._m0[1u].y;
        _2102 = _2088.y * cbModelParam._m0[1u].y;
        _2104 = _2088.z * cbModelParam._m0[1u].y;
    }
    float _2108 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _998);
    float _2109 = isnan(_2108) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2108 : min(cbModelParam._m0[25u].w, _2108));
    float _2199;
    float _2201;
    float _2203;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2163 = fma(_1244, cbModelParam._m0[21u].z, fma(_1240, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1236)) + cbModelParam._m0[21u].w;
        float _2167 = fma(_1244, cbModelParam._m0[22u].z, fma(_1240, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1236)) + cbModelParam._m0[22u].w;
        float _2171 = fma(_1244, cbModelParam._m0[23u].z, fma(_1240, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1236)) + cbModelParam._m0[23u].w;
        float _2174 = fma(_1182, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1180));
        float _2177 = fma(_1182, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1180));
        float _2180 = fma(_1182, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1180));
        float _2341;
        if (_2174 > 0.0)
        {
            _2341 = abs((1.0 - _2163) / _2174);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2163 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2341 = frontier_phi_28_24_ladder;
        }
        float _2620;
        if (_2177 > 0.0)
        {
            _2620 = abs((1.0 - _2167) / _2177);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2167 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2620 = frontier_phi_40_35_ladder;
        }
        float _2833;
        if (_2180 > 0.0)
        {
            _2833 = abs((1.0 - _2171) / _2180);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2171 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2833 = frontier_phi_49_46_ladder;
        }
        float _2835 = isnan(_2620) ? _2341 : (isnan(_2341) ? _2620 : min(_2341, _2620));
        float _2836 = isnan(_2833) ? _2835 : (isnan(_2835) ? _2833 : min(_2835, _2833));
        float _2840 = (_2836 * _2174) + _2163;
        float _2841 = (_2836 * _2177) + _2167;
        float _2842 = (_2836 * _2180) + _2171;
        float _2843 = _2836 * 9.9999997473787516355514526367188e-05;
        float _2844 = (-1.0) - _2843;
        float _2846 = _2843 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2842 > _2846) || ((_2842 < _2844) || ((_2841 > _2846) || ((_2841 < _2844) || ((_2840 < _2844) || (_2840 > _2846))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2842, cbModelParam._m0[17u].z, fma(_2841, cbModelParam._m0[17u].y, _2840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2842, cbModelParam._m0[18u].z, fma(_2841, cbModelParam._m0[18u].y, _2840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2842, cbModelParam._m0[19u].z, fma(_2841, cbModelParam._m0[19u].y, _2840 * cbModelParam._m0[19u].x))), _2109);
            frontier_phi_25_49_ladder = _3041.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3041.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3041.x * cbModelParam._m0[1u].z;
        }
        _2199 = frontier_phi_25_49_ladder_2;
        _2201 = frontier_phi_25_49_ladder_1;
        _2203 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1180, _1181, _1182), _2109);
        _2199 = _2183.x * cbModelParam._m0[1u].z;
        _2201 = _2183.y * cbModelParam._m0[1u].z;
        _2203 = _2183.z * cbModelParam._m0[1u].z;
    }
    float _2216 = (((_1207 * _1156) + _1208) * _1172) * ((cbModelParam._m0[1u].w * (_2199 - _2100)) + _2100);
    float _2218 = (((_1207 * _1158) + _1208) * _1172) * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2220 = (((_1207 * _1159) + _1208) * _1172) * ((cbModelParam._m0[1u].w * (_2203 - _2104)) + _2104);
    float _2223 = fma(_2220, cbSceneParam._m0[89u].z, fma(_2218, cbSceneParam._m0[89u].y, _2216 * cbSceneParam._m0[89u].x));
    float _2226 = fma(_2220, cbSceneParam._m0[90u].z, fma(_2218, cbSceneParam._m0[90u].y, _2216 * cbSceneParam._m0[90u].x));
    float _2229 = fma(_2220, cbSceneParam._m0[91u].z, fma(_2218, cbSceneParam._m0[91u].y, _2216 * cbSceneParam._m0[91u].x));
    vec4 _2237 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1094, _1095));
    float _2239 = _2237.w;
    float _2251 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2239);
    float _2252 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2239);
    float _2253 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2239);
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _1172 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2295 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2299 = _2259 | 1u;
    float _2310 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_995, _996, _997));
    float _2313 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_995, _996, _997));
    float _4587 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _4598 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2318 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2320 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2327 = ((cbLight._m0[_2276].x * _2282) * _2320) + (((cbLight._m0[_2286].x * _2251) * _2295) * _2318);
    float _2328 = ((_2282 * cbLight._m0[_2276].y) * _2320) + (((cbLight._m0[_2286].y * _2252) * _2295) * _2318);
    float _2329 = ((_2282 * cbLight._m0[_2276].z) * _2320) + (((cbLight._m0[_2286].z * _2253) * _2295) * _2318);
    uvec4 _2333 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2335 = _2333.x == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2335)
    {
        _2346 = _2327;
        _2348 = _2328;
        _2350 = _2329;
    }
    else
    {
        uint _2354 = _2259 + 6u;
        float _2370 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_995, _996, _997)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4609 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2373 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2346 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2327;
        _2348 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2328;
        _2350 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2329;
    }
    bool _2353 = _2333.y == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2353)
    {
        _2391 = _2346;
        _2393 = _2348;
        _2395 = _2350;
    }
    else
    {
        uint _2564 = _2259 + 7u;
        float _2580 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_995, _996, _997)) * 0.5) + 0.5;
        float _2581 = _2580 * _2580;
        float _4625 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2582 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2583 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2391 = (((cbLight._m0[_2564].x * 0.3183098733425140380859375) * _2582) * _2583) + _2346;
        _2393 = (((cbLight._m0[_2564].y * 0.3183098733425140380859375) * _2582) * _2583) + _2348;
        _2395 = (((cbLight._m0[_2564].z * 0.3183098733425140380859375) * _2582) * _2583) + _2350;
    }
    uint _2398 = _2259 + 8u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _998) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2259].x + _1074;
    float _2414 = cbLight._m0[_2259].y + _1075;
    float _2415 = cbLight._m0[_2259].z + _1076;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2259].xyz));
    float _4641 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _4652 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _2427 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2428 = dot(vec3(_995, _996, _997), vec3(_2420, _2421, _2422));
    float _4663 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2420, _2421, _2422));
    float _4674 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2412 * _2412;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
    float _2449 = 0.959999978542327880859375 - _1153;
    float _2451 = 0.959999978542327880859375 - _1154;
    float _2452 = 0.959999978542327880859375 - _1155;
    float _2459 = 1.0 - _2412;
    float _2470 = (0.5 / (((_2427 * ((_2426 * _2459) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2459) + _2412) * _2426))) * _2426;
    float _4685 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    uint _2486 = _2259 + 9u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _998) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2299].x + _1074;
    float _2500 = cbLight._m0[_2299].y + _1075;
    float _2501 = cbLight._m0[_2299].z + _1076;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2299].xyz));
    float _4696 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2513 = dot(vec3(_995, _996, _997), vec3(_2506, _2507, _2508));
    float _4707 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2506, _2507, _2508));
    float _4718 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2498 * _2498;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2539 = 1.0 - _2498;
    float _2549 = (0.5 / (((_2427 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2539) + _2498) * _2512))) * _2512;
    float _4729 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    float _2561 = (((((_2532 * _2449) + _1156) * cbLight._m0[_2486].x) * _2551) * _2282) + ((((cbLight._m0[_2398].x * _2251) * ((_2448 * _2449) + _1156)) * _2472) * _2295);
    float _2562 = (((((_2532 * _2451) + _1158) * cbLight._m0[_2486].y) * _2551) * _2282) + ((((cbLight._m0[_2398].y * _2252) * ((_2448 * _2451) + _1158)) * _2472) * _2295);
    float _2563 = (((((_2532 * _2452) + _1159) * cbLight._m0[_2486].z) * _2551) * _2282) + ((((cbLight._m0[_2398].z * _2253) * ((_2448 * _2452) + _1159)) * _2472) * _2295);
    float _2625;
    float _2627;
    float _2629;
    if (_2335)
    {
        _2625 = _2561;
        _2627 = _2562;
        _2629 = _2563;
    }
    else
    {
        uint _2631 = _2259 + 2u;
        uint _2635 = _2259 + 10u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _998) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _1074;
        float _2652 = cbLight._m0[_2631].y + _1075;
        float _2653 = cbLight._m0[_2631].z + _1076;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2631].xyz));
        float _4740 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2665 = dot(vec3(_995, _996, _997), vec3(_2658, _2659, _2660));
        float _4751 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4762 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2691 = 1.0 - _2650;
        float _2701 = (0.5 / (((_2427 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2691) + _2650) * _2664))) * _2664;
        float _4773 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2625 = (((((_2684 * _2449) + _1156) * cbLight._m0[_2635].x) * _2703) * _2704) + _2561;
        _2627 = (((((_2684 * _2451) + _1158) * cbLight._m0[_2635].y) * _2703) * _2704) + _2562;
        _2629 = (((((_2684 * _2452) + _1159) * cbLight._m0[_2635].z) * _2703) * _2704) + _2563;
    }
    float _2739;
    float _2741;
    float _2743;
    if (_2353)
    {
        _2739 = _2625;
        _2741 = _2627;
        _2743 = _2629;
    }
    else
    {
        uint _2750 = _2259 + 3u;
        uint _2754 = _2259 + 11u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _998) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _1074;
        float _2771 = cbLight._m0[_2750].y + _1075;
        float _2772 = cbLight._m0[_2750].z + _1076;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2750].xyz));
        float _4789 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2784 = dot(vec3(_995, _996, _997), vec3(_2777, _2778, _2779));
        float _4800 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4811 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
        float _2810 = 1.0 - _2769;
        float _2820 = (0.5 / (((_2427 * ((_2783 * _2810) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2810) + _2769) * _2783))) * _2783;
        float _4822 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2739 = (((((_2803 * _2449) + _1156) * cbLight._m0[_2754].x) * _2822) * _2823) + _2625;
        _2741 = (((((_2803 * _2451) + _1158) * cbLight._m0[_2754].y) * _2822) * _2823) + _2627;
        _2743 = (((((_2803 * _2452) + _1159) * cbLight._m0[_2754].z) * _2822) * _2823) + _2629;
    }
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_2257.y == 0u)
    {
        float _2898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2899 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2898;
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2898;
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2898;
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.x;
        uint _2925 = uint((float(_2913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1095) / _2914))) + floor(float(uint(cbSceneParam._m0[85u].x * _1094) / _2914)));
        float _2935 = (log2(_2901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2936 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        uint _2939 = uint(isnan(14.0) ? _2936 : (isnan(_2936) ? 14.0 : min(_2936, 14.0)));
        uvec4 _2944 = texelFetch(g_lightClusterGridBuffer, int(((_2939 << 2u) + (_2925 << 6u)) >> 2u));
        uint _2945 = _2944.x;
        uint _2946 = _2913.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2946 >> 4u) & 15u)) + 4294967295u) & _2945) == 0u) || ((_2946 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            uint _3205 = 0u;
            uint _3214;
            bool _3215;
            for (;;)
            {
                _3214 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                _3215 = _3214 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3215)
                {
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                else
                {
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    uint _3350;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3214;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    for (;;)
                    {
                        uint _3354 = uint(findLSB(_3350)) + (_3205 << 5u);
                        uint _3351 = (_3350 + 4294967295u) & _3350;
                        uint _3356 = _3354 * 48u;
                        vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3376 = (_3354 * 48u) + 4u;
                        vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3395 = (_3354 * 48u) + 8u;
                        vec3 _3406 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x));
                        float _3410 = _3370.x - _2899;
                        float _3411 = _3370.y - _2900;
                        float _3412 = _3370.z - _2901;
                        float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                        float _3416 = inversesqrt(_3413);
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3420 = dot(vec3(_1113, _1116, _1119), vec3(_3417, _3418, _3419));
                        float _3425 = 1.0 - (_3413 * _3370.w);
                        float _4848 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3427 = sqrt(_3413) * _3389.w;
                        float _3430 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3420) + _3431;
                        float _3437 = _3427 * _3427;
                        float _3441 = ((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3426) / ((_3437 * 0.699999988079071044921875) + 1.0);
                        float _3445 = (-0.0) - _2899;
                        float _3446 = (-0.0) - _2900;
                        float _3447 = (-0.0) - _2901;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3452 = _3451 * _3445;
                        float _3453 = _3451 * _3446;
                        float _3454 = _3451 * _3447;
                        float _3462 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                        float _3463 = 1.0 - _1188;
                        float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                        float _3471 = _3470 * _3470;
                        float _3472 = _3471 * _3471;
                        float _3473 = _3452 + _3417;
                        float _3474 = _3453 + _3418;
                        float _3475 = _3454 + _3419;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3483 = dot(vec3(_1113, _1116, _1119), vec3(_3452, _3453, _3454));
                        float _4864 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3487 = dot(vec3(_1113, _1116, _1119), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                        float _4875 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                        float _3495 = _3430 * _3471;
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3420) + _3496;
                        float _4886 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3501 = 1.0 - _3471;
                        float _3511 = (0.5 / (((_3500 * ((_3486 * _3501) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3471) * _3486))) * _3500;
                        float _4897 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3522 = (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3494 * _3494) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125))) * _3426;
                        _3274 = (_3441 * _3389.x) + _3347;
                        _3275 = (_3441 * _3389.y) + _3348;
                        _3276 = (_3441 * _3389.z) + _3349;
                        _3271 = (_3522 * _3406.x) + _3344;
                        _3272 = (_3522 * _3406.y) + _3345;
                        _3273 = (_3522 * _3406.z) + _3346;
                        if (_3351 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3351;
                        }
                    }
                    frontier_phi_66_pred = _3271;
                    frontier_phi_66_pred_1 = _3276;
                    frontier_phi_66_pred_2 = _3275;
                    frontier_phi_66_pred_3 = _3274;
                    frontier_phi_66_pred_4 = _3273;
                    frontier_phi_66_pred_5 = _3272;
                }
                _3047 = frontier_phi_66_pred;
                _3057 = frontier_phi_66_pred_1;
                _3055 = frontier_phi_66_pred_2;
                _3053 = frontier_phi_66_pred_3;
                _3051 = frontier_phi_66_pred_4;
                _3049 = frontier_phi_66_pred_5;
                uint _3206 = _3205 + 1u;
                if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3199 = _3047;
                    _3200 = _3049;
                    _3201 = _3051;
                    _3202 = _3053;
                    _3203 = _3055;
                    _3204 = _3057;
                    _3205 = _3206;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        if (((4294967295u << _3063) & _2945) == 0u)
        {
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
            _3173 = _3052;
            _3175 = _3054;
            _3177 = _3056;
        }
        else
        {
            float _3192 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
            float _3193 = _3192 * _2899;
            float _3194 = _3192 * _2900;
            float _3195 = _3192 * _2901;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3327 = _3046;
                float _3328 = _3048;
                float _3329 = _3050;
                float _3330 = _3052;
                float _3331 = _3054;
                float _3332 = _3056;
                uint _3333 = _3063;
                uint _3342;
                bool _3343;
                for (;;)
                {
                    _3342 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3333 << 2u)) >> 2u)).x;
                    _3343 = _3342 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3343)
                    {
                        frontier_phi_77_pred = _3332;
                        frontier_phi_77_pred_1 = _3331;
                        frontier_phi_77_pred_2 = _3330;
                        frontier_phi_77_pred_3 = _3329;
                        frontier_phi_77_pred_4 = _3328;
                        frontier_phi_77_pred_5 = _3327;
                    }
                    else
                    {
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        float _3551 = _3329;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        float _3554 = _3332;
                        uint _3555 = _3342;
                        uint _3556;
                        vec4 _3581;
                        float _3582;
                        vec4 _3597;
                        vec3 _3609;
                        vec4 _3624;
                        vec4 _3639;
                        float _3685;
                        bool _3686;
                        for (;;)
                        {
                            uint _3566 = ((_3333 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3555));
                            _3556 = (_3555 + 4294967295u) & _3555;
                            uint _3568 = _3566 * 40u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3582 = _3581.w;
                            uint _3584 = (_3566 * 40u) + 4u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3566 * 40u) + 8u;
                            _3609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x));
                            uint _3611 = (_3566 * 40u) + 16u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3566 * 40u) + 20u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3566 * 40u) + 24u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3660 = (_3566 * 40u) + 28u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3685 = fma(_2901, _3673.z, fma(_2900, _3673.y, _3673.x * _2899)) + _3673.w;
                            _3686 = !((fma(_2901, _3654.z, fma(_2900, _3654.y, _3654.x * _2899)) + _3654.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3686)
                            {
                                float _3713 = _3581.x - _2899;
                                float _3714 = _3581.y - _2900;
                                float _3715 = _3581.z - _2901;
                                float _3716 = dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715));
                                float _3719 = inversesqrt(_3716);
                                float _3720 = _3719 * _3713;
                                float _3721 = _3719 * _3714;
                                float _3722 = _3719 * _3715;
                                float _3726 = 1.0 - (_3716 / (_3582 * _3582));
                                float _4908 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3731 = sqrt(_3716) * _3597.w;
                                float _3733 = 1.39999997615814208984375 / (_3731 + 1.39999997615814208984375);
                                float _3734 = _3733 * _3733;
                                float _3737 = ((1.0 - _3734) * dot(vec3(_3720, _3721, _3722), vec3(_1113, _1116, _1119))) + _3734;
                                float _3740 = _3731 * _3731;
                                float _3744 = (fma(_2901, _3624.z, fma(_2900, _3624.y, _3624.x * _2899)) + _3624.w) / _3685;
                                float _3745 = (fma(_2901, _3639.z, fma(_2900, _3639.y, _3639.x * _2899)) + _3639.w) / _3685;
                                float _3749 = 1.0 - dot(vec2(_3744, _3745), vec2(_3744, _3745));
                                float _4924 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3751 = _3750 * (((isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0))) * _3727) / ((_3740 * 0.699999988079071044921875) + 1.0));
                                float _3763 = exp2(log2(1.0 / ((_3740 * 3.5) + 5.0)) * 0.25);
                                float _3764 = 1.0 - _1188;
                                float _3771 = sqrt(1.0 - ((1.0 - (_3764 * _3764)) * (1.0 - (_3763 * _3763))));
                                float _3772 = _3771 * _3771;
                                float _3773 = _3772 * _3772;
                                float _3774 = _3720 - _3193;
                                float _3775 = _3721 - _3194;
                                float _3776 = _3722 - _3195;
                                float _3780 = inversesqrt(dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776)));
                                float _3784 = dot(vec3(_1113, _1116, _1119), vec3((-0.0) - _3193, (-0.0) - _3194, (-0.0) - _3195));
                                float _4935 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3788 = dot(vec3(_1113, _1116, _1119), vec3(_3780 * _3774, _3780 * _3775, _3780 * _3776));
                                float _4946 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3795 = ((_3791 * _3791) * (_3773 + (-1.0))) + 1.0;
                                float _3796 = _3733 * _3772;
                                float _3797 = _3796 * _3796;
                                float _3803 = ((1.0 - _3797) * dot(vec3(_1113, _1116, _1119), vec3(_3720, _3721, _3722))) + _3797;
                                float _4957 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3805 = 1.0 - _3772;
                                float _3815 = (0.5 / (((_3804 * ((_3787 * _3805) + _3772)) + 9.9999999392252902907785028219223e-09) + (((_3804 * _3805) + _3772) * _3787))) * _3804;
                                float _4968 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3825 = (_3750 * _3727) * (((_3773 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3795 * _3795) * ((_3740 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3751 * _3597.y;
                                frontier_phi_83_pred_1 = _3751 * _3597.x;
                                frontier_phi_83_pred_2 = _3825 * _3609.z;
                                frontier_phi_83_pred_3 = _3825 * _3609.y;
                                frontier_phi_83_pred_4 = _3825 * _3609.x;
                                frontier_phi_83_pred_5 = _3751 * _3597.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_83_pred;
                            _3832 = frontier_phi_83_pred_1;
                            _3831 = frontier_phi_83_pred_2;
                            _3830 = frontier_phi_83_pred_3;
                            _3829 = frontier_phi_83_pred_4;
                            _3834 = frontier_phi_83_pred_5;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            if (_3556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3556;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3541;
                        frontier_phi_77_pred_1 = _3540;
                        frontier_phi_77_pred_2 = _3539;
                        frontier_phi_77_pred_3 = _3538;
                        frontier_phi_77_pred_4 = _3537;
                        frontier_phi_77_pred_5 = _3536;
                    }
                    _3178 = frontier_phi_77_pred;
                    _3176 = frontier_phi_77_pred_1;
                    _3174 = frontier_phi_77_pred_2;
                    _3172 = frontier_phi_77_pred_3;
                    _3170 = frontier_phi_77_pred_4;
                    _3168 = frontier_phi_77_pred_5;
                    uint _3334 = _3333 + 1u;
                    if (_3334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3327 = _3168;
                        _3328 = _3170;
                        _3329 = _3172;
                        _3330 = _3174;
                        _3331 = _3176;
                        _3332 = _3178;
                        _3333 = _3334;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3172;
                frontier_phi_58_59_ladder_1 = _3178;
                frontier_phi_58_59_ladder_2 = _3176;
                frontier_phi_58_59_ladder_3 = _3174;
                frontier_phi_58_59_ladder_4 = _3170;
                frontier_phi_58_59_ladder_5 = _3168;
            }
            else
            {
                frontier_phi_58_59_ladder = _3050;
                frontier_phi_58_59_ladder_1 = _3056;
                frontier_phi_58_59_ladder_2 = _3054;
                frontier_phi_58_59_ladder_3 = _3052;
                frontier_phi_58_59_ladder_4 = _3048;
                frontier_phi_58_59_ladder_5 = _3046;
            }
            _3167 = frontier_phi_58_59_ladder_5;
            _3169 = frontier_phi_58_59_ladder_4;
            _3171 = frontier_phi_58_59_ladder;
            _3173 = frontier_phi_58_59_ladder_3;
            _3175 = frontier_phi_58_59_ladder_2;
            _3177 = frontier_phi_58_59_ladder_1;
        }
        float _3182 = isnan(1.0) ? _1172 : (isnan(_1172) ? 1.0 : min(_1172, 1.0));
        _2958 = (_3182 * _3173) + _2391;
        _2960 = (_3182 * _3175) + _2393;
        _2962 = (_3182 * _3177) + _2395;
        _2964 = ((_3167 * _1156) * _3182) + _2739;
        _2966 = ((_3169 * _1158) * _3182) + _2741;
        _2968 = ((_3171 * _1159) * _3182) + _2743;
    }
    else
    {
        _2958 = _2391;
        _2960 = _2393;
        _2962 = _2395;
        _2964 = _2739;
        _2966 = _2741;
        _2968 = _2743;
    }
    float _4984 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4995 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _5006 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2985 = ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2958 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1172))) + ((_2964 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2009)) * cbPerFrame._m0[3u].x);
    float _2986 = ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2960 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1172))) + ((_2966 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2009)) * cbPerFrame._m0[3u].x);
    float _2987 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2962 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1172))) + ((_2968 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2009)) * cbPerFrame._m0[3u].x);
    uint _2988 = _290 + 6u;
    float _2996 = _1094 / cbSceneParam._m0[86u].x;
    float _2997 = _1095 / cbSceneParam._m0[86u].y;
    vec4 _3011 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, (log2((isnan(cbSceneParam._m0[77u].w) ? _1017 : (isnan(_1017) ? cbSceneParam._m0[77u].w : min(_1017, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3013 = _3011.x;
    float _3014 = _3011.y;
    float _3015 = _3011.z;
    float _3016 = _3011.w;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_1017 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_1017) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1017 : min(cbSceneParam._m0[80u].w, _1017));
        float _3072 = _3071 / _1017;
        float _3083 = _3072 * _1067;
        float _3084 = _1068 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3087 = _3072 * _1069;
        float _3089 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3090 = _3089 + cbSceneParam._m0[79u].w;
        float _3091 = cbSceneParam._m0[79u].w - _3084;
        float _3097 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3087 * _3087));
        float _3100 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3097;
        float _3105 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3107 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3284;
        if (abs((_3085 - _3089) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3284 = ((((_3090 > 0.0) ? exp2(_3105 * _3090) : (2.0 - exp2(_3107 * _3090))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3100;
        }
        else
        {
            float _3228 = 1.0 / cbSceneParam._m0[80u].x;
            float _3229 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : max(_3090, _3091));
            float _3230 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : min(_3090, _3091));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            _3284 = ((abs(_3097 / _3085) * cbSceneParam._m0[80u].y) * ((((_3239 - _3240) * 2.0) - ((exp2(_3105 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0)))) - exp2(_3105 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))))) * _3228)) - ((exp2(_3107 * _3239) - exp2(_3107 * _3240)) * _3228))) + (_3100 * cbSceneParam._m0[80u].z);
        }
        vec4 _3286 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, 1.0), 0.0);
        float _3295 = exp2((_3284 * (-1.44269502162933349609375)) * (1.0 - _3286.w));
        float _3296 = log2(_3295);
        float _3312 = log2(_3016);
        _3109 = (exp2(_3312 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].x)) * _3286.x) / cbSceneParam._m0[78u].x)) + _3013;
        _3111 = (exp2(_3312 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].y)) * _3286.y) / cbSceneParam._m0[78u].y)) + _3014;
        _3113 = (exp2(_3312 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].z)) * _3286.z) / cbSceneParam._m0[78u].z)) + _3015;
        _3115 = _3295 * _3016;
    }
    else
    {
        _3109 = _3013;
        _3111 = _3014;
        _3113 = _3015;
        _3115 = _3016;
    }
    bool _3322;
    vec4 _3125;
    vec4 _3147;
    float _3149;
    float _3153;
    float _3154;
    float _3155;
    float _3156;
    bool _3166;
    for (;;)
    {
        _3125 = cbMatDynParam._m0[0u];
        float _3127 = roundEven(_3125.y);
        bool _3128 = _3127 == 3.0;
        float _3129 = log2(_3115);
        float _3136 = exp2(_3129 * cbSceneParam._m0[78u].x) * _2985;
        float _3137 = exp2(_3129 * cbSceneParam._m0[78u].y) * _2986;
        float _3138 = exp2(_3129 * cbSceneParam._m0[78u].z) * _2987;
        float _3145 = _1083 + (-0.5);
        _3147 = cbMtdParam._m0[1u];
        _3149 = _3147.y * _3145;
        float _3152 = (_3127 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3153 = _3152 * (_3128 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3109)));
        _3154 = _3152 * (_3128 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3111)));
        _3155 = _3152 * (_3128 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3113)));
        _3156 = _3145 * 0.999000012874603271484375;
        _3166 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3166)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3156) < 0.5)
            {
                _3322 = true;
                break;
            }
        }
        uint _3263 = _1132 + uint(_3125.w);
        if ((cbInstanceData._m0[_3263].w < 1.0) && ((cbInstanceData._m0[_3263].w + _3156) < 0.5))
        {
            _3322 = true;
            break;
        }
        if ((_3149 + 1.0) < _3147.x)
        {
            _3322 = true;
            break;
        }
        _3322 = false;
        break;
    }
    float _3527;
    if (_3322)
    {
        discard_state = true;
        _3527 = 0.0;
    }
    else
    {
        _3527 = cbInstanceData._m0[_2988].w;
    }
    SV_Target.x = _3153;
    SV_Target.y = _3154;
    SV_Target.z = _3155;
    SV_Target.w = _3527;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2988].w;
    discard_exit();
}


