#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1481;
float _4142;
float _4143;
float _4144;
float _4145;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _348.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4154 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _426 = (_419 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _427 = (_419 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _428 = (_419 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _348.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4165 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _561 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _348.z) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[23u].w) + _549) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4176 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _569 = (_562 * ((_520.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _570 = (_562 * ((_520.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _571 = (_562 * ((_520.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _419) + _608;
    float _618 = ((_589.y - _609) * _419) + _609;
    float _619 = ((_589.z - _610) * _419) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_631.x - _617) * _492) + _617;
    float _643 = ((_631.y - _618) * _492) + _618;
    float _644 = ((_631.z - _619) * _492) + _619;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _669 = ((_656.z - _644) * _562) + _644;
    float _672 = ((((_656.x - _642) * _562) + _642) * 2.0) + (-1.0);
    float _674 = ((((_656.y - _643) * _562) + _643) * 2.0) + (-1.0);
    float _675 = dot(vec2(_672, _674), vec2(_672, _674));
    float _4187 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _721 = _719.x;
    float _722 = 1.0 - _721;
    float _737 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_721 - _722) * cbMtdParam._m0[24u].z) + _722) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4198 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _745 = (_738 * (cbMtdParam._m0[17u].x - _569)) + _569;
    float _746 = (_738 * (cbMtdParam._m0[17u].y - _570)) + _570;
    float _747 = (_738 * (cbMtdParam._m0[17u].z - _571)) + _571;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _775 = _773.x;
    float _793 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _775) * _419) + _775;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _793) * _492) + _793;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _810) * _562) + _810;
    float _832 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _828) * cbMtdParam._m0[19u].z) + _828;
    float _834 = _832 - (_832 * _738);
    float _838 = (cbMtdParam._m0[19u].w * (_694.z - _669)) + _669;
    vec4 _851 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _858 = (_851.x * 2.0) + (-1.0);
    float _859 = (_851.y * 2.0) + (-1.0);
    float _860 = dot(vec2(_858, _859), vec2(_858, _859));
    float _4209 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _868 = (_738 * (_851.z - _838)) + _838;
    float _871 = (((_694.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _672;
    float _872 = (((_694.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _674;
    float _884 = (((_858 - _871) + (cbMtdParam._m0[21u].x * _871)) * _738) + _871;
    float _885 = (((_859 - _872) + (cbMtdParam._m0[21u].x * _872)) * _738) + _872;
    float _886 = (_738 * (sqrt(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) - _680)) + _680;
    float _888 = cbMtdParam._m0[22u].x + _694.w;
    float _891 = fma(_886, _247 * NORMAL.x, fma(_885, _254 * TANGENT.x, (_240 * _232) * _884));
    float _894 = fma(_886, _247 * NORMAL.y, fma(_885, _254 * TANGENT.y, (_240 * _233) * _884));
    float _897 = fma(_886, _247 * NORMAL.z, fma(_885, _254 * TANGENT.z, (_240 * _234) * _884));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    float _4220 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _905 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4242 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4253 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4264 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4275 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _910 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _924 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _974 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _964);
    float _975 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _964);
    float _976 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _964);
    float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
    float _981 = _974 * _980;
    float _982 = _975 * _980;
    float _983 = _976 * _980;
    vec4 _988 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _990 = _988.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1162 = sqrt(((_974 * _974) + (_975 * _975)) + (_976 * _976));
        float _1168 = (cbMatDynParam._m0[5u].x * _1162) + cbMatDynParam._m0[5u].y;
        float _4286 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1173 = (cbMatDynParam._m0[5u].z * _1162) + cbMatDynParam._m0[5u].w;
        float _4297 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) - _1169)) + _1169) < ((_990 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1001 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1002 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1020 = fma(_904, cbSceneParam._m0[5u].z, fma(_903, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _902));
    float _1023 = fma(_904, cbSceneParam._m0[6u].z, fma(_903, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _902));
    float _1026 = fma(_904, cbSceneParam._m0[7u].z, fma(_903, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _902));
    uint _1039 = _260 + 9u;
    uint _1040 = _1039 + uint(cbMatDynParam._m0[0u].w);
    float _1046 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * cbInstanceData._m0[_1040].x;
    float _1047 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * cbInstanceData._m0[_1040].y;
    float _1048 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * cbInstanceData._m0[_1040].z;
    float _4308 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _1052 = 1.0 - _910;
    float _1053 = _1049 * _1052;
    float _1054 = _1050 * _1052;
    float _1055 = _1051 * _1052;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _910;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _910;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _910;
    float _1063 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    vec4 _1075 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1001, cbSceneParam._m0[86u].y * _1002));
    float _1079 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * TEXCOORD_5.w) * _1075.x;
    float _1080 = dot(vec3(_902, _903, _904), vec3(_981, _982, _983));
    float _1083 = _1080 * 2.0;
    float _1087 = (_1083 * _902) - _981;
    float _1088 = (_1083 * _903) - _982;
    float _1089 = (_1083 * _904) - _983;
    float _1093 = abs(dot(vec3(_981, _982, _983), vec3(_902, _903, _904)));
    float _4341 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1095 = sqrt(_905);
    float _1108 = exp2((_1095 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1095 * 3.0));
    float _1114 = (1.0 - _1108) * ((_1095 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1115 = _1108 * _1095;
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1480;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1205 = fma(_1151, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143));
        float _1209 = fma(_1151, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143));
        float _1213 = fma(_1151, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143));
        float _1238 = _1143 + _902;
        float _1239 = _1147 + _903;
        float _1240 = _1151 + _904;
        float _1250 = fma(_1240, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238)) - _1205;
        float _1251 = fma(_1240, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238)) - _1209;
        float _1252 = fma(_1240, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238)) - _1213;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1205 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1209 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[34u].z) + ((((((_1213 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1308 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1274.x + (-0.5));
        float _1310 = _1308 * (_1274.y + (-0.5));
        float _1311 = _1308 * (_1274.z + (-0.5));
        float _1318 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1281.x + (-0.5));
        float _1320 = _1318 * (_1281.y + (-0.5));
        float _1321 = _1318 * (_1281.z + (-0.5));
        float _1328 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1288.x + (-0.5));
        float _1330 = _1328 * (_1288.y + (-0.5));
        float _1331 = _1328 * (_1288.z + (-0.5));
        float _1338 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1295.x + (-0.5));
        float _1340 = _1338 * (_1295.y + (-0.5));
        float _1341 = _1338 * (_1295.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1362 = (dot(vec3(_902, _903, _904), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1372 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4389 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1374 + 1.0))) + _1379) * _1342;
        float _1389 = _1310 * 0.5;
        float _1390 = _1320 * 0.5;
        float _1391 = _1330 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_902, _903, _904), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4422 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1416 + 1.0))) + _1421) * _1343;
        float _1431 = _1311 * 0.5;
        float _1432 = _1321 * 0.5;
        float _1433 = _1331 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_902, _903, _904), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4455 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1458 + 1.0))) + _1463) * _1344;
        _1480 = _1311;
        _1482 = _1310;
        _1483 = _1309;
        _1484 = _1321;
        _1485 = _1320;
        _1486 = _1319;
        _1487 = _1331;
        _1488 = _1330;
        _1489 = _1329;
        _1490 = _1344;
        _1491 = _1343;
        _1492 = _1342;
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1481;
        _1482 = _1481;
        _1483 = _1481;
        _1484 = _1481;
        _1485 = _1481;
        _1486 = _1481;
        _1487 = _1481;
        _1488 = _1481;
        _1489 = _1481;
        _1490 = _1481;
        _1491 = _1481;
        _1492 = _1481;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1521 = fma(_1151, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143));
        float _1525 = fma(_1151, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143));
        float _1529 = fma(_1151, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143));
        float _1552 = _1143 + _902;
        float _1553 = _1147 + _903;
        float _1554 = _1151 + _904;
        float _1564 = fma(_1554, cbModelParam._m0[30u].z, fma(_1553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1552)) - _1521;
        float _1565 = fma(_1554, cbModelParam._m0[31u].z, fma(_1553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1552)) - _1525;
        float _1566 = fma(_1554, cbModelParam._m0[32u].z, fma(_1553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1552)) - _1529;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1583 = ((_1570 * _1564) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1521 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1570 * _1565) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1525 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1570 * _1566) / cbModelParam._m0[35u].z) + ((((((_1529 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        float _1620 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1587.x + (-0.5));
        float _1622 = _1620 * (_1587.y + (-0.5));
        float _1623 = _1620 * (_1587.z + (-0.5));
        float _1630 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1594.x + (-0.5));
        float _1632 = _1630 * (_1594.y + (-0.5));
        float _1633 = _1630 * (_1594.z + (-0.5));
        float _1640 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1601.x + (-0.5));
        float _1642 = _1640 * (_1601.y + (-0.5));
        float _1643 = _1640 * (_1601.z + (-0.5));
        float _1650 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1608.x + (-0.5));
        float _1652 = _1650 * (_1608.y + (-0.5));
        float _1653 = _1650 * (_1608.z + (-0.5));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = _1621 * 0.5;
        float _1658 = _1631 * 0.5;
        float _1659 = _1641 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_902, _903, _904), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4518 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1684 + 1.0))) + _1689) * _1654;
        float _1699 = _1622 * 0.5;
        float _1700 = _1632 * 0.5;
        float _1701 = _1642 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_902, _903, _904), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4551 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1726 + 1.0))) + _1731) * _1655;
        float _1741 = _1623 * 0.5;
        float _1742 = _1633 * 0.5;
        float _1743 = _1643 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_902, _903, _904), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4584 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1768 + 1.0))) + _1773) * _1656;
        _1790 = _1623;
        _1791 = _1622;
        _1792 = _1621;
        _1793 = _1633;
        _1794 = _1632;
        _1795 = _1631;
        _1796 = _1643;
        _1797 = _1642;
        _1798 = _1641;
        _1799 = _1656;
        _1800 = _1655;
        _1801 = _1654;
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
    }
    else
    {
        _1790 = _1481;
        _1791 = _1481;
        _1792 = _1481;
        _1793 = _1481;
        _1794 = _1481;
        _1795 = _1481;
        _1796 = _1481;
        _1797 = _1481;
        _1798 = _1481;
        _1799 = _1481;
        _1800 = _1481;
        _1801 = _1481;
        _1802 = 0.0;
        _1803 = 0.0;
        _1804 = 0.0;
    }
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1493)) + _1493;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1494)) + _1494;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1495)) + _1495;
    float _1837 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1814));
    float _1858 = _1087 * 0.5;
    float _1859 = _1088 * 0.5;
    float _1860 = _1089 * 0.5;
    float _1861 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1864 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1867 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1901;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1874 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1480, _1484, _1487, _1490));
        float _1878 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1882 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1889 = dot(vec4(cbModelParam._m0[39u]), vec4(_1858, _1859, _1860, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1912;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1903 = dot(vec4(cbModelParam._m0[40u]), vec4(_1858, _1859, _1860, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1916 = (_1912 * cbModelParam._m0[1u].x) + (_1901 * (1.0 - cbModelParam._m0[1u].x));
    float _1926 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _905);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1926 : min(cbModelParam._m0[25u].z, _1926));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1974 = fma(_1151, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143)) + cbModelParam._m0[13u].w;
        float _1978 = fma(_1151, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143)) + cbModelParam._m0[14u].w;
        float _1982 = fma(_1151, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143)) + cbModelParam._m0[15u].w;
        float _1985 = fma(_1089, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087));
        float _1988 = fma(_1089, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087));
        float _1991 = fma(_1089, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087));
        float _2019;
        if (_1985 > 0.0)
        {
            _2019 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2019 = frontier_phi_17_15_ladder;
        }
        float _2191;
        if (_1988 > 0.0)
        {
            _2191 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2191 = frontier_phi_26_22_ladder;
        }
        float _2486;
        if (_1991 > 0.0)
        {
            _2486 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2486 = frontier_phi_38_33_ladder;
        }
        float _2488 = isnan(_2191) ? _2019 : (isnan(_2019) ? _2191 : min(_2019, _2191));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1985) + _1974;
        float _2494 = (_2489 * _1988) + _1978;
        float _2495 = (_2489 * _1991) + _1982;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2496;
        float _2500 = _2496 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 > _2500) || ((_2494 < _2498) || ((_2493 < _2498) || (_2493 > _2500))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2495, cbModelParam._m0[9u].z, fma(_2494, cbModelParam._m0[9u].y, _2493 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2495, cbModelParam._m0[10u].z, fma(_2494, cbModelParam._m0[10u].y, _2493 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2495, cbModelParam._m0[11u].z, fma(_2494, cbModelParam._m0[11u].y, _2493 * cbModelParam._m0[11u].x))), _1927);
            frontier_phi_16_38_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2007 = frontier_phi_16_38_ladder_2;
        _2009 = frontier_phi_16_38_ladder_1;
        _2011 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1087, _1088, _1089), _1927);
        _2007 = _1995.x * cbModelParam._m0[1u].y;
        _2009 = _1995.y * cbModelParam._m0[1u].y;
        _2011 = _1995.z * cbModelParam._m0[1u].y;
    }
    float _2015 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _905);
    float _2016 = isnan(_2015) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2015 : min(cbModelParam._m0[25u].w, _2015));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2070 = fma(_1151, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143)) + cbModelParam._m0[21u].w;
        float _2074 = fma(_1151, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143)) + cbModelParam._m0[22u].w;
        float _2078 = fma(_1151, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143)) + cbModelParam._m0[23u].w;
        float _2081 = fma(_1089, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087));
        float _2084 = fma(_1089, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087));
        float _2087 = fma(_1089, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087));
        float _2196;
        if (_2081 > 0.0)
        {
            _2196 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2196 = frontier_phi_28_24_ladder;
        }
        float _2513;
        if (_2084 > 0.0)
        {
            _2513 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2513 = frontier_phi_40_35_ladder;
        }
        float _2851;
        if (_2087 > 0.0)
        {
            _2851 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2851 = frontier_phi_50_47_ladder;
        }
        float _2853 = isnan(_2513) ? _2196 : (isnan(_2196) ? _2513 : min(_2196, _2513));
        float _2854 = isnan(_2851) ? _2853 : (isnan(_2853) ? _2851 : min(_2853, _2851));
        float _2858 = (_2854 * _2081) + _2070;
        float _2859 = (_2854 * _2084) + _2074;
        float _2860 = (_2854 * _2087) + _2078;
        float _2861 = _2854 * 9.9999997473787516355514526367188e-05;
        float _2862 = (-1.0) - _2861;
        float _2864 = _2861 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2860 > _2864) || ((_2860 < _2862) || ((_2859 > _2864) || ((_2859 < _2862) || ((_2858 < _2862) || (_2858 > _2864))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2860, cbModelParam._m0[17u].z, fma(_2859, cbModelParam._m0[17u].y, _2858 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2860, cbModelParam._m0[18u].z, fma(_2859, cbModelParam._m0[18u].y, _2858 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2860, cbModelParam._m0[19u].z, fma(_2859, cbModelParam._m0[19u].y, _2858 * cbModelParam._m0[19u].x))), _2016);
            frontier_phi_25_50_ladder = _2982.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2982.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2982.x * cbModelParam._m0[1u].z;
        }
        _2106 = frontier_phi_25_50_ladder_2;
        _2108 = frontier_phi_25_50_ladder_1;
        _2110 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1087, _1088, _1089), _2016);
        _2106 = _2090.x * cbModelParam._m0[1u].z;
        _2108 = _2090.y * cbModelParam._m0[1u].z;
        _2110 = _2090.z * cbModelParam._m0[1u].z;
    }
    float _2123 = (((_1114 * _1063) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2106 - _2007)) + _2007);
    float _2125 = (((_1114 * _1065) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2108 - _2009)) + _2009);
    float _2127 = (((_1114 * _1066) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2110 - _2011)) + _2011);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2125, cbSceneParam._m0[89u].y, _2123 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2125, cbSceneParam._m0[90u].y, _2123 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2125, cbSceneParam._m0[91u].y, _2123 * cbSceneParam._m0[91u].x));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2183 = _2170 / _2182;
    float _2184 = _2174 / _2182;
    float _2185 = _2178 / _2182;
    float _2332;
    float _2333;
    float _2334;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2212 = ((uint(_2185 > cbSceneParam._m0[59u].y) + uint(_2185 > cbSceneParam._m0[59u].x)) + uint(_2185 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2213 = _2212 + 43u;
        uint _2221 = _2212 + 44u;
        uint _2229 = _2212 + 45u;
        uint _2237 = _2212 + 46u;
        float _2248 = fma(_2182, cbSceneParam._m0[_2213].w, fma(_2178, cbSceneParam._m0[_2213].z, fma(_2174, cbSceneParam._m0[_2213].y, _2170 * cbSceneParam._m0[_2213].x)));
        float _2252 = fma(_2182, cbSceneParam._m0[_2221].w, fma(_2178, cbSceneParam._m0[_2221].z, fma(_2174, cbSceneParam._m0[_2221].y, _2170 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2182, cbSceneParam._m0[_2237].w, fma(_2178, cbSceneParam._m0[_2237].z, fma(_2174, cbSceneParam._m0[_2237].y, _2170 * cbSceneParam._m0[_2237].x)));
        float _2265 = cbSceneParam._m0[33u].z * _2260;
        float _2267 = cbSceneParam._m0[33u].w * _2260;
        float _2270 = fma(_2182, cbSceneParam._m0[_2229].w, fma(_2178, cbSceneParam._m0[_2229].z, fma(_2174, cbSceneParam._m0[_2229].y, _2170 * cbSceneParam._m0[_2229].x))) / _2260;
        float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
        float _4710 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2325 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2265 + _2248) / _2260, (_2267 + _2252) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2267 + _2248) / _2260, (_2252 - _2265) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2265) / _2260, (_2252 - _2267) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2267) / _2260, (_2265 + _2252) / _2260), _2270), 0.0)).x), vec4(0.25)));
        _2332 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
        _2333 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
        _2334 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2332 = 1.0;
        _2333 = 1.0;
        _2334 = 1.0;
    }
    float _2398;
    float _2400;
    float _2402;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2386 = fma(_2182, cbSceneParam._m0[63u].w, fma(_2178, cbSceneParam._m0[63u].z, fma(_2174, cbSceneParam._m0[63u].y, _2170 * cbSceneParam._m0[63u].x)));
        float _2387 = fma(_2182, cbSceneParam._m0[60u].w, fma(_2178, cbSceneParam._m0[60u].z, fma(_2174, cbSceneParam._m0[60u].y, _2170 * cbSceneParam._m0[60u].x))) / _2386;
        float _2388 = fma(_2182, cbSceneParam._m0[61u].w, fma(_2178, cbSceneParam._m0[61u].z, fma(_2174, cbSceneParam._m0[61u].y, _2170 * cbSceneParam._m0[61u].x))) / _2386;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2387 >= cbSceneParam._m0[64u].x) && (_2388 >= cbSceneParam._m0[64u].y)) && (_2387 <= cbSceneParam._m0[64u].z)) && (_2388 <= cbSceneParam._m0[64u].w))
        {
            float _2526 = fma(_2182, cbSceneParam._m0[62u].w, fma(_2178, cbSceneParam._m0[62u].z, fma(_2174, cbSceneParam._m0[62u].y, _2170 * cbSceneParam._m0[62u].x))) / _2386;
            float _2530 = isnan(cbSceneParam._m0[41u].w) ? _2526 : (isnan(_2526) ? cbSceneParam._m0[41u].w : max(_2526, cbSceneParam._m0[41u].w));
            float _2573 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
            float _4726 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
            float _2580 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2387, cbSceneParam._m0[33u].w + _2388), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2387, _2388 - cbSceneParam._m0[33u].z), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].z, _2388 - cbSceneParam._m0[33u].w), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2388), _2530), 0.0)).x), vec4(0.25)));
            float _2584 = 1.0 - (_2580 * cbSceneParam._m0[34u].x);
            float _2585 = 1.0 - (_2580 * cbSceneParam._m0[34u].y);
            float _2586 = 1.0 - (_2580 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_37_36_ladder_1 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_37_36_ladder_2 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
        }
        else
        {
            frontier_phi_37_36_ladder = _2334;
            frontier_phi_37_36_ladder_1 = _2333;
            frontier_phi_37_36_ladder_2 = _2332;
        }
        _2398 = frontier_phi_37_36_ladder_2;
        _2400 = frontier_phi_37_36_ladder_1;
        _2402 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2398 = _2332;
        _2400 = _2333;
        _2402 = _2334;
    }
    uvec4 _2407 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2409 = _2407.x * 14u;
    uint _2410 = _2409 + 13u;
    float _2417 = _1079 + (-1.0);
    float _2422 = (cbLight._m0[_2410].x * _2417) + 1.0;
    float _2423 = (cbLight._m0[_2410].y * _2417) + 1.0;
    float _2424 = (cbLight._m0[_2410].z * _2417) + 1.0;
    float _2425 = (cbLight._m0[_2410].w * _2417) + 1.0;
    uint _2426 = _2409 + 5u;
    float _2432 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2436 = _2409 + 4u;
    float _2445 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2449 = _2409 | 1u;
    float _2460 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_902, _903, _904));
    float _2463 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_902, _903, _904));
    float _4762 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _4773 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2468 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * 0.3183098733425140380859375;
    float _2470 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * 0.3183098733425140380859375;
    float _2477 = ((cbLight._m0[_2426].x * _2432) * _2470) + (((cbLight._m0[_2436].x * _2398) * _2445) * _2468);
    float _2478 = ((_2432 * cbLight._m0[_2426].y) * _2470) + (((cbLight._m0[_2436].y * _2400) * _2445) * _2468);
    float _2479 = ((_2432 * cbLight._m0[_2426].z) * _2470) + (((cbLight._m0[_2436].z * _2402) * _2445) * _2468);
    uvec4 _2483 = floatBitsToUint(cbLight._m0[_2409 + 12u]);
    bool _2485 = _2483.x == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2485)
    {
        _2587 = _2477;
        _2589 = _2478;
        _2591 = _2479;
    }
    else
    {
        uint _2595 = _2409 + 6u;
        float _2611 = (dot(vec3(cbLight._m0[_2409 + 2u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4784 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2614 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2587 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2477;
        _2589 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2478;
        _2591 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2479;
    }
    bool _2594 = _2483.y == 0u;
    float _2649;
    float _2651;
    float _2653;
    if (_2594)
    {
        _2649 = _2587;
        _2651 = _2589;
        _2653 = _2591;
    }
    else
    {
        uint _2822 = _2409 + 7u;
        float _2838 = (dot(vec3(cbLight._m0[_2409 + 3u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2839 = _2838 * _2838;
        float _4800 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2840 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2841 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2649 = (((cbLight._m0[_2822].x * 0.3183098733425140380859375) * _2840) * _2841) + _2587;
        _2651 = (((cbLight._m0[_2822].y * 0.3183098733425140380859375) * _2840) * _2841) + _2589;
        _2653 = (((cbLight._m0[_2822].z * 0.3183098733425140380859375) * _2840) * _2841) + _2591;
    }
    uint _2656 = _2409 + 8u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _905) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2409].x + _981;
    float _2672 = cbLight._m0[_2409].y + _982;
    float _2673 = cbLight._m0[_2409].z + _983;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2409].xyz));
    float _4816 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _4827 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2685 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _2686 = dot(vec3(_902, _903, _904), vec3(_2678, _2679, _2680));
    float _4838 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _2690 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2678, _2679, _2680));
    float _4849 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2694 = _2670 * _2670;
    float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
    float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
    float _2707 = 0.959999978542327880859375 - _1060;
    float _2709 = 0.959999978542327880859375 - _1061;
    float _2710 = 0.959999978542327880859375 - _1062;
    float _2717 = 1.0 - _2670;
    float _2728 = (0.5 / (((_2685 * ((_2684 * _2717) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2717) + _2670) * _2684))) * _2684;
    float _4860 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
    uint _2744 = _2409 + 9u;
    float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _905) * 0.949999988079071044921875);
    float _2756 = _2755 * _2755;
    float _2757 = cbLight._m0[_2449].x + _981;
    float _2758 = cbLight._m0[_2449].y + _982;
    float _2759 = cbLight._m0[_2449].z + _983;
    float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
    float _2764 = _2763 * _2757;
    float _2765 = _2763 * _2758;
    float _2766 = _2763 * _2759;
    float _2767 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2449].xyz));
    float _4871 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2770 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2771 = dot(vec3(_902, _903, _904), vec3(_2764, _2765, _2766));
    float _4882 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2774 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2775 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2764, _2765, _2766));
    float _4893 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2779 = _2756 * _2756;
    float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
    float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0);
    float _2797 = 1.0 - _2756;
    float _2807 = (0.5 / (((_2685 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2797) + _2756) * _2770))) * _2770;
    float _4904 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2809 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
    float _2819 = (((((_2790 * _2707) + _1063) * cbLight._m0[_2744].x) * _2809) * _2432) + ((((cbLight._m0[_2656].x * _2398) * ((_2706 * _2707) + _1063)) * _2730) * _2445);
    float _2820 = (((((_2790 * _2709) + _1065) * cbLight._m0[_2744].y) * _2809) * _2432) + ((((cbLight._m0[_2656].y * _2400) * ((_2706 * _2709) + _1065)) * _2730) * _2445);
    float _2821 = (((((_2790 * _2710) + _1066) * cbLight._m0[_2744].z) * _2809) * _2432) + ((((cbLight._m0[_2656].z * _2402) * ((_2706 * _2710) + _1066)) * _2730) * _2445);
    float _2877;
    float _2879;
    float _2881;
    if (_2485)
    {
        _2877 = _2819;
        _2879 = _2820;
        _2881 = _2821;
    }
    else
    {
        uint _2883 = _2409 + 2u;
        uint _2887 = _2409 + 10u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _905) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _981;
        float _2904 = cbLight._m0[_2883].y + _982;
        float _2905 = cbLight._m0[_2883].z + _983;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2883].xyz));
        float _4915 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
        float _2917 = dot(vec3(_902, _903, _904), vec3(_2910, _2911, _2912));
        float _4926 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4937 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2936 = exp2(log2(1.0 - (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) * 5.0);
        float _2943 = 1.0 - _2902;
        float _2953 = (0.5 / (((_2685 * ((_2916 * _2943) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2943) + _2902) * _2916))) * _2916;
        float _4948 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2955 = (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2956 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2877 = (((((_2936 * _2707) + _1063) * cbLight._m0[_2887].x) * _2955) * _2956) + _2819;
        _2879 = (((((_2936 * _2709) + _1065) * cbLight._m0[_2887].y) * _2955) * _2956) + _2820;
        _2881 = (((((_2936 * _2710) + _1066) * cbLight._m0[_2887].z) * _2955) * _2956) + _2821;
    }
    float _2987;
    float _2989;
    float _2991;
    if (_2594)
    {
        _2987 = _2877;
        _2989 = _2879;
        _2991 = _2881;
    }
    else
    {
        uint _2998 = _2409 + 3u;
        uint _3002 = _2409 + 11u;
        float _3016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2998].w)) * _905) * 0.949999988079071044921875);
        float _3017 = _3016 * _3016;
        float _3018 = cbLight._m0[_2998].x + _981;
        float _3019 = cbLight._m0[_2998].y + _982;
        float _3020 = cbLight._m0[_2998].z + _983;
        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
        float _3025 = _3024 * _3018;
        float _3026 = _3024 * _3019;
        float _3027 = _3024 * _3020;
        float _3028 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2998].xyz));
        float _4964 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _3032 = dot(vec3(_902, _903, _904), vec3(_3025, _3026, _3027));
        float _4975 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3035 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _3036 = dot(vec3(cbLight._m0[_2998].xyz), vec3(_3025, _3026, _3027));
        float _4986 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3040 = _3017 * _3017;
        float _3044 = ((_3035 * _3035) * (_3040 + (-1.0))) + 1.0;
        float _3051 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
        float _3058 = 1.0 - _3017;
        float _3068 = (0.5 / (((_2685 * ((_3031 * _3058) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _3058) + _3017) * _3031))) * _3031;
        float _4997 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3070 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_3040 / ((_3044 * _3044) * 3.141590118408203125));
        float _3071 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2987 = (((((_3051 * _2707) + _1063) * cbLight._m0[_3002].x) * _3070) * _3071) + _2877;
        _2989 = (((((_3051 * _2709) + _1065) * cbLight._m0[_3002].y) * _3070) * _3071) + _2879;
        _2991 = (((((_3051 * _2710) + _1066) * cbLight._m0[_3002].z) * _3070) * _3071) + _2881;
    }
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_2407.y == 0u)
    {
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.x;
        uint _3104 = uint((float(_3092.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1002) / _3093))) + floor(float(uint(cbSceneParam._m0[85u].x * _1001) / _3093)));
        float _3114 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3115 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
        uint _3118 = uint(isnan(14.0) ? _3115 : (isnan(_3115) ? 14.0 : min(_3115, 14.0)));
        uvec4 _3123 = texelFetch(g_lightClusterGridBuffer, int(((_3118 << 2u) + (_3104 << 6u)) >> 2u));
        uint _3124 = _3123.x;
        uint _3125 = _3092.z;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        if (((((1u << ((_3125 >> 4u) & 15u)) + 4294967295u) & _3124) == 0u) || ((_3125 & 240u) == 0u))
        {
            _3204 = 0.0;
            _3206 = 0.0;
            _3208 = 0.0;
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
        }
        else
        {
            float _3205;
            float _3207;
            float _3209;
            float _3211;
            float _3213;
            float _3215;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            uint _3363 = 0u;
            uint _3372;
            bool _3373;
            for (;;)
            {
                _3372 = texelFetch(g_lightClassification, int((((_3118 << 5u) + (_3104 << 9u)) + (_3363 << 2u)) >> 2u)).x;
                _3373 = _3372 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3373)
                {
                    frontier_phi_71_pred = _3362;
                    frontier_phi_71_pred_1 = _3361;
                    frontier_phi_71_pred_2 = _3360;
                    frontier_phi_71_pred_3 = _3359;
                    frontier_phi_71_pred_4 = _3358;
                    frontier_phi_71_pred_5 = _3357;
                }
                else
                {
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    uint _3508;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3360;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3372;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    for (;;)
                    {
                        uint _3512 = uint(findLSB(_3508)) + (_3363 << 5u);
                        uint _3509 = (_3508 + 4294967295u) & _3508;
                        uint _3514 = _3512 * 48u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 3u)).x));
                        uint _3534 = (_3512 * 48u) + 4u;
                        vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 3u)).x));
                        uint _3553 = (_3512 * 48u) + 8u;
                        vec3 _3564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x));
                        float _3568 = _3528.x - _2183;
                        float _3569 = _3528.y - _2184;
                        float _3570 = _3528.z - _2185;
                        float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                        float _3574 = inversesqrt(_3571);
                        float _3575 = _3574 * _3568;
                        float _3576 = _3574 * _3569;
                        float _3577 = _3574 * _3570;
                        float _3578 = dot(vec3(_1020, _1023, _1026), vec3(_3575, _3576, _3577));
                        float _3583 = 1.0 - (_3571 * _3528.w);
                        float _5023 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                        float _3585 = sqrt(_3571) * _3547.w;
                        float _3588 = 1.39999997615814208984375 / (_3585 + 1.39999997615814208984375);
                        float _3589 = _3588 * _3588;
                        float _3592 = ((1.0 - _3589) * _3578) + _3589;
                        float _3595 = _3585 * _3585;
                        float _3599 = ((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3584) / ((_3595 * 0.699999988079071044921875) + 1.0);
                        float _3603 = (-0.0) - _2183;
                        float _3604 = (-0.0) - _2184;
                        float _3605 = (-0.0) - _2185;
                        float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                        float _3610 = _3609 * _3603;
                        float _3611 = _3609 * _3604;
                        float _3612 = _3609 * _3605;
                        float _3619 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                        float _3620 = 1.0 - _1095;
                        float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                        float _3628 = _3627 * _3627;
                        float _3629 = _3628 * _3628;
                        float _3630 = _3610 + _3575;
                        float _3631 = _3611 + _3576;
                        float _3632 = _3612 + _3577;
                        float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                        float _3640 = dot(vec3(_1020, _1023, _1026), vec3(_3610, _3611, _3612));
                        float _5039 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3643 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3644 = dot(vec3(_1020, _1023, _1026), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                        float _5050 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3647 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                        float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                        float _3652 = _3588 * _3628;
                        float _3653 = _3652 * _3652;
                        float _3656 = ((1.0 - _3653) * _3578) + _3653;
                        float _5061 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3657 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                        float _3658 = 1.0 - _3628;
                        float _3668 = (0.5 / (((_3657 * ((_3643 * _3658) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3628) * _3643))) * _3657;
                        float _5072 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3679 = (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)))) / ((_3651 * _3651) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125))) * _3584;
                        _3432 = (_3599 * _3547.x) + _3505;
                        _3433 = (_3599 * _3547.y) + _3506;
                        _3434 = (_3599 * _3547.z) + _3507;
                        _3429 = (_3679 * _3564.x) + _3502;
                        _3430 = (_3679 * _3564.y) + _3503;
                        _3431 = (_3679 * _3564.z) + _3504;
                        if (_3509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3432;
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3509;
                        }
                    }
                    frontier_phi_71_pred = _3434;
                    frontier_phi_71_pred_1 = _3433;
                    frontier_phi_71_pred_2 = _3432;
                    frontier_phi_71_pred_3 = _3431;
                    frontier_phi_71_pred_4 = _3430;
                    frontier_phi_71_pred_5 = _3429;
                }
                _3215 = frontier_phi_71_pred;
                _3213 = frontier_phi_71_pred_1;
                _3211 = frontier_phi_71_pred_2;
                _3209 = frontier_phi_71_pred_3;
                _3207 = frontier_phi_71_pred_4;
                _3205 = frontier_phi_71_pred_5;
                uint _3364 = _3363 + 1u;
                if (_3364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3357 = _3205;
                    _3358 = _3207;
                    _3359 = _3209;
                    _3360 = _3211;
                    _3361 = _3213;
                    _3362 = _3215;
                    _3363 = _3364;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3204 = _3205;
            _3206 = _3207;
            _3208 = _3209;
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
        }
        uvec4 _3218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3219 = _3218.z;
        uint _3221 = (_3219 >> 8u) & 15u;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        if (((4294967295u << _3221) & _3124) == 0u)
        {
            _3325 = _3204;
            _3327 = _3206;
            _3329 = _3208;
            _3331 = _3210;
            _3333 = _3212;
            _3335 = _3214;
        }
        else
        {
            float _3350 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
            float _3351 = _3350 * _2183;
            float _3352 = _3350 * _2184;
            float _3353 = _3350 * _2185;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3221 < ((_3219 >> 12u) & 15u))
            {
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3485 = _3204;
                float _3486 = _3206;
                float _3487 = _3208;
                float _3488 = _3210;
                float _3489 = _3212;
                float _3490 = _3214;
                uint _3491 = _3221;
                uint _3500;
                bool _3501;
                for (;;)
                {
                    _3500 = texelFetch(g_lightClassification, int((((_3118 << 5u) + (_3104 << 9u)) + (_3491 << 2u)) >> 2u)).x;
                    _3501 = _3500 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3501)
                    {
                        frontier_phi_82_pred = _3490;
                        frontier_phi_82_pred_1 = _3489;
                        frontier_phi_82_pred_2 = _3488;
                        frontier_phi_82_pred_3 = _3487;
                        frontier_phi_82_pred_4 = _3486;
                        frontier_phi_82_pred_5 = _3485;
                    }
                    else
                    {
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3989;
                        float _3990;
                        float _3991;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        float _3709 = _3488;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        uint _3712 = _3500;
                        uint _3713;
                        vec4 _3738;
                        float _3739;
                        vec4 _3754;
                        vec3 _3766;
                        vec4 _3781;
                        vec4 _3796;
                        float _3842;
                        bool _3843;
                        for (;;)
                        {
                            uint _3723 = ((_3491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3712));
                            _3713 = (_3712 + 4294967295u) & _3712;
                            uint _3725 = _3723 * 40u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            _3739 = _3738.w;
                            uint _3741 = (_3723 * 40u) + 4u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3756 = (_3723 * 40u) + 8u;
                            _3766 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x));
                            uint _3768 = (_3723 * 40u) + 16u;
                            _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            uint _3783 = (_3723 * 40u) + 20u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3723 * 40u) + 24u;
                            vec4 _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3817 = (_3723 * 40u) + 28u;
                            vec4 _3830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 3u)).x));
                            _3842 = fma(_2185, _3830.z, fma(_2184, _3830.y, _3830.x * _2183)) + _3830.w;
                            _3843 = !((fma(_2185, _3811.z, fma(_2184, _3811.y, _3811.x * _2183)) + _3811.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3843)
                            {
                                float _3870 = _3738.x - _2183;
                                float _3871 = _3738.y - _2184;
                                float _3872 = _3738.z - _2185;
                                float _3873 = dot(vec3(_3870, _3871, _3872), vec3(_3870, _3871, _3872));
                                float _3876 = inversesqrt(_3873);
                                float _3877 = _3876 * _3870;
                                float _3878 = _3876 * _3871;
                                float _3879 = _3876 * _3872;
                                float _3883 = 1.0 - (_3873 / (_3739 * _3739));
                                float _5083 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3884 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                                float _3888 = sqrt(_3873) * _3754.w;
                                float _3890 = 1.39999997615814208984375 / (_3888 + 1.39999997615814208984375);
                                float _3891 = _3890 * _3890;
                                float _3894 = ((1.0 - _3891) * dot(vec3(_3877, _3878, _3879), vec3(_1020, _1023, _1026))) + _3891;
                                float _3897 = _3888 * _3888;
                                float _3901 = (fma(_2185, _3781.z, fma(_2184, _3781.y, _3781.x * _2183)) + _3781.w) / _3842;
                                float _3902 = (fma(_2185, _3796.z, fma(_2184, _3796.y, _3796.x * _2183)) + _3796.w) / _3842;
                                float _3906 = 1.0 - dot(vec2(_3901, _3902), vec2(_3901, _3902));
                                float _5099 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3907 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3908 = _3907 * (((isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0))) * _3884) / ((_3897 * 0.699999988079071044921875) + 1.0));
                                float _3920 = exp2(log2(1.0 / ((_3897 * 3.5) + 5.0)) * 0.25);
                                float _3921 = 1.0 - _1095;
                                float _3928 = sqrt(1.0 - ((1.0 - (_3921 * _3921)) * (1.0 - (_3920 * _3920))));
                                float _3929 = _3928 * _3928;
                                float _3930 = _3929 * _3929;
                                float _3931 = _3877 - _3351;
                                float _3932 = _3878 - _3352;
                                float _3933 = _3879 - _3353;
                                float _3937 = inversesqrt(dot(vec3(_3931, _3932, _3933), vec3(_3931, _3932, _3933)));
                                float _3941 = dot(vec3(_1020, _1023, _1026), vec3((-0.0) - _3351, (-0.0) - _3352, (-0.0) - _3353));
                                float _5110 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3944 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3945 = dot(vec3(_1020, _1023, _1026), vec3(_3937 * _3931, _3937 * _3932, _3937 * _3933));
                                float _5121 = isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0));
                                float _3948 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                                float _3952 = ((_3948 * _3948) * (_3930 + (-1.0))) + 1.0;
                                float _3953 = _3890 * _3929;
                                float _3954 = _3953 * _3953;
                                float _3960 = ((1.0 - _3954) * dot(vec3(_1020, _1023, _1026), vec3(_3877, _3878, _3879))) + _3954;
                                float _5132 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3961 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3962 = 1.0 - _3929;
                                float _3972 = (0.5 / (((_3961 * ((_3944 * _3962) + _3929)) + 9.9999999392252902907785028219223e-09) + (((_3961 * _3962) + _3929) * _3944))) * _3961;
                                float _5143 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3982 = (_3907 * _3884) * (((_3930 * 3.1415927410125732421875) * (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) / ((_3952 * _3952) * ((_3897 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3908 * _3754.z;
                                frontier_phi_88_pred_1 = _3908 * _3754.y;
                                frontier_phi_88_pred_2 = _3908 * _3754.x;
                                frontier_phi_88_pred_3 = _3982 * _3766.z;
                                frontier_phi_88_pred_4 = _3982 * _3766.y;
                                frontier_phi_88_pred_5 = _3982 * _3766.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3991 = frontier_phi_88_pred;
                            _3990 = frontier_phi_88_pred_1;
                            _3989 = frontier_phi_88_pred_2;
                            _3988 = frontier_phi_88_pred_3;
                            _3987 = frontier_phi_88_pred_4;
                            _3986 = frontier_phi_88_pred_5;
                            _3696 = _3989 + _3709;
                            _3697 = _3990 + _3710;
                            _3698 = _3991 + _3711;
                            _3693 = _3986 + _3706;
                            _3694 = _3987 + _3707;
                            _3695 = _3988 + _3708;
                            if (_3713 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3696;
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3713;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3698;
                        frontier_phi_82_pred_1 = _3697;
                        frontier_phi_82_pred_2 = _3696;
                        frontier_phi_82_pred_3 = _3695;
                        frontier_phi_82_pred_4 = _3694;
                        frontier_phi_82_pred_5 = _3693;
                    }
                    _3336 = frontier_phi_82_pred;
                    _3334 = frontier_phi_82_pred_1;
                    _3332 = frontier_phi_82_pred_2;
                    _3330 = frontier_phi_82_pred_3;
                    _3328 = frontier_phi_82_pred_4;
                    _3326 = frontier_phi_82_pred_5;
                    uint _3492 = _3491 + 1u;
                    if (_3492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3485 = _3326;
                        _3486 = _3328;
                        _3487 = _3330;
                        _3488 = _3332;
                        _3489 = _3334;
                        _3490 = _3336;
                        _3491 = _3492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3332;
                frontier_phi_63_64_ladder_1 = _3336;
                frontier_phi_63_64_ladder_2 = _3334;
                frontier_phi_63_64_ladder_3 = _3330;
                frontier_phi_63_64_ladder_4 = _3328;
                frontier_phi_63_64_ladder_5 = _3326;
            }
            else
            {
                frontier_phi_63_64_ladder = _3210;
                frontier_phi_63_64_ladder_1 = _3214;
                frontier_phi_63_64_ladder_2 = _3212;
                frontier_phi_63_64_ladder_3 = _3208;
                frontier_phi_63_64_ladder_4 = _3206;
                frontier_phi_63_64_ladder_5 = _3204;
            }
            _3325 = frontier_phi_63_64_ladder_5;
            _3327 = frontier_phi_63_64_ladder_4;
            _3329 = frontier_phi_63_64_ladder_3;
            _3331 = frontier_phi_63_64_ladder;
            _3333 = frontier_phi_63_64_ladder_2;
            _3335 = frontier_phi_63_64_ladder_1;
        }
        float _3340 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _3137 = (_3340 * _3331) + _2649;
        _3139 = (_3340 * _3333) + _2651;
        _3141 = (_3340 * _3335) + _2653;
        _3143 = ((_3325 * _1063) * _3340) + _2987;
        _3145 = ((_3327 * _1065) * _3340) + _2989;
        _3147 = ((_3329 * _1066) * _3340) + _2991;
    }
    else
    {
        _3137 = _2649;
        _3139 = _2651;
        _3141 = _2653;
        _3143 = _2987;
        _3145 = _2989;
        _3147 = _2991;
    }
    float _5159 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _5170 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _5181 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _3164 = ((isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3137 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1079))) + ((_3143 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    float _3165 = ((isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0))) * (_3139 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1079))) + ((_3145 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    float _3166 = ((isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0))) * (_3141 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1079))) + ((_3147 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    uint _3167 = _260 + 6u;
    float _3175 = _1001 / cbSceneParam._m0[86u].x;
    float _3176 = _1002 / cbSceneParam._m0[86u].y;
    vec4 _3190 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3175, _3176, (log2((isnan(cbSceneParam._m0[77u].w) ? _924 : (isnan(_924) ? cbSceneParam._m0[77u].w : min(_924, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3192 = _3190.x;
    float _3193 = _3190.y;
    float _3194 = _3190.z;
    float _3195 = _3190.w;
    float _3267;
    float _3269;
    float _3271;
    float _3273;
    if (_924 > cbSceneParam._m0[78u].w)
    {
        float _3229 = isnan(_924) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _924 : min(cbSceneParam._m0[80u].w, _924));
        float _3230 = _3229 / _924;
        float _3241 = _3230 * _974;
        float _3242 = _975 * _3230;
        float _3243 = (-0.0) - _3242;
        float _3245 = _3230 * _976;
        float _3247 = (cbSceneParam._m0[77u].w * _3243) / _3229;
        float _3248 = _3247 + cbSceneParam._m0[79u].w;
        float _3249 = cbSceneParam._m0[79u].w - _3242;
        float _3255 = sqrt(((_3241 * _3241) + (_3242 * _3242)) + (_3245 * _3245));
        float _3258 = (1.0 - (cbSceneParam._m0[77u].w / _3229)) * _3255;
        float _3263 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3265 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3442;
        if (abs((_3243 - _3247) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3442 = ((((_3248 > 0.0) ? exp2(_3263 * _3248) : (2.0 - exp2(_3265 * _3248))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3258;
        }
        else
        {
            float _3386 = 1.0 / cbSceneParam._m0[80u].x;
            float _3387 = isnan(_3249) ? _3248 : (isnan(_3248) ? _3249 : max(_3248, _3249));
            float _3388 = isnan(_3249) ? _3248 : (isnan(_3248) ? _3249 : min(_3248, _3249));
            float _3397 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : min(_3387, 0.0));
            float _3398 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : min(_3388, 0.0));
            _3442 = ((abs(_3255 / _3243) * cbSceneParam._m0[80u].y) * ((((_3397 - _3398) * 2.0) - ((exp2(_3263 * (isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0)))) - exp2(_3263 * (isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))))) * _3386)) - ((exp2(_3265 * _3397) - exp2(_3265 * _3398)) * _3386))) + (_3258 * cbSceneParam._m0[80u].z);
        }
        vec4 _3444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3175, _3176, 1.0), 0.0);
        float _3453 = exp2((_3442 * (-1.44269502162933349609375)) * (1.0 - _3444.w));
        float _3454 = log2(_3453);
        float _3470 = log2(_3195);
        _3267 = (exp2(_3470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].x)) * _3444.x) / cbSceneParam._m0[78u].x)) + _3192;
        _3269 = (exp2(_3470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].y)) * _3444.y) / cbSceneParam._m0[78u].y)) + _3193;
        _3271 = (exp2(_3470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].z)) * _3444.z) / cbSceneParam._m0[78u].z)) + _3194;
        _3273 = _3453 * _3195;
    }
    else
    {
        _3267 = _3192;
        _3269 = _3193;
        _3271 = _3194;
        _3273 = _3195;
    }
    bool _3480;
    vec4 _3283;
    vec4 _3305;
    float _3307;
    float _3311;
    float _3312;
    float _3313;
    float _3314;
    bool _3324;
    for (;;)
    {
        _3283 = cbMatDynParam._m0[0u];
        float _3285 = roundEven(_3283.y);
        bool _3286 = _3285 == 3.0;
        float _3287 = log2(_3273);
        float _3294 = exp2(_3287 * cbSceneParam._m0[78u].x) * _3164;
        float _3295 = exp2(_3287 * cbSceneParam._m0[78u].y) * _3165;
        float _3296 = exp2(_3287 * cbSceneParam._m0[78u].z) * _3166;
        float _3303 = _990 + (-0.5);
        _3305 = cbMtdParam._m0[1u];
        _3307 = _3305.y * _3303;
        float _3310 = (_3285 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3311 = _3310 * (_3286 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3267)));
        _3312 = _3310 * (_3286 ? _3295 : (_3295 + (cbSceneParam._m0[72u].w * _3269)));
        _3313 = _3310 * (_3286 ? _3296 : (_3296 + (cbSceneParam._m0[72u].w * _3271)));
        _3314 = _3303 * 0.999000012874603271484375;
        _3324 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3324)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3314) < 0.5)
            {
                _3480 = true;
                break;
            }
        }
        uint _3421 = _1039 + uint(_3283.w);
        if ((cbInstanceData._m0[_3421].w < 1.0) && ((cbInstanceData._m0[_3421].w + _3314) < 0.5))
        {
            _3480 = true;
            break;
        }
        if ((_3307 + 1.0) < _3305.x)
        {
            _3480 = true;
            break;
        }
        _3480 = false;
        break;
    }
    float _3684;
    if (_3480)
    {
        discard_state = true;
        _3684 = 0.0;
    }
    else
    {
        _3684 = cbInstanceData._m0[_3167].w;
    }
    SV_Target.x = _3311;
    SV_Target.y = _3312;
    SV_Target.z = _3313;
    SV_Target.w = _3684;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3167].w;
    discard_exit();
}


