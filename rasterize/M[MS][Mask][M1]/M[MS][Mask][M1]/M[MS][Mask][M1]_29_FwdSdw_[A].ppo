#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _4172;
float _4173;
float _4174;
float _4175;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4184 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4195 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4206 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[23u].w) + _459) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4217 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _487 = (_345.x * cbMtdParam._m0[9u].x) * ((_477 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376);
    float _488 = (_345.y * cbMtdParam._m0[9u].y) * ((_477 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377);
    float _489 = (_345.z * cbMtdParam._m0[9u].z) * ((_477 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378);
    float _493 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _487;
    float _496 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _488;
    float _499 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _489;
    float _507 = (((_487 - _493) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) + _493) * 4.55000019073486328125;
    float _509 = (((_488 - _496) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) + _496) * 4.55000019073486328125;
    float _511 = (((_489 - _499) * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) + _499) * 4.55000019073486328125;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    float _586 = ((_556.z - _577) * _477) + _577;
    float _589 = ((((_556.x - _575) * _477) + _575) * 2.0) + (-1.0);
    float _590 = ((((_556.y - _576) * _477) + _576) * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _4228 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = sqrt(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _628 = (_589 + ((((_529.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_616.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _629 = (_590 + ((((_529.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_616.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _632 = fma(_596, _258, fma(_629, _265, _628 * _251));
    float _635 = fma(_596, _259, fma(_629, _266, _628 * _252));
    float _638 = fma(_596, _260, fma(_629, _267, _628 * _253));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _681 = (cbMtdParam._m0[19u].x + dot(vec4(_642 * _632, _642 * _635, _642 * _638, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_671 - _672) * cbMtdParam._m0[24u].z) + _672) * cbMtdParam._m0[21u].z);
    float _4239 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _684 = (-0.0) - cbMtdParam._m0[24u].x;
    float _686 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
    float _694 = _682 - ((_682 * TEXCOORD_8.x) * _687);
    float _695 = _682 - ((_682 * TEXCOORD_8.y) * _687);
    float _696 = _682 - ((_682 * TEXCOORD_8.z) * _687);
    float _703 = (_694 * (cbMtdParam._m0[17u].x - _507)) + _507;
    float _704 = (_695 * (cbMtdParam._m0[17u].y - _509)) + _509;
    float _705 = (_696 * (cbMtdParam._m0[17u].z - _511)) + _511;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _719 = _717.x;
    float _720 = 1.0 - _719;
    float _746 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_719 - _720) * cbMtdParam._m0[24u].w) + _720) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4260 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _747 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _755 = ((((cbMtdParam._m0[10u].x - _703) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _747) + _703;
    float _756 = ((((cbMtdParam._m0[10u].y - _704) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _747) + _704;
    float _757 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _705)) * _747) + _705;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _785 = _783.x;
    float _802 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _785) * _477) + _785;
    float _806 = ((_769.x - _802) * cbMtdParam._m0[19u].z) + _802;
    float _808 = _806 - (_806 * _694);
    float _810 = _808 - (_808 * _747);
    float _815 = (((_529.z - _586) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _586;
    float _819 = ((_616.z - _815) * cbMtdParam._m0[19u].w) + _815;
    vec4 _833 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _840 = (_833.x * 2.0) + (-1.0);
    float _841 = (_833.y * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _4271 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _850 = ((_833.z - _819) * _694) + _819;
    float _853 = ((cbMtdParam._m0[23u].x - _850) * _747) + _850;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _880 = (_874.x * 2.0) + (-1.0);
    float _881 = (_874.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _4282 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _897 = ((sqrt(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) - _596) * _696) + _596;
    float _900 = (((_840 - _628) * _694) + _628) + (cbMtdParam._m0[21u].x * _628);
    float _901 = (((_841 - _629) * _695) + _629) + (cbMtdParam._m0[21u].x * _629);
    float _912 = (((_880 - _900) + (_900 * cbMtdParam._m0[22u].z)) * _747) + _900;
    float _913 = (((_881 - _901) + (_901 * cbMtdParam._m0[22u].z)) * _747) + _901;
    float _914 = (_747 * (sqrt(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) - _897)) + _897;
    float _916 = cbMtdParam._m0[22u].x + _616.w;
    float _919 = fma(_914, _258, fma(_913, _265, _912 * _251));
    float _922 = fma(_914, _259, fma(_913, _266, _912 * _252));
    float _925 = fma(_914, _260, fma(_913, _267, _912 * _253));
    float _929 = inversesqrt(dot(vec3(_919, _922, _925), vec3(_919, _922, _925)));
    float _930 = _929 * _919;
    float _931 = _929 * _922;
    float _932 = _929 * _925;
    float _4293 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _933 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4315 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4326 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4337 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4348 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _938 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _952 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1002 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _992);
    float _1003 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _992);
    float _1004 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _992);
    float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
    float _1009 = _1002 * _1008;
    float _1010 = _1003 * _1008;
    float _1011 = _1004 * _1008;
    vec4 _1016 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1018 = _1016.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1190 = sqrt(((_1002 * _1002) + (_1003 * _1003)) + (_1004 * _1004));
        float _1196 = (cbMatDynParam._m0[5u].x * _1190) + cbMatDynParam._m0[5u].y;
        float _4359 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1201 = (cbMatDynParam._m0[5u].z * _1190) + cbMatDynParam._m0[5u].w;
        float _4370 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) - _1197)) + _1197) < ((_1018 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1029 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1030 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1048 = fma(_932, cbSceneParam._m0[5u].z, fma(_931, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _930));
    float _1051 = fma(_932, cbSceneParam._m0[6u].z, fma(_931, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _930));
    float _1054 = fma(_932, cbSceneParam._m0[7u].z, fma(_931, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _930));
    uint _1067 = _289 + 9u;
    uint _1068 = _1067 + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _4381 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _1080 = 1.0 - _938;
    float _1081 = _1077 * _1080;
    float _1082 = _1078 * _1080;
    float _1083 = _1079 * _1080;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _938;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _938;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _938;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1029, cbSceneParam._m0[86u].y * _1030));
    float _1107 = ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_930, _931, _932), vec3(_1009, _1010, _1011));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _930) - _1009;
    float _1116 = (_1111 * _931) - _1010;
    float _1117 = (_1111 * _932) - _1011;
    float _1121 = abs(dot(vec3(_1009, _1010, _1011), vec3(_930, _931, _932)));
    float _4414 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_933);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1142 = (1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1143 = _1136 * _1123;
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1237 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1241 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1266 = _1171 + _930;
        float _1267 = _1175 + _931;
        float _1268 = _1179 + _932;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_930, _931, _932), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4462 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_930, _931, _932), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4495 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_930, _931, _932), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4506 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4517 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4528 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1551 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1555 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1559 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1582 = _1171 + _930;
        float _1583 = _1175 + _931;
        float _1584 = _1179 + _932;
        float _1594 = fma(_1584, cbModelParam._m0[30u].z, fma(_1583, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1582)) - _1551;
        float _1595 = fma(_1584, cbModelParam._m0[31u].z, fma(_1583, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1582)) - _1555;
        float _1596 = fma(_1584, cbModelParam._m0[32u].z, fma(_1583, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1582)) - _1559;
        float _1600 = inversesqrt(dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596)));
        float _1613 = ((_1600 * _1594) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1551 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1600 * _1595) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1555 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1600 * _1596) / cbModelParam._m0[35u].z) + ((((((_1559 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        float _1650 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1617.x + (-0.5));
        float _1652 = _1650 * (_1617.y + (-0.5));
        float _1653 = _1650 * (_1617.z + (-0.5));
        float _1660 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1624.x + (-0.5));
        float _1662 = _1660 * (_1624.y + (-0.5));
        float _1663 = _1660 * (_1624.z + (-0.5));
        float _1670 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1631.x + (-0.5));
        float _1672 = _1670 * (_1631.y + (-0.5));
        float _1673 = _1670 * (_1631.z + (-0.5));
        float _1680 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1638.x + (-0.5));
        float _1682 = _1680 * (_1638.y + (-0.5));
        float _1683 = _1680 * (_1638.z + (-0.5));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = _1651 * 0.5;
        float _1688 = _1661 * 0.5;
        float _1689 = _1671 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_930, _931, _932), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4591 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1714 + 1.0))) + _1719) * _1684;
        float _1729 = _1652 * 0.5;
        float _1730 = _1662 * 0.5;
        float _1731 = _1672 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_930, _931, _932), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4624 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1756 + 1.0))) + _1761) * _1685;
        float _1771 = _1653 * 0.5;
        float _1772 = _1663 * 0.5;
        float _1773 = _1673 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_930, _931, _932), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4635 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4646 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4657 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_1798 + 1.0))) + _1803) * _1686;
        _1820 = _1653;
        _1821 = _1652;
        _1822 = _1651;
        _1823 = _1663;
        _1824 = _1662;
        _1825 = _1661;
        _1826 = _1673;
        _1827 = _1672;
        _1828 = _1671;
        _1829 = _1686;
        _1830 = _1685;
        _1831 = _1684;
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
    }
    else
    {
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = _1509;
        _1831 = _1509;
        _1832 = 0.0;
        _1833 = 0.0;
        _1834 = 0.0;
    }
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1521)) + _1521;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1522)) + _1522;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1523)) + _1523;
    float _1867 = fma(_1846, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1846, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1846, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1844));
    float _1888 = _1115 * 0.5;
    float _1889 = _1116 * 0.5;
    float _1890 = _1117 * 0.5;
    float _1891 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1894 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1897 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1931;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1904 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1908 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1912 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1919 = dot(vec4(cbModelParam._m0[39u]), vec4(_1888, _1889, _1890, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1919) ? 0.0 : (isnan(0.0) ? _1919 : max(0.0, _1919))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1942;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1933 = dot(vec4(cbModelParam._m0[40u]), vec4(_1888, _1889, _1890, 1.0));
        _1942 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1942 = 1.0;
    }
    float _1946 = (_1942 * cbModelParam._m0[1u].x) + (_1931 * (1.0 - cbModelParam._m0[1u].x));
    float _1956 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _933);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1956 : min(cbModelParam._m0[25u].z, _1956));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2005 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _2009 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _2013 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _2016 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _2019 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _2022 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2050;
        if (_2016 > 0.0)
        {
            _2050 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2050 = frontier_phi_17_15_ladder;
        }
        float _2222;
        if (_2019 > 0.0)
        {
            _2222 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2222 = frontier_phi_26_22_ladder;
        }
        float _2517;
        if (_2022 > 0.0)
        {
            _2517 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2517 = frontier_phi_38_33_ladder;
        }
        float _2519 = isnan(_2222) ? _2050 : (isnan(_2050) ? _2222 : min(_2050, _2222));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _2016) + _2005;
        float _2525 = (_2520 * _2019) + _2009;
        float _2526 = (_2520 * _2022) + _2013;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2527;
        float _2531 = _2527 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 > _2531) || ((_2525 < _2529) || ((_2524 < _2529) || (_2524 > _2531))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2526, cbModelParam._m0[9u].z, fma(_2525, cbModelParam._m0[9u].y, _2524 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2526, cbModelParam._m0[10u].z, fma(_2525, cbModelParam._m0[10u].y, _2524 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2526, cbModelParam._m0[11u].z, fma(_2525, cbModelParam._m0[11u].y, _2524 * cbModelParam._m0[11u].x))), _1957);
            frontier_phi_16_38_ladder = _2671.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2671.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2671.x * cbModelParam._m0[1u].y;
        }
        _2038 = frontier_phi_16_38_ladder_2;
        _2040 = frontier_phi_16_38_ladder_1;
        _2042 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1957);
        _2038 = _2026.x * cbModelParam._m0[1u].y;
        _2040 = _2026.y * cbModelParam._m0[1u].y;
        _2042 = _2026.z * cbModelParam._m0[1u].y;
    }
    float _2046 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _933);
    float _2047 = isnan(_2046) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2046 : min(cbModelParam._m0[25u].w, _2046));
    float _2137;
    float _2139;
    float _2141;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2101 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2105 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2109 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2112 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2115 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2118 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2227;
        if (_2112 > 0.0)
        {
            _2227 = abs((1.0 - _2101) / _2112);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2101 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2227 = frontier_phi_28_24_ladder;
        }
        float _2544;
        if (_2115 > 0.0)
        {
            _2544 = abs((1.0 - _2105) / _2115);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2105 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2544 = frontier_phi_40_35_ladder;
        }
        float _2882;
        if (_2118 > 0.0)
        {
            _2882 = abs((1.0 - _2109) / _2118);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2109 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2882 = frontier_phi_50_47_ladder;
        }
        float _2884 = isnan(_2544) ? _2227 : (isnan(_2227) ? _2544 : min(_2227, _2544));
        float _2885 = isnan(_2882) ? _2884 : (isnan(_2884) ? _2882 : min(_2884, _2882));
        float _2889 = (_2885 * _2112) + _2101;
        float _2890 = (_2885 * _2115) + _2105;
        float _2891 = (_2885 * _2118) + _2109;
        float _2892 = _2885 * 9.9999997473787516355514526367188e-05;
        float _2893 = (-1.0) - _2892;
        float _2895 = _2892 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2891 > _2895) || ((_2891 < _2893) || ((_2890 > _2895) || ((_2890 < _2893) || ((_2889 < _2893) || (_2889 > _2895))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2891, cbModelParam._m0[17u].z, fma(_2890, cbModelParam._m0[17u].y, _2889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2891, cbModelParam._m0[18u].z, fma(_2890, cbModelParam._m0[18u].y, _2889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2891, cbModelParam._m0[19u].z, fma(_2890, cbModelParam._m0[19u].y, _2889 * cbModelParam._m0[19u].x))), _2047);
            frontier_phi_25_50_ladder = _3013.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3013.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3013.x * cbModelParam._m0[1u].z;
        }
        _2137 = frontier_phi_25_50_ladder_2;
        _2139 = frontier_phi_25_50_ladder_1;
        _2141 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2047);
        _2137 = _2121.x * cbModelParam._m0[1u].z;
        _2139 = _2121.y * cbModelParam._m0[1u].z;
        _2141 = _2121.z * cbModelParam._m0[1u].z;
    }
    float _2154 = (((_1142 * _1091) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2156 = (((_1142 * _1093) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2139 - _2040)) + _2040);
    float _2158 = (((_1142 * _1094) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2141 - _2042)) + _2042);
    float _2161 = fma(_2158, cbSceneParam._m0[89u].z, fma(_2156, cbSceneParam._m0[89u].y, _2154 * cbSceneParam._m0[89u].x));
    float _2164 = fma(_2158, cbSceneParam._m0[90u].z, fma(_2156, cbSceneParam._m0[90u].y, _2154 * cbSceneParam._m0[90u].x));
    float _2167 = fma(_2158, cbSceneParam._m0[91u].z, fma(_2156, cbSceneParam._m0[91u].y, _2154 * cbSceneParam._m0[91u].x));
    float _2201 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2209 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2213 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2214 = _2201 / _2213;
    float _2215 = _2205 / _2213;
    float _2216 = _2209 / _2213;
    float _2363;
    float _2364;
    float _2365;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2243 = ((uint(_2216 > cbSceneParam._m0[59u].y) + uint(_2216 > cbSceneParam._m0[59u].x)) + uint(_2216 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2244 = _2243 + 43u;
        uint _2252 = _2243 + 44u;
        uint _2260 = _2243 + 45u;
        uint _2268 = _2243 + 46u;
        float _2279 = fma(_2213, cbSceneParam._m0[_2244].w, fma(_2209, cbSceneParam._m0[_2244].z, fma(_2205, cbSceneParam._m0[_2244].y, _2201 * cbSceneParam._m0[_2244].x)));
        float _2283 = fma(_2213, cbSceneParam._m0[_2252].w, fma(_2209, cbSceneParam._m0[_2252].z, fma(_2205, cbSceneParam._m0[_2252].y, _2201 * cbSceneParam._m0[_2252].x)));
        float _2291 = fma(_2213, cbSceneParam._m0[_2268].w, fma(_2209, cbSceneParam._m0[_2268].z, fma(_2205, cbSceneParam._m0[_2268].y, _2201 * cbSceneParam._m0[_2268].x)));
        float _2296 = cbSceneParam._m0[33u].z * _2291;
        float _2298 = cbSceneParam._m0[33u].w * _2291;
        float _2301 = fma(_2213, cbSceneParam._m0[_2260].w, fma(_2209, cbSceneParam._m0[_2260].z, fma(_2205, cbSceneParam._m0[_2260].y, _2201 * cbSceneParam._m0[_2260].x))) / _2291;
        float _2349 = (cbSceneParam._m0[33u].x - sqrt(((_2215 * _2215) + (_2214 * _2214)) + (_2216 * _2216))) * cbSceneParam._m0[33u].y;
        float _4783 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2356 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 + _2279) / _2291, (_2298 + _2283) / _2291), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 + _2279) / _2291, (_2283 - _2296) / _2291), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2279 - _2296) / _2291, (_2283 - _2298) / _2291), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2279 - _2298) / _2291, (_2296 + _2283) / _2291), _2301), 0.0)).x), vec4(0.25)));
        _2363 = 1.0 - (_2356 * cbSceneParam._m0[34u].x);
        _2364 = 1.0 - (_2356 * cbSceneParam._m0[34u].y);
        _2365 = 1.0 - (_2356 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2363 = 1.0;
        _2364 = 1.0;
        _2365 = 1.0;
    }
    float _2429;
    float _2431;
    float _2433;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2417 = fma(_2213, cbSceneParam._m0[63u].w, fma(_2209, cbSceneParam._m0[63u].z, fma(_2205, cbSceneParam._m0[63u].y, _2201 * cbSceneParam._m0[63u].x)));
        float _2418 = fma(_2213, cbSceneParam._m0[60u].w, fma(_2209, cbSceneParam._m0[60u].z, fma(_2205, cbSceneParam._m0[60u].y, _2201 * cbSceneParam._m0[60u].x))) / _2417;
        float _2419 = fma(_2213, cbSceneParam._m0[61u].w, fma(_2209, cbSceneParam._m0[61u].z, fma(_2205, cbSceneParam._m0[61u].y, _2201 * cbSceneParam._m0[61u].x))) / _2417;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2418 >= cbSceneParam._m0[64u].x) && (_2419 >= cbSceneParam._m0[64u].y)) && (_2418 <= cbSceneParam._m0[64u].z)) && (_2419 <= cbSceneParam._m0[64u].w))
        {
            float _2557 = fma(_2213, cbSceneParam._m0[62u].w, fma(_2209, cbSceneParam._m0[62u].z, fma(_2205, cbSceneParam._m0[62u].y, _2201 * cbSceneParam._m0[62u].x))) / _2417;
            float _2561 = isnan(cbSceneParam._m0[41u].w) ? _2557 : (isnan(_2557) ? cbSceneParam._m0[41u].w : max(_2557, cbSceneParam._m0[41u].w));
            float _2604 = (cbSceneParam._m0[33u].x - sqrt(((_2215 * _2215) + (_2214 * _2214)) + (_2216 * _2216))) * cbSceneParam._m0[33u].y;
            float _4799 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
            float _2611 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2418, cbSceneParam._m0[33u].w + _2419), _2561), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2418, _2419 - cbSceneParam._m0[33u].z), _2561), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2418 - cbSceneParam._m0[33u].z, _2419 - cbSceneParam._m0[33u].w), _2561), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2418 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2419), _2561), 0.0)).x), vec4(0.25)));
            float _2615 = 1.0 - (_2611 * cbSceneParam._m0[34u].x);
            float _2616 = 1.0 - (_2611 * cbSceneParam._m0[34u].y);
            float _2617 = 1.0 - (_2611 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2617) ? _2365 : (isnan(_2365) ? _2617 : min(_2365, _2617));
            frontier_phi_37_36_ladder_1 = isnan(_2616) ? _2364 : (isnan(_2364) ? _2616 : min(_2364, _2616));
            frontier_phi_37_36_ladder_2 = isnan(_2615) ? _2363 : (isnan(_2363) ? _2615 : min(_2363, _2615));
        }
        else
        {
            frontier_phi_37_36_ladder = _2365;
            frontier_phi_37_36_ladder_1 = _2364;
            frontier_phi_37_36_ladder_2 = _2363;
        }
        _2429 = frontier_phi_37_36_ladder_2;
        _2431 = frontier_phi_37_36_ladder_1;
        _2433 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2429 = _2363;
        _2431 = _2364;
        _2433 = _2365;
    }
    uvec4 _2438 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2440 = _2438.x * 14u;
    uint _2441 = _2440 + 13u;
    float _2448 = _1107 + (-1.0);
    float _2453 = (cbLight._m0[_2441].x * _2448) + 1.0;
    float _2454 = (cbLight._m0[_2441].y * _2448) + 1.0;
    float _2455 = (cbLight._m0[_2441].z * _2448) + 1.0;
    float _2456 = (cbLight._m0[_2441].w * _2448) + 1.0;
    uint _2457 = _2440 + 5u;
    float _2463 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
    uint _2467 = _2440 + 4u;
    float _2476 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
    uint _2480 = _2440 | 1u;
    float _2491 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_930, _931, _932));
    float _2494 = dot(vec3(cbLight._m0[_2480].xyz), vec3(_930, _931, _932));
    float _4835 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _4846 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2499 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * 0.3183098733425140380859375;
    float _2501 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * 0.3183098733425140380859375;
    float _2508 = ((cbLight._m0[_2457].x * _2463) * _2501) + (((cbLight._m0[_2467].x * _2429) * _2476) * _2499);
    float _2509 = ((_2463 * cbLight._m0[_2457].y) * _2501) + (((cbLight._m0[_2467].y * _2431) * _2476) * _2499);
    float _2510 = ((_2463 * cbLight._m0[_2457].z) * _2501) + (((cbLight._m0[_2467].z * _2433) * _2476) * _2499);
    uvec4 _2514 = floatBitsToUint(cbLight._m0[_2440 + 12u]);
    bool _2516 = _2514.x == 0u;
    float _2618;
    float _2620;
    float _2622;
    if (_2516)
    {
        _2618 = _2508;
        _2620 = _2509;
        _2622 = _2510;
    }
    else
    {
        uint _2626 = _2440 + 6u;
        float _2642 = (dot(vec3(cbLight._m0[_2440 + 2u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2643 = _2642 * _2642;
        float _4857 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2644 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2645 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
        _2618 = (((cbLight._m0[_2626].x * 0.3183098733425140380859375) * _2644) * _2645) + _2508;
        _2620 = (((cbLight._m0[_2626].y * 0.3183098733425140380859375) * _2644) * _2645) + _2509;
        _2622 = (((cbLight._m0[_2626].z * 0.3183098733425140380859375) * _2644) * _2645) + _2510;
    }
    bool _2625 = _2514.y == 0u;
    float _2680;
    float _2682;
    float _2684;
    if (_2625)
    {
        _2680 = _2618;
        _2682 = _2620;
        _2684 = _2622;
    }
    else
    {
        uint _2853 = _2440 + 7u;
        float _2869 = (dot(vec3(cbLight._m0[_2440 + 3u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2870 = _2869 * _2869;
        float _4873 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2871 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2872 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
        _2680 = (((cbLight._m0[_2853].x * 0.3183098733425140380859375) * _2871) * _2872) + _2618;
        _2682 = (((cbLight._m0[_2853].y * 0.3183098733425140380859375) * _2871) * _2872) + _2620;
        _2684 = (((cbLight._m0[_2853].z * 0.3183098733425140380859375) * _2871) * _2872) + _2622;
    }
    uint _2687 = _2440 + 8u;
    float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _933) * 0.949999988079071044921875);
    float _2701 = _2700 * _2700;
    float _2702 = cbLight._m0[_2440].x + _1009;
    float _2703 = cbLight._m0[_2440].y + _1010;
    float _2704 = cbLight._m0[_2440].z + _1011;
    float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
    float _2709 = _2708 * _2702;
    float _2710 = _2708 * _2703;
    float _2711 = _2708 * _2704;
    float _2712 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2440].xyz));
    float _4889 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _4900 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2716 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
    float _2717 = dot(vec3(_930, _931, _932), vec3(_2709, _2710, _2711));
    float _4911 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2721 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2709, _2710, _2711));
    float _4922 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2725 = _2701 * _2701;
    float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
    float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0);
    float _2738 = 0.959999978542327880859375 - _1088;
    float _2740 = 0.959999978542327880859375 - _1089;
    float _2741 = 0.959999978542327880859375 - _1090;
    float _2748 = 1.0 - _2701;
    float _2759 = (0.5 / (((_2716 * ((_2715 * _2748) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _2748) + _2701) * _2715))) * _2715;
    float _4933 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2761 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
    uint _2775 = _2440 + 9u;
    float _2786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2480].w)) * _933) * 0.949999988079071044921875);
    float _2787 = _2786 * _2786;
    float _2788 = cbLight._m0[_2480].x + _1009;
    float _2789 = cbLight._m0[_2480].y + _1010;
    float _2790 = cbLight._m0[_2480].z + _1011;
    float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
    float _2795 = _2794 * _2788;
    float _2796 = _2794 * _2789;
    float _2797 = _2794 * _2790;
    float _2798 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2480].xyz));
    float _4944 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2801 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
    float _2802 = dot(vec3(_930, _931, _932), vec3(_2795, _2796, _2797));
    float _4955 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2805 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
    float _2806 = dot(vec3(cbLight._m0[_2480].xyz), vec3(_2795, _2796, _2797));
    float _4966 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2810 = _2787 * _2787;
    float _2814 = ((_2805 * _2805) * (_2810 + (-1.0))) + 1.0;
    float _2821 = exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0);
    float _2828 = 1.0 - _2787;
    float _2838 = (0.5 / (((_2716 * ((_2801 * _2828) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _2828) + _2787) * _2801))) * _2801;
    float _4977 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2840 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2810 / ((_2814 * _2814) * 3.141590118408203125));
    float _2850 = (((((_2821 * _2738) + _1091) * cbLight._m0[_2775].x) * _2840) * _2463) + ((((cbLight._m0[_2687].x * _2429) * ((_2737 * _2738) + _1091)) * _2761) * _2476);
    float _2851 = (((((_2821 * _2740) + _1093) * cbLight._m0[_2775].y) * _2840) * _2463) + ((((cbLight._m0[_2687].y * _2431) * ((_2737 * _2740) + _1093)) * _2761) * _2476);
    float _2852 = (((((_2821 * _2741) + _1094) * cbLight._m0[_2775].z) * _2840) * _2463) + ((((cbLight._m0[_2687].z * _2433) * ((_2737 * _2741) + _1094)) * _2761) * _2476);
    float _2908;
    float _2910;
    float _2912;
    if (_2516)
    {
        _2908 = _2850;
        _2910 = _2851;
        _2912 = _2852;
    }
    else
    {
        uint _2914 = _2440 + 2u;
        uint _2918 = _2440 + 10u;
        float _2932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2914].w)) * _933) * 0.949999988079071044921875);
        float _2933 = _2932 * _2932;
        float _2934 = cbLight._m0[_2914].x + _1009;
        float _2935 = cbLight._m0[_2914].y + _1010;
        float _2936 = cbLight._m0[_2914].z + _1011;
        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
        float _2941 = _2940 * _2934;
        float _2942 = _2940 * _2935;
        float _2943 = _2940 * _2936;
        float _2944 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2914].xyz));
        float _4988 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _2948 = dot(vec3(_930, _931, _932), vec3(_2941, _2942, _2943));
        float _4999 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
        float _2952 = dot(vec3(cbLight._m0[_2914].xyz), vec3(_2941, _2942, _2943));
        float _5010 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2956 = _2933 * _2933;
        float _2960 = ((_2951 * _2951) * (_2956 + (-1.0))) + 1.0;
        float _2967 = exp2(log2(1.0 - (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) * 5.0);
        float _2974 = 1.0 - _2933;
        float _2984 = (0.5 / (((_2716 * ((_2947 * _2974) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _2974) + _2933) * _2947))) * _2947;
        float _5021 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2986 = (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2956 / ((_2960 * _2960) * 3.141590118408203125));
        float _2987 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
        _2908 = (((((_2967 * _2738) + _1091) * cbLight._m0[_2918].x) * _2986) * _2987) + _2850;
        _2910 = (((((_2967 * _2740) + _1093) * cbLight._m0[_2918].y) * _2986) * _2987) + _2851;
        _2912 = (((((_2967 * _2741) + _1094) * cbLight._m0[_2918].z) * _2986) * _2987) + _2852;
    }
    float _3018;
    float _3020;
    float _3022;
    if (_2625)
    {
        _3018 = _2908;
        _3020 = _2910;
        _3022 = _2912;
    }
    else
    {
        uint _3029 = _2440 + 3u;
        uint _3033 = _2440 + 11u;
        float _3047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3029].w)) * _933) * 0.949999988079071044921875);
        float _3048 = _3047 * _3047;
        float _3049 = cbLight._m0[_3029].x + _1009;
        float _3050 = cbLight._m0[_3029].y + _1010;
        float _3051 = cbLight._m0[_3029].z + _1011;
        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
        float _3056 = _3055 * _3049;
        float _3057 = _3055 * _3050;
        float _3058 = _3055 * _3051;
        float _3059 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_3029].xyz));
        float _5037 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3062 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
        float _3063 = dot(vec3(_930, _931, _932), vec3(_3056, _3057, _3058));
        float _5048 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        float _3066 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
        float _3067 = dot(vec3(cbLight._m0[_3029].xyz), vec3(_3056, _3057, _3058));
        float _5059 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3071 = _3048 * _3048;
        float _3075 = ((_3066 * _3066) * (_3071 + (-1.0))) + 1.0;
        float _3082 = exp2(log2(1.0 - (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0)))) * 5.0);
        float _3089 = 1.0 - _3048;
        float _3099 = (0.5 / (((_2716 * ((_3062 * _3089) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _3089) + _3048) * _3062))) * _3062;
        float _5070 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
        float _3101 = (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3071 / ((_3075 * _3075) * 3.141590118408203125));
        float _3102 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
        _3018 = (((((_3082 * _2738) + _1091) * cbLight._m0[_3033].x) * _3101) * _3102) + _2908;
        _3020 = (((((_3082 * _2740) + _1093) * cbLight._m0[_3033].y) * _3101) * _3102) + _2910;
        _3022 = (((((_3082 * _2741) + _1094) * cbLight._m0[_3033].z) * _3101) * _3102) + _2912;
    }
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    if (_2438.y == 0u)
    {
        uvec4 _3123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3124 = _3123.x;
        uint _3135 = uint((float(_3123.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1030) / _3124))) + floor(float(uint(cbSceneParam._m0[85u].x * _1029) / _3124)));
        float _3145 = (log2(_2216 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3146 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
        uint _3149 = uint(isnan(14.0) ? _3146 : (isnan(_3146) ? 14.0 : min(_3146, 14.0)));
        uvec4 _3154 = texelFetch(g_lightClusterGridBuffer, int(((_3149 << 2u) + (_3135 << 6u)) >> 2u));
        uint _3155 = _3154.x;
        uint _3156 = _3123.z;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        if (((((1u << ((_3156 >> 4u) & 15u)) + 4294967295u) & _3155) == 0u) || ((_3156 & 240u) == 0u))
        {
            _3235 = 0.0;
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
            _3245 = 0.0;
        }
        else
        {
            float _3236;
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3246;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            uint _3393 = 0u;
            uint _3402;
            bool _3403;
            for (;;)
            {
                _3402 = texelFetch(g_lightClassification, int((((_3149 << 5u) + (_3135 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                _3403 = _3402 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3403)
                {
                    frontier_phi_71_pred = _3392;
                    frontier_phi_71_pred_1 = _3391;
                    frontier_phi_71_pred_2 = _3390;
                    frontier_phi_71_pred_3 = _3389;
                    frontier_phi_71_pred_4 = _3388;
                    frontier_phi_71_pred_5 = _3387;
                }
                else
                {
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    uint _3538;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3402;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    for (;;)
                    {
                        uint _3542 = uint(findLSB(_3538)) + (_3393 << 5u);
                        uint _3539 = (_3538 + 4294967295u) & _3538;
                        uint _3544 = _3542 * 48u;
                        vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3544)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 3u)).x));
                        uint _3564 = (_3542 * 48u) + 4u;
                        vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3564)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 3u)).x));
                        uint _3583 = (_3542 * 48u) + 8u;
                        vec3 _3594 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3583)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 2u)).x));
                        float _3598 = _3558.x - _2214;
                        float _3599 = _3558.y - _2215;
                        float _3600 = _3558.z - _2216;
                        float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                        float _3604 = inversesqrt(_3601);
                        float _3605 = _3604 * _3598;
                        float _3606 = _3604 * _3599;
                        float _3607 = _3604 * _3600;
                        float _3608 = dot(vec3(_1048, _1051, _1054), vec3(_3605, _3606, _3607));
                        float _3613 = 1.0 - (_3601 * _3558.w);
                        float _5096 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3614 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                        float _3615 = sqrt(_3601) * _3577.w;
                        float _3618 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                        float _3619 = _3618 * _3618;
                        float _3622 = ((1.0 - _3619) * _3608) + _3619;
                        float _3625 = _3615 * _3615;
                        float _3629 = ((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3614) / ((_3625 * 0.699999988079071044921875) + 1.0);
                        float _3633 = (-0.0) - _2214;
                        float _3634 = (-0.0) - _2215;
                        float _3635 = (-0.0) - _2216;
                        float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                        float _3640 = _3639 * _3633;
                        float _3641 = _3639 * _3634;
                        float _3642 = _3639 * _3635;
                        float _3649 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                        float _3650 = 1.0 - _1123;
                        float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                        float _3658 = _3657 * _3657;
                        float _3659 = _3658 * _3658;
                        float _3660 = _3640 + _3605;
                        float _3661 = _3641 + _3606;
                        float _3662 = _3642 + _3607;
                        float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                        float _3670 = dot(vec3(_1048, _1051, _1054), vec3(_3640, _3641, _3642));
                        float _5112 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3673 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                        float _3674 = dot(vec3(_1048, _1051, _1054), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                        float _5123 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3677 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                        float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                        float _3682 = _3618 * _3658;
                        float _3683 = _3682 * _3682;
                        float _3686 = ((1.0 - _3683) * _3608) + _3683;
                        float _5134 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3687 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                        float _3688 = 1.0 - _3658;
                        float _3698 = (0.5 / (((_3687 * ((_3673 * _3688) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3658) * _3673))) * _3687;
                        float _5145 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3709 = (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0)))) / ((_3681 * _3681) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125))) * _3614;
                        _3462 = (_3629 * _3577.x) + _3535;
                        _3463 = (_3629 * _3577.y) + _3536;
                        _3464 = (_3629 * _3577.z) + _3537;
                        _3459 = (_3709 * _3594.x) + _3532;
                        _3460 = (_3709 * _3594.y) + _3533;
                        _3461 = (_3709 * _3594.z) + _3534;
                        if (_3539 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3539;
                        }
                    }
                    frontier_phi_71_pred = _3464;
                    frontier_phi_71_pred_1 = _3463;
                    frontier_phi_71_pred_2 = _3462;
                    frontier_phi_71_pred_3 = _3461;
                    frontier_phi_71_pred_4 = _3460;
                    frontier_phi_71_pred_5 = _3459;
                }
                _3246 = frontier_phi_71_pred;
                _3244 = frontier_phi_71_pred_1;
                _3242 = frontier_phi_71_pred_2;
                _3240 = frontier_phi_71_pred_3;
                _3238 = frontier_phi_71_pred_4;
                _3236 = frontier_phi_71_pred_5;
                uint _3394 = _3393 + 1u;
                if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3387 = _3236;
                    _3388 = _3238;
                    _3389 = _3240;
                    _3390 = _3242;
                    _3391 = _3244;
                    _3392 = _3246;
                    _3393 = _3394;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3235 = _3236;
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
            _3245 = _3246;
        }
        uvec4 _3249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3250 = _3249.z;
        uint _3252 = (_3250 >> 8u) & 15u;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        if (((4294967295u << _3252) & _3155) == 0u)
        {
            _3355 = _3235;
            _3357 = _3237;
            _3359 = _3239;
            _3361 = _3241;
            _3363 = _3243;
            _3365 = _3245;
        }
        else
        {
            float _3380 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
            float _3381 = _3380 * _2214;
            float _3382 = _3380 * _2215;
            float _3383 = _3380 * _2216;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3252 < ((_3250 >> 12u) & 15u))
            {
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3366;
                float _3515 = _3235;
                float _3516 = _3237;
                float _3517 = _3239;
                float _3518 = _3241;
                float _3519 = _3243;
                float _3520 = _3245;
                uint _3521 = _3252;
                uint _3530;
                bool _3531;
                for (;;)
                {
                    _3530 = texelFetch(g_lightClassification, int((((_3149 << 5u) + (_3135 << 9u)) + (_3521 << 2u)) >> 2u)).x;
                    _3531 = _3530 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3531)
                    {
                        frontier_phi_82_pred = _3520;
                        frontier_phi_82_pred_1 = _3519;
                        frontier_phi_82_pred_2 = _3518;
                        frontier_phi_82_pred_3 = _3517;
                        frontier_phi_82_pred_4 = _3516;
                        frontier_phi_82_pred_5 = _3515;
                    }
                    else
                    {
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        float _3741 = _3520;
                        uint _3742 = _3530;
                        uint _3743;
                        vec4 _3768;
                        float _3769;
                        vec4 _3784;
                        vec3 _3796;
                        vec4 _3811;
                        vec4 _3826;
                        float _3872;
                        bool _3873;
                        for (;;)
                        {
                            uint _3753 = ((_3521 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3742));
                            _3743 = (_3742 + 4294967295u) & _3742;
                            uint _3755 = _3753 * 40u;
                            _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3769 = _3768.w;
                            uint _3771 = (_3753 * 40u) + 4u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            uint _3786 = (_3753 * 40u) + 8u;
                            _3796 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x));
                            uint _3798 = (_3753 * 40u) + 16u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3753 * 40u) + 20u;
                            _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3828 = (_3753 * 40u) + 24u;
                            vec4 _3841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 3u)).x));
                            uint _3847 = (_3753 * 40u) + 28u;
                            vec4 _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            _3872 = fma(_2216, _3860.z, fma(_2215, _3860.y, _3860.x * _2214)) + _3860.w;
                            _3873 = !((fma(_2216, _3841.z, fma(_2215, _3841.y, _3841.x * _2214)) + _3841.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3873)
                            {
                                float _3900 = _3768.x - _2214;
                                float _3901 = _3768.y - _2215;
                                float _3902 = _3768.z - _2216;
                                float _3903 = dot(vec3(_3900, _3901, _3902), vec3(_3900, _3901, _3902));
                                float _3906 = inversesqrt(_3903);
                                float _3907 = _3906 * _3900;
                                float _3908 = _3906 * _3901;
                                float _3909 = _3906 * _3902;
                                float _3913 = 1.0 - (_3903 / (_3769 * _3769));
                                float _5156 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3918 = sqrt(_3903) * _3784.w;
                                float _3920 = 1.39999997615814208984375 / (_3918 + 1.39999997615814208984375);
                                float _3921 = _3920 * _3920;
                                float _3924 = ((1.0 - _3921) * dot(vec3(_3907, _3908, _3909), vec3(_1048, _1051, _1054))) + _3921;
                                float _3927 = _3918 * _3918;
                                float _3931 = (fma(_2216, _3811.z, fma(_2215, _3811.y, _3811.x * _2214)) + _3811.w) / _3872;
                                float _3932 = (fma(_2216, _3826.z, fma(_2215, _3826.y, _3826.x * _2214)) + _3826.w) / _3872;
                                float _3936 = 1.0 - dot(vec2(_3931, _3932), vec2(_3931, _3932));
                                float _5172 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3937 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3938 = _3937 * (((isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0))) * _3914) / ((_3927 * 0.699999988079071044921875) + 1.0));
                                float _3950 = exp2(log2(1.0 / ((_3927 * 3.5) + 5.0)) * 0.25);
                                float _3951 = 1.0 - _1123;
                                float _3958 = sqrt(1.0 - ((1.0 - (_3951 * _3951)) * (1.0 - (_3950 * _3950))));
                                float _3959 = _3958 * _3958;
                                float _3960 = _3959 * _3959;
                                float _3961 = _3907 - _3381;
                                float _3962 = _3908 - _3382;
                                float _3963 = _3909 - _3383;
                                float _3967 = inversesqrt(dot(vec3(_3961, _3962, _3963), vec3(_3961, _3962, _3963)));
                                float _3971 = dot(vec3(_1048, _1051, _1054), vec3((-0.0) - _3381, (-0.0) - _3382, (-0.0) - _3383));
                                float _5183 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3974 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                                float _3975 = dot(vec3(_1048, _1051, _1054), vec3(_3967 * _3961, _3967 * _3962, _3967 * _3963));
                                float _5194 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3978 = isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0));
                                float _3982 = ((_3978 * _3978) * (_3960 + (-1.0))) + 1.0;
                                float _3983 = _3920 * _3959;
                                float _3984 = _3983 * _3983;
                                float _3990 = ((1.0 - _3984) * dot(vec3(_1048, _1051, _1054), vec3(_3907, _3908, _3909))) + _3984;
                                float _5205 = isnan(0.0) ? _3990 : (isnan(_3990) ? 0.0 : max(_3990, 0.0));
                                float _3991 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
                                float _3992 = 1.0 - _3959;
                                float _4002 = (0.5 / (((_3991 * ((_3974 * _3992) + _3959)) + 9.9999999392252902907785028219223e-09) + (((_3991 * _3992) + _3959) * _3974))) * _3991;
                                float _5216 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4012 = (_3937 * _3914) * (((_3960 * 3.1415927410125732421875) * (isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0)))) / ((_3982 * _3982) * ((_3927 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3938 * _3784.z;
                                frontier_phi_88_pred_1 = _3938 * _3784.y;
                                frontier_phi_88_pred_2 = _3938 * _3784.x;
                                frontier_phi_88_pred_3 = _4012 * _3796.z;
                                frontier_phi_88_pred_4 = _4012 * _3796.y;
                                frontier_phi_88_pred_5 = _4012 * _3796.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4021 = frontier_phi_88_pred;
                            _4020 = frontier_phi_88_pred_1;
                            _4019 = frontier_phi_88_pred_2;
                            _4018 = frontier_phi_88_pred_3;
                            _4017 = frontier_phi_88_pred_4;
                            _4016 = frontier_phi_88_pred_5;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            _3728 = _4021 + _3741;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            if (_3743 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3743;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3728;
                        frontier_phi_82_pred_1 = _3727;
                        frontier_phi_82_pred_2 = _3726;
                        frontier_phi_82_pred_3 = _3725;
                        frontier_phi_82_pred_4 = _3724;
                        frontier_phi_82_pred_5 = _3723;
                    }
                    _3366 = frontier_phi_82_pred;
                    _3364 = frontier_phi_82_pred_1;
                    _3362 = frontier_phi_82_pred_2;
                    _3360 = frontier_phi_82_pred_3;
                    _3358 = frontier_phi_82_pred_4;
                    _3356 = frontier_phi_82_pred_5;
                    uint _3522 = _3521 + 1u;
                    if (_3522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3515 = _3356;
                        _3516 = _3358;
                        _3517 = _3360;
                        _3518 = _3362;
                        _3519 = _3364;
                        _3520 = _3366;
                        _3521 = _3522;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3362;
                frontier_phi_63_64_ladder_1 = _3366;
                frontier_phi_63_64_ladder_2 = _3364;
                frontier_phi_63_64_ladder_3 = _3360;
                frontier_phi_63_64_ladder_4 = _3358;
                frontier_phi_63_64_ladder_5 = _3356;
            }
            else
            {
                frontier_phi_63_64_ladder = _3241;
                frontier_phi_63_64_ladder_1 = _3245;
                frontier_phi_63_64_ladder_2 = _3243;
                frontier_phi_63_64_ladder_3 = _3239;
                frontier_phi_63_64_ladder_4 = _3237;
                frontier_phi_63_64_ladder_5 = _3235;
            }
            _3355 = frontier_phi_63_64_ladder_5;
            _3357 = frontier_phi_63_64_ladder_4;
            _3359 = frontier_phi_63_64_ladder_3;
            _3361 = frontier_phi_63_64_ladder;
            _3363 = frontier_phi_63_64_ladder_2;
            _3365 = frontier_phi_63_64_ladder_1;
        }
        float _3370 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _3168 = (_3370 * _3361) + _2680;
        _3170 = (_3370 * _3363) + _2682;
        _3172 = (_3370 * _3365) + _2684;
        _3174 = ((_3355 * _1091) * _3370) + _3018;
        _3176 = ((_3357 * _1093) * _3370) + _3020;
        _3178 = ((_3359 * _1094) * _3370) + _3022;
    }
    else
    {
        _3168 = _2680;
        _3170 = _2682;
        _3172 = _2684;
        _3174 = _3018;
        _3176 = _3020;
        _3178 = _3022;
    }
    float _5232 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5243 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _5254 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _3195 = ((isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0))) * (_3168 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1107))) + ((_3174 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1946)) * cbPerFrame._m0[3u].x);
    float _3196 = ((isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0))) * (_3170 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1107))) + ((_3176 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1946)) * cbPerFrame._m0[3u].x);
    float _3197 = ((isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0))) * (_3172 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1107))) + ((_3178 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1946)) * cbPerFrame._m0[3u].x);
    uint _3198 = _289 + 6u;
    float _3206 = _1029 / cbSceneParam._m0[86u].x;
    float _3207 = _1030 / cbSceneParam._m0[86u].y;
    vec4 _3221 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3206, _3207, (log2((isnan(cbSceneParam._m0[77u].w) ? _952 : (isnan(_952) ? cbSceneParam._m0[77u].w : min(_952, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3223 = _3221.x;
    float _3224 = _3221.y;
    float _3225 = _3221.z;
    float _3226 = _3221.w;
    float _3297;
    float _3299;
    float _3301;
    float _3303;
    if (_952 > cbSceneParam._m0[78u].w)
    {
        float _3260 = isnan(_952) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _952 : min(cbSceneParam._m0[80u].w, _952));
        float _3261 = _3260 / _952;
        float _3272 = _3261 * _1002;
        float _3273 = _1003 * _3261;
        float _3274 = (-0.0) - _3273;
        float _3275 = _3261 * _1004;
        float _3277 = (cbSceneParam._m0[77u].w * _3274) / _3260;
        float _3278 = _3277 + cbSceneParam._m0[79u].w;
        float _3279 = cbSceneParam._m0[79u].w - _3273;
        float _3285 = sqrt(((_3272 * _3272) + (_3273 * _3273)) + (_3275 * _3275));
        float _3288 = (1.0 - (cbSceneParam._m0[77u].w / _3260)) * _3285;
        float _3293 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3295 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3472;
        if (abs((_3274 - _3277) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3472 = ((((_3278 > 0.0) ? exp2(_3293 * _3278) : (2.0 - exp2(_3295 * _3278))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3288;
        }
        else
        {
            float _3416 = 1.0 / cbSceneParam._m0[80u].x;
            float _3417 = isnan(_3279) ? _3278 : (isnan(_3278) ? _3279 : max(_3278, _3279));
            float _3418 = isnan(_3279) ? _3278 : (isnan(_3278) ? _3279 : min(_3278, _3279));
            float _3427 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : min(_3417, 0.0));
            float _3428 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : min(_3418, 0.0));
            _3472 = ((abs(_3285 / _3274) * cbSceneParam._m0[80u].y) * ((((_3427 - _3428) * 2.0) - ((exp2(_3293 * (isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0)))) - exp2(_3293 * (isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))))) * _3416)) - ((exp2(_3295 * _3427) - exp2(_3295 * _3428)) * _3416))) + (_3288 * cbSceneParam._m0[80u].z);
        }
        vec4 _3474 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3206, _3207, 1.0), 0.0);
        float _3483 = exp2((_3472 * (-1.44269502162933349609375)) * (1.0 - _3474.w));
        float _3484 = log2(_3483);
        float _3500 = log2(_3226);
        _3297 = (exp2(_3500 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].x)) * _3474.x) / cbSceneParam._m0[78u].x)) + _3223;
        _3299 = (exp2(_3500 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].y)) * _3474.y) / cbSceneParam._m0[78u].y)) + _3224;
        _3301 = (exp2(_3500 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].z)) * _3474.z) / cbSceneParam._m0[78u].z)) + _3225;
        _3303 = _3483 * _3226;
    }
    else
    {
        _3297 = _3223;
        _3299 = _3224;
        _3301 = _3225;
        _3303 = _3226;
    }
    bool _3510;
    vec4 _3313;
    vec4 _3335;
    float _3337;
    float _3341;
    float _3342;
    float _3343;
    float _3344;
    bool _3354;
    for (;;)
    {
        _3313 = cbMatDynParam._m0[0u];
        float _3315 = roundEven(_3313.y);
        bool _3316 = _3315 == 3.0;
        float _3317 = log2(_3303);
        float _3324 = exp2(_3317 * cbSceneParam._m0[78u].x) * _3195;
        float _3325 = exp2(_3317 * cbSceneParam._m0[78u].y) * _3196;
        float _3326 = exp2(_3317 * cbSceneParam._m0[78u].z) * _3197;
        float _3333 = _1018 + (-0.5);
        _3335 = cbMtdParam._m0[1u];
        _3337 = _3335.y * _3333;
        float _3340 = (_3315 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3341 = _3340 * (_3316 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3297)));
        _3342 = _3340 * (_3316 ? _3325 : (_3325 + (cbSceneParam._m0[72u].w * _3299)));
        _3343 = _3340 * (_3316 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3301)));
        _3344 = _3333 * 0.999000012874603271484375;
        _3354 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3354)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3344) < 0.5)
            {
                _3510 = true;
                break;
            }
        }
        uint _3451 = _1067 + uint(_3313.w);
        if ((cbInstanceData._m0[_3451].w < 1.0) && ((cbInstanceData._m0[_3451].w + _3344) < 0.5))
        {
            _3510 = true;
            break;
        }
        if ((_3337 + 1.0) < _3335.x)
        {
            _3510 = true;
            break;
        }
        _3510 = false;
        break;
    }
    float _3714;
    if (_3510)
    {
        discard_state = true;
        _3714 = 0.0;
    }
    else
    {
        _3714 = cbInstanceData._m0[_3198].w;
    }
    SV_Target.x = _3341;
    SV_Target.y = _3342;
    SV_Target.z = _3343;
    SV_Target.w = _3714;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3198].w;
    discard_exit();
}


