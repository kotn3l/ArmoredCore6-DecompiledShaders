#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1213;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3543 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3554 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3565 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3576 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _462 = (_320.x * cbMtdParam._m0[9u].x) * ((_452 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351);
    float _463 = (_320.y * cbMtdParam._m0[9u].y) * ((_452 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352);
    float _464 = (_320.z * cbMtdParam._m0[9u].z) * ((_452 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353);
    float _468 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _462;
    float _471 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _463;
    float _474 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _464;
    float _482 = (((_462 - _468) * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) + _468) * 4.55000019073486328125;
    float _484 = (((_463 - _471) * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) + _471) * 4.55000019073486328125;
    float _486 = (((_464 - _474) * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) + _474) * 4.55000019073486328125;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _452) + _545;
    float _557 = ((((_524.x - _543) * _452) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _452) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3587 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (_557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_499.x * 2.0) + (-1.0)))) + (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _599 = (_558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_499.y * 2.0) + (-1.0)))) + (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _627 = _625.x;
    float _644 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _627) * _452) + _627;
    float _648 = ((_611.x - _644) * cbMtdParam._m0[19u].z) + _644;
    float _653 = (((_499.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    float _657 = ((_586.z - _653) * cbMtdParam._m0[19u].w) + _653;
    float _659 = cbMtdParam._m0[22u].x + _586.w;
    float _662 = fma(_564, _230 * NORMAL.x, fma(_599, _237 * TANGENT.x, (_223 * _215) * _598));
    float _665 = fma(_564, _230 * NORMAL.y, fma(_599, _237 * TANGENT.y, (_223 * _216) * _598));
    float _668 = fma(_564, _230 * NORMAL.z, fma(_599, _237 * TANGENT.z, (_223 * _217) * _598));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3598 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _676 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3620 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3631 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3642 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3653 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _681 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_675, cbSceneParam._m0[5u].z, fma(_674, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _673));
    float _783 = fma(_675, cbSceneParam._m0[6u].z, fma(_674, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _673));
    float _786 = fma(_675, cbSceneParam._m0[7u].z, fma(_674, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _673));
    uint _800 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_800].z;
    float _3664 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _812 = 1.0 - _681;
    float _813 = _809 * _812;
    float _814 = _810 * _812;
    float _815 = _811 * _812;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _681;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _681;
    float _822 = (_811 + (-0.039999999105930328369140625)) * _681;
    float _823 = _820 + 0.039999999105930328369140625;
    float _825 = _821 + 0.039999999105930328369140625;
    float _826 = _822 + 0.039999999105930328369140625;
    vec4 _835 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _839 = ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * TEXCOORD_5.w) * _835.x;
    float _840 = dot(vec3(_673, _674, _675), vec3(_753, _754, _755));
    float _843 = _840 * 2.0;
    float _847 = (_843 * _673) - _753;
    float _848 = (_843 * _674) - _754;
    float _849 = (_843 * _675) - _755;
    float _853 = abs(dot(vec3(_753, _754, _755), vec3(_673, _674, _675)));
    float _3697 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _855 = sqrt(_676);
    float _868 = exp2((_855 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_855 * 3.0));
    float _874 = (1.0 - _868) * ((_855 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _875 = _868 * _855;
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1212;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _937 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _941 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _945 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _970 = _903 + _673;
        float _971 = _907 + _674;
        float _972 = _911 + _675;
        float _982 = fma(_972, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970)) - _937;
        float _983 = fma(_972, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970)) - _941;
        float _984 = fma(_972, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970)) - _945;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_937 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_941 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[34u].z) + ((((((_945 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1040 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1006.x + (-0.5));
        float _1042 = _1040 * (_1006.y + (-0.5));
        float _1043 = _1040 * (_1006.z + (-0.5));
        float _1050 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1013.x + (-0.5));
        float _1052 = _1050 * (_1013.y + (-0.5));
        float _1053 = _1050 * (_1013.z + (-0.5));
        float _1060 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1020.x + (-0.5));
        float _1062 = _1060 * (_1020.y + (-0.5));
        float _1063 = _1060 * (_1020.z + (-0.5));
        float _1070 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1027.x + (-0.5));
        float _1072 = _1070 * (_1027.y + (-0.5));
        float _1073 = _1070 * (_1027.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1094 = (dot(vec3(_673, _674, _675), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1104 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3745 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1106 + 1.0))) + _1111) * _1074;
        float _1121 = _1042 * 0.5;
        float _1122 = _1052 * 0.5;
        float _1123 = _1062 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_673, _674, _675), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3778 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1148 + 1.0))) + _1153) * _1075;
        float _1163 = _1043 * 0.5;
        float _1164 = _1053 * 0.5;
        float _1165 = _1063 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_673, _674, _675), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3811 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1190 + 1.0))) + _1195) * _1076;
        _1212 = _1043;
        _1214 = _1042;
        _1215 = _1041;
        _1216 = _1053;
        _1217 = _1052;
        _1218 = _1051;
        _1219 = _1063;
        _1220 = _1062;
        _1221 = _1061;
        _1222 = _1076;
        _1223 = _1075;
        _1224 = _1074;
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _1213;
        _1214 = _1213;
        _1215 = _1213;
        _1216 = _1213;
        _1217 = _1213;
        _1218 = _1213;
        _1219 = _1213;
        _1220 = _1213;
        _1221 = _1213;
        _1222 = _1213;
        _1223 = _1213;
        _1224 = _1213;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1252 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1256 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1260 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1283 = _903 + _673;
        float _1284 = _907 + _674;
        float _1285 = _911 + _675;
        float _1295 = fma(_1285, cbModelParam._m0[30u].z, fma(_1284, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283)) - _1252;
        float _1296 = fma(_1285, cbModelParam._m0[31u].z, fma(_1284, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283)) - _1256;
        float _1297 = fma(_1285, cbModelParam._m0[32u].z, fma(_1284, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283)) - _1260;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1314 = ((_1301 * _1295) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1252 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1296) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1256 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1301 * _1297) / cbModelParam._m0[35u].z) + ((((((_1260 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1351 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1318.x + (-0.5));
        float _1353 = _1351 * (_1318.y + (-0.5));
        float _1354 = _1351 * (_1318.z + (-0.5));
        float _1361 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1325.x + (-0.5));
        float _1363 = _1361 * (_1325.y + (-0.5));
        float _1364 = _1361 * (_1325.z + (-0.5));
        float _1371 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1332.x + (-0.5));
        float _1373 = _1371 * (_1332.y + (-0.5));
        float _1374 = _1371 * (_1332.z + (-0.5));
        float _1381 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1339.x + (-0.5));
        float _1383 = _1381 * (_1339.y + (-0.5));
        float _1384 = _1381 * (_1339.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_673, _674, _675), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3874 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1415 + 1.0))) + _1420) * _1385;
        float _1430 = _1353 * 0.5;
        float _1431 = _1363 * 0.5;
        float _1432 = _1373 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_673, _674, _675), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3907 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1457 + 1.0))) + _1462) * _1386;
        float _1472 = _1354 * 0.5;
        float _1473 = _1364 * 0.5;
        float _1474 = _1374 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_673, _674, _675), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _3940 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1499 + 1.0))) + _1504) * _1387;
        _1521 = _1354;
        _1522 = _1353;
        _1523 = _1352;
        _1524 = _1364;
        _1525 = _1363;
        _1526 = _1362;
        _1527 = _1374;
        _1528 = _1373;
        _1529 = _1372;
        _1530 = _1387;
        _1531 = _1386;
        _1532 = _1385;
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1213;
        _1522 = _1213;
        _1523 = _1213;
        _1524 = _1213;
        _1525 = _1213;
        _1526 = _1213;
        _1527 = _1213;
        _1528 = _1213;
        _1529 = _1213;
        _1530 = _1213;
        _1531 = _1213;
        _1532 = _1213;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1225)) + _1225;
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1226)) + _1226;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1227)) + _1227;
    float _1568 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1545));
    float _1589 = _847 * 0.5;
    float _1590 = _848 * 0.5;
    float _1591 = _849 * 0.5;
    float _1592 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1595 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1598 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1632;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1605 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1212, _1216, _1219, _1222));
        float _1609 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1613 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1620 = dot(vec4(cbModelParam._m0[39u]), vec4(_1589, _1590, _1591, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1643;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1634 = dot(vec4(cbModelParam._m0[40u]), vec4(_1589, _1590, _1591, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1647 = (_1643 * cbModelParam._m0[1u].x) + (_1632 * (1.0 - cbModelParam._m0[1u].x));
    float _1657 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1657 : min(cbModelParam._m0[25u].z, _1657));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1707 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1711 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1715 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1718 = fma(_849, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847));
        float _1721 = fma(_849, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847));
        float _1724 = fma(_849, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847));
        float _1752;
        if (_1718 > 0.0)
        {
            _1752 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1752 = frontier_phi_14_12_ladder;
        }
        float _1956;
        if (_1721 > 0.0)
        {
            _1956 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1956 = frontier_phi_23_19_ladder;
        }
        float _2210;
        if (_1724 > 0.0)
        {
            _2210 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2210 = frontier_phi_35_30_ladder;
        }
        float _2212 = isnan(_1956) ? _1752 : (isnan(_1752) ? _1956 : min(_1752, _1956));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1718) + _1707;
        float _2218 = (_2213 * _1721) + _1711;
        float _2219 = (_2213 * _1724) + _1715;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2220;
        float _2224 = _2220 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 > _2224) || ((_2218 < _2222) || ((_2217 < _2222) || (_2217 > _2224))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2219, cbModelParam._m0[9u].z, fma(_2218, cbModelParam._m0[9u].y, _2217 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2219, cbModelParam._m0[10u].z, fma(_2218, cbModelParam._m0[10u].y, _2217 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2219, cbModelParam._m0[11u].z, fma(_2218, cbModelParam._m0[11u].y, _2217 * cbModelParam._m0[11u].x))), _1658);
            frontier_phi_13_35_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1740 = frontier_phi_13_35_ladder_2;
        _1742 = frontier_phi_13_35_ladder_1;
        _1744 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_847, _848, _849), _1658);
        _1740 = _1728.x * cbModelParam._m0[1u].y;
        _1742 = _1728.y * cbModelParam._m0[1u].y;
        _1744 = _1728.z * cbModelParam._m0[1u].y;
    }
    float _1748 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1748 : min(cbModelParam._m0[25u].w, _1748));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1804 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1808 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1812 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1815 = fma(_849, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847));
        float _1818 = fma(_849, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847));
        float _1821 = fma(_849, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847));
        float _1961;
        if (_1815 > 0.0)
        {
            _1961 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1961 = frontier_phi_25_21_ladder;
        }
        float _2237;
        if (_1818 > 0.0)
        {
            _2237 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2237 = frontier_phi_37_32_ladder;
        }
        float _2450;
        if (_1821 > 0.0)
        {
            _2450 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2450 = frontier_phi_46_43_ladder;
        }
        float _2452 = isnan(_2237) ? _1961 : (isnan(_1961) ? _2237 : min(_1961, _2237));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1815) + _1804;
        float _2458 = (_2453 * _1818) + _1808;
        float _2459 = (_2453 * _1821) + _1812;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2460;
        float _2463 = _2460 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2459 > _2463) || ((_2459 < _2461) || ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 < _2461) || (_2457 > _2463))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2459, cbModelParam._m0[17u].z, fma(_2458, cbModelParam._m0[17u].y, _2457 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2459, cbModelParam._m0[18u].z, fma(_2458, cbModelParam._m0[18u].y, _2457 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2459, cbModelParam._m0[19u].z, fma(_2458, cbModelParam._m0[19u].y, _2457 * cbModelParam._m0[19u].x))), _1749);
            frontier_phi_22_46_ladder = _2658.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2658.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2658.x * cbModelParam._m0[1u].z;
        }
        _1840 = frontier_phi_22_46_ladder_2;
        _1842 = frontier_phi_22_46_ladder_1;
        _1844 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_847, _848, _849), _1749);
        _1840 = _1824.x * cbModelParam._m0[1u].z;
        _1842 = _1824.y * cbModelParam._m0[1u].z;
        _1844 = _1824.z * cbModelParam._m0[1u].z;
    }
    float _1857 = (((_874 * _823) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1840 - _1740)) + _1740);
    float _1859 = (((_874 * _825) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1842 - _1742)) + _1742);
    float _1861 = (((_874 * _826) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1844 - _1744)) + _1744);
    float _1864 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1857 * cbSceneParam._m0[91u].x));
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _839 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1915 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1919 = _1882 | 1u;
    float _1930 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_673, _674, _675));
    float _1933 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_673, _674, _675));
    float _4076 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _4087 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1938 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1940 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1947 = ((cbLight._m0[_1899].x * _1905) * _1940) + ((cbLight._m0[_1909].x * _1915) * _1938);
    float _1948 = ((_1905 * cbLight._m0[_1899].y) * _1940) + ((_1915 * cbLight._m0[_1909].y) * _1938);
    float _1949 = ((_1905 * cbLight._m0[_1899].z) * _1940) + ((_1915 * cbLight._m0[_1909].z) * _1938);
    uvec4 _1953 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1955 = _1953.x == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1955)
    {
        _1966 = _1947;
        _1968 = _1948;
        _1970 = _1949;
    }
    else
    {
        uint _1974 = _1882 + 6u;
        float _1990 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _4098 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1993 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _1966 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1947;
        _1968 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1948;
        _1970 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1949;
    }
    bool _1973 = _1953.y == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1973)
    {
        _2011 = _1966;
        _2013 = _1968;
        _2015 = _1970;
    }
    else
    {
        uint _2181 = _1882 + 7u;
        float _2197 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4114 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2200 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2011 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _1966;
        _2013 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _1968;
        _2015 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _1970;
    }
    uint _2018 = _1882 + 8u;
    float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _676) * 0.949999988079071044921875);
    float _2032 = _2031 * _2031;
    float _2033 = cbLight._m0[_1882].x + _753;
    float _2034 = cbLight._m0[_1882].y + _754;
    float _2035 = cbLight._m0[_1882].z + _755;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2040 = _2039 * _2033;
    float _2041 = _2039 * _2034;
    float _2042 = _2039 * _2035;
    float _2043 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1882].xyz));
    float _4130 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2047 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2048 = dot(vec3(_673, _674, _675), vec3(_2040, _2041, _2042));
    float _4152 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2040, _2041, _2042));
    float _4163 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2032 * _2032;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _2069 = 0.959999978542327880859375 - _820;
    float _2071 = 0.959999978542327880859375 - _821;
    float _2072 = 0.959999978542327880859375 - _822;
    float _2079 = 1.0 - _2032;
    float _2090 = (0.5 / (((_2047 * ((_2046 * _2079) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2079) + _2032) * _2046))) * _2046;
    float _4174 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    uint _2103 = _1882 + 9u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _676) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1919].x + _753;
    float _2117 = cbLight._m0[_1919].y + _754;
    float _2118 = cbLight._m0[_1919].z + _755;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1919].xyz));
    float _4185 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2130 = dot(vec3(_673, _674, _675), vec3(_2123, _2124, _2125));
    float _4196 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2123, _2124, _2125));
    float _4207 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2115 * _2115;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
    float _2156 = 1.0 - _2115;
    float _2166 = (0.5 / (((_2047 * ((_2129 * _2156) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2156) + _2115) * _2129))) * _2129;
    float _4218 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    float _2178 = (((((_2149 * _2069) + _823) * cbLight._m0[_2103].x) * _2168) * _1905) + (((((_2068 * _2069) + _823) * cbLight._m0[_2018].x) * _2092) * _1915);
    float _2179 = (((((_2149 * _2071) + _825) * cbLight._m0[_2103].y) * _2168) * _1905) + (((((_2068 * _2071) + _825) * cbLight._m0[_2018].y) * _2092) * _1915);
    float _2180 = (((((_2149 * _2072) + _826) * cbLight._m0[_2103].z) * _2168) * _1905) + (((((_2068 * _2072) + _826) * cbLight._m0[_2018].z) * _2092) * _1915);
    float _2242;
    float _2244;
    float _2246;
    if (_1955)
    {
        _2242 = _2178;
        _2244 = _2179;
        _2246 = _2180;
    }
    else
    {
        uint _2248 = _1882 + 2u;
        uint _2252 = _1882 + 10u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _676) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _753;
        float _2269 = cbLight._m0[_2248].y + _754;
        float _2270 = cbLight._m0[_2248].z + _755;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2248].xyz));
        float _4229 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2282 = dot(vec3(_673, _674, _675), vec3(_2275, _2276, _2277));
        float _4240 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4251 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_2047 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2308) + _2267) * _2281))) * _2281;
        float _4262 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2242 = (((((_2301 * _2069) + _823) * cbLight._m0[_2252].x) * _2320) * _2321) + _2178;
        _2244 = (((((_2301 * _2071) + _825) * cbLight._m0[_2252].y) * _2320) * _2321) + _2179;
        _2246 = (((((_2301 * _2072) + _826) * cbLight._m0[_2252].z) * _2320) * _2321) + _2180;
    }
    float _2356;
    float _2358;
    float _2360;
    if (_1973)
    {
        _2356 = _2242;
        _2358 = _2244;
        _2360 = _2246;
    }
    else
    {
        uint _2367 = _1882 + 3u;
        uint _2371 = _1882 + 11u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _676) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _753;
        float _2388 = cbLight._m0[_2367].y + _754;
        float _2389 = cbLight._m0[_2367].z + _755;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2367].xyz));
        float _4278 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2401 = dot(vec3(_673, _674, _675), vec3(_2394, _2395, _2396));
        float _4289 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4300 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
        float _2427 = 1.0 - _2386;
        float _2437 = (0.5 / (((_2047 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2427) + _2386) * _2400))) * _2400;
        float _4311 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2356 = (((((_2420 * _2069) + _823) * cbLight._m0[_2371].x) * _2439) * _2440) + _2242;
        _2358 = (((((_2420 * _2071) + _825) * cbLight._m0[_2371].y) * _2439) * _2440) + _2244;
        _2360 = (((((_2420 * _2072) + _826) * cbLight._m0[_2371].z) * _2439) * _2440) + _2246;
    }
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_1880.y == 0u)
    {
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2515;
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2515;
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2515;
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.x;
        uint _2542 = uint((float(_2530.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2531))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2531)));
        float _2552 = (log2(_2518 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        uint _2556 = uint(isnan(14.0) ? _2553 : (isnan(_2553) ? 14.0 : min(_2553, 14.0)));
        uvec4 _2561 = texelFetch(g_lightClusterGridBuffer, int(((_2556 << 2u) + (_2542 << 6u)) >> 2u));
        uint _2562 = _2561.x;
        uint _2563 = _2530.z;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        if (((((1u << ((_2563 >> 4u) & 15u)) + 4294967295u) & _2562) == 0u) || ((_2563 & 240u) == 0u))
        {
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
        }
        else
        {
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            uint _2814 = 0u;
            uint _2823;
            bool _2824;
            for (;;)
            {
                _2823 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                _2824 = _2823 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2824)
                {
                    frontier_phi_61_pred = _2808;
                    frontier_phi_61_pred_1 = _2813;
                    frontier_phi_61_pred_2 = _2812;
                    frontier_phi_61_pred_3 = _2811;
                    frontier_phi_61_pred_4 = _2810;
                    frontier_phi_61_pred_5 = _2809;
                }
                else
                {
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    uint _2938;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2823;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    for (;;)
                    {
                        uint _2942 = uint(findLSB(_2938)) + (_2814 << 5u);
                        uint _2939 = (_2938 + 4294967295u) & _2938;
                        uint _2944 = _2942 * 48u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2964 = (_2942 * 48u) + 4u;
                        vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2983 = (_2942 * 48u) + 8u;
                        vec3 _2994 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x));
                        float _2998 = _2958.x - _2516;
                        float _2999 = _2958.y - _2517;
                        float _3000 = _2958.z - _2518;
                        float _3001 = dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000));
                        float _3004 = inversesqrt(_3001);
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3008 = dot(vec3(_780, _783, _786), vec3(_3005, _3006, _3007));
                        float _3013 = 1.0 - (_3001 * _2958.w);
                        float _4337 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3015 = sqrt(_3001) * _2977.w;
                        float _3018 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _3008) + _3019;
                        float _3025 = _3015 * _3015;
                        float _3029 = ((isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))) * _3014) / ((_3025 * 0.699999988079071044921875) + 1.0);
                        float _3033 = (-0.0) - _2516;
                        float _3034 = (-0.0) - _2517;
                        float _3035 = (-0.0) - _2518;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3050 = exp2(log2(1.0 / ((_3025 * 3.5) + 5.0)) * 0.25);
                        float _3051 = 1.0 - _855;
                        float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                        float _3059 = _3058 * _3058;
                        float _3060 = _3059 * _3059;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3071 = dot(vec3(_780, _783, _786), vec3(_3040, _3041, _3042));
                        float _4353 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3075 = dot(vec3(_780, _783, _786), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                        float _4364 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                        float _3083 = _3018 * _3059;
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3008) + _3084;
                        float _4375 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3089 = 1.0 - _3059;
                        float _3099 = (0.5 / (((_3088 * ((_3074 * _3089) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3059) * _3074))) * _3088;
                        float _4386 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3110 = (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3082 * _3082) * ((_3025 * 2.1991131305694580078125) + 3.141590118408203125))) * _3014;
                        _2867 = (_3029 * _2977.x) + _2935;
                        _2868 = (_3029 * _2977.y) + _2936;
                        _2869 = (_3029 * _2977.z) + _2937;
                        _2864 = (_3110 * _2994.x) + _2932;
                        _2865 = (_3110 * _2994.y) + _2933;
                        _2866 = (_3110 * _2994.z) + _2934;
                        if (_2939 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2939;
                        }
                    }
                    frontier_phi_61_pred = _2864;
                    frontier_phi_61_pred_1 = _2869;
                    frontier_phi_61_pred_2 = _2868;
                    frontier_phi_61_pred_3 = _2867;
                    frontier_phi_61_pred_4 = _2866;
                    frontier_phi_61_pred_5 = _2865;
                }
                _2664 = frontier_phi_61_pred;
                _2674 = frontier_phi_61_pred_1;
                _2672 = frontier_phi_61_pred_2;
                _2670 = frontier_phi_61_pred_3;
                _2668 = frontier_phi_61_pred_4;
                _2666 = frontier_phi_61_pred_5;
                uint _2815 = _2814 + 1u;
                if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2808 = _2664;
                    _2809 = _2666;
                    _2810 = _2668;
                    _2811 = _2670;
                    _2812 = _2672;
                    _2813 = _2674;
                    _2814 = _2815;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
        }
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.z;
        uint _2680 = (_2678 >> 8u) & 15u;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((4294967295u << _2680) & _2562) == 0u)
        {
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
            _2782 = _2669;
            _2784 = _2671;
            _2786 = _2673;
        }
        else
        {
            float _2801 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
            float _2802 = _2801 * _2516;
            float _2803 = _2801 * _2517;
            float _2804 = _2801 * _2518;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2680 < ((_2678 >> 12u) & 15u))
            {
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2915 = _2663;
                float _2916 = _2665;
                float _2917 = _2667;
                float _2918 = _2669;
                float _2919 = _2671;
                float _2920 = _2673;
                uint _2921 = _2680;
                uint _2930;
                bool _2931;
                for (;;)
                {
                    _2930 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2921 << 2u)) >> 2u)).x;
                    _2931 = _2930 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2931)
                    {
                        frontier_phi_67_pred = _2918;
                        frontier_phi_67_pred_1 = _2919;
                        frontier_phi_67_pred_2 = _2920;
                        frontier_phi_67_pred_3 = _2917;
                        frontier_phi_67_pred_4 = _2916;
                        frontier_phi_67_pred_5 = _2915;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        uint _3134 = _2930;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3203;
                        vec4 _3218;
                        float _3265;
                        bool _3266;
                        for (;;)
                        {
                            uint _3145 = ((_2921 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3190 = (_3145 * 40u) + 16u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3145 * 40u) + 20u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3221 = (_3145 * 40u) + 24u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3240 = (_3145 * 40u) + 28u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3265 = fma(_2518, _3253.z, fma(_2517, _3253.y, _3253.x * _2516)) + _3253.w;
                            _3266 = !((fma(_2518, _3234.z, fma(_2517, _3234.y, _3234.x * _2516)) + _3234.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3266)
                            {
                                float _3293 = _3160.x - _2516;
                                float _3294 = _3160.y - _2517;
                                float _3295 = _3160.z - _2518;
                                float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                                float _3299 = inversesqrt(_3296);
                                float _3300 = _3299 * _3293;
                                float _3301 = _3299 * _3294;
                                float _3302 = _3299 * _3295;
                                float _3306 = 1.0 - (_3296 / (_3161 * _3161));
                                float _4397 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3311 = sqrt(_3296) * _3176.w;
                                float _3313 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                                float _3314 = _3313 * _3313;
                                float _3317 = ((1.0 - _3314) * dot(vec3(_3300, _3301, _3302), vec3(_780, _783, _786))) + _3314;
                                float _3320 = _3311 * _3311;
                                float _3324 = (fma(_2518, _3203.z, fma(_2517, _3203.y, _3203.x * _2516)) + _3203.w) / _3265;
                                float _3325 = (fma(_2518, _3218.z, fma(_2517, _3218.y, _3218.x * _2516)) + _3218.w) / _3265;
                                float _3329 = 1.0 - dot(vec2(_3324, _3325), vec2(_3324, _3325));
                                float _4413 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3331 = _3330 * (((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3307) / ((_3320 * 0.699999988079071044921875) + 1.0));
                                float _3343 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                                float _3344 = 1.0 - _855;
                                float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                                float _3352 = _3351 * _3351;
                                float _3353 = _3352 * _3352;
                                float _3354 = _3300 - _2802;
                                float _3355 = _3301 - _2803;
                                float _3356 = _3302 - _2804;
                                float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                                float _3364 = dot(vec3(_780, _783, _786), vec3((-0.0) - _2802, (-0.0) - _2803, (-0.0) - _2804));
                                float _4424 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3368 = dot(vec3(_780, _783, _786), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                                float _4435 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                                float _3376 = _3313 * _3352;
                                float _3377 = _3376 * _3376;
                                float _3383 = ((1.0 - _3377) * dot(vec3(_780, _783, _786), vec3(_3300, _3301, _3302))) + _3377;
                                float _4446 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3385 = 1.0 - _3352;
                                float _3395 = (0.5 / (((_3384 * ((_3367 * _3385) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3352) * _3367))) * _3384;
                                float _4457 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3405 = (_3330 * _3307) * (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3375 * _3375) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3405 * _3188.x;
                                frontier_phi_73_pred_1 = _3405 * _3188.y;
                                frontier_phi_73_pred_2 = _3331 * _3176.z;
                                frontier_phi_73_pred_3 = _3331 * _3176.y;
                                frontier_phi_73_pred_4 = _3331 * _3176.x;
                                frontier_phi_73_pred_5 = _3405 * _3188.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3409 = frontier_phi_73_pred;
                            _3410 = frontier_phi_73_pred_1;
                            _3414 = frontier_phi_73_pred_2;
                            _3413 = frontier_phi_73_pred_3;
                            _3412 = frontier_phi_73_pred_4;
                            _3411 = frontier_phi_73_pred_5;
                            _3118 = _3412 + _3131;
                            _3119 = _3413 + _3132;
                            _3120 = _3414 + _3133;
                            _3115 = _3409 + _3128;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3118;
                        frontier_phi_67_pred_1 = _3119;
                        frontier_phi_67_pred_2 = _3120;
                        frontier_phi_67_pred_3 = _3117;
                        frontier_phi_67_pred_4 = _3116;
                        frontier_phi_67_pred_5 = _3115;
                    }
                    _2783 = frontier_phi_67_pred;
                    _2785 = frontier_phi_67_pred_1;
                    _2787 = frontier_phi_67_pred_2;
                    _2781 = frontier_phi_67_pred_3;
                    _2779 = frontier_phi_67_pred_4;
                    _2777 = frontier_phi_67_pred_5;
                    uint _2922 = _2921 + 1u;
                    if (_2922 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2915 = _2777;
                        _2916 = _2779;
                        _2917 = _2781;
                        _2918 = _2783;
                        _2919 = _2785;
                        _2920 = _2787;
                        _2921 = _2922;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2785;
                frontier_phi_55_56_ladder_1 = _2787;
                frontier_phi_55_56_ladder_2 = _2783;
                frontier_phi_55_56_ladder_3 = _2781;
                frontier_phi_55_56_ladder_4 = _2779;
                frontier_phi_55_56_ladder_5 = _2777;
            }
            else
            {
                frontier_phi_55_56_ladder = _2671;
                frontier_phi_55_56_ladder_1 = _2673;
                frontier_phi_55_56_ladder_2 = _2669;
                frontier_phi_55_56_ladder_3 = _2667;
                frontier_phi_55_56_ladder_4 = _2665;
                frontier_phi_55_56_ladder_5 = _2663;
            }
            _2776 = frontier_phi_55_56_ladder_5;
            _2778 = frontier_phi_55_56_ladder_4;
            _2780 = frontier_phi_55_56_ladder_3;
            _2782 = frontier_phi_55_56_ladder_2;
            _2784 = frontier_phi_55_56_ladder;
            _2786 = frontier_phi_55_56_ladder_1;
        }
        float _2791 = isnan(1.0) ? _839 : (isnan(_839) ? 1.0 : min(_839, 1.0));
        _2575 = (_2791 * _2782) + _2011;
        _2577 = (_2791 * _2784) + _2013;
        _2579 = (_2791 * _2786) + _2015;
        _2581 = ((_2776 * _823) * _2791) + _2356;
        _2583 = ((_2778 * _825) * _2791) + _2358;
        _2585 = ((_2780 * _826) * _2791) + _2360;
    }
    else
    {
        _2575 = _2011;
        _2577 = _2013;
        _2579 = _2015;
        _2581 = _2356;
        _2583 = _2358;
        _2585 = _2360;
    }
    float _4473 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4484 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4495 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    uint _2605 = _264 + 6u;
    float _2613 = _761 / cbSceneParam._m0[86u].x;
    float _2614 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2628 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2630 = _2628.x;
    float _2631 = _2628.y;
    float _2632 = _2628.z;
    float _2633 = _2628.w;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2688 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2689 = _2688 / _695;
        float _2700 = _2689 * _746;
        float _2701 = _747 * _2689;
        float _2702 = (-0.0) - _2701;
        float _2704 = _2689 * _748;
        float _2706 = (cbSceneParam._m0[77u].w * _2702) / _2688;
        float _2707 = _2706 + cbSceneParam._m0[79u].w;
        float _2708 = cbSceneParam._m0[79u].w - _2701;
        float _2714 = sqrt(((_2700 * _2700) + (_2701 * _2701)) + (_2704 * _2704));
        float _2717 = (1.0 - (cbSceneParam._m0[77u].w / _2688)) * _2714;
        float _2722 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2724 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2877;
        if (abs((_2702 - _2706) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2877 = ((((_2707 > 0.0) ? exp2(_2722 * _2707) : (2.0 - exp2(_2724 * _2707))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2717;
        }
        else
        {
            float _2837 = 1.0 / cbSceneParam._m0[80u].x;
            float _2838 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : max(_2707, _2708));
            float _2839 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : min(_2707, _2708));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            _2877 = ((abs(_2714 / _2702) * cbSceneParam._m0[80u].y) * ((((_2848 - _2849) * 2.0) - ((exp2(_2722 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)))) - exp2(_2722 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))))) * _2837)) - ((exp2(_2724 * _2848) - exp2(_2724 * _2849)) * _2837))) + (_2717 * cbSceneParam._m0[80u].z);
        }
        vec4 _2879 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, 1.0), 0.0);
        float _2888 = exp2((_2877 * (-1.44269502162933349609375)) * (1.0 - _2879.w));
        float _2889 = log2(_2888);
        float _2905 = log2(_2633);
        _2726 = (exp2(_2905 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].x)) * _2879.x) / cbSceneParam._m0[78u].x)) + _2630;
        _2728 = (exp2(_2905 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].y)) * _2879.y) / cbSceneParam._m0[78u].y)) + _2631;
        _2730 = (exp2(_2905 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].z)) * _2879.z) / cbSceneParam._m0[78u].z)) + _2632;
        _2732 = _2888 * _2633;
    }
    else
    {
        _2726 = _2630;
        _2728 = _2631;
        _2730 = _2632;
        _2732 = _2633;
    }
    float _2744 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2745 = _2744 == 3.0;
    float _2746 = log2(_2732);
    float _2753 = exp2(_2746 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2575 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _839))) + ((_2581 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1647)) * cbPerFrame._m0[3u].x));
    float _2754 = exp2(_2746 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2577 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _839))) + ((_2583 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1647)) * cbPerFrame._m0[3u].x));
    float _2755 = exp2(_2746 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2579 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _839))) + ((_2585 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1647)) * cbPerFrame._m0[3u].x));
    float _2764 = (_2744 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2764 * (_2745 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.y = _2764 * (_2745 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.z = _2764 * (_2745 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.w = cbInstanceData._m0[_2605].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2605].w;
}


