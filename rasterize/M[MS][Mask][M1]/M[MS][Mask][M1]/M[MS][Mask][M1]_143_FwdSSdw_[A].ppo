#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1612;
float _4013;
float _4014;
float _4015;
float _4016;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4025 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4036 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4047 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _352 = _347.x * cbMtdParam._m0[11u].x;
    float _353 = _347.y * cbMtdParam._m0[11u].y;
    float _354 = _347.z * cbMtdParam._m0[11u].z;
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _392.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4058 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _466 = (_459 * ((_373.x * cbMtdParam._m0[12u].x) - _352)) + _352;
    float _467 = (_459 * ((_373.y * cbMtdParam._m0[12u].y) - _353)) + _353;
    float _468 = (_459 * ((_373.z * cbMtdParam._m0[12u].z) - _354)) + _354;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _392.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4069 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _579 = _577.x;
    float _589 = dot(vec4(_579, _577.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _601 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _392.z) * 2.0) - ((((_579 - _589) * cbMtdParam._m0[23u].w) + _589) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4080 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _609 = (_602 * ((_560.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _610 = (_602 * ((_560.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _611 = (_602 * ((_560.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _615 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _609;
    float _618 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _610;
    float _621 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _611;
    float _628 = ((_609 - _615) * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) + _615;
    float _629 = ((_610 - _618) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _618;
    float _630 = ((_611 - _621) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _621;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _309) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _310) + cbTextureTilingScale._m0[14u].w));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _711 = _709.x;
    float _712 = _709.y;
    float _713 = _709.z;
    float _720 = ((_692.x - _711) * _459) + _711;
    float _721 = ((_692.y - _712) * _459) + _712;
    float _722 = ((_692.z - _713) * _459) + _713;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _745 = ((_734.x - _720) * _532) + _720;
    float _746 = ((_734.y - _721) * _532) + _721;
    float _747 = ((_734.z - _722) * _532) + _722;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _772 = ((_759.z - _747) * _602) + _747;
    float _775 = ((((_759.x - _745) * _602) + _745) * 2.0) + (-1.0);
    float _776 = ((((_759.y - _746) * _602) + _746) * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _4091 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _782 = sqrt(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))));
    vec4 _800 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _812 = (_775 + ((((_667.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_800.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _813 = (_776 + ((((_667.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_800.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _816 = fma(_782, _257, fma(_813, _264, _812 * _250));
    float _819 = fma(_782, _258, fma(_813, _265, _812 * _251));
    float _822 = fma(_782, _259, fma(_813, _266, _812 * _252));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    vec4 _853 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _855 = _853.x;
    float _856 = 1.0 - _855;
    float _864 = (cbMtdParam._m0[19u].x + dot(vec4(_826 * _816, _826 * _819, _826 * _822, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_855 - _856) * cbMtdParam._m0[24u].z) + _856) * cbMtdParam._m0[21u].z);
    float _4102 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _865 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _872 = (_865 * ((_648.x * cbMtdParam._m0[18u].x) - _628)) + _628;
    float _873 = (_865 * ((_648.y * cbMtdParam._m0[18u].y) - _629)) + _629;
    float _874 = (_865 * ((_648.z * cbMtdParam._m0[18u].z) - _630)) + _630;
    vec4 _900 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _902 = _900.x;
    float _920 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _902) * _459) + _902;
    float _937 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _920) * _532) + _920;
    float _955 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _937) * _602) + _937;
    float _959 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _955) * cbMtdParam._m0[19u].z) + _955;
    float _961 = _959 - (_959 * _865);
    float _966 = (((_667.z - _772) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _772;
    float _970 = ((_800.z - _966) * cbMtdParam._m0[19u].w) + _966;
    vec4 _983 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _990 = (_983.x * 2.0) + (-1.0);
    float _991 = (_983.y * 2.0) + (-1.0);
    float _992 = dot(vec2(_990, _991), vec2(_990, _991));
    float _4113 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _1000 = ((_983.z - _970) * _865) + _970;
    float _1010 = ((sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) - _782) * _865) + _782;
    float _1013 = (((_990 - _812) * _865) + _812) + (cbMtdParam._m0[21u].x * _812);
    float _1014 = (((_991 - _813) * _865) + _813) + (cbMtdParam._m0[21u].x * _813);
    float _1018 = cbMtdParam._m0[22u].x + _800.w;
    float _1021 = fma(_1010, _257, fma(_1014, _264, _1013 * _250));
    float _1024 = fma(_1010, _258, fma(_1014, _265, _1013 * _251));
    float _1027 = fma(_1010, _259, fma(_1014, _266, _1013 * _252));
    float _1031 = inversesqrt(dot(vec3(_1021, _1024, _1027), vec3(_1021, _1024, _1027)));
    float _1032 = _1031 * _1021;
    float _1033 = _1031 * _1024;
    float _1034 = _1031 * _1027;
    float _4124 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1035 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _4146 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4157 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4168 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4179 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _1040 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _1054 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1104 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1094);
    float _1105 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1094);
    float _1106 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1094);
    float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
    float _1111 = _1104 * _1110;
    float _1112 = _1105 * _1110;
    float _1113 = _1106 * _1110;
    vec4 _1118 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1120 = _1118.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1292 = sqrt(((_1104 * _1104) + (_1105 * _1105)) + (_1106 * _1106));
        float _1298 = (cbMatDynParam._m0[5u].x * _1292) + cbMatDynParam._m0[5u].y;
        float _4190 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1303 = (cbMatDynParam._m0[5u].z * _1292) + cbMatDynParam._m0[5u].w;
        float _4201 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) - _1299)) + _1299) < ((_1120 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1131 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1132 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1150 = fma(_1034, cbSceneParam._m0[5u].z, fma(_1033, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1032));
    float _1153 = fma(_1034, cbSceneParam._m0[6u].z, fma(_1033, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1032));
    float _1156 = fma(_1034, cbSceneParam._m0[7u].z, fma(_1033, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1032));
    uint _1169 = _290 + 9u;
    uint _1170 = _1169 + uint(cbMatDynParam._m0[0u].w);
    float _1176 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1170].x;
    float _1177 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1170].y;
    float _1178 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1170].z;
    float _4212 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _1182 = 1.0 - _1040;
    float _1183 = _1179 * _1182;
    float _1184 = _1180 * _1182;
    float _1185 = _1181 * _1182;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1040;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1040;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1040;
    float _1193 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    float _1196 = _1192 + 0.039999999105930328369140625;
    vec4 _1205 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1131, cbSceneParam._m0[86u].y * _1132));
    float _1209 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * TEXCOORD_5.w) * _1205.x;
    float _1210 = dot(vec3(_1032, _1033, _1034), vec3(_1111, _1112, _1113));
    float _1213 = _1210 * 2.0;
    float _1217 = (_1213 * _1032) - _1111;
    float _1218 = (_1213 * _1033) - _1112;
    float _1219 = (_1213 * _1034) - _1113;
    float _1223 = abs(dot(vec3(_1111, _1112, _1113), vec3(_1032, _1033, _1034)));
    float _4245 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _1225 = sqrt(_1035);
    float _1238 = exp2((_1225 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1225 * 3.0));
    float _1244 = (1.0 - _1238) * ((_1225 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1245 = _1238 * _1225;
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1611;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1336 = fma(_1281, cbModelParam._m0[26u].z, fma(_1277, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1273));
        float _1340 = fma(_1281, cbModelParam._m0[27u].z, fma(_1277, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1273));
        float _1344 = fma(_1281, cbModelParam._m0[28u].z, fma(_1277, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1273));
        float _1369 = _1273 + _1032;
        float _1370 = _1277 + _1033;
        float _1371 = _1281 + _1034;
        float _1381 = fma(_1371, cbModelParam._m0[26u].z, fma(_1370, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1369)) - _1336;
        float _1382 = fma(_1371, cbModelParam._m0[27u].z, fma(_1370, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1369)) - _1340;
        float _1383 = fma(_1371, cbModelParam._m0[28u].z, fma(_1370, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1369)) - _1344;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1336 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1340 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[34u].z) + ((((((_1344 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1439 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1405.x + (-0.5));
        float _1441 = _1439 * (_1405.y + (-0.5));
        float _1442 = _1439 * (_1405.z + (-0.5));
        float _1449 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1412.x + (-0.5));
        float _1451 = _1449 * (_1412.y + (-0.5));
        float _1452 = _1449 * (_1412.z + (-0.5));
        float _1459 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1419.x + (-0.5));
        float _1461 = _1459 * (_1419.y + (-0.5));
        float _1462 = _1459 * (_1419.z + (-0.5));
        float _1469 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1426.x + (-0.5));
        float _1471 = _1469 * (_1426.y + (-0.5));
        float _1472 = _1469 * (_1426.z + (-0.5));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1440 * 0.5;
        float _1477 = _1450 * 0.5;
        float _1478 = _1460 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1493 = (dot(vec3(_1032, _1033, _1034), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1503 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4293 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1505 + 1.0))) + _1510) * _1473;
        float _1520 = _1441 * 0.5;
        float _1521 = _1451 * 0.5;
        float _1522 = _1461 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_1032, _1033, _1034), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4326 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1547 + 1.0))) + _1552) * _1474;
        float _1562 = _1442 * 0.5;
        float _1563 = _1452 * 0.5;
        float _1564 = _1462 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_1032, _1033, _1034), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4359 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1589 + 1.0))) + _1594) * _1475;
        _1611 = _1442;
        _1613 = _1441;
        _1614 = _1440;
        _1615 = _1452;
        _1616 = _1451;
        _1617 = _1450;
        _1618 = _1462;
        _1619 = _1461;
        _1620 = _1460;
        _1621 = _1475;
        _1622 = _1474;
        _1623 = _1473;
        _1624 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1625 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1626 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1612;
        _1613 = _1612;
        _1614 = _1612;
        _1615 = _1612;
        _1616 = _1612;
        _1617 = _1612;
        _1618 = _1612;
        _1619 = _1612;
        _1620 = _1612;
        _1621 = _1612;
        _1622 = _1612;
        _1623 = _1612;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1652 = fma(_1281, cbModelParam._m0[30u].z, fma(_1277, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273));
        float _1656 = fma(_1281, cbModelParam._m0[31u].z, fma(_1277, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273));
        float _1660 = fma(_1281, cbModelParam._m0[32u].z, fma(_1277, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273));
        float _1683 = _1273 + _1032;
        float _1684 = _1277 + _1033;
        float _1685 = _1281 + _1034;
        float _1695 = fma(_1685, cbModelParam._m0[30u].z, fma(_1684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1683)) - _1652;
        float _1696 = fma(_1685, cbModelParam._m0[31u].z, fma(_1684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1683)) - _1656;
        float _1697 = fma(_1685, cbModelParam._m0[32u].z, fma(_1684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1683)) - _1660;
        float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
        float _1714 = ((_1701 * _1695) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1652 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1715 = ((_1701 * _1696) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1656 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1716 = ((_1701 * _1697) / cbModelParam._m0[35u].z) + ((((((_1660 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        float _1751 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1718.x + (-0.5));
        float _1753 = _1751 * (_1718.y + (-0.5));
        float _1754 = _1751 * (_1718.z + (-0.5));
        float _1761 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1725.x + (-0.5));
        float _1763 = _1761 * (_1725.y + (-0.5));
        float _1764 = _1761 * (_1725.z + (-0.5));
        float _1771 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1732.x + (-0.5));
        float _1773 = _1771 * (_1732.y + (-0.5));
        float _1774 = _1771 * (_1732.z + (-0.5));
        float _1781 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1739.x + (-0.5));
        float _1783 = _1781 * (_1739.y + (-0.5));
        float _1784 = _1781 * (_1739.z + (-0.5));
        float _1785 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = _1752 * 0.5;
        float _1789 = _1762 * 0.5;
        float _1790 = _1772 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_1032, _1033, _1034), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1785 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4422 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1815 + 1.0))) + _1820) * _1785;
        float _1830 = _1753 * 0.5;
        float _1831 = _1763 * 0.5;
        float _1832 = _1773 * 0.5;
        float _1833 = dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832));
        float _1838 = (_1833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1833);
        float _1846 = (dot(vec3(_1032, _1033, _1034), vec3(_1838 * _1830, _1838 * _1831, _1838 * _1832)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1857 = _1856 * 2.0;
        float _1861 = (1.0 - _1856) / (_1856 + 1.0);
        float _4455 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1871 = ((((1.0 - _1862) * (_1857 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1857 + 1.0))) + _1862) * _1786;
        float _1872 = _1754 * 0.5;
        float _1873 = _1764 * 0.5;
        float _1874 = _1774 * 0.5;
        float _1875 = dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874));
        float _1880 = (_1875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1875);
        float _1888 = (dot(vec3(_1032, _1033, _1034), vec3(_1880 * _1872, _1880 * _1873, _1880 * _1874)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1897 = sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1899 = _1898 * 2.0;
        float _1903 = (1.0 - _1898) / (_1898 + 1.0);
        float _4488 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1913 = ((((1.0 - _1904) * (_1899 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1899 + 1.0))) + _1904) * _1787;
        _1921 = _1754;
        _1922 = _1753;
        _1923 = _1752;
        _1924 = _1764;
        _1925 = _1763;
        _1926 = _1762;
        _1927 = _1774;
        _1928 = _1773;
        _1929 = _1772;
        _1930 = _1787;
        _1931 = _1786;
        _1932 = _1785;
        _1933 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)));
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)));
    }
    else
    {
        _1921 = _1612;
        _1922 = _1612;
        _1923 = _1612;
        _1924 = _1612;
        _1925 = _1612;
        _1926 = _1612;
        _1927 = _1612;
        _1928 = _1612;
        _1929 = _1612;
        _1930 = _1612;
        _1931 = _1612;
        _1932 = _1612;
        _1933 = 0.0;
        _1934 = 0.0;
        _1935 = 0.0;
    }
    float _1945 = (cbModelParam._m0[1u].x * (_1933 - _1624)) + _1624;
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1625)) + _1625;
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1626)) + _1626;
    float _1968 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1945));
    float _1989 = _1217 * 0.5;
    float _1990 = _1218 * 0.5;
    float _1991 = _1219 * 0.5;
    float _1992 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _1995 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _1998 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1921, _1924, _1927, _1930));
    float _2032;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2005 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1611, _1615, _1618, _1621));
        float _2009 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1613, _1616, _1619, _1622));
        float _2013 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1614, _1617, _1620, _1623));
        float _2020 = dot(vec4(cbModelParam._m0[39u]), vec4(_1989, _1990, _1991, 1.0));
        _2032 = dot(vec3(isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)), isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2020) ? 0.0 : (isnan(0.0) ? _2020 : max(0.0, _2020))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2032 = 1.0;
    }
    float _2043;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2034 = dot(vec4(cbModelParam._m0[40u]), vec4(_1989, _1990, _1991, 1.0));
        _2043 = dot(vec3(isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2034) ? 0.0 : (isnan(0.0) ? _2034 : max(0.0, _2034))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2043 = 1.0;
    }
    float _2047 = (_2043 * cbModelParam._m0[1u].x) + (_2032 * (1.0 - cbModelParam._m0[1u].x));
    float _2057 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1035);
    float _2058 = isnan(_2057) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2057 : min(cbModelParam._m0[25u].z, _2057));
    float _2138;
    float _2140;
    float _2142;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2105 = fma(_1281, cbModelParam._m0[13u].z, fma(_1277, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1273)) + cbModelParam._m0[13u].w;
        float _2109 = fma(_1281, cbModelParam._m0[14u].z, fma(_1277, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1273)) + cbModelParam._m0[14u].w;
        float _2113 = fma(_1281, cbModelParam._m0[15u].z, fma(_1277, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1273)) + cbModelParam._m0[15u].w;
        float _2116 = fma(_1219, cbModelParam._m0[13u].z, fma(_1218, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1217));
        float _2119 = fma(_1219, cbModelParam._m0[14u].z, fma(_1218, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1217));
        float _2122 = fma(_1219, cbModelParam._m0[15u].z, fma(_1218, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1217));
        float _2150;
        if (_2116 > 0.0)
        {
            _2150 = abs((1.0 - _2105) / _2116);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2105 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2150 = frontier_phi_17_15_ladder;
        }
        float _2373;
        if (_2119 > 0.0)
        {
            _2373 = abs((1.0 - _2109) / _2119);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2109 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2373 = frontier_phi_26_22_ladder;
        }
        float _2630;
        if (_2122 > 0.0)
        {
            _2630 = abs((1.0 - _2113) / _2122);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2113 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2630 = frontier_phi_38_33_ladder;
        }
        float _2632 = isnan(_2373) ? _2150 : (isnan(_2150) ? _2373 : min(_2150, _2373));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _2116) + _2105;
        float _2638 = (_2633 * _2119) + _2109;
        float _2639 = (_2633 * _2122) + _2113;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2640;
        float _2644 = _2640 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 > _2644) || ((_2638 < _2642) || ((_2637 < _2642) || (_2637 > _2644))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2639, cbModelParam._m0[9u].z, fma(_2638, cbModelParam._m0[9u].y, _2637 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2639, cbModelParam._m0[10u].z, fma(_2638, cbModelParam._m0[10u].y, _2637 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2639, cbModelParam._m0[11u].z, fma(_2638, cbModelParam._m0[11u].y, _2637 * cbModelParam._m0[11u].x))), _2058);
            frontier_phi_16_38_ladder = _2767.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2767.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2767.x * cbModelParam._m0[1u].y;
        }
        _2138 = frontier_phi_16_38_ladder_2;
        _2140 = frontier_phi_16_38_ladder_1;
        _2142 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2126 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1217, _1218, _1219), _2058);
        _2138 = _2126.x * cbModelParam._m0[1u].y;
        _2140 = _2126.y * cbModelParam._m0[1u].y;
        _2142 = _2126.z * cbModelParam._m0[1u].y;
    }
    float _2146 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1035);
    float _2147 = isnan(_2146) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2146 : min(cbModelParam._m0[25u].w, _2146));
    float _2236;
    float _2238;
    float _2240;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2200 = fma(_1281, cbModelParam._m0[21u].z, fma(_1277, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1273)) + cbModelParam._m0[21u].w;
        float _2204 = fma(_1281, cbModelParam._m0[22u].z, fma(_1277, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1273)) + cbModelParam._m0[22u].w;
        float _2208 = fma(_1281, cbModelParam._m0[23u].z, fma(_1277, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1273)) + cbModelParam._m0[23u].w;
        float _2211 = fma(_1219, cbModelParam._m0[21u].z, fma(_1218, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1217));
        float _2214 = fma(_1219, cbModelParam._m0[22u].z, fma(_1218, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1217));
        float _2217 = fma(_1219, cbModelParam._m0[23u].z, fma(_1218, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1217));
        float _2378;
        if (_2211 > 0.0)
        {
            _2378 = abs((1.0 - _2200) / _2211);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2200 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2378 = frontier_phi_28_24_ladder;
        }
        float _2657;
        if (_2214 > 0.0)
        {
            _2657 = abs((1.0 - _2204) / _2214);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2204 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2657 = frontier_phi_40_35_ladder;
        }
        float _2870;
        if (_2217 > 0.0)
        {
            _2870 = abs((1.0 - _2208) / _2217);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2217 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2208 + 1.0) / _2217);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2870 = frontier_phi_49_46_ladder;
        }
        float _2872 = isnan(_2657) ? _2378 : (isnan(_2378) ? _2657 : min(_2378, _2657));
        float _2873 = isnan(_2870) ? _2872 : (isnan(_2872) ? _2870 : min(_2872, _2870));
        float _2877 = (_2873 * _2211) + _2200;
        float _2878 = (_2873 * _2214) + _2204;
        float _2879 = (_2873 * _2217) + _2208;
        float _2880 = _2873 * 9.9999997473787516355514526367188e-05;
        float _2881 = (-1.0) - _2880;
        float _2883 = _2880 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2879 > _2883) || ((_2879 < _2881) || ((_2878 > _2883) || ((_2878 < _2881) || ((_2877 < _2881) || (_2877 > _2883))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3078 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2879, cbModelParam._m0[17u].z, fma(_2878, cbModelParam._m0[17u].y, _2877 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2879, cbModelParam._m0[18u].z, fma(_2878, cbModelParam._m0[18u].y, _2877 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2879, cbModelParam._m0[19u].z, fma(_2878, cbModelParam._m0[19u].y, _2877 * cbModelParam._m0[19u].x))), _2147);
            frontier_phi_25_49_ladder = _3078.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3078.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3078.x * cbModelParam._m0[1u].z;
        }
        _2236 = frontier_phi_25_49_ladder_2;
        _2238 = frontier_phi_25_49_ladder_1;
        _2240 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2220 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1217, _1218, _1219), _2147);
        _2236 = _2220.x * cbModelParam._m0[1u].z;
        _2238 = _2220.y * cbModelParam._m0[1u].z;
        _2240 = _2220.z * cbModelParam._m0[1u].z;
    }
    float _2253 = (((_1244 * _1193) + _1245) * _1209) * ((cbModelParam._m0[1u].w * (_2236 - _2138)) + _2138);
    float _2255 = (((_1244 * _1195) + _1245) * _1209) * ((cbModelParam._m0[1u].w * (_2238 - _2140)) + _2140);
    float _2257 = (((_1244 * _1196) + _1245) * _1209) * ((cbModelParam._m0[1u].w * (_2240 - _2142)) + _2142);
    float _2260 = fma(_2257, cbSceneParam._m0[89u].z, fma(_2255, cbSceneParam._m0[89u].y, _2253 * cbSceneParam._m0[89u].x));
    float _2263 = fma(_2257, cbSceneParam._m0[90u].z, fma(_2255, cbSceneParam._m0[90u].y, _2253 * cbSceneParam._m0[90u].x));
    float _2266 = fma(_2257, cbSceneParam._m0[91u].z, fma(_2255, cbSceneParam._m0[91u].y, _2253 * cbSceneParam._m0[91u].x));
    vec4 _2274 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1131, _1132));
    float _2276 = _2274.w;
    float _2288 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2276);
    float _2289 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2276);
    float _2290 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2276);
    uvec4 _2294 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2296 = _2294.x * 14u;
    uint _2297 = _2296 + 13u;
    float _2304 = _1209 + (-1.0);
    float _2309 = (cbLight._m0[_2297].x * _2304) + 1.0;
    float _2310 = (cbLight._m0[_2297].y * _2304) + 1.0;
    float _2311 = (cbLight._m0[_2297].z * _2304) + 1.0;
    float _2312 = (cbLight._m0[_2297].w * _2304) + 1.0;
    uint _2313 = _2296 + 5u;
    float _2319 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2323 = _2296 + 4u;
    float _2332 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2336 = _2296 | 1u;
    float _2347 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_1032, _1033, _1034));
    float _2350 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_1032, _1033, _1034));
    float _4624 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _4635 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2357 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2364 = ((cbLight._m0[_2313].x * _2319) * _2357) + (((cbLight._m0[_2323].x * _2288) * _2332) * _2355);
    float _2365 = ((_2319 * cbLight._m0[_2313].y) * _2357) + (((cbLight._m0[_2323].y * _2289) * _2332) * _2355);
    float _2366 = ((_2319 * cbLight._m0[_2313].z) * _2357) + (((cbLight._m0[_2323].z * _2290) * _2332) * _2355);
    uvec4 _2370 = floatBitsToUint(cbLight._m0[_2296 + 12u]);
    bool _2372 = _2370.x == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2372)
    {
        _2383 = _2364;
        _2385 = _2365;
        _2387 = _2366;
    }
    else
    {
        uint _2391 = _2296 + 6u;
        float _2407 = (dot(vec3(cbLight._m0[_2296 + 2u].xyz), vec3(_1032, _1033, _1034)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4646 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2410 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2383 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2364;
        _2385 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2365;
        _2387 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2366;
    }
    bool _2390 = _2370.y == 0u;
    float _2428;
    float _2430;
    float _2432;
    if (_2390)
    {
        _2428 = _2383;
        _2430 = _2385;
        _2432 = _2387;
    }
    else
    {
        uint _2601 = _2296 + 7u;
        float _2617 = (dot(vec3(cbLight._m0[_2296 + 3u].xyz), vec3(_1032, _1033, _1034)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4662 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2620 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2428 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2383;
        _2430 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2385;
        _2432 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2387;
    }
    uint _2435 = _2296 + 8u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _1035) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2296].x + _1111;
    float _2451 = cbLight._m0[_2296].y + _1112;
    float _2452 = cbLight._m0[_2296].z + _1113;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2296].xyz));
    float _4678 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _4689 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _2464 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2465 = dot(vec3(_1032, _1033, _1034), vec3(_2457, _2458, _2459));
    float _4700 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2457, _2458, _2459));
    float _4711 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2449 * _2449;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
    float _2486 = 0.959999978542327880859375 - _1190;
    float _2488 = 0.959999978542327880859375 - _1191;
    float _2489 = 0.959999978542327880859375 - _1192;
    float _2496 = 1.0 - _2449;
    float _2507 = (0.5 / (((_2464 * ((_2463 * _2496) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2496) + _2449) * _2463))) * _2463;
    float _4722 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    uint _2523 = _2296 + 9u;
    float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _1035) * 0.949999988079071044921875);
    float _2535 = _2534 * _2534;
    float _2536 = cbLight._m0[_2336].x + _1111;
    float _2537 = cbLight._m0[_2336].y + _1112;
    float _2538 = cbLight._m0[_2336].z + _1113;
    float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
    float _2543 = _2542 * _2536;
    float _2544 = _2542 * _2537;
    float _2545 = _2542 * _2538;
    float _2546 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2336].xyz));
    float _4733 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2550 = dot(vec3(_1032, _1033, _1034), vec3(_2543, _2544, _2545));
    float _4744 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2554 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2543, _2544, _2545));
    float _4755 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2558 = _2535 * _2535;
    float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
    float _2576 = 1.0 - _2535;
    float _2586 = (0.5 / (((_2464 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2576) + _2535) * _2549))) * _2549;
    float _4766 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
    float _2598 = (((((_2569 * _2486) + _1193) * cbLight._m0[_2523].x) * _2588) * _2319) + ((((cbLight._m0[_2435].x * _2288) * ((_2485 * _2486) + _1193)) * _2509) * _2332);
    float _2599 = (((((_2569 * _2488) + _1195) * cbLight._m0[_2523].y) * _2588) * _2319) + ((((cbLight._m0[_2435].y * _2289) * ((_2485 * _2488) + _1195)) * _2509) * _2332);
    float _2600 = (((((_2569 * _2489) + _1196) * cbLight._m0[_2523].z) * _2588) * _2319) + ((((cbLight._m0[_2435].z * _2290) * ((_2485 * _2489) + _1196)) * _2509) * _2332);
    float _2662;
    float _2664;
    float _2666;
    if (_2372)
    {
        _2662 = _2598;
        _2664 = _2599;
        _2666 = _2600;
    }
    else
    {
        uint _2668 = _2296 + 2u;
        uint _2672 = _2296 + 10u;
        float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2668].w)) * _1035) * 0.949999988079071044921875);
        float _2687 = _2686 * _2686;
        float _2688 = cbLight._m0[_2668].x + _1111;
        float _2689 = cbLight._m0[_2668].y + _1112;
        float _2690 = cbLight._m0[_2668].z + _1113;
        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
        float _2695 = _2694 * _2688;
        float _2696 = _2694 * _2689;
        float _2697 = _2694 * _2690;
        float _2698 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2668].xyz));
        float _4777 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2702 = dot(vec3(_1032, _1033, _1034), vec3(_2695, _2696, _2697));
        float _4788 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2706 = dot(vec3(cbLight._m0[_2668].xyz), vec3(_2695, _2696, _2697));
        float _4799 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2710 = _2687 * _2687;
        float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
        float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
        float _2728 = 1.0 - _2687;
        float _2738 = (0.5 / (((_2464 * ((_2701 * _2728) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2728) + _2687) * _2701))) * _2701;
        float _4810 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2740 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
        float _2741 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2662 = (((((_2721 * _2486) + _1193) * cbLight._m0[_2672].x) * _2740) * _2741) + _2598;
        _2664 = (((((_2721 * _2488) + _1195) * cbLight._m0[_2672].y) * _2740) * _2741) + _2599;
        _2666 = (((((_2721 * _2489) + _1196) * cbLight._m0[_2672].z) * _2740) * _2741) + _2600;
    }
    float _2776;
    float _2778;
    float _2780;
    if (_2390)
    {
        _2776 = _2662;
        _2778 = _2664;
        _2780 = _2666;
    }
    else
    {
        uint _2787 = _2296 + 3u;
        uint _2791 = _2296 + 11u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _1035) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _1111;
        float _2808 = cbLight._m0[_2787].y + _1112;
        float _2809 = cbLight._m0[_2787].z + _1113;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2787].xyz));
        float _4826 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2821 = dot(vec3(_1032, _1033, _1034), vec3(_2814, _2815, _2816));
        float _4837 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4848 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
        float _2847 = 1.0 - _2806;
        float _2857 = (0.5 / (((_2464 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2847) + _2806) * _2820))) * _2820;
        float _4859 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2776 = (((((_2840 * _2486) + _1193) * cbLight._m0[_2791].x) * _2859) * _2860) + _2662;
        _2778 = (((((_2840 * _2488) + _1195) * cbLight._m0[_2791].y) * _2859) * _2860) + _2664;
        _2780 = (((((_2840 * _2489) + _1196) * cbLight._m0[_2791].z) * _2859) * _2860) + _2666;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2294.y == 0u)
    {
        float _2935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2935;
        float _2937 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2935;
        float _2938 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2935;
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.x;
        uint _2962 = uint((float(_2950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1132) / _2951))) + floor(float(uint(cbSceneParam._m0[85u].x * _1131) / _2951)));
        float _2972 = (log2(_2938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2973 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        uint _2976 = uint(isnan(14.0) ? _2973 : (isnan(_2973) ? 14.0 : min(_2973, 14.0)));
        uvec4 _2981 = texelFetch(g_lightClusterGridBuffer, int(((_2976 << 2u) + (_2962 << 6u)) >> 2u));
        uint _2982 = _2981.x;
        uint _2983 = _2950.z;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((((1u << ((_2983 >> 4u) & 15u)) + 4294967295u) & _2982) == 0u) || ((_2983 & 240u) == 0u))
        {
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
        }
        else
        {
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            uint _3242 = 0u;
            uint _3251;
            bool _3252;
            for (;;)
            {
                _3251 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                _3252 = _3251 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3252)
                {
                    frontier_phi_66_pred = _3236;
                    frontier_phi_66_pred_1 = _3241;
                    frontier_phi_66_pred_2 = _3240;
                    frontier_phi_66_pred_3 = _3239;
                    frontier_phi_66_pred_4 = _3238;
                    frontier_phi_66_pred_5 = _3237;
                }
                else
                {
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    uint _3387;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3251;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    for (;;)
                    {
                        uint _3391 = uint(findLSB(_3387)) + (_3242 << 5u);
                        uint _3388 = (_3387 + 4294967295u) & _3387;
                        uint _3393 = _3391 * 48u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 3u)).x));
                        uint _3413 = (_3391 * 48u) + 4u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3432 = (_3391 * 48u) + 8u;
                        vec3 _3443 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x));
                        float _3447 = _3407.x - _2936;
                        float _3448 = _3407.y - _2937;
                        float _3449 = _3407.z - _2938;
                        float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                        float _3453 = inversesqrt(_3450);
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3457 = dot(vec3(_1150, _1153, _1156), vec3(_3454, _3455, _3456));
                        float _3462 = 1.0 - (_3450 * _3407.w);
                        float _4885 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3464 = sqrt(_3450) * _3426.w;
                        float _3467 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3457) + _3468;
                        float _3474 = _3464 * _3464;
                        float _3478 = ((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3463) / ((_3474 * 0.699999988079071044921875) + 1.0);
                        float _3482 = (-0.0) - _2936;
                        float _3483 = (-0.0) - _2937;
                        float _3484 = (-0.0) - _2938;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3489 = _3488 * _3482;
                        float _3490 = _3488 * _3483;
                        float _3491 = _3488 * _3484;
                        float _3499 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                        float _3500 = 1.0 - _1225;
                        float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                        float _3508 = _3507 * _3507;
                        float _3509 = _3508 * _3508;
                        float _3510 = _3489 + _3454;
                        float _3511 = _3490 + _3455;
                        float _3512 = _3491 + _3456;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3520 = dot(vec3(_1150, _1153, _1156), vec3(_3489, _3490, _3491));
                        float _4901 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3523 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3524 = dot(vec3(_1150, _1153, _1156), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                        float _4912 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                        float _3532 = _3467 * _3508;
                        float _3533 = _3532 * _3532;
                        float _3536 = ((1.0 - _3533) * _3457) + _3533;
                        float _4923 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3538 = 1.0 - _3508;
                        float _3548 = (0.5 / (((_3537 * ((_3523 * _3538) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3508) * _3523))) * _3537;
                        float _4934 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3559 = (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3531 * _3531) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125))) * _3463;
                        _3311 = (_3478 * _3426.x) + _3384;
                        _3312 = (_3478 * _3426.y) + _3385;
                        _3313 = (_3478 * _3426.z) + _3386;
                        _3308 = (_3559 * _3443.x) + _3381;
                        _3309 = (_3559 * _3443.y) + _3382;
                        _3310 = (_3559 * _3443.z) + _3383;
                        if (_3388 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3388;
                        }
                    }
                    frontier_phi_66_pred = _3308;
                    frontier_phi_66_pred_1 = _3313;
                    frontier_phi_66_pred_2 = _3312;
                    frontier_phi_66_pred_3 = _3311;
                    frontier_phi_66_pred_4 = _3310;
                    frontier_phi_66_pred_5 = _3309;
                }
                _3084 = frontier_phi_66_pred;
                _3094 = frontier_phi_66_pred_1;
                _3092 = frontier_phi_66_pred_2;
                _3090 = frontier_phi_66_pred_3;
                _3088 = frontier_phi_66_pred_4;
                _3086 = frontier_phi_66_pred_5;
                uint _3243 = _3242 + 1u;
                if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3236 = _3084;
                    _3237 = _3086;
                    _3238 = _3088;
                    _3239 = _3090;
                    _3240 = _3092;
                    _3241 = _3094;
                    _3242 = _3243;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
        }
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.z;
        uint _3100 = (_3098 >> 8u) & 15u;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        if (((4294967295u << _3100) & _2982) == 0u)
        {
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
        }
        else
        {
            float _3229 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
            float _3230 = _3229 * _2936;
            float _3231 = _3229 * _2937;
            float _3232 = _3229 * _2938;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3100 < ((_3098 >> 12u) & 15u))
            {
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3364 = _3083;
                float _3365 = _3085;
                float _3366 = _3087;
                float _3367 = _3089;
                float _3368 = _3091;
                float _3369 = _3093;
                uint _3370 = _3100;
                uint _3379;
                bool _3380;
                for (;;)
                {
                    _3379 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3370 << 2u)) >> 2u)).x;
                    _3380 = _3379 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3380)
                    {
                        frontier_phi_77_pred = _3369;
                        frontier_phi_77_pred_1 = _3368;
                        frontier_phi_77_pred_2 = _3367;
                        frontier_phi_77_pred_3 = _3366;
                        frontier_phi_77_pred_4 = _3365;
                        frontier_phi_77_pred_5 = _3364;
                    }
                    else
                    {
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3586 = _3364;
                        float _3587 = _3365;
                        float _3588 = _3366;
                        float _3589 = _3367;
                        float _3590 = _3368;
                        float _3591 = _3369;
                        uint _3592 = _3379;
                        uint _3593;
                        vec4 _3618;
                        float _3619;
                        vec4 _3634;
                        vec3 _3646;
                        vec4 _3661;
                        vec4 _3676;
                        float _3722;
                        bool _3723;
                        for (;;)
                        {
                            uint _3603 = ((_3370 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3592));
                            _3593 = (_3592 + 4294967295u) & _3592;
                            uint _3605 = _3603 * 40u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            _3619 = _3618.w;
                            uint _3621 = (_3603 * 40u) + 4u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3603 * 40u) + 8u;
                            _3646 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x));
                            uint _3648 = (_3603 * 40u) + 16u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3603 * 40u) + 20u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3603 * 40u) + 24u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3697 = (_3603 * 40u) + 28u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3722 = fma(_2938, _3710.z, fma(_2937, _3710.y, _3710.x * _2936)) + _3710.w;
                            _3723 = !((fma(_2938, _3691.z, fma(_2937, _3691.y, _3691.x * _2936)) + _3691.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3723)
                            {
                                float _3750 = _3618.x - _2936;
                                float _3751 = _3618.y - _2937;
                                float _3752 = _3618.z - _2938;
                                float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                                float _3756 = inversesqrt(_3753);
                                float _3757 = _3756 * _3750;
                                float _3758 = _3756 * _3751;
                                float _3759 = _3756 * _3752;
                                float _3763 = 1.0 - (_3753 / (_3619 * _3619));
                                float _4945 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3768 = sqrt(_3753) * _3634.w;
                                float _3770 = 1.39999997615814208984375 / (_3768 + 1.39999997615814208984375);
                                float _3771 = _3770 * _3770;
                                float _3774 = ((1.0 - _3771) * dot(vec3(_3757, _3758, _3759), vec3(_1150, _1153, _1156))) + _3771;
                                float _3777 = _3768 * _3768;
                                float _3781 = (fma(_2938, _3661.z, fma(_2937, _3661.y, _3661.x * _2936)) + _3661.w) / _3722;
                                float _3782 = (fma(_2938, _3676.z, fma(_2937, _3676.y, _3676.x * _2936)) + _3676.w) / _3722;
                                float _3786 = 1.0 - dot(vec2(_3781, _3782), vec2(_3781, _3782));
                                float _4961 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3788 = _3787 * (((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3764) / ((_3777 * 0.699999988079071044921875) + 1.0));
                                float _3800 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                                float _3801 = 1.0 - _1225;
                                float _3808 = sqrt(1.0 - ((1.0 - (_3801 * _3801)) * (1.0 - (_3800 * _3800))));
                                float _3809 = _3808 * _3808;
                                float _3810 = _3809 * _3809;
                                float _3811 = _3757 - _3230;
                                float _3812 = _3758 - _3231;
                                float _3813 = _3759 - _3232;
                                float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                                float _3821 = dot(vec3(_1150, _1153, _1156), vec3((-0.0) - _3230, (-0.0) - _3231, (-0.0) - _3232));
                                float _4972 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3825 = dot(vec3(_1150, _1153, _1156), vec3(_3817 * _3811, _3817 * _3812, _3817 * _3813));
                                float _4983 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3832 = ((_3828 * _3828) * (_3810 + (-1.0))) + 1.0;
                                float _3833 = _3770 * _3809;
                                float _3834 = _3833 * _3833;
                                float _3840 = ((1.0 - _3834) * dot(vec3(_1150, _1153, _1156), vec3(_3757, _3758, _3759))) + _3834;
                                float _4994 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3842 = 1.0 - _3809;
                                float _3852 = (0.5 / (((_3841 * ((_3824 * _3842) + _3809)) + 9.9999999392252902907785028219223e-09) + (((_3841 * _3842) + _3809) * _3824))) * _3841;
                                float _5005 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3862 = (_3787 * _3764) * (((_3810 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3832 * _3832) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3788 * _3634.y;
                                frontier_phi_83_pred_1 = _3788 * _3634.x;
                                frontier_phi_83_pred_2 = _3862 * _3646.z;
                                frontier_phi_83_pred_3 = _3862 * _3646.y;
                                frontier_phi_83_pred_4 = _3862 * _3646.x;
                                frontier_phi_83_pred_5 = _3788 * _3634.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3870 = frontier_phi_83_pred;
                            _3869 = frontier_phi_83_pred_1;
                            _3868 = frontier_phi_83_pred_2;
                            _3867 = frontier_phi_83_pred_3;
                            _3866 = frontier_phi_83_pred_4;
                            _3871 = frontier_phi_83_pred_5;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            if (_3593 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3593;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3578;
                        frontier_phi_77_pred_1 = _3577;
                        frontier_phi_77_pred_2 = _3576;
                        frontier_phi_77_pred_3 = _3575;
                        frontier_phi_77_pred_4 = _3574;
                        frontier_phi_77_pred_5 = _3573;
                    }
                    _3215 = frontier_phi_77_pred;
                    _3213 = frontier_phi_77_pred_1;
                    _3211 = frontier_phi_77_pred_2;
                    _3209 = frontier_phi_77_pred_3;
                    _3207 = frontier_phi_77_pred_4;
                    _3205 = frontier_phi_77_pred_5;
                    uint _3371 = _3370 + 1u;
                    if (_3371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3364 = _3205;
                        _3365 = _3207;
                        _3366 = _3209;
                        _3367 = _3211;
                        _3368 = _3213;
                        _3369 = _3215;
                        _3370 = _3371;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3209;
                frontier_phi_58_59_ladder_1 = _3215;
                frontier_phi_58_59_ladder_2 = _3213;
                frontier_phi_58_59_ladder_3 = _3211;
                frontier_phi_58_59_ladder_4 = _3207;
                frontier_phi_58_59_ladder_5 = _3205;
            }
            else
            {
                frontier_phi_58_59_ladder = _3087;
                frontier_phi_58_59_ladder_1 = _3093;
                frontier_phi_58_59_ladder_2 = _3091;
                frontier_phi_58_59_ladder_3 = _3089;
                frontier_phi_58_59_ladder_4 = _3085;
                frontier_phi_58_59_ladder_5 = _3083;
            }
            _3204 = frontier_phi_58_59_ladder_5;
            _3206 = frontier_phi_58_59_ladder_4;
            _3208 = frontier_phi_58_59_ladder;
            _3210 = frontier_phi_58_59_ladder_3;
            _3212 = frontier_phi_58_59_ladder_2;
            _3214 = frontier_phi_58_59_ladder_1;
        }
        float _3219 = isnan(1.0) ? _1209 : (isnan(_1209) ? 1.0 : min(_1209, 1.0));
        _2995 = (_3219 * _3210) + _2428;
        _2997 = (_3219 * _3212) + _2430;
        _2999 = (_3219 * _3214) + _2432;
        _3001 = ((_3204 * _1193) * _3219) + _2776;
        _3003 = ((_3206 * _1195) * _3219) + _2778;
        _3005 = ((_3208 * _1196) * _3219) + _2780;
    }
    else
    {
        _2995 = _2428;
        _2997 = _2430;
        _2999 = _2432;
        _3001 = _2776;
        _3003 = _2778;
        _3005 = _2780;
    }
    float _5021 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _5032 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _5043 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _3022 = ((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2995 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1209))) + ((_3001 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2047)) * cbPerFrame._m0[3u].x);
    float _3023 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2997 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1209))) + ((_3003 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2047)) * cbPerFrame._m0[3u].x);
    float _3024 = ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_2999 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1209))) + ((_3005 + ((isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))) * _2047)) * cbPerFrame._m0[3u].x);
    uint _3025 = _290 + 6u;
    float _3033 = _1131 / cbSceneParam._m0[86u].x;
    float _3034 = _1132 / cbSceneParam._m0[86u].y;
    vec4 _3048 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, (log2((isnan(cbSceneParam._m0[77u].w) ? _1054 : (isnan(_1054) ? cbSceneParam._m0[77u].w : min(_1054, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3050 = _3048.x;
    float _3051 = _3048.y;
    float _3052 = _3048.z;
    float _3053 = _3048.w;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_1054 > cbSceneParam._m0[78u].w)
    {
        float _3108 = isnan(_1054) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1054 : min(cbSceneParam._m0[80u].w, _1054));
        float _3109 = _3108 / _1054;
        float _3120 = _3109 * _1104;
        float _3121 = _1105 * _3109;
        float _3122 = (-0.0) - _3121;
        float _3124 = _3109 * _1106;
        float _3126 = (cbSceneParam._m0[77u].w * _3122) / _3108;
        float _3127 = _3126 + cbSceneParam._m0[79u].w;
        float _3128 = cbSceneParam._m0[79u].w - _3121;
        float _3134 = sqrt(((_3120 * _3120) + (_3121 * _3121)) + (_3124 * _3124));
        float _3137 = (1.0 - (cbSceneParam._m0[77u].w / _3108)) * _3134;
        float _3142 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3144 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3321;
        if (abs((_3122 - _3126) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3321 = ((((_3127 > 0.0) ? exp2(_3142 * _3127) : (2.0 - exp2(_3144 * _3127))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3137;
        }
        else
        {
            float _3265 = 1.0 / cbSceneParam._m0[80u].x;
            float _3266 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : max(_3127, _3128));
            float _3267 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : min(_3127, _3128));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            _3321 = ((abs(_3134 / _3122) * cbSceneParam._m0[80u].y) * ((((_3276 - _3277) * 2.0) - ((exp2(_3142 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0)))) - exp2(_3142 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))))) * _3265)) - ((exp2(_3144 * _3276) - exp2(_3144 * _3277)) * _3265))) + (_3137 * cbSceneParam._m0[80u].z);
        }
        vec4 _3323 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, 1.0), 0.0);
        float _3332 = exp2((_3321 * (-1.44269502162933349609375)) * (1.0 - _3323.w));
        float _3333 = log2(_3332);
        float _3349 = log2(_3053);
        _3146 = (exp2(_3349 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].x)) * _3323.x) / cbSceneParam._m0[78u].x)) + _3050;
        _3148 = (exp2(_3349 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].y)) * _3323.y) / cbSceneParam._m0[78u].y)) + _3051;
        _3150 = (exp2(_3349 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].z)) * _3323.z) / cbSceneParam._m0[78u].z)) + _3052;
        _3152 = _3332 * _3053;
    }
    else
    {
        _3146 = _3050;
        _3148 = _3051;
        _3150 = _3052;
        _3152 = _3053;
    }
    bool _3359;
    vec4 _3162;
    vec4 _3184;
    float _3186;
    float _3190;
    float _3191;
    float _3192;
    float _3193;
    bool _3203;
    for (;;)
    {
        _3162 = cbMatDynParam._m0[0u];
        float _3164 = roundEven(_3162.y);
        bool _3165 = _3164 == 3.0;
        float _3166 = log2(_3152);
        float _3173 = exp2(_3166 * cbSceneParam._m0[78u].x) * _3022;
        float _3174 = exp2(_3166 * cbSceneParam._m0[78u].y) * _3023;
        float _3175 = exp2(_3166 * cbSceneParam._m0[78u].z) * _3024;
        float _3182 = _1120 + (-0.5);
        _3184 = cbMtdParam._m0[1u];
        _3186 = _3184.y * _3182;
        float _3189 = (_3164 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3190 = _3189 * (_3165 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3146)));
        _3191 = _3189 * (_3165 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3148)));
        _3192 = _3189 * (_3165 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3150)));
        _3193 = _3182 * 0.999000012874603271484375;
        _3203 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3203)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3193) < 0.5)
            {
                _3359 = true;
                break;
            }
        }
        uint _3300 = _1169 + uint(_3162.w);
        if ((cbInstanceData._m0[_3300].w < 1.0) && ((cbInstanceData._m0[_3300].w + _3193) < 0.5))
        {
            _3359 = true;
            break;
        }
        if ((_3186 + 1.0) < _3184.x)
        {
            _3359 = true;
            break;
        }
        _3359 = false;
        break;
    }
    float _3564;
    if (_3359)
    {
        discard_state = true;
        _3564 = 0.0;
    }
    else
    {
        _3564 = cbInstanceData._m0[_3025].w;
    }
    SV_Target.x = _3190;
    SV_Target.y = _3191;
    SV_Target.z = _3192;
    SV_Target.w = _3564;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3025].w;
    discard_exit();
}


