#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1224;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3835 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _430 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_417 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311);
    float _433 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_417 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312);
    float _436 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_417 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313);
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = ((_454.z - _475) * _417) + _475;
    float _487 = ((((_454.x - _473) * _417) + _473) * 2.0) + (-1.0);
    float _489 = ((((_454.y - _474) * _417) + _474) * 2.0) + (-1.0);
    float _490 = dot(vec2(_487, _489), vec2(_487, _489));
    float _3846 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _555 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_538 - _539) * cbMtdParam._m0[24u].z) + _539) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3857 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _563 = (_556 * (cbMtdParam._m0[17u].x - _430)) + _430;
    float _564 = (_556 * (cbMtdParam._m0[17u].y - _433)) + _433;
    float _565 = (_556 * (cbMtdParam._m0[17u].z - _436)) + _436;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _593 = _591.x;
    float _610 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _593) * _417) + _593;
    float _614 = ((_577.x - _610) * cbMtdParam._m0[19u].z) + _610;
    float _616 = _614 - (_614 * _556);
    float _620 = (cbMtdParam._m0[19u].w * (_511.z - _484)) + _484;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _640 = (_633.x * 2.0) + (-1.0);
    float _641 = (_633.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3868 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _650 = (_556 * (_633.z - _620)) + _620;
    float _653 = (((_511.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _487;
    float _654 = (((_511.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _666 = (((_640 - _653) + (cbMtdParam._m0[21u].x * _653)) * _556) + _653;
    float _667 = (((_641 - _654) + (cbMtdParam._m0[21u].x * _654)) * _556) + _654;
    float _668 = (_556 * (sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _495)) + _495;
    float _670 = cbMtdParam._m0[22u].x + _511.w;
    float _673 = fma(_668, _229 * NORMAL.x, fma(_667, _236 * TANGENT.x, (_222 * _214) * _666));
    float _676 = fma(_668, _229 * NORMAL.y, fma(_667, _236 * TANGENT.y, (_222 * _215) * _666));
    float _679 = fma(_668, _229 * NORMAL.z, fma(_667, _236 * TANGENT.z, (_222 * _216) * _666));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3879 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _687 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3901 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3912 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3923 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3934 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _692 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _706 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _791 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _794 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _797 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _811 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3945 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _823 = 1.0 - _692;
    float _824 = _820 * _823;
    float _825 = _821 * _823;
    float _826 = _822 * _823;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _692;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _692;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _692;
    float _834 = _831 + 0.039999999105930328369140625;
    float _836 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    vec4 _846 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _850 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _846.x;
    float _851 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _854 = _851 * 2.0;
    float _858 = (_854 * _684) - _764;
    float _859 = (_854 * _685) - _765;
    float _860 = (_854 * _686) - _766;
    float _864 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _3978 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _866 = sqrt(_687);
    float _879 = exp2((_866 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_866 * 3.0));
    float _885 = (1.0 - _879) * ((_866 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _886 = _879 * _866;
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1223;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _952 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _956 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _981 = _914 + _684;
        float _982 = _918 + _685;
        float _983 = _922 + _686;
        float _993 = fma(_983, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981)) - _948;
        float _994 = fma(_983, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981)) - _952;
        float _995 = fma(_983, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981)) - _956;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_948 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_952 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[34u].z) + ((((((_956 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1051 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1017.x + (-0.5));
        float _1053 = _1051 * (_1017.y + (-0.5));
        float _1054 = _1051 * (_1017.z + (-0.5));
        float _1061 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1024.x + (-0.5));
        float _1063 = _1061 * (_1024.y + (-0.5));
        float _1064 = _1061 * (_1024.z + (-0.5));
        float _1071 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1031.x + (-0.5));
        float _1073 = _1071 * (_1031.y + (-0.5));
        float _1074 = _1071 * (_1031.z + (-0.5));
        float _1081 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1038.x + (-0.5));
        float _1083 = _1081 * (_1038.y + (-0.5));
        float _1084 = _1081 * (_1038.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1105 = (dot(vec3(_684, _685, _686), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1115 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4026 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1117 + 1.0))) + _1122) * _1085;
        float _1132 = _1053 * 0.5;
        float _1133 = _1063 * 0.5;
        float _1134 = _1073 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_684, _685, _686), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _4059 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1159 + 1.0))) + _1164) * _1086;
        float _1174 = _1054 * 0.5;
        float _1175 = _1064 * 0.5;
        float _1176 = _1074 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_684, _685, _686), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _4092 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1201 + 1.0))) + _1206) * _1087;
        _1223 = _1054;
        _1225 = _1053;
        _1226 = _1052;
        _1227 = _1064;
        _1228 = _1063;
        _1229 = _1062;
        _1230 = _1074;
        _1231 = _1073;
        _1232 = _1072;
        _1233 = _1087;
        _1234 = _1086;
        _1235 = _1085;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _1224;
        _1225 = _1224;
        _1226 = _1224;
        _1227 = _1224;
        _1228 = _1224;
        _1229 = _1224;
        _1230 = _1224;
        _1231 = _1224;
        _1232 = _1224;
        _1233 = _1224;
        _1234 = _1224;
        _1235 = _1224;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1267 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1271 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1294 = _914 + _684;
        float _1295 = _918 + _685;
        float _1296 = _922 + _686;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_684, _685, _686), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4155 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_684, _685, _686), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4188 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_684, _685, _686), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4221 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1224;
        _1533 = _1224;
        _1534 = _1224;
        _1535 = _1224;
        _1536 = _1224;
        _1537 = _1224;
        _1538 = _1224;
        _1539 = _1224;
        _1540 = _1224;
        _1541 = _1224;
        _1542 = _1224;
        _1543 = _1224;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1236)) + _1236;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _858 * 0.5;
    float _1601 = _859 * 0.5;
    float _1602 = _860 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1223, _1227, _1230, _1233));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_860, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858));
        float _1731 = fma(_860, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858));
        float _1734 = fma(_860, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1762 = frontier_phi_14_12_ladder;
        }
        float _1934;
        if (_1731 > 0.0)
        {
            _1934 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1934 = frontier_phi_23_19_ladder;
        }
        float _2229;
        if (_1734 > 0.0)
        {
            _2229 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2229 = frontier_phi_35_30_ladder;
        }
        float _2231 = isnan(_1934) ? _1762 : (isnan(_1762) ? _1934 : min(_1762, _1934));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1728) + _1717;
        float _2237 = (_2232 * _1731) + _1721;
        float _2238 = (_2232 * _1734) + _1725;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2239;
        float _2243 = _2239 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 > _2243) || ((_2237 < _2241) || ((_2236 < _2241) || (_2236 > _2243))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_13_35_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_13_35_ladder_2;
        _1752 = frontier_phi_13_35_ladder_1;
        _1754 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_858, _859, _860), _1669);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_860, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858));
        float _1827 = fma(_860, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858));
        float _1830 = fma(_860, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858));
        float _1939;
        if (_1824 > 0.0)
        {
            _1939 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1939 = frontier_phi_25_21_ladder;
        }
        float _2256;
        if (_1827 > 0.0)
        {
            _2256 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2256 = frontier_phi_37_32_ladder;
        }
        float _2594;
        if (_1830 > 0.0)
        {
            _2594 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2594 = frontier_phi_47_44_ladder;
        }
        float _2596 = isnan(_2256) ? _1939 : (isnan(_1939) ? _2256 : min(_1939, _2256));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1824) + _1813;
        float _2602 = (_2597 * _1827) + _1817;
        float _2603 = (_2597 * _1830) + _1821;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_22_47_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_22_47_ladder_2;
        _1851 = frontier_phi_22_47_ladder_1;
        _1853 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_858, _859, _860), _1759);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1866 = (((_885 * _834) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1868 = (((_885 * _836) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1870 = (((_885 * _837) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1926 = _1913 / _1925;
    float _1927 = _1917 / _1925;
    float _1928 = _1921 / _1925;
    float _2075;
    float _2076;
    float _2077;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1955 = ((uint(_1928 > cbSceneParam._m0[59u].y) + uint(_1928 > cbSceneParam._m0[59u].x)) + uint(_1928 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1956 = _1955 + 43u;
        uint _1964 = _1955 + 44u;
        uint _1972 = _1955 + 45u;
        uint _1980 = _1955 + 46u;
        float _1991 = fma(_1925, cbSceneParam._m0[_1956].w, fma(_1921, cbSceneParam._m0[_1956].z, fma(_1917, cbSceneParam._m0[_1956].y, _1913 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1925, cbSceneParam._m0[_1964].w, fma(_1921, cbSceneParam._m0[_1964].z, fma(_1917, cbSceneParam._m0[_1964].y, _1913 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1925, cbSceneParam._m0[_1980].w, fma(_1921, cbSceneParam._m0[_1980].z, fma(_1917, cbSceneParam._m0[_1980].y, _1913 * cbSceneParam._m0[_1980].x)));
        float _2008 = cbSceneParam._m0[33u].z * _2003;
        float _2010 = cbSceneParam._m0[33u].w * _2003;
        float _2013 = fma(_1925, cbSceneParam._m0[_1972].w, fma(_1921, cbSceneParam._m0[_1972].z, fma(_1917, cbSceneParam._m0[_1972].y, _1913 * cbSceneParam._m0[_1972].x))) / _2003;
        float _2061 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
        float _4347 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2068 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1991) / _2003, (_2010 + _1995) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1991) / _2003, (_1995 - _2008) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2008) / _2003, (_1995 - _2010) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2010) / _2003, (_2008 + _1995) / _2003), _2013), 0.0)).x), vec4(0.25)));
        _2075 = 1.0 - (_2068 * cbSceneParam._m0[34u].x);
        _2076 = 1.0 - (_2068 * cbSceneParam._m0[34u].y);
        _2077 = 1.0 - (_2068 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2075 = 1.0;
        _2076 = 1.0;
        _2077 = 1.0;
    }
    float _2141;
    float _2143;
    float _2145;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2129 = fma(_1925, cbSceneParam._m0[63u].w, fma(_1921, cbSceneParam._m0[63u].z, fma(_1917, cbSceneParam._m0[63u].y, _1913 * cbSceneParam._m0[63u].x)));
        float _2130 = fma(_1925, cbSceneParam._m0[60u].w, fma(_1921, cbSceneParam._m0[60u].z, fma(_1917, cbSceneParam._m0[60u].y, _1913 * cbSceneParam._m0[60u].x))) / _2129;
        float _2131 = fma(_1925, cbSceneParam._m0[61u].w, fma(_1921, cbSceneParam._m0[61u].z, fma(_1917, cbSceneParam._m0[61u].y, _1913 * cbSceneParam._m0[61u].x))) / _2129;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2130 >= cbSceneParam._m0[64u].x) && (_2131 >= cbSceneParam._m0[64u].y)) && (_2130 <= cbSceneParam._m0[64u].z)) && (_2131 <= cbSceneParam._m0[64u].w))
        {
            float _2269 = fma(_1925, cbSceneParam._m0[62u].w, fma(_1921, cbSceneParam._m0[62u].z, fma(_1917, cbSceneParam._m0[62u].y, _1913 * cbSceneParam._m0[62u].x))) / _2129;
            float _2273 = isnan(cbSceneParam._m0[41u].w) ? _2269 : (isnan(_2269) ? cbSceneParam._m0[41u].w : max(_2269, cbSceneParam._m0[41u].w));
            float _2316 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
            float _4363 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
            float _2323 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2130, cbSceneParam._m0[33u].w + _2131), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2130, _2131 - cbSceneParam._m0[33u].z), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].z, _2131 - cbSceneParam._m0[33u].w), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2131), _2273), 0.0)).x), vec4(0.25)));
            float _2327 = 1.0 - (_2323 * cbSceneParam._m0[34u].x);
            float _2328 = 1.0 - (_2323 * cbSceneParam._m0[34u].y);
            float _2329 = 1.0 - (_2323 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
            frontier_phi_34_33_ladder_1 = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
            frontier_phi_34_33_ladder_2 = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
        }
        else
        {
            frontier_phi_34_33_ladder = _2077;
            frontier_phi_34_33_ladder_1 = _2076;
            frontier_phi_34_33_ladder_2 = _2075;
        }
        _2141 = frontier_phi_34_33_ladder_2;
        _2143 = frontier_phi_34_33_ladder_1;
        _2145 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2141 = _2075;
        _2143 = _2076;
        _2145 = _2077;
    }
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _850 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2188 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2192 = _2152 | 1u;
    float _2203 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_684, _685, _686));
    float _2206 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_684, _685, _686));
    float _4399 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _4410 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2213 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2220 = ((cbLight._m0[_2169].x * _2175) * _2213) + (((cbLight._m0[_2179].x * _2141) * _2188) * _2211);
    float _2221 = ((_2175 * cbLight._m0[_2169].y) * _2213) + (((cbLight._m0[_2179].y * _2143) * _2188) * _2211);
    float _2222 = ((_2175 * cbLight._m0[_2169].z) * _2213) + (((cbLight._m0[_2179].z * _2145) * _2188) * _2211);
    uvec4 _2226 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2228 = _2226.x == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2228)
    {
        _2330 = _2220;
        _2332 = _2221;
        _2334 = _2222;
    }
    else
    {
        uint _2338 = _2152 + 6u;
        float _2354 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4421 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2357 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2330 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2220;
        _2332 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2221;
        _2334 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2222;
    }
    bool _2337 = _2226.y == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2337)
    {
        _2392 = _2330;
        _2394 = _2332;
        _2396 = _2334;
    }
    else
    {
        uint _2565 = _2152 + 7u;
        float _2581 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2582 = _2581 * _2581;
        float _4437 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2583 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2584 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2392 = (((cbLight._m0[_2565].x * 0.3183098733425140380859375) * _2583) * _2584) + _2330;
        _2394 = (((cbLight._m0[_2565].y * 0.3183098733425140380859375) * _2583) * _2584) + _2332;
        _2396 = (((cbLight._m0[_2565].z * 0.3183098733425140380859375) * _2583) * _2584) + _2334;
    }
    uint _2399 = _2152 + 8u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _687) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2152].x + _764;
    float _2415 = cbLight._m0[_2152].y + _765;
    float _2416 = cbLight._m0[_2152].z + _766;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2152].xyz));
    float _4453 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _4464 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _2428 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2429 = dot(vec3(_684, _685, _686), vec3(_2421, _2422, _2423));
    float _4475 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2421, _2422, _2423));
    float _4486 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2413 * _2413;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
    float _2450 = 0.959999978542327880859375 - _831;
    float _2452 = 0.959999978542327880859375 - _832;
    float _2453 = 0.959999978542327880859375 - _833;
    float _2460 = 1.0 - _2413;
    float _2471 = (0.5 / (((_2428 * ((_2427 * _2460) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2460) + _2413) * _2427))) * _2427;
    float _4497 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    uint _2487 = _2152 + 9u;
    float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _687) * 0.949999988079071044921875);
    float _2499 = _2498 * _2498;
    float _2500 = cbLight._m0[_2192].x + _764;
    float _2501 = cbLight._m0[_2192].y + _765;
    float _2502 = cbLight._m0[_2192].z + _766;
    float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
    float _2507 = _2506 * _2500;
    float _2508 = _2506 * _2501;
    float _2509 = _2506 * _2502;
    float _2510 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2192].xyz));
    float _4508 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2514 = dot(vec3(_684, _685, _686), vec3(_2507, _2508, _2509));
    float _4519 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2518 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2507, _2508, _2509));
    float _4530 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2522 = _2499 * _2499;
    float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
    float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
    float _2540 = 1.0 - _2499;
    float _2550 = (0.5 / (((_2428 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2540) + _2499) * _2513))) * _2513;
    float _4541 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
    float _2562 = (((((_2533 * _2450) + _834) * cbLight._m0[_2487].x) * _2552) * _2175) + ((((cbLight._m0[_2399].x * _2141) * ((_2449 * _2450) + _834)) * _2473) * _2188);
    float _2563 = (((((_2533 * _2452) + _836) * cbLight._m0[_2487].y) * _2552) * _2175) + ((((cbLight._m0[_2399].y * _2143) * ((_2449 * _2452) + _836)) * _2473) * _2188);
    float _2564 = (((((_2533 * _2453) + _837) * cbLight._m0[_2487].z) * _2552) * _2175) + ((((cbLight._m0[_2399].z * _2145) * ((_2449 * _2453) + _837)) * _2473) * _2188);
    float _2620;
    float _2622;
    float _2624;
    if (_2228)
    {
        _2620 = _2562;
        _2622 = _2563;
        _2624 = _2564;
    }
    else
    {
        uint _2626 = _2152 + 2u;
        uint _2630 = _2152 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _687) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _764;
        float _2647 = cbLight._m0[_2626].y + _765;
        float _2648 = cbLight._m0[_2626].z + _766;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2626].xyz));
        float _4552 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2660 = dot(vec3(_684, _685, _686), vec3(_2653, _2654, _2655));
        float _4563 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4574 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2428 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2686) + _2645) * _2659))) * _2659;
        float _4585 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2620 = (((((_2679 * _2450) + _834) * cbLight._m0[_2630].x) * _2698) * _2699) + _2562;
        _2622 = (((((_2679 * _2452) + _836) * cbLight._m0[_2630].y) * _2698) * _2699) + _2563;
        _2624 = (((((_2679 * _2453) + _837) * cbLight._m0[_2630].z) * _2698) * _2699) + _2564;
    }
    float _2730;
    float _2732;
    float _2734;
    if (_2337)
    {
        _2730 = _2620;
        _2732 = _2622;
        _2734 = _2624;
    }
    else
    {
        uint _2741 = _2152 + 3u;
        uint _2745 = _2152 + 11u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _687) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _764;
        float _2762 = cbLight._m0[_2741].y + _765;
        float _2763 = cbLight._m0[_2741].z + _766;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2741].xyz));
        float _4601 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2775 = dot(vec3(_684, _685, _686), vec3(_2768, _2769, _2770));
        float _4612 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4623 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
        float _2801 = 1.0 - _2760;
        float _2811 = (0.5 / (((_2428 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2801) + _2760) * _2774))) * _2774;
        float _4634 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2730 = (((((_2794 * _2450) + _834) * cbLight._m0[_2745].x) * _2813) * _2814) + _2620;
        _2732 = (((((_2794 * _2452) + _836) * cbLight._m0[_2745].y) * _2813) * _2814) + _2622;
        _2734 = (((((_2794 * _2453) + _837) * cbLight._m0[_2745].z) * _2813) * _2814) + _2624;
    }
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    if (_2150.y == 0u)
    {
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.x;
        uint _2847 = uint((float(_2835.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _2836))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _2836)));
        float _2857 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2858 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        uint _2861 = uint(isnan(14.0) ? _2858 : (isnan(_2858) ? 14.0 : min(_2858, 14.0)));
        uvec4 _2866 = texelFetch(g_lightClusterGridBuffer, int(((_2861 << 2u) + (_2847 << 6u)) >> 2u));
        uint _2867 = _2866.x;
        uint _2868 = _2835.z;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((((1u << ((_2868 >> 4u) & 15u)) + 4294967295u) & _2867) == 0u) || ((_2868 & 240u) == 0u))
        {
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
        }
        else
        {
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            uint _3098 = 0u;
            uint _3107;
            bool _3108;
            for (;;)
            {
                _3107 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3098 << 2u)) >> 2u)).x;
                _3108 = _3107 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3108)
                {
                    frontier_phi_66_pred = _3097;
                    frontier_phi_66_pred_1 = _3096;
                    frontier_phi_66_pred_2 = _3095;
                    frontier_phi_66_pred_3 = _3094;
                    frontier_phi_66_pred_4 = _3093;
                    frontier_phi_66_pred_5 = _3092;
                }
                else
                {
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    uint _3222;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3094;
                    _3219 = _3095;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3107;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    for (;;)
                    {
                        uint _3226 = uint(findLSB(_3222)) + (_3098 << 5u);
                        uint _3223 = (_3222 + 4294967295u) & _3222;
                        uint _3228 = _3226 * 48u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3248 = (_3226 * 48u) + 4u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3267 = (_3226 * 48u) + 8u;
                        vec3 _3278 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x));
                        float _3282 = _3242.x - _1926;
                        float _3283 = _3242.y - _1927;
                        float _3284 = _3242.z - _1928;
                        float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                        float _3288 = inversesqrt(_3285);
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3292 = dot(vec3(_791, _794, _797), vec3(_3289, _3290, _3291));
                        float _3297 = 1.0 - (_3285 * _3242.w);
                        float _4660 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3299 = sqrt(_3285) * _3261.w;
                        float _3302 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3292) + _3303;
                        float _3309 = _3299 * _3299;
                        float _3313 = ((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3298) / ((_3309 * 0.699999988079071044921875) + 1.0);
                        float _3317 = (-0.0) - _1926;
                        float _3318 = (-0.0) - _1927;
                        float _3319 = (-0.0) - _1928;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3333 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                        float _3334 = 1.0 - _866;
                        float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                        float _3342 = _3341 * _3341;
                        float _3343 = _3342 * _3342;
                        float _3344 = _3324 + _3289;
                        float _3345 = _3325 + _3290;
                        float _3346 = _3326 + _3291;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3354 = dot(vec3(_791, _794, _797), vec3(_3324, _3325, _3326));
                        float _4676 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3358 = dot(vec3(_791, _794, _797), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                        float _4687 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                        float _3366 = _3302 * _3342;
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3292) + _3367;
                        float _4698 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3372 = 1.0 - _3342;
                        float _3382 = (0.5 / (((_3371 * ((_3357 * _3372) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3342) * _3357))) * _3371;
                        float _4709 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3393 = (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) / ((_3365 * _3365) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125))) * _3298;
                        _3151 = (_3313 * _3261.x) + _3219;
                        _3152 = (_3313 * _3261.y) + _3220;
                        _3153 = (_3313 * _3261.z) + _3221;
                        _3148 = (_3393 * _3278.x) + _3216;
                        _3149 = (_3393 * _3278.y) + _3217;
                        _3150 = (_3393 * _3278.z) + _3218;
                        if (_3223 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3150;
                            _3219 = _3151;
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3223;
                        }
                    }
                    frontier_phi_66_pred = _3153;
                    frontier_phi_66_pred_1 = _3152;
                    frontier_phi_66_pred_2 = _3151;
                    frontier_phi_66_pred_3 = _3150;
                    frontier_phi_66_pred_4 = _3149;
                    frontier_phi_66_pred_5 = _3148;
                }
                _2958 = frontier_phi_66_pred;
                _2956 = frontier_phi_66_pred_1;
                _2954 = frontier_phi_66_pred_2;
                _2952 = frontier_phi_66_pred_3;
                _2950 = frontier_phi_66_pred_4;
                _2948 = frontier_phi_66_pred_5;
                uint _3099 = _3098 + 1u;
                if (_3099 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3092 = _2948;
                    _3093 = _2950;
                    _3094 = _2952;
                    _3095 = _2954;
                    _3096 = _2956;
                    _3097 = _2958;
                    _3098 = _3099;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
        }
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.z;
        uint _2964 = (_2962 >> 8u) & 15u;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((4294967295u << _2964) & _2867) == 0u)
        {
            _3060 = _2947;
            _3062 = _2949;
            _3064 = _2951;
            _3066 = _2953;
            _3068 = _2955;
            _3070 = _2957;
        }
        else
        {
            float _3085 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float _3086 = _3085 * _1926;
            float _3087 = _3085 * _1927;
            float _3088 = _3085 * _1928;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2964 < ((_2962 >> 12u) & 15u))
            {
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3199 = _2947;
                float _3200 = _2949;
                float _3201 = _2951;
                float _3202 = _2953;
                float _3203 = _2955;
                float _3204 = _2957;
                uint _3205 = _2964;
                uint _3214;
                bool _3215;
                for (;;)
                {
                    _3214 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                    _3215 = _3214 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3215)
                    {
                        frontier_phi_72_pred = _3204;
                        frontier_phi_72_pred_1 = _3203;
                        frontier_phi_72_pred_2 = _3202;
                        frontier_phi_72_pred_3 = _3201;
                        frontier_phi_72_pred_4 = _3200;
                        frontier_phi_72_pred_5 = _3199;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3411 = _3199;
                        float _3412 = _3200;
                        float _3413 = _3201;
                        float _3414 = _3202;
                        float _3415 = _3203;
                        float _3416 = _3204;
                        uint _3417 = _3214;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3502;
                        float _3548;
                        bool _3549;
                        for (;;)
                        {
                            uint _3428 = ((_3205 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3489 = (_3428 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3428 * 40u) + 24u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3523 = (_3428 * 40u) + 28u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3548 = fma(_1928, _3536.z, fma(_1927, _3536.y, _3536.x * _1926)) + _3536.w;
                            _3549 = !((fma(_1928, _3517.z, fma(_1927, _3517.y, _3517.x * _1926)) + _3517.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3549)
                            {
                                float _3576 = _3443.x - _1926;
                                float _3577 = _3443.y - _1927;
                                float _3578 = _3443.z - _1928;
                                float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                                float _3582 = inversesqrt(_3579);
                                float _3583 = _3582 * _3576;
                                float _3584 = _3582 * _3577;
                                float _3585 = _3582 * _3578;
                                float _3589 = 1.0 - (_3579 / (_3444 * _3444));
                                float _4720 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3594 = sqrt(_3579) * _3459.w;
                                float _3596 = 1.39999997615814208984375 / (_3594 + 1.39999997615814208984375);
                                float _3597 = _3596 * _3596;
                                float _3600 = ((1.0 - _3597) * dot(vec3(_3583, _3584, _3585), vec3(_791, _794, _797))) + _3597;
                                float _3603 = _3594 * _3594;
                                float _3607 = (fma(_1928, _3486.z, fma(_1927, _3486.y, _3486.x * _1926)) + _3486.w) / _3548;
                                float _3608 = (fma(_1928, _3502.z, fma(_1927, _3502.y, _3502.x * _1926)) + _3502.w) / _3548;
                                float _3612 = 1.0 - dot(vec2(_3607, _3608), vec2(_3607, _3608));
                                float _4736 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3614 = _3613 * (((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3590) / ((_3603 * 0.699999988079071044921875) + 1.0));
                                float _3626 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                                float _3627 = 1.0 - _866;
                                float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                                float _3635 = _3634 * _3634;
                                float _3636 = _3635 * _3635;
                                float _3637 = _3583 - _3086;
                                float _3638 = _3584 - _3087;
                                float _3639 = _3585 - _3088;
                                float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                                float _3647 = dot(vec3(_791, _794, _797), vec3((-0.0) - _3086, (-0.0) - _3087, (-0.0) - _3088));
                                float _4747 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3651 = dot(vec3(_791, _794, _797), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                                float _4758 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                                float _3659 = _3596 * _3635;
                                float _3660 = _3659 * _3659;
                                float _3666 = ((1.0 - _3660) * dot(vec3(_791, _794, _797), vec3(_3583, _3584, _3585))) + _3660;
                                float _4769 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3668 = 1.0 - _3635;
                                float _3678 = (0.5 / (((_3667 * ((_3650 * _3668) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3635) * _3650))) * _3667;
                                float _4780 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3688 = (_3613 * _3590) * (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3658 * _3658) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3614 * _3459.y;
                                frontier_phi_78_pred_1 = _3614 * _3459.x;
                                frontier_phi_78_pred_2 = _3688 * _3471.z;
                                frontier_phi_78_pred_3 = _3688 * _3471.y;
                                frontier_phi_78_pred_4 = _3688 * _3471.x;
                                frontier_phi_78_pred_5 = _3614 * _3459.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_78_pred;
                            _3695 = frontier_phi_78_pred_1;
                            _3694 = frontier_phi_78_pred_2;
                            _3693 = frontier_phi_78_pred_3;
                            _3692 = frontier_phi_78_pred_4;
                            _3697 = frontier_phi_78_pred_5;
                            _3401 = _3695 + _3414;
                            _3402 = _3696 + _3415;
                            _3403 = _3697 + _3416;
                            _3398 = _3692 + _3411;
                            _3399 = _3693 + _3412;
                            _3400 = _3694 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3403;
                        frontier_phi_72_pred_1 = _3402;
                        frontier_phi_72_pred_2 = _3401;
                        frontier_phi_72_pred_3 = _3400;
                        frontier_phi_72_pred_4 = _3399;
                        frontier_phi_72_pred_5 = _3398;
                    }
                    _3071 = frontier_phi_72_pred;
                    _3069 = frontier_phi_72_pred_1;
                    _3067 = frontier_phi_72_pred_2;
                    _3065 = frontier_phi_72_pred_3;
                    _3063 = frontier_phi_72_pred_4;
                    _3061 = frontier_phi_72_pred_5;
                    uint _3206 = _3205 + 1u;
                    if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3199 = _3061;
                        _3200 = _3063;
                        _3201 = _3065;
                        _3202 = _3067;
                        _3203 = _3069;
                        _3204 = _3071;
                        _3205 = _3206;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3071;
                frontier_phi_60_61_ladder_1 = _3069;
                frontier_phi_60_61_ladder_2 = _3065;
                frontier_phi_60_61_ladder_3 = _3063;
                frontier_phi_60_61_ladder_4 = _3061;
                frontier_phi_60_61_ladder_5 = _3067;
            }
            else
            {
                frontier_phi_60_61_ladder = _2957;
                frontier_phi_60_61_ladder_1 = _2955;
                frontier_phi_60_61_ladder_2 = _2951;
                frontier_phi_60_61_ladder_3 = _2949;
                frontier_phi_60_61_ladder_4 = _2947;
                frontier_phi_60_61_ladder_5 = _2953;
            }
            _3060 = frontier_phi_60_61_ladder_4;
            _3062 = frontier_phi_60_61_ladder_3;
            _3064 = frontier_phi_60_61_ladder_2;
            _3066 = frontier_phi_60_61_ladder_5;
            _3068 = frontier_phi_60_61_ladder_1;
            _3070 = frontier_phi_60_61_ladder;
        }
        float _3075 = isnan(1.0) ? _850 : (isnan(_850) ? 1.0 : min(_850, 1.0));
        _2880 = (_3075 * _3066) + _2392;
        _2882 = (_3075 * _3068) + _2394;
        _2884 = (_3075 * _3070) + _2396;
        _2886 = ((_3060 * _834) * _3075) + _2730;
        _2888 = ((_3062 * _836) * _3075) + _2732;
        _2890 = ((_3064 * _837) * _3075) + _2734;
    }
    else
    {
        _2880 = _2392;
        _2882 = _2394;
        _2884 = _2396;
        _2886 = _2730;
        _2888 = _2732;
        _2890 = _2734;
    }
    float _4796 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4807 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4818 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    uint _2910 = _242 + 6u;
    float _2918 = _772 / cbSceneParam._m0[86u].x;
    float _2919 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2933 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2918, _2919, (log2((isnan(cbSceneParam._m0[77u].w) ? _706 : (isnan(_706) ? cbSceneParam._m0[77u].w : min(_706, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2935 = _2933.x;
    float _2936 = _2933.y;
    float _2937 = _2933.z;
    float _2938 = _2933.w;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_706 > cbSceneParam._m0[78u].w)
    {
        float _2972 = isnan(_706) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _706 : min(cbSceneParam._m0[80u].w, _706));
        float _2973 = _2972 / _706;
        float _2984 = _2973 * _757;
        float _2985 = _758 * _2973;
        float _2986 = (-0.0) - _2985;
        float _2988 = _2973 * _759;
        float _2990 = (cbSceneParam._m0[77u].w * _2986) / _2972;
        float _2991 = _2990 + cbSceneParam._m0[79u].w;
        float _2992 = cbSceneParam._m0[79u].w - _2985;
        float _2998 = sqrt(((_2984 * _2984) + (_2985 * _2985)) + (_2988 * _2988));
        float _3001 = (1.0 - (cbSceneParam._m0[77u].w / _2972)) * _2998;
        float _3006 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3008 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3161;
        if (abs((_2986 - _2990) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3161 = ((((_2991 > 0.0) ? exp2(_3006 * _2991) : (2.0 - exp2(_3008 * _2991))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3001;
        }
        else
        {
            float _3121 = 1.0 / cbSceneParam._m0[80u].x;
            float _3122 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : max(_2991, _2992));
            float _3123 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : min(_2991, _2992));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            _3161 = ((abs(_2998 / _2986) * cbSceneParam._m0[80u].y) * ((((_3132 - _3133) * 2.0) - ((exp2(_3006 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0)))) - exp2(_3006 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))))) * _3121)) - ((exp2(_3008 * _3132) - exp2(_3008 * _3133)) * _3121))) + (_3001 * cbSceneParam._m0[80u].z);
        }
        vec4 _3163 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2918, _2919, 1.0), 0.0);
        float _3172 = exp2((_3161 * (-1.44269502162933349609375)) * (1.0 - _3163.w));
        float _3173 = log2(_3172);
        float _3189 = log2(_2938);
        _3010 = (exp2(_3189 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].x)) * _3163.x) / cbSceneParam._m0[78u].x)) + _2935;
        _3012 = (exp2(_3189 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].y)) * _3163.y) / cbSceneParam._m0[78u].y)) + _2936;
        _3014 = (exp2(_3189 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].z)) * _3163.z) / cbSceneParam._m0[78u].z)) + _2937;
        _3016 = _3172 * _2938;
    }
    else
    {
        _3010 = _2935;
        _3012 = _2936;
        _3014 = _2937;
        _3016 = _2938;
    }
    float _3028 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3029 = _3028 == 3.0;
    float _3030 = log2(_3016);
    float _3037 = exp2(_3030 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2880 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _850))) + ((_2886 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _3038 = exp2(_3030 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2882 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _850))) + ((_2888 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _3039 = exp2(_3030 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2884 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _850))) + ((_2890 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _3048 = (_3028 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3048 * (_3029 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.y = _3048 * (_3029 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3012)));
    SV_Target.z = _3048 * (_3029 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3014)));
    SV_Target.w = cbInstanceData._m0[_2910].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2910].w;
}


