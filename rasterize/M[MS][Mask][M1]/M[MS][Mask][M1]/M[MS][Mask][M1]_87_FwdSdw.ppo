#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1490;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4097 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _450 = (_443 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _451 = (_443 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _452 = (_443 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4108 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _529 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450);
    float _532 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451);
    float _535 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452);
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _602 = ((_574.x - _593) * _443) + _593;
    float _603 = ((_574.y - _594) * _443) + _594;
    float _604 = ((_574.z - _595) * _443) + _595;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _629 = ((_616.z - _604) * _516) + _604;
    float _632 = ((((_616.x - _602) * _516) + _602) * 2.0) + (-1.0);
    float _634 = ((((_616.y - _603) * _516) + _603) * 2.0) + (-1.0);
    float _635 = dot(vec2(_632, _634), vec2(_632, _634));
    float _4119 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _681 = _679.x;
    float _682 = 1.0 - _681;
    float _691 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _694 = ((isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : min(_691, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _703 = (_694 - ((((((_681 - _682) * cbMtdParam._m0[24u].z) + _682) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _694))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4140 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _711 = (_704 * ((_554.x * cbMtdParam._m0[18u].x) - _529)) + _529;
    float _712 = (_704 * ((_554.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _713 = (_704 * ((_554.z * cbMtdParam._m0[18u].z) - _535)) + _535;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _727 = _725.x;
    float _728 = 1.0 - _727;
    float _753 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_727 - _728) * cbMtdParam._m0[24u].w) + _728) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4151 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _762 = ((((cbMtdParam._m0[10u].x - _711) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _754) + _711;
    float _763 = ((((cbMtdParam._m0[10u].y - _712) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _754) + _712;
    float _764 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _713)) * _754) + _713;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _792 = _790.x;
    float _809 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _792) * _443) + _792;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _809) * _516) + _809;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _826) * cbMtdParam._m0[19u].z) + _826;
    float _832 = _830 - (_830 * _704);
    float _834 = _832 - (_832 * _754);
    float _838 = (cbMtdParam._m0[19u].w * (_654.z - _629)) + _629;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _4162 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = (_704 * (_852.z - _838)) + _838;
    float _872 = ((cbMtdParam._m0[23u].x - _869) * _754) + _869;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _897 = (_891.x * 2.0) + (-1.0);
    float _898 = (_891.y * 2.0) + (-1.0);
    float _899 = dot(vec2(_897, _898), vec2(_897, _898));
    float _4173 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _907 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _632;
    float _908 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _634;
    float _920 = (((_859 - _907) + (cbMtdParam._m0[21u].x * _907)) * _704) + _907;
    float _921 = (((_860 - _908) + (cbMtdParam._m0[21u].x * _908)) * _704) + _908;
    float _922 = (_704 * (sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) - _640)) + _640;
    float _933 = (((_897 - _920) + (_920 * cbMtdParam._m0[22u].z)) * _754) + _920;
    float _934 = (((_898 - _921) + (_921 * cbMtdParam._m0[22u].z)) * _754) + _921;
    float _935 = ((sqrt(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) - _922) * _754) + _922;
    float _937 = cbMtdParam._m0[22u].x + _654.w;
    float _940 = fma(_935, _254 * NORMAL.x, fma(_934, _261 * TANGENT.x, (_247 * _239) * _933));
    float _943 = fma(_935, _254 * NORMAL.y, fma(_934, _261 * TANGENT.y, (_247 * _240) * _933));
    float _946 = fma(_935, _254 * NORMAL.z, fma(_934, _261 * TANGENT.z, (_247 * _241) * _933));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _4184 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _954 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4206 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4217 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4228 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4239 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _959 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    float _1038 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1039 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1057 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1060 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1063 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1077 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1083 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_1077].x;
    float _1084 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * cbInstanceData._m0[_1077].y;
    float _1085 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * cbInstanceData._m0[_1077].z;
    float _4250 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _1089 = 1.0 - _959;
    float _1090 = _1086 * _1089;
    float _1091 = _1087 * _1089;
    float _1092 = _1088 * _1089;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _959;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _959;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _959;
    float _1100 = _1097 + 0.039999999105930328369140625;
    float _1102 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1038, cbSceneParam._m0[86u].y * _1039));
    float _1116 = ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_951, _952, _953), vec3(_1030, _1031, _1032));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _951) - _1030;
    float _1125 = (_1120 * _952) - _1031;
    float _1126 = (_1120 * _953) - _1032;
    float _1130 = abs(dot(vec3(_1030, _1031, _1032), vec3(_951, _952, _953)));
    float _4283 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_954);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1151 = (1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1152 = _1145 * _1132;
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1489;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1214 = fma(_1188, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180));
        float _1218 = fma(_1188, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180));
        float _1222 = fma(_1188, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180));
        float _1247 = _1180 + _951;
        float _1248 = _1184 + _952;
        float _1249 = _1188 + _953;
        float _1259 = fma(_1249, cbModelParam._m0[26u].z, fma(_1248, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1247)) - _1214;
        float _1260 = fma(_1249, cbModelParam._m0[27u].z, fma(_1248, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1247)) - _1218;
        float _1261 = fma(_1249, cbModelParam._m0[28u].z, fma(_1248, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1247)) - _1222;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1214 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1218 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[34u].z) + ((((((_1222 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1317 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1283.x + (-0.5));
        float _1319 = _1317 * (_1283.y + (-0.5));
        float _1320 = _1317 * (_1283.z + (-0.5));
        float _1327 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1290.x + (-0.5));
        float _1329 = _1327 * (_1290.y + (-0.5));
        float _1330 = _1327 * (_1290.z + (-0.5));
        float _1337 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1297.x + (-0.5));
        float _1339 = _1337 * (_1297.y + (-0.5));
        float _1340 = _1337 * (_1297.z + (-0.5));
        float _1347 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1304.x + (-0.5));
        float _1349 = _1347 * (_1304.y + (-0.5));
        float _1350 = _1347 * (_1304.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1371 = (dot(vec3(_951, _952, _953), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1381 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4331 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1383 + 1.0))) + _1388) * _1351;
        float _1398 = _1319 * 0.5;
        float _1399 = _1329 * 0.5;
        float _1400 = _1339 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_951, _952, _953), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4364 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1425 + 1.0))) + _1430) * _1352;
        float _1440 = _1320 * 0.5;
        float _1441 = _1330 * 0.5;
        float _1442 = _1340 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_951, _952, _953), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4397 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1467 + 1.0))) + _1472) * _1353;
        _1489 = _1320;
        _1491 = _1319;
        _1492 = _1318;
        _1493 = _1330;
        _1494 = _1329;
        _1495 = _1328;
        _1496 = _1340;
        _1497 = _1339;
        _1498 = _1338;
        _1499 = _1353;
        _1500 = _1352;
        _1501 = _1351;
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1490;
        _1491 = _1490;
        _1492 = _1490;
        _1493 = _1490;
        _1494 = _1490;
        _1495 = _1490;
        _1496 = _1490;
        _1497 = _1490;
        _1498 = _1490;
        _1499 = _1490;
        _1500 = _1490;
        _1501 = _1490;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1528 = fma(_1188, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180));
        float _1532 = fma(_1188, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180));
        float _1536 = fma(_1188, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180));
        float _1559 = _1180 + _951;
        float _1560 = _1184 + _952;
        float _1561 = _1188 + _953;
        float _1571 = fma(_1561, cbModelParam._m0[30u].z, fma(_1560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1559)) - _1528;
        float _1572 = fma(_1561, cbModelParam._m0[31u].z, fma(_1560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1559)) - _1532;
        float _1573 = fma(_1561, cbModelParam._m0[32u].z, fma(_1560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1559)) - _1536;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1590 = ((_1577 * _1571) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1528 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1577 * _1572) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1532 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1592 = ((_1577 * _1573) / cbModelParam._m0[35u].z) + ((((((_1536 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        float _1627 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1594.x + (-0.5));
        float _1629 = _1627 * (_1594.y + (-0.5));
        float _1630 = _1627 * (_1594.z + (-0.5));
        float _1637 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1601.x + (-0.5));
        float _1639 = _1637 * (_1601.y + (-0.5));
        float _1640 = _1637 * (_1601.z + (-0.5));
        float _1647 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1608.x + (-0.5));
        float _1649 = _1647 * (_1608.y + (-0.5));
        float _1650 = _1647 * (_1608.z + (-0.5));
        float _1657 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1615.x + (-0.5));
        float _1659 = _1657 * (_1615.y + (-0.5));
        float _1660 = _1657 * (_1615.z + (-0.5));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = _1628 * 0.5;
        float _1665 = _1638 * 0.5;
        float _1666 = _1648 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_951, _952, _953), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4460 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1691 + 1.0))) + _1696) * _1661;
        float _1706 = _1629 * 0.5;
        float _1707 = _1639 * 0.5;
        float _1708 = _1649 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_951, _952, _953), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4493 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1733 + 1.0))) + _1738) * _1662;
        float _1748 = _1630 * 0.5;
        float _1749 = _1640 * 0.5;
        float _1750 = _1650 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_951, _952, _953), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4526 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1775 + 1.0))) + _1780) * _1663;
        _1797 = _1630;
        _1798 = _1629;
        _1799 = _1628;
        _1800 = _1640;
        _1801 = _1639;
        _1802 = _1638;
        _1803 = _1650;
        _1804 = _1649;
        _1805 = _1648;
        _1806 = _1663;
        _1807 = _1662;
        _1808 = _1661;
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
    }
    else
    {
        _1797 = _1490;
        _1798 = _1490;
        _1799 = _1490;
        _1800 = _1490;
        _1801 = _1490;
        _1802 = _1490;
        _1803 = _1490;
        _1804 = _1490;
        _1805 = _1490;
        _1806 = _1490;
        _1807 = _1490;
        _1808 = _1490;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1502)) + _1502;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1503)) + _1503;
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1504)) + _1504;
    float _1844 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1821));
    float _1865 = _1124 * 0.5;
    float _1866 = _1125 * 0.5;
    float _1867 = _1126 * 0.5;
    float _1868 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1871 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1874 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1908;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1881 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1489, _1493, _1496, _1499));
        float _1885 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1889 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1896 = dot(vec4(cbModelParam._m0[39u]), vec4(_1865, _1866, _1867, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1919;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1910 = dot(vec4(cbModelParam._m0[40u]), vec4(_1865, _1866, _1867, 1.0));
        _1919 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1919 = 1.0;
    }
    float _1923 = (_1919 * cbModelParam._m0[1u].x) + (_1908 * (1.0 - cbModelParam._m0[1u].x));
    float _1933 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1933 : min(cbModelParam._m0[25u].z, _1933));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1981 = fma(_1188, cbModelParam._m0[13u].z, fma(_1184, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1180)) + cbModelParam._m0[13u].w;
        float _1985 = fma(_1188, cbModelParam._m0[14u].z, fma(_1184, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1180)) + cbModelParam._m0[14u].w;
        float _1989 = fma(_1188, cbModelParam._m0[15u].z, fma(_1184, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1180)) + cbModelParam._m0[15u].w;
        float _1992 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1995 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1998 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2026;
        if (_1992 > 0.0)
        {
            _2026 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2026 = frontier_phi_14_12_ladder;
        }
        float _2197;
        if (_1995 > 0.0)
        {
            _2197 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2197 = frontier_phi_23_19_ladder;
        }
        float _2492;
        if (_1998 > 0.0)
        {
            _2492 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2492 = frontier_phi_35_30_ladder;
        }
        float _2494 = isnan(_2197) ? _2026 : (isnan(_2026) ? _2197 : min(_2026, _2197));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1992) + _1981;
        float _2500 = (_2495 * _1995) + _1985;
        float _2501 = (_2495 * _1998) + _1989;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2502;
        float _2506 = _2502 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 > _2506) || ((_2500 < _2504) || ((_2499 < _2504) || (_2499 > _2506))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2501, cbModelParam._m0[9u].z, fma(_2500, cbModelParam._m0[9u].y, _2499 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2501, cbModelParam._m0[10u].z, fma(_2500, cbModelParam._m0[10u].y, _2499 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2501, cbModelParam._m0[11u].z, fma(_2500, cbModelParam._m0[11u].y, _2499 * cbModelParam._m0[11u].x))), _1934);
            frontier_phi_13_35_ladder = _2646.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2646.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2646.x * cbModelParam._m0[1u].y;
        }
        _2014 = frontier_phi_13_35_ladder_2;
        _2016 = frontier_phi_13_35_ladder_1;
        _2018 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1934);
        _2014 = _2002.x * cbModelParam._m0[1u].y;
        _2016 = _2002.y * cbModelParam._m0[1u].y;
        _2018 = _2002.z * cbModelParam._m0[1u].y;
    }
    float _2022 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2022 : min(cbModelParam._m0[25u].w, _2022));
    float _2112;
    float _2114;
    float _2116;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2076 = fma(_1188, cbModelParam._m0[21u].z, fma(_1184, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1180)) + cbModelParam._m0[21u].w;
        float _2080 = fma(_1188, cbModelParam._m0[22u].z, fma(_1184, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1180)) + cbModelParam._m0[22u].w;
        float _2084 = fma(_1188, cbModelParam._m0[23u].z, fma(_1184, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1180)) + cbModelParam._m0[23u].w;
        float _2087 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2090 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2093 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2202;
        if (_2087 > 0.0)
        {
            _2202 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2202 = frontier_phi_25_21_ladder;
        }
        float _2519;
        if (_2090 > 0.0)
        {
            _2519 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2519 = frontier_phi_37_32_ladder;
        }
        float _2857;
        if (_2093 > 0.0)
        {
            _2857 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2857 = frontier_phi_47_44_ladder;
        }
        float _2859 = isnan(_2519) ? _2202 : (isnan(_2202) ? _2519 : min(_2202, _2519));
        float _2860 = isnan(_2857) ? _2859 : (isnan(_2859) ? _2857 : min(_2859, _2857));
        float _2864 = (_2860 * _2087) + _2076;
        float _2865 = (_2860 * _2090) + _2080;
        float _2866 = (_2860 * _2093) + _2084;
        float _2867 = _2860 * 9.9999997473787516355514526367188e-05;
        float _2868 = (-1.0) - _2867;
        float _2870 = _2867 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2866 > _2870) || ((_2866 < _2868) || ((_2865 > _2870) || ((_2865 < _2868) || ((_2864 < _2868) || (_2864 > _2870))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2866, cbModelParam._m0[17u].z, fma(_2865, cbModelParam._m0[17u].y, _2864 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2866, cbModelParam._m0[18u].z, fma(_2865, cbModelParam._m0[18u].y, _2864 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2866, cbModelParam._m0[19u].z, fma(_2865, cbModelParam._m0[19u].y, _2864 * cbModelParam._m0[19u].x))), _2023);
            frontier_phi_22_47_ladder = _2988.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2988.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2988.x * cbModelParam._m0[1u].z;
        }
        _2112 = frontier_phi_22_47_ladder_2;
        _2114 = frontier_phi_22_47_ladder_1;
        _2116 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2023);
        _2112 = _2096.x * cbModelParam._m0[1u].z;
        _2114 = _2096.y * cbModelParam._m0[1u].z;
        _2116 = _2096.z * cbModelParam._m0[1u].z;
    }
    float _2129 = (((_1151 * _1100) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2131 = (((_1151 * _1102) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2133 = (((_1151 * _1103) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2136 = fma(_2133, cbSceneParam._m0[89u].z, fma(_2131, cbSceneParam._m0[89u].y, _2129 * cbSceneParam._m0[89u].x));
    float _2139 = fma(_2133, cbSceneParam._m0[90u].z, fma(_2131, cbSceneParam._m0[90u].y, _2129 * cbSceneParam._m0[90u].x));
    float _2142 = fma(_2133, cbSceneParam._m0[91u].z, fma(_2131, cbSceneParam._m0[91u].y, _2129 * cbSceneParam._m0[91u].x));
    float _2176 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2189 = _2176 / _2188;
    float _2190 = _2180 / _2188;
    float _2191 = _2184 / _2188;
    float _2338;
    float _2339;
    float _2340;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2218 = ((uint(_2191 > cbSceneParam._m0[59u].y) + uint(_2191 > cbSceneParam._m0[59u].x)) + uint(_2191 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2219 = _2218 + 43u;
        uint _2227 = _2218 + 44u;
        uint _2235 = _2218 + 45u;
        uint _2243 = _2218 + 46u;
        float _2254 = fma(_2188, cbSceneParam._m0[_2219].w, fma(_2184, cbSceneParam._m0[_2219].z, fma(_2180, cbSceneParam._m0[_2219].y, _2176 * cbSceneParam._m0[_2219].x)));
        float _2258 = fma(_2188, cbSceneParam._m0[_2227].w, fma(_2184, cbSceneParam._m0[_2227].z, fma(_2180, cbSceneParam._m0[_2227].y, _2176 * cbSceneParam._m0[_2227].x)));
        float _2266 = fma(_2188, cbSceneParam._m0[_2243].w, fma(_2184, cbSceneParam._m0[_2243].z, fma(_2180, cbSceneParam._m0[_2243].y, _2176 * cbSceneParam._m0[_2243].x)));
        float _2271 = cbSceneParam._m0[33u].z * _2266;
        float _2273 = cbSceneParam._m0[33u].w * _2266;
        float _2276 = fma(_2188, cbSceneParam._m0[_2235].w, fma(_2184, cbSceneParam._m0[_2235].z, fma(_2180, cbSceneParam._m0[_2235].y, _2176 * cbSceneParam._m0[_2235].x))) / _2266;
        float _2324 = (cbSceneParam._m0[33u].x - sqrt(((_2190 * _2190) + (_2189 * _2189)) + (_2191 * _2191))) * cbSceneParam._m0[33u].y;
        float _4652 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2331 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 + _2254) / _2266, (_2273 + _2258) / _2266), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 + _2254) / _2266, (_2258 - _2271) / _2266), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2254 - _2271) / _2266, (_2258 - _2273) / _2266), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2254 - _2273) / _2266, (_2271 + _2258) / _2266), _2276), 0.0)).x), vec4(0.25)));
        _2338 = 1.0 - (_2331 * cbSceneParam._m0[34u].x);
        _2339 = 1.0 - (_2331 * cbSceneParam._m0[34u].y);
        _2340 = 1.0 - (_2331 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2338 = 1.0;
        _2339 = 1.0;
        _2340 = 1.0;
    }
    float _2404;
    float _2406;
    float _2408;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2392 = fma(_2188, cbSceneParam._m0[63u].w, fma(_2184, cbSceneParam._m0[63u].z, fma(_2180, cbSceneParam._m0[63u].y, _2176 * cbSceneParam._m0[63u].x)));
        float _2393 = fma(_2188, cbSceneParam._m0[60u].w, fma(_2184, cbSceneParam._m0[60u].z, fma(_2180, cbSceneParam._m0[60u].y, _2176 * cbSceneParam._m0[60u].x))) / _2392;
        float _2394 = fma(_2188, cbSceneParam._m0[61u].w, fma(_2184, cbSceneParam._m0[61u].z, fma(_2180, cbSceneParam._m0[61u].y, _2176 * cbSceneParam._m0[61u].x))) / _2392;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2393 >= cbSceneParam._m0[64u].x) && (_2394 >= cbSceneParam._m0[64u].y)) && (_2393 <= cbSceneParam._m0[64u].z)) && (_2394 <= cbSceneParam._m0[64u].w))
        {
            float _2532 = fma(_2188, cbSceneParam._m0[62u].w, fma(_2184, cbSceneParam._m0[62u].z, fma(_2180, cbSceneParam._m0[62u].y, _2176 * cbSceneParam._m0[62u].x))) / _2392;
            float _2536 = isnan(cbSceneParam._m0[41u].w) ? _2532 : (isnan(_2532) ? cbSceneParam._m0[41u].w : max(_2532, cbSceneParam._m0[41u].w));
            float _2579 = (cbSceneParam._m0[33u].x - sqrt(((_2190 * _2190) + (_2189 * _2189)) + (_2191 * _2191))) * cbSceneParam._m0[33u].y;
            float _4668 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
            float _2586 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2393, cbSceneParam._m0[33u].w + _2394), _2536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2393, _2394 - cbSceneParam._m0[33u].z), _2536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2393 - cbSceneParam._m0[33u].z, _2394 - cbSceneParam._m0[33u].w), _2536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2393 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2394), _2536), 0.0)).x), vec4(0.25)));
            float _2590 = 1.0 - (_2586 * cbSceneParam._m0[34u].x);
            float _2591 = 1.0 - (_2586 * cbSceneParam._m0[34u].y);
            float _2592 = 1.0 - (_2586 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2592) ? _2340 : (isnan(_2340) ? _2592 : min(_2340, _2592));
            frontier_phi_34_33_ladder_1 = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
            frontier_phi_34_33_ladder_2 = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
        }
        else
        {
            frontier_phi_34_33_ladder = _2340;
            frontier_phi_34_33_ladder_1 = _2339;
            frontier_phi_34_33_ladder_2 = _2338;
        }
        _2404 = frontier_phi_34_33_ladder_2;
        _2406 = frontier_phi_34_33_ladder_1;
        _2408 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2404 = _2338;
        _2406 = _2339;
        _2408 = _2340;
    }
    uvec4 _2413 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2415 = _2413.x * 14u;
    uint _2416 = _2415 + 13u;
    float _2423 = _1116 + (-1.0);
    float _2428 = (cbLight._m0[_2416].x * _2423) + 1.0;
    float _2429 = (cbLight._m0[_2416].y * _2423) + 1.0;
    float _2430 = (cbLight._m0[_2416].z * _2423) + 1.0;
    float _2431 = (cbLight._m0[_2416].w * _2423) + 1.0;
    uint _2432 = _2415 + 5u;
    float _2438 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
    uint _2442 = _2415 + 4u;
    float _2451 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2455 = _2415 | 1u;
    float _2466 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_951, _952, _953));
    float _2469 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_951, _952, _953));
    float _4704 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _4715 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2474 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * 0.3183098733425140380859375;
    float _2476 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * 0.3183098733425140380859375;
    float _2483 = ((cbLight._m0[_2432].x * _2438) * _2476) + (((cbLight._m0[_2442].x * _2404) * _2451) * _2474);
    float _2484 = ((_2438 * cbLight._m0[_2432].y) * _2476) + (((cbLight._m0[_2442].y * _2406) * _2451) * _2474);
    float _2485 = ((_2438 * cbLight._m0[_2432].z) * _2476) + (((cbLight._m0[_2442].z * _2408) * _2451) * _2474);
    uvec4 _2489 = floatBitsToUint(cbLight._m0[_2415 + 12u]);
    bool _2491 = _2489.x == 0u;
    float _2593;
    float _2595;
    float _2597;
    if (_2491)
    {
        _2593 = _2483;
        _2595 = _2484;
        _2597 = _2485;
    }
    else
    {
        uint _2601 = _2415 + 6u;
        float _2617 = (dot(vec3(cbLight._m0[_2415 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4726 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2620 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2593 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2483;
        _2595 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2484;
        _2597 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2485;
    }
    bool _2600 = _2489.y == 0u;
    float _2655;
    float _2657;
    float _2659;
    if (_2600)
    {
        _2655 = _2593;
        _2657 = _2595;
        _2659 = _2597;
    }
    else
    {
        uint _2828 = _2415 + 7u;
        float _2844 = (dot(vec3(cbLight._m0[_2415 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2845 = _2844 * _2844;
        float _4742 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2846 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2847 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2655 = (((cbLight._m0[_2828].x * 0.3183098733425140380859375) * _2846) * _2847) + _2593;
        _2657 = (((cbLight._m0[_2828].y * 0.3183098733425140380859375) * _2846) * _2847) + _2595;
        _2659 = (((cbLight._m0[_2828].z * 0.3183098733425140380859375) * _2846) * _2847) + _2597;
    }
    uint _2662 = _2415 + 8u;
    float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _954) * 0.949999988079071044921875);
    float _2676 = _2675 * _2675;
    float _2677 = cbLight._m0[_2415].x + _1030;
    float _2678 = cbLight._m0[_2415].y + _1031;
    float _2679 = cbLight._m0[_2415].z + _1032;
    float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
    float _2684 = _2683 * _2677;
    float _2685 = _2683 * _2678;
    float _2686 = _2683 * _2679;
    float _2687 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2415].xyz));
    float _4758 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _4769 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2691 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2692 = dot(vec3(_951, _952, _953), vec3(_2684, _2685, _2686));
    float _4780 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2696 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2684, _2685, _2686));
    float _4791 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2700 = _2676 * _2676;
    float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
    float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2713 = 0.959999978542327880859375 - _1097;
    float _2715 = 0.959999978542327880859375 - _1098;
    float _2716 = 0.959999978542327880859375 - _1099;
    float _2723 = 1.0 - _2676;
    float _2734 = (0.5 / (((_2691 * ((_2690 * _2723) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2723) + _2676) * _2690))) * _2690;
    float _4802 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2736 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
    uint _2750 = _2415 + 9u;
    float _2761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _954) * 0.949999988079071044921875);
    float _2762 = _2761 * _2761;
    float _2763 = cbLight._m0[_2455].x + _1030;
    float _2764 = cbLight._m0[_2455].y + _1031;
    float _2765 = cbLight._m0[_2455].z + _1032;
    float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
    float _2770 = _2769 * _2763;
    float _2771 = _2769 * _2764;
    float _2772 = _2769 * _2765;
    float _2773 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2455].xyz));
    float _4813 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
    float _2776 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _2777 = dot(vec3(_951, _952, _953), vec3(_2770, _2771, _2772));
    float _4824 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2780 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2781 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2770, _2771, _2772));
    float _4835 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2785 = _2762 * _2762;
    float _2789 = ((_2780 * _2780) * (_2785 + (-1.0))) + 1.0;
    float _2796 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
    float _2803 = 1.0 - _2762;
    float _2813 = (0.5 / (((_2691 * ((_2776 * _2803) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2803) + _2762) * _2776))) * _2776;
    float _4846 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2815 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2785 / ((_2789 * _2789) * 3.141590118408203125));
    float _2825 = (((((_2796 * _2713) + _1100) * cbLight._m0[_2750].x) * _2815) * _2438) + ((((cbLight._m0[_2662].x * _2404) * ((_2712 * _2713) + _1100)) * _2736) * _2451);
    float _2826 = (((((_2796 * _2715) + _1102) * cbLight._m0[_2750].y) * _2815) * _2438) + ((((cbLight._m0[_2662].y * _2406) * ((_2712 * _2715) + _1102)) * _2736) * _2451);
    float _2827 = (((((_2796 * _2716) + _1103) * cbLight._m0[_2750].z) * _2815) * _2438) + ((((cbLight._m0[_2662].z * _2408) * ((_2712 * _2716) + _1103)) * _2736) * _2451);
    float _2883;
    float _2885;
    float _2887;
    if (_2491)
    {
        _2883 = _2825;
        _2885 = _2826;
        _2887 = _2827;
    }
    else
    {
        uint _2889 = _2415 + 2u;
        uint _2893 = _2415 + 10u;
        float _2907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2889].w)) * _954) * 0.949999988079071044921875);
        float _2908 = _2907 * _2907;
        float _2909 = cbLight._m0[_2889].x + _1030;
        float _2910 = cbLight._m0[_2889].y + _1031;
        float _2911 = cbLight._m0[_2889].z + _1032;
        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
        float _2916 = _2915 * _2909;
        float _2917 = _2915 * _2910;
        float _2918 = _2915 * _2911;
        float _2919 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2889].xyz));
        float _4857 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2923 = dot(vec3(_951, _952, _953), vec3(_2916, _2917, _2918));
        float _4868 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2927 = dot(vec3(cbLight._m0[_2889].xyz), vec3(_2916, _2917, _2918));
        float _4879 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2931 = _2908 * _2908;
        float _2935 = ((_2926 * _2926) * (_2931 + (-1.0))) + 1.0;
        float _2942 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
        float _2949 = 1.0 - _2908;
        float _2959 = (0.5 / (((_2691 * ((_2922 * _2949) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2949) + _2908) * _2922))) * _2922;
        float _4890 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2961 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2931 / ((_2935 * _2935) * 3.141590118408203125));
        float _2962 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2883 = (((((_2942 * _2713) + _1100) * cbLight._m0[_2893].x) * _2961) * _2962) + _2825;
        _2885 = (((((_2942 * _2715) + _1102) * cbLight._m0[_2893].y) * _2961) * _2962) + _2826;
        _2887 = (((((_2942 * _2716) + _1103) * cbLight._m0[_2893].z) * _2961) * _2962) + _2827;
    }
    float _2993;
    float _2995;
    float _2997;
    if (_2600)
    {
        _2993 = _2883;
        _2995 = _2885;
        _2997 = _2887;
    }
    else
    {
        uint _3004 = _2415 + 3u;
        uint _3008 = _2415 + 11u;
        float _3022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3004].w)) * _954) * 0.949999988079071044921875);
        float _3023 = _3022 * _3022;
        float _3024 = cbLight._m0[_3004].x + _1030;
        float _3025 = cbLight._m0[_3004].y + _1031;
        float _3026 = cbLight._m0[_3004].z + _1032;
        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
        float _3031 = _3030 * _3024;
        float _3032 = _3030 * _3025;
        float _3033 = _3030 * _3026;
        float _3034 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_3004].xyz));
        float _4906 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
        float _3037 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _3038 = dot(vec3(_951, _952, _953), vec3(_3031, _3032, _3033));
        float _4917 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        float _3041 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
        float _3042 = dot(vec3(cbLight._m0[_3004].xyz), vec3(_3031, _3032, _3033));
        float _4928 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3046 = _3023 * _3023;
        float _3050 = ((_3041 * _3041) * (_3046 + (-1.0))) + 1.0;
        float _3057 = exp2(log2(1.0 - (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) * 5.0);
        float _3064 = 1.0 - _3023;
        float _3074 = (0.5 / (((_2691 * ((_3037 * _3064) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _3064) + _3023) * _3037))) * _3037;
        float _4939 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
        float _3076 = (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_3046 / ((_3050 * _3050) * 3.141590118408203125));
        float _3077 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2993 = (((((_3057 * _2713) + _1100) * cbLight._m0[_3008].x) * _3076) * _3077) + _2883;
        _2995 = (((((_3057 * _2715) + _1102) * cbLight._m0[_3008].y) * _3076) * _3077) + _2885;
        _2997 = (((((_3057 * _2716) + _1103) * cbLight._m0[_3008].z) * _3076) * _3077) + _2887;
    }
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_2413.y == 0u)
    {
        uvec4 _3098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3099 = _3098.x;
        uint _3110 = uint((float(_3098.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1039) / _3099))) + floor(float(uint(cbSceneParam._m0[85u].x * _1038) / _3099)));
        float _3120 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3121 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
        uint _3124 = uint(isnan(14.0) ? _3121 : (isnan(_3121) ? 14.0 : min(_3121, 14.0)));
        uvec4 _3129 = texelFetch(g_lightClusterGridBuffer, int(((_3124 << 2u) + (_3110 << 6u)) >> 2u));
        uint _3130 = _3129.x;
        uint _3131 = _3098.z;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        if (((((1u << ((_3131 >> 4u) & 15u)) + 4294967295u) & _3130) == 0u) || ((_3131 & 240u) == 0u))
        {
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
        }
        else
        {
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            uint _3361 = 0u;
            uint _3370;
            bool _3371;
            for (;;)
            {
                _3370 = texelFetch(g_lightClassification, int((((_3124 << 5u) + (_3110 << 9u)) + (_3361 << 2u)) >> 2u)).x;
                _3371 = _3370 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3371)
                {
                    frontier_phi_66_pred = _3360;
                    frontier_phi_66_pred_1 = _3359;
                    frontier_phi_66_pred_2 = _3358;
                    frontier_phi_66_pred_3 = _3357;
                    frontier_phi_66_pred_4 = _3356;
                    frontier_phi_66_pred_5 = _3355;
                }
                else
                {
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    uint _3485;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3360;
                    _3485 = _3370;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    for (;;)
                    {
                        uint _3489 = uint(findLSB(_3485)) + (_3361 << 5u);
                        uint _3486 = (_3485 + 4294967295u) & _3485;
                        uint _3491 = _3489 * 48u;
                        vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 3u)).x));
                        uint _3511 = (_3489 * 48u) + 4u;
                        vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3511)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 3u)).x));
                        uint _3530 = (_3489 * 48u) + 8u;
                        vec3 _3541 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3530)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 2u)).x));
                        float _3545 = _3505.x - _2189;
                        float _3546 = _3505.y - _2190;
                        float _3547 = _3505.z - _2191;
                        float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                        float _3551 = inversesqrt(_3548);
                        float _3552 = _3551 * _3545;
                        float _3553 = _3551 * _3546;
                        float _3554 = _3551 * _3547;
                        float _3555 = dot(vec3(_1057, _1060, _1063), vec3(_3552, _3553, _3554));
                        float _3560 = 1.0 - (_3548 * _3505.w);
                        float _4965 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3562 = sqrt(_3548) * _3524.w;
                        float _3565 = 1.39999997615814208984375 / (_3562 + 1.39999997615814208984375);
                        float _3566 = _3565 * _3565;
                        float _3569 = ((1.0 - _3566) * _3555) + _3566;
                        float _3572 = _3562 * _3562;
                        float _3576 = ((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3561) / ((_3572 * 0.699999988079071044921875) + 1.0);
                        float _3580 = (-0.0) - _2189;
                        float _3581 = (-0.0) - _2190;
                        float _3582 = (-0.0) - _2191;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3587 = _3586 * _3580;
                        float _3588 = _3586 * _3581;
                        float _3589 = _3586 * _3582;
                        float _3596 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                        float _3597 = 1.0 - _1132;
                        float _3604 = sqrt(1.0 - ((1.0 - (_3597 * _3597)) * (1.0 - (_3596 * _3596))));
                        float _3605 = _3604 * _3604;
                        float _3606 = _3605 * _3605;
                        float _3607 = _3587 + _3552;
                        float _3608 = _3588 + _3553;
                        float _3609 = _3589 + _3554;
                        float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                        float _3617 = dot(vec3(_1057, _1060, _1063), vec3(_3587, _3588, _3589));
                        float _4981 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3620 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3621 = dot(vec3(_1057, _1060, _1063), vec3(_3613 * _3607, _3613 * _3608, _3613 * _3609));
                        float _4992 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3624 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3628 = ((_3624 * _3624) * (_3606 + (-1.0))) + 1.0;
                        float _3629 = _3565 * _3605;
                        float _3630 = _3629 * _3629;
                        float _3633 = ((1.0 - _3630) * _3555) + _3630;
                        float _5003 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                        float _3634 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3635 = 1.0 - _3605;
                        float _3645 = (0.5 / (((_3634 * ((_3620 * _3635) + _3605)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3605) * _3620))) * _3634;
                        float _5014 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                        float _3656 = (((_3606 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3628 * _3628) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125))) * _3561;
                        _3414 = (_3576 * _3524.x) + _3482;
                        _3415 = (_3576 * _3524.y) + _3483;
                        _3416 = (_3576 * _3524.z) + _3484;
                        _3411 = (_3656 * _3541.x) + _3479;
                        _3412 = (_3656 * _3541.y) + _3480;
                        _3413 = (_3656 * _3541.z) + _3481;
                        if (_3486 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3416;
                            _3485 = _3486;
                        }
                    }
                    frontier_phi_66_pred = _3416;
                    frontier_phi_66_pred_1 = _3415;
                    frontier_phi_66_pred_2 = _3414;
                    frontier_phi_66_pred_3 = _3413;
                    frontier_phi_66_pred_4 = _3412;
                    frontier_phi_66_pred_5 = _3411;
                }
                _3221 = frontier_phi_66_pred;
                _3219 = frontier_phi_66_pred_1;
                _3217 = frontier_phi_66_pred_2;
                _3215 = frontier_phi_66_pred_3;
                _3213 = frontier_phi_66_pred_4;
                _3211 = frontier_phi_66_pred_5;
                uint _3362 = _3361 + 1u;
                if (_3362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3355 = _3211;
                    _3356 = _3213;
                    _3357 = _3215;
                    _3358 = _3217;
                    _3359 = _3219;
                    _3360 = _3221;
                    _3361 = _3362;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
        }
        uvec4 _3224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3225 = _3224.z;
        uint _3227 = (_3225 >> 8u) & 15u;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        if (((4294967295u << _3227) & _3130) == 0u)
        {
            _3323 = _3210;
            _3325 = _3212;
            _3327 = _3214;
            _3329 = _3216;
            _3331 = _3218;
            _3333 = _3220;
        }
        else
        {
            float _3348 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _3349 = _3348 * _2189;
            float _3350 = _3348 * _2190;
            float _3351 = _3348 * _2191;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3227 < ((_3225 >> 12u) & 15u))
            {
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3462 = _3210;
                float _3463 = _3212;
                float _3464 = _3214;
                float _3465 = _3216;
                float _3466 = _3218;
                float _3467 = _3220;
                uint _3468 = _3227;
                uint _3477;
                bool _3478;
                for (;;)
                {
                    _3477 = texelFetch(g_lightClassification, int((((_3124 << 5u) + (_3110 << 9u)) + (_3468 << 2u)) >> 2u)).x;
                    _3478 = _3477 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3478)
                    {
                        frontier_phi_72_pred = _3467;
                        frontier_phi_72_pred_1 = _3466;
                        frontier_phi_72_pred_2 = _3465;
                        frontier_phi_72_pred_3 = _3464;
                        frontier_phi_72_pred_4 = _3463;
                        frontier_phi_72_pred_5 = _3462;
                    }
                    else
                    {
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _3674 = _3462;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        float _3678 = _3466;
                        float _3679 = _3467;
                        uint _3680 = _3477;
                        uint _3681;
                        vec4 _3706;
                        float _3707;
                        vec4 _3722;
                        vec3 _3734;
                        vec4 _3749;
                        vec4 _3764;
                        float _3810;
                        bool _3811;
                        for (;;)
                        {
                            uint _3691 = ((_3468 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3680));
                            _3681 = (_3680 + 4294967295u) & _3680;
                            uint _3693 = _3691 * 40u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3707 = _3706.w;
                            uint _3709 = (_3691 * 40u) + 4u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3691 * 40u) + 8u;
                            _3734 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x));
                            uint _3736 = (_3691 * 40u) + 16u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3691 * 40u) + 20u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3691 * 40u) + 24u;
                            vec4 _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3785 = (_3691 * 40u) + 28u;
                            vec4 _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            _3810 = fma(_2191, _3798.z, fma(_2190, _3798.y, _3798.x * _2189)) + _3798.w;
                            _3811 = !((fma(_2191, _3779.z, fma(_2190, _3779.y, _3779.x * _2189)) + _3779.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3811)
                            {
                                float _3838 = _3706.x - _2189;
                                float _3839 = _3706.y - _2190;
                                float _3840 = _3706.z - _2191;
                                float _3841 = dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840));
                                float _3844 = inversesqrt(_3841);
                                float _3845 = _3844 * _3838;
                                float _3846 = _3844 * _3839;
                                float _3847 = _3844 * _3840;
                                float _3851 = 1.0 - (_3841 / (_3707 * _3707));
                                float _5025 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3856 = sqrt(_3841) * _3722.w;
                                float _3858 = 1.39999997615814208984375 / (_3856 + 1.39999997615814208984375);
                                float _3859 = _3858 * _3858;
                                float _3862 = ((1.0 - _3859) * dot(vec3(_3845, _3846, _3847), vec3(_1057, _1060, _1063))) + _3859;
                                float _3865 = _3856 * _3856;
                                float _3869 = (fma(_2191, _3749.z, fma(_2190, _3749.y, _3749.x * _2189)) + _3749.w) / _3810;
                                float _3870 = (fma(_2191, _3764.z, fma(_2190, _3764.y, _3764.x * _2189)) + _3764.w) / _3810;
                                float _3874 = 1.0 - dot(vec2(_3869, _3870), vec2(_3869, _3870));
                                float _5041 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3876 = _3875 * (((isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0))) * _3852) / ((_3865 * 0.699999988079071044921875) + 1.0));
                                float _3888 = exp2(log2(1.0 / ((_3865 * 3.5) + 5.0)) * 0.25);
                                float _3889 = 1.0 - _1132;
                                float _3896 = sqrt(1.0 - ((1.0 - (_3889 * _3889)) * (1.0 - (_3888 * _3888))));
                                float _3897 = _3896 * _3896;
                                float _3898 = _3897 * _3897;
                                float _3899 = _3845 - _3349;
                                float _3900 = _3846 - _3350;
                                float _3901 = _3847 - _3351;
                                float _3905 = inversesqrt(dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901)));
                                float _3909 = dot(vec3(_1057, _1060, _1063), vec3((-0.0) - _3349, (-0.0) - _3350, (-0.0) - _3351));
                                float _5052 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3912 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3913 = dot(vec3(_1057, _1060, _1063), vec3(_3905 * _3899, _3905 * _3900, _3905 * _3901));
                                float _5063 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3916 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3920 = ((_3916 * _3916) * (_3898 + (-1.0))) + 1.0;
                                float _3921 = _3858 * _3897;
                                float _3922 = _3921 * _3921;
                                float _3928 = ((1.0 - _3922) * dot(vec3(_1057, _1060, _1063), vec3(_3845, _3846, _3847))) + _3922;
                                float _5074 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3929 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3930 = 1.0 - _3897;
                                float _3940 = (0.5 / (((_3929 * ((_3912 * _3930) + _3897)) + 9.9999999392252902907785028219223e-09) + (((_3929 * _3930) + _3897) * _3912))) * _3929;
                                float _5085 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3950 = (_3875 * _3852) * (((_3898 * 3.1415927410125732421875) * (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0)))) / ((_3920 * _3920) * ((_3865 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3876 * _3722.y;
                                frontier_phi_78_pred_1 = _3876 * _3722.x;
                                frontier_phi_78_pred_2 = _3950 * _3734.z;
                                frontier_phi_78_pred_3 = _3950 * _3734.y;
                                frontier_phi_78_pred_4 = _3950 * _3734.x;
                                frontier_phi_78_pred_5 = _3876 * _3722.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3958 = frontier_phi_78_pred;
                            _3957 = frontier_phi_78_pred_1;
                            _3956 = frontier_phi_78_pred_2;
                            _3955 = frontier_phi_78_pred_3;
                            _3954 = frontier_phi_78_pred_4;
                            _3959 = frontier_phi_78_pred_5;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            if (_3681 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3681;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3666;
                        frontier_phi_72_pred_1 = _3665;
                        frontier_phi_72_pred_2 = _3664;
                        frontier_phi_72_pred_3 = _3663;
                        frontier_phi_72_pred_4 = _3662;
                        frontier_phi_72_pred_5 = _3661;
                    }
                    _3334 = frontier_phi_72_pred;
                    _3332 = frontier_phi_72_pred_1;
                    _3330 = frontier_phi_72_pred_2;
                    _3328 = frontier_phi_72_pred_3;
                    _3326 = frontier_phi_72_pred_4;
                    _3324 = frontier_phi_72_pred_5;
                    uint _3469 = _3468 + 1u;
                    if (_3469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3462 = _3324;
                        _3463 = _3326;
                        _3464 = _3328;
                        _3465 = _3330;
                        _3466 = _3332;
                        _3467 = _3334;
                        _3468 = _3469;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3334;
                frontier_phi_60_61_ladder_1 = _3332;
                frontier_phi_60_61_ladder_2 = _3328;
                frontier_phi_60_61_ladder_3 = _3326;
                frontier_phi_60_61_ladder_4 = _3324;
                frontier_phi_60_61_ladder_5 = _3330;
            }
            else
            {
                frontier_phi_60_61_ladder = _3220;
                frontier_phi_60_61_ladder_1 = _3218;
                frontier_phi_60_61_ladder_2 = _3214;
                frontier_phi_60_61_ladder_3 = _3212;
                frontier_phi_60_61_ladder_4 = _3210;
                frontier_phi_60_61_ladder_5 = _3216;
            }
            _3323 = frontier_phi_60_61_ladder_4;
            _3325 = frontier_phi_60_61_ladder_3;
            _3327 = frontier_phi_60_61_ladder_2;
            _3329 = frontier_phi_60_61_ladder_5;
            _3331 = frontier_phi_60_61_ladder_1;
            _3333 = frontier_phi_60_61_ladder;
        }
        float _3338 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3143 = (_3338 * _3329) + _2655;
        _3145 = (_3338 * _3331) + _2657;
        _3147 = (_3338 * _3333) + _2659;
        _3149 = ((_3323 * _1100) * _3338) + _2993;
        _3151 = ((_3325 * _1102) * _3338) + _2995;
        _3153 = ((_3327 * _1103) * _3338) + _2997;
    }
    else
    {
        _3143 = _2655;
        _3145 = _2657;
        _3147 = _2659;
        _3149 = _2993;
        _3151 = _2995;
        _3153 = _2997;
    }
    float _5101 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _5112 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _5123 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    uint _3173 = _267 + 6u;
    float _3181 = _1038 / cbSceneParam._m0[86u].x;
    float _3182 = _1039 / cbSceneParam._m0[86u].y;
    vec4 _3196 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3181, _3182, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3198 = _3196.x;
    float _3199 = _3196.y;
    float _3200 = _3196.z;
    float _3201 = _3196.w;
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _3235 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _3236 = _3235 / _973;
        float _3247 = _3236 * _1023;
        float _3248 = _1024 * _3236;
        float _3249 = (-0.0) - _3248;
        float _3251 = _3236 * _1025;
        float _3253 = (cbSceneParam._m0[77u].w * _3249) / _3235;
        float _3254 = _3253 + cbSceneParam._m0[79u].w;
        float _3255 = cbSceneParam._m0[79u].w - _3248;
        float _3261 = sqrt(((_3247 * _3247) + (_3248 * _3248)) + (_3251 * _3251));
        float _3264 = (1.0 - (cbSceneParam._m0[77u].w / _3235)) * _3261;
        float _3269 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3271 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3424;
        if (abs((_3249 - _3253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3424 = ((((_3254 > 0.0) ? exp2(_3269 * _3254) : (2.0 - exp2(_3271 * _3254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3264;
        }
        else
        {
            float _3384 = 1.0 / cbSceneParam._m0[80u].x;
            float _3385 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : max(_3254, _3255));
            float _3386 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : min(_3254, _3255));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            float _3396 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : min(_3386, 0.0));
            _3424 = ((abs(_3261 / _3249) * cbSceneParam._m0[80u].y) * ((((_3395 - _3396) * 2.0) - ((exp2(_3269 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0)))) - exp2(_3269 * (isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))))) * _3384)) - ((exp2(_3271 * _3395) - exp2(_3271 * _3396)) * _3384))) + (_3264 * cbSceneParam._m0[80u].z);
        }
        vec4 _3426 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3181, _3182, 1.0), 0.0);
        float _3435 = exp2((_3424 * (-1.44269502162933349609375)) * (1.0 - _3426.w));
        float _3436 = log2(_3435);
        float _3452 = log2(_3201);
        _3273 = (exp2(_3452 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].x)) * _3426.x) / cbSceneParam._m0[78u].x)) + _3198;
        _3275 = (exp2(_3452 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].y)) * _3426.y) / cbSceneParam._m0[78u].y)) + _3199;
        _3277 = (exp2(_3452 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].z)) * _3426.z) / cbSceneParam._m0[78u].z)) + _3200;
        _3279 = _3435 * _3201;
    }
    else
    {
        _3273 = _3198;
        _3275 = _3199;
        _3277 = _3200;
        _3279 = _3201;
    }
    float _3291 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3292 = _3291 == 3.0;
    float _3293 = log2(_3279);
    float _3300 = exp2(_3293 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3143 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1116))) + ((_3149 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3301 = exp2(_3293 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3145 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1116))) + ((_3151 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3302 = exp2(_3293 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * (_3147 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1116))) + ((_3153 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3311 = (_3291 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3311 * (_3292 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3273)));
    SV_Target.y = _3311 * (_3292 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3275)));
    SV_Target.z = _3311 * (_3292 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3277)));
    SV_Target.w = cbInstanceData._m0[_3173].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3173].w;
}


