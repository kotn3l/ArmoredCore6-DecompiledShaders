#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1554;
float _4214;
float _4215;
float _4216;
float _4217;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _262 + 1u;
    uint _272 = _262 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4226 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4237 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _563 = _561.x;
    float _573 = dot(vec4(_563, _561.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _585 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _372.z) * 2.0) - ((((_563 - _573) * cbMtdParam._m0[23u].w) + _573) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4248 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _599 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_586 * ((_544.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _602 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_586 * ((_544.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _605 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_586 * ((_544.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _664 = _660.z;
    float _671 = ((_643.x - _662) * _443) + _662;
    float _672 = ((_643.y - _663) * _443) + _663;
    float _673 = ((_643.z - _664) * _443) + _664;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _696 = ((_685.x - _671) * _516) + _671;
    float _697 = ((_685.y - _672) * _516) + _672;
    float _698 = ((_685.z - _673) * _516) + _673;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _723 = ((_710.z - _698) * _586) + _698;
    float _726 = ((((_710.x - _696) * _586) + _696) * 2.0) + (-1.0);
    float _728 = ((((_710.y - _697) * _586) + _697) * 2.0) + (-1.0);
    float _729 = dot(vec2(_726, _728), vec2(_726, _728));
    float _4259 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _734 = sqrt(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _760 = (((_748.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _726;
    float _761 = (((_748.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _728;
    float _764 = fma(_734, _250, fma(_761, _257, _760 * _243));
    float _767 = fma(_734, _251, fma(_761, _258, _760 * _244));
    float _770 = fma(_734, _252, fma(_761, _259, _760 * _245));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _812 = (cbMtdParam._m0[19u].x + dot(vec4(_774 * _764, _774 * _767, _774 * _770, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_803 - _804) * cbMtdParam._m0[24u].z) + _804) * cbMtdParam._m0[21u].z);
    float _4270 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _813 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _820 = (_813 * ((_623.x * cbMtdParam._m0[18u].x) - _599)) + _599;
    float _821 = (_813 * ((_623.y * cbMtdParam._m0[18u].y) - _602)) + _602;
    float _822 = (_813 * ((_623.z * cbMtdParam._m0[18u].z) - _605)) + _605;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _850 = _848.x;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _850) * _443) + _850;
    float _884 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _867) * _516) + _867;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _282) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _283) + cbTextureTilingScale._m0[10u].w)).x - _884) * _586) + _884;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _902) * cbMtdParam._m0[19u].z) + _902;
    float _908 = _906 - (_906 * _813);
    float _912 = (cbMtdParam._m0[19u].w * (_748.z - _723)) + _723;
    vec4 _925 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _932 = (_925.x * 2.0) + (-1.0);
    float _933 = (_925.y * 2.0) + (-1.0);
    float _934 = dot(vec2(_932, _933), vec2(_932, _933));
    float _4281 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _942 = ((_925.z - _912) * _813) + _912;
    float _952 = ((sqrt(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) - _734) * _813) + _734;
    float _955 = (((_932 - _760) * _813) + _760) + (cbMtdParam._m0[21u].x * _760);
    float _956 = (((_933 - _761) * _813) + _761) + (cbMtdParam._m0[21u].x * _761);
    float _960 = cbMtdParam._m0[22u].x + _748.w;
    float _963 = fma(_952, _250, fma(_956, _257, _955 * _243));
    float _966 = fma(_952, _251, fma(_956, _258, _955 * _244));
    float _969 = fma(_952, _252, fma(_956, _259, _955 * _245));
    float _973 = inversesqrt(dot(vec3(_963, _966, _969), vec3(_963, _966, _969)));
    float _974 = _973 * _963;
    float _975 = _973 * _966;
    float _976 = _973 * _969;
    float _4292 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _977 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _4303 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4314 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4325 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4336 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4347 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _982 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _996 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1046 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1036);
    float _1047 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1036);
    float _1048 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1036);
    float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
    float _1053 = _1046 * _1052;
    float _1054 = _1047 * _1052;
    float _1055 = _1048 * _1052;
    vec4 _1060 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1062 = _1060.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1234 = sqrt(((_1046 * _1046) + (_1047 * _1047)) + (_1048 * _1048));
        float _1240 = (cbMatDynParam._m0[5u].x * _1234) + cbMatDynParam._m0[5u].y;
        float _4358 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1245 = (cbMatDynParam._m0[5u].z * _1234) + cbMatDynParam._m0[5u].w;
        float _4369 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) - _1241)) + _1241) < ((_1062 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1073 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1074 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1092 = fma(_976, cbSceneParam._m0[5u].z, fma(_975, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _974));
    float _1095 = fma(_976, cbSceneParam._m0[6u].z, fma(_975, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _974));
    float _1098 = fma(_976, cbSceneParam._m0[7u].z, fma(_975, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _974));
    uint _1111 = _262 + 9u;
    uint _1112 = _1111 + uint(cbMatDynParam._m0[0u].w);
    float _1118 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * cbInstanceData._m0[_1112].x;
    float _1119 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * cbInstanceData._m0[_1112].y;
    float _1120 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1112].z;
    float _4380 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _4402 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _1124 = 1.0 - _982;
    float _1125 = _1121 * _1124;
    float _1126 = _1122 * _1124;
    float _1127 = _1123 * _1124;
    float _1132 = (_1121 + (-0.039999999105930328369140625)) * _982;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _982;
    float _1134 = (_1123 + (-0.039999999105930328369140625)) * _982;
    float _1135 = _1132 + 0.039999999105930328369140625;
    float _1137 = _1133 + 0.039999999105930328369140625;
    float _1138 = _1134 + 0.039999999105930328369140625;
    vec4 _1147 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1073, cbSceneParam._m0[86u].y * _1074));
    float _1151 = ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * TEXCOORD_5.w) * _1147.x;
    float _1152 = dot(vec3(_974, _975, _976), vec3(_1053, _1054, _1055));
    float _1155 = _1152 * 2.0;
    float _1159 = (_1155 * _974) - _1053;
    float _1160 = (_1155 * _975) - _1054;
    float _1161 = (_1155 * _976) - _1055;
    float _1165 = abs(dot(vec3(_1053, _1054, _1055), vec3(_974, _975, _976)));
    float _4413 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1167 = sqrt(_977);
    float _1180 = exp2((_1167 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1167 * 3.0));
    float _1186 = (1.0 - _1180) * ((_1167 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1187 = _1180 * _1167;
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1553;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1278 = fma(_1223, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215));
        float _1282 = fma(_1223, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215));
        float _1286 = fma(_1223, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215));
        float _1311 = _1215 + _974;
        float _1312 = _1219 + _975;
        float _1313 = _1223 + _976;
        float _1323 = fma(_1313, cbModelParam._m0[26u].z, fma(_1312, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311)) - _1278;
        float _1324 = fma(_1313, cbModelParam._m0[27u].z, fma(_1312, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311)) - _1282;
        float _1325 = fma(_1313, cbModelParam._m0[28u].z, fma(_1312, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311)) - _1286;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1278 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1282 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[34u].z) + ((((((_1286 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1381 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1347.x + (-0.5));
        float _1383 = _1381 * (_1347.y + (-0.5));
        float _1384 = _1381 * (_1347.z + (-0.5));
        float _1391 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1354.x + (-0.5));
        float _1393 = _1391 * (_1354.y + (-0.5));
        float _1394 = _1391 * (_1354.z + (-0.5));
        float _1401 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1361.x + (-0.5));
        float _1403 = _1401 * (_1361.y + (-0.5));
        float _1404 = _1401 * (_1361.z + (-0.5));
        float _1411 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1368.x + (-0.5));
        float _1413 = _1411 * (_1368.y + (-0.5));
        float _1414 = _1411 * (_1368.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1435 = (dot(vec3(_974, _975, _976), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1445 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4461 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1447 + 1.0))) + _1452) * _1415;
        float _1462 = _1383 * 0.5;
        float _1463 = _1393 * 0.5;
        float _1464 = _1403 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_974, _975, _976), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4494 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1489 + 1.0))) + _1494) * _1416;
        float _1504 = _1384 * 0.5;
        float _1505 = _1394 * 0.5;
        float _1506 = _1404 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_974, _975, _976), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4505 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4516 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4527 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_1531 + 1.0))) + _1536) * _1417;
        _1553 = _1384;
        _1555 = _1383;
        _1556 = _1382;
        _1557 = _1394;
        _1558 = _1393;
        _1559 = _1392;
        _1560 = _1404;
        _1561 = _1403;
        _1562 = _1402;
        _1563 = _1417;
        _1564 = _1416;
        _1565 = _1415;
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1554;
        _1555 = _1554;
        _1556 = _1554;
        _1557 = _1554;
        _1558 = _1554;
        _1559 = _1554;
        _1560 = _1554;
        _1561 = _1554;
        _1562 = _1554;
        _1563 = _1554;
        _1564 = _1554;
        _1565 = _1554;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1594 = fma(_1223, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215));
        float _1598 = fma(_1223, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215));
        float _1602 = fma(_1223, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215));
        float _1625 = _1215 + _974;
        float _1626 = _1219 + _975;
        float _1627 = _1223 + _976;
        float _1637 = fma(_1627, cbModelParam._m0[30u].z, fma(_1626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1625)) - _1594;
        float _1638 = fma(_1627, cbModelParam._m0[31u].z, fma(_1626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1625)) - _1598;
        float _1639 = fma(_1627, cbModelParam._m0[32u].z, fma(_1626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1625)) - _1602;
        float _1643 = inversesqrt(dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639)));
        float _1656 = ((_1643 * _1637) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1594 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1657 = ((_1643 * _1638) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1598 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1643 * _1639) / cbModelParam._m0[35u].z) + ((((((_1602 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        vec4 _1667 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        vec4 _1674 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1656, _1657, _1658), 0.0);
        float _1693 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1660.x + (-0.5));
        float _1695 = _1693 * (_1660.y + (-0.5));
        float _1696 = _1693 * (_1660.z + (-0.5));
        float _1703 = exp2((_1667.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1667.x + (-0.5));
        float _1705 = _1703 * (_1667.y + (-0.5));
        float _1706 = _1703 * (_1667.z + (-0.5));
        float _1713 = exp2((_1674.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1674.x + (-0.5));
        float _1715 = _1713 * (_1674.y + (-0.5));
        float _1716 = _1713 * (_1674.z + (-0.5));
        float _1723 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1681.x + (-0.5));
        float _1725 = _1723 * (_1681.y + (-0.5));
        float _1726 = _1723 * (_1681.z + (-0.5));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = _1694 * 0.5;
        float _1731 = _1704 * 0.5;
        float _1732 = _1714 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_974, _975, _976), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4590 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1757 + 1.0))) + _1762) * _1727;
        float _1772 = _1695 * 0.5;
        float _1773 = _1705 * 0.5;
        float _1774 = _1715 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_974, _975, _976), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4623 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_1799 + 1.0))) + _1804) * _1728;
        float _1814 = _1696 * 0.5;
        float _1815 = _1706 * 0.5;
        float _1816 = _1716 * 0.5;
        float _1817 = dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816));
        float _1822 = (_1817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1817);
        float _1830 = (dot(vec3(_974, _975, _976), vec3(_1822 * _1814, _1822 * _1815, _1822 * _1816)) + 1.0) * 0.5;
        float _4634 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4645 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1841 = _1840 * 2.0;
        float _1845 = (1.0 - _1840) / (_1840 + 1.0);
        float _4656 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _1855 = ((((1.0 - _1846) * (_1841 + 2.0)) * exp2(log2(isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_1841 + 1.0))) + _1846) * _1729;
        _1863 = _1696;
        _1864 = _1695;
        _1865 = _1694;
        _1866 = _1706;
        _1867 = _1705;
        _1868 = _1704;
        _1869 = _1716;
        _1870 = _1715;
        _1871 = _1714;
        _1872 = _1729;
        _1873 = _1728;
        _1874 = _1727;
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)));
    }
    else
    {
        _1863 = _1554;
        _1864 = _1554;
        _1865 = _1554;
        _1866 = _1554;
        _1867 = _1554;
        _1868 = _1554;
        _1869 = _1554;
        _1870 = _1554;
        _1871 = _1554;
        _1872 = _1554;
        _1873 = _1554;
        _1874 = _1554;
        _1875 = 0.0;
        _1876 = 0.0;
        _1877 = 0.0;
    }
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1566)) + _1566;
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1567)) + _1567;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1568)) + _1568;
    float _1910 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1887));
    float _1931 = _1159 * 0.5;
    float _1932 = _1160 * 0.5;
    float _1933 = _1161 * 0.5;
    float _1934 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1937 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1940 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1974;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1947 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1553, _1557, _1560, _1563));
        float _1951 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1955 = dot(vec4(_1931, _1932, _1933, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1962 = dot(vec4(cbModelParam._m0[39u]), vec4(_1931, _1932, _1933, 1.0));
        _1974 = dot(vec3(isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1962) ? 0.0 : (isnan(0.0) ? _1962 : max(0.0, _1962))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1974 = 1.0;
    }
    float _1985;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1976 = dot(vec4(cbModelParam._m0[40u]), vec4(_1931, _1932, _1933, 1.0));
        _1985 = dot(vec3(isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1976) ? 0.0 : (isnan(0.0) ? _1976 : max(0.0, _1976))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1985 = 1.0;
    }
    float _1989 = (_1985 * cbModelParam._m0[1u].x) + (_1974 * (1.0 - cbModelParam._m0[1u].x));
    float _1999 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _977);
    float _2000 = isnan(_1999) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1999 : min(cbModelParam._m0[25u].z, _1999));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2047 = fma(_1223, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215)) + cbModelParam._m0[13u].w;
        float _2051 = fma(_1223, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215)) + cbModelParam._m0[14u].w;
        float _2055 = fma(_1223, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215)) + cbModelParam._m0[15u].w;
        float _2058 = fma(_1161, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159));
        float _2061 = fma(_1161, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159));
        float _2064 = fma(_1161, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159));
        float _2092;
        if (_2058 > 0.0)
        {
            _2092 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2092 = frontier_phi_17_15_ladder;
        }
        float _2263;
        if (_2061 > 0.0)
        {
            _2263 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2263 = frontier_phi_26_22_ladder;
        }
        float _2558;
        if (_2064 > 0.0)
        {
            _2558 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2558 = frontier_phi_38_33_ladder;
        }
        float _2560 = isnan(_2263) ? _2092 : (isnan(_2092) ? _2263 : min(_2092, _2263));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _2058) + _2047;
        float _2566 = (_2561 * _2061) + _2051;
        float _2567 = (_2561 * _2064) + _2055;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2568;
        float _2572 = _2568 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 > _2572) || ((_2566 < _2570) || ((_2565 < _2570) || (_2565 > _2572))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2567, cbModelParam._m0[9u].z, fma(_2566, cbModelParam._m0[9u].y, _2565 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2567, cbModelParam._m0[10u].z, fma(_2566, cbModelParam._m0[10u].y, _2565 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2567, cbModelParam._m0[11u].z, fma(_2566, cbModelParam._m0[11u].y, _2565 * cbModelParam._m0[11u].x))), _2000);
            frontier_phi_16_38_ladder = _2712.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2712.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2712.x * cbModelParam._m0[1u].y;
        }
        _2080 = frontier_phi_16_38_ladder_2;
        _2082 = frontier_phi_16_38_ladder_1;
        _2084 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1159, _1160, _1161), _2000);
        _2080 = _2068.x * cbModelParam._m0[1u].y;
        _2082 = _2068.y * cbModelParam._m0[1u].y;
        _2084 = _2068.z * cbModelParam._m0[1u].y;
    }
    float _2088 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _977);
    float _2089 = isnan(_2088) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2088 : min(cbModelParam._m0[25u].w, _2088));
    float _2178;
    float _2180;
    float _2182;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2142 = fma(_1223, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215)) + cbModelParam._m0[21u].w;
        float _2146 = fma(_1223, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215)) + cbModelParam._m0[22u].w;
        float _2150 = fma(_1223, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215)) + cbModelParam._m0[23u].w;
        float _2153 = fma(_1161, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159));
        float _2156 = fma(_1161, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159));
        float _2159 = fma(_1161, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159));
        float _2268;
        if (_2153 > 0.0)
        {
            _2268 = abs((1.0 - _2142) / _2153);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2142 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2268 = frontier_phi_28_24_ladder;
        }
        float _2585;
        if (_2156 > 0.0)
        {
            _2585 = abs((1.0 - _2146) / _2156);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2146 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2585 = frontier_phi_40_35_ladder;
        }
        float _2923;
        if (_2159 > 0.0)
        {
            _2923 = abs((1.0 - _2150) / _2159);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2150 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2923 = frontier_phi_50_47_ladder;
        }
        float _2925 = isnan(_2585) ? _2268 : (isnan(_2268) ? _2585 : min(_2268, _2585));
        float _2926 = isnan(_2923) ? _2925 : (isnan(_2925) ? _2923 : min(_2925, _2923));
        float _2930 = (_2926 * _2153) + _2142;
        float _2931 = (_2926 * _2156) + _2146;
        float _2932 = (_2926 * _2159) + _2150;
        float _2933 = _2926 * 9.9999997473787516355514526367188e-05;
        float _2934 = (-1.0) - _2933;
        float _2936 = _2933 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2932 > _2936) || ((_2932 < _2934) || ((_2931 > _2936) || ((_2931 < _2934) || ((_2930 < _2934) || (_2930 > _2936))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2932, cbModelParam._m0[17u].z, fma(_2931, cbModelParam._m0[17u].y, _2930 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2932, cbModelParam._m0[18u].z, fma(_2931, cbModelParam._m0[18u].y, _2930 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2932, cbModelParam._m0[19u].z, fma(_2931, cbModelParam._m0[19u].y, _2930 * cbModelParam._m0[19u].x))), _2089);
            frontier_phi_25_50_ladder = _3054.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3054.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3054.x * cbModelParam._m0[1u].z;
        }
        _2178 = frontier_phi_25_50_ladder_2;
        _2180 = frontier_phi_25_50_ladder_1;
        _2182 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1159, _1160, _1161), _2089);
        _2178 = _2162.x * cbModelParam._m0[1u].z;
        _2180 = _2162.y * cbModelParam._m0[1u].z;
        _2182 = _2162.z * cbModelParam._m0[1u].z;
    }
    float _2195 = (((_1186 * _1135) + _1187) * _1151) * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2197 = (((_1186 * _1137) + _1187) * _1151) * ((cbModelParam._m0[1u].w * (_2180 - _2082)) + _2082);
    float _2199 = (((_1186 * _1138) + _1187) * _1151) * ((cbModelParam._m0[1u].w * (_2182 - _2084)) + _2084);
    float _2202 = fma(_2199, cbSceneParam._m0[89u].z, fma(_2197, cbSceneParam._m0[89u].y, _2195 * cbSceneParam._m0[89u].x));
    float _2205 = fma(_2199, cbSceneParam._m0[90u].z, fma(_2197, cbSceneParam._m0[90u].y, _2195 * cbSceneParam._m0[90u].x));
    float _2208 = fma(_2199, cbSceneParam._m0[91u].z, fma(_2197, cbSceneParam._m0[91u].y, _2195 * cbSceneParam._m0[91u].x));
    float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2246 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2255 = _2242 / _2254;
    float _2256 = _2246 / _2254;
    float _2257 = _2250 / _2254;
    float _2404;
    float _2405;
    float _2406;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2284 = ((uint(_2257 > cbSceneParam._m0[59u].y) + uint(_2257 > cbSceneParam._m0[59u].x)) + uint(_2257 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2285 = _2284 + 43u;
        uint _2293 = _2284 + 44u;
        uint _2301 = _2284 + 45u;
        uint _2309 = _2284 + 46u;
        float _2320 = fma(_2254, cbSceneParam._m0[_2285].w, fma(_2250, cbSceneParam._m0[_2285].z, fma(_2246, cbSceneParam._m0[_2285].y, _2242 * cbSceneParam._m0[_2285].x)));
        float _2324 = fma(_2254, cbSceneParam._m0[_2293].w, fma(_2250, cbSceneParam._m0[_2293].z, fma(_2246, cbSceneParam._m0[_2293].y, _2242 * cbSceneParam._m0[_2293].x)));
        float _2332 = fma(_2254, cbSceneParam._m0[_2309].w, fma(_2250, cbSceneParam._m0[_2309].z, fma(_2246, cbSceneParam._m0[_2309].y, _2242 * cbSceneParam._m0[_2309].x)));
        float _2337 = cbSceneParam._m0[33u].z * _2332;
        float _2339 = cbSceneParam._m0[33u].w * _2332;
        float _2342 = fma(_2254, cbSceneParam._m0[_2301].w, fma(_2250, cbSceneParam._m0[_2301].z, fma(_2246, cbSceneParam._m0[_2301].y, _2242 * cbSceneParam._m0[_2301].x))) / _2332;
        float _2390 = (cbSceneParam._m0[33u].x - sqrt(((_2256 * _2256) + (_2255 * _2255)) + (_2257 * _2257))) * cbSceneParam._m0[33u].y;
        float _4782 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2397 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2337 + _2320) / _2332, (_2339 + _2324) / _2332), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2339 + _2320) / _2332, (_2324 - _2337) / _2332), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 - _2337) / _2332, (_2324 - _2339) / _2332), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 - _2339) / _2332, (_2337 + _2324) / _2332), _2342), 0.0)).x), vec4(0.25)));
        _2404 = 1.0 - (_2397 * cbSceneParam._m0[34u].x);
        _2405 = 1.0 - (_2397 * cbSceneParam._m0[34u].y);
        _2406 = 1.0 - (_2397 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2404 = 1.0;
        _2405 = 1.0;
        _2406 = 1.0;
    }
    float _2470;
    float _2472;
    float _2474;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2458 = fma(_2254, cbSceneParam._m0[63u].w, fma(_2250, cbSceneParam._m0[63u].z, fma(_2246, cbSceneParam._m0[63u].y, _2242 * cbSceneParam._m0[63u].x)));
        float _2459 = fma(_2254, cbSceneParam._m0[60u].w, fma(_2250, cbSceneParam._m0[60u].z, fma(_2246, cbSceneParam._m0[60u].y, _2242 * cbSceneParam._m0[60u].x))) / _2458;
        float _2460 = fma(_2254, cbSceneParam._m0[61u].w, fma(_2250, cbSceneParam._m0[61u].z, fma(_2246, cbSceneParam._m0[61u].y, _2242 * cbSceneParam._m0[61u].x))) / _2458;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2459 >= cbSceneParam._m0[64u].x) && (_2460 >= cbSceneParam._m0[64u].y)) && (_2459 <= cbSceneParam._m0[64u].z)) && (_2460 <= cbSceneParam._m0[64u].w))
        {
            float _2598 = fma(_2254, cbSceneParam._m0[62u].w, fma(_2250, cbSceneParam._m0[62u].z, fma(_2246, cbSceneParam._m0[62u].y, _2242 * cbSceneParam._m0[62u].x))) / _2458;
            float _2602 = isnan(cbSceneParam._m0[41u].w) ? _2598 : (isnan(_2598) ? cbSceneParam._m0[41u].w : max(_2598, cbSceneParam._m0[41u].w));
            float _2645 = (cbSceneParam._m0[33u].x - sqrt(((_2256 * _2256) + (_2255 * _2255)) + (_2257 * _2257))) * cbSceneParam._m0[33u].y;
            float _4798 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
            float _2652 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2459, cbSceneParam._m0[33u].w + _2460), _2602), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2459, _2460 - cbSceneParam._m0[33u].z), _2602), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2459 - cbSceneParam._m0[33u].z, _2460 - cbSceneParam._m0[33u].w), _2602), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2459 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2460), _2602), 0.0)).x), vec4(0.25)));
            float _2656 = 1.0 - (_2652 * cbSceneParam._m0[34u].x);
            float _2657 = 1.0 - (_2652 * cbSceneParam._m0[34u].y);
            float _2658 = 1.0 - (_2652 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2658) ? _2406 : (isnan(_2406) ? _2658 : min(_2406, _2658));
            frontier_phi_37_36_ladder_1 = isnan(_2657) ? _2405 : (isnan(_2405) ? _2657 : min(_2405, _2657));
            frontier_phi_37_36_ladder_2 = isnan(_2656) ? _2404 : (isnan(_2404) ? _2656 : min(_2404, _2656));
        }
        else
        {
            frontier_phi_37_36_ladder = _2406;
            frontier_phi_37_36_ladder_1 = _2405;
            frontier_phi_37_36_ladder_2 = _2404;
        }
        _2470 = frontier_phi_37_36_ladder_2;
        _2472 = frontier_phi_37_36_ladder_1;
        _2474 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2470 = _2404;
        _2472 = _2405;
        _2474 = _2406;
    }
    uvec4 _2479 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2481 = _2479.x * 14u;
    uint _2482 = _2481 + 13u;
    float _2489 = _1151 + (-1.0);
    float _2494 = (cbLight._m0[_2482].x * _2489) + 1.0;
    float _2495 = (cbLight._m0[_2482].y * _2489) + 1.0;
    float _2496 = (cbLight._m0[_2482].z * _2489) + 1.0;
    float _2497 = (cbLight._m0[_2482].w * _2489) + 1.0;
    uint _2498 = _2481 + 5u;
    float _2504 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    uint _2508 = _2481 + 4u;
    float _2517 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
    uint _2521 = _2481 | 1u;
    float _2532 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_974, _975, _976));
    float _2535 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_974, _975, _976));
    float _4834 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _4845 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2540 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * 0.3183098733425140380859375;
    float _2542 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * 0.3183098733425140380859375;
    float _2549 = ((cbLight._m0[_2498].x * _2504) * _2542) + (((cbLight._m0[_2508].x * _2470) * _2517) * _2540);
    float _2550 = ((_2504 * cbLight._m0[_2498].y) * _2542) + (((cbLight._m0[_2508].y * _2472) * _2517) * _2540);
    float _2551 = ((_2504 * cbLight._m0[_2498].z) * _2542) + (((cbLight._m0[_2508].z * _2474) * _2517) * _2540);
    uvec4 _2555 = floatBitsToUint(cbLight._m0[_2481 + 12u]);
    bool _2557 = _2555.x == 0u;
    float _2659;
    float _2661;
    float _2663;
    if (_2557)
    {
        _2659 = _2549;
        _2661 = _2550;
        _2663 = _2551;
    }
    else
    {
        uint _2667 = _2481 + 6u;
        float _2683 = (dot(vec3(cbLight._m0[_2481 + 2u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2684 = _2683 * _2683;
        float _4856 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2685 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2686 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        _2659 = (((cbLight._m0[_2667].x * 0.3183098733425140380859375) * _2685) * _2686) + _2549;
        _2661 = (((cbLight._m0[_2667].y * 0.3183098733425140380859375) * _2685) * _2686) + _2550;
        _2663 = (((cbLight._m0[_2667].z * 0.3183098733425140380859375) * _2685) * _2686) + _2551;
    }
    bool _2666 = _2555.y == 0u;
    float _2721;
    float _2723;
    float _2725;
    if (_2666)
    {
        _2721 = _2659;
        _2723 = _2661;
        _2725 = _2663;
    }
    else
    {
        uint _2894 = _2481 + 7u;
        float _2910 = (dot(vec3(cbLight._m0[_2481 + 3u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2911 = _2910 * _2910;
        float _4872 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2912 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2913 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2721 = (((cbLight._m0[_2894].x * 0.3183098733425140380859375) * _2912) * _2913) + _2659;
        _2723 = (((cbLight._m0[_2894].y * 0.3183098733425140380859375) * _2912) * _2913) + _2661;
        _2725 = (((cbLight._m0[_2894].z * 0.3183098733425140380859375) * _2912) * _2913) + _2663;
    }
    uint _2728 = _2481 + 8u;
    float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _977) * 0.949999988079071044921875);
    float _2742 = _2741 * _2741;
    float _2743 = cbLight._m0[_2481].x + _1053;
    float _2744 = cbLight._m0[_2481].y + _1054;
    float _2745 = cbLight._m0[_2481].z + _1055;
    float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
    float _2750 = _2749 * _2743;
    float _2751 = _2749 * _2744;
    float _2752 = _2749 * _2745;
    float _2753 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2481].xyz));
    float _4888 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2756 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _4899 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _2757 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2758 = dot(vec3(_974, _975, _976), vec3(_2750, _2751, _2752));
    float _4910 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2762 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2750, _2751, _2752));
    float _4921 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2766 = _2742 * _2742;
    float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
    float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2779 = 0.959999978542327880859375 - _1132;
    float _2781 = 0.959999978542327880859375 - _1133;
    float _2782 = 0.959999978542327880859375 - _1134;
    float _2789 = 1.0 - _2742;
    float _2800 = (0.5 / (((_2757 * ((_2756 * _2789) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _2789) + _2742) * _2756))) * _2756;
    float _4932 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2802 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
    uint _2816 = _2481 + 9u;
    float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _977) * 0.949999988079071044921875);
    float _2828 = _2827 * _2827;
    float _2829 = cbLight._m0[_2521].x + _1053;
    float _2830 = cbLight._m0[_2521].y + _1054;
    float _2831 = cbLight._m0[_2521].z + _1055;
    float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
    float _2836 = _2835 * _2829;
    float _2837 = _2835 * _2830;
    float _2838 = _2835 * _2831;
    float _2839 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2521].xyz));
    float _4943 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
    float _2842 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
    float _2843 = dot(vec3(_974, _975, _976), vec3(_2836, _2837, _2838));
    float _4954 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2846 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
    float _2847 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2836, _2837, _2838));
    float _4965 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2851 = _2828 * _2828;
    float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
    float _2862 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
    float _2869 = 1.0 - _2828;
    float _2879 = (0.5 / (((_2757 * ((_2842 * _2869) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _2869) + _2828) * _2842))) * _2842;
    float _4976 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
    float _2881 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
    float _2891 = (((((_2862 * _2779) + _1135) * cbLight._m0[_2816].x) * _2881) * _2504) + ((((cbLight._m0[_2728].x * _2470) * ((_2778 * _2779) + _1135)) * _2802) * _2517);
    float _2892 = (((((_2862 * _2781) + _1137) * cbLight._m0[_2816].y) * _2881) * _2504) + ((((cbLight._m0[_2728].y * _2472) * ((_2778 * _2781) + _1137)) * _2802) * _2517);
    float _2893 = (((((_2862 * _2782) + _1138) * cbLight._m0[_2816].z) * _2881) * _2504) + ((((cbLight._m0[_2728].z * _2474) * ((_2778 * _2782) + _1138)) * _2802) * _2517);
    float _2949;
    float _2951;
    float _2953;
    if (_2557)
    {
        _2949 = _2891;
        _2951 = _2892;
        _2953 = _2893;
    }
    else
    {
        uint _2955 = _2481 + 2u;
        uint _2959 = _2481 + 10u;
        float _2973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2955].w)) * _977) * 0.949999988079071044921875);
        float _2974 = _2973 * _2973;
        float _2975 = cbLight._m0[_2955].x + _1053;
        float _2976 = cbLight._m0[_2955].y + _1054;
        float _2977 = cbLight._m0[_2955].z + _1055;
        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
        float _2982 = _2981 * _2975;
        float _2983 = _2981 * _2976;
        float _2984 = _2981 * _2977;
        float _2985 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2955].xyz));
        float _4987 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _2989 = dot(vec3(_974, _975, _976), vec3(_2982, _2983, _2984));
        float _4998 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _2993 = dot(vec3(cbLight._m0[_2955].xyz), vec3(_2982, _2983, _2984));
        float _5009 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2997 = _2974 * _2974;
        float _3001 = ((_2992 * _2992) * (_2997 + (-1.0))) + 1.0;
        float _3008 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
        float _3015 = 1.0 - _2974;
        float _3025 = (0.5 / (((_2757 * ((_2988 * _3015) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _3015) + _2974) * _2988))) * _2988;
        float _5020 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3027 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2997 / ((_3001 * _3001) * 3.141590118408203125));
        float _3028 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        _2949 = (((((_3008 * _2779) + _1135) * cbLight._m0[_2959].x) * _3027) * _3028) + _2891;
        _2951 = (((((_3008 * _2781) + _1137) * cbLight._m0[_2959].y) * _3027) * _3028) + _2892;
        _2953 = (((((_3008 * _2782) + _1138) * cbLight._m0[_2959].z) * _3027) * _3028) + _2893;
    }
    float _3059;
    float _3061;
    float _3063;
    if (_2666)
    {
        _3059 = _2949;
        _3061 = _2951;
        _3063 = _2953;
    }
    else
    {
        uint _3070 = _2481 + 3u;
        uint _3074 = _2481 + 11u;
        float _3088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3070].w)) * _977) * 0.949999988079071044921875);
        float _3089 = _3088 * _3088;
        float _3090 = cbLight._m0[_3070].x + _1053;
        float _3091 = cbLight._m0[_3070].y + _1054;
        float _3092 = cbLight._m0[_3070].z + _1055;
        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
        float _3097 = _3096 * _3090;
        float _3098 = _3096 * _3091;
        float _3099 = _3096 * _3092;
        float _3100 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_3070].xyz));
        float _5036 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3103 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _3104 = dot(vec3(_974, _975, _976), vec3(_3097, _3098, _3099));
        float _5047 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3107 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
        float _3108 = dot(vec3(cbLight._m0[_3070].xyz), vec3(_3097, _3098, _3099));
        float _5058 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3112 = _3089 * _3089;
        float _3116 = ((_3107 * _3107) * (_3112 + (-1.0))) + 1.0;
        float _3123 = exp2(log2(1.0 - (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) * 5.0);
        float _3130 = 1.0 - _3089;
        float _3140 = (0.5 / (((_2757 * ((_3103 * _3130) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _3130) + _3089) * _3103))) * _3103;
        float _5069 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
        float _3142 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3112 / ((_3116 * _3116) * 3.141590118408203125));
        float _3143 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _3059 = (((((_3123 * _2779) + _1135) * cbLight._m0[_3074].x) * _3142) * _3143) + _2949;
        _3061 = (((((_3123 * _2781) + _1137) * cbLight._m0[_3074].y) * _3142) * _3143) + _2951;
        _3063 = (((((_3123 * _2782) + _1138) * cbLight._m0[_3074].z) * _3142) * _3143) + _2953;
    }
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    if (_2479.y == 0u)
    {
        uvec4 _3164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3165 = _3164.x;
        uint _3176 = uint((float(_3164.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1074) / _3165))) + floor(float(uint(cbSceneParam._m0[85u].x * _1073) / _3165)));
        float _3186 = (log2(_2257 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3187 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
        uint _3190 = uint(isnan(14.0) ? _3187 : (isnan(_3187) ? 14.0 : min(_3187, 14.0)));
        uvec4 _3195 = texelFetch(g_lightClusterGridBuffer, int(((_3190 << 2u) + (_3176 << 6u)) >> 2u));
        uint _3196 = _3195.x;
        uint _3197 = _3164.z;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        if (((((1u << ((_3197 >> 4u) & 15u)) + 4294967295u) & _3196) == 0u) || ((_3197 & 240u) == 0u))
        {
            _3276 = 0.0;
            _3278 = 0.0;
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
        }
        else
        {
            float _3277;
            float _3279;
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3429 = 0.0;
            float _3430 = 0.0;
            float _3431 = 0.0;
            float _3432 = 0.0;
            float _3433 = 0.0;
            float _3434 = 0.0;
            uint _3435 = 0u;
            uint _3444;
            bool _3445;
            for (;;)
            {
                _3444 = texelFetch(g_lightClassification, int((((_3190 << 5u) + (_3176 << 9u)) + (_3435 << 2u)) >> 2u)).x;
                _3445 = _3444 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3445)
                {
                    frontier_phi_71_pred = _3434;
                    frontier_phi_71_pred_1 = _3433;
                    frontier_phi_71_pred_2 = _3432;
                    frontier_phi_71_pred_3 = _3431;
                    frontier_phi_71_pred_4 = _3430;
                    frontier_phi_71_pred_5 = _3429;
                }
                else
                {
                    float _3574;
                    float _3575;
                    float _3576;
                    float _3577;
                    float _3578;
                    float _3579;
                    uint _3580;
                    _3574 = _3429;
                    _3575 = _3430;
                    _3576 = _3431;
                    _3577 = _3432;
                    _3578 = _3433;
                    _3579 = _3434;
                    _3580 = _3444;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    for (;;)
                    {
                        uint _3584 = uint(findLSB(_3580)) + (_3435 << 5u);
                        uint _3581 = (_3580 + 4294967295u) & _3580;
                        uint _3586 = _3584 * 48u;
                        vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3586)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 3u)).x));
                        uint _3606 = (_3584 * 48u) + 4u;
                        vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3606)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 3u)).x));
                        uint _3625 = (_3584 * 48u) + 8u;
                        vec3 _3636 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3625)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 2u)).x));
                        float _3640 = _3600.x - _2255;
                        float _3641 = _3600.y - _2256;
                        float _3642 = _3600.z - _2257;
                        float _3643 = dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642));
                        float _3646 = inversesqrt(_3643);
                        float _3647 = _3646 * _3640;
                        float _3648 = _3646 * _3641;
                        float _3649 = _3646 * _3642;
                        float _3650 = dot(vec3(_1092, _1095, _1098), vec3(_3647, _3648, _3649));
                        float _3655 = 1.0 - (_3643 * _3600.w);
                        float _5095 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3656 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3657 = sqrt(_3643) * _3619.w;
                        float _3660 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                        float _3661 = _3660 * _3660;
                        float _3664 = ((1.0 - _3661) * _3650) + _3661;
                        float _3667 = _3657 * _3657;
                        float _3671 = ((isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0))) * _3656) / ((_3667 * 0.699999988079071044921875) + 1.0);
                        float _3675 = (-0.0) - _2255;
                        float _3676 = (-0.0) - _2256;
                        float _3677 = (-0.0) - _2257;
                        float _3681 = inversesqrt(dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677)));
                        float _3682 = _3681 * _3675;
                        float _3683 = _3681 * _3676;
                        float _3684 = _3681 * _3677;
                        float _3691 = exp2(log2(1.0 / ((_3667 * 3.5) + 5.0)) * 0.25);
                        float _3692 = 1.0 - _1167;
                        float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                        float _3700 = _3699 * _3699;
                        float _3701 = _3700 * _3700;
                        float _3702 = _3682 + _3647;
                        float _3703 = _3683 + _3648;
                        float _3704 = _3684 + _3649;
                        float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                        float _3712 = dot(vec3(_1092, _1095, _1098), vec3(_3682, _3683, _3684));
                        float _5111 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                        float _3715 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3716 = dot(vec3(_1092, _1095, _1098), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                        float _5122 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                        float _3719 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                        float _3724 = _3660 * _3700;
                        float _3725 = _3724 * _3724;
                        float _3728 = ((1.0 - _3725) * _3650) + _3725;
                        float _5133 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                        float _3729 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                        float _3730 = 1.0 - _3700;
                        float _3740 = (0.5 / (((_3729 * ((_3715 * _3730) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3729 * _3730) + _3700) * _3715))) * _3729;
                        float _5144 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                        float _3751 = (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0)))) / ((_3723 * _3723) * ((_3667 * 2.1991131305694580078125) + 3.141590118408203125))) * _3656;
                        _3504 = (_3671 * _3619.x) + _3577;
                        _3505 = (_3671 * _3619.y) + _3578;
                        _3506 = (_3671 * _3619.z) + _3579;
                        _3501 = (_3751 * _3636.x) + _3574;
                        _3502 = (_3751 * _3636.y) + _3575;
                        _3503 = (_3751 * _3636.z) + _3576;
                        if (_3581 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3574 = _3501;
                            _3575 = _3502;
                            _3576 = _3503;
                            _3577 = _3504;
                            _3578 = _3505;
                            _3579 = _3506;
                            _3580 = _3581;
                        }
                    }
                    frontier_phi_71_pred = _3506;
                    frontier_phi_71_pred_1 = _3505;
                    frontier_phi_71_pred_2 = _3504;
                    frontier_phi_71_pred_3 = _3503;
                    frontier_phi_71_pred_4 = _3502;
                    frontier_phi_71_pred_5 = _3501;
                }
                _3287 = frontier_phi_71_pred;
                _3285 = frontier_phi_71_pred_1;
                _3283 = frontier_phi_71_pred_2;
                _3281 = frontier_phi_71_pred_3;
                _3279 = frontier_phi_71_pred_4;
                _3277 = frontier_phi_71_pred_5;
                uint _3436 = _3435 + 1u;
                if (_3436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3429 = _3277;
                    _3430 = _3279;
                    _3431 = _3281;
                    _3432 = _3283;
                    _3433 = _3285;
                    _3434 = _3287;
                    _3435 = _3436;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3276 = _3277;
            _3278 = _3279;
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
        }
        uvec4 _3290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3291 = _3290.z;
        uint _3293 = (_3291 >> 8u) & 15u;
        float _3397;
        float _3399;
        float _3401;
        float _3403;
        float _3405;
        float _3407;
        if (((4294967295u << _3293) & _3196) == 0u)
        {
            _3397 = _3276;
            _3399 = _3278;
            _3401 = _3280;
            _3403 = _3282;
            _3405 = _3284;
            _3407 = _3286;
        }
        else
        {
            float _3422 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
            float _3423 = _3422 * _2255;
            float _3424 = _3422 * _2256;
            float _3425 = _3422 * _2257;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3293 < ((_3291 >> 12u) & 15u))
            {
                float _3398;
                float _3400;
                float _3402;
                float _3404;
                float _3406;
                float _3408;
                float _3557 = _3276;
                float _3558 = _3278;
                float _3559 = _3280;
                float _3560 = _3282;
                float _3561 = _3284;
                float _3562 = _3286;
                uint _3563 = _3293;
                uint _3572;
                bool _3573;
                for (;;)
                {
                    _3572 = texelFetch(g_lightClassification, int((((_3190 << 5u) + (_3176 << 9u)) + (_3563 << 2u)) >> 2u)).x;
                    _3573 = _3572 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3573)
                    {
                        frontier_phi_82_pred = _3562;
                        frontier_phi_82_pred_1 = _3561;
                        frontier_phi_82_pred_2 = _3560;
                        frontier_phi_82_pred_3 = _3559;
                        frontier_phi_82_pred_4 = _3558;
                        frontier_phi_82_pred_5 = _3557;
                    }
                    else
                    {
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _4058;
                        float _4059;
                        float _4060;
                        float _4061;
                        float _4062;
                        float _4063;
                        float _3778 = _3557;
                        float _3779 = _3558;
                        float _3780 = _3559;
                        float _3781 = _3560;
                        float _3782 = _3561;
                        float _3783 = _3562;
                        uint _3784 = _3572;
                        uint _3785;
                        vec4 _3810;
                        float _3811;
                        vec4 _3826;
                        vec3 _3838;
                        vec4 _3853;
                        vec4 _3868;
                        float _3914;
                        bool _3915;
                        for (;;)
                        {
                            uint _3795 = ((_3563 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3784));
                            _3785 = (_3784 + 4294967295u) & _3784;
                            uint _3797 = _3795 * 40u;
                            _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            _3811 = _3810.w;
                            uint _3813 = (_3795 * 40u) + 4u;
                            _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3828 = (_3795 * 40u) + 8u;
                            _3838 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x));
                            uint _3840 = (_3795 * 40u) + 16u;
                            _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            uint _3855 = (_3795 * 40u) + 20u;
                            _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            uint _3870 = (_3795 * 40u) + 24u;
                            vec4 _3883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 3u)).x));
                            uint _3889 = (_3795 * 40u) + 28u;
                            vec4 _3902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 3u)).x));
                            _3914 = fma(_2257, _3902.z, fma(_2256, _3902.y, _3902.x * _2255)) + _3902.w;
                            _3915 = !((fma(_2257, _3883.z, fma(_2256, _3883.y, _3883.x * _2255)) + _3883.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3915)
                            {
                                float _3942 = _3810.x - _2255;
                                float _3943 = _3810.y - _2256;
                                float _3944 = _3810.z - _2257;
                                float _3945 = dot(vec3(_3942, _3943, _3944), vec3(_3942, _3943, _3944));
                                float _3948 = inversesqrt(_3945);
                                float _3949 = _3948 * _3942;
                                float _3950 = _3948 * _3943;
                                float _3951 = _3948 * _3944;
                                float _3955 = 1.0 - (_3945 / (_3811 * _3811));
                                float _5155 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3956 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3960 = sqrt(_3945) * _3826.w;
                                float _3962 = 1.39999997615814208984375 / (_3960 + 1.39999997615814208984375);
                                float _3963 = _3962 * _3962;
                                float _3966 = ((1.0 - _3963) * dot(vec3(_3949, _3950, _3951), vec3(_1092, _1095, _1098))) + _3963;
                                float _3969 = _3960 * _3960;
                                float _3973 = (fma(_2257, _3853.z, fma(_2256, _3853.y, _3853.x * _2255)) + _3853.w) / _3914;
                                float _3974 = (fma(_2257, _3868.z, fma(_2256, _3868.y, _3868.x * _2255)) + _3868.w) / _3914;
                                float _3978 = 1.0 - dot(vec2(_3973, _3974), vec2(_3973, _3974));
                                float _5171 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3979 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3980 = _3979 * (((isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0))) * _3956) / ((_3969 * 0.699999988079071044921875) + 1.0));
                                float _3992 = exp2(log2(1.0 / ((_3969 * 3.5) + 5.0)) * 0.25);
                                float _3993 = 1.0 - _1167;
                                float _4000 = sqrt(1.0 - ((1.0 - (_3993 * _3993)) * (1.0 - (_3992 * _3992))));
                                float _4001 = _4000 * _4000;
                                float _4002 = _4001 * _4001;
                                float _4003 = _3949 - _3423;
                                float _4004 = _3950 - _3424;
                                float _4005 = _3951 - _3425;
                                float _4009 = inversesqrt(dot(vec3(_4003, _4004, _4005), vec3(_4003, _4004, _4005)));
                                float _4013 = dot(vec3(_1092, _1095, _1098), vec3((-0.0) - _3423, (-0.0) - _3424, (-0.0) - _3425));
                                float _5182 = isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0));
                                float _4016 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _4017 = dot(vec3(_1092, _1095, _1098), vec3(_4009 * _4003, _4009 * _4004, _4009 * _4005));
                                float _5193 = isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0));
                                float _4020 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _4024 = ((_4020 * _4020) * (_4002 + (-1.0))) + 1.0;
                                float _4025 = _3962 * _4001;
                                float _4026 = _4025 * _4025;
                                float _4032 = ((1.0 - _4026) * dot(vec3(_1092, _1095, _1098), vec3(_3949, _3950, _3951))) + _4026;
                                float _5204 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4033 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                                float _4034 = 1.0 - _4001;
                                float _4044 = (0.5 / (((_4033 * ((_4016 * _4034) + _4001)) + 9.9999999392252902907785028219223e-09) + (((_4033 * _4034) + _4001) * _4016))) * _4033;
                                float _5215 = isnan(0.0) ? _4044 : (isnan(_4044) ? 0.0 : max(_4044, 0.0));
                                float _4054 = (_3979 * _3956) * (((_4002 * 3.1415927410125732421875) * (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0)))) / ((_4024 * _4024) * ((_3969 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3980 * _3826.z;
                                frontier_phi_88_pred_1 = _3980 * _3826.y;
                                frontier_phi_88_pred_2 = _3980 * _3826.x;
                                frontier_phi_88_pred_3 = _4054 * _3838.z;
                                frontier_phi_88_pred_4 = _4054 * _3838.y;
                                frontier_phi_88_pred_5 = _4054 * _3838.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4063 = frontier_phi_88_pred;
                            _4062 = frontier_phi_88_pred_1;
                            _4061 = frontier_phi_88_pred_2;
                            _4060 = frontier_phi_88_pred_3;
                            _4059 = frontier_phi_88_pred_4;
                            _4058 = frontier_phi_88_pred_5;
                            _3768 = _4061 + _3781;
                            _3769 = _4062 + _3782;
                            _3770 = _4063 + _3783;
                            _3765 = _4058 + _3778;
                            _3766 = _4059 + _3779;
                            _3767 = _4060 + _3780;
                            if (_3785 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3778 = _3765;
                                _3779 = _3766;
                                _3780 = _3767;
                                _3781 = _3768;
                                _3782 = _3769;
                                _3783 = _3770;
                                _3784 = _3785;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3770;
                        frontier_phi_82_pred_1 = _3769;
                        frontier_phi_82_pred_2 = _3768;
                        frontier_phi_82_pred_3 = _3767;
                        frontier_phi_82_pred_4 = _3766;
                        frontier_phi_82_pred_5 = _3765;
                    }
                    _3408 = frontier_phi_82_pred;
                    _3406 = frontier_phi_82_pred_1;
                    _3404 = frontier_phi_82_pred_2;
                    _3402 = frontier_phi_82_pred_3;
                    _3400 = frontier_phi_82_pred_4;
                    _3398 = frontier_phi_82_pred_5;
                    uint _3564 = _3563 + 1u;
                    if (_3564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3557 = _3398;
                        _3558 = _3400;
                        _3559 = _3402;
                        _3560 = _3404;
                        _3561 = _3406;
                        _3562 = _3408;
                        _3563 = _3564;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3404;
                frontier_phi_63_64_ladder_1 = _3408;
                frontier_phi_63_64_ladder_2 = _3406;
                frontier_phi_63_64_ladder_3 = _3402;
                frontier_phi_63_64_ladder_4 = _3400;
                frontier_phi_63_64_ladder_5 = _3398;
            }
            else
            {
                frontier_phi_63_64_ladder = _3282;
                frontier_phi_63_64_ladder_1 = _3286;
                frontier_phi_63_64_ladder_2 = _3284;
                frontier_phi_63_64_ladder_3 = _3280;
                frontier_phi_63_64_ladder_4 = _3278;
                frontier_phi_63_64_ladder_5 = _3276;
            }
            _3397 = frontier_phi_63_64_ladder_5;
            _3399 = frontier_phi_63_64_ladder_4;
            _3401 = frontier_phi_63_64_ladder_3;
            _3403 = frontier_phi_63_64_ladder;
            _3405 = frontier_phi_63_64_ladder_2;
            _3407 = frontier_phi_63_64_ladder_1;
        }
        float _3412 = isnan(1.0) ? _1151 : (isnan(_1151) ? 1.0 : min(_1151, 1.0));
        _3209 = (_3412 * _3403) + _2721;
        _3211 = (_3412 * _3405) + _2723;
        _3213 = (_3412 * _3407) + _2725;
        _3215 = ((_3397 * _1135) * _3412) + _3059;
        _3217 = ((_3399 * _1137) * _3412) + _3061;
        _3219 = ((_3401 * _1138) * _3412) + _3063;
    }
    else
    {
        _3209 = _2721;
        _3211 = _2723;
        _3213 = _2725;
        _3215 = _3059;
        _3217 = _3061;
        _3219 = _3063;
    }
    float _5231 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _5242 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _5253 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _3236 = ((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3209 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1151))) + ((_3215 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1989)) * cbPerFrame._m0[3u].x);
    float _3237 = ((isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0))) * (_3211 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1151))) + ((_3217 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1989)) * cbPerFrame._m0[3u].x);
    float _3238 = ((isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0))) * (_3213 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1151))) + ((_3219 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1989)) * cbPerFrame._m0[3u].x);
    uint _3239 = _262 + 6u;
    float _3247 = _1073 / cbSceneParam._m0[86u].x;
    float _3248 = _1074 / cbSceneParam._m0[86u].y;
    vec4 _3262 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, (log2((isnan(cbSceneParam._m0[77u].w) ? _996 : (isnan(_996) ? cbSceneParam._m0[77u].w : min(_996, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3264 = _3262.x;
    float _3265 = _3262.y;
    float _3266 = _3262.z;
    float _3267 = _3262.w;
    float _3339;
    float _3341;
    float _3343;
    float _3345;
    if (_996 > cbSceneParam._m0[78u].w)
    {
        float _3301 = isnan(_996) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _996 : min(cbSceneParam._m0[80u].w, _996));
        float _3302 = _3301 / _996;
        float _3313 = _3302 * _1046;
        float _3314 = _1047 * _3302;
        float _3315 = (-0.0) - _3314;
        float _3317 = _3302 * _1048;
        float _3319 = (cbSceneParam._m0[77u].w * _3315) / _3301;
        float _3320 = _3319 + cbSceneParam._m0[79u].w;
        float _3321 = cbSceneParam._m0[79u].w - _3314;
        float _3327 = sqrt(((_3313 * _3313) + (_3314 * _3314)) + (_3317 * _3317));
        float _3330 = (1.0 - (cbSceneParam._m0[77u].w / _3301)) * _3327;
        float _3335 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3337 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3514;
        if (abs((_3315 - _3319) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3514 = ((((_3320 > 0.0) ? exp2(_3335 * _3320) : (2.0 - exp2(_3337 * _3320))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3330;
        }
        else
        {
            float _3458 = 1.0 / cbSceneParam._m0[80u].x;
            float _3459 = isnan(_3321) ? _3320 : (isnan(_3320) ? _3321 : max(_3320, _3321));
            float _3460 = isnan(_3321) ? _3320 : (isnan(_3320) ? _3321 : min(_3320, _3321));
            float _3469 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : min(_3459, 0.0));
            float _3470 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : min(_3460, 0.0));
            _3514 = ((abs(_3327 / _3315) * cbSceneParam._m0[80u].y) * ((((_3469 - _3470) * 2.0) - ((exp2(_3335 * (isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0)))) - exp2(_3335 * (isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))))) * _3458)) - ((exp2(_3337 * _3469) - exp2(_3337 * _3470)) * _3458))) + (_3330 * cbSceneParam._m0[80u].z);
        }
        vec4 _3516 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, 1.0), 0.0);
        float _3525 = exp2((_3514 * (-1.44269502162933349609375)) * (1.0 - _3516.w));
        float _3526 = log2(_3525);
        float _3542 = log2(_3267);
        _3339 = (exp2(_3542 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3526 * cbSceneParam._m0[78u].x)) * _3516.x) / cbSceneParam._m0[78u].x)) + _3264;
        _3341 = (exp2(_3542 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3526 * cbSceneParam._m0[78u].y)) * _3516.y) / cbSceneParam._m0[78u].y)) + _3265;
        _3343 = (exp2(_3542 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3526 * cbSceneParam._m0[78u].z)) * _3516.z) / cbSceneParam._m0[78u].z)) + _3266;
        _3345 = _3525 * _3267;
    }
    else
    {
        _3339 = _3264;
        _3341 = _3265;
        _3343 = _3266;
        _3345 = _3267;
    }
    bool _3552;
    vec4 _3355;
    vec4 _3377;
    float _3379;
    float _3383;
    float _3384;
    float _3385;
    float _3386;
    bool _3396;
    for (;;)
    {
        _3355 = cbMatDynParam._m0[0u];
        float _3357 = roundEven(_3355.y);
        bool _3358 = _3357 == 3.0;
        float _3359 = log2(_3345);
        float _3366 = exp2(_3359 * cbSceneParam._m0[78u].x) * _3236;
        float _3367 = exp2(_3359 * cbSceneParam._m0[78u].y) * _3237;
        float _3368 = exp2(_3359 * cbSceneParam._m0[78u].z) * _3238;
        float _3375 = _1062 + (-0.5);
        _3377 = cbMtdParam._m0[1u];
        _3379 = _3377.y * _3375;
        float _3382 = (_3357 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3383 = _3382 * (_3358 ? _3366 : (_3366 + (cbSceneParam._m0[72u].w * _3339)));
        _3384 = _3382 * (_3358 ? _3367 : (_3367 + (cbSceneParam._m0[72u].w * _3341)));
        _3385 = _3382 * (_3358 ? _3368 : (_3368 + (cbSceneParam._m0[72u].w * _3343)));
        _3386 = _3375 * 0.999000012874603271484375;
        _3396 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3396)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _3386) < 0.5)
            {
                _3552 = true;
                break;
            }
        }
        uint _3493 = _1111 + uint(_3355.w);
        if ((cbInstanceData._m0[_3493].w < 1.0) && ((cbInstanceData._m0[_3493].w + _3386) < 0.5))
        {
            _3552 = true;
            break;
        }
        if ((_3379 + 1.0) < _3377.x)
        {
            _3552 = true;
            break;
        }
        _3552 = false;
        break;
    }
    float _3756;
    if (_3552)
    {
        discard_state = true;
        _3756 = 0.0;
    }
    else
    {
        _3756 = cbInstanceData._m0[_3239].w;
    }
    SV_Target.x = _3383;
    SV_Target.y = _3384;
    SV_Target.z = _3385;
    SV_Target.w = _3756;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3239].w;
    discard_exit();
}


