#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1530;
float _3908;
float _3909;
float _3910;
float _3911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3920 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _450 = (_443 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _451 = (_443 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _452 = (_443 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3931 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _529 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450);
    float _532 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451);
    float _535 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452);
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _602 = ((_574.x - _593) * _443) + _593;
    float _603 = ((_574.y - _594) * _443) + _594;
    float _604 = ((_574.z - _595) * _443) + _595;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _629 = ((_616.z - _604) * _516) + _604;
    float _632 = ((((_616.x - _602) * _516) + _602) * 2.0) + (-1.0);
    float _634 = ((((_616.y - _603) * _516) + _603) * 2.0) + (-1.0);
    float _635 = dot(vec2(_632, _634), vec2(_632, _634));
    float _3942 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _681 = _679.x;
    float _682 = 1.0 - _681;
    float _691 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _694 = ((isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : min(_691, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _703 = (_694 - ((((((_681 - _682) * cbMtdParam._m0[24u].z) + _682) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _694))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3963 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _711 = (_704 * ((_554.x * cbMtdParam._m0[18u].x) - _529)) + _529;
    float _712 = (_704 * ((_554.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _713 = (_704 * ((_554.z * cbMtdParam._m0[18u].z) - _535)) + _535;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _727 = _725.x;
    float _728 = 1.0 - _727;
    float _753 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_727 - _728) * cbMtdParam._m0[24u].w) + _728) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3974 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _762 = ((((cbMtdParam._m0[10u].x - _711) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _754) + _711;
    float _763 = ((((cbMtdParam._m0[10u].y - _712) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _754) + _712;
    float _764 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _713)) * _754) + _713;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _792 = _790.x;
    float _809 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _792) * _443) + _792;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _809) * _516) + _809;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _826) * cbMtdParam._m0[19u].z) + _826;
    float _832 = _830 - (_830 * _704);
    float _834 = _832 - (_832 * _754);
    float _838 = (cbMtdParam._m0[19u].w * (_654.z - _629)) + _629;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _3985 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = (_704 * (_852.z - _838)) + _838;
    float _872 = ((cbMtdParam._m0[23u].x - _869) * _754) + _869;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _897 = (_891.x * 2.0) + (-1.0);
    float _898 = (_891.y * 2.0) + (-1.0);
    float _899 = dot(vec2(_897, _898), vec2(_897, _898));
    float _3996 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _907 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _632;
    float _908 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _634;
    float _920 = (((_859 - _907) + (cbMtdParam._m0[21u].x * _907)) * _704) + _907;
    float _921 = (((_860 - _908) + (cbMtdParam._m0[21u].x * _908)) * _704) + _908;
    float _922 = (_704 * (sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) - _640)) + _640;
    float _933 = (((_897 - _920) + (_920 * cbMtdParam._m0[22u].z)) * _754) + _920;
    float _934 = (((_898 - _921) + (_921 * cbMtdParam._m0[22u].z)) * _754) + _921;
    float _935 = ((sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _922) * _754) + _922;
    float _937 = cbMtdParam._m0[22u].x + _654.w;
    float _940 = fma(_935, _254 * NORMAL.x, fma(_934, _261 * TANGENT.x, (_247 * _239) * _933));
    float _943 = fma(_935, _254 * NORMAL.y, fma(_934, _261 * TANGENT.y, (_247 * _240) * _933));
    float _946 = fma(_935, _254 * NORMAL.z, fma(_934, _261 * TANGENT.z, (_247 * _241) * _933));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _4007 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _954 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4029 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4040 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4051 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4062 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _959 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    vec4 _1037 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1039 = _1037.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1211 = sqrt(((_1023 * _1023) + (_1024 * _1024)) + (_1025 * _1025));
        float _1217 = (cbMatDynParam._m0[5u].x * _1211) + cbMatDynParam._m0[5u].y;
        float _4073 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1222 = (cbMatDynParam._m0[5u].z * _1211) + cbMatDynParam._m0[5u].w;
        float _4084 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) - _1218)) + _1218) < ((_1039 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1050 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1051 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1069 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1072 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1075 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1088 = _267 + 9u;
    uint _1089 = _1088 + uint(cbMatDynParam._m0[0u].w);
    float _1095 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_1089].x;
    float _1096 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_1089].y;
    float _1097 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_1089].z;
    float _4095 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1101 = 1.0 - _959;
    float _1102 = _1098 * _1101;
    float _1103 = _1099 * _1101;
    float _1104 = _1100 * _1101;
    float _1109 = (_1098 + (-0.039999999105930328369140625)) * _959;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _959;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _959;
    float _1112 = _1109 + 0.039999999105930328369140625;
    float _1114 = _1110 + 0.039999999105930328369140625;
    float _1115 = _1111 + 0.039999999105930328369140625;
    vec4 _1124 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1050, cbSceneParam._m0[86u].y * _1051));
    float _1128 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * TEXCOORD_5.w) * _1124.x;
    float _1129 = dot(vec3(_951, _952, _953), vec3(_1030, _1031, _1032));
    float _1132 = _1129 * 2.0;
    float _1136 = (_1132 * _951) - _1030;
    float _1137 = (_1132 * _952) - _1031;
    float _1138 = (_1132 * _953) - _1032;
    float _1142 = abs(dot(vec3(_1030, _1031, _1032), vec3(_951, _952, _953)));
    float _4128 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1144 = sqrt(_954);
    float _1157 = exp2((_1144 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1144 * 3.0));
    float _1163 = (1.0 - _1157) * ((_1144 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1164 = _1157 * _1144;
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1529;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1254 = fma(_1200, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192));
        float _1258 = fma(_1200, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192));
        float _1262 = fma(_1200, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192));
        float _1287 = _1192 + _951;
        float _1288 = _1196 + _952;
        float _1289 = _1200 + _953;
        float _1299 = fma(_1289, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287)) - _1254;
        float _1300 = fma(_1289, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287)) - _1258;
        float _1301 = fma(_1289, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287)) - _1262;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1254 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1258 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[34u].z) + ((((((_1262 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1357 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1323.x + (-0.5));
        float _1359 = _1357 * (_1323.y + (-0.5));
        float _1360 = _1357 * (_1323.z + (-0.5));
        float _1367 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1330.x + (-0.5));
        float _1369 = _1367 * (_1330.y + (-0.5));
        float _1370 = _1367 * (_1330.z + (-0.5));
        float _1377 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1337.x + (-0.5));
        float _1379 = _1377 * (_1337.y + (-0.5));
        float _1380 = _1377 * (_1337.z + (-0.5));
        float _1387 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1344.x + (-0.5));
        float _1389 = _1387 * (_1344.y + (-0.5));
        float _1390 = _1387 * (_1344.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1411 = (dot(vec3(_951, _952, _953), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1421 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4176 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1423 + 1.0))) + _1428) * _1391;
        float _1438 = _1359 * 0.5;
        float _1439 = _1369 * 0.5;
        float _1440 = _1379 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_951, _952, _953), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4209 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1465 + 1.0))) + _1470) * _1392;
        float _1480 = _1360 * 0.5;
        float _1481 = _1370 * 0.5;
        float _1482 = _1380 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_951, _952, _953), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4242 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1507 + 1.0))) + _1512) * _1393;
        _1529 = _1360;
        _1531 = _1359;
        _1532 = _1358;
        _1533 = _1370;
        _1534 = _1369;
        _1535 = _1368;
        _1536 = _1380;
        _1537 = _1379;
        _1538 = _1378;
        _1539 = _1393;
        _1540 = _1392;
        _1541 = _1391;
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1530;
        _1531 = _1530;
        _1532 = _1530;
        _1533 = _1530;
        _1534 = _1530;
        _1535 = _1530;
        _1536 = _1530;
        _1537 = _1530;
        _1538 = _1530;
        _1539 = _1530;
        _1540 = _1530;
        _1541 = _1530;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1571 = fma(_1200, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192));
        float _1575 = fma(_1200, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192));
        float _1579 = fma(_1200, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192));
        float _1602 = _1192 + _951;
        float _1603 = _1196 + _952;
        float _1604 = _1200 + _953;
        float _1614 = fma(_1604, cbModelParam._m0[30u].z, fma(_1603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1602)) - _1571;
        float _1615 = fma(_1604, cbModelParam._m0[31u].z, fma(_1603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1602)) - _1575;
        float _1616 = fma(_1604, cbModelParam._m0[32u].z, fma(_1603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1602)) - _1579;
        float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
        float _1633 = ((_1620 * _1614) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1571 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1620 * _1615) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1575 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1620 * _1616) / cbModelParam._m0[35u].z) + ((((((_1579 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        float _1670 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1637.x + (-0.5));
        float _1672 = _1670 * (_1637.y + (-0.5));
        float _1673 = _1670 * (_1637.z + (-0.5));
        float _1680 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1644.x + (-0.5));
        float _1682 = _1680 * (_1644.y + (-0.5));
        float _1683 = _1680 * (_1644.z + (-0.5));
        float _1690 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1651.x + (-0.5));
        float _1692 = _1690 * (_1651.y + (-0.5));
        float _1693 = _1690 * (_1651.z + (-0.5));
        float _1700 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1658.x + (-0.5));
        float _1702 = _1700 * (_1658.y + (-0.5));
        float _1703 = _1700 * (_1658.z + (-0.5));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = _1671 * 0.5;
        float _1708 = _1681 * 0.5;
        float _1709 = _1691 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_951, _952, _953), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4305 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1734 + 1.0))) + _1739) * _1704;
        float _1749 = _1672 * 0.5;
        float _1750 = _1682 * 0.5;
        float _1751 = _1692 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_951, _952, _953), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4338 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1776 + 1.0))) + _1781) * _1705;
        float _1791 = _1673 * 0.5;
        float _1792 = _1683 * 0.5;
        float _1793 = _1693 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_951, _952, _953), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4371 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1818 + 1.0))) + _1823) * _1706;
        _1840 = _1673;
        _1841 = _1672;
        _1842 = _1671;
        _1843 = _1683;
        _1844 = _1682;
        _1845 = _1681;
        _1846 = _1693;
        _1847 = _1692;
        _1848 = _1691;
        _1849 = _1706;
        _1850 = _1705;
        _1851 = _1704;
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
    }
    else
    {
        _1840 = _1530;
        _1841 = _1530;
        _1842 = _1530;
        _1843 = _1530;
        _1844 = _1530;
        _1845 = _1530;
        _1846 = _1530;
        _1847 = _1530;
        _1848 = _1530;
        _1849 = _1530;
        _1850 = _1530;
        _1851 = _1530;
        _1852 = 0.0;
        _1853 = 0.0;
        _1854 = 0.0;
    }
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1542)) + _1542;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1543)) + _1543;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1544)) + _1544;
    float _1887 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1864));
    float _1908 = _1136 * 0.5;
    float _1909 = _1137 * 0.5;
    float _1910 = _1138 * 0.5;
    float _1911 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1914 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1917 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1951;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1924 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1529, _1533, _1536, _1539));
        float _1928 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1932 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1939 = dot(vec4(cbModelParam._m0[39u]), vec4(_1908, _1909, _1910, 1.0));
        _1951 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1951 = 1.0;
    }
    float _1962;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1953 = dot(vec4(cbModelParam._m0[40u]), vec4(_1908, _1909, _1910, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1953) ? 0.0 : (isnan(0.0) ? _1953 : max(0.0, _1953))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1966 = (_1962 * cbModelParam._m0[1u].x) + (_1951 * (1.0 - cbModelParam._m0[1u].x));
    float _1976 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1976 : min(cbModelParam._m0[25u].z, _1976));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2024 = fma(_1200, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1192)) + cbModelParam._m0[13u].w;
        float _2028 = fma(_1200, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1192)) + cbModelParam._m0[14u].w;
        float _2032 = fma(_1200, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1192)) + cbModelParam._m0[15u].w;
        float _2035 = fma(_1138, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136));
        float _2038 = fma(_1138, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136));
        float _2041 = fma(_1138, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136));
        float _2069;
        if (_2035 > 0.0)
        {
            _2069 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2069 = frontier_phi_17_15_ladder;
        }
        float _2271;
        if (_2038 > 0.0)
        {
            _2271 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2271 = frontier_phi_26_22_ladder;
        }
        float _2525;
        if (_2041 > 0.0)
        {
            _2525 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2525 = frontier_phi_38_33_ladder;
        }
        float _2527 = isnan(_2271) ? _2069 : (isnan(_2069) ? _2271 : min(_2069, _2271));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _2035) + _2024;
        float _2533 = (_2528 * _2038) + _2028;
        float _2534 = (_2528 * _2041) + _2032;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2535;
        float _2539 = _2535 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 > _2539) || ((_2533 < _2537) || ((_2532 < _2537) || (_2532 > _2539))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2534, cbModelParam._m0[9u].z, fma(_2533, cbModelParam._m0[9u].y, _2532 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2534, cbModelParam._m0[10u].z, fma(_2533, cbModelParam._m0[10u].y, _2532 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2534, cbModelParam._m0[11u].z, fma(_2533, cbModelParam._m0[11u].y, _2532 * cbModelParam._m0[11u].x))), _1977);
            frontier_phi_16_38_ladder = _2662.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2662.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2662.x * cbModelParam._m0[1u].y;
        }
        _2057 = frontier_phi_16_38_ladder_2;
        _2059 = frontier_phi_16_38_ladder_1;
        _2061 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1136, _1137, _1138), _1977);
        _2057 = _2045.x * cbModelParam._m0[1u].y;
        _2059 = _2045.y * cbModelParam._m0[1u].y;
        _2061 = _2045.z * cbModelParam._m0[1u].y;
    }
    float _2065 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2065 : min(cbModelParam._m0[25u].w, _2065));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2119 = fma(_1200, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1192)) + cbModelParam._m0[21u].w;
        float _2123 = fma(_1200, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1192)) + cbModelParam._m0[22u].w;
        float _2127 = fma(_1200, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1192)) + cbModelParam._m0[23u].w;
        float _2130 = fma(_1138, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136));
        float _2133 = fma(_1138, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136));
        float _2136 = fma(_1138, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136));
        float _2276;
        if (_2130 > 0.0)
        {
            _2276 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2276 = frontier_phi_28_24_ladder;
        }
        float _2552;
        if (_2133 > 0.0)
        {
            _2552 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2552 = frontier_phi_40_35_ladder;
        }
        float _2765;
        if (_2136 > 0.0)
        {
            _2765 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2765 = frontier_phi_49_46_ladder;
        }
        float _2767 = isnan(_2552) ? _2276 : (isnan(_2276) ? _2552 : min(_2276, _2552));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _2130) + _2119;
        float _2773 = (_2768 * _2133) + _2123;
        float _2774 = (_2768 * _2136) + _2127;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _2066);
            frontier_phi_25_49_ladder = _2973.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2973.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2973.x * cbModelParam._m0[1u].z;
        }
        _2155 = frontier_phi_25_49_ladder_2;
        _2157 = frontier_phi_25_49_ladder_1;
        _2159 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1136, _1137, _1138), _2066);
        _2155 = _2139.x * cbModelParam._m0[1u].z;
        _2157 = _2139.y * cbModelParam._m0[1u].z;
        _2159 = _2139.z * cbModelParam._m0[1u].z;
    }
    float _2172 = (((_1163 * _1112) + _1164) * _1128) * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2174 = (((_1163 * _1114) + _1164) * _1128) * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2176 = (((_1163 * _1115) + _1164) * _1128) * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2179 = fma(_2176, cbSceneParam._m0[89u].z, fma(_2174, cbSceneParam._m0[89u].y, _2172 * cbSceneParam._m0[89u].x));
    float _2182 = fma(_2176, cbSceneParam._m0[90u].z, fma(_2174, cbSceneParam._m0[90u].y, _2172 * cbSceneParam._m0[90u].x));
    float _2185 = fma(_2176, cbSceneParam._m0[91u].z, fma(_2174, cbSceneParam._m0[91u].y, _2172 * cbSceneParam._m0[91u].x));
    uvec4 _2195 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2197 = _2195.x * 14u;
    uint _2198 = _2197 + 13u;
    float _2205 = _1128 + (-1.0);
    float _2210 = (cbLight._m0[_2198].x * _2205) + 1.0;
    float _2211 = (cbLight._m0[_2198].y * _2205) + 1.0;
    float _2212 = (cbLight._m0[_2198].z * _2205) + 1.0;
    float _2213 = (cbLight._m0[_2198].w * _2205) + 1.0;
    uint _2214 = _2197 + 5u;
    float _2220 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2224 = _2197 + 4u;
    float _2230 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2234 = _2197 | 1u;
    float _2245 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_951, _952, _953));
    float _2248 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_951, _952, _953));
    float _4507 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _4518 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2253 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * 0.3183098733425140380859375;
    float _2255 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2262 = ((cbLight._m0[_2214].x * _2220) * _2255) + ((cbLight._m0[_2224].x * _2230) * _2253);
    float _2263 = ((_2220 * cbLight._m0[_2214].y) * _2255) + ((_2230 * cbLight._m0[_2224].y) * _2253);
    float _2264 = ((_2220 * cbLight._m0[_2214].z) * _2255) + ((_2230 * cbLight._m0[_2224].z) * _2253);
    uvec4 _2268 = floatBitsToUint(cbLight._m0[_2197 + 12u]);
    bool _2270 = _2268.x == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2270)
    {
        _2281 = _2262;
        _2283 = _2263;
        _2285 = _2264;
    }
    else
    {
        uint _2289 = _2197 + 6u;
        float _2305 = (dot(vec3(cbLight._m0[_2197 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2306 = _2305 * _2305;
        float _4529 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2307 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2308 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2281 = (((cbLight._m0[_2289].x * 0.3183098733425140380859375) * _2307) * _2308) + _2262;
        _2283 = (((cbLight._m0[_2289].y * 0.3183098733425140380859375) * _2307) * _2308) + _2263;
        _2285 = (((cbLight._m0[_2289].z * 0.3183098733425140380859375) * _2307) * _2308) + _2264;
    }
    bool _2288 = _2268.y == 0u;
    float _2326;
    float _2328;
    float _2330;
    if (_2288)
    {
        _2326 = _2281;
        _2328 = _2283;
        _2330 = _2285;
    }
    else
    {
        uint _2496 = _2197 + 7u;
        float _2512 = (dot(vec3(cbLight._m0[_2197 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4545 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2515 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2326 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2281;
        _2328 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2283;
        _2330 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2285;
    }
    uint _2333 = _2197 + 8u;
    float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _954) * 0.949999988079071044921875);
    float _2347 = _2346 * _2346;
    float _2348 = cbLight._m0[_2197].x + _1030;
    float _2349 = cbLight._m0[_2197].y + _1031;
    float _2350 = cbLight._m0[_2197].z + _1032;
    float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
    float _2355 = _2354 * _2348;
    float _2356 = _2354 * _2349;
    float _2357 = _2354 * _2350;
    float _2358 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2197].xyz));
    float _4561 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _4572 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _2362 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2363 = dot(vec3(_951, _952, _953), vec3(_2355, _2356, _2357));
    float _4583 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2355, _2356, _2357));
    float _4594 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2347 * _2347;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
    float _2384 = 0.959999978542327880859375 - _1109;
    float _2386 = 0.959999978542327880859375 - _1110;
    float _2387 = 0.959999978542327880859375 - _1111;
    float _2394 = 1.0 - _2347;
    float _2405 = (0.5 / (((_2362 * ((_2361 * _2394) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2362 * _2394) + _2347) * _2361))) * _2361;
    float _4605 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    uint _2418 = _2197 + 9u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _954) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2234].x + _1030;
    float _2432 = cbLight._m0[_2234].y + _1031;
    float _2433 = cbLight._m0[_2234].z + _1032;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2234].xyz));
    float _4616 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2445 = dot(vec3(_951, _952, _953), vec3(_2438, _2439, _2440));
    float _4627 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2438, _2439, _2440));
    float _4638 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2430 * _2430;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
    float _2471 = 1.0 - _2430;
    float _2481 = (0.5 / (((_2362 * ((_2444 * _2471) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2362 * _2471) + _2430) * _2444))) * _2444;
    float _4649 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2483 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    float _2493 = (((((_2464 * _2384) + _1112) * cbLight._m0[_2418].x) * _2483) * _2220) + (((((_2383 * _2384) + _1112) * cbLight._m0[_2333].x) * _2407) * _2230);
    float _2494 = (((((_2464 * _2386) + _1114) * cbLight._m0[_2418].y) * _2483) * _2220) + (((((_2383 * _2386) + _1114) * cbLight._m0[_2333].y) * _2407) * _2230);
    float _2495 = (((((_2464 * _2387) + _1115) * cbLight._m0[_2418].z) * _2483) * _2220) + (((((_2383 * _2387) + _1115) * cbLight._m0[_2333].z) * _2407) * _2230);
    float _2557;
    float _2559;
    float _2561;
    if (_2270)
    {
        _2557 = _2493;
        _2559 = _2494;
        _2561 = _2495;
    }
    else
    {
        uint _2563 = _2197 + 2u;
        uint _2567 = _2197 + 10u;
        float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2563].w)) * _954) * 0.949999988079071044921875);
        float _2582 = _2581 * _2581;
        float _2583 = cbLight._m0[_2563].x + _1030;
        float _2584 = cbLight._m0[_2563].y + _1031;
        float _2585 = cbLight._m0[_2563].z + _1032;
        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
        float _2590 = _2589 * _2583;
        float _2591 = _2589 * _2584;
        float _2592 = _2589 * _2585;
        float _2593 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2563].xyz));
        float _4660 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2597 = dot(vec3(_951, _952, _953), vec3(_2590, _2591, _2592));
        float _4671 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2601 = dot(vec3(cbLight._m0[_2563].xyz), vec3(_2590, _2591, _2592));
        float _4682 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2605 = _2582 * _2582;
        float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
        float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0);
        float _2623 = 1.0 - _2582;
        float _2633 = (0.5 / (((_2362 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2362 * _2623) + _2582) * _2596))) * _2596;
        float _4693 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2557 = (((((_2616 * _2384) + _1112) * cbLight._m0[_2567].x) * _2635) * _2636) + _2493;
        _2559 = (((((_2616 * _2386) + _1114) * cbLight._m0[_2567].y) * _2635) * _2636) + _2494;
        _2561 = (((((_2616 * _2387) + _1115) * cbLight._m0[_2567].z) * _2635) * _2636) + _2495;
    }
    float _2671;
    float _2673;
    float _2675;
    if (_2288)
    {
        _2671 = _2557;
        _2673 = _2559;
        _2675 = _2561;
    }
    else
    {
        uint _2682 = _2197 + 3u;
        uint _2686 = _2197 + 11u;
        float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2682].w)) * _954) * 0.949999988079071044921875);
        float _2701 = _2700 * _2700;
        float _2702 = cbLight._m0[_2682].x + _1030;
        float _2703 = cbLight._m0[_2682].y + _1031;
        float _2704 = cbLight._m0[_2682].z + _1032;
        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
        float _2709 = _2708 * _2702;
        float _2710 = _2708 * _2703;
        float _2711 = _2708 * _2704;
        float _2712 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2682].xyz));
        float _4709 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2716 = dot(vec3(_951, _952, _953), vec3(_2709, _2710, _2711));
        float _4720 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2720 = dot(vec3(cbLight._m0[_2682].xyz), vec3(_2709, _2710, _2711));
        float _4731 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2724 = _2701 * _2701;
        float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
        float _2735 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
        float _2742 = 1.0 - _2701;
        float _2752 = (0.5 / (((_2362 * ((_2715 * _2742) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2362 * _2742) + _2701) * _2715))) * _2715;
        float _4742 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2754 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
        float _2755 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2671 = (((((_2735 * _2384) + _1112) * cbLight._m0[_2686].x) * _2754) * _2755) + _2557;
        _2673 = (((((_2735 * _2386) + _1114) * cbLight._m0[_2686].y) * _2754) * _2755) + _2559;
        _2675 = (((((_2735 * _2387) + _1115) * cbLight._m0[_2686].z) * _2754) * _2755) + _2561;
    }
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_2195.y == 0u)
    {
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2830;
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2830;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2830;
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.x;
        uint _2857 = uint((float(_2845.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1051) / _2846))) + floor(float(uint(cbSceneParam._m0[85u].x * _1050) / _2846)));
        float _2867 = (log2(_2833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2868 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        uint _2871 = uint(isnan(14.0) ? _2868 : (isnan(_2868) ? 14.0 : min(_2868, 14.0)));
        uvec4 _2876 = texelFetch(g_lightClusterGridBuffer, int(((_2871 << 2u) + (_2857 << 6u)) >> 2u));
        uint _2877 = _2876.x;
        uint _2878 = _2845.z;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((((1u << ((_2878 >> 4u) & 15u)) + 4294967295u) & _2877) == 0u) || ((_2878 & 240u) == 0u))
        {
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
        }
        else
        {
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3147)
                {
                    frontier_phi_66_pred = _3131;
                    frontier_phi_66_pred_1 = _3136;
                    frontier_phi_66_pred_2 = _3135;
                    frontier_phi_66_pred_3 = _3134;
                    frontier_phi_66_pred_4 = _3133;
                    frontier_phi_66_pred_5 = _3132;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3146;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3137 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _2831;
                        float _3343 = _3302.y - _2832;
                        float _3344 = _3302.z - _2833;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_1069, _1072, _1075), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4768 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _2831;
                        float _3378 = (-0.0) - _2832;
                        float _3379 = (-0.0) - _2833;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3394 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _1144;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3384 + _3349;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_1069, _1072, _1075), vec3(_3384, _3385, _3386));
                        float _4784 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3419 = dot(vec3(_1069, _1072, _1075), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4795 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3362 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3352) + _3428;
                        float _4806 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4817 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) / ((_3426 * _3426) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3206 = (_3373 * _3321.x) + _3279;
                        _3207 = (_3373 * _3321.y) + _3280;
                        _3208 = (_3373 * _3321.z) + _3281;
                        _3203 = (_3454 * _3338.x) + _3276;
                        _3204 = (_3454 * _3338.y) + _3277;
                        _3205 = (_3454 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_66_pred = _3203;
                    frontier_phi_66_pred_1 = _3208;
                    frontier_phi_66_pred_2 = _3207;
                    frontier_phi_66_pred_3 = _3206;
                    frontier_phi_66_pred_4 = _3205;
                    frontier_phi_66_pred_5 = _3204;
                }
                _2979 = frontier_phi_66_pred;
                _2989 = frontier_phi_66_pred_1;
                _2987 = frontier_phi_66_pred_2;
                _2985 = frontier_phi_66_pred_3;
                _2983 = frontier_phi_66_pred_4;
                _2981 = frontier_phi_66_pred_5;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3131 = _2979;
                    _3132 = _2981;
                    _3133 = _2983;
                    _3134 = _2985;
                    _3135 = _2987;
                    _3136 = _2989;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
        }
        uvec4 _2992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2993 = _2992.z;
        uint _2995 = (_2993 >> 8u) & 15u;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((4294967295u << _2995) & _2877) == 0u)
        {
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
        }
        else
        {
            float _3124 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
            float _3125 = _3124 * _2831;
            float _3126 = _3124 * _2832;
            float _3127 = _3124 * _2833;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2995 < ((_2993 >> 12u) & 15u))
            {
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3259 = _2978;
                float _3260 = _2980;
                float _3261 = _2982;
                float _3262 = _2984;
                float _3263 = _2986;
                float _3264 = _2988;
                uint _3265 = _2995;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3275)
                    {
                        frontier_phi_77_pred = _3264;
                        frontier_phi_77_pred_1 = _3263;
                        frontier_phi_77_pred_2 = _3262;
                        frontier_phi_77_pred_3 = _3261;
                        frontier_phi_77_pred_4 = _3260;
                        frontier_phi_77_pred_5 = _3259;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        uint _3487 = _3274;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3498 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3498 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3498 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3498 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_2833, _3605.z, fma(_2832, _3605.y, _3605.x * _2831)) + _3605.w;
                            _3618 = !((fma(_2833, _3586.z, fma(_2832, _3586.y, _3586.x * _2831)) + _3586.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3513.x - _2831;
                                float _3646 = _3513.y - _2832;
                                float _3647 = _3513.z - _2833;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3514 * _3514));
                                float _4828 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3663 = sqrt(_3648) * _3529.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_1069, _1072, _1075))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_2833, _3556.z, fma(_2832, _3556.y, _3556.x * _2831)) + _3556.w) / _3617;
                                float _3677 = (fma(_2833, _3571.z, fma(_2832, _3571.y, _3571.x * _2831)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4844 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _1144;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3125;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_1069, _1072, _1075), vec3((-0.0) - _3125, (-0.0) - _3126, (-0.0) - _3127));
                                float _4855 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3720 = dot(vec3(_1069, _1072, _1075), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4866 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_1069, _1072, _1075), vec3(_3652, _3653, _3654))) + _3729;
                                float _4877 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4888 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3683 * _3529.y;
                                frontier_phi_83_pred_1 = _3683 * _3529.x;
                                frontier_phi_83_pred_2 = _3757 * _3541.z;
                                frontier_phi_83_pred_3 = _3757 * _3541.y;
                                frontier_phi_83_pred_4 = _3757 * _3541.x;
                                frontier_phi_83_pred_5 = _3683 * _3529.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_83_pred;
                            _3764 = frontier_phi_83_pred_1;
                            _3763 = frontier_phi_83_pred_2;
                            _3762 = frontier_phi_83_pred_3;
                            _3761 = frontier_phi_83_pred_4;
                            _3766 = frontier_phi_83_pred_5;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3473;
                        frontier_phi_77_pred_1 = _3472;
                        frontier_phi_77_pred_2 = _3471;
                        frontier_phi_77_pred_3 = _3470;
                        frontier_phi_77_pred_4 = _3469;
                        frontier_phi_77_pred_5 = _3468;
                    }
                    _3110 = frontier_phi_77_pred;
                    _3108 = frontier_phi_77_pred_1;
                    _3106 = frontier_phi_77_pred_2;
                    _3104 = frontier_phi_77_pred_3;
                    _3102 = frontier_phi_77_pred_4;
                    _3100 = frontier_phi_77_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3100;
                        _3260 = _3102;
                        _3261 = _3104;
                        _3262 = _3106;
                        _3263 = _3108;
                        _3264 = _3110;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3104;
                frontier_phi_58_59_ladder_1 = _3110;
                frontier_phi_58_59_ladder_2 = _3108;
                frontier_phi_58_59_ladder_3 = _3106;
                frontier_phi_58_59_ladder_4 = _3102;
                frontier_phi_58_59_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_58_59_ladder = _2982;
                frontier_phi_58_59_ladder_1 = _2988;
                frontier_phi_58_59_ladder_2 = _2986;
                frontier_phi_58_59_ladder_3 = _2984;
                frontier_phi_58_59_ladder_4 = _2980;
                frontier_phi_58_59_ladder_5 = _2978;
            }
            _3099 = frontier_phi_58_59_ladder_5;
            _3101 = frontier_phi_58_59_ladder_4;
            _3103 = frontier_phi_58_59_ladder;
            _3105 = frontier_phi_58_59_ladder_3;
            _3107 = frontier_phi_58_59_ladder_2;
            _3109 = frontier_phi_58_59_ladder_1;
        }
        float _3114 = isnan(1.0) ? _1128 : (isnan(_1128) ? 1.0 : min(_1128, 1.0));
        _2890 = (_3114 * _3105) + _2326;
        _2892 = (_3114 * _3107) + _2328;
        _2894 = (_3114 * _3109) + _2330;
        _2896 = ((_3099 * _1112) * _3114) + _2671;
        _2898 = ((_3101 * _1114) * _3114) + _2673;
        _2900 = ((_3103 * _1115) * _3114) + _2675;
    }
    else
    {
        _2890 = _2326;
        _2892 = _2328;
        _2894 = _2330;
        _2896 = _2671;
        _2898 = _2673;
        _2900 = _2675;
    }
    float _4904 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4915 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _4926 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _2917 = ((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2890 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1128))) + ((_2896 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _2918 = ((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2892 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1128))) + ((_2898 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2894 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1128))) + ((_2900 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    uint _2920 = _267 + 6u;
    float _2928 = _1050 / cbSceneParam._m0[86u].x;
    float _2929 = _1051 / cbSceneParam._m0[86u].y;
    vec4 _2943 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2945 = _2943.x;
    float _2946 = _2943.y;
    float _2947 = _2943.z;
    float _2948 = _2943.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _3003 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _3004 = _3003 / _973;
        float _3015 = _3004 * _1023;
        float _3016 = _1024 * _3004;
        float _3017 = (-0.0) - _3016;
        float _3019 = _3004 * _1025;
        float _3021 = (cbSceneParam._m0[77u].w * _3017) / _3003;
        float _3022 = _3021 + cbSceneParam._m0[79u].w;
        float _3023 = cbSceneParam._m0[79u].w - _3016;
        float _3029 = sqrt(((_3015 * _3015) + (_3016 * _3016)) + (_3019 * _3019));
        float _3032 = (1.0 - (cbSceneParam._m0[77u].w / _3003)) * _3029;
        float _3037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3017 - _3021) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3022 > 0.0) ? exp2(_3037 * _3022) : (2.0 - exp2(_3039 * _3022))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3032;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : max(_3022, _3023));
            float _3162 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : min(_3022, _3023));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3216 = ((abs(_3029 / _3017) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_3037 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_3037 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_3039 * _3171) - exp2(_3039 * _3172)) * _3160))) + (_3032 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2948);
        _3041 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2945;
        _3043 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2946;
        _3045 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2947;
        _3047 = _3227 * _2948;
    }
    else
    {
        _3041 = _2945;
        _3043 = _2946;
        _3045 = _2947;
        _3047 = _2948;
    }
    bool _3254;
    vec4 _3057;
    vec4 _3079;
    float _3081;
    float _3085;
    float _3086;
    float _3087;
    float _3088;
    bool _3098;
    for (;;)
    {
        _3057 = cbMatDynParam._m0[0u];
        float _3059 = roundEven(_3057.y);
        bool _3060 = _3059 == 3.0;
        float _3061 = log2(_3047);
        float _3068 = exp2(_3061 * cbSceneParam._m0[78u].x) * _2917;
        float _3069 = exp2(_3061 * cbSceneParam._m0[78u].y) * _2918;
        float _3070 = exp2(_3061 * cbSceneParam._m0[78u].z) * _2919;
        float _3077 = _1039 + (-0.5);
        _3079 = cbMtdParam._m0[1u];
        _3081 = _3079.y * _3077;
        float _3084 = (_3059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3085 = _3084 * (_3060 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3041)));
        _3086 = _3084 * (_3060 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3043)));
        _3087 = _3084 * (_3060 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3045)));
        _3088 = _3077 * 0.999000012874603271484375;
        _3098 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3098)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3088) < 0.5)
            {
                _3254 = true;
                break;
            }
        }
        uint _3195 = _1088 + uint(_3057.w);
        if ((cbInstanceData._m0[_3195].w < 1.0) && ((cbInstanceData._m0[_3195].w + _3088) < 0.5))
        {
            _3254 = true;
            break;
        }
        if ((_3081 + 1.0) < _3079.x)
        {
            _3254 = true;
            break;
        }
        _3254 = false;
        break;
    }
    float _3459;
    if (_3254)
    {
        discard_state = true;
        _3459 = 0.0;
    }
    else
    {
        _3459 = cbInstanceData._m0[_2920].w;
    }
    SV_Target.x = _3085;
    SV_Target.y = _3086;
    SV_Target.z = _3087;
    SV_Target.w = _3459;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2920].w;
    discard_exit();
}


