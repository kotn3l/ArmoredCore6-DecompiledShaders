#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1562;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3910 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3921 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3932 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3943 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _489 = (_482 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _490 = (_482 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _491 = (_482 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3954 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _415.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[23u].w) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3965 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _635 = (_344.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _636 = (_344.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _637 = (_344.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _482) + _718;
    float _728 = ((_699.y - _719) * _482) + _719;
    float _729 = ((_699.z - _720) * _482) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _555) + _727;
    float _753 = ((_741.y - _728) * _555) + _728;
    float _754 = ((_741.z - _729) * _555) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _625) + _754;
    float _782 = ((((_766.x - _752) * _625) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _625) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3976 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))));
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _828 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _830 = _828.x;
    float _831 = 1.0 - _830;
    float _846 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_830 - _831) * cbMtdParam._m0[24u].z) + _831) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3987 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _847 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _854 = (_847 * (cbMtdParam._m0[17u].x - _655)) + _655;
    float _855 = (_847 * (cbMtdParam._m0[17u].y - _657)) + _657;
    float _856 = (_847 * (cbMtdParam._m0[17u].z - _659)) + _659;
    vec4 _882 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _884 = _882.x;
    float _901 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _884) * _482) + _884;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _901) * _555) + _901;
    float _936 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _918) * _625) + _918;
    float _940 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _936) * cbMtdParam._m0[19u].z) + _936;
    float _942 = _940 - (_940 * _847);
    float _947 = (((_676.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _951 = ((_803.z - _947) * cbMtdParam._m0[19u].w) + _947;
    vec4 _964 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _971 = (_964.x * 2.0) + (-1.0);
    float _972 = (_964.y * 2.0) + (-1.0);
    float _973 = dot(vec2(_971, _972), vec2(_971, _972));
    float _3998 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _981 = (_847 * (_964.z - _951)) + _951;
    float _990 = (_782 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_676.x * 2.0) + (-1.0)))) + (((_803.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _991 = (_783 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_676.y * 2.0) + (-1.0)))) + (((_803.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1003 = (((_971 - _990) + (cbMtdParam._m0[21u].x * _990)) * _847) + _990;
    float _1004 = (((_972 - _991) + (cbMtdParam._m0[21u].x * _991)) * _847) + _991;
    float _1005 = (_847 * (sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) - _789)) + _789;
    float _1009 = cbMtdParam._m0[22u].x + _803.w;
    float _1012 = fma(_1005, _254 * NORMAL.x, fma(_1004, _261 * TANGENT.x, (_247 * _239) * _1003));
    float _1015 = fma(_1005, _254 * NORMAL.y, fma(_1004, _261 * TANGENT.y, (_247 * _240) * _1003));
    float _1018 = fma(_1005, _254 * NORMAL.z, fma(_1004, _261 * TANGENT.z, (_247 * _241) * _1003));
    float _1022 = inversesqrt(dot(vec3(_1012, _1015, _1018), vec3(_1012, _1015, _1018)));
    float _1023 = _1022 * _1012;
    float _1024 = _1022 * _1015;
    float _1025 = _1022 * _1018;
    float _4009 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _1026 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4031 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4042 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4053 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4064 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _1031 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1045 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1095 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1085);
    float _1096 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1085);
    float _1097 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1085);
    float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
    float _1102 = _1095 * _1101;
    float _1103 = _1096 * _1101;
    float _1104 = _1097 * _1101;
    float _1110 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1111 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1129 = fma(_1025, cbSceneParam._m0[5u].z, fma(_1024, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1023));
    float _1132 = fma(_1025, cbSceneParam._m0[6u].z, fma(_1024, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1023));
    float _1135 = fma(_1025, cbSceneParam._m0[7u].z, fma(_1024, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1023));
    uint _1149 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1155 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1149].x;
    float _1156 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_1149].y;
    float _1157 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_1149].z;
    float _4075 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1161 = 1.0 - _1031;
    float _1162 = _1158 * _1161;
    float _1163 = _1159 * _1161;
    float _1164 = _1160 * _1161;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1031;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1031;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1031;
    float _1172 = _1169 + 0.039999999105930328369140625;
    float _1174 = _1170 + 0.039999999105930328369140625;
    float _1175 = _1171 + 0.039999999105930328369140625;
    vec4 _1184 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1110, cbSceneParam._m0[86u].y * _1111));
    float _1188 = ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * TEXCOORD_5.w) * _1184.x;
    float _1189 = dot(vec3(_1023, _1024, _1025), vec3(_1102, _1103, _1104));
    float _1192 = _1189 * 2.0;
    float _1196 = (_1192 * _1023) - _1102;
    float _1197 = (_1192 * _1024) - _1103;
    float _1198 = (_1192 * _1025) - _1104;
    float _1202 = abs(dot(vec3(_1102, _1103, _1104), vec3(_1023, _1024, _1025)));
    float _4108 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1204 = sqrt(_1026);
    float _1217 = exp2((_1204 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1204 * 3.0));
    float _1223 = (1.0 - _1217) * ((_1204 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1224 = _1217 * _1204;
    float _1252 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1256 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1260 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1561;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1286 = fma(_1260, cbModelParam._m0[26u].z, fma(_1256, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1252));
        float _1290 = fma(_1260, cbModelParam._m0[27u].z, fma(_1256, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1252));
        float _1294 = fma(_1260, cbModelParam._m0[28u].z, fma(_1256, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1252));
        float _1319 = _1252 + _1023;
        float _1320 = _1256 + _1024;
        float _1321 = _1260 + _1025;
        float _1331 = fma(_1321, cbModelParam._m0[26u].z, fma(_1320, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1319)) - _1286;
        float _1332 = fma(_1321, cbModelParam._m0[27u].z, fma(_1320, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1319)) - _1290;
        float _1333 = fma(_1321, cbModelParam._m0[28u].z, fma(_1320, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1319)) - _1294;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1286 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1290 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[34u].z) + ((((((_1294 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1389 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1355.x + (-0.5));
        float _1391 = _1389 * (_1355.y + (-0.5));
        float _1392 = _1389 * (_1355.z + (-0.5));
        float _1399 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1362.x + (-0.5));
        float _1401 = _1399 * (_1362.y + (-0.5));
        float _1402 = _1399 * (_1362.z + (-0.5));
        float _1409 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1369.x + (-0.5));
        float _1411 = _1409 * (_1369.y + (-0.5));
        float _1412 = _1409 * (_1369.z + (-0.5));
        float _1419 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1376.x + (-0.5));
        float _1421 = _1419 * (_1376.y + (-0.5));
        float _1422 = _1419 * (_1376.z + (-0.5));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = _1390 * 0.5;
        float _1427 = _1400 * 0.5;
        float _1428 = _1410 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1443 = (dot(vec3(_1023, _1024, _1025), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1453 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4156 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1455 + 1.0))) + _1460) * _1423;
        float _1470 = _1391 * 0.5;
        float _1471 = _1401 * 0.5;
        float _1472 = _1411 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_1023, _1024, _1025), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4189 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1497 + 1.0))) + _1502) * _1424;
        float _1512 = _1392 * 0.5;
        float _1513 = _1402 * 0.5;
        float _1514 = _1412 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_1023, _1024, _1025), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4222 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1539 + 1.0))) + _1544) * _1425;
        _1561 = _1392;
        _1563 = _1391;
        _1564 = _1390;
        _1565 = _1402;
        _1566 = _1401;
        _1567 = _1400;
        _1568 = _1412;
        _1569 = _1411;
        _1570 = _1410;
        _1571 = _1425;
        _1572 = _1424;
        _1573 = _1423;
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1562;
        _1563 = _1562;
        _1564 = _1562;
        _1565 = _1562;
        _1566 = _1562;
        _1567 = _1562;
        _1568 = _1562;
        _1569 = _1562;
        _1570 = _1562;
        _1571 = _1562;
        _1572 = _1562;
        _1573 = _1562;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1599 = fma(_1260, cbModelParam._m0[30u].z, fma(_1256, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252));
        float _1603 = fma(_1260, cbModelParam._m0[31u].z, fma(_1256, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252));
        float _1607 = fma(_1260, cbModelParam._m0[32u].z, fma(_1256, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252));
        float _1630 = _1252 + _1023;
        float _1631 = _1256 + _1024;
        float _1632 = _1260 + _1025;
        float _1642 = fma(_1632, cbModelParam._m0[30u].z, fma(_1631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1630)) - _1599;
        float _1643 = fma(_1632, cbModelParam._m0[31u].z, fma(_1631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1630)) - _1603;
        float _1644 = fma(_1632, cbModelParam._m0[32u].z, fma(_1631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1630)) - _1607;
        float _1648 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
        float _1661 = ((_1648 * _1642) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1599 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1648 * _1643) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1603 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1648 * _1644) / cbModelParam._m0[35u].z) + ((((((_1607 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        float _1698 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1665.x + (-0.5));
        float _1700 = _1698 * (_1665.y + (-0.5));
        float _1701 = _1698 * (_1665.z + (-0.5));
        float _1708 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1672.x + (-0.5));
        float _1710 = _1708 * (_1672.y + (-0.5));
        float _1711 = _1708 * (_1672.z + (-0.5));
        float _1718 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1679.x + (-0.5));
        float _1720 = _1718 * (_1679.y + (-0.5));
        float _1721 = _1718 * (_1679.z + (-0.5));
        float _1728 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1686.x + (-0.5));
        float _1730 = _1728 * (_1686.y + (-0.5));
        float _1731 = _1728 * (_1686.z + (-0.5));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = _1699 * 0.5;
        float _1736 = _1709 * 0.5;
        float _1737 = _1719 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_1023, _1024, _1025), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4285 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1762 + 1.0))) + _1767) * _1732;
        float _1777 = _1700 * 0.5;
        float _1778 = _1710 * 0.5;
        float _1779 = _1720 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_1023, _1024, _1025), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4318 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1804 + 1.0))) + _1809) * _1733;
        float _1819 = _1701 * 0.5;
        float _1820 = _1711 * 0.5;
        float _1821 = _1721 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_1023, _1024, _1025), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4351 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1846 + 1.0))) + _1851) * _1734;
        _1868 = _1701;
        _1869 = _1700;
        _1870 = _1699;
        _1871 = _1711;
        _1872 = _1710;
        _1873 = _1709;
        _1874 = _1721;
        _1875 = _1720;
        _1876 = _1719;
        _1877 = _1734;
        _1878 = _1733;
        _1879 = _1732;
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
    }
    else
    {
        _1868 = _1562;
        _1869 = _1562;
        _1870 = _1562;
        _1871 = _1562;
        _1872 = _1562;
        _1873 = _1562;
        _1874 = _1562;
        _1875 = _1562;
        _1876 = _1562;
        _1877 = _1562;
        _1878 = _1562;
        _1879 = _1562;
        _1880 = 0.0;
        _1881 = 0.0;
        _1882 = 0.0;
    }
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1574)) + _1574;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1575)) + _1575;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1576)) + _1576;
    float _1915 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1893, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1893, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1893, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1892));
    float _1936 = _1196 * 0.5;
    float _1937 = _1197 * 0.5;
    float _1938 = _1198 * 0.5;
    float _1939 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1942 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1945 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1979;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1952 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1561, _1565, _1568, _1571));
        float _1956 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1960 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1564, _1567, _1570, _1573));
        float _1967 = dot(vec4(cbModelParam._m0[39u]), vec4(_1936, _1937, _1938, 1.0));
        _1979 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1967) ? 0.0 : (isnan(0.0) ? _1967 : max(0.0, _1967))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1979 = 1.0;
    }
    float _1990;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1981 = dot(vec4(cbModelParam._m0[40u]), vec4(_1936, _1937, _1938, 1.0));
        _1990 = dot(vec3(isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1981) ? 0.0 : (isnan(0.0) ? _1981 : max(0.0, _1981))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1990 = 1.0;
    }
    float _1994 = (_1990 * cbModelParam._m0[1u].x) + (_1979 * (1.0 - cbModelParam._m0[1u].x));
    float _2004 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1026);
    float _2005 = isnan(_2004) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2004 : min(cbModelParam._m0[25u].z, _2004));
    float _2085;
    float _2087;
    float _2089;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2052 = fma(_1260, cbModelParam._m0[13u].z, fma(_1256, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1252)) + cbModelParam._m0[13u].w;
        float _2056 = fma(_1260, cbModelParam._m0[14u].z, fma(_1256, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1252)) + cbModelParam._m0[14u].w;
        float _2060 = fma(_1260, cbModelParam._m0[15u].z, fma(_1256, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1252)) + cbModelParam._m0[15u].w;
        float _2063 = fma(_1198, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1196));
        float _2066 = fma(_1198, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1196));
        float _2069 = fma(_1198, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1196));
        float _2097;
        if (_2063 > 0.0)
        {
            _2097 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2097 = frontier_phi_14_12_ladder;
        }
        float _2321;
        if (_2066 > 0.0)
        {
            _2321 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2321 = frontier_phi_23_19_ladder;
        }
        float _2578;
        if (_2069 > 0.0)
        {
            _2578 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2578 = frontier_phi_35_30_ladder;
        }
        float _2580 = isnan(_2321) ? _2097 : (isnan(_2097) ? _2321 : min(_2097, _2321));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _2063) + _2052;
        float _2586 = (_2581 * _2066) + _2056;
        float _2587 = (_2581 * _2069) + _2060;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2588;
        float _2592 = _2588 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 > _2592) || ((_2586 < _2590) || ((_2585 < _2590) || (_2585 > _2592))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2587, cbModelParam._m0[9u].z, fma(_2586, cbModelParam._m0[9u].y, _2585 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2587, cbModelParam._m0[10u].z, fma(_2586, cbModelParam._m0[10u].y, _2585 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2587, cbModelParam._m0[11u].z, fma(_2586, cbModelParam._m0[11u].y, _2585 * cbModelParam._m0[11u].x))), _2005);
            frontier_phi_13_35_ladder = _2715.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2715.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2715.x * cbModelParam._m0[1u].y;
        }
        _2085 = frontier_phi_13_35_ladder_2;
        _2087 = frontier_phi_13_35_ladder_1;
        _2089 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1196, _1197, _1198), _2005);
        _2085 = _2073.x * cbModelParam._m0[1u].y;
        _2087 = _2073.y * cbModelParam._m0[1u].y;
        _2089 = _2073.z * cbModelParam._m0[1u].y;
    }
    float _2093 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1026);
    float _2094 = isnan(_2093) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2093 : min(cbModelParam._m0[25u].w, _2093));
    float _2184;
    float _2186;
    float _2188;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2148 = fma(_1260, cbModelParam._m0[21u].z, fma(_1256, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1252)) + cbModelParam._m0[21u].w;
        float _2152 = fma(_1260, cbModelParam._m0[22u].z, fma(_1256, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1252)) + cbModelParam._m0[22u].w;
        float _2156 = fma(_1260, cbModelParam._m0[23u].z, fma(_1256, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1252)) + cbModelParam._m0[23u].w;
        float _2159 = fma(_1198, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1196));
        float _2162 = fma(_1198, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1196));
        float _2165 = fma(_1198, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1196));
        float _2326;
        if (_2159 > 0.0)
        {
            _2326 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2326 = frontier_phi_25_21_ladder;
        }
        float _2605;
        if (_2162 > 0.0)
        {
            _2605 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2605 = frontier_phi_37_32_ladder;
        }
        float _2818;
        if (_2165 > 0.0)
        {
            _2818 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2818 = frontier_phi_46_43_ladder;
        }
        float _2820 = isnan(_2605) ? _2326 : (isnan(_2326) ? _2605 : min(_2326, _2605));
        float _2821 = isnan(_2818) ? _2820 : (isnan(_2820) ? _2818 : min(_2820, _2818));
        float _2825 = (_2821 * _2159) + _2148;
        float _2826 = (_2821 * _2162) + _2152;
        float _2827 = (_2821 * _2165) + _2156;
        float _2828 = _2821 * 9.9999997473787516355514526367188e-05;
        float _2829 = (-1.0) - _2828;
        float _2831 = _2828 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2827 > _2831) || ((_2827 < _2829) || ((_2826 > _2831) || ((_2826 < _2829) || ((_2825 < _2829) || (_2825 > _2831))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2827, cbModelParam._m0[17u].z, fma(_2826, cbModelParam._m0[17u].y, _2825 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2827, cbModelParam._m0[18u].z, fma(_2826, cbModelParam._m0[18u].y, _2825 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2827, cbModelParam._m0[19u].z, fma(_2826, cbModelParam._m0[19u].y, _2825 * cbModelParam._m0[19u].x))), _2094);
            frontier_phi_22_46_ladder = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _2184 = frontier_phi_22_46_ladder_2;
        _2186 = frontier_phi_22_46_ladder_1;
        _2188 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1196, _1197, _1198), _2094);
        _2184 = _2168.x * cbModelParam._m0[1u].z;
        _2186 = _2168.y * cbModelParam._m0[1u].z;
        _2188 = _2168.z * cbModelParam._m0[1u].z;
    }
    float _2201 = (((_1223 * _1172) + _1224) * _1188) * ((cbModelParam._m0[1u].w * (_2184 - _2085)) + _2085);
    float _2203 = (((_1223 * _1174) + _1224) * _1188) * ((cbModelParam._m0[1u].w * (_2186 - _2087)) + _2087);
    float _2205 = (((_1223 * _1175) + _1224) * _1188) * ((cbModelParam._m0[1u].w * (_2188 - _2089)) + _2089);
    float _2208 = fma(_2205, cbSceneParam._m0[89u].z, fma(_2203, cbSceneParam._m0[89u].y, _2201 * cbSceneParam._m0[89u].x));
    float _2211 = fma(_2205, cbSceneParam._m0[90u].z, fma(_2203, cbSceneParam._m0[90u].y, _2201 * cbSceneParam._m0[90u].x));
    float _2214 = fma(_2205, cbSceneParam._m0[91u].z, fma(_2203, cbSceneParam._m0[91u].y, _2201 * cbSceneParam._m0[91u].x));
    vec4 _2222 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1110, _1111));
    float _2224 = _2222.w;
    float _2236 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2224);
    float _2237 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2224);
    float _2238 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2224);
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _1188 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_1023, _1024, _1025));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_1023, _1024, _1025));
    float _4487 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4498 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2236) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2237) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2238) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2320)
    {
        _2331 = _2312;
        _2333 = _2313;
        _2335 = _2314;
    }
    else
    {
        uint _2339 = _2244 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4509 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2358 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2312;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2313;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2314;
    }
    bool _2338 = _2318.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2338)
    {
        _2376 = _2331;
        _2378 = _2333;
        _2380 = _2335;
    }
    else
    {
        uint _2549 = _2244 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4525 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2568 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2376 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2331;
        _2378 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2333;
        _2380 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2335;
    }
    uint _2383 = _2244 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _1026) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2244].x + _1102;
    float _2399 = cbLight._m0[_2244].y + _1103;
    float _2400 = cbLight._m0[_2244].z + _1104;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2244].xyz));
    float _4541 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _4552 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _2412 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2413 = dot(vec3(_1023, _1024, _1025), vec3(_2405, _2406, _2407));
    float _4563 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2405, _2406, _2407));
    float _4574 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _1169;
    float _2436 = 0.959999978542327880859375 - _1170;
    float _2437 = 0.959999978542327880859375 - _1171;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4585 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2471 = _2244 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _1026) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2284].x + _1102;
    float _2485 = cbLight._m0[_2284].y + _1103;
    float _2486 = cbLight._m0[_2284].z + _1104;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2284].xyz));
    float _4596 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2498 = dot(vec3(_1023, _1024, _1025), vec3(_2491, _2492, _2493));
    float _4607 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2491, _2492, _2493));
    float _4618 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2524 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2412 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2524) + _2483) * _2497))) * _2497;
    float _4629 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2546 = (((((_2517 * _2434) + _1172) * cbLight._m0[_2471].x) * _2536) * _2267) + ((((cbLight._m0[_2383].x * _2236) * ((_2433 * _2434) + _1172)) * _2457) * _2280);
    float _2547 = (((((_2517 * _2436) + _1174) * cbLight._m0[_2471].y) * _2536) * _2267) + ((((cbLight._m0[_2383].y * _2237) * ((_2433 * _2436) + _1174)) * _2457) * _2280);
    float _2548 = (((((_2517 * _2437) + _1175) * cbLight._m0[_2471].z) * _2536) * _2267) + ((((cbLight._m0[_2383].z * _2238) * ((_2433 * _2437) + _1175)) * _2457) * _2280);
    float _2610;
    float _2612;
    float _2614;
    if (_2320)
    {
        _2610 = _2546;
        _2612 = _2547;
        _2614 = _2548;
    }
    else
    {
        uint _2616 = _2244 + 2u;
        uint _2620 = _2244 + 10u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _1026) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _1102;
        float _2637 = cbLight._m0[_2616].y + _1103;
        float _2638 = cbLight._m0[_2616].z + _1104;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2616].xyz));
        float _4640 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2650 = dot(vec3(_1023, _1024, _1025), vec3(_2643, _2644, _2645));
        float _4651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4662 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2412 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2676) + _2635) * _2649))) * _2649;
        float _4673 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2610 = (((((_2669 * _2434) + _1172) * cbLight._m0[_2620].x) * _2688) * _2689) + _2546;
        _2612 = (((((_2669 * _2436) + _1174) * cbLight._m0[_2620].y) * _2688) * _2689) + _2547;
        _2614 = (((((_2669 * _2437) + _1175) * cbLight._m0[_2620].z) * _2688) * _2689) + _2548;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2338)
    {
        _2724 = _2610;
        _2726 = _2612;
        _2728 = _2614;
    }
    else
    {
        uint _2735 = _2244 + 3u;
        uint _2739 = _2244 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _1026) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _1102;
        float _2756 = cbLight._m0[_2735].y + _1103;
        float _2757 = cbLight._m0[_2735].z + _1104;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2735].xyz));
        float _4689 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2769 = dot(vec3(_1023, _1024, _1025), vec3(_2762, _2763, _2764));
        float _4700 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4711 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2412 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2795) + _2754) * _2768))) * _2768;
        float _4722 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2724 = (((((_2788 * _2434) + _1172) * cbLight._m0[_2739].x) * _2807) * _2808) + _2610;
        _2726 = (((((_2788 * _2436) + _1174) * cbLight._m0[_2739].y) * _2807) * _2808) + _2612;
        _2728 = (((((_2788 * _2437) + _1175) * cbLight._m0[_2739].z) * _2807) * _2808) + _2614;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2242.y == 0u)
    {
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2884 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2883;
        float _2885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2883;
        float _2886 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2883;
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1111) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _1110) / _2899)));
        float _2920 = (log2(_2886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
        }
        else
        {
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            uint _3182 = 0u;
            uint _3191;
            bool _3192;
            for (;;)
            {
                _3191 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                _3192 = _3191 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3192)
                {
                    frontier_phi_61_pred = _3176;
                    frontier_phi_61_pred_1 = _3181;
                    frontier_phi_61_pred_2 = _3180;
                    frontier_phi_61_pred_3 = _3179;
                    frontier_phi_61_pred_4 = _3178;
                    frontier_phi_61_pred_5 = _3177;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3191;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3182 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _2884;
                        float _3367 = _3326.y - _2885;
                        float _3368 = _3326.z - _2886;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_1129, _1132, _1135), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4748 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _2884;
                        float _3402 = (-0.0) - _2885;
                        float _3403 = (-0.0) - _2886;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3418 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _1204;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3408 + _3373;
                        float _3430 = _3409 + _3374;
                        float _3431 = _3410 + _3375;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_1129, _1132, _1135), vec3(_3408, _3409, _3410));
                        float _4764 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3443 = dot(vec3(_1129, _1132, _1135), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4775 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3386 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3376) + _3452;
                        float _4786 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4797 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3450 * _3450) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3235 = (_3397 * _3345.x) + _3303;
                        _3236 = (_3397 * _3345.y) + _3304;
                        _3237 = (_3397 * _3345.z) + _3305;
                        _3232 = (_3478 * _3362.x) + _3300;
                        _3233 = (_3478 * _3362.y) + _3301;
                        _3234 = (_3478 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_61_pred = _3232;
                    frontier_phi_61_pred_1 = _3237;
                    frontier_phi_61_pred_2 = _3236;
                    frontier_phi_61_pred_3 = _3235;
                    frontier_phi_61_pred_4 = _3234;
                    frontier_phi_61_pred_5 = _3233;
                }
                _3032 = frontier_phi_61_pred;
                _3042 = frontier_phi_61_pred_1;
                _3040 = frontier_phi_61_pred_2;
                _3038 = frontier_phi_61_pred_3;
                _3036 = frontier_phi_61_pred_4;
                _3034 = frontier_phi_61_pred_5;
                uint _3183 = _3182 + 1u;
                if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3176 = _3032;
                    _3177 = _3034;
                    _3178 = _3036;
                    _3179 = _3038;
                    _3180 = _3040;
                    _3181 = _3042;
                    _3182 = _3183;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
        }
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.z;
        uint _3048 = (_3046 >> 8u) & 15u;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        if (((4294967295u << _3048) & _2930) == 0u)
        {
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
        }
        else
        {
            float _3169 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
            float _3170 = _3169 * _2884;
            float _3171 = _3169 * _2885;
            float _3172 = _3169 * _2886;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3048 < ((_3046 >> 12u) & 15u))
            {
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3283 = _3031;
                float _3284 = _3033;
                float _3285 = _3035;
                float _3286 = _3037;
                float _3287 = _3039;
                float _3288 = _3041;
                uint _3289 = _3048;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3299)
                    {
                        frontier_phi_67_pred = _3286;
                        frontier_phi_67_pred_1 = _3287;
                        frontier_phi_67_pred_2 = _3288;
                        frontier_phi_67_pred_3 = _3285;
                        frontier_phi_67_pred_4 = _3284;
                        frontier_phi_67_pred_5 = _3283;
                    }
                    else
                    {
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        float _3498 = _3285;
                        float _3499 = _3286;
                        float _3500 = _3287;
                        float _3501 = _3288;
                        uint _3502 = _3298;
                        uint _3503;
                        vec4 _3528;
                        float _3529;
                        vec4 _3544;
                        vec3 _3556;
                        vec4 _3571;
                        vec4 _3586;
                        float _3632;
                        bool _3633;
                        for (;;)
                        {
                            uint _3513 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3502));
                            _3503 = (_3502 + 4294967295u) & _3502;
                            uint _3515 = _3513 * 40u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3529 = _3528.w;
                            uint _3531 = (_3513 * 40u) + 4u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3513 * 40u) + 8u;
                            _3556 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x));
                            uint _3558 = (_3513 * 40u) + 16u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3513 * 40u) + 20u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3513 * 40u) + 24u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3607 = (_3513 * 40u) + 28u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3632 = fma(_2886, _3620.z, fma(_2885, _3620.y, _3620.x * _2884)) + _3620.w;
                            _3633 = !((fma(_2886, _3601.z, fma(_2885, _3601.y, _3601.x * _2884)) + _3601.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3633)
                            {
                                float _3660 = _3528.x - _2884;
                                float _3661 = _3528.y - _2885;
                                float _3662 = _3528.z - _2886;
                                float _3663 = dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662));
                                float _3666 = inversesqrt(_3663);
                                float _3667 = _3666 * _3660;
                                float _3668 = _3666 * _3661;
                                float _3669 = _3666 * _3662;
                                float _3673 = 1.0 - (_3663 / (_3529 * _3529));
                                float _4808 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3678 = sqrt(_3663) * _3544.w;
                                float _3680 = 1.39999997615814208984375 / (_3678 + 1.39999997615814208984375);
                                float _3681 = _3680 * _3680;
                                float _3684 = ((1.0 - _3681) * dot(vec3(_3667, _3668, _3669), vec3(_1129, _1132, _1135))) + _3681;
                                float _3687 = _3678 * _3678;
                                float _3691 = (fma(_2886, _3571.z, fma(_2885, _3571.y, _3571.x * _2884)) + _3571.w) / _3632;
                                float _3692 = (fma(_2886, _3586.z, fma(_2885, _3586.y, _3586.x * _2884)) + _3586.w) / _3632;
                                float _3696 = 1.0 - dot(vec2(_3691, _3692), vec2(_3691, _3692));
                                float _4824 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3698 = _3697 * (((isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0))) * _3674) / ((_3687 * 0.699999988079071044921875) + 1.0));
                                float _3710 = exp2(log2(1.0 / ((_3687 * 3.5) + 5.0)) * 0.25);
                                float _3711 = 1.0 - _1204;
                                float _3718 = sqrt(1.0 - ((1.0 - (_3711 * _3711)) * (1.0 - (_3710 * _3710))));
                                float _3719 = _3718 * _3718;
                                float _3720 = _3719 * _3719;
                                float _3721 = _3667 - _3170;
                                float _3722 = _3668 - _3171;
                                float _3723 = _3669 - _3172;
                                float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                                float _3731 = dot(vec3(_1129, _1132, _1135), vec3((-0.0) - _3170, (-0.0) - _3171, (-0.0) - _3172));
                                float _4835 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3735 = dot(vec3(_1129, _1132, _1135), vec3(_3727 * _3721, _3727 * _3722, _3727 * _3723));
                                float _4846 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3742 = ((_3738 * _3738) * (_3720 + (-1.0))) + 1.0;
                                float _3743 = _3680 * _3719;
                                float _3744 = _3743 * _3743;
                                float _3750 = ((1.0 - _3744) * dot(vec3(_1129, _1132, _1135), vec3(_3667, _3668, _3669))) + _3744;
                                float _4857 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3752 = 1.0 - _3719;
                                float _3762 = (0.5 / (((_3751 * ((_3734 * _3752) + _3719)) + 9.9999999392252902907785028219223e-09) + (((_3751 * _3752) + _3719) * _3734))) * _3751;
                                float _4868 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3772 = (_3697 * _3674) * (((_3720 * 3.1415927410125732421875) * (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) / ((_3742 * _3742) * ((_3687 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3772 * _3556.x;
                                frontier_phi_73_pred_1 = _3772 * _3556.y;
                                frontier_phi_73_pred_2 = _3698 * _3544.z;
                                frontier_phi_73_pred_3 = _3698 * _3544.y;
                                frontier_phi_73_pred_4 = _3698 * _3544.x;
                                frontier_phi_73_pred_5 = _3772 * _3556.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_73_pred;
                            _3777 = frontier_phi_73_pred_1;
                            _3781 = frontier_phi_73_pred_2;
                            _3780 = frontier_phi_73_pred_3;
                            _3779 = frontier_phi_73_pred_4;
                            _3778 = frontier_phi_73_pred_5;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            if (_3503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3503;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3486;
                        frontier_phi_67_pred_1 = _3487;
                        frontier_phi_67_pred_2 = _3488;
                        frontier_phi_67_pred_3 = _3485;
                        frontier_phi_67_pred_4 = _3484;
                        frontier_phi_67_pred_5 = _3483;
                    }
                    _3151 = frontier_phi_67_pred;
                    _3153 = frontier_phi_67_pred_1;
                    _3155 = frontier_phi_67_pred_2;
                    _3149 = frontier_phi_67_pred_3;
                    _3147 = frontier_phi_67_pred_4;
                    _3145 = frontier_phi_67_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3145;
                        _3284 = _3147;
                        _3285 = _3149;
                        _3286 = _3151;
                        _3287 = _3153;
                        _3288 = _3155;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3153;
                frontier_phi_55_56_ladder_1 = _3155;
                frontier_phi_55_56_ladder_2 = _3151;
                frontier_phi_55_56_ladder_3 = _3149;
                frontier_phi_55_56_ladder_4 = _3147;
                frontier_phi_55_56_ladder_5 = _3145;
            }
            else
            {
                frontier_phi_55_56_ladder = _3039;
                frontier_phi_55_56_ladder_1 = _3041;
                frontier_phi_55_56_ladder_2 = _3037;
                frontier_phi_55_56_ladder_3 = _3035;
                frontier_phi_55_56_ladder_4 = _3033;
                frontier_phi_55_56_ladder_5 = _3031;
            }
            _3144 = frontier_phi_55_56_ladder_5;
            _3146 = frontier_phi_55_56_ladder_4;
            _3148 = frontier_phi_55_56_ladder_3;
            _3150 = frontier_phi_55_56_ladder_2;
            _3152 = frontier_phi_55_56_ladder;
            _3154 = frontier_phi_55_56_ladder_1;
        }
        float _3159 = isnan(1.0) ? _1188 : (isnan(_1188) ? 1.0 : min(_1188, 1.0));
        _2943 = (_3159 * _3150) + _2376;
        _2945 = (_3159 * _3152) + _2378;
        _2947 = (_3159 * _3154) + _2380;
        _2949 = ((_3144 * _1172) * _3159) + _2724;
        _2951 = ((_3146 * _1174) * _3159) + _2726;
        _2953 = ((_3148 * _1175) * _3159) + _2728;
    }
    else
    {
        _2943 = _2376;
        _2945 = _2378;
        _2947 = _2380;
        _2949 = _2724;
        _2951 = _2726;
        _2953 = _2728;
    }
    float _4884 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _4895 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _4906 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    uint _2973 = _288 + 6u;
    float _2981 = _1110 / cbSceneParam._m0[86u].x;
    float _2982 = _1111 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _1045 : (isnan(_1045) ? cbSceneParam._m0[77u].w : min(_1045, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_1045 > cbSceneParam._m0[78u].w)
    {
        float _3056 = isnan(_1045) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1045 : min(cbSceneParam._m0[80u].w, _1045));
        float _3057 = _3056 / _1045;
        float _3068 = _3057 * _1095;
        float _3069 = _1096 * _3057;
        float _3070 = (-0.0) - _3069;
        float _3072 = _3057 * _1097;
        float _3074 = (cbSceneParam._m0[77u].w * _3070) / _3056;
        float _3075 = _3074 + cbSceneParam._m0[79u].w;
        float _3076 = cbSceneParam._m0[79u].w - _3069;
        float _3082 = sqrt(((_3068 * _3068) + (_3069 * _3069)) + (_3072 * _3072));
        float _3085 = (1.0 - (cbSceneParam._m0[77u].w / _3056)) * _3082;
        float _3090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_3070 - _3074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_3075 > 0.0) ? exp2(_3090 * _3075) : (2.0 - exp2(_3092 * _3075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3085;
        }
        else
        {
            float _3205 = 1.0 / cbSceneParam._m0[80u].x;
            float _3206 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : max(_3075, _3076));
            float _3207 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : min(_3075, _3076));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            _3245 = ((abs(_3082 / _3070) * cbSceneParam._m0[80u].y) * ((((_3216 - _3217) * 2.0) - ((exp2(_3090 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0)))) - exp2(_3090 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))))) * _3205)) - ((exp2(_3092 * _3216) - exp2(_3092 * _3217)) * _3205))) + (_3085 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_3001);
        _3094 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3096 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3098 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3100 = _3256 * _3001;
    }
    else
    {
        _3094 = _2998;
        _3096 = _2999;
        _3098 = _3000;
        _3100 = _3001;
    }
    float _3112 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3113 = _3112 == 3.0;
    float _3114 = log2(_3100);
    float _3121 = exp2(_3114 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2943 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1188))) + ((_2949 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1994)) * cbPerFrame._m0[3u].x));
    float _3122 = exp2(_3114 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2945 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1188))) + ((_2951 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1994)) * cbPerFrame._m0[3u].x));
    float _3123 = exp2(_3114 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2947 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1188))) + ((_2953 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1994)) * cbPerFrame._m0[3u].x));
    float _3132 = (_3112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3132 * (_3113 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.y = _3132 * (_3113 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.z = _3132 * (_3113 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
    SV_Target.w = cbInstanceData._m0[_2973].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
}


