#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1534;
float _4195;
float _4196;
float _4197;
float _4198;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[23u].w) + _429) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4207 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _454 = (_447 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _455 = (_447 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _456 = (_447 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[23u].w) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4218 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _533 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454);
    float _536 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455);
    float _539 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456);
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _597 = _595.x;
    float _598 = _595.y;
    float _599 = _595.z;
    float _606 = ((_578.x - _597) * _447) + _597;
    float _607 = ((_578.y - _598) * _447) + _598;
    float _608 = ((_578.z - _599) * _447) + _599;
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _633 = ((_620.z - _608) * _520) + _608;
    float _636 = ((((_620.x - _606) * _520) + _606) * 2.0) + (-1.0);
    float _638 = ((((_620.y - _607) * _520) + _607) * 2.0) + (-1.0);
    float _639 = dot(vec2(_636, _638), vec2(_636, _638));
    float _4229 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _644 = sqrt(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _685 = _683.x;
    float _686 = 1.0 - _685;
    float _695 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _698 = ((isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : min(_695, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _707 = (_698 - ((((((_685 - _686) * cbMtdParam._m0[24u].z) + _686) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _698))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4250 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _715 = (_708 * ((_558.x * cbMtdParam._m0[18u].x) - _533)) + _533;
    float _716 = (_708 * ((_558.y * cbMtdParam._m0[18u].y) - _536)) + _536;
    float _717 = (_708 * ((_558.z * cbMtdParam._m0[18u].z) - _539)) + _539;
    vec4 _729 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _731 = _729.x;
    float _732 = 1.0 - _731;
    float _757 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_731 - _732) * cbMtdParam._m0[24u].w) + _732) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4261 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _766 = ((((cbMtdParam._m0[10u].x - _715) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _758) + _715;
    float _767 = ((((cbMtdParam._m0[10u].y - _716) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _758) + _716;
    float _768 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _717)) * _758) + _717;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _796 = _794.x;
    float _813 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _796) * _447) + _796;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _813) * _520) + _813;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _830) * cbMtdParam._m0[19u].z) + _830;
    float _836 = _834 - (_834 * _708);
    float _838 = _836 - (_836 * _758);
    float _842 = (cbMtdParam._m0[19u].w * (_658.z - _633)) + _633;
    vec4 _856 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _863 = (_856.x * 2.0) + (-1.0);
    float _864 = (_856.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _4272 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = (_708 * (_856.z - _842)) + _842;
    float _876 = ((cbMtdParam._m0[23u].x - _873) * _758) + _873;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _901 = (_895.x * 2.0) + (-1.0);
    float _902 = (_895.y * 2.0) + (-1.0);
    float _903 = dot(vec2(_901, _902), vec2(_901, _902));
    float _4283 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _911 = (((_658.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _636;
    float _912 = (((_658.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _638;
    float _924 = (((_863 - _911) + (cbMtdParam._m0[21u].x * _911)) * _708) + _911;
    float _925 = (((_864 - _912) + (cbMtdParam._m0[21u].x * _912)) * _708) + _912;
    float _926 = (_708 * (sqrt(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) - _644)) + _644;
    float _937 = (((_901 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _758) + _924;
    float _938 = (((_902 - _925) + (_925 * cbMtdParam._m0[22u].z)) * _758) + _925;
    float _939 = ((sqrt(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) - _926) * _758) + _926;
    float _941 = cbMtdParam._m0[22u].x + _658.w;
    float _944 = fma(_939, _258 * NORMAL.x, fma(_938, _265 * TANGENT.x, (_251 * _243) * _937));
    float _947 = fma(_939, _258 * NORMAL.y, fma(_938, _265 * TANGENT.y, (_251 * _244) * _937));
    float _950 = fma(_939, _258 * NORMAL.z, fma(_938, _265 * TANGENT.z, (_251 * _245) * _937));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4294 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _958 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4316 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4327 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4338 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4349 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _963 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1215 = sqrt(((_1027 * _1027) + (_1028 * _1028)) + (_1029 * _1029));
        float _1221 = (cbMatDynParam._m0[5u].x * _1215) + cbMatDynParam._m0[5u].y;
        float _4360 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1226 = (cbMatDynParam._m0[5u].z * _1215) + cbMatDynParam._m0[5u].w;
        float _4371 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) - _1222)) + _1222) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1076 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1079 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1092 = _271 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4382 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _4393 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _1105 = 1.0 - _963;
    float _1106 = _1102 * _1105;
    float _1107 = _1103 * _1105;
    float _1108 = _1104 * _1105;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _963;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _963;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _963;
    float _1116 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _955) - _1034;
    float _1141 = (_1136 * _956) - _1035;
    float _1142 = (_1136 * _957) - _1036;
    float _1146 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _4415 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_958);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1167 = (1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1168 = _1161 * _1148;
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1533;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1258 = fma(_1204, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196));
        float _1262 = fma(_1204, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196));
        float _1266 = fma(_1204, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196));
        float _1291 = _1196 + _955;
        float _1292 = _1200 + _956;
        float _1293 = _1204 + _957;
        float _1303 = fma(_1293, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291)) - _1258;
        float _1304 = fma(_1293, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291)) - _1262;
        float _1305 = fma(_1293, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291)) - _1266;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1258 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1262 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[34u].z) + ((((((_1266 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1361 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1327.x + (-0.5));
        float _1363 = _1361 * (_1327.y + (-0.5));
        float _1364 = _1361 * (_1327.z + (-0.5));
        float _1371 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1334.x + (-0.5));
        float _1373 = _1371 * (_1334.y + (-0.5));
        float _1374 = _1371 * (_1334.z + (-0.5));
        float _1381 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1341.x + (-0.5));
        float _1383 = _1381 * (_1341.y + (-0.5));
        float _1384 = _1381 * (_1341.z + (-0.5));
        float _1391 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1348.x + (-0.5));
        float _1393 = _1391 * (_1348.y + (-0.5));
        float _1394 = _1391 * (_1348.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1415 = (dot(vec3(_955, _956, _957), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1425 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4463 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1427 + 1.0))) + _1432) * _1395;
        float _1442 = _1363 * 0.5;
        float _1443 = _1373 * 0.5;
        float _1444 = _1383 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_955, _956, _957), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4496 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1469 + 1.0))) + _1474) * _1396;
        float _1484 = _1364 * 0.5;
        float _1485 = _1374 * 0.5;
        float _1486 = _1384 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_955, _956, _957), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4529 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1511 + 1.0))) + _1516) * _1397;
        _1533 = _1364;
        _1535 = _1363;
        _1536 = _1362;
        _1537 = _1374;
        _1538 = _1373;
        _1539 = _1372;
        _1540 = _1384;
        _1541 = _1383;
        _1542 = _1382;
        _1543 = _1397;
        _1544 = _1396;
        _1545 = _1395;
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1534;
        _1535 = _1534;
        _1536 = _1534;
        _1537 = _1534;
        _1538 = _1534;
        _1539 = _1534;
        _1540 = _1534;
        _1541 = _1534;
        _1542 = _1534;
        _1543 = _1534;
        _1544 = _1534;
        _1545 = _1534;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1575 = fma(_1204, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196));
        float _1579 = fma(_1204, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196));
        float _1583 = fma(_1204, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196));
        float _1606 = _1196 + _955;
        float _1607 = _1200 + _956;
        float _1608 = _1204 + _957;
        float _1618 = fma(_1608, cbModelParam._m0[30u].z, fma(_1607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1606)) - _1575;
        float _1619 = fma(_1608, cbModelParam._m0[31u].z, fma(_1607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1606)) - _1579;
        float _1620 = fma(_1608, cbModelParam._m0[32u].z, fma(_1607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1606)) - _1583;
        float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
        float _1637 = ((_1624 * _1618) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1575 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1624 * _1619) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1579 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1639 = ((_1624 * _1620) / cbModelParam._m0[35u].z) + ((((((_1583 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        float _1674 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1641.x + (-0.5));
        float _1676 = _1674 * (_1641.y + (-0.5));
        float _1677 = _1674 * (_1641.z + (-0.5));
        float _1684 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1648.x + (-0.5));
        float _1686 = _1684 * (_1648.y + (-0.5));
        float _1687 = _1684 * (_1648.z + (-0.5));
        float _1694 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1655.x + (-0.5));
        float _1696 = _1694 * (_1655.y + (-0.5));
        float _1697 = _1694 * (_1655.z + (-0.5));
        float _1704 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1662.x + (-0.5));
        float _1706 = _1704 * (_1662.y + (-0.5));
        float _1707 = _1704 * (_1662.z + (-0.5));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = _1675 * 0.5;
        float _1712 = _1685 * 0.5;
        float _1713 = _1695 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_955, _956, _957), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4570 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4581 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4592 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_1738 + 1.0))) + _1743) * _1708;
        float _1753 = _1676 * 0.5;
        float _1754 = _1686 * 0.5;
        float _1755 = _1696 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_955, _956, _957), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4603 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4614 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4625 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_1780 + 1.0))) + _1785) * _1709;
        float _1795 = _1677 * 0.5;
        float _1796 = _1687 * 0.5;
        float _1797 = _1697 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_955, _956, _957), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4636 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4647 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4658 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_1822 + 1.0))) + _1827) * _1710;
        _1844 = _1677;
        _1845 = _1676;
        _1846 = _1675;
        _1847 = _1687;
        _1848 = _1686;
        _1849 = _1685;
        _1850 = _1697;
        _1851 = _1696;
        _1852 = _1695;
        _1853 = _1710;
        _1854 = _1709;
        _1855 = _1708;
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
    }
    else
    {
        _1844 = _1534;
        _1845 = _1534;
        _1846 = _1534;
        _1847 = _1534;
        _1848 = _1534;
        _1849 = _1534;
        _1850 = _1534;
        _1851 = _1534;
        _1852 = _1534;
        _1853 = _1534;
        _1854 = _1534;
        _1855 = _1534;
        _1856 = 0.0;
        _1857 = 0.0;
        _1858 = 0.0;
    }
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1546)) + _1546;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1547)) + _1547;
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1548)) + _1548;
    float _1891 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1868));
    float _1912 = _1140 * 0.5;
    float _1913 = _1141 * 0.5;
    float _1914 = _1142 * 0.5;
    float _1915 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1918 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1921 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1955;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1928 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1533, _1537, _1540, _1543));
        float _1932 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1936 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1943 = dot(vec4(cbModelParam._m0[39u]), vec4(_1912, _1913, _1914, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1966;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1957 = dot(vec4(cbModelParam._m0[40u]), vec4(_1912, _1913, _1914, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1957) ? 0.0 : (isnan(0.0) ? _1957 : max(0.0, _1957))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1970 = (_1966 * cbModelParam._m0[1u].x) + (_1955 * (1.0 - cbModelParam._m0[1u].x));
    float _1980 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1980 : min(cbModelParam._m0[25u].z, _1980));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2028 = fma(_1204, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1196)) + cbModelParam._m0[13u].w;
        float _2032 = fma(_1204, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1196)) + cbModelParam._m0[14u].w;
        float _2036 = fma(_1204, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1196)) + cbModelParam._m0[15u].w;
        float _2039 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2042 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2045 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2073;
        if (_2039 > 0.0)
        {
            _2073 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2073 = frontier_phi_17_15_ladder;
        }
        float _2244;
        if (_2042 > 0.0)
        {
            _2244 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2244 = frontier_phi_26_22_ladder;
        }
        float _2539;
        if (_2045 > 0.0)
        {
            _2539 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2539 = frontier_phi_38_33_ladder;
        }
        float _2541 = isnan(_2244) ? _2073 : (isnan(_2073) ? _2244 : min(_2073, _2244));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _2039) + _2028;
        float _2547 = (_2542 * _2042) + _2032;
        float _2548 = (_2542 * _2045) + _2036;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2549;
        float _2553 = _2549 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 > _2553) || ((_2547 < _2551) || ((_2546 < _2551) || (_2546 > _2553))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2548, cbModelParam._m0[9u].z, fma(_2547, cbModelParam._m0[9u].y, _2546 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2548, cbModelParam._m0[10u].z, fma(_2547, cbModelParam._m0[10u].y, _2546 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2548, cbModelParam._m0[11u].z, fma(_2547, cbModelParam._m0[11u].y, _2546 * cbModelParam._m0[11u].x))), _1981);
            frontier_phi_16_38_ladder = _2693.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2693.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2693.x * cbModelParam._m0[1u].y;
        }
        _2061 = frontier_phi_16_38_ladder_2;
        _2063 = frontier_phi_16_38_ladder_1;
        _2065 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1981);
        _2061 = _2049.x * cbModelParam._m0[1u].y;
        _2063 = _2049.y * cbModelParam._m0[1u].y;
        _2065 = _2049.z * cbModelParam._m0[1u].y;
    }
    float _2069 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2069 : min(cbModelParam._m0[25u].w, _2069));
    float _2159;
    float _2161;
    float _2163;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2123 = fma(_1204, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1196)) + cbModelParam._m0[21u].w;
        float _2127 = fma(_1204, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1196)) + cbModelParam._m0[22u].w;
        float _2131 = fma(_1204, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1196)) + cbModelParam._m0[23u].w;
        float _2134 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2137 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2140 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2249;
        if (_2134 > 0.0)
        {
            _2249 = abs((1.0 - _2123) / _2134);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2123 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2249 = frontier_phi_28_24_ladder;
        }
        float _2566;
        if (_2137 > 0.0)
        {
            _2566 = abs((1.0 - _2127) / _2137);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2127 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2566 = frontier_phi_40_35_ladder;
        }
        float _2904;
        if (_2140 > 0.0)
        {
            _2904 = abs((1.0 - _2131) / _2140);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2131 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2904 = frontier_phi_50_47_ladder;
        }
        float _2906 = isnan(_2566) ? _2249 : (isnan(_2249) ? _2566 : min(_2249, _2566));
        float _2907 = isnan(_2904) ? _2906 : (isnan(_2906) ? _2904 : min(_2906, _2904));
        float _2911 = (_2907 * _2134) + _2123;
        float _2912 = (_2907 * _2137) + _2127;
        float _2913 = (_2907 * _2140) + _2131;
        float _2914 = _2907 * 9.9999997473787516355514526367188e-05;
        float _2915 = (-1.0) - _2914;
        float _2917 = _2914 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2913 > _2917) || ((_2913 < _2915) || ((_2912 > _2917) || ((_2912 < _2915) || ((_2911 < _2915) || (_2911 > _2917))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2913, cbModelParam._m0[17u].z, fma(_2912, cbModelParam._m0[17u].y, _2911 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2913, cbModelParam._m0[18u].z, fma(_2912, cbModelParam._m0[18u].y, _2911 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2913, cbModelParam._m0[19u].z, fma(_2912, cbModelParam._m0[19u].y, _2911 * cbModelParam._m0[19u].x))), _2070);
            frontier_phi_25_50_ladder = _3035.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3035.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3035.x * cbModelParam._m0[1u].z;
        }
        _2159 = frontier_phi_25_50_ladder_2;
        _2161 = frontier_phi_25_50_ladder_1;
        _2163 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2070);
        _2159 = _2143.x * cbModelParam._m0[1u].z;
        _2161 = _2143.y * cbModelParam._m0[1u].z;
        _2163 = _2143.z * cbModelParam._m0[1u].z;
    }
    float _2176 = (((_1167 * _1116) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2178 = (((_1167 * _1118) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2180 = (((_1167 * _1119) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2163 - _2065)) + _2065);
    float _2183 = fma(_2180, cbSceneParam._m0[89u].z, fma(_2178, cbSceneParam._m0[89u].y, _2176 * cbSceneParam._m0[89u].x));
    float _2186 = fma(_2180, cbSceneParam._m0[90u].z, fma(_2178, cbSceneParam._m0[90u].y, _2176 * cbSceneParam._m0[90u].x));
    float _2189 = fma(_2180, cbSceneParam._m0[91u].z, fma(_2178, cbSceneParam._m0[91u].y, _2176 * cbSceneParam._m0[91u].x));
    float _2223 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2227 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2235 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2236 = _2223 / _2235;
    float _2237 = _2227 / _2235;
    float _2238 = _2231 / _2235;
    float _2385;
    float _2386;
    float _2387;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2265 = ((uint(_2238 > cbSceneParam._m0[59u].y) + uint(_2238 > cbSceneParam._m0[59u].x)) + uint(_2238 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2266 = _2265 + 43u;
        uint _2274 = _2265 + 44u;
        uint _2282 = _2265 + 45u;
        uint _2290 = _2265 + 46u;
        float _2301 = fma(_2235, cbSceneParam._m0[_2266].w, fma(_2231, cbSceneParam._m0[_2266].z, fma(_2227, cbSceneParam._m0[_2266].y, _2223 * cbSceneParam._m0[_2266].x)));
        float _2305 = fma(_2235, cbSceneParam._m0[_2274].w, fma(_2231, cbSceneParam._m0[_2274].z, fma(_2227, cbSceneParam._m0[_2274].y, _2223 * cbSceneParam._m0[_2274].x)));
        float _2313 = fma(_2235, cbSceneParam._m0[_2290].w, fma(_2231, cbSceneParam._m0[_2290].z, fma(_2227, cbSceneParam._m0[_2290].y, _2223 * cbSceneParam._m0[_2290].x)));
        float _2318 = cbSceneParam._m0[33u].z * _2313;
        float _2320 = cbSceneParam._m0[33u].w * _2313;
        float _2323 = fma(_2235, cbSceneParam._m0[_2282].w, fma(_2231, cbSceneParam._m0[_2282].z, fma(_2227, cbSceneParam._m0[_2282].y, _2223 * cbSceneParam._m0[_2282].x))) / _2313;
        float _2371 = (cbSceneParam._m0[33u].x - sqrt(((_2237 * _2237) + (_2236 * _2236)) + (_2238 * _2238))) * cbSceneParam._m0[33u].y;
        float _4784 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2378 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2318 + _2301) / _2313, (_2320 + _2305) / _2313), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 + _2301) / _2313, (_2305 - _2318) / _2313), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2301 - _2318) / _2313, (_2305 - _2320) / _2313), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2301 - _2320) / _2313, (_2318 + _2305) / _2313), _2323), 0.0)).x), vec4(0.25)));
        _2385 = 1.0 - (_2378 * cbSceneParam._m0[34u].x);
        _2386 = 1.0 - (_2378 * cbSceneParam._m0[34u].y);
        _2387 = 1.0 - (_2378 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2385 = 1.0;
        _2386 = 1.0;
        _2387 = 1.0;
    }
    float _2451;
    float _2453;
    float _2455;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2439 = fma(_2235, cbSceneParam._m0[63u].w, fma(_2231, cbSceneParam._m0[63u].z, fma(_2227, cbSceneParam._m0[63u].y, _2223 * cbSceneParam._m0[63u].x)));
        float _2440 = fma(_2235, cbSceneParam._m0[60u].w, fma(_2231, cbSceneParam._m0[60u].z, fma(_2227, cbSceneParam._m0[60u].y, _2223 * cbSceneParam._m0[60u].x))) / _2439;
        float _2441 = fma(_2235, cbSceneParam._m0[61u].w, fma(_2231, cbSceneParam._m0[61u].z, fma(_2227, cbSceneParam._m0[61u].y, _2223 * cbSceneParam._m0[61u].x))) / _2439;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2440 >= cbSceneParam._m0[64u].x) && (_2441 >= cbSceneParam._m0[64u].y)) && (_2440 <= cbSceneParam._m0[64u].z)) && (_2441 <= cbSceneParam._m0[64u].w))
        {
            float _2579 = fma(_2235, cbSceneParam._m0[62u].w, fma(_2231, cbSceneParam._m0[62u].z, fma(_2227, cbSceneParam._m0[62u].y, _2223 * cbSceneParam._m0[62u].x))) / _2439;
            float _2583 = isnan(cbSceneParam._m0[41u].w) ? _2579 : (isnan(_2579) ? cbSceneParam._m0[41u].w : max(_2579, cbSceneParam._m0[41u].w));
            float _2626 = (cbSceneParam._m0[33u].x - sqrt(((_2237 * _2237) + (_2236 * _2236)) + (_2238 * _2238))) * cbSceneParam._m0[33u].y;
            float _4800 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
            float _2633 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2440, cbSceneParam._m0[33u].w + _2441), _2583), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2440, _2441 - cbSceneParam._m0[33u].z), _2583), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2440 - cbSceneParam._m0[33u].z, _2441 - cbSceneParam._m0[33u].w), _2583), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2440 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2441), _2583), 0.0)).x), vec4(0.25)));
            float _2637 = 1.0 - (_2633 * cbSceneParam._m0[34u].x);
            float _2638 = 1.0 - (_2633 * cbSceneParam._m0[34u].y);
            float _2639 = 1.0 - (_2633 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2639) ? _2387 : (isnan(_2387) ? _2639 : min(_2387, _2639));
            frontier_phi_37_36_ladder_1 = isnan(_2638) ? _2386 : (isnan(_2386) ? _2638 : min(_2386, _2638));
            frontier_phi_37_36_ladder_2 = isnan(_2637) ? _2385 : (isnan(_2385) ? _2637 : min(_2385, _2637));
        }
        else
        {
            frontier_phi_37_36_ladder = _2387;
            frontier_phi_37_36_ladder_1 = _2386;
            frontier_phi_37_36_ladder_2 = _2385;
        }
        _2451 = frontier_phi_37_36_ladder_2;
        _2453 = frontier_phi_37_36_ladder_1;
        _2455 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2451 = _2385;
        _2453 = _2386;
        _2455 = _2387;
    }
    uvec4 _2460 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2462 = _2460.x * 14u;
    uint _2463 = _2462 + 13u;
    float _2470 = _1132 + (-1.0);
    float _2475 = (cbLight._m0[_2463].x * _2470) + 1.0;
    float _2476 = (cbLight._m0[_2463].y * _2470) + 1.0;
    float _2477 = (cbLight._m0[_2463].z * _2470) + 1.0;
    float _2478 = (cbLight._m0[_2463].w * _2470) + 1.0;
    uint _2479 = _2462 + 5u;
    float _2485 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
    uint _2489 = _2462 + 4u;
    float _2498 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
    uint _2502 = _2462 | 1u;
    float _2513 = dot(vec3(cbLight._m0[_2462].xyz), vec3(_955, _956, _957));
    float _2516 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_955, _956, _957));
    float _4836 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _4847 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2521 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * 0.3183098733425140380859375;
    float _2523 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * 0.3183098733425140380859375;
    float _2530 = ((cbLight._m0[_2479].x * _2485) * _2523) + (((cbLight._m0[_2489].x * _2451) * _2498) * _2521);
    float _2531 = ((_2485 * cbLight._m0[_2479].y) * _2523) + (((cbLight._m0[_2489].y * _2453) * _2498) * _2521);
    float _2532 = ((_2485 * cbLight._m0[_2479].z) * _2523) + (((cbLight._m0[_2489].z * _2455) * _2498) * _2521);
    uvec4 _2536 = floatBitsToUint(cbLight._m0[_2462 + 12u]);
    bool _2538 = _2536.x == 0u;
    float _2640;
    float _2642;
    float _2644;
    if (_2538)
    {
        _2640 = _2530;
        _2642 = _2531;
        _2644 = _2532;
    }
    else
    {
        uint _2648 = _2462 + 6u;
        float _2664 = (dot(vec3(cbLight._m0[_2462 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2665 = _2664 * _2664;
        float _4858 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2666 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2667 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _2640 = (((cbLight._m0[_2648].x * 0.3183098733425140380859375) * _2666) * _2667) + _2530;
        _2642 = (((cbLight._m0[_2648].y * 0.3183098733425140380859375) * _2666) * _2667) + _2531;
        _2644 = (((cbLight._m0[_2648].z * 0.3183098733425140380859375) * _2666) * _2667) + _2532;
    }
    bool _2647 = _2536.y == 0u;
    float _2702;
    float _2704;
    float _2706;
    if (_2647)
    {
        _2702 = _2640;
        _2704 = _2642;
        _2706 = _2644;
    }
    else
    {
        uint _2875 = _2462 + 7u;
        float _2891 = (dot(vec3(cbLight._m0[_2462 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2892 = _2891 * _2891;
        float _4874 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2893 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2894 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
        _2702 = (((cbLight._m0[_2875].x * 0.3183098733425140380859375) * _2893) * _2894) + _2640;
        _2704 = (((cbLight._m0[_2875].y * 0.3183098733425140380859375) * _2893) * _2894) + _2642;
        _2706 = (((cbLight._m0[_2875].z * 0.3183098733425140380859375) * _2893) * _2894) + _2644;
    }
    uint _2709 = _2462 + 8u;
    float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2462].w)) * _958) * 0.949999988079071044921875);
    float _2723 = _2722 * _2722;
    float _2724 = cbLight._m0[_2462].x + _1034;
    float _2725 = cbLight._m0[_2462].y + _1035;
    float _2726 = cbLight._m0[_2462].z + _1036;
    float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
    float _2731 = _2730 * _2724;
    float _2732 = _2730 * _2725;
    float _2733 = _2730 * _2726;
    float _2734 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2462].xyz));
    float _4890 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _4901 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2738 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
    float _2739 = dot(vec3(_955, _956, _957), vec3(_2731, _2732, _2733));
    float _4912 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2742 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
    float _2743 = dot(vec3(cbLight._m0[_2462].xyz), vec3(_2731, _2732, _2733));
    float _4923 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2747 = _2723 * _2723;
    float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
    float _2759 = exp2(log2(1.0 - (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) * 5.0);
    float _2760 = 0.959999978542327880859375 - _1113;
    float _2762 = 0.959999978542327880859375 - _1114;
    float _2763 = 0.959999978542327880859375 - _1115;
    float _2770 = 1.0 - _2723;
    float _2781 = (0.5 / (((_2738 * ((_2737 * _2770) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2738 * _2770) + _2723) * _2737))) * _2737;
    float _4934 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2783 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
    uint _2797 = _2462 + 9u;
    float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _958) * 0.949999988079071044921875);
    float _2809 = _2808 * _2808;
    float _2810 = cbLight._m0[_2502].x + _1034;
    float _2811 = cbLight._m0[_2502].y + _1035;
    float _2812 = cbLight._m0[_2502].z + _1036;
    float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
    float _2817 = _2816 * _2810;
    float _2818 = _2816 * _2811;
    float _2819 = _2816 * _2812;
    float _2820 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2502].xyz));
    float _4945 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2823 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
    float _2824 = dot(vec3(_955, _956, _957), vec3(_2817, _2818, _2819));
    float _4956 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
    float _2827 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
    float _2828 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2817, _2818, _2819));
    float _4967 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2832 = _2809 * _2809;
    float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
    float _2843 = exp2(log2(1.0 - (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) * 5.0);
    float _2850 = 1.0 - _2809;
    float _2860 = (0.5 / (((_2738 * ((_2823 * _2850) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2738 * _2850) + _2809) * _2823))) * _2823;
    float _4978 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2862 = (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
    float _2872 = (((((_2843 * _2760) + _1116) * cbLight._m0[_2797].x) * _2862) * _2485) + ((((cbLight._m0[_2709].x * _2451) * ((_2759 * _2760) + _1116)) * _2783) * _2498);
    float _2873 = (((((_2843 * _2762) + _1118) * cbLight._m0[_2797].y) * _2862) * _2485) + ((((cbLight._m0[_2709].y * _2453) * ((_2759 * _2762) + _1118)) * _2783) * _2498);
    float _2874 = (((((_2843 * _2763) + _1119) * cbLight._m0[_2797].z) * _2862) * _2485) + ((((cbLight._m0[_2709].z * _2455) * ((_2759 * _2763) + _1119)) * _2783) * _2498);
    float _2930;
    float _2932;
    float _2934;
    if (_2538)
    {
        _2930 = _2872;
        _2932 = _2873;
        _2934 = _2874;
    }
    else
    {
        uint _2936 = _2462 + 2u;
        uint _2940 = _2462 + 10u;
        float _2954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2936].w)) * _958) * 0.949999988079071044921875);
        float _2955 = _2954 * _2954;
        float _2956 = cbLight._m0[_2936].x + _1034;
        float _2957 = cbLight._m0[_2936].y + _1035;
        float _2958 = cbLight._m0[_2936].z + _1036;
        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
        float _2963 = _2962 * _2956;
        float _2964 = _2962 * _2957;
        float _2965 = _2962 * _2958;
        float _2966 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2936].xyz));
        float _4989 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _2970 = dot(vec3(_955, _956, _957), vec3(_2963, _2964, _2965));
        float _5000 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _2974 = dot(vec3(cbLight._m0[_2936].xyz), vec3(_2963, _2964, _2965));
        float _5011 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2978 = _2955 * _2955;
        float _2982 = ((_2973 * _2973) * (_2978 + (-1.0))) + 1.0;
        float _2989 = exp2(log2(1.0 - (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) * 5.0);
        float _2996 = 1.0 - _2955;
        float _3006 = (0.5 / (((_2738 * ((_2969 * _2996) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2738 * _2996) + _2955) * _2969))) * _2969;
        float _5022 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3008 = (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2978 / ((_2982 * _2982) * 3.141590118408203125));
        float _3009 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _2930 = (((((_2989 * _2760) + _1116) * cbLight._m0[_2940].x) * _3008) * _3009) + _2872;
        _2932 = (((((_2989 * _2762) + _1118) * cbLight._m0[_2940].y) * _3008) * _3009) + _2873;
        _2934 = (((((_2989 * _2763) + _1119) * cbLight._m0[_2940].z) * _3008) * _3009) + _2874;
    }
    float _3040;
    float _3042;
    float _3044;
    if (_2647)
    {
        _3040 = _2930;
        _3042 = _2932;
        _3044 = _2934;
    }
    else
    {
        uint _3051 = _2462 + 3u;
        uint _3055 = _2462 + 11u;
        float _3069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3051].w)) * _958) * 0.949999988079071044921875);
        float _3070 = _3069 * _3069;
        float _3071 = cbLight._m0[_3051].x + _1034;
        float _3072 = cbLight._m0[_3051].y + _1035;
        float _3073 = cbLight._m0[_3051].z + _1036;
        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
        float _3078 = _3077 * _3071;
        float _3079 = _3077 * _3072;
        float _3080 = _3077 * _3073;
        float _3081 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_3051].xyz));
        float _5038 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
        float _3084 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
        float _3085 = dot(vec3(_955, _956, _957), vec3(_3078, _3079, _3080));
        float _5049 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        float _3088 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
        float _3089 = dot(vec3(cbLight._m0[_3051].xyz), vec3(_3078, _3079, _3080));
        float _5060 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        float _3093 = _3070 * _3070;
        float _3097 = ((_3088 * _3088) * (_3093 + (-1.0))) + 1.0;
        float _3104 = exp2(log2(1.0 - (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0)))) * 5.0);
        float _3111 = 1.0 - _3070;
        float _3121 = (0.5 / (((_2738 * ((_3084 * _3111) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_2738 * _3111) + _3070) * _3084))) * _3084;
        float _5071 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        float _3123 = (isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3093 / ((_3097 * _3097) * 3.141590118408203125));
        float _3124 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
        _3040 = (((((_3104 * _2760) + _1116) * cbLight._m0[_3055].x) * _3123) * _3124) + _2930;
        _3042 = (((((_3104 * _2762) + _1118) * cbLight._m0[_3055].y) * _3123) * _3124) + _2932;
        _3044 = (((((_3104 * _2763) + _1119) * cbLight._m0[_3055].z) * _3123) * _3124) + _2934;
    }
    float _3190;
    float _3192;
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    if (_2460.y == 0u)
    {
        uvec4 _3145 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3146 = _3145.x;
        uint _3157 = uint((float(_3145.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _3146))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _3146)));
        float _3167 = (log2(_2238 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3168 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
        uint _3171 = uint(isnan(14.0) ? _3168 : (isnan(_3168) ? 14.0 : min(_3168, 14.0)));
        uvec4 _3176 = texelFetch(g_lightClusterGridBuffer, int(((_3171 << 2u) + (_3157 << 6u)) >> 2u));
        uint _3177 = _3176.x;
        uint _3178 = _3145.z;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        float _3267;
        if (((((1u << ((_3178 >> 4u) & 15u)) + 4294967295u) & _3177) == 0u) || ((_3178 & 240u) == 0u))
        {
            _3257 = 0.0;
            _3259 = 0.0;
            _3261 = 0.0;
            _3263 = 0.0;
            _3265 = 0.0;
            _3267 = 0.0;
        }
        else
        {
            float _3258;
            float _3260;
            float _3262;
            float _3264;
            float _3266;
            float _3268;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            uint _3416 = 0u;
            uint _3425;
            bool _3426;
            for (;;)
            {
                _3425 = texelFetch(g_lightClassification, int((((_3171 << 5u) + (_3157 << 9u)) + (_3416 << 2u)) >> 2u)).x;
                _3426 = _3425 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3426)
                {
                    frontier_phi_71_pred = _3415;
                    frontier_phi_71_pred_1 = _3414;
                    frontier_phi_71_pred_2 = _3413;
                    frontier_phi_71_pred_3 = _3412;
                    frontier_phi_71_pred_4 = _3411;
                    frontier_phi_71_pred_5 = _3410;
                }
                else
                {
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    uint _3561;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3414;
                    _3560 = _3415;
                    _3561 = _3425;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    for (;;)
                    {
                        uint _3565 = uint(findLSB(_3561)) + (_3416 << 5u);
                        uint _3562 = (_3561 + 4294967295u) & _3561;
                        uint _3567 = _3565 * 48u;
                        vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3567)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 3u)).x));
                        uint _3587 = (_3565 * 48u) + 4u;
                        vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3587)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 3u)).x));
                        uint _3606 = (_3565 * 48u) + 8u;
                        vec3 _3617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3606)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 2u)).x));
                        float _3621 = _3581.x - _2236;
                        float _3622 = _3581.y - _2237;
                        float _3623 = _3581.z - _2238;
                        float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                        float _3627 = inversesqrt(_3624);
                        float _3628 = _3627 * _3621;
                        float _3629 = _3627 * _3622;
                        float _3630 = _3627 * _3623;
                        float _3631 = dot(vec3(_1073, _1076, _1079), vec3(_3628, _3629, _3630));
                        float _3636 = 1.0 - (_3624 * _3581.w);
                        float _5097 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                        float _3638 = sqrt(_3624) * _3600.w;
                        float _3641 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                        float _3642 = _3641 * _3641;
                        float _3645 = ((1.0 - _3642) * _3631) + _3642;
                        float _3648 = _3638 * _3638;
                        float _3652 = ((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3637) / ((_3648 * 0.699999988079071044921875) + 1.0);
                        float _3656 = (-0.0) - _2236;
                        float _3657 = (-0.0) - _2237;
                        float _3658 = (-0.0) - _2238;
                        float _3662 = inversesqrt(dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658)));
                        float _3663 = _3662 * _3656;
                        float _3664 = _3662 * _3657;
                        float _3665 = _3662 * _3658;
                        float _3672 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                        float _3673 = 1.0 - _1148;
                        float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                        float _3681 = _3680 * _3680;
                        float _3682 = _3681 * _3681;
                        float _3683 = _3663 + _3628;
                        float _3684 = _3664 + _3629;
                        float _3685 = _3665 + _3630;
                        float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                        float _3693 = dot(vec3(_1073, _1076, _1079), vec3(_3663, _3664, _3665));
                        float _5113 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                        float _3696 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                        float _3697 = dot(vec3(_1073, _1076, _1079), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                        float _5124 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                        float _3700 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                        float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                        float _3705 = _3641 * _3681;
                        float _3706 = _3705 * _3705;
                        float _3709 = ((1.0 - _3706) * _3631) + _3706;
                        float _5135 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3710 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                        float _3711 = 1.0 - _3681;
                        float _3721 = (0.5 / (((_3710 * ((_3696 * _3711) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3681) * _3696))) * _3710;
                        float _5146 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                        float _3732 = (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) / ((_3704 * _3704) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125))) * _3637;
                        _3485 = (_3652 * _3600.x) + _3558;
                        _3486 = (_3652 * _3600.y) + _3559;
                        _3487 = (_3652 * _3600.z) + _3560;
                        _3482 = (_3732 * _3617.x) + _3555;
                        _3483 = (_3732 * _3617.y) + _3556;
                        _3484 = (_3732 * _3617.z) + _3557;
                        if (_3562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3486;
                            _3560 = _3487;
                            _3561 = _3562;
                        }
                    }
                    frontier_phi_71_pred = _3487;
                    frontier_phi_71_pred_1 = _3486;
                    frontier_phi_71_pred_2 = _3485;
                    frontier_phi_71_pred_3 = _3484;
                    frontier_phi_71_pred_4 = _3483;
                    frontier_phi_71_pred_5 = _3482;
                }
                _3268 = frontier_phi_71_pred;
                _3266 = frontier_phi_71_pred_1;
                _3264 = frontier_phi_71_pred_2;
                _3262 = frontier_phi_71_pred_3;
                _3260 = frontier_phi_71_pred_4;
                _3258 = frontier_phi_71_pred_5;
                uint _3417 = _3416 + 1u;
                if (_3417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3410 = _3258;
                    _3411 = _3260;
                    _3412 = _3262;
                    _3413 = _3264;
                    _3414 = _3266;
                    _3415 = _3268;
                    _3416 = _3417;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3257 = _3258;
            _3259 = _3260;
            _3261 = _3262;
            _3263 = _3264;
            _3265 = _3266;
            _3267 = _3268;
        }
        uvec4 _3271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3272 = _3271.z;
        uint _3274 = (_3272 >> 8u) & 15u;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        if (((4294967295u << _3274) & _3177) == 0u)
        {
            _3378 = _3257;
            _3380 = _3259;
            _3382 = _3261;
            _3384 = _3263;
            _3386 = _3265;
            _3388 = _3267;
        }
        else
        {
            float _3403 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
            float _3404 = _3403 * _2236;
            float _3405 = _3403 * _2237;
            float _3406 = _3403 * _2238;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3274 < ((_3272 >> 12u) & 15u))
            {
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3389;
                float _3538 = _3257;
                float _3539 = _3259;
                float _3540 = _3261;
                float _3541 = _3263;
                float _3542 = _3265;
                float _3543 = _3267;
                uint _3544 = _3274;
                uint _3553;
                bool _3554;
                for (;;)
                {
                    _3553 = texelFetch(g_lightClassification, int((((_3171 << 5u) + (_3157 << 9u)) + (_3544 << 2u)) >> 2u)).x;
                    _3554 = _3553 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3554)
                    {
                        frontier_phi_82_pred = _3543;
                        frontier_phi_82_pred_1 = _3542;
                        frontier_phi_82_pred_2 = _3541;
                        frontier_phi_82_pred_3 = _3540;
                        frontier_phi_82_pred_4 = _3539;
                        frontier_phi_82_pred_5 = _3538;
                    }
                    else
                    {
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _4043;
                        float _4044;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        float _3763 = _3542;
                        float _3764 = _3543;
                        uint _3765 = _3553;
                        uint _3766;
                        vec4 _3791;
                        float _3792;
                        vec4 _3807;
                        vec3 _3819;
                        vec4 _3834;
                        vec4 _3849;
                        float _3895;
                        bool _3896;
                        for (;;)
                        {
                            uint _3776 = ((_3544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3765));
                            _3766 = (_3765 + 4294967295u) & _3765;
                            uint _3778 = _3776 * 40u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            _3792 = _3791.w;
                            uint _3794 = (_3776 * 40u) + 4u;
                            _3807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 3u)).x));
                            uint _3809 = (_3776 * 40u) + 8u;
                            _3819 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x));
                            uint _3821 = (_3776 * 40u) + 16u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3776 * 40u) + 20u;
                            _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3851 = (_3776 * 40u) + 24u;
                            vec4 _3864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 3u)).x));
                            uint _3870 = (_3776 * 40u) + 28u;
                            vec4 _3883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 3u)).x));
                            _3895 = fma(_2238, _3883.z, fma(_2237, _3883.y, _3883.x * _2236)) + _3883.w;
                            _3896 = !((fma(_2238, _3864.z, fma(_2237, _3864.y, _3864.x * _2236)) + _3864.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3896)
                            {
                                float _3923 = _3791.x - _2236;
                                float _3924 = _3791.y - _2237;
                                float _3925 = _3791.z - _2238;
                                float _3926 = dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925));
                                float _3929 = inversesqrt(_3926);
                                float _3930 = _3929 * _3923;
                                float _3931 = _3929 * _3924;
                                float _3932 = _3929 * _3925;
                                float _3936 = 1.0 - (_3926 / (_3792 * _3792));
                                float _5157 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3937 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
                                float _3941 = sqrt(_3926) * _3807.w;
                                float _3943 = 1.39999997615814208984375 / (_3941 + 1.39999997615814208984375);
                                float _3944 = _3943 * _3943;
                                float _3947 = ((1.0 - _3944) * dot(vec3(_3930, _3931, _3932), vec3(_1073, _1076, _1079))) + _3944;
                                float _3950 = _3941 * _3941;
                                float _3954 = (fma(_2238, _3834.z, fma(_2237, _3834.y, _3834.x * _2236)) + _3834.w) / _3895;
                                float _3955 = (fma(_2238, _3849.z, fma(_2237, _3849.y, _3849.x * _2236)) + _3849.w) / _3895;
                                float _3959 = 1.0 - dot(vec2(_3954, _3955), vec2(_3954, _3955));
                                float _5173 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3960 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3961 = _3960 * (((isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0))) * _3937) / ((_3950 * 0.699999988079071044921875) + 1.0));
                                float _3973 = exp2(log2(1.0 / ((_3950 * 3.5) + 5.0)) * 0.25);
                                float _3974 = 1.0 - _1148;
                                float _3981 = sqrt(1.0 - ((1.0 - (_3974 * _3974)) * (1.0 - (_3973 * _3973))));
                                float _3982 = _3981 * _3981;
                                float _3983 = _3982 * _3982;
                                float _3984 = _3930 - _3404;
                                float _3985 = _3931 - _3405;
                                float _3986 = _3932 - _3406;
                                float _3990 = inversesqrt(dot(vec3(_3984, _3985, _3986), vec3(_3984, _3985, _3986)));
                                float _3994 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3404, (-0.0) - _3405, (-0.0) - _3406));
                                float _5184 = isnan(0.0) ? _3994 : (isnan(_3994) ? 0.0 : max(_3994, 0.0));
                                float _3997 = isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0));
                                float _3998 = dot(vec3(_1073, _1076, _1079), vec3(_3990 * _3984, _3990 * _3985, _3990 * _3986));
                                float _5195 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _4001 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
                                float _4005 = ((_4001 * _4001) * (_3983 + (-1.0))) + 1.0;
                                float _4006 = _3943 * _3982;
                                float _4007 = _4006 * _4006;
                                float _4013 = ((1.0 - _4007) * dot(vec3(_1073, _1076, _1079), vec3(_3930, _3931, _3932))) + _4007;
                                float _5206 = isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0));
                                float _4014 = isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0));
                                float _4015 = 1.0 - _3982;
                                float _4025 = (0.5 / (((_4014 * ((_3997 * _4015) + _3982)) + 9.9999999392252902907785028219223e-09) + (((_4014 * _4015) + _3982) * _3997))) * _4014;
                                float _5217 = isnan(0.0) ? _4025 : (isnan(_4025) ? 0.0 : max(_4025, 0.0));
                                float _4035 = (_3960 * _3937) * (((_3983 * 3.1415927410125732421875) * (isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0)))) / ((_4005 * _4005) * ((_3950 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3961 * _3807.z;
                                frontier_phi_88_pred_1 = _3961 * _3807.y;
                                frontier_phi_88_pred_2 = _3961 * _3807.x;
                                frontier_phi_88_pred_3 = _4035 * _3819.z;
                                frontier_phi_88_pred_4 = _4035 * _3819.y;
                                frontier_phi_88_pred_5 = _4035 * _3819.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4044 = frontier_phi_88_pred;
                            _4043 = frontier_phi_88_pred_1;
                            _4042 = frontier_phi_88_pred_2;
                            _4041 = frontier_phi_88_pred_3;
                            _4040 = frontier_phi_88_pred_4;
                            _4039 = frontier_phi_88_pred_5;
                            _3749 = _4042 + _3762;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3746 = _4039 + _3759;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            if (_3766 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3766;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3751;
                        frontier_phi_82_pred_1 = _3750;
                        frontier_phi_82_pred_2 = _3749;
                        frontier_phi_82_pred_3 = _3748;
                        frontier_phi_82_pred_4 = _3747;
                        frontier_phi_82_pred_5 = _3746;
                    }
                    _3389 = frontier_phi_82_pred;
                    _3387 = frontier_phi_82_pred_1;
                    _3385 = frontier_phi_82_pred_2;
                    _3383 = frontier_phi_82_pred_3;
                    _3381 = frontier_phi_82_pred_4;
                    _3379 = frontier_phi_82_pred_5;
                    uint _3545 = _3544 + 1u;
                    if (_3545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3538 = _3379;
                        _3539 = _3381;
                        _3540 = _3383;
                        _3541 = _3385;
                        _3542 = _3387;
                        _3543 = _3389;
                        _3544 = _3545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3385;
                frontier_phi_63_64_ladder_1 = _3389;
                frontier_phi_63_64_ladder_2 = _3387;
                frontier_phi_63_64_ladder_3 = _3383;
                frontier_phi_63_64_ladder_4 = _3381;
                frontier_phi_63_64_ladder_5 = _3379;
            }
            else
            {
                frontier_phi_63_64_ladder = _3263;
                frontier_phi_63_64_ladder_1 = _3267;
                frontier_phi_63_64_ladder_2 = _3265;
                frontier_phi_63_64_ladder_3 = _3261;
                frontier_phi_63_64_ladder_4 = _3259;
                frontier_phi_63_64_ladder_5 = _3257;
            }
            _3378 = frontier_phi_63_64_ladder_5;
            _3380 = frontier_phi_63_64_ladder_4;
            _3382 = frontier_phi_63_64_ladder_3;
            _3384 = frontier_phi_63_64_ladder;
            _3386 = frontier_phi_63_64_ladder_2;
            _3388 = frontier_phi_63_64_ladder_1;
        }
        float _3393 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _3190 = (_3393 * _3384) + _2702;
        _3192 = (_3393 * _3386) + _2704;
        _3194 = (_3393 * _3388) + _2706;
        _3196 = ((_3378 * _1116) * _3393) + _3040;
        _3198 = ((_3380 * _1118) * _3393) + _3042;
        _3200 = ((_3382 * _1119) * _3393) + _3044;
    }
    else
    {
        _3190 = _2702;
        _3192 = _2704;
        _3194 = _2706;
        _3196 = _3040;
        _3198 = _3042;
        _3200 = _3044;
    }
    float _5233 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _5244 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _5255 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _3217 = ((isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0))) * (_3190 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1132))) + ((_3196 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _3218 = ((isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0))) * (_3192 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1132))) + ((_3198 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _3219 = ((isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0))) * (_3194 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1132))) + ((_3200 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    uint _3220 = _271 + 6u;
    float _3228 = _1054 / cbSceneParam._m0[86u].x;
    float _3229 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _3243 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3228, _3229, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3245 = _3243.x;
    float _3246 = _3243.y;
    float _3247 = _3243.z;
    float _3248 = _3243.w;
    float _3320;
    float _3322;
    float _3324;
    float _3326;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3282 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3283 = _3282 / _977;
        float _3294 = _3283 * _1027;
        float _3295 = _1028 * _3283;
        float _3296 = (-0.0) - _3295;
        float _3298 = _3283 * _1029;
        float _3300 = (cbSceneParam._m0[77u].w * _3296) / _3282;
        float _3301 = _3300 + cbSceneParam._m0[79u].w;
        float _3302 = cbSceneParam._m0[79u].w - _3295;
        float _3308 = sqrt(((_3294 * _3294) + (_3295 * _3295)) + (_3298 * _3298));
        float _3311 = (1.0 - (cbSceneParam._m0[77u].w / _3282)) * _3308;
        float _3316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3495;
        if (abs((_3296 - _3300) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3495 = ((((_3301 > 0.0) ? exp2(_3316 * _3301) : (2.0 - exp2(_3318 * _3301))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3311;
        }
        else
        {
            float _3439 = 1.0 / cbSceneParam._m0[80u].x;
            float _3440 = isnan(_3302) ? _3301 : (isnan(_3301) ? _3302 : max(_3301, _3302));
            float _3441 = isnan(_3302) ? _3301 : (isnan(_3301) ? _3302 : min(_3301, _3302));
            float _3450 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : min(_3440, 0.0));
            float _3451 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : min(_3441, 0.0));
            _3495 = ((abs(_3308 / _3296) * cbSceneParam._m0[80u].y) * ((((_3450 - _3451) * 2.0) - ((exp2(_3316 * (isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0)))) - exp2(_3316 * (isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))))) * _3439)) - ((exp2(_3318 * _3450) - exp2(_3318 * _3451)) * _3439))) + (_3311 * cbSceneParam._m0[80u].z);
        }
        vec4 _3497 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3228, _3229, 1.0), 0.0);
        float _3506 = exp2((_3495 * (-1.44269502162933349609375)) * (1.0 - _3497.w));
        float _3507 = log2(_3506);
        float _3523 = log2(_3248);
        _3320 = (exp2(_3523 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].x)) * _3497.x) / cbSceneParam._m0[78u].x)) + _3245;
        _3322 = (exp2(_3523 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].y)) * _3497.y) / cbSceneParam._m0[78u].y)) + _3246;
        _3324 = (exp2(_3523 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].z)) * _3497.z) / cbSceneParam._m0[78u].z)) + _3247;
        _3326 = _3506 * _3248;
    }
    else
    {
        _3320 = _3245;
        _3322 = _3246;
        _3324 = _3247;
        _3326 = _3248;
    }
    bool _3533;
    vec4 _3336;
    vec4 _3358;
    float _3360;
    float _3364;
    float _3365;
    float _3366;
    float _3367;
    bool _3377;
    for (;;)
    {
        _3336 = cbMatDynParam._m0[0u];
        float _3338 = roundEven(_3336.y);
        bool _3339 = _3338 == 3.0;
        float _3340 = log2(_3326);
        float _3347 = exp2(_3340 * cbSceneParam._m0[78u].x) * _3217;
        float _3348 = exp2(_3340 * cbSceneParam._m0[78u].y) * _3218;
        float _3349 = exp2(_3340 * cbSceneParam._m0[78u].z) * _3219;
        float _3356 = _1043 + (-0.5);
        _3358 = cbMtdParam._m0[1u];
        _3360 = _3358.y * _3356;
        float _3363 = (_3338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3364 = _3363 * (_3339 ? _3347 : (_3347 + (cbSceneParam._m0[72u].w * _3320)));
        _3365 = _3363 * (_3339 ? _3348 : (_3348 + (cbSceneParam._m0[72u].w * _3322)));
        _3366 = _3363 * (_3339 ? _3349 : (_3349 + (cbSceneParam._m0[72u].w * _3324)));
        _3367 = _3356 * 0.999000012874603271484375;
        _3377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3377)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3367) < 0.5)
            {
                _3533 = true;
                break;
            }
        }
        uint _3474 = _1092 + uint(_3336.w);
        if ((cbInstanceData._m0[_3474].w < 1.0) && ((cbInstanceData._m0[_3474].w + _3367) < 0.5))
        {
            _3533 = true;
            break;
        }
        if ((_3360 + 1.0) < _3358.x)
        {
            _3533 = true;
            break;
        }
        _3533 = false;
        break;
    }
    float _3737;
    if (_3533)
    {
        discard_state = true;
        _3737 = 0.0;
    }
    else
    {
        _3737 = cbInstanceData._m0[_3220].w;
    }
    SV_Target.x = _3364;
    SV_Target.y = _3365;
    SV_Target.z = _3366;
    SV_Target.w = _3737;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3220].w;
    discard_exit();
}


