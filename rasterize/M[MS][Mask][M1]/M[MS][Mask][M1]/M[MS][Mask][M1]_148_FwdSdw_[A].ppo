#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1767;
float _4426;
float _4427;
float _4428;
float _4429;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _267 = _266 * _258;
    float _268 = _266 * _259;
    float _269 = _266 * _260;
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = _273 * NORMAL.x;
    float _275 = _273 * NORMAL.y;
    float _276 = _273 * NORMAL.z;
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = _280 * TANGENT.x;
    float _282 = _280 * TANGENT.y;
    float _283 = _280 * TANGENT.z;
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4438 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4449 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4460 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[23u].w) + _456) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4471 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _481 = (_474 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _482 = (_474 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _483 = (_474 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _522 = _520.x;
    float _532 = dot(vec4(_522, _520.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _546 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_522 - _532) * cbMtdParam._m0[23u].w) + _532) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4482 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _554 = (_547 * ((_500.x * cbMtdParam._m0[13u].x) - _481)) + _481;
    float _555 = (_547 * ((_500.y * cbMtdParam._m0[13u].y) - _482)) + _482;
    float _556 = (_547 * ((_500.z * cbMtdParam._m0[13u].z) - _483)) + _483;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _594 = _592.x;
    float _604 = dot(vec4(_594, _592.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _616 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_594 - _604) * cbMtdParam._m0[23u].w) + _604) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4493 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _624 = (_617 * ((_575.x * cbMtdParam._m0[14u].x) - _554)) + _554;
    float _625 = (_617 * ((_575.y * cbMtdParam._m0[14u].y) - _555)) + _555;
    float _626 = (_617 * ((_575.z * cbMtdParam._m0[14u].z) - _556)) + _556;
    float _630 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _624;
    float _633 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _625;
    float _636 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _626;
    float _643 = ((_624 - _630) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) + _630;
    float _644 = ((_625 - _633) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) + _633;
    float _645 = ((_626 - _636) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) + _636;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _324) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _325) + cbTextureTilingScale._m0[14u].w));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _726 = _724.x;
    float _727 = _724.y;
    float _728 = _724.z;
    float _735 = ((_707.x - _726) * _474) + _726;
    float _736 = ((_707.y - _727) * _474) + _727;
    float _737 = ((_707.z - _728) * _474) + _728;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _760 = ((_749.x - _735) * _547) + _735;
    float _761 = ((_749.y - _736) * _547) + _736;
    float _762 = ((_749.z - _737) * _547) + _737;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _787 = ((_774.z - _762) * _617) + _762;
    float _790 = ((((_774.x - _760) * _617) + _760) * 2.0) + (-1.0);
    float _791 = ((((_774.y - _761) * _617) + _761) * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _4504 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _797 = sqrt(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))));
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _827 = (_790 + ((((_682.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_815.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _828 = (_791 + ((((_682.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_815.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _831 = fma(_797, _274, fma(_828, _281, _827 * _267));
    float _834 = fma(_797, _275, fma(_828, _282, _827 * _268));
    float _837 = fma(_797, _276, fma(_828, _283, _827 * _269));
    float _841 = inversesqrt(dot(vec3(_831, _834, _837), vec3(_831, _834, _837)));
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _870 = _868.x;
    float _871 = 1.0 - _870;
    float _879 = (cbMtdParam._m0[19u].x + dot(vec4(_841 * _831, _841 * _834, _841 * _837, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_870 - _871) * cbMtdParam._m0[24u].z) + _871) * cbMtdParam._m0[21u].z);
    float _4515 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _880 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _882 = (-0.0) - cbMtdParam._m0[24u].x;
    float _884 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
    float _892 = _880 - ((_880 * TEXCOORD_8.x) * _885);
    float _893 = _880 - ((_880 * TEXCOORD_8.y) * _885);
    float _894 = _880 - ((_880 * TEXCOORD_8.z) * _885);
    float _901 = (_892 * ((_663.x * cbMtdParam._m0[18u].x) - _643)) + _643;
    float _902 = (_893 * ((_663.y * cbMtdParam._m0[18u].y) - _644)) + _644;
    float _903 = (_894 * ((_663.z * cbMtdParam._m0[18u].z) - _645)) + _645;
    float _918 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _919 = _918 * TEXCOORD.z;
    float _920 = _918 * TEXCOORD.w;
    vec4 _932 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _919) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _920) + cbTextureTilingScale._m0[19u].w));
    float _934 = _932.x;
    float _935 = 1.0 - _934;
    float _961 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_934 - _935) * cbMtdParam._m0[24u].w) + _935) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4536 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _962 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _970 = ((((cbMtdParam._m0[10u].x - _901) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _962) + _901;
    float _971 = ((((cbMtdParam._m0[10u].y - _902) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _962) + _902;
    float _972 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _903)) * _962) + _903;
    vec4 _998 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1000 = _998.x;
    float _1018 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _1000) * _474) + _1000;
    float _1035 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _1018) * _547) + _1018;
    float _1052 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _1035) * _617) + _1035;
    float _1058 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1052) * cbMtdParam._m0[19u].z) + _1052;
    float _1060 = _1058 - (_1058 * _892);
    float _1062 = _1060 - (_1060 * _962);
    float _1069 = (((_682.z - _787) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _787;
    float _1073 = ((_815.z - _1069) * cbMtdParam._m0[19u].w) + _1069;
    vec4 _1089 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1096 = (_1089.x * 2.0) + (-1.0);
    float _1097 = (_1089.y * 2.0) + (-1.0);
    float _1098 = dot(vec2(_1096, _1097), vec2(_1096, _1097));
    float _4547 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1106 = ((_1089.z - _1073) * _892) + _1073;
    float _1109 = ((cbMtdParam._m0[23u].x - _1106) * _962) + _1106;
    vec4 _1132 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _919) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _920) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1138 = (_1132.x * 2.0) + (-1.0);
    float _1139 = (_1132.y * 2.0) + (-1.0);
    float _1140 = dot(vec2(_1138, _1139), vec2(_1138, _1139));
    float _4558 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1155 = ((sqrt(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) - _797) * _894) + _797;
    float _1158 = (((_1096 - _827) * _892) + _827) + (cbMtdParam._m0[21u].x * _827);
    float _1159 = (((_1097 - _828) * _893) + _828) + (cbMtdParam._m0[21u].x * _828);
    float _1170 = (((_1138 - _1158) + (_1158 * cbMtdParam._m0[22u].z)) * _962) + _1158;
    float _1171 = (((_1139 - _1159) + (_1159 * cbMtdParam._m0[22u].z)) * _962) + _1159;
    float _1172 = (_962 * (sqrt(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) - _1155)) + _1155;
    float _1174 = cbMtdParam._m0[22u].x + _815.w;
    float _1177 = fma(_1172, _274, fma(_1171, _281, _1170 * _267));
    float _1180 = fma(_1172, _275, fma(_1171, _282, _1170 * _268));
    float _1183 = fma(_1172, _276, fma(_1171, _283, _1170 * _269));
    float _1187 = inversesqrt(dot(vec3(_1177, _1180, _1183), vec3(_1177, _1180, _1183)));
    float _1188 = _1187 * _1177;
    float _1189 = _1187 * _1180;
    float _1190 = _1187 * _1183;
    float _4569 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1191 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _4580 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _4591 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4602 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4613 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4624 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1196 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _1210 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1260 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1250);
    float _1261 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1250);
    float _1262 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1250);
    float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
    float _1267 = _1260 * _1266;
    float _1268 = _1261 * _1266;
    float _1269 = _1262 * _1266;
    vec4 _1274 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1276 = _1274.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1448 = sqrt(((_1260 * _1260) + (_1261 * _1261)) + (_1262 * _1262));
        float _1454 = (cbMatDynParam._m0[5u].x * _1448) + cbMatDynParam._m0[5u].y;
        float _4635 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1459 = (cbMatDynParam._m0[5u].z * _1448) + cbMatDynParam._m0[5u].w;
        float _4646 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) - _1455)) + _1455) < ((_1276 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1287 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1288 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1306 = fma(_1190, cbSceneParam._m0[5u].z, fma(_1189, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1188));
    float _1309 = fma(_1190, cbSceneParam._m0[6u].z, fma(_1189, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1188));
    float _1312 = fma(_1190, cbSceneParam._m0[7u].z, fma(_1189, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1188));
    uint _1325 = _305 + 9u;
    uint _1326 = _1325 + uint(cbMatDynParam._m0[0u].w);
    float _1332 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * cbInstanceData._m0[_1326].x;
    float _1333 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * cbInstanceData._m0[_1326].y;
    float _1334 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * cbInstanceData._m0[_1326].z;
    float _4657 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1335 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _4668 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _1336 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _1337 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _1338 = 1.0 - _1196;
    float _1339 = _1335 * _1338;
    float _1340 = _1336 * _1338;
    float _1341 = _1337 * _1338;
    float _1346 = (_1335 + (-0.039999999105930328369140625)) * _1196;
    float _1347 = (_1336 + (-0.039999999105930328369140625)) * _1196;
    float _1348 = (_1337 + (-0.039999999105930328369140625)) * _1196;
    float _1349 = _1346 + 0.039999999105930328369140625;
    float _1351 = _1347 + 0.039999999105930328369140625;
    float _1352 = _1348 + 0.039999999105930328369140625;
    vec4 _1361 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1287, cbSceneParam._m0[86u].y * _1288));
    float _1365 = ((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * TEXCOORD_5.w) * _1361.x;
    float _1366 = dot(vec3(_1188, _1189, _1190), vec3(_1267, _1268, _1269));
    float _1369 = _1366 * 2.0;
    float _1373 = (_1369 * _1188) - _1267;
    float _1374 = (_1369 * _1189) - _1268;
    float _1375 = (_1369 * _1190) - _1269;
    float _1379 = abs(dot(vec3(_1267, _1268, _1269), vec3(_1188, _1189, _1190)));
    float _4690 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
    float _1381 = sqrt(_1191);
    float _1394 = exp2((_1381 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1381 * 3.0));
    float _1400 = (1.0 - _1394) * ((_1381 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1401 = _1394 * _1381;
    float _1429 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1433 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1437 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1766;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1491 = fma(_1437, cbModelParam._m0[26u].z, fma(_1433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1429));
        float _1495 = fma(_1437, cbModelParam._m0[27u].z, fma(_1433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1429));
        float _1499 = fma(_1437, cbModelParam._m0[28u].z, fma(_1433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1429));
        float _1524 = _1429 + _1188;
        float _1525 = _1433 + _1189;
        float _1526 = _1437 + _1190;
        float _1536 = fma(_1526, cbModelParam._m0[26u].z, fma(_1525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1524)) - _1491;
        float _1537 = fma(_1526, cbModelParam._m0[27u].z, fma(_1525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1524)) - _1495;
        float _1538 = fma(_1526, cbModelParam._m0[28u].z, fma(_1525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1524)) - _1499;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1491 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1495 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[34u].z) + ((((((_1499 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1594 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1560.x + (-0.5));
        float _1596 = _1594 * (_1560.y + (-0.5));
        float _1597 = _1594 * (_1560.z + (-0.5));
        float _1604 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1567.x + (-0.5));
        float _1606 = _1604 * (_1567.y + (-0.5));
        float _1607 = _1604 * (_1567.z + (-0.5));
        float _1614 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1574.x + (-0.5));
        float _1616 = _1614 * (_1574.y + (-0.5));
        float _1617 = _1614 * (_1574.z + (-0.5));
        float _1624 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1581.x + (-0.5));
        float _1626 = _1624 * (_1581.y + (-0.5));
        float _1627 = _1624 * (_1581.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1648 = (dot(vec3(_1188, _1189, _1190), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4716 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1658 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4727 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4738 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_1660 + 1.0))) + _1665) * _1628;
        float _1675 = _1596 * 0.5;
        float _1676 = _1606 * 0.5;
        float _1677 = _1616 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_1188, _1189, _1190), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4749 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4760 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4771 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_1702 + 1.0))) + _1707) * _1629;
        float _1717 = _1597 * 0.5;
        float _1718 = _1607 * 0.5;
        float _1719 = _1617 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_1188, _1189, _1190), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4782 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4793 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4804 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_1744 + 1.0))) + _1749) * _1630;
        _1766 = _1597;
        _1768 = _1596;
        _1769 = _1595;
        _1770 = _1607;
        _1771 = _1606;
        _1772 = _1605;
        _1773 = _1617;
        _1774 = _1616;
        _1775 = _1615;
        _1776 = _1630;
        _1777 = _1629;
        _1778 = _1628;
        _1779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1767;
        _1768 = _1767;
        _1769 = _1767;
        _1770 = _1767;
        _1771 = _1767;
        _1772 = _1767;
        _1773 = _1767;
        _1774 = _1767;
        _1775 = _1767;
        _1776 = _1767;
        _1777 = _1767;
        _1778 = _1767;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    float _2076;
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1807 = fma(_1437, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429));
        float _1811 = fma(_1437, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429));
        float _1815 = fma(_1437, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429));
        float _1838 = _1429 + _1188;
        float _1839 = _1433 + _1189;
        float _1840 = _1437 + _1190;
        float _1850 = fma(_1840, cbModelParam._m0[30u].z, fma(_1839, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1838)) - _1807;
        float _1851 = fma(_1840, cbModelParam._m0[31u].z, fma(_1839, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1838)) - _1811;
        float _1852 = fma(_1840, cbModelParam._m0[32u].z, fma(_1839, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1838)) - _1815;
        float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
        float _1869 = ((_1856 * _1850) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1807 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1870 = ((_1856 * _1851) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1811 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1871 = ((_1856 * _1852) / cbModelParam._m0[35u].z) + ((((((_1815 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1873 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        vec4 _1880 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        vec4 _1887 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        vec4 _1894 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        float _1906 = exp2((_1873.w + (-0.5)) * 20.0) * 2.0;
        float _1907 = _1906 * (_1873.x + (-0.5));
        float _1908 = _1906 * (_1873.y + (-0.5));
        float _1909 = _1906 * (_1873.z + (-0.5));
        float _1916 = exp2((_1880.w + (-0.5)) * 20.0) * 2.0;
        float _1917 = _1916 * (_1880.x + (-0.5));
        float _1918 = _1916 * (_1880.y + (-0.5));
        float _1919 = _1916 * (_1880.z + (-0.5));
        float _1926 = exp2((_1887.w + (-0.5)) * 20.0) * 2.0;
        float _1927 = _1926 * (_1887.x + (-0.5));
        float _1928 = _1926 * (_1887.y + (-0.5));
        float _1929 = _1926 * (_1887.z + (-0.5));
        float _1936 = exp2((_1894.w + (-0.5)) * 20.0) * 2.0;
        float _1937 = _1936 * (_1894.x + (-0.5));
        float _1938 = _1936 * (_1894.y + (-0.5));
        float _1939 = _1936 * (_1894.z + (-0.5));
        float _1940 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1943 = _1907 * 0.5;
        float _1944 = _1917 * 0.5;
        float _1945 = _1927 * 0.5;
        float _1946 = dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945));
        float _1951 = (_1946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1946);
        float _1959 = (dot(vec3(_1188, _1189, _1190), vec3(_1951 * _1943, _1951 * _1944, _1951 * _1945)) + 1.0) * 0.5;
        float _4845 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1968 = sqrt(((_1944 * _1944) + (_1943 * _1943)) + (_1945 * _1945)) / (_1940 + 9.9999997473787516355514526367188e-06);
        float _4856 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _1970 = _1969 * 2.0;
        float _1974 = (1.0 - _1969) / (_1969 + 1.0);
        float _4867 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _1984 = ((((1.0 - _1975) * (_1970 + 2.0)) * exp2(log2(isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_1970 + 1.0))) + _1975) * _1940;
        float _1985 = _1908 * 0.5;
        float _1986 = _1918 * 0.5;
        float _1987 = _1928 * 0.5;
        float _1988 = dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987));
        float _1993 = (_1988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1988);
        float _2001 = (dot(vec3(_1188, _1189, _1190), vec3(_1993 * _1985, _1993 * _1986, _1993 * _1987)) + 1.0) * 0.5;
        float _4878 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2010 = sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987)) / (_1941 + 9.9999997473787516355514526367188e-06);
        float _4889 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2012 = _2011 * 2.0;
        float _2016 = (1.0 - _2011) / (_2011 + 1.0);
        float _4900 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2026 = ((((1.0 - _2017) * (_2012 + 2.0)) * exp2(log2(isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2012 + 1.0))) + _2017) * _1941;
        float _2027 = _1909 * 0.5;
        float _2028 = _1919 * 0.5;
        float _2029 = _1929 * 0.5;
        float _2030 = dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029));
        float _2035 = (_2030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2030);
        float _2043 = (dot(vec3(_1188, _1189, _1190), vec3(_2035 * _2027, _2035 * _2028, _2035 * _2029)) + 1.0) * 0.5;
        float _4911 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2052 = sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029)) / (_1942 + 9.9999997473787516355514526367188e-06);
        float _4922 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2054 = _2053 * 2.0;
        float _2058 = (1.0 - _2053) / (_2053 + 1.0);
        float _4933 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _2068 = ((((1.0 - _2059) * (_2054 + 2.0)) * exp2(log2(isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2054 + 1.0))) + _2059) * _1942;
        _2076 = _1909;
        _2077 = _1908;
        _2078 = _1907;
        _2079 = _1919;
        _2080 = _1918;
        _2081 = _1917;
        _2082 = _1929;
        _2083 = _1928;
        _2084 = _1927;
        _2085 = _1942;
        _2086 = _1941;
        _2087 = _1940;
        _2088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)));
        _2089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
        _2090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)));
    }
    else
    {
        _2076 = _1767;
        _2077 = _1767;
        _2078 = _1767;
        _2079 = _1767;
        _2080 = _1767;
        _2081 = _1767;
        _2082 = _1767;
        _2083 = _1767;
        _2084 = _1767;
        _2085 = _1767;
        _2086 = _1767;
        _2087 = _1767;
        _2088 = 0.0;
        _2089 = 0.0;
        _2090 = 0.0;
    }
    float _2100 = (cbModelParam._m0[1u].x * (_2088 - _1779)) + _1779;
    float _2101 = (cbModelParam._m0[1u].x * (_2089 - _1780)) + _1780;
    float _2102 = (cbModelParam._m0[1u].x * (_2090 - _1781)) + _1781;
    float _2123 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2101, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2101, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2101, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2100));
    float _2144 = _1373 * 0.5;
    float _2145 = _1374 * 0.5;
    float _2146 = _1375 * 0.5;
    float _2147 = dot(vec4(_2144, _2145, _2146, 1.0), vec4(_2078, _2081, _2084, _2087));
    float _2150 = dot(vec4(_2144, _2145, _2146, 1.0), vec4(_2077, _2080, _2083, _2086));
    float _2153 = dot(vec4(_2144, _2145, _2146, 1.0), vec4(_2076, _2079, _2082, _2085));
    float _2187;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2160 = dot(vec4(_2144, _2145, _2146, 1.0), vec4(_1766, _1770, _1773, _1776));
        float _2164 = dot(vec4(_2144, _2145, _2146, 1.0), vec4(_1768, _1771, _1774, _1777));
        float _2168 = dot(vec4(_2144, _2145, _2146, 1.0), vec4(_1769, _1772, _1775, _1778));
        float _2175 = dot(vec4(cbModelParam._m0[39u]), vec4(_2144, _2145, _2146, 1.0));
        _2187 = dot(vec3(isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0)), isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0)), isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2175) ? 0.0 : (isnan(0.0) ? _2175 : max(0.0, _2175))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2187 = 1.0;
    }
    float _2198;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2189 = dot(vec4(cbModelParam._m0[40u]), vec4(_2144, _2145, _2146, 1.0));
        _2198 = dot(vec3(isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)), isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0)), isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2189) ? 0.0 : (isnan(0.0) ? _2189 : max(0.0, _2189))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2198 = 1.0;
    }
    float _2202 = (_2198 * cbModelParam._m0[1u].x) + (_2187 * (1.0 - cbModelParam._m0[1u].x));
    float _2212 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1191);
    float _2213 = isnan(_2212) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2212 : min(cbModelParam._m0[25u].z, _2212));
    float _2293;
    float _2295;
    float _2297;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2260 = fma(_1437, cbModelParam._m0[13u].z, fma(_1433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1429)) + cbModelParam._m0[13u].w;
        float _2264 = fma(_1437, cbModelParam._m0[14u].z, fma(_1433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1429)) + cbModelParam._m0[14u].w;
        float _2268 = fma(_1437, cbModelParam._m0[15u].z, fma(_1433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1429)) + cbModelParam._m0[15u].w;
        float _2271 = fma(_1375, cbModelParam._m0[13u].z, fma(_1374, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1373));
        float _2274 = fma(_1375, cbModelParam._m0[14u].z, fma(_1374, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1373));
        float _2277 = fma(_1375, cbModelParam._m0[15u].z, fma(_1374, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1373));
        float _2305;
        if (_2271 > 0.0)
        {
            _2305 = abs((1.0 - _2260) / _2271);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2271 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2260 + 1.0) / _2271);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2305 = frontier_phi_17_15_ladder;
        }
        float _2476;
        if (_2274 > 0.0)
        {
            _2476 = abs((1.0 - _2264) / _2274);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2274 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2264 + 1.0) / _2274);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2476 = frontier_phi_26_22_ladder;
        }
        float _2771;
        if (_2277 > 0.0)
        {
            _2771 = abs((1.0 - _2268) / _2277);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2277 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2268 + 1.0) / _2277);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2771 = frontier_phi_38_33_ladder;
        }
        float _2773 = isnan(_2476) ? _2305 : (isnan(_2305) ? _2476 : min(_2305, _2476));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2271) + _2260;
        float _2779 = (_2774 * _2274) + _2264;
        float _2780 = (_2774 * _2277) + _2268;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2781;
        float _2785 = _2781 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 > _2785) || ((_2779 < _2783) || ((_2778 < _2783) || (_2778 > _2785))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2780, cbModelParam._m0[9u].z, fma(_2779, cbModelParam._m0[9u].y, _2778 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2780, cbModelParam._m0[10u].z, fma(_2779, cbModelParam._m0[10u].y, _2778 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2780, cbModelParam._m0[11u].z, fma(_2779, cbModelParam._m0[11u].y, _2778 * cbModelParam._m0[11u].x))), _2213);
            frontier_phi_16_38_ladder = _2925.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2925.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2925.x * cbModelParam._m0[1u].y;
        }
        _2293 = frontier_phi_16_38_ladder_2;
        _2295 = frontier_phi_16_38_ladder_1;
        _2297 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2281 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1373, _1374, _1375), _2213);
        _2293 = _2281.x * cbModelParam._m0[1u].y;
        _2295 = _2281.y * cbModelParam._m0[1u].y;
        _2297 = _2281.z * cbModelParam._m0[1u].y;
    }
    float _2301 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1191);
    float _2302 = isnan(_2301) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2301 : min(cbModelParam._m0[25u].w, _2301));
    float _2391;
    float _2393;
    float _2395;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2355 = fma(_1437, cbModelParam._m0[21u].z, fma(_1433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1429)) + cbModelParam._m0[21u].w;
        float _2359 = fma(_1437, cbModelParam._m0[22u].z, fma(_1433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1429)) + cbModelParam._m0[22u].w;
        float _2363 = fma(_1437, cbModelParam._m0[23u].z, fma(_1433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1429)) + cbModelParam._m0[23u].w;
        float _2366 = fma(_1375, cbModelParam._m0[21u].z, fma(_1374, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1373));
        float _2369 = fma(_1375, cbModelParam._m0[22u].z, fma(_1374, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1373));
        float _2372 = fma(_1375, cbModelParam._m0[23u].z, fma(_1374, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1373));
        float _2481;
        if (_2366 > 0.0)
        {
            _2481 = abs((1.0 - _2355) / _2366);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2366 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2355 + 1.0) / _2366);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2481 = frontier_phi_28_24_ladder;
        }
        float _2798;
        if (_2369 > 0.0)
        {
            _2798 = abs((1.0 - _2359) / _2369);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2369 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2359 + 1.0) / _2369);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2798 = frontier_phi_40_35_ladder;
        }
        float _3136;
        if (_2372 > 0.0)
        {
            _3136 = abs((1.0 - _2363) / _2372);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2372 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2363 + 1.0) / _2372);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3136 = frontier_phi_50_47_ladder;
        }
        float _3138 = isnan(_2798) ? _2481 : (isnan(_2481) ? _2798 : min(_2481, _2798));
        float _3139 = isnan(_3136) ? _3138 : (isnan(_3138) ? _3136 : min(_3138, _3136));
        float _3143 = (_3139 * _2366) + _2355;
        float _3144 = (_3139 * _2369) + _2359;
        float _3145 = (_3139 * _2372) + _2363;
        float _3146 = _3139 * 9.9999997473787516355514526367188e-05;
        float _3147 = (-1.0) - _3146;
        float _3149 = _3146 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3145 > _3149) || ((_3145 < _3147) || ((_3144 > _3149) || ((_3144 < _3147) || ((_3143 < _3147) || (_3143 > _3149))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3267 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3145, cbModelParam._m0[17u].z, fma(_3144, cbModelParam._m0[17u].y, _3143 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3145, cbModelParam._m0[18u].z, fma(_3144, cbModelParam._m0[18u].y, _3143 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3145, cbModelParam._m0[19u].z, fma(_3144, cbModelParam._m0[19u].y, _3143 * cbModelParam._m0[19u].x))), _2302);
            frontier_phi_25_50_ladder = _3267.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3267.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3267.x * cbModelParam._m0[1u].z;
        }
        _2391 = frontier_phi_25_50_ladder_2;
        _2393 = frontier_phi_25_50_ladder_1;
        _2395 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2375 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1373, _1374, _1375), _2302);
        _2391 = _2375.x * cbModelParam._m0[1u].z;
        _2393 = _2375.y * cbModelParam._m0[1u].z;
        _2395 = _2375.z * cbModelParam._m0[1u].z;
    }
    float _2408 = (((_1400 * _1349) + _1401) * _1365) * ((cbModelParam._m0[1u].w * (_2391 - _2293)) + _2293);
    float _2410 = (((_1400 * _1351) + _1401) * _1365) * ((cbModelParam._m0[1u].w * (_2393 - _2295)) + _2295);
    float _2412 = (((_1400 * _1352) + _1401) * _1365) * ((cbModelParam._m0[1u].w * (_2395 - _2297)) + _2297);
    float _2415 = fma(_2412, cbSceneParam._m0[89u].z, fma(_2410, cbSceneParam._m0[89u].y, _2408 * cbSceneParam._m0[89u].x));
    float _2418 = fma(_2412, cbSceneParam._m0[90u].z, fma(_2410, cbSceneParam._m0[90u].y, _2408 * cbSceneParam._m0[90u].x));
    float _2421 = fma(_2412, cbSceneParam._m0[91u].z, fma(_2410, cbSceneParam._m0[91u].y, _2408 * cbSceneParam._m0[91u].x));
    float _2455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2459 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2463 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2468 = _2455 / _2467;
    float _2469 = _2459 / _2467;
    float _2470 = _2463 / _2467;
    float _2617;
    float _2618;
    float _2619;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2497 = ((uint(_2470 > cbSceneParam._m0[59u].y) + uint(_2470 > cbSceneParam._m0[59u].x)) + uint(_2470 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2498 = _2497 + 43u;
        uint _2506 = _2497 + 44u;
        uint _2514 = _2497 + 45u;
        uint _2522 = _2497 + 46u;
        float _2533 = fma(_2467, cbSceneParam._m0[_2498].w, fma(_2463, cbSceneParam._m0[_2498].z, fma(_2459, cbSceneParam._m0[_2498].y, _2455 * cbSceneParam._m0[_2498].x)));
        float _2537 = fma(_2467, cbSceneParam._m0[_2506].w, fma(_2463, cbSceneParam._m0[_2506].z, fma(_2459, cbSceneParam._m0[_2506].y, _2455 * cbSceneParam._m0[_2506].x)));
        float _2545 = fma(_2467, cbSceneParam._m0[_2522].w, fma(_2463, cbSceneParam._m0[_2522].z, fma(_2459, cbSceneParam._m0[_2522].y, _2455 * cbSceneParam._m0[_2522].x)));
        float _2550 = cbSceneParam._m0[33u].z * _2545;
        float _2552 = cbSceneParam._m0[33u].w * _2545;
        float _2555 = fma(_2467, cbSceneParam._m0[_2514].w, fma(_2463, cbSceneParam._m0[_2514].z, fma(_2459, cbSceneParam._m0[_2514].y, _2455 * cbSceneParam._m0[_2514].x))) / _2545;
        float _2603 = (cbSceneParam._m0[33u].x - sqrt(((_2469 * _2469) + (_2468 * _2468)) + (_2470 * _2470))) * cbSceneParam._m0[33u].y;
        float _5059 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2610 = (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2550 + _2533) / _2545, (_2552 + _2537) / _2545), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2552 + _2533) / _2545, (_2537 - _2550) / _2545), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2533 - _2550) / _2545, (_2537 - _2552) / _2545), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2533 - _2552) / _2545, (_2550 + _2537) / _2545), _2555), 0.0)).x), vec4(0.25)));
        _2617 = 1.0 - (_2610 * cbSceneParam._m0[34u].x);
        _2618 = 1.0 - (_2610 * cbSceneParam._m0[34u].y);
        _2619 = 1.0 - (_2610 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2617 = 1.0;
        _2618 = 1.0;
        _2619 = 1.0;
    }
    float _2683;
    float _2685;
    float _2687;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2671 = fma(_2467, cbSceneParam._m0[63u].w, fma(_2463, cbSceneParam._m0[63u].z, fma(_2459, cbSceneParam._m0[63u].y, _2455 * cbSceneParam._m0[63u].x)));
        float _2672 = fma(_2467, cbSceneParam._m0[60u].w, fma(_2463, cbSceneParam._m0[60u].z, fma(_2459, cbSceneParam._m0[60u].y, _2455 * cbSceneParam._m0[60u].x))) / _2671;
        float _2673 = fma(_2467, cbSceneParam._m0[61u].w, fma(_2463, cbSceneParam._m0[61u].z, fma(_2459, cbSceneParam._m0[61u].y, _2455 * cbSceneParam._m0[61u].x))) / _2671;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2672 >= cbSceneParam._m0[64u].x) && (_2673 >= cbSceneParam._m0[64u].y)) && (_2672 <= cbSceneParam._m0[64u].z)) && (_2673 <= cbSceneParam._m0[64u].w))
        {
            float _2811 = fma(_2467, cbSceneParam._m0[62u].w, fma(_2463, cbSceneParam._m0[62u].z, fma(_2459, cbSceneParam._m0[62u].y, _2455 * cbSceneParam._m0[62u].x))) / _2671;
            float _2815 = isnan(cbSceneParam._m0[41u].w) ? _2811 : (isnan(_2811) ? cbSceneParam._m0[41u].w : max(_2811, cbSceneParam._m0[41u].w));
            float _2858 = (cbSceneParam._m0[33u].x - sqrt(((_2469 * _2469) + (_2468 * _2468)) + (_2470 * _2470))) * cbSceneParam._m0[33u].y;
            float _5075 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
            float _2865 = (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2672, cbSceneParam._m0[33u].w + _2673), _2815), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2672, _2673 - cbSceneParam._m0[33u].z), _2815), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2672 - cbSceneParam._m0[33u].z, _2673 - cbSceneParam._m0[33u].w), _2815), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2672 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2673), _2815), 0.0)).x), vec4(0.25)));
            float _2869 = 1.0 - (_2865 * cbSceneParam._m0[34u].x);
            float _2870 = 1.0 - (_2865 * cbSceneParam._m0[34u].y);
            float _2871 = 1.0 - (_2865 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2871) ? _2619 : (isnan(_2619) ? _2871 : min(_2619, _2871));
            frontier_phi_37_36_ladder_1 = isnan(_2870) ? _2618 : (isnan(_2618) ? _2870 : min(_2618, _2870));
            frontier_phi_37_36_ladder_2 = isnan(_2869) ? _2617 : (isnan(_2617) ? _2869 : min(_2617, _2869));
        }
        else
        {
            frontier_phi_37_36_ladder = _2619;
            frontier_phi_37_36_ladder_1 = _2618;
            frontier_phi_37_36_ladder_2 = _2617;
        }
        _2683 = frontier_phi_37_36_ladder_2;
        _2685 = frontier_phi_37_36_ladder_1;
        _2687 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2683 = _2617;
        _2685 = _2618;
        _2687 = _2619;
    }
    uvec4 _2692 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2694 = _2692.x * 14u;
    uint _2695 = _2694 + 13u;
    float _2702 = _1365 + (-1.0);
    float _2707 = (cbLight._m0[_2695].x * _2702) + 1.0;
    float _2708 = (cbLight._m0[_2695].y * _2702) + 1.0;
    float _2709 = (cbLight._m0[_2695].z * _2702) + 1.0;
    float _2710 = (cbLight._m0[_2695].w * _2702) + 1.0;
    uint _2711 = _2694 + 5u;
    float _2717 = isnan(1.0) ? _2708 : (isnan(_2708) ? 1.0 : min(_2708, 1.0));
    uint _2721 = _2694 + 4u;
    float _2730 = isnan(1.0) ? _2707 : (isnan(_2707) ? 1.0 : min(_2707, 1.0));
    uint _2734 = _2694 | 1u;
    float _2745 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_1188, _1189, _1190));
    float _2748 = dot(vec3(cbLight._m0[_2734].xyz), vec3(_1188, _1189, _1190));
    float _5111 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _5122 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2753 = (isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * 0.3183098733425140380859375;
    float _2755 = (isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * 0.3183098733425140380859375;
    float _2762 = ((cbLight._m0[_2711].x * _2717) * _2755) + (((cbLight._m0[_2721].x * _2683) * _2730) * _2753);
    float _2763 = ((_2717 * cbLight._m0[_2711].y) * _2755) + (((cbLight._m0[_2721].y * _2685) * _2730) * _2753);
    float _2764 = ((_2717 * cbLight._m0[_2711].z) * _2755) + (((cbLight._m0[_2721].z * _2687) * _2730) * _2753);
    uvec4 _2768 = floatBitsToUint(cbLight._m0[_2694 + 12u]);
    bool _2770 = _2768.x == 0u;
    float _2872;
    float _2874;
    float _2876;
    if (_2770)
    {
        _2872 = _2762;
        _2874 = _2763;
        _2876 = _2764;
    }
    else
    {
        uint _2880 = _2694 + 6u;
        float _2896 = (dot(vec3(cbLight._m0[_2694 + 2u].xyz), vec3(_1188, _1189, _1190)) * 0.5) + 0.5;
        float _2897 = _2896 * _2896;
        float _5133 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2898 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
        float _2899 = isnan(1.0) ? _2709 : (isnan(_2709) ? 1.0 : min(_2709, 1.0));
        _2872 = (((cbLight._m0[_2880].x * 0.3183098733425140380859375) * _2898) * _2899) + _2762;
        _2874 = (((cbLight._m0[_2880].y * 0.3183098733425140380859375) * _2898) * _2899) + _2763;
        _2876 = (((cbLight._m0[_2880].z * 0.3183098733425140380859375) * _2898) * _2899) + _2764;
    }
    bool _2879 = _2768.y == 0u;
    float _2934;
    float _2936;
    float _2938;
    if (_2879)
    {
        _2934 = _2872;
        _2936 = _2874;
        _2938 = _2876;
    }
    else
    {
        uint _3107 = _2694 + 7u;
        float _3123 = (dot(vec3(cbLight._m0[_2694 + 3u].xyz), vec3(_1188, _1189, _1190)) * 0.5) + 0.5;
        float _3124 = _3123 * _3123;
        float _5149 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
        float _3125 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
        float _3126 = isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0));
        _2934 = (((cbLight._m0[_3107].x * 0.3183098733425140380859375) * _3125) * _3126) + _2872;
        _2936 = (((cbLight._m0[_3107].y * 0.3183098733425140380859375) * _3125) * _3126) + _2874;
        _2938 = (((cbLight._m0[_3107].z * 0.3183098733425140380859375) * _3125) * _3126) + _2876;
    }
    uint _2941 = _2694 + 8u;
    float _2954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _1191) * 0.949999988079071044921875);
    float _2955 = _2954 * _2954;
    float _2956 = cbLight._m0[_2694].x + _1267;
    float _2957 = cbLight._m0[_2694].y + _1268;
    float _2958 = cbLight._m0[_2694].z + _1269;
    float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
    float _2963 = _2962 * _2956;
    float _2964 = _2962 * _2957;
    float _2965 = _2962 * _2958;
    float _2966 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_2694].xyz));
    float _5165 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
    float _2969 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
    float _5176 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
    float _2970 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
    float _2971 = dot(vec3(_1188, _1189, _1190), vec3(_2963, _2964, _2965));
    float _5187 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
    float _2974 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
    float _2975 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2963, _2964, _2965));
    float _5198 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
    float _2979 = _2955 * _2955;
    float _2983 = ((_2974 * _2974) * (_2979 + (-1.0))) + 1.0;
    float _2991 = exp2(log2(1.0 - (isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0)))) * 5.0);
    float _2992 = 0.959999978542327880859375 - _1346;
    float _2994 = 0.959999978542327880859375 - _1347;
    float _2995 = 0.959999978542327880859375 - _1348;
    float _3002 = 1.0 - _2955;
    float _3013 = (0.5 / (((_2970 * ((_2969 * _3002) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _3002) + _2955) * _2969))) * _2969;
    float _5209 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
    float _3015 = (isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_2979 / ((_2983 * _2983) * 3.141590118408203125));
    uint _3029 = _2694 + 9u;
    float _3040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2734].w)) * _1191) * 0.949999988079071044921875);
    float _3041 = _3040 * _3040;
    float _3042 = cbLight._m0[_2734].x + _1267;
    float _3043 = cbLight._m0[_2734].y + _1268;
    float _3044 = cbLight._m0[_2734].z + _1269;
    float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
    float _3049 = _3048 * _3042;
    float _3050 = _3048 * _3043;
    float _3051 = _3048 * _3044;
    float _3052 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_2734].xyz));
    float _5220 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
    float _3055 = isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0));
    float _3056 = dot(vec3(_1188, _1189, _1190), vec3(_3049, _3050, _3051));
    float _5231 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
    float _3059 = isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0));
    float _3060 = dot(vec3(cbLight._m0[_2734].xyz), vec3(_3049, _3050, _3051));
    float _5242 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
    float _3064 = _3041 * _3041;
    float _3068 = ((_3059 * _3059) * (_3064 + (-1.0))) + 1.0;
    float _3075 = exp2(log2(1.0 - (isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0)))) * 5.0);
    float _3082 = 1.0 - _3041;
    float _3092 = (0.5 / (((_2970 * ((_3055 * _3082) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _3082) + _3041) * _3055))) * _3055;
    float _5253 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
    float _3094 = (isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0))) * (_3064 / ((_3068 * _3068) * 3.141590118408203125));
    float _3104 = (((((_3075 * _2992) + _1349) * cbLight._m0[_3029].x) * _3094) * _2717) + ((((cbLight._m0[_2941].x * _2683) * ((_2991 * _2992) + _1349)) * _3015) * _2730);
    float _3105 = (((((_3075 * _2994) + _1351) * cbLight._m0[_3029].y) * _3094) * _2717) + ((((cbLight._m0[_2941].y * _2685) * ((_2991 * _2994) + _1351)) * _3015) * _2730);
    float _3106 = (((((_3075 * _2995) + _1352) * cbLight._m0[_3029].z) * _3094) * _2717) + ((((cbLight._m0[_2941].z * _2687) * ((_2991 * _2995) + _1352)) * _3015) * _2730);
    float _3162;
    float _3164;
    float _3166;
    if (_2770)
    {
        _3162 = _3104;
        _3164 = _3105;
        _3166 = _3106;
    }
    else
    {
        uint _3168 = _2694 + 2u;
        uint _3172 = _2694 + 10u;
        float _3186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3168].w)) * _1191) * 0.949999988079071044921875);
        float _3187 = _3186 * _3186;
        float _3188 = cbLight._m0[_3168].x + _1267;
        float _3189 = cbLight._m0[_3168].y + _1268;
        float _3190 = cbLight._m0[_3168].z + _1269;
        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
        float _3195 = _3194 * _3188;
        float _3196 = _3194 * _3189;
        float _3197 = _3194 * _3190;
        float _3198 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_3168].xyz));
        float _5264 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
        float _3201 = isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0));
        float _3202 = dot(vec3(_1188, _1189, _1190), vec3(_3195, _3196, _3197));
        float _5275 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
        float _3205 = isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0));
        float _3206 = dot(vec3(cbLight._m0[_3168].xyz), vec3(_3195, _3196, _3197));
        float _5286 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
        float _3210 = _3187 * _3187;
        float _3214 = ((_3205 * _3205) * (_3210 + (-1.0))) + 1.0;
        float _3221 = exp2(log2(1.0 - (isnan(1.0) ? _5286 : (isnan(_5286) ? 1.0 : min(_5286, 1.0)))) * 5.0);
        float _3228 = 1.0 - _3187;
        float _3238 = (0.5 / (((_2970 * ((_3201 * _3228) + _3187)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _3228) + _3187) * _3201))) * _3201;
        float _5297 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
        float _3240 = (isnan(1.0) ? _5297 : (isnan(_5297) ? 1.0 : min(_5297, 1.0))) * (_3210 / ((_3214 * _3214) * 3.141590118408203125));
        float _3241 = isnan(1.0) ? _2709 : (isnan(_2709) ? 1.0 : min(_2709, 1.0));
        _3162 = (((((_3221 * _2992) + _1349) * cbLight._m0[_3172].x) * _3240) * _3241) + _3104;
        _3164 = (((((_3221 * _2994) + _1351) * cbLight._m0[_3172].y) * _3240) * _3241) + _3105;
        _3166 = (((((_3221 * _2995) + _1352) * cbLight._m0[_3172].z) * _3240) * _3241) + _3106;
    }
    float _3272;
    float _3274;
    float _3276;
    if (_2879)
    {
        _3272 = _3162;
        _3274 = _3164;
        _3276 = _3166;
    }
    else
    {
        uint _3283 = _2694 + 3u;
        uint _3287 = _2694 + 11u;
        float _3301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3283].w)) * _1191) * 0.949999988079071044921875);
        float _3302 = _3301 * _3301;
        float _3303 = cbLight._m0[_3283].x + _1267;
        float _3304 = cbLight._m0[_3283].y + _1268;
        float _3305 = cbLight._m0[_3283].z + _1269;
        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
        float _3310 = _3309 * _3303;
        float _3311 = _3309 * _3304;
        float _3312 = _3309 * _3305;
        float _3313 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_3283].xyz));
        float _5313 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
        float _3316 = isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0));
        float _3317 = dot(vec3(_1188, _1189, _1190), vec3(_3310, _3311, _3312));
        float _5324 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
        float _3320 = isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0));
        float _3321 = dot(vec3(cbLight._m0[_3283].xyz), vec3(_3310, _3311, _3312));
        float _5335 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
        float _3325 = _3302 * _3302;
        float _3329 = ((_3320 * _3320) * (_3325 + (-1.0))) + 1.0;
        float _3336 = exp2(log2(1.0 - (isnan(1.0) ? _5335 : (isnan(_5335) ? 1.0 : min(_5335, 1.0)))) * 5.0);
        float _3343 = 1.0 - _3302;
        float _3353 = (0.5 / (((_2970 * ((_3316 * _3343) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _3343) + _3302) * _3316))) * _3316;
        float _5346 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
        float _3355 = (isnan(1.0) ? _5346 : (isnan(_5346) ? 1.0 : min(_5346, 1.0))) * (_3325 / ((_3329 * _3329) * 3.141590118408203125));
        float _3356 = isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0));
        _3272 = (((((_3336 * _2992) + _1349) * cbLight._m0[_3287].x) * _3355) * _3356) + _3162;
        _3274 = (((((_3336 * _2994) + _1351) * cbLight._m0[_3287].y) * _3355) * _3356) + _3164;
        _3276 = (((((_3336 * _2995) + _1352) * cbLight._m0[_3287].z) * _3355) * _3356) + _3166;
    }
    float _3422;
    float _3424;
    float _3426;
    float _3428;
    float _3430;
    float _3432;
    if (_2692.y == 0u)
    {
        uvec4 _3377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3378 = _3377.x;
        uint _3389 = uint((float(_3377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1288) / _3378))) + floor(float(uint(cbSceneParam._m0[85u].x * _1287) / _3378)));
        float _3399 = (log2(_2470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3400 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
        uint _3403 = uint(isnan(14.0) ? _3400 : (isnan(_3400) ? 14.0 : min(_3400, 14.0)));
        uvec4 _3408 = texelFetch(g_lightClusterGridBuffer, int(((_3403 << 2u) + (_3389 << 6u)) >> 2u));
        uint _3409 = _3408.x;
        uint _3410 = _3377.z;
        float _3489;
        float _3491;
        float _3493;
        float _3495;
        float _3497;
        float _3499;
        if (((((1u << ((_3410 >> 4u) & 15u)) + 4294967295u) & _3409) == 0u) || ((_3410 & 240u) == 0u))
        {
            _3489 = 0.0;
            _3491 = 0.0;
            _3493 = 0.0;
            _3495 = 0.0;
            _3497 = 0.0;
            _3499 = 0.0;
        }
        else
        {
            float _3490;
            float _3492;
            float _3494;
            float _3496;
            float _3498;
            float _3500;
            float _3641 = 0.0;
            float _3642 = 0.0;
            float _3643 = 0.0;
            float _3644 = 0.0;
            float _3645 = 0.0;
            float _3646 = 0.0;
            uint _3647 = 0u;
            uint _3656;
            bool _3657;
            for (;;)
            {
                _3656 = texelFetch(g_lightClassification, int((((_3403 << 5u) + (_3389 << 9u)) + (_3647 << 2u)) >> 2u)).x;
                _3657 = _3656 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3657)
                {
                    frontier_phi_71_pred = _3646;
                    frontier_phi_71_pred_1 = _3645;
                    frontier_phi_71_pred_2 = _3644;
                    frontier_phi_71_pred_3 = _3643;
                    frontier_phi_71_pred_4 = _3642;
                    frontier_phi_71_pred_5 = _3641;
                }
                else
                {
                    float _3786;
                    float _3787;
                    float _3788;
                    float _3789;
                    float _3790;
                    float _3791;
                    uint _3792;
                    _3786 = _3641;
                    _3787 = _3642;
                    _3788 = _3643;
                    _3789 = _3644;
                    _3790 = _3645;
                    _3791 = _3646;
                    _3792 = _3656;
                    float _3713;
                    float _3714;
                    float _3715;
                    float _3716;
                    float _3717;
                    float _3718;
                    for (;;)
                    {
                        uint _3796 = uint(findLSB(_3792)) + (_3647 << 5u);
                        uint _3793 = (_3792 + 4294967295u) & _3792;
                        uint _3798 = _3796 * 48u;
                        vec4 _3812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3798)).x, texelFetch(g_PointLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3798 + 3u)).x));
                        uint _3818 = (_3796 * 48u) + 4u;
                        vec4 _3831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3818)).x, texelFetch(g_PointLightRenderingBuffer, int(_3818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3818 + 3u)).x));
                        uint _3837 = (_3796 * 48u) + 8u;
                        vec3 _3848 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3837)).x, texelFetch(g_PointLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3837 + 2u)).x));
                        float _3852 = _3812.x - _2468;
                        float _3853 = _3812.y - _2469;
                        float _3854 = _3812.z - _2470;
                        float _3855 = dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854));
                        float _3858 = inversesqrt(_3855);
                        float _3859 = _3858 * _3852;
                        float _3860 = _3858 * _3853;
                        float _3861 = _3858 * _3854;
                        float _3862 = dot(vec3(_1306, _1309, _1312), vec3(_3859, _3860, _3861));
                        float _3867 = 1.0 - (_3855 * _3812.w);
                        float _5372 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                        float _3868 = isnan(1.0) ? _5372 : (isnan(_5372) ? 1.0 : min(_5372, 1.0));
                        float _3869 = sqrt(_3855) * _3831.w;
                        float _3872 = 1.39999997615814208984375 / (_3869 + 1.39999997615814208984375);
                        float _3873 = _3872 * _3872;
                        float _3876 = ((1.0 - _3873) * _3862) + _3873;
                        float _3879 = _3869 * _3869;
                        float _3883 = ((isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0))) * _3868) / ((_3879 * 0.699999988079071044921875) + 1.0);
                        float _3887 = (-0.0) - _2468;
                        float _3888 = (-0.0) - _2469;
                        float _3889 = (-0.0) - _2470;
                        float _3893 = inversesqrt(dot(vec3(_3887, _3888, _3889), vec3(_3887, _3888, _3889)));
                        float _3894 = _3893 * _3887;
                        float _3895 = _3893 * _3888;
                        float _3896 = _3893 * _3889;
                        float _3903 = exp2(log2(1.0 / ((_3879 * 3.5) + 5.0)) * 0.25);
                        float _3904 = 1.0 - _1381;
                        float _3911 = sqrt(1.0 - ((1.0 - (_3904 * _3904)) * (1.0 - (_3903 * _3903))));
                        float _3912 = _3911 * _3911;
                        float _3913 = _3912 * _3912;
                        float _3914 = _3894 + _3859;
                        float _3915 = _3895 + _3860;
                        float _3916 = _3896 + _3861;
                        float _3920 = inversesqrt(dot(vec3(_3914, _3915, _3916), vec3(_3914, _3915, _3916)));
                        float _3924 = dot(vec3(_1306, _1309, _1312), vec3(_3894, _3895, _3896));
                        float _5388 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                        float _3927 = isnan(1.0) ? _5388 : (isnan(_5388) ? 1.0 : min(_5388, 1.0));
                        float _3928 = dot(vec3(_1306, _1309, _1312), vec3(_3920 * _3914, _3920 * _3915, _3920 * _3916));
                        float _5399 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                        float _3931 = isnan(1.0) ? _5399 : (isnan(_5399) ? 1.0 : min(_5399, 1.0));
                        float _3935 = ((_3931 * _3931) * (_3913 + (-1.0))) + 1.0;
                        float _3936 = _3872 * _3912;
                        float _3937 = _3936 * _3936;
                        float _3940 = ((1.0 - _3937) * _3862) + _3937;
                        float _5410 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                        float _3941 = isnan(1.0) ? _5410 : (isnan(_5410) ? 1.0 : min(_5410, 1.0));
                        float _3942 = 1.0 - _3912;
                        float _3952 = (0.5 / (((_3941 * ((_3927 * _3942) + _3912)) + 9.9999999392252902907785028219223e-09) + (((_3941 * _3942) + _3912) * _3927))) * _3941;
                        float _5421 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                        float _3963 = (((_3913 * 3.1415927410125732421875) * (isnan(1.0) ? _5421 : (isnan(_5421) ? 1.0 : min(_5421, 1.0)))) / ((_3935 * _3935) * ((_3879 * 2.1991131305694580078125) + 3.141590118408203125))) * _3868;
                        _3716 = (_3883 * _3831.x) + _3789;
                        _3717 = (_3883 * _3831.y) + _3790;
                        _3718 = (_3883 * _3831.z) + _3791;
                        _3713 = (_3963 * _3848.x) + _3786;
                        _3714 = (_3963 * _3848.y) + _3787;
                        _3715 = (_3963 * _3848.z) + _3788;
                        if (_3793 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3786 = _3713;
                            _3787 = _3714;
                            _3788 = _3715;
                            _3789 = _3716;
                            _3790 = _3717;
                            _3791 = _3718;
                            _3792 = _3793;
                        }
                    }
                    frontier_phi_71_pred = _3718;
                    frontier_phi_71_pred_1 = _3717;
                    frontier_phi_71_pred_2 = _3716;
                    frontier_phi_71_pred_3 = _3715;
                    frontier_phi_71_pred_4 = _3714;
                    frontier_phi_71_pred_5 = _3713;
                }
                _3500 = frontier_phi_71_pred;
                _3498 = frontier_phi_71_pred_1;
                _3496 = frontier_phi_71_pred_2;
                _3494 = frontier_phi_71_pred_3;
                _3492 = frontier_phi_71_pred_4;
                _3490 = frontier_phi_71_pred_5;
                uint _3648 = _3647 + 1u;
                if (_3648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3641 = _3490;
                    _3642 = _3492;
                    _3643 = _3494;
                    _3644 = _3496;
                    _3645 = _3498;
                    _3646 = _3500;
                    _3647 = _3648;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3489 = _3490;
            _3491 = _3492;
            _3493 = _3494;
            _3495 = _3496;
            _3497 = _3498;
            _3499 = _3500;
        }
        uvec4 _3503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3504 = _3503.z;
        uint _3506 = (_3504 >> 8u) & 15u;
        float _3609;
        float _3611;
        float _3613;
        float _3615;
        float _3617;
        float _3619;
        if (((4294967295u << _3506) & _3409) == 0u)
        {
            _3609 = _3489;
            _3611 = _3491;
            _3613 = _3493;
            _3615 = _3495;
            _3617 = _3497;
            _3619 = _3499;
        }
        else
        {
            float _3634 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
            float _3635 = _3634 * _2468;
            float _3636 = _3634 * _2469;
            float _3637 = _3634 * _2470;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3506 < ((_3504 >> 12u) & 15u))
            {
                float _3610;
                float _3612;
                float _3614;
                float _3616;
                float _3618;
                float _3620;
                float _3769 = _3489;
                float _3770 = _3491;
                float _3771 = _3493;
                float _3772 = _3495;
                float _3773 = _3497;
                float _3774 = _3499;
                uint _3775 = _3506;
                uint _3784;
                bool _3785;
                for (;;)
                {
                    _3784 = texelFetch(g_lightClassification, int((((_3403 << 5u) + (_3389 << 9u)) + (_3775 << 2u)) >> 2u)).x;
                    _3785 = _3784 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3785)
                    {
                        frontier_phi_82_pred = _3774;
                        frontier_phi_82_pred_1 = _3773;
                        frontier_phi_82_pred_2 = _3772;
                        frontier_phi_82_pred_3 = _3771;
                        frontier_phi_82_pred_4 = _3770;
                        frontier_phi_82_pred_5 = _3769;
                    }
                    else
                    {
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _4270;
                        float _4271;
                        float _4272;
                        float _4273;
                        float _4274;
                        float _4275;
                        float _3990 = _3769;
                        float _3991 = _3770;
                        float _3992 = _3771;
                        float _3993 = _3772;
                        float _3994 = _3773;
                        float _3995 = _3774;
                        uint _3996 = _3784;
                        uint _3997;
                        vec4 _4022;
                        float _4023;
                        vec4 _4038;
                        vec3 _4050;
                        vec4 _4065;
                        vec4 _4080;
                        float _4126;
                        bool _4127;
                        for (;;)
                        {
                            uint _4007 = ((_3775 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3996));
                            _3997 = (_3996 + 4294967295u) & _3996;
                            uint _4009 = _4007 * 40u;
                            _4022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 3u)).x));
                            _4023 = _4022.w;
                            uint _4025 = (_4007 * 40u) + 4u;
                            _4038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 3u)).x));
                            uint _4040 = (_4007 * 40u) + 8u;
                            _4050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 2u)).x));
                            uint _4052 = (_4007 * 40u) + 16u;
                            _4065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 3u)).x));
                            uint _4067 = (_4007 * 40u) + 20u;
                            _4080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 3u)).x));
                            uint _4082 = (_4007 * 40u) + 24u;
                            vec4 _4095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 3u)).x));
                            uint _4101 = (_4007 * 40u) + 28u;
                            vec4 _4114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 3u)).x));
                            _4126 = fma(_2470, _4114.z, fma(_2469, _4114.y, _4114.x * _2468)) + _4114.w;
                            _4127 = !((fma(_2470, _4095.z, fma(_2469, _4095.y, _4095.x * _2468)) + _4095.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4127)
                            {
                                float _4154 = _4022.x - _2468;
                                float _4155 = _4022.y - _2469;
                                float _4156 = _4022.z - _2470;
                                float _4157 = dot(vec3(_4154, _4155, _4156), vec3(_4154, _4155, _4156));
                                float _4160 = inversesqrt(_4157);
                                float _4161 = _4160 * _4154;
                                float _4162 = _4160 * _4155;
                                float _4163 = _4160 * _4156;
                                float _4167 = 1.0 - (_4157 / (_4023 * _4023));
                                float _5432 = isnan(0.0) ? _4167 : (isnan(_4167) ? 0.0 : max(_4167, 0.0));
                                float _4168 = isnan(1.0) ? _5432 : (isnan(_5432) ? 1.0 : min(_5432, 1.0));
                                float _4172 = sqrt(_4157) * _4038.w;
                                float _4174 = 1.39999997615814208984375 / (_4172 + 1.39999997615814208984375);
                                float _4175 = _4174 * _4174;
                                float _4178 = ((1.0 - _4175) * dot(vec3(_4161, _4162, _4163), vec3(_1306, _1309, _1312))) + _4175;
                                float _4181 = _4172 * _4172;
                                float _4185 = (fma(_2470, _4065.z, fma(_2469, _4065.y, _4065.x * _2468)) + _4065.w) / _4126;
                                float _4186 = (fma(_2470, _4080.z, fma(_2469, _4080.y, _4080.x * _2468)) + _4080.w) / _4126;
                                float _4190 = 1.0 - dot(vec2(_4185, _4186), vec2(_4185, _4186));
                                float _5448 = isnan(0.0) ? _4190 : (isnan(_4190) ? 0.0 : max(_4190, 0.0));
                                float _4191 = isnan(1.0) ? _5448 : (isnan(_5448) ? 1.0 : min(_5448, 1.0));
                                float _4192 = _4191 * (((isnan(0.0) ? _4178 : (isnan(_4178) ? 0.0 : max(_4178, 0.0))) * _4168) / ((_4181 * 0.699999988079071044921875) + 1.0));
                                float _4204 = exp2(log2(1.0 / ((_4181 * 3.5) + 5.0)) * 0.25);
                                float _4205 = 1.0 - _1381;
                                float _4212 = sqrt(1.0 - ((1.0 - (_4205 * _4205)) * (1.0 - (_4204 * _4204))));
                                float _4213 = _4212 * _4212;
                                float _4214 = _4213 * _4213;
                                float _4215 = _4161 - _3635;
                                float _4216 = _4162 - _3636;
                                float _4217 = _4163 - _3637;
                                float _4221 = inversesqrt(dot(vec3(_4215, _4216, _4217), vec3(_4215, _4216, _4217)));
                                float _4225 = dot(vec3(_1306, _1309, _1312), vec3((-0.0) - _3635, (-0.0) - _3636, (-0.0) - _3637));
                                float _5459 = isnan(0.0) ? _4225 : (isnan(_4225) ? 0.0 : max(_4225, 0.0));
                                float _4228 = isnan(1.0) ? _5459 : (isnan(_5459) ? 1.0 : min(_5459, 1.0));
                                float _4229 = dot(vec3(_1306, _1309, _1312), vec3(_4221 * _4215, _4221 * _4216, _4221 * _4217));
                                float _5470 = isnan(0.0) ? _4229 : (isnan(_4229) ? 0.0 : max(_4229, 0.0));
                                float _4232 = isnan(1.0) ? _5470 : (isnan(_5470) ? 1.0 : min(_5470, 1.0));
                                float _4236 = ((_4232 * _4232) * (_4214 + (-1.0))) + 1.0;
                                float _4237 = _4174 * _4213;
                                float _4238 = _4237 * _4237;
                                float _4244 = ((1.0 - _4238) * dot(vec3(_1306, _1309, _1312), vec3(_4161, _4162, _4163))) + _4238;
                                float _5481 = isnan(0.0) ? _4244 : (isnan(_4244) ? 0.0 : max(_4244, 0.0));
                                float _4245 = isnan(1.0) ? _5481 : (isnan(_5481) ? 1.0 : min(_5481, 1.0));
                                float _4246 = 1.0 - _4213;
                                float _4256 = (0.5 / (((_4245 * ((_4228 * _4246) + _4213)) + 9.9999999392252902907785028219223e-09) + (((_4245 * _4246) + _4213) * _4228))) * _4245;
                                float _5492 = isnan(0.0) ? _4256 : (isnan(_4256) ? 0.0 : max(_4256, 0.0));
                                float _4266 = (_4191 * _4168) * (((_4214 * 3.1415927410125732421875) * (isnan(1.0) ? _5492 : (isnan(_5492) ? 1.0 : min(_5492, 1.0)))) / ((_4236 * _4236) * ((_4181 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4192 * _4038.z;
                                frontier_phi_88_pred_1 = _4192 * _4038.y;
                                frontier_phi_88_pred_2 = _4192 * _4038.x;
                                frontier_phi_88_pred_3 = _4266 * _4050.z;
                                frontier_phi_88_pred_4 = _4266 * _4050.y;
                                frontier_phi_88_pred_5 = _4266 * _4050.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4275 = frontier_phi_88_pred;
                            _4274 = frontier_phi_88_pred_1;
                            _4273 = frontier_phi_88_pred_2;
                            _4272 = frontier_phi_88_pred_3;
                            _4271 = frontier_phi_88_pred_4;
                            _4270 = frontier_phi_88_pred_5;
                            _3980 = _4273 + _3993;
                            _3981 = _4274 + _3994;
                            _3982 = _4275 + _3995;
                            _3977 = _4270 + _3990;
                            _3978 = _4271 + _3991;
                            _3979 = _4272 + _3992;
                            if (_3997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3990 = _3977;
                                _3991 = _3978;
                                _3992 = _3979;
                                _3993 = _3980;
                                _3994 = _3981;
                                _3995 = _3982;
                                _3996 = _3997;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3982;
                        frontier_phi_82_pred_1 = _3981;
                        frontier_phi_82_pred_2 = _3980;
                        frontier_phi_82_pred_3 = _3979;
                        frontier_phi_82_pred_4 = _3978;
                        frontier_phi_82_pred_5 = _3977;
                    }
                    _3620 = frontier_phi_82_pred;
                    _3618 = frontier_phi_82_pred_1;
                    _3616 = frontier_phi_82_pred_2;
                    _3614 = frontier_phi_82_pred_3;
                    _3612 = frontier_phi_82_pred_4;
                    _3610 = frontier_phi_82_pred_5;
                    uint _3776 = _3775 + 1u;
                    if (_3776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3769 = _3610;
                        _3770 = _3612;
                        _3771 = _3614;
                        _3772 = _3616;
                        _3773 = _3618;
                        _3774 = _3620;
                        _3775 = _3776;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3616;
                frontier_phi_63_64_ladder_1 = _3620;
                frontier_phi_63_64_ladder_2 = _3618;
                frontier_phi_63_64_ladder_3 = _3614;
                frontier_phi_63_64_ladder_4 = _3612;
                frontier_phi_63_64_ladder_5 = _3610;
            }
            else
            {
                frontier_phi_63_64_ladder = _3495;
                frontier_phi_63_64_ladder_1 = _3499;
                frontier_phi_63_64_ladder_2 = _3497;
                frontier_phi_63_64_ladder_3 = _3493;
                frontier_phi_63_64_ladder_4 = _3491;
                frontier_phi_63_64_ladder_5 = _3489;
            }
            _3609 = frontier_phi_63_64_ladder_5;
            _3611 = frontier_phi_63_64_ladder_4;
            _3613 = frontier_phi_63_64_ladder_3;
            _3615 = frontier_phi_63_64_ladder;
            _3617 = frontier_phi_63_64_ladder_2;
            _3619 = frontier_phi_63_64_ladder_1;
        }
        float _3624 = isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0));
        _3422 = (_3624 * _3615) + _2934;
        _3424 = (_3624 * _3617) + _2936;
        _3426 = (_3624 * _3619) + _2938;
        _3428 = ((_3609 * _1349) * _3624) + _3272;
        _3430 = ((_3611 * _1351) * _3624) + _3274;
        _3432 = ((_3613 * _1352) * _3624) + _3276;
    }
    else
    {
        _3422 = _2934;
        _3424 = _2936;
        _3426 = _2938;
        _3428 = _3272;
        _3430 = _3274;
        _3432 = _3276;
    }
    float _5508 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _5519 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _5530 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _3449 = ((isnan(1.0) ? _5508 : (isnan(_5508) ? 1.0 : min(_5508, 1.0))) * (_3422 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1365))) + ((_3428 + ((isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0))) * _2202)) * cbPerFrame._m0[3u].x);
    float _3450 = ((isnan(1.0) ? _5519 : (isnan(_5519) ? 1.0 : min(_5519, 1.0))) * (_3424 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1365))) + ((_3430 + ((isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0))) * _2202)) * cbPerFrame._m0[3u].x);
    float _3451 = ((isnan(1.0) ? _5530 : (isnan(_5530) ? 1.0 : min(_5530, 1.0))) * (_3426 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1365))) + ((_3432 + ((isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0))) * _2202)) * cbPerFrame._m0[3u].x);
    uint _3452 = _305 + 6u;
    float _3460 = _1287 / cbSceneParam._m0[86u].x;
    float _3461 = _1288 / cbSceneParam._m0[86u].y;
    vec4 _3475 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3460, _3461, (log2((isnan(cbSceneParam._m0[77u].w) ? _1210 : (isnan(_1210) ? cbSceneParam._m0[77u].w : min(_1210, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3477 = _3475.x;
    float _3478 = _3475.y;
    float _3479 = _3475.z;
    float _3480 = _3475.w;
    float _3551;
    float _3553;
    float _3555;
    float _3557;
    if (_1210 > cbSceneParam._m0[78u].w)
    {
        float _3514 = isnan(_1210) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1210 : min(cbSceneParam._m0[80u].w, _1210));
        float _3515 = _3514 / _1210;
        float _3526 = _3515 * _1260;
        float _3527 = _1261 * _3515;
        float _3528 = (-0.0) - _3527;
        float _3529 = _3515 * _1262;
        float _3531 = (cbSceneParam._m0[77u].w * _3528) / _3514;
        float _3532 = _3531 + cbSceneParam._m0[79u].w;
        float _3533 = cbSceneParam._m0[79u].w - _3527;
        float _3539 = sqrt(((_3526 * _3526) + (_3527 * _3527)) + (_3529 * _3529));
        float _3542 = (1.0 - (cbSceneParam._m0[77u].w / _3514)) * _3539;
        float _3547 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3549 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3726;
        if (abs((_3528 - _3531) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3726 = ((((_3532 > 0.0) ? exp2(_3547 * _3532) : (2.0 - exp2(_3549 * _3532))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3542;
        }
        else
        {
            float _3670 = 1.0 / cbSceneParam._m0[80u].x;
            float _3671 = isnan(_3533) ? _3532 : (isnan(_3532) ? _3533 : max(_3532, _3533));
            float _3672 = isnan(_3533) ? _3532 : (isnan(_3532) ? _3533 : min(_3532, _3533));
            float _3681 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : min(_3671, 0.0));
            float _3682 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : min(_3672, 0.0));
            _3726 = ((abs(_3539 / _3528) * cbSceneParam._m0[80u].y) * ((((_3681 - _3682) * 2.0) - ((exp2(_3547 * (isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0)))) - exp2(_3547 * (isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))))) * _3670)) - ((exp2(_3549 * _3681) - exp2(_3549 * _3682)) * _3670))) + (_3542 * cbSceneParam._m0[80u].z);
        }
        vec4 _3728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3460, _3461, 1.0), 0.0);
        float _3737 = exp2((_3726 * (-1.44269502162933349609375)) * (1.0 - _3728.w));
        float _3738 = log2(_3737);
        float _3754 = log2(_3480);
        _3551 = (exp2(_3754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3738 * cbSceneParam._m0[78u].x)) * _3728.x) / cbSceneParam._m0[78u].x)) + _3477;
        _3553 = (exp2(_3754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3738 * cbSceneParam._m0[78u].y)) * _3728.y) / cbSceneParam._m0[78u].y)) + _3478;
        _3555 = (exp2(_3754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3738 * cbSceneParam._m0[78u].z)) * _3728.z) / cbSceneParam._m0[78u].z)) + _3479;
        _3557 = _3737 * _3480;
    }
    else
    {
        _3551 = _3477;
        _3553 = _3478;
        _3555 = _3479;
        _3557 = _3480;
    }
    bool _3764;
    vec4 _3567;
    vec4 _3589;
    float _3591;
    float _3595;
    float _3596;
    float _3597;
    float _3598;
    bool _3608;
    for (;;)
    {
        _3567 = cbMatDynParam._m0[0u];
        float _3569 = roundEven(_3567.y);
        bool _3570 = _3569 == 3.0;
        float _3571 = log2(_3557);
        float _3578 = exp2(_3571 * cbSceneParam._m0[78u].x) * _3449;
        float _3579 = exp2(_3571 * cbSceneParam._m0[78u].y) * _3450;
        float _3580 = exp2(_3571 * cbSceneParam._m0[78u].z) * _3451;
        float _3587 = _1276 + (-0.5);
        _3589 = cbMtdParam._m0[1u];
        _3591 = _3589.y * _3587;
        float _3594 = (_3569 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3595 = _3594 * (_3570 ? _3578 : (_3578 + (cbSceneParam._m0[72u].w * _3551)));
        _3596 = _3594 * (_3570 ? _3579 : (_3579 + (cbSceneParam._m0[72u].w * _3553)));
        _3597 = _3594 * (_3570 ? _3580 : (_3580 + (cbSceneParam._m0[72u].w * _3555)));
        _3598 = _3587 * 0.999000012874603271484375;
        _3608 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3608)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3598) < 0.5)
            {
                _3764 = true;
                break;
            }
        }
        uint _3705 = _1325 + uint(_3567.w);
        if ((cbInstanceData._m0[_3705].w < 1.0) && ((cbInstanceData._m0[_3705].w + _3598) < 0.5))
        {
            _3764 = true;
            break;
        }
        if ((_3591 + 1.0) < _3589.x)
        {
            _3764 = true;
            break;
        }
        _3764 = false;
        break;
    }
    float _3968;
    if (_3764)
    {
        discard_state = true;
        _3968 = 0.0;
    }
    else
    {
        _3968 = cbInstanceData._m0[_3452].w;
    }
    SV_Target.x = _3595;
    SV_Target.y = _3596;
    SV_Target.z = _3597;
    SV_Target.w = _3968;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3452].w;
    discard_exit();
}


