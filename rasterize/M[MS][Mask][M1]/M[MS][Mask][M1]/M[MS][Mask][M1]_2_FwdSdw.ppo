#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1122;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _300.x * cbMtdParam._m0[11u].x;
    float _306 = _300.y * cbMtdParam._m0[11u].y;
    float _307 = _300.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3736 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _424 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _276.x) * ((_411 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305);
    float _427 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _276.y) * ((_411 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306);
    float _430 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _276.z) * ((_411 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307);
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _473 = ((_443.z - _464) * _411) + _464;
    float _476 = ((((_443.x - _462) * _411) + _462) * 2.0) + (-1.0);
    float _478 = ((((_443.y - _463) * _411) + _463) * 2.0) + (-1.0);
    float _479 = dot(vec2(_476, _478), vec2(_476, _478));
    float _3747 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _512 = (((_500.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _476;
    float _513 = (((_500.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _478;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _541 = _539.x;
    float _558 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _541) * _411) + _541;
    float _562 = ((_525.x - _558) * cbMtdParam._m0[19u].z) + _558;
    float _566 = (cbMtdParam._m0[19u].w * (_500.z - _473)) + _473;
    float _568 = cbMtdParam._m0[22u].x + _500.w;
    float _571 = fma(_484, _223 * NORMAL.x, fma(_513, _230 * TANGENT.x, (_216 * _208) * _512));
    float _574 = fma(_484, _223 * NORMAL.y, fma(_513, _230 * TANGENT.y, (_216 * _209) * _512));
    float _577 = fma(_484, _223 * NORMAL.z, fma(_513, _230 * TANGENT.z, (_216 * _210) * _512));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _582 = _581 * _571;
    float _583 = _581 * _574;
    float _584 = _581 * _577;
    float _3758 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _585 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3780 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3791 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3802 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3813 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _590 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _689 = fma(_584, cbSceneParam._m0[5u].z, fma(_583, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _582));
    float _692 = fma(_584, cbSceneParam._m0[6u].z, fma(_583, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _582));
    float _695 = fma(_584, cbSceneParam._m0[7u].z, fma(_583, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _582));
    uint _709 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _715 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_709].x;
    float _716 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_709].y;
    float _717 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_709].z;
    float _3824 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _721 = 1.0 - _590;
    float _722 = _718 * _721;
    float _723 = _719 * _721;
    float _724 = _720 * _721;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _590;
    float _730 = (_719 + (-0.039999999105930328369140625)) * _590;
    float _731 = (_720 + (-0.039999999105930328369140625)) * _590;
    float _732 = _729 + 0.039999999105930328369140625;
    float _734 = _730 + 0.039999999105930328369140625;
    float _735 = _731 + 0.039999999105930328369140625;
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _748 = ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * TEXCOORD_5.w) * _744.x;
    float _749 = dot(vec3(_582, _583, _584), vec3(_662, _663, _664));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _582) - _662;
    float _757 = (_752 * _583) - _663;
    float _758 = (_752 * _584) - _664;
    float _762 = abs(dot(vec3(_662, _663, _664), vec3(_582, _583, _584)));
    float _3857 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_585);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _783 = (1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _784 = _777 * _764;
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1121;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _846 = fma(_820, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812));
        float _850 = fma(_820, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812));
        float _854 = fma(_820, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812));
        float _879 = _812 + _582;
        float _880 = _816 + _583;
        float _881 = _820 + _584;
        float _891 = fma(_881, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879)) - _846;
        float _892 = fma(_881, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879)) - _850;
        float _893 = fma(_881, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879)) - _854;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_846 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_850 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[34u].z) + ((((((_854 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _949 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_915.x + (-0.5));
        float _951 = _949 * (_915.y + (-0.5));
        float _952 = _949 * (_915.z + (-0.5));
        float _959 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_922.x + (-0.5));
        float _961 = _959 * (_922.y + (-0.5));
        float _962 = _959 * (_922.z + (-0.5));
        float _969 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_929.x + (-0.5));
        float _971 = _969 * (_929.y + (-0.5));
        float _972 = _969 * (_929.z + (-0.5));
        float _979 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_936.x + (-0.5));
        float _981 = _979 * (_936.y + (-0.5));
        float _982 = _979 * (_936.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1003 = (dot(vec3(_582, _583, _584), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1013 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3905 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1015 + 1.0))) + _1020) * _983;
        float _1030 = _951 * 0.5;
        float _1031 = _961 * 0.5;
        float _1032 = _971 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_582, _583, _584), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3938 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1057 + 1.0))) + _1062) * _984;
        float _1072 = _952 * 0.5;
        float _1073 = _962 * 0.5;
        float _1074 = _972 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_582, _583, _584), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3971 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1099 + 1.0))) + _1104) * _985;
        _1121 = _952;
        _1123 = _951;
        _1124 = _950;
        _1125 = _962;
        _1126 = _961;
        _1127 = _960;
        _1128 = _972;
        _1129 = _971;
        _1130 = _970;
        _1131 = _985;
        _1132 = _984;
        _1133 = _983;
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _1122;
        _1123 = _1122;
        _1124 = _1122;
        _1125 = _1122;
        _1126 = _1122;
        _1127 = _1122;
        _1128 = _1122;
        _1129 = _1122;
        _1130 = _1122;
        _1131 = _1122;
        _1132 = _1122;
        _1133 = _1122;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = fma(_820, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812));
        float _1165 = fma(_820, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812));
        float _1169 = fma(_820, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812));
        float _1192 = _812 + _582;
        float _1193 = _816 + _583;
        float _1194 = _820 + _584;
        float _1204 = fma(_1194, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192)) - _1161;
        float _1205 = fma(_1194, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192)) - _1165;
        float _1206 = fma(_1194, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192)) - _1169;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1161 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1165 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[35u].z) + ((((((_1169 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1260 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1227.x + (-0.5));
        float _1262 = _1260 * (_1227.y + (-0.5));
        float _1263 = _1260 * (_1227.z + (-0.5));
        float _1270 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1234.x + (-0.5));
        float _1272 = _1270 * (_1234.y + (-0.5));
        float _1273 = _1270 * (_1234.z + (-0.5));
        float _1280 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1241.x + (-0.5));
        float _1282 = _1280 * (_1241.y + (-0.5));
        float _1283 = _1280 * (_1241.z + (-0.5));
        float _1290 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1248.x + (-0.5));
        float _1292 = _1290 * (_1248.y + (-0.5));
        float _1293 = _1290 * (_1248.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_582, _583, _584), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4034 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1324 + 1.0))) + _1329) * _1294;
        float _1339 = _1262 * 0.5;
        float _1340 = _1272 * 0.5;
        float _1341 = _1282 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_582, _583, _584), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4067 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1366 + 1.0))) + _1371) * _1295;
        float _1381 = _1263 * 0.5;
        float _1382 = _1273 * 0.5;
        float _1383 = _1283 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_582, _583, _584), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4100 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1408 + 1.0))) + _1413) * _1296;
        _1430 = _1263;
        _1431 = _1262;
        _1432 = _1261;
        _1433 = _1273;
        _1434 = _1272;
        _1435 = _1271;
        _1436 = _1283;
        _1437 = _1282;
        _1438 = _1281;
        _1439 = _1296;
        _1440 = _1295;
        _1441 = _1294;
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1122;
        _1431 = _1122;
        _1432 = _1122;
        _1433 = _1122;
        _1434 = _1122;
        _1435 = _1122;
        _1436 = _1122;
        _1437 = _1122;
        _1438 = _1122;
        _1439 = _1122;
        _1440 = _1122;
        _1441 = _1122;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1134)) + _1134;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1135)) + _1135;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1136)) + _1136;
    float _1477 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1454));
    float _1498 = _756 * 0.5;
    float _1499 = _757 * 0.5;
    float _1500 = _758 * 0.5;
    float _1501 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1504 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1507 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1541;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1514 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1121, _1125, _1128, _1131));
        float _1518 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1522 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1529 = dot(vec4(cbModelParam._m0[39u]), vec4(_1498, _1499, _1500, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1552;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1543 = dot(vec4(cbModelParam._m0[40u]), vec4(_1498, _1499, _1500, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1556 = (_1552 * cbModelParam._m0[1u].x) + (_1541 * (1.0 - cbModelParam._m0[1u].x));
    float _1566 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _585);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1566 : min(cbModelParam._m0[25u].z, _1566));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1616 = fma(_820, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812)) + cbModelParam._m0[13u].w;
        float _1620 = fma(_820, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812)) + cbModelParam._m0[14u].w;
        float _1624 = fma(_820, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812)) + cbModelParam._m0[15u].w;
        float _1627 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1630 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1633 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1661;
        if (_1627 > 0.0)
        {
            _1661 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1661 = frontier_phi_14_12_ladder;
        }
        float _1834;
        if (_1630 > 0.0)
        {
            _1834 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1834 = frontier_phi_23_19_ladder;
        }
        float _2129;
        if (_1633 > 0.0)
        {
            _2129 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2129 = frontier_phi_35_30_ladder;
        }
        float _2131 = isnan(_1834) ? _1661 : (isnan(_1661) ? _1834 : min(_1661, _1834));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1627) + _1616;
        float _2137 = (_2132 * _1630) + _1620;
        float _2138 = (_2132 * _1633) + _1624;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2139;
        float _2143 = _2139 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 > _2143) || ((_2137 < _2141) || ((_2136 < _2141) || (_2136 > _2143))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2138, cbModelParam._m0[9u].z, fma(_2137, cbModelParam._m0[9u].y, _2136 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2138, cbModelParam._m0[10u].z, fma(_2137, cbModelParam._m0[10u].y, _2136 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2138, cbModelParam._m0[11u].z, fma(_2137, cbModelParam._m0[11u].y, _2136 * cbModelParam._m0[11u].x))), _1567);
            frontier_phi_13_35_ladder = _2283.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2283.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2283.x * cbModelParam._m0[1u].y;
        }
        _1649 = frontier_phi_13_35_ladder_2;
        _1651 = frontier_phi_13_35_ladder_1;
        _1653 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1567);
        _1649 = _1637.x * cbModelParam._m0[1u].y;
        _1651 = _1637.y * cbModelParam._m0[1u].y;
        _1653 = _1637.z * cbModelParam._m0[1u].y;
    }
    float _1657 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _585);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1657 : min(cbModelParam._m0[25u].w, _1657));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1713 = fma(_820, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812)) + cbModelParam._m0[21u].w;
        float _1717 = fma(_820, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812)) + cbModelParam._m0[22u].w;
        float _1721 = fma(_820, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812)) + cbModelParam._m0[23u].w;
        float _1724 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1727 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1730 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1839;
        if (_1724 > 0.0)
        {
            _1839 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1839 = frontier_phi_25_21_ladder;
        }
        float _2156;
        if (_1727 > 0.0)
        {
            _2156 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2156 = frontier_phi_37_32_ladder;
        }
        float _2494;
        if (_1730 > 0.0)
        {
            _2494 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2494 = frontier_phi_47_44_ladder;
        }
        float _2496 = isnan(_2156) ? _1839 : (isnan(_1839) ? _2156 : min(_1839, _2156));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1724) + _1713;
        float _2502 = (_2497 * _1727) + _1717;
        float _2503 = (_2497 * _1730) + _1721;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1658);
            frontier_phi_22_47_ladder = _2625.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2625.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2625.x * cbModelParam._m0[1u].z;
        }
        _1749 = frontier_phi_22_47_ladder_2;
        _1751 = frontier_phi_22_47_ladder_1;
        _1753 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1658);
        _1749 = _1733.x * cbModelParam._m0[1u].z;
        _1751 = _1733.y * cbModelParam._m0[1u].z;
        _1753 = _1733.z * cbModelParam._m0[1u].z;
    }
    float _1766 = (((_783 * _732) + _784) * _748) * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1768 = (((_783 * _734) + _784) * _748) * ((cbModelParam._m0[1u].w * (_1751 - _1651)) + _1651);
    float _1770 = (((_783 * _735) + _784) * _748) * ((cbModelParam._m0[1u].w * (_1753 - _1653)) + _1653);
    float _1773 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, _1766 * cbSceneParam._m0[91u].x));
    float _1813 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1817 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1821 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1826 = _1813 / _1825;
    float _1827 = _1817 / _1825;
    float _1828 = _1821 / _1825;
    float _1975;
    float _1976;
    float _1977;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1855 = ((uint(_1828 > cbSceneParam._m0[59u].y) + uint(_1828 > cbSceneParam._m0[59u].x)) + uint(_1828 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1856 = _1855 + 43u;
        uint _1864 = _1855 + 44u;
        uint _1872 = _1855 + 45u;
        uint _1880 = _1855 + 46u;
        float _1891 = fma(_1825, cbSceneParam._m0[_1856].w, fma(_1821, cbSceneParam._m0[_1856].z, fma(_1817, cbSceneParam._m0[_1856].y, _1813 * cbSceneParam._m0[_1856].x)));
        float _1895 = fma(_1825, cbSceneParam._m0[_1864].w, fma(_1821, cbSceneParam._m0[_1864].z, fma(_1817, cbSceneParam._m0[_1864].y, _1813 * cbSceneParam._m0[_1864].x)));
        float _1903 = fma(_1825, cbSceneParam._m0[_1880].w, fma(_1821, cbSceneParam._m0[_1880].z, fma(_1817, cbSceneParam._m0[_1880].y, _1813 * cbSceneParam._m0[_1880].x)));
        float _1908 = cbSceneParam._m0[33u].z * _1903;
        float _1910 = cbSceneParam._m0[33u].w * _1903;
        float _1913 = fma(_1825, cbSceneParam._m0[_1872].w, fma(_1821, cbSceneParam._m0[_1872].z, fma(_1817, cbSceneParam._m0[_1872].y, _1813 * cbSceneParam._m0[_1872].x))) / _1903;
        float _1961 = (cbSceneParam._m0[33u].x - sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828))) * cbSceneParam._m0[33u].y;
        float _4226 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1968 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 + _1891) / _1903, (_1910 + _1895) / _1903), _1913), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 + _1891) / _1903, (_1895 - _1908) / _1903), _1913), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 - _1908) / _1903, (_1895 - _1910) / _1903), _1913), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 - _1910) / _1903, (_1908 + _1895) / _1903), _1913), 0.0)).x), vec4(0.25)));
        _1975 = 1.0 - (_1968 * cbSceneParam._m0[34u].x);
        _1976 = 1.0 - (_1968 * cbSceneParam._m0[34u].y);
        _1977 = 1.0 - (_1968 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1975 = 1.0;
        _1976 = 1.0;
        _1977 = 1.0;
    }
    float _2041;
    float _2043;
    float _2045;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2029 = fma(_1825, cbSceneParam._m0[63u].w, fma(_1821, cbSceneParam._m0[63u].z, fma(_1817, cbSceneParam._m0[63u].y, _1813 * cbSceneParam._m0[63u].x)));
        float _2030 = fma(_1825, cbSceneParam._m0[60u].w, fma(_1821, cbSceneParam._m0[60u].z, fma(_1817, cbSceneParam._m0[60u].y, _1813 * cbSceneParam._m0[60u].x))) / _2029;
        float _2031 = fma(_1825, cbSceneParam._m0[61u].w, fma(_1821, cbSceneParam._m0[61u].z, fma(_1817, cbSceneParam._m0[61u].y, _1813 * cbSceneParam._m0[61u].x))) / _2029;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2030 >= cbSceneParam._m0[64u].x) && (_2031 >= cbSceneParam._m0[64u].y)) && (_2030 <= cbSceneParam._m0[64u].z)) && (_2031 <= cbSceneParam._m0[64u].w))
        {
            float _2169 = fma(_1825, cbSceneParam._m0[62u].w, fma(_1821, cbSceneParam._m0[62u].z, fma(_1817, cbSceneParam._m0[62u].y, _1813 * cbSceneParam._m0[62u].x))) / _2029;
            float _2173 = isnan(cbSceneParam._m0[41u].w) ? _2169 : (isnan(_2169) ? cbSceneParam._m0[41u].w : max(_2169, cbSceneParam._m0[41u].w));
            float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828))) * cbSceneParam._m0[33u].y;
            float _4242 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
            float _2223 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2030, cbSceneParam._m0[33u].w + _2031), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2030, _2031 - cbSceneParam._m0[33u].z), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2030 - cbSceneParam._m0[33u].z, _2031 - cbSceneParam._m0[33u].w), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2030 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2031), _2173), 0.0)).x), vec4(0.25)));
            float _2227 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
            float _2228 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
            float _2229 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2229) ? _1977 : (isnan(_1977) ? _2229 : min(_1977, _2229));
            frontier_phi_34_33_ladder_1 = isnan(_2228) ? _1976 : (isnan(_1976) ? _2228 : min(_1976, _2228));
            frontier_phi_34_33_ladder_2 = isnan(_2227) ? _1975 : (isnan(_1975) ? _2227 : min(_1975, _2227));
        }
        else
        {
            frontier_phi_34_33_ladder = _1977;
            frontier_phi_34_33_ladder_1 = _1976;
            frontier_phi_34_33_ladder_2 = _1975;
        }
        _2041 = frontier_phi_34_33_ladder_2;
        _2043 = frontier_phi_34_33_ladder_1;
        _2045 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2041 = _1975;
        _2043 = _1976;
        _2045 = _1977;
    }
    uvec4 _2050 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2052 = _2050.x * 14u;
    uint _2053 = _2052 + 13u;
    float _2060 = _748 + (-1.0);
    float _2065 = (cbLight._m0[_2053].x * _2060) + 1.0;
    float _2066 = (cbLight._m0[_2053].y * _2060) + 1.0;
    float _2067 = (cbLight._m0[_2053].z * _2060) + 1.0;
    float _2068 = (cbLight._m0[_2053].w * _2060) + 1.0;
    uint _2069 = _2052 + 5u;
    float _2075 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2079 = _2052 + 4u;
    float _2088 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2092 = _2052 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_582, _583, _584));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_582, _583, _584));
    float _4278 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4289 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2069].x * _2075) * _2113) + (((cbLight._m0[_2079].x * _2041) * _2088) * _2111);
    float _2121 = ((_2075 * cbLight._m0[_2069].y) * _2113) + (((cbLight._m0[_2079].y * _2043) * _2088) * _2111);
    float _2122 = ((_2075 * cbLight._m0[_2069].z) * _2113) + (((cbLight._m0[_2079].z * _2045) * _2088) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2052 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2128)
    {
        _2230 = _2120;
        _2232 = _2121;
        _2234 = _2122;
    }
    else
    {
        uint _2238 = _2052 + 6u;
        float _2254 = (dot(vec3(cbLight._m0[_2052 + 2u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4300 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2257 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2230 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2120;
        _2232 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2121;
        _2234 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2122;
    }
    bool _2237 = _2126.y == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2237)
    {
        _2292 = _2230;
        _2294 = _2232;
        _2296 = _2234;
    }
    else
    {
        uint _2465 = _2052 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2052 + 3u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4316 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2484 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2292 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2230;
        _2294 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2232;
        _2296 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2234;
    }
    uint _2299 = _2052 + 8u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _585) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2052].x + _662;
    float _2315 = cbLight._m0[_2052].y + _663;
    float _2316 = cbLight._m0[_2052].z + _664;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2052].xyz));
    float _4332 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2328 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2329 = dot(vec3(_582, _583, _584), vec3(_2321, _2322, _2323));
    float _4354 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2321, _2322, _2323));
    float _4365 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2313 * _2313;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
    float _2350 = 0.959999978542327880859375 - _729;
    float _2352 = 0.959999978542327880859375 - _730;
    float _2353 = 0.959999978542327880859375 - _731;
    float _2360 = 1.0 - _2313;
    float _2371 = (0.5 / (((_2328 * ((_2327 * _2360) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2360) + _2313) * _2327))) * _2327;
    float _4376 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    uint _2387 = _2052 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _585) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2092].x + _662;
    float _2401 = cbLight._m0[_2092].y + _663;
    float _2402 = cbLight._m0[_2092].z + _664;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2092].xyz));
    float _4387 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2414 = dot(vec3(_582, _583, _584), vec3(_2407, _2408, _2409));
    float _4398 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2407, _2408, _2409));
    float _4409 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2328 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2440) + _2399) * _2413))) * _2413;
    float _4420 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2350) + _732) * cbLight._m0[_2387].x) * _2452) * _2075) + ((((cbLight._m0[_2299].x * _2041) * ((_2349 * _2350) + _732)) * _2373) * _2088);
    float _2463 = (((((_2433 * _2352) + _734) * cbLight._m0[_2387].y) * _2452) * _2075) + ((((cbLight._m0[_2299].y * _2043) * ((_2349 * _2352) + _734)) * _2373) * _2088);
    float _2464 = (((((_2433 * _2353) + _735) * cbLight._m0[_2387].z) * _2452) * _2075) + ((((cbLight._m0[_2299].z * _2045) * ((_2349 * _2353) + _735)) * _2373) * _2088);
    float _2520;
    float _2522;
    float _2524;
    if (_2128)
    {
        _2520 = _2462;
        _2522 = _2463;
        _2524 = _2464;
    }
    else
    {
        uint _2526 = _2052 + 2u;
        uint _2530 = _2052 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _585) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _662;
        float _2547 = cbLight._m0[_2526].y + _663;
        float _2548 = cbLight._m0[_2526].z + _664;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2526].xyz));
        float _4431 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2560 = dot(vec3(_582, _583, _584), vec3(_2553, _2554, _2555));
        float _4442 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4453 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
        float _2586 = 1.0 - _2545;
        float _2596 = (0.5 / (((_2328 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2586) + _2545) * _2559))) * _2559;
        float _4464 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2520 = (((((_2579 * _2350) + _732) * cbLight._m0[_2530].x) * _2598) * _2599) + _2462;
        _2522 = (((((_2579 * _2352) + _734) * cbLight._m0[_2530].y) * _2598) * _2599) + _2463;
        _2524 = (((((_2579 * _2353) + _735) * cbLight._m0[_2530].z) * _2598) * _2599) + _2464;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2237)
    {
        _2630 = _2520;
        _2632 = _2522;
        _2634 = _2524;
    }
    else
    {
        uint _2641 = _2052 + 3u;
        uint _2645 = _2052 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _585) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _662;
        float _2662 = cbLight._m0[_2641].y + _663;
        float _2663 = cbLight._m0[_2641].z + _664;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2641].xyz));
        float _4480 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2675 = dot(vec3(_582, _583, _584), vec3(_2668, _2669, _2670));
        float _4491 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4502 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2328 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2701) + _2660) * _2674))) * _2674;
        float _4513 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2630 = (((((_2694 * _2350) + _732) * cbLight._m0[_2645].x) * _2713) * _2714) + _2520;
        _2632 = (((((_2694 * _2352) + _734) * cbLight._m0[_2645].y) * _2713) * _2714) + _2522;
        _2634 = (((((_2694 * _2353) + _735) * cbLight._m0[_2645].z) * _2713) * _2714) + _2524;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2050.y == 0u)
    {
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2736)));
        float _2757 = (log2(_1828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3008)
                {
                    frontier_phi_66_pred = _2997;
                    frontier_phi_66_pred_1 = _2996;
                    frontier_phi_66_pred_2 = _2995;
                    frontier_phi_66_pred_3 = _2994;
                    frontier_phi_66_pred_4 = _2993;
                    frontier_phi_66_pred_5 = _2992;
                }
                else
                {
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    uint _3122;
                    _3116 = _2992;
                    _3117 = _2993;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _3007;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    for (;;)
                    {
                        uint _3126 = uint(findLSB(_3122)) + (_2998 << 5u);
                        uint _3123 = (_3122 + 4294967295u) & _3122;
                        uint _3128 = _3126 * 48u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3148 = (_3126 * 48u) + 4u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3167 = (_3126 * 48u) + 8u;
                        vec3 _3178 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x));
                        float _3182 = _3142.x - _1826;
                        float _3183 = _3142.y - _1827;
                        float _3184 = _3142.z - _1828;
                        float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                        float _3188 = inversesqrt(_3185);
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3192 = dot(vec3(_689, _692, _695), vec3(_3189, _3190, _3191));
                        float _3197 = 1.0 - (_3185 * _3142.w);
                        float _4539 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3199 = sqrt(_3185) * _3161.w;
                        float _3202 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3192) + _3203;
                        float _3209 = _3199 * _3199;
                        float _3213 = ((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3198) / ((_3209 * 0.699999988079071044921875) + 1.0);
                        float _3217 = (-0.0) - _1826;
                        float _3218 = (-0.0) - _1827;
                        float _3219 = (-0.0) - _1828;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3233 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                        float _3234 = 1.0 - _764;
                        float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                        float _3242 = _3241 * _3241;
                        float _3243 = _3242 * _3242;
                        float _3244 = _3224 + _3189;
                        float _3245 = _3225 + _3190;
                        float _3246 = _3226 + _3191;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3254 = dot(vec3(_689, _692, _695), vec3(_3224, _3225, _3226));
                        float _4555 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3258 = dot(vec3(_689, _692, _695), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                        float _4566 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3261 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                        float _3266 = _3202 * _3242;
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3192) + _3267;
                        float _4577 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3272 = 1.0 - _3242;
                        float _3282 = (0.5 / (((_3271 * ((_3257 * _3272) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3242) * _3257))) * _3271;
                        float _4588 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3293 = (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3265 * _3265) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125))) * _3198;
                        _3051 = (_3213 * _3161.x) + _3119;
                        _3052 = (_3213 * _3161.y) + _3120;
                        _3053 = (_3213 * _3161.z) + _3121;
                        _3048 = (_3293 * _3178.x) + _3116;
                        _3049 = (_3293 * _3178.y) + _3117;
                        _3050 = (_3293 * _3178.z) + _3118;
                        if (_3123 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3116 = _3048;
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3123;
                        }
                    }
                    frontier_phi_66_pred = _3053;
                    frontier_phi_66_pred_1 = _3052;
                    frontier_phi_66_pred_2 = _3051;
                    frontier_phi_66_pred_3 = _3050;
                    frontier_phi_66_pred_4 = _3049;
                    frontier_phi_66_pred_5 = _3048;
                }
                _2858 = frontier_phi_66_pred;
                _2856 = frontier_phi_66_pred_1;
                _2854 = frontier_phi_66_pred_2;
                _2852 = frontier_phi_66_pred_3;
                _2850 = frontier_phi_66_pred_4;
                _2848 = frontier_phi_66_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2848;
                    _2993 = _2850;
                    _2994 = _2852;
                    _2995 = _2854;
                    _2996 = _2856;
                    _2997 = _2858;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2864) & _2767) == 0u)
        {
            _2960 = _2847;
            _2962 = _2849;
            _2964 = _2851;
            _2966 = _2853;
            _2968 = _2855;
            _2970 = _2857;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
            float _2986 = _2985 * _1826;
            float _2987 = _2985 * _1827;
            float _2988 = _2985 * _1828;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3099 = _2847;
                float _3100 = _2849;
                float _3101 = _2851;
                float _3102 = _2853;
                float _3103 = _2855;
                float _3104 = _2857;
                uint _3105 = _2864;
                uint _3114;
                bool _3115;
                for (;;)
                {
                    _3114 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                    _3115 = _3114 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3115)
                    {
                        frontier_phi_72_pred = _3104;
                        frontier_phi_72_pred_1 = _3103;
                        frontier_phi_72_pred_2 = _3102;
                        frontier_phi_72_pred_3 = _3101;
                        frontier_phi_72_pred_4 = _3100;
                        frontier_phi_72_pred_5 = _3099;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3311 = _3099;
                        float _3312 = _3100;
                        float _3313 = _3101;
                        float _3314 = _3102;
                        float _3315 = _3103;
                        float _3316 = _3104;
                        uint _3317 = _3114;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3386;
                        vec4 _3402;
                        float _3449;
                        bool _3450;
                        for (;;)
                        {
                            uint _3328 = ((_3105 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3373 = (_3328 * 40u) + 16u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3389 = (_3328 * 40u) + 20u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3405 = (_3328 * 40u) + 24u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3424 = (_3328 * 40u) + 28u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3449 = fma(_1828, _3437.z, fma(_1827, _3437.y, _3437.x * _1826)) + _3437.w;
                            _3450 = !((fma(_1828, _3418.z, fma(_1827, _3418.y, _3418.x * _1826)) + _3418.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3450)
                            {
                                float _3477 = _3343.x - _1826;
                                float _3478 = _3343.y - _1827;
                                float _3479 = _3343.z - _1828;
                                float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                                float _3483 = inversesqrt(_3480);
                                float _3484 = _3483 * _3477;
                                float _3485 = _3483 * _3478;
                                float _3486 = _3483 * _3479;
                                float _3490 = 1.0 - (_3480 / (_3344 * _3344));
                                float _4599 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3495 = sqrt(_3480) * _3359.w;
                                float _3497 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                                float _3498 = _3497 * _3497;
                                float _3501 = ((1.0 - _3498) * dot(vec3(_3484, _3485, _3486), vec3(_689, _692, _695))) + _3498;
                                float _3504 = _3495 * _3495;
                                float _3508 = (fma(_1828, _3386.z, fma(_1827, _3386.y, _3386.x * _1826)) + _3386.w) / _3449;
                                float _3509 = (fma(_1828, _3402.z, fma(_1827, _3402.y, _3402.x * _1826)) + _3402.w) / _3449;
                                float _3513 = 1.0 - dot(vec2(_3508, _3509), vec2(_3508, _3509));
                                float _4615 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3515 = _3514 * (((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3491) / ((_3504 * 0.699999988079071044921875) + 1.0));
                                float _3527 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                                float _3528 = 1.0 - _764;
                                float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                                float _3536 = _3535 * _3535;
                                float _3537 = _3536 * _3536;
                                float _3538 = _3484 - _2986;
                                float _3539 = _3485 - _2987;
                                float _3540 = _3486 - _2988;
                                float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                                float _3548 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4626 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3552 = dot(vec3(_689, _692, _695), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                                float _4637 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                                float _3560 = _3497 * _3536;
                                float _3561 = _3560 * _3560;
                                float _3567 = ((1.0 - _3561) * dot(vec3(_689, _692, _695), vec3(_3484, _3485, _3486))) + _3561;
                                float _4648 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3569 = 1.0 - _3536;
                                float _3579 = (0.5 / (((_3568 * ((_3551 * _3569) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3536) * _3551))) * _3568;
                                float _4659 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3589 = (_3514 * _3491) * (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3559 * _3559) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3515 * _3359.y;
                                frontier_phi_78_pred_1 = _3515 * _3359.x;
                                frontier_phi_78_pred_2 = _3589 * _3371.z;
                                frontier_phi_78_pred_3 = _3589 * _3371.y;
                                frontier_phi_78_pred_4 = _3589 * _3371.x;
                                frontier_phi_78_pred_5 = _3515 * _3359.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3597 = frontier_phi_78_pred;
                            _3596 = frontier_phi_78_pred_1;
                            _3595 = frontier_phi_78_pred_2;
                            _3594 = frontier_phi_78_pred_3;
                            _3593 = frontier_phi_78_pred_4;
                            _3598 = frontier_phi_78_pred_5;
                            _3301 = _3596 + _3314;
                            _3302 = _3597 + _3315;
                            _3303 = _3598 + _3316;
                            _3298 = _3593 + _3311;
                            _3299 = _3594 + _3312;
                            _3300 = _3595 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3303;
                        frontier_phi_72_pred_1 = _3302;
                        frontier_phi_72_pred_2 = _3301;
                        frontier_phi_72_pred_3 = _3300;
                        frontier_phi_72_pred_4 = _3299;
                        frontier_phi_72_pred_5 = _3298;
                    }
                    _2971 = frontier_phi_72_pred;
                    _2969 = frontier_phi_72_pred_1;
                    _2967 = frontier_phi_72_pred_2;
                    _2965 = frontier_phi_72_pred_3;
                    _2963 = frontier_phi_72_pred_4;
                    _2961 = frontier_phi_72_pred_5;
                    uint _3106 = _3105 + 1u;
                    if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3099 = _2961;
                        _3100 = _2963;
                        _3101 = _2965;
                        _3102 = _2967;
                        _3103 = _2969;
                        _3104 = _2971;
                        _3105 = _3106;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2971;
                frontier_phi_60_61_ladder_1 = _2969;
                frontier_phi_60_61_ladder_2 = _2965;
                frontier_phi_60_61_ladder_3 = _2963;
                frontier_phi_60_61_ladder_4 = _2961;
                frontier_phi_60_61_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_60_61_ladder = _2857;
                frontier_phi_60_61_ladder_1 = _2855;
                frontier_phi_60_61_ladder_2 = _2851;
                frontier_phi_60_61_ladder_3 = _2849;
                frontier_phi_60_61_ladder_4 = _2847;
                frontier_phi_60_61_ladder_5 = _2853;
            }
            _2960 = frontier_phi_60_61_ladder_4;
            _2962 = frontier_phi_60_61_ladder_3;
            _2964 = frontier_phi_60_61_ladder_2;
            _2966 = frontier_phi_60_61_ladder_5;
            _2968 = frontier_phi_60_61_ladder_1;
            _2970 = frontier_phi_60_61_ladder;
        }
        float _2975 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2780 = (_2975 * _2966) + _2292;
        _2782 = (_2975 * _2968) + _2294;
        _2784 = (_2975 * _2970) + _2296;
        _2786 = ((_2960 * _732) * _2975) + _2630;
        _2788 = ((_2962 * _734) * _2975) + _2632;
        _2790 = ((_2964 * _735) * _2975) + _2634;
    }
    else
    {
        _2780 = _2292;
        _2782 = _2294;
        _2784 = _2296;
        _2786 = _2630;
        _2788 = _2632;
        _2790 = _2634;
    }
    float _4675 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4686 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4697 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    uint _2810 = _236 + 6u;
    float _2818 = _670 / cbSceneParam._m0[86u].x;
    float _2819 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2873 = _2872 / _604;
        float _2884 = _2873 * _655;
        float _2885 = _656 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2888 = _2873 * _657;
        float _2890 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2891 = _2890 + cbSceneParam._m0[79u].w;
        float _2892 = cbSceneParam._m0[79u].w - _2885;
        float _2898 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2888 * _2888));
        float _2901 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2898;
        float _2906 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2908 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3061;
        if (abs((_2886 - _2890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3061 = ((((_2891 > 0.0) ? exp2(_2906 * _2891) : (2.0 - exp2(_2908 * _2891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2901;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : max(_2891, _2892));
            float _3023 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : min(_2891, _2892));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3061 = ((abs(_2898 / _2886) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2906 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2906 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2908 * _3032) - exp2(_2908 * _3033)) * _3021))) + (_2901 * cbSceneParam._m0[80u].z);
        }
        vec4 _3063 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3072 = exp2((_3061 * (-1.44269502162933349609375)) * (1.0 - _3063.w));
        float _3073 = log2(_3072);
        float _3089 = log2(_2838);
        _2910 = (exp2(_3089 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].x)) * _3063.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2912 = (exp2(_3089 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].y)) * _3063.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2914 = (exp2(_3089 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].z)) * _3063.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2916 = _3072 * _2838;
    }
    else
    {
        _2910 = _2835;
        _2912 = _2836;
        _2914 = _2837;
        _2916 = _2838;
    }
    float _2928 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2929 = _2928 == 3.0;
    float _2930 = log2(_2916);
    float _2937 = exp2(_2930 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2780 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _748))) + ((_2786 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2938 = exp2(_2930 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2782 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _748))) + ((_2788 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2939 = exp2(_2930 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2784 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _748))) + ((_2790 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2948 = (_2928 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2948 * (_2929 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2910)));
    SV_Target.y = _2948 * (_2929 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2912)));
    SV_Target.z = _2948 * (_2929 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.w = cbInstanceData._m0[_2810].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
}


