#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1626;
float _4003;
float _4004;
float _4005;
float _4006;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4015 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4026 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4037 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _379 = _374.x * cbMtdParam._m0[11u].x;
    float _380 = _374.y * cbMtdParam._m0[11u].y;
    float _381 = _374.z * cbMtdParam._m0[11u].z;
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _419.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _493 = (_486 * ((_400.x * cbMtdParam._m0[12u].x) - _379)) + _379;
    float _494 = (_486 * ((_400.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _495 = (_486 * ((_400.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _419.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4059 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _606 = _604.x;
    float _616 = dot(vec4(_606, _604.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _628 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _419.z) * 2.0) - ((((_606 - _616) * cbMtdParam._m0[23u].w) + _616) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4070 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _639 = (_348.x * cbMtdParam._m0[9u].x) * ((_629 * ((_587.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _640 = (_348.y * cbMtdParam._m0[9u].y) * ((_629 * ((_587.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _641 = (_348.z * cbMtdParam._m0[9u].z) * ((_629 * ((_587.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _645 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _639;
    float _648 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _640;
    float _651 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _641;
    float _659 = (((_639 - _645) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) + _645) * 4.55000019073486328125;
    float _661 = (((_640 - _648) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) + _648) * 4.55000019073486328125;
    float _663 = (((_641 - _651) * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) + _651) * 4.55000019073486328125;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _311) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _312) + cbTextureTilingScale._m0[14u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _742 = _740.x;
    float _743 = _740.y;
    float _744 = _740.z;
    float _751 = ((_723.x - _742) * _486) + _742;
    float _752 = ((_723.y - _743) * _486) + _743;
    float _753 = ((_723.z - _744) * _486) + _744;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _776 = ((_765.x - _751) * _559) + _751;
    float _777 = ((_765.y - _752) * _559) + _752;
    float _778 = ((_765.z - _753) * _559) + _753;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _803 = ((_790.z - _778) * _629) + _778;
    float _806 = ((((_790.x - _776) * _629) + _776) * 2.0) + (-1.0);
    float _807 = ((((_790.y - _777) * _629) + _777) * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4081 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _813 = sqrt(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))));
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _854 = _852.x;
    float _855 = 1.0 - _854;
    float _870 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_854 - _855) * cbMtdParam._m0[24u].z) + _855) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4092 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _871 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _878 = (_871 * ((_681.x * cbMtdParam._m0[18u].x) - _659)) + _659;
    float _879 = (_871 * ((_681.y * cbMtdParam._m0[18u].y) - _661)) + _661;
    float _880 = (_871 * ((_681.z * cbMtdParam._m0[18u].z) - _663)) + _663;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _908 = _906.x;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _908) * _486) + _908;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _925) * _559) + _925;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _942) * _629) + _942;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _960) * cbMtdParam._m0[19u].z) + _960;
    float _966 = _964 - (_964 * _871);
    float _971 = (((_700.z - _803) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _803;
    float _975 = ((_827.z - _971) * cbMtdParam._m0[19u].w) + _971;
    vec4 _988 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _995 = (_988.x * 2.0) + (-1.0);
    float _996 = (_988.y * 2.0) + (-1.0);
    float _997 = dot(vec2(_995, _996), vec2(_995, _996));
    float _4103 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1005 = (_871 * (_988.z - _975)) + _975;
    float _1014 = (_806 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_700.x * 2.0) + (-1.0)))) + (((_827.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1015 = (_807 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_700.y * 2.0) + (-1.0)))) + (((_827.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1027 = (((_995 - _1014) + (cbMtdParam._m0[21u].x * _1014)) * _871) + _1014;
    float _1028 = (((_996 - _1015) + (cbMtdParam._m0[21u].x * _1015)) * _871) + _1015;
    float _1029 = (_871 * (sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) - _813)) + _813;
    float _1033 = cbMtdParam._m0[22u].x + _827.w;
    float _1036 = fma(_1029, _258 * NORMAL.x, fma(_1028, _265 * TANGENT.x, (_251 * _243) * _1027));
    float _1039 = fma(_1029, _258 * NORMAL.y, fma(_1028, _265 * TANGENT.y, (_251 * _244) * _1027));
    float _1042 = fma(_1029, _258 * NORMAL.z, fma(_1028, _265 * TANGENT.z, (_251 * _245) * _1027));
    float _1046 = inversesqrt(dot(vec3(_1036, _1039, _1042), vec3(_1036, _1039, _1042)));
    float _1047 = _1046 * _1036;
    float _1048 = _1046 * _1039;
    float _1049 = _1046 * _1042;
    float _4114 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1050 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4136 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4147 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4158 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4169 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _1055 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1069 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1119 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1109);
    float _1120 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1109);
    float _1121 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1109);
    float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
    float _1126 = _1119 * _1125;
    float _1127 = _1120 * _1125;
    float _1128 = _1121 * _1125;
    vec4 _1133 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1135 = _1133.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1307 = sqrt(((_1119 * _1119) + (_1120 * _1120)) + (_1121 * _1121));
        float _1313 = (cbMatDynParam._m0[5u].x * _1307) + cbMatDynParam._m0[5u].y;
        float _4180 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1318 = (cbMatDynParam._m0[5u].z * _1307) + cbMatDynParam._m0[5u].w;
        float _4191 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) - _1314)) + _1314) < ((_1135 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1146 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1147 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1165 = fma(_1049, cbSceneParam._m0[5u].z, fma(_1048, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1047));
    float _1168 = fma(_1049, cbSceneParam._m0[6u].z, fma(_1048, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1047));
    float _1171 = fma(_1049, cbSceneParam._m0[7u].z, fma(_1048, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1047));
    uint _1184 = _292 + 9u;
    uint _1185 = _1184 + uint(cbMatDynParam._m0[0u].w);
    float _1191 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_1185].x;
    float _1192 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1185].y;
    float _1193 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_1185].z;
    float _4202 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _1197 = 1.0 - _1055;
    float _1198 = _1194 * _1197;
    float _1199 = _1195 * _1197;
    float _1200 = _1196 * _1197;
    float _1205 = (_1194 + (-0.039999999105930328369140625)) * _1055;
    float _1206 = (_1195 + (-0.039999999105930328369140625)) * _1055;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1055;
    float _1208 = _1205 + 0.039999999105930328369140625;
    float _1210 = _1206 + 0.039999999105930328369140625;
    float _1211 = _1207 + 0.039999999105930328369140625;
    vec4 _1220 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1146, cbSceneParam._m0[86u].y * _1147));
    float _1224 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * TEXCOORD_5.w) * _1220.x;
    float _1225 = dot(vec3(_1047, _1048, _1049), vec3(_1126, _1127, _1128));
    float _1228 = _1225 * 2.0;
    float _1232 = (_1228 * _1047) - _1126;
    float _1233 = (_1228 * _1048) - _1127;
    float _1234 = (_1228 * _1049) - _1128;
    float _1238 = abs(dot(vec3(_1126, _1127, _1128), vec3(_1047, _1048, _1049)));
    float _4235 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1240 = sqrt(_1050);
    float _1253 = exp2((_1240 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1240 * 3.0));
    float _1259 = (1.0 - _1253) * ((_1240 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1260 = _1253 * _1240;
    float _1288 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1625;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1350 = fma(_1296, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288));
        float _1354 = fma(_1296, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288));
        float _1358 = fma(_1296, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288));
        float _1383 = _1288 + _1047;
        float _1384 = _1292 + _1048;
        float _1385 = _1296 + _1049;
        float _1395 = fma(_1385, cbModelParam._m0[26u].z, fma(_1384, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1383)) - _1350;
        float _1396 = fma(_1385, cbModelParam._m0[27u].z, fma(_1384, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1383)) - _1354;
        float _1397 = fma(_1385, cbModelParam._m0[28u].z, fma(_1384, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1383)) - _1358;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1350 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1354 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[34u].z) + ((((((_1358 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1453 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1419.x + (-0.5));
        float _1455 = _1453 * (_1419.y + (-0.5));
        float _1456 = _1453 * (_1419.z + (-0.5));
        float _1463 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1426.x + (-0.5));
        float _1465 = _1463 * (_1426.y + (-0.5));
        float _1466 = _1463 * (_1426.z + (-0.5));
        float _1473 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1433.x + (-0.5));
        float _1475 = _1473 * (_1433.y + (-0.5));
        float _1476 = _1473 * (_1433.z + (-0.5));
        float _1483 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1440.x + (-0.5));
        float _1485 = _1483 * (_1440.y + (-0.5));
        float _1486 = _1483 * (_1440.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1507 = (dot(vec3(_1047, _1048, _1049), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1517 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4283 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1519 + 1.0))) + _1524) * _1487;
        float _1534 = _1455 * 0.5;
        float _1535 = _1465 * 0.5;
        float _1536 = _1475 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1047, _1048, _1049), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4316 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1561 + 1.0))) + _1566) * _1488;
        float _1576 = _1456 * 0.5;
        float _1577 = _1466 * 0.5;
        float _1578 = _1476 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_1047, _1048, _1049), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4349 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1603 + 1.0))) + _1608) * _1489;
        _1625 = _1456;
        _1627 = _1455;
        _1628 = _1454;
        _1629 = _1466;
        _1630 = _1465;
        _1631 = _1464;
        _1632 = _1476;
        _1633 = _1475;
        _1634 = _1474;
        _1635 = _1489;
        _1636 = _1488;
        _1637 = _1487;
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1639 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1626;
        _1627 = _1626;
        _1628 = _1626;
        _1629 = _1626;
        _1630 = _1626;
        _1631 = _1626;
        _1632 = _1626;
        _1633 = _1626;
        _1634 = _1626;
        _1635 = _1626;
        _1636 = _1626;
        _1637 = _1626;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1666 = fma(_1296, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288));
        float _1670 = fma(_1296, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288));
        float _1674 = fma(_1296, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288));
        float _1697 = _1288 + _1047;
        float _1698 = _1292 + _1048;
        float _1699 = _1296 + _1049;
        float _1709 = fma(_1699, cbModelParam._m0[30u].z, fma(_1698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1697)) - _1666;
        float _1710 = fma(_1699, cbModelParam._m0[31u].z, fma(_1698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1697)) - _1670;
        float _1711 = fma(_1699, cbModelParam._m0[32u].z, fma(_1698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1697)) - _1674;
        float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
        float _1728 = ((_1715 * _1709) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1666 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1729 = ((_1715 * _1710) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1670 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1730 = ((_1715 * _1711) / cbModelParam._m0[35u].z) + ((((((_1674 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        vec4 _1746 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        vec4 _1753 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1728, _1729, _1730), 0.0);
        float _1765 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1732.x + (-0.5));
        float _1767 = _1765 * (_1732.y + (-0.5));
        float _1768 = _1765 * (_1732.z + (-0.5));
        float _1775 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1776 = _1775 * (_1739.x + (-0.5));
        float _1777 = _1775 * (_1739.y + (-0.5));
        float _1778 = _1775 * (_1739.z + (-0.5));
        float _1785 = exp2((_1746.w + (-0.5)) * 20.0) * 2.0;
        float _1786 = _1785 * (_1746.x + (-0.5));
        float _1787 = _1785 * (_1746.y + (-0.5));
        float _1788 = _1785 * (_1746.z + (-0.5));
        float _1795 = exp2((_1753.w + (-0.5)) * 20.0) * 2.0;
        float _1796 = _1795 * (_1753.x + (-0.5));
        float _1797 = _1795 * (_1753.y + (-0.5));
        float _1798 = _1795 * (_1753.z + (-0.5));
        float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = _1766 * 0.5;
        float _1803 = _1776 * 0.5;
        float _1804 = _1786 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1047, _1048, _1049), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1799 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4412 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1829 + 1.0))) + _1834) * _1799;
        float _1844 = _1767 * 0.5;
        float _1845 = _1777 * 0.5;
        float _1846 = _1787 * 0.5;
        float _1847 = dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846));
        float _1852 = (_1847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1847);
        float _1860 = (dot(vec3(_1047, _1048, _1049), vec3(_1852 * _1844, _1852 * _1845, _1852 * _1846)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1869 = sqrt(((_1845 * _1845) + (_1844 * _1844)) + (_1846 * _1846)) / (_1800 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1871 = _1870 * 2.0;
        float _1875 = (1.0 - _1870) / (_1870 + 1.0);
        float _4445 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1885 = ((((1.0 - _1876) * (_1871 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1871 + 1.0))) + _1876) * _1800;
        float _1886 = _1768 * 0.5;
        float _1887 = _1778 * 0.5;
        float _1888 = _1788 * 0.5;
        float _1889 = dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888));
        float _1894 = (_1889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1889);
        float _1902 = (dot(vec3(_1047, _1048, _1049), vec3(_1894 * _1886, _1894 * _1887, _1894 * _1888)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1911 = sqrt(((_1887 * _1887) + (_1886 * _1886)) + (_1888 * _1888)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1913 = _1912 * 2.0;
        float _1917 = (1.0 - _1912) / (_1912 + 1.0);
        float _4478 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1927 = ((((1.0 - _1918) * (_1913 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1913 + 1.0))) + _1918) * _1801;
        _1935 = _1768;
        _1936 = _1767;
        _1937 = _1766;
        _1938 = _1778;
        _1939 = _1777;
        _1940 = _1776;
        _1941 = _1788;
        _1942 = _1787;
        _1943 = _1786;
        _1944 = _1801;
        _1945 = _1800;
        _1946 = _1799;
        _1947 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
        _1948 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)));
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)));
    }
    else
    {
        _1935 = _1626;
        _1936 = _1626;
        _1937 = _1626;
        _1938 = _1626;
        _1939 = _1626;
        _1940 = _1626;
        _1941 = _1626;
        _1942 = _1626;
        _1943 = _1626;
        _1944 = _1626;
        _1945 = _1626;
        _1946 = _1626;
        _1947 = 0.0;
        _1948 = 0.0;
        _1949 = 0.0;
    }
    float _1959 = (cbModelParam._m0[1u].x * (_1947 - _1638)) + _1638;
    float _1960 = (cbModelParam._m0[1u].x * (_1948 - _1639)) + _1639;
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1640)) + _1640;
    float _1982 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1959));
    float _2003 = _1232 * 0.5;
    float _2004 = _1233 * 0.5;
    float _2005 = _1234 * 0.5;
    float _2006 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2009 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1936, _1939, _1942, _1945));
    float _2012 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1935, _1938, _1941, _1944));
    float _2046;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2019 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1625, _1629, _1632, _1635));
        float _2023 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1627, _1630, _1633, _1636));
        float _2027 = dot(vec4(_2003, _2004, _2005, 1.0), vec4(_1628, _1631, _1634, _1637));
        float _2034 = dot(vec4(cbModelParam._m0[39u]), vec4(_2003, _2004, _2005, 1.0));
        _2046 = dot(vec3(isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)), isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2034) ? 0.0 : (isnan(0.0) ? _2034 : max(0.0, _2034))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2046 = 1.0;
    }
    float _2057;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2048 = dot(vec4(cbModelParam._m0[40u]), vec4(_2003, _2004, _2005, 1.0));
        _2057 = dot(vec3(isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2048) ? 0.0 : (isnan(0.0) ? _2048 : max(0.0, _2048))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2057 = 1.0;
    }
    float _2061 = (_2057 * cbModelParam._m0[1u].x) + (_2046 * (1.0 - cbModelParam._m0[1u].x));
    float _2071 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1050);
    float _2072 = isnan(_2071) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2071 : min(cbModelParam._m0[25u].z, _2071));
    float _2152;
    float _2154;
    float _2156;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2119 = fma(_1296, cbModelParam._m0[13u].z, fma(_1292, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1288)) + cbModelParam._m0[13u].w;
        float _2123 = fma(_1296, cbModelParam._m0[14u].z, fma(_1292, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1288)) + cbModelParam._m0[14u].w;
        float _2127 = fma(_1296, cbModelParam._m0[15u].z, fma(_1292, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1288)) + cbModelParam._m0[15u].w;
        float _2130 = fma(_1234, cbModelParam._m0[13u].z, fma(_1233, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1232));
        float _2133 = fma(_1234, cbModelParam._m0[14u].z, fma(_1233, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1232));
        float _2136 = fma(_1234, cbModelParam._m0[15u].z, fma(_1233, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1232));
        float _2164;
        if (_2130 > 0.0)
        {
            _2164 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2164 = frontier_phi_17_15_ladder;
        }
        float _2366;
        if (_2133 > 0.0)
        {
            _2366 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2366 = frontier_phi_26_22_ladder;
        }
        float _2620;
        if (_2136 > 0.0)
        {
            _2620 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2620 = frontier_phi_38_33_ladder;
        }
        float _2622 = isnan(_2366) ? _2164 : (isnan(_2164) ? _2366 : min(_2164, _2366));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _2130) + _2119;
        float _2628 = (_2623 * _2133) + _2123;
        float _2629 = (_2623 * _2136) + _2127;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2632 = (-1.0) - _2630;
        float _2634 = _2630 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2629 > _2634) || ((_2629 < _2632) || ((_2628 > _2634) || ((_2628 < _2632) || ((_2627 < _2632) || (_2627 > _2634))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2629, cbModelParam._m0[9u].z, fma(_2628, cbModelParam._m0[9u].y, _2627 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2629, cbModelParam._m0[10u].z, fma(_2628, cbModelParam._m0[10u].y, _2627 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2629, cbModelParam._m0[11u].z, fma(_2628, cbModelParam._m0[11u].y, _2627 * cbModelParam._m0[11u].x))), _2072);
            frontier_phi_16_38_ladder = _2757.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2757.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2757.x * cbModelParam._m0[1u].y;
        }
        _2152 = frontier_phi_16_38_ladder_2;
        _2154 = frontier_phi_16_38_ladder_1;
        _2156 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1232, _1233, _1234), _2072);
        _2152 = _2140.x * cbModelParam._m0[1u].y;
        _2154 = _2140.y * cbModelParam._m0[1u].y;
        _2156 = _2140.z * cbModelParam._m0[1u].y;
    }
    float _2160 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1050);
    float _2161 = isnan(_2160) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2160 : min(cbModelParam._m0[25u].w, _2160));
    float _2250;
    float _2252;
    float _2254;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2214 = fma(_1296, cbModelParam._m0[21u].z, fma(_1292, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1288)) + cbModelParam._m0[21u].w;
        float _2218 = fma(_1296, cbModelParam._m0[22u].z, fma(_1292, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1288)) + cbModelParam._m0[22u].w;
        float _2222 = fma(_1296, cbModelParam._m0[23u].z, fma(_1292, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1288)) + cbModelParam._m0[23u].w;
        float _2225 = fma(_1234, cbModelParam._m0[21u].z, fma(_1233, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1232));
        float _2228 = fma(_1234, cbModelParam._m0[22u].z, fma(_1233, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1232));
        float _2231 = fma(_1234, cbModelParam._m0[23u].z, fma(_1233, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1232));
        float _2371;
        if (_2225 > 0.0)
        {
            _2371 = abs((1.0 - _2214) / _2225);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2214 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2371 = frontier_phi_28_24_ladder;
        }
        float _2647;
        if (_2228 > 0.0)
        {
            _2647 = abs((1.0 - _2218) / _2228);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2218 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2647 = frontier_phi_40_35_ladder;
        }
        float _2860;
        if (_2231 > 0.0)
        {
            _2860 = abs((1.0 - _2222) / _2231);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2222 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2860 = frontier_phi_49_46_ladder;
        }
        float _2862 = isnan(_2647) ? _2371 : (isnan(_2371) ? _2647 : min(_2371, _2647));
        float _2863 = isnan(_2860) ? _2862 : (isnan(_2862) ? _2860 : min(_2862, _2860));
        float _2867 = (_2863 * _2225) + _2214;
        float _2868 = (_2863 * _2228) + _2218;
        float _2869 = (_2863 * _2231) + _2222;
        float _2870 = _2863 * 9.9999997473787516355514526367188e-05;
        float _2871 = (-1.0) - _2870;
        float _2873 = _2870 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2869 > _2873) || ((_2869 < _2871) || ((_2868 > _2873) || ((_2868 < _2871) || ((_2867 < _2871) || (_2867 > _2873))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2869, cbModelParam._m0[17u].z, fma(_2868, cbModelParam._m0[17u].y, _2867 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2869, cbModelParam._m0[18u].z, fma(_2868, cbModelParam._m0[18u].y, _2867 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2869, cbModelParam._m0[19u].z, fma(_2868, cbModelParam._m0[19u].y, _2867 * cbModelParam._m0[19u].x))), _2161);
            frontier_phi_25_49_ladder = _3068.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3068.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3068.x * cbModelParam._m0[1u].z;
        }
        _2250 = frontier_phi_25_49_ladder_2;
        _2252 = frontier_phi_25_49_ladder_1;
        _2254 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2234 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1232, _1233, _1234), _2161);
        _2250 = _2234.x * cbModelParam._m0[1u].z;
        _2252 = _2234.y * cbModelParam._m0[1u].z;
        _2254 = _2234.z * cbModelParam._m0[1u].z;
    }
    float _2267 = (((_1259 * _1208) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2250 - _2152)) + _2152);
    float _2269 = (((_1259 * _1210) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2252 - _2154)) + _2154);
    float _2271 = (((_1259 * _1211) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2254 - _2156)) + _2156);
    float _2274 = fma(_2271, cbSceneParam._m0[89u].z, fma(_2269, cbSceneParam._m0[89u].y, _2267 * cbSceneParam._m0[89u].x));
    float _2277 = fma(_2271, cbSceneParam._m0[90u].z, fma(_2269, cbSceneParam._m0[90u].y, _2267 * cbSceneParam._m0[90u].x));
    float _2280 = fma(_2271, cbSceneParam._m0[91u].z, fma(_2269, cbSceneParam._m0[91u].y, _2267 * cbSceneParam._m0[91u].x));
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _1224 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2325 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2329 = _2292 | 1u;
    float _2340 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_1047, _1048, _1049));
    float _2343 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_1047, _1048, _1049));
    float _4614 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _4625 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2350 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2357 = ((cbLight._m0[_2309].x * _2315) * _2350) + ((cbLight._m0[_2319].x * _2325) * _2348);
    float _2358 = ((_2315 * cbLight._m0[_2309].y) * _2350) + ((_2325 * cbLight._m0[_2319].y) * _2348);
    float _2359 = ((_2315 * cbLight._m0[_2309].z) * _2350) + ((_2325 * cbLight._m0[_2319].z) * _2348);
    uvec4 _2363 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2365 = _2363.x == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2365)
    {
        _2376 = _2357;
        _2378 = _2358;
        _2380 = _2359;
    }
    else
    {
        uint _2384 = _2292 + 6u;
        float _2400 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4636 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2403 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2376 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2357;
        _2378 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2358;
        _2380 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2359;
    }
    bool _2383 = _2363.y == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2383)
    {
        _2421 = _2376;
        _2423 = _2378;
        _2425 = _2380;
    }
    else
    {
        uint _2591 = _2292 + 7u;
        float _2607 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4652 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2610 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2421 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2376;
        _2423 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2378;
        _2425 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2380;
    }
    uint _2428 = _2292 + 8u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _1050) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2292].x + _1126;
    float _2444 = cbLight._m0[_2292].y + _1127;
    float _2445 = cbLight._m0[_2292].z + _1128;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2292].xyz));
    float _4668 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _2457 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2458 = dot(vec3(_1047, _1048, _1049), vec3(_2450, _2451, _2452));
    float _4690 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2450, _2451, _2452));
    float _4701 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2442 * _2442;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2479 = 0.959999978542327880859375 - _1205;
    float _2481 = 0.959999978542327880859375 - _1206;
    float _2482 = 0.959999978542327880859375 - _1207;
    float _2489 = 1.0 - _2442;
    float _2500 = (0.5 / (((_2457 * ((_2456 * _2489) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2489) + _2442) * _2456))) * _2456;
    float _4712 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    uint _2513 = _2292 + 9u;
    float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _1050) * 0.949999988079071044921875);
    float _2525 = _2524 * _2524;
    float _2526 = cbLight._m0[_2329].x + _1126;
    float _2527 = cbLight._m0[_2329].y + _1127;
    float _2528 = cbLight._m0[_2329].z + _1128;
    float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
    float _2533 = _2532 * _2526;
    float _2534 = _2532 * _2527;
    float _2535 = _2532 * _2528;
    float _2536 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2329].xyz));
    float _4723 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2540 = dot(vec3(_1047, _1048, _1049), vec3(_2533, _2534, _2535));
    float _4734 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2533, _2534, _2535));
    float _4745 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2525 * _2525;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2566 = 1.0 - _2525;
    float _2576 = (0.5 / (((_2457 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2566) + _2525) * _2539))) * _2539;
    float _4756 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    float _2588 = (((((_2559 * _2479) + _1208) * cbLight._m0[_2513].x) * _2578) * _2315) + (((((_2478 * _2479) + _1208) * cbLight._m0[_2428].x) * _2502) * _2325);
    float _2589 = (((((_2559 * _2481) + _1210) * cbLight._m0[_2513].y) * _2578) * _2315) + (((((_2478 * _2481) + _1210) * cbLight._m0[_2428].y) * _2502) * _2325);
    float _2590 = (((((_2559 * _2482) + _1211) * cbLight._m0[_2513].z) * _2578) * _2315) + (((((_2478 * _2482) + _1211) * cbLight._m0[_2428].z) * _2502) * _2325);
    float _2652;
    float _2654;
    float _2656;
    if (_2365)
    {
        _2652 = _2588;
        _2654 = _2589;
        _2656 = _2590;
    }
    else
    {
        uint _2658 = _2292 + 2u;
        uint _2662 = _2292 + 10u;
        float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2658].w)) * _1050) * 0.949999988079071044921875);
        float _2677 = _2676 * _2676;
        float _2678 = cbLight._m0[_2658].x + _1126;
        float _2679 = cbLight._m0[_2658].y + _1127;
        float _2680 = cbLight._m0[_2658].z + _1128;
        float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
        float _2685 = _2684 * _2678;
        float _2686 = _2684 * _2679;
        float _2687 = _2684 * _2680;
        float _2688 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2658].xyz));
        float _4767 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2692 = dot(vec3(_1047, _1048, _1049), vec3(_2685, _2686, _2687));
        float _4778 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2696 = dot(vec3(cbLight._m0[_2658].xyz), vec3(_2685, _2686, _2687));
        float _4789 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2700 = _2677 * _2677;
        float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
        float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2718 = 1.0 - _2677;
        float _2728 = (0.5 / (((_2457 * ((_2691 * _2718) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2718) + _2677) * _2691))) * _2691;
        float _4800 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2652 = (((((_2711 * _2479) + _1208) * cbLight._m0[_2662].x) * _2730) * _2731) + _2588;
        _2654 = (((((_2711 * _2481) + _1210) * cbLight._m0[_2662].y) * _2730) * _2731) + _2589;
        _2656 = (((((_2711 * _2482) + _1211) * cbLight._m0[_2662].z) * _2730) * _2731) + _2590;
    }
    float _2766;
    float _2768;
    float _2770;
    if (_2383)
    {
        _2766 = _2652;
        _2768 = _2654;
        _2770 = _2656;
    }
    else
    {
        uint _2777 = _2292 + 3u;
        uint _2781 = _2292 + 11u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _1050) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _1126;
        float _2798 = cbLight._m0[_2777].y + _1127;
        float _2799 = cbLight._m0[_2777].z + _1128;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2777].xyz));
        float _4816 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2811 = dot(vec3(_1047, _1048, _1049), vec3(_2804, _2805, _2806));
        float _4827 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4838 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2830 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2837 = 1.0 - _2796;
        float _2847 = (0.5 / (((_2457 * ((_2810 * _2837) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2837) + _2796) * _2810))) * _2810;
        float _4849 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2849 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2850 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2766 = (((((_2830 * _2479) + _1208) * cbLight._m0[_2781].x) * _2849) * _2850) + _2652;
        _2768 = (((((_2830 * _2481) + _1210) * cbLight._m0[_2781].y) * _2849) * _2850) + _2654;
        _2770 = (((((_2830 * _2482) + _1211) * cbLight._m0[_2781].z) * _2849) * _2850) + _2656;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2290.y == 0u)
    {
        float _2925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2925;
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2925;
        float _2928 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2925;
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.x;
        uint _2952 = uint((float(_2940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1147) / _2941))) + floor(float(uint(cbSceneParam._m0[85u].x * _1146) / _2941)));
        float _2962 = (log2(_2928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2963 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        uint _2966 = uint(isnan(14.0) ? _2963 : (isnan(_2963) ? 14.0 : min(_2963, 14.0)));
        uvec4 _2971 = texelFetch(g_lightClusterGridBuffer, int(((_2966 << 2u) + (_2952 << 6u)) >> 2u));
        uint _2972 = _2971.x;
        uint _2973 = _2940.z;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((((1u << ((_2973 >> 4u) & 15u)) + 4294967295u) & _2972) == 0u) || ((_2973 & 240u) == 0u))
        {
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
        }
        else
        {
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            uint _3232 = 0u;
            uint _3241;
            bool _3242;
            for (;;)
            {
                _3241 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                _3242 = _3241 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3242)
                {
                    frontier_phi_66_pred = _3226;
                    frontier_phi_66_pred_1 = _3231;
                    frontier_phi_66_pred_2 = _3230;
                    frontier_phi_66_pred_3 = _3229;
                    frontier_phi_66_pred_4 = _3228;
                    frontier_phi_66_pred_5 = _3227;
                }
                else
                {
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    uint _3377;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3241;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    for (;;)
                    {
                        uint _3381 = uint(findLSB(_3377)) + (_3232 << 5u);
                        uint _3378 = (_3377 + 4294967295u) & _3377;
                        uint _3383 = _3381 * 48u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 3u)).x));
                        uint _3403 = (_3381 * 48u) + 4u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3422 = (_3381 * 48u) + 8u;
                        vec3 _3433 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x));
                        float _3437 = _3397.x - _2926;
                        float _3438 = _3397.y - _2927;
                        float _3439 = _3397.z - _2928;
                        float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                        float _3443 = inversesqrt(_3440);
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3447 = dot(vec3(_1165, _1168, _1171), vec3(_3444, _3445, _3446));
                        float _3452 = 1.0 - (_3440 * _3397.w);
                        float _4875 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3454 = sqrt(_3440) * _3416.w;
                        float _3457 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3447) + _3458;
                        float _3464 = _3454 * _3454;
                        float _3468 = ((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3453) / ((_3464 * 0.699999988079071044921875) + 1.0);
                        float _3472 = (-0.0) - _2926;
                        float _3473 = (-0.0) - _2927;
                        float _3474 = (-0.0) - _2928;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3489 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                        float _3490 = 1.0 - _1240;
                        float _3497 = sqrt(1.0 - ((1.0 - (_3490 * _3490)) * (1.0 - (_3489 * _3489))));
                        float _3498 = _3497 * _3497;
                        float _3499 = _3498 * _3498;
                        float _3500 = _3479 + _3444;
                        float _3501 = _3480 + _3445;
                        float _3502 = _3481 + _3446;
                        float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                        float _3510 = dot(vec3(_1165, _1168, _1171), vec3(_3479, _3480, _3481));
                        float _4891 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3513 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3514 = dot(vec3(_1165, _1168, _1171), vec3(_3506 * _3500, _3506 * _3501, _3506 * _3502));
                        float _4902 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3517 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3521 = ((_3517 * _3517) * (_3499 + (-1.0))) + 1.0;
                        float _3522 = _3457 * _3498;
                        float _3523 = _3522 * _3522;
                        float _3526 = ((1.0 - _3523) * _3447) + _3523;
                        float _4913 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3527 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3528 = 1.0 - _3498;
                        float _3538 = (0.5 / (((_3527 * ((_3513 * _3528) + _3498)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3498) * _3513))) * _3527;
                        float _4924 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3549 = (((_3499 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3521 * _3521) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125))) * _3453;
                        _3301 = (_3468 * _3416.x) + _3374;
                        _3302 = (_3468 * _3416.y) + _3375;
                        _3303 = (_3468 * _3416.z) + _3376;
                        _3298 = (_3549 * _3433.x) + _3371;
                        _3299 = (_3549 * _3433.y) + _3372;
                        _3300 = (_3549 * _3433.z) + _3373;
                        if (_3378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3378;
                        }
                    }
                    frontier_phi_66_pred = _3298;
                    frontier_phi_66_pred_1 = _3303;
                    frontier_phi_66_pred_2 = _3302;
                    frontier_phi_66_pred_3 = _3301;
                    frontier_phi_66_pred_4 = _3300;
                    frontier_phi_66_pred_5 = _3299;
                }
                _3074 = frontier_phi_66_pred;
                _3084 = frontier_phi_66_pred_1;
                _3082 = frontier_phi_66_pred_2;
                _3080 = frontier_phi_66_pred_3;
                _3078 = frontier_phi_66_pred_4;
                _3076 = frontier_phi_66_pred_5;
                uint _3233 = _3232 + 1u;
                if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3226 = _3074;
                    _3227 = _3076;
                    _3228 = _3078;
                    _3229 = _3080;
                    _3230 = _3082;
                    _3231 = _3084;
                    _3232 = _3233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
        }
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.z;
        uint _3090 = (_3088 >> 8u) & 15u;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((4294967295u << _3090) & _2972) == 0u)
        {
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
        }
        else
        {
            float _3219 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
            float _3220 = _3219 * _2926;
            float _3221 = _3219 * _2927;
            float _3222 = _3219 * _2928;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3090 < ((_3088 >> 12u) & 15u))
            {
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3354 = _3073;
                float _3355 = _3075;
                float _3356 = _3077;
                float _3357 = _3079;
                float _3358 = _3081;
                float _3359 = _3083;
                uint _3360 = _3090;
                uint _3369;
                bool _3370;
                for (;;)
                {
                    _3369 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                    _3370 = _3369 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3370)
                    {
                        frontier_phi_77_pred = _3359;
                        frontier_phi_77_pred_1 = _3358;
                        frontier_phi_77_pred_2 = _3357;
                        frontier_phi_77_pred_3 = _3356;
                        frontier_phi_77_pred_4 = _3355;
                        frontier_phi_77_pred_5 = _3354;
                    }
                    else
                    {
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        uint _3582 = _3369;
                        uint _3583;
                        vec4 _3608;
                        float _3609;
                        vec4 _3624;
                        vec3 _3636;
                        vec4 _3651;
                        vec4 _3666;
                        float _3712;
                        bool _3713;
                        for (;;)
                        {
                            uint _3593 = ((_3360 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3582));
                            _3583 = (_3582 + 4294967295u) & _3582;
                            uint _3595 = _3593 * 40u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3609 = _3608.w;
                            uint _3611 = (_3593 * 40u) + 4u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3593 * 40u) + 8u;
                            _3636 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x));
                            uint _3638 = (_3593 * 40u) + 16u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3593 * 40u) + 20u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3593 * 40u) + 24u;
                            vec4 _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3687 = (_3593 * 40u) + 28u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            _3712 = fma(_2928, _3700.z, fma(_2927, _3700.y, _3700.x * _2926)) + _3700.w;
                            _3713 = !((fma(_2928, _3681.z, fma(_2927, _3681.y, _3681.x * _2926)) + _3681.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3713)
                            {
                                float _3740 = _3608.x - _2926;
                                float _3741 = _3608.y - _2927;
                                float _3742 = _3608.z - _2928;
                                float _3743 = dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742));
                                float _3746 = inversesqrt(_3743);
                                float _3747 = _3746 * _3740;
                                float _3748 = _3746 * _3741;
                                float _3749 = _3746 * _3742;
                                float _3753 = 1.0 - (_3743 / (_3609 * _3609));
                                float _4935 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3758 = sqrt(_3743) * _3624.w;
                                float _3760 = 1.39999997615814208984375 / (_3758 + 1.39999997615814208984375);
                                float _3761 = _3760 * _3760;
                                float _3764 = ((1.0 - _3761) * dot(vec3(_3747, _3748, _3749), vec3(_1165, _1168, _1171))) + _3761;
                                float _3767 = _3758 * _3758;
                                float _3771 = (fma(_2928, _3651.z, fma(_2927, _3651.y, _3651.x * _2926)) + _3651.w) / _3712;
                                float _3772 = (fma(_2928, _3666.z, fma(_2927, _3666.y, _3666.x * _2926)) + _3666.w) / _3712;
                                float _3776 = 1.0 - dot(vec2(_3771, _3772), vec2(_3771, _3772));
                                float _4951 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3778 = _3777 * (((isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0))) * _3754) / ((_3767 * 0.699999988079071044921875) + 1.0));
                                float _3790 = exp2(log2(1.0 / ((_3767 * 3.5) + 5.0)) * 0.25);
                                float _3791 = 1.0 - _1240;
                                float _3798 = sqrt(1.0 - ((1.0 - (_3791 * _3791)) * (1.0 - (_3790 * _3790))));
                                float _3799 = _3798 * _3798;
                                float _3800 = _3799 * _3799;
                                float _3801 = _3747 - _3220;
                                float _3802 = _3748 - _3221;
                                float _3803 = _3749 - _3222;
                                float _3807 = inversesqrt(dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803)));
                                float _3811 = dot(vec3(_1165, _1168, _1171), vec3((-0.0) - _3220, (-0.0) - _3221, (-0.0) - _3222));
                                float _4962 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3815 = dot(vec3(_1165, _1168, _1171), vec3(_3807 * _3801, _3807 * _3802, _3807 * _3803));
                                float _4973 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3822 = ((_3818 * _3818) * (_3800 + (-1.0))) + 1.0;
                                float _3823 = _3760 * _3799;
                                float _3824 = _3823 * _3823;
                                float _3830 = ((1.0 - _3824) * dot(vec3(_1165, _1168, _1171), vec3(_3747, _3748, _3749))) + _3824;
                                float _4984 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3832 = 1.0 - _3799;
                                float _3842 = (0.5 / (((_3831 * ((_3814 * _3832) + _3799)) + 9.9999999392252902907785028219223e-09) + (((_3831 * _3832) + _3799) * _3814))) * _3831;
                                float _4995 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3852 = (_3777 * _3754) * (((_3800 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3822 * _3822) * ((_3767 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3778 * _3624.y;
                                frontier_phi_83_pred_1 = _3778 * _3624.x;
                                frontier_phi_83_pred_2 = _3852 * _3636.z;
                                frontier_phi_83_pred_3 = _3852 * _3636.y;
                                frontier_phi_83_pred_4 = _3852 * _3636.x;
                                frontier_phi_83_pred_5 = _3778 * _3624.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3860 = frontier_phi_83_pred;
                            _3859 = frontier_phi_83_pred_1;
                            _3858 = frontier_phi_83_pred_2;
                            _3857 = frontier_phi_83_pred_3;
                            _3856 = frontier_phi_83_pred_4;
                            _3861 = frontier_phi_83_pred_5;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            if (_3583 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3583;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3568;
                        frontier_phi_77_pred_1 = _3567;
                        frontier_phi_77_pred_2 = _3566;
                        frontier_phi_77_pred_3 = _3565;
                        frontier_phi_77_pred_4 = _3564;
                        frontier_phi_77_pred_5 = _3563;
                    }
                    _3205 = frontier_phi_77_pred;
                    _3203 = frontier_phi_77_pred_1;
                    _3201 = frontier_phi_77_pred_2;
                    _3199 = frontier_phi_77_pred_3;
                    _3197 = frontier_phi_77_pred_4;
                    _3195 = frontier_phi_77_pred_5;
                    uint _3361 = _3360 + 1u;
                    if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3354 = _3195;
                        _3355 = _3197;
                        _3356 = _3199;
                        _3357 = _3201;
                        _3358 = _3203;
                        _3359 = _3205;
                        _3360 = _3361;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3199;
                frontier_phi_58_59_ladder_1 = _3205;
                frontier_phi_58_59_ladder_2 = _3203;
                frontier_phi_58_59_ladder_3 = _3201;
                frontier_phi_58_59_ladder_4 = _3197;
                frontier_phi_58_59_ladder_5 = _3195;
            }
            else
            {
                frontier_phi_58_59_ladder = _3077;
                frontier_phi_58_59_ladder_1 = _3083;
                frontier_phi_58_59_ladder_2 = _3081;
                frontier_phi_58_59_ladder_3 = _3079;
                frontier_phi_58_59_ladder_4 = _3075;
                frontier_phi_58_59_ladder_5 = _3073;
            }
            _3194 = frontier_phi_58_59_ladder_5;
            _3196 = frontier_phi_58_59_ladder_4;
            _3198 = frontier_phi_58_59_ladder;
            _3200 = frontier_phi_58_59_ladder_3;
            _3202 = frontier_phi_58_59_ladder_2;
            _3204 = frontier_phi_58_59_ladder_1;
        }
        float _3209 = isnan(1.0) ? _1224 : (isnan(_1224) ? 1.0 : min(_1224, 1.0));
        _2985 = (_3209 * _3200) + _2421;
        _2987 = (_3209 * _3202) + _2423;
        _2989 = (_3209 * _3204) + _2425;
        _2991 = ((_3194 * _1208) * _3209) + _2766;
        _2993 = ((_3196 * _1210) * _3209) + _2768;
        _2995 = ((_3198 * _1211) * _3209) + _2770;
    }
    else
    {
        _2985 = _2421;
        _2987 = _2423;
        _2989 = _2425;
        _2991 = _2766;
        _2993 = _2768;
        _2995 = _2770;
    }
    float _5011 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _5022 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _5033 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _3012 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2985 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1224))) + ((_2991 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2061)) * cbPerFrame._m0[3u].x);
    float _3013 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2987 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1224))) + ((_2993 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2061)) * cbPerFrame._m0[3u].x);
    float _3014 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2989 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1224))) + ((_2995 + ((isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0))) * _2061)) * cbPerFrame._m0[3u].x);
    uint _3015 = _292 + 6u;
    float _3023 = _1146 / cbSceneParam._m0[86u].x;
    float _3024 = _1147 / cbSceneParam._m0[86u].y;
    vec4 _3038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, (log2((isnan(cbSceneParam._m0[77u].w) ? _1069 : (isnan(_1069) ? cbSceneParam._m0[77u].w : min(_1069, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3040 = _3038.x;
    float _3041 = _3038.y;
    float _3042 = _3038.z;
    float _3043 = _3038.w;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_1069 > cbSceneParam._m0[78u].w)
    {
        float _3098 = isnan(_1069) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1069 : min(cbSceneParam._m0[80u].w, _1069));
        float _3099 = _3098 / _1069;
        float _3110 = _3099 * _1119;
        float _3111 = _1120 * _3099;
        float _3112 = (-0.0) - _3111;
        float _3114 = _3099 * _1121;
        float _3116 = (cbSceneParam._m0[77u].w * _3112) / _3098;
        float _3117 = _3116 + cbSceneParam._m0[79u].w;
        float _3118 = cbSceneParam._m0[79u].w - _3111;
        float _3124 = sqrt(((_3110 * _3110) + (_3111 * _3111)) + (_3114 * _3114));
        float _3127 = (1.0 - (cbSceneParam._m0[77u].w / _3098)) * _3124;
        float _3132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3311;
        if (abs((_3112 - _3116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3311 = ((((_3117 > 0.0) ? exp2(_3132 * _3117) : (2.0 - exp2(_3134 * _3117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3127;
        }
        else
        {
            float _3255 = 1.0 / cbSceneParam._m0[80u].x;
            float _3256 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : max(_3117, _3118));
            float _3257 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : min(_3117, _3118));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            _3311 = ((abs(_3124 / _3112) * cbSceneParam._m0[80u].y) * ((((_3266 - _3267) * 2.0) - ((exp2(_3132 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0)))) - exp2(_3132 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))))) * _3255)) - ((exp2(_3134 * _3266) - exp2(_3134 * _3267)) * _3255))) + (_3127 * cbSceneParam._m0[80u].z);
        }
        vec4 _3313 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, 1.0), 0.0);
        float _3322 = exp2((_3311 * (-1.44269502162933349609375)) * (1.0 - _3313.w));
        float _3323 = log2(_3322);
        float _3339 = log2(_3043);
        _3136 = (exp2(_3339 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].x)) * _3313.x) / cbSceneParam._m0[78u].x)) + _3040;
        _3138 = (exp2(_3339 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].y)) * _3313.y) / cbSceneParam._m0[78u].y)) + _3041;
        _3140 = (exp2(_3339 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].z)) * _3313.z) / cbSceneParam._m0[78u].z)) + _3042;
        _3142 = _3322 * _3043;
    }
    else
    {
        _3136 = _3040;
        _3138 = _3041;
        _3140 = _3042;
        _3142 = _3043;
    }
    bool _3349;
    vec4 _3152;
    vec4 _3174;
    float _3176;
    float _3180;
    float _3181;
    float _3182;
    float _3183;
    bool _3193;
    for (;;)
    {
        _3152 = cbMatDynParam._m0[0u];
        float _3154 = roundEven(_3152.y);
        bool _3155 = _3154 == 3.0;
        float _3156 = log2(_3142);
        float _3163 = exp2(_3156 * cbSceneParam._m0[78u].x) * _3012;
        float _3164 = exp2(_3156 * cbSceneParam._m0[78u].y) * _3013;
        float _3165 = exp2(_3156 * cbSceneParam._m0[78u].z) * _3014;
        float _3172 = _1135 + (-0.5);
        _3174 = cbMtdParam._m0[1u];
        _3176 = _3174.y * _3172;
        float _3179 = (_3154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3180 = _3179 * (_3155 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3136)));
        _3181 = _3179 * (_3155 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3138)));
        _3182 = _3179 * (_3155 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3140)));
        _3183 = _3172 * 0.999000012874603271484375;
        _3193 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3193)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3183) < 0.5)
            {
                _3349 = true;
                break;
            }
        }
        uint _3290 = _1184 + uint(_3152.w);
        if ((cbInstanceData._m0[_3290].w < 1.0) && ((cbInstanceData._m0[_3290].w + _3183) < 0.5))
        {
            _3349 = true;
            break;
        }
        if ((_3176 + 1.0) < _3174.x)
        {
            _3349 = true;
            break;
        }
        _3349 = false;
        break;
    }
    float _3554;
    if (_3349)
    {
        discard_state = true;
        _3554 = 0.0;
    }
    else
    {
        _3554 = cbInstanceData._m0[_3015].w;
    }
    SV_Target.x = _3180;
    SV_Target.y = _3181;
    SV_Target.z = _3182;
    SV_Target.w = _3554;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3015].w;
    discard_exit();
}


