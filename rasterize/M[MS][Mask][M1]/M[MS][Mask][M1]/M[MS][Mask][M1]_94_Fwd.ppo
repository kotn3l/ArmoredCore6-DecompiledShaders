#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1476;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3800 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3811 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3822 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[23u].w) + _451) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3833 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _476 = (_469 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _477 = (_469 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _478 = (_469 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _517 = _515.x;
    float _527 = dot(vec4(_517, _515.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _541 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_517 - _527) * cbMtdParam._m0[23u].w) + _527) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3844 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _552 = (_334.x * cbMtdParam._m0[9u].x) * ((_542 * ((_495.x * cbMtdParam._m0[13u].x) - _476)) + _476);
    float _553 = (_334.y * cbMtdParam._m0[9u].y) * ((_542 * ((_495.y * cbMtdParam._m0[13u].y) - _477)) + _477);
    float _554 = (_334.z * cbMtdParam._m0[9u].z) * ((_542 * ((_495.z * cbMtdParam._m0[13u].z) - _478)) + _478);
    float _558 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _552;
    float _561 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _553;
    float _564 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _554;
    float _572 = (((_552 - _558) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _558) * 4.55000019073486328125;
    float _574 = (((_553 - _561) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _561) * 4.55000019073486328125;
    float _576 = (((_554 - _564) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _564) * 4.55000019073486328125;
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _660 = _656.z;
    float _667 = ((_639.x - _658) * _469) + _658;
    float _668 = ((_639.y - _659) * _469) + _659;
    float _669 = ((_639.z - _660) * _469) + _660;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _694 = ((_681.z - _669) * _542) + _669;
    float _697 = ((((_681.x - _667) * _542) + _667) * 2.0) + (-1.0);
    float _698 = ((((_681.y - _668) * _542) + _668) * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3855 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _734 = (_697 + ((((_614.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _735 = (_698 + ((((_614.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _738 = fma(_704, _245, fma(_735, _252, _734 * _238));
    float _741 = fma(_704, _246, fma(_735, _253, _734 * _239));
    float _744 = fma(_704, _247, fma(_735, _254, _734 * _240));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _787 = (cbMtdParam._m0[19u].x + dot(vec4(_748 * _738, _748 * _741, _748 * _744, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_777 - _778) * cbMtdParam._m0[24u].z) + _778) * cbMtdParam._m0[21u].z);
    float _3866 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _795 = (_788 * ((_595.x * cbMtdParam._m0[18u].x) - _572)) + _572;
    float _796 = (_788 * ((_595.y * cbMtdParam._m0[18u].y) - _574)) + _574;
    float _797 = (_788 * ((_595.z * cbMtdParam._m0[18u].z) - _576)) + _576;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _825 = _823.x;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _825) * _469) + _825;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _842) * _542) + _842;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _859) * cbMtdParam._m0[19u].z) + _859;
    float _865 = _863 - (_863 * _788);
    float _870 = (((_614.z - _694) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _694;
    float _874 = ((_722.z - _870) * cbMtdParam._m0[19u].w) + _870;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _894 = (_887.x * 2.0) + (-1.0);
    float _895 = (_887.y * 2.0) + (-1.0);
    float _896 = dot(vec2(_894, _895), vec2(_894, _895));
    float _3877 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _904 = ((_887.z - _874) * _788) + _874;
    float _914 = ((sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) - _704) * _788) + _704;
    float _917 = (((_894 - _734) * _788) + _734) + (cbMtdParam._m0[21u].x * _734);
    float _918 = (((_895 - _735) * _788) + _735) + (cbMtdParam._m0[21u].x * _735);
    float _922 = cbMtdParam._m0[22u].x + _722.w;
    float _925 = fma(_914, _245, fma(_918, _252, _917 * _238));
    float _928 = fma(_914, _246, fma(_918, _253, _917 * _239));
    float _931 = fma(_914, _247, fma(_918, _254, _917 * _240));
    float _935 = inversesqrt(dot(vec3(_925, _928, _931), vec3(_925, _928, _931)));
    float _936 = _935 * _925;
    float _937 = _935 * _928;
    float _938 = _935 * _931;
    float _3888 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _939 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _3910 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _3921 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3932 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _3943 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _944 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _958 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1009 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _999);
    float _1010 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _999);
    float _1011 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _999);
    float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
    float _1016 = _1009 * _1015;
    float _1017 = _1010 * _1015;
    float _1018 = _1011 * _1015;
    float _1024 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1025 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1043 = fma(_938, cbSceneParam._m0[5u].z, fma(_937, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _936));
    float _1046 = fma(_938, cbSceneParam._m0[6u].z, fma(_937, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _936));
    float _1049 = fma(_938, cbSceneParam._m0[7u].z, fma(_937, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _936));
    uint _1063 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1069 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_1063].x;
    float _1070 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_1063].y;
    float _1071 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_1063].z;
    float _3954 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1075 = 1.0 - _944;
    float _1076 = _1072 * _1075;
    float _1077 = _1073 * _1075;
    float _1078 = _1074 * _1075;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _944;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _944;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _944;
    float _1086 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    vec4 _1098 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1024, cbSceneParam._m0[86u].y * _1025));
    float _1102 = ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * TEXCOORD_5.w) * _1098.x;
    float _1103 = dot(vec3(_936, _937, _938), vec3(_1016, _1017, _1018));
    float _1106 = _1103 * 2.0;
    float _1110 = (_1106 * _936) - _1016;
    float _1111 = (_1106 * _937) - _1017;
    float _1112 = (_1106 * _938) - _1018;
    float _1116 = abs(dot(vec3(_1016, _1017, _1018), vec3(_936, _937, _938)));
    float _3987 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1118 = sqrt(_939);
    float _1131 = exp2((_1118 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1118 * 3.0));
    float _1137 = (1.0 - _1131) * ((_1118 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1138 = _1131 * _1118;
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1204 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1208 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1233 = _1166 + _936;
        float _1234 = _1170 + _937;
        float _1235 = _1174 + _938;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_936, _937, _938), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4035 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_936, _937, _938), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4068 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_936, _937, _938), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4101 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1514 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1518 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1522 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1545 = _1166 + _936;
        float _1546 = _1170 + _937;
        float _1547 = _1174 + _938;
        float _1557 = fma(_1547, cbModelParam._m0[30u].z, fma(_1546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1545)) - _1514;
        float _1558 = fma(_1547, cbModelParam._m0[31u].z, fma(_1546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1545)) - _1518;
        float _1559 = fma(_1547, cbModelParam._m0[32u].z, fma(_1546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1545)) - _1522;
        float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
        float _1576 = ((_1563 * _1557) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1514 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1563 * _1558) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1518 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1563 * _1559) / cbModelParam._m0[35u].z) + ((((((_1522 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        float _1613 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1580.x + (-0.5));
        float _1615 = _1613 * (_1580.y + (-0.5));
        float _1616 = _1613 * (_1580.z + (-0.5));
        float _1623 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1587.x + (-0.5));
        float _1625 = _1623 * (_1587.y + (-0.5));
        float _1626 = _1623 * (_1587.z + (-0.5));
        float _1633 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1594.x + (-0.5));
        float _1635 = _1633 * (_1594.y + (-0.5));
        float _1636 = _1633 * (_1594.z + (-0.5));
        float _1643 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1601.x + (-0.5));
        float _1645 = _1643 * (_1601.y + (-0.5));
        float _1646 = _1643 * (_1601.z + (-0.5));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = _1614 * 0.5;
        float _1651 = _1624 * 0.5;
        float _1652 = _1634 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_936, _937, _938), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4164 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1677 + 1.0))) + _1682) * _1647;
        float _1692 = _1615 * 0.5;
        float _1693 = _1625 * 0.5;
        float _1694 = _1635 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_936, _937, _938), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4197 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1719 + 1.0))) + _1724) * _1648;
        float _1734 = _1616 * 0.5;
        float _1735 = _1626 * 0.5;
        float _1736 = _1636 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_936, _937, _938), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4230 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1761 + 1.0))) + _1766) * _1649;
        _1783 = _1616;
        _1784 = _1615;
        _1785 = _1614;
        _1786 = _1626;
        _1787 = _1625;
        _1788 = _1624;
        _1789 = _1636;
        _1790 = _1635;
        _1791 = _1634;
        _1792 = _1649;
        _1793 = _1648;
        _1794 = _1647;
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
    }
    else
    {
        _1783 = _1476;
        _1784 = _1476;
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = _1476;
        _1795 = 0.0;
        _1796 = 0.0;
        _1797 = 0.0;
    }
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1488)) + _1488;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1489)) + _1489;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1490)) + _1490;
    float _1830 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1807));
    float _1851 = _1110 * 0.5;
    float _1852 = _1111 * 0.5;
    float _1853 = _1112 * 0.5;
    float _1854 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1857 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1860 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1894;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1867 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1871 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1875 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1882 = dot(vec4(cbModelParam._m0[39u]), vec4(_1851, _1852, _1853, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1905;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1896 = dot(vec4(cbModelParam._m0[40u]), vec4(_1851, _1852, _1853, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1909 = (_1905 * cbModelParam._m0[1u].x) + (_1894 * (1.0 - cbModelParam._m0[1u].x));
    float _1919 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _939);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1919 : min(cbModelParam._m0[25u].z, _1919));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1112, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110));
        float _1981 = fma(_1112, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110));
        float _1984 = fma(_1112, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2012 = frontier_phi_14_12_ladder;
        }
        float _2214;
        if (_1981 > 0.0)
        {
            _2214 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2214 = frontier_phi_23_19_ladder;
        }
        float _2468;
        if (_1984 > 0.0)
        {
            _2468 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2468 = frontier_phi_35_30_ladder;
        }
        float _2470 = isnan(_2214) ? _2012 : (isnan(_2012) ? _2214 : min(_2012, _2214));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1978) + _1967;
        float _2476 = (_2471 * _1981) + _1971;
        float _2477 = (_2471 * _1984) + _1975;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2478;
        float _2482 = _2478 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 > _2482) || ((_2476 < _2480) || ((_2475 < _2480) || (_2475 > _2482))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2477, cbModelParam._m0[9u].z, fma(_2476, cbModelParam._m0[9u].y, _2475 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2477, cbModelParam._m0[10u].z, fma(_2476, cbModelParam._m0[10u].y, _2475 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2477, cbModelParam._m0[11u].z, fma(_2476, cbModelParam._m0[11u].y, _2475 * cbModelParam._m0[11u].x))), _1920);
            frontier_phi_13_35_ladder = _2605.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2605.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2605.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_13_35_ladder_2;
        _2002 = frontier_phi_13_35_ladder_1;
        _2004 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1110, _1111, _1112), _1920);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _939);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2062 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2066 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2070 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2073 = fma(_1112, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110));
        float _2076 = fma(_1112, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110));
        float _2079 = fma(_1112, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110));
        float _2219;
        if (_2073 > 0.0)
        {
            _2219 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2219 = frontier_phi_25_21_ladder;
        }
        float _2495;
        if (_2076 > 0.0)
        {
            _2495 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2495 = frontier_phi_37_32_ladder;
        }
        float _2708;
        if (_2079 > 0.0)
        {
            _2708 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2708 = frontier_phi_46_43_ladder;
        }
        float _2710 = isnan(_2495) ? _2219 : (isnan(_2219) ? _2495 : min(_2219, _2495));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _2073) + _2062;
        float _2716 = (_2711 * _2076) + _2066;
        float _2717 = (_2711 * _2079) + _2070;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_22_46_ladder = _2916.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2916.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2916.x * cbModelParam._m0[1u].z;
        }
        _2098 = frontier_phi_22_46_ladder_2;
        _2100 = frontier_phi_22_46_ladder_1;
        _2102 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1110, _1111, _1112), _2009);
        _2098 = _2082.x * cbModelParam._m0[1u].z;
        _2100 = _2082.y * cbModelParam._m0[1u].z;
        _2102 = _2082.z * cbModelParam._m0[1u].z;
    }
    float _2115 = (((_1137 * _1086) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2098 - _2000)) + _2000);
    float _2117 = (((_1137 * _1088) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2119 = (((_1137 * _1089) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2122 = fma(_2119, cbSceneParam._m0[89u].z, fma(_2117, cbSceneParam._m0[89u].y, _2115 * cbSceneParam._m0[89u].x));
    float _2125 = fma(_2119, cbSceneParam._m0[90u].z, fma(_2117, cbSceneParam._m0[90u].y, _2115 * cbSceneParam._m0[90u].x));
    float _2128 = fma(_2119, cbSceneParam._m0[91u].z, fma(_2117, cbSceneParam._m0[91u].y, _2115 * cbSceneParam._m0[91u].x));
    uvec4 _2138 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2140 = _2138.x * 14u;
    uint _2141 = _2140 + 13u;
    float _2148 = _1102 + (-1.0);
    float _2153 = (cbLight._m0[_2141].x * _2148) + 1.0;
    float _2154 = (cbLight._m0[_2141].y * _2148) + 1.0;
    float _2155 = (cbLight._m0[_2141].z * _2148) + 1.0;
    float _2156 = (cbLight._m0[_2141].w * _2148) + 1.0;
    uint _2157 = _2140 + 5u;
    float _2163 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2167 = _2140 + 4u;
    float _2173 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2177 = _2140 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_936, _937, _938));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_936, _937, _938));
    float _4366 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4377 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2157].x * _2163) * _2198) + ((cbLight._m0[_2167].x * _2173) * _2196);
    float _2206 = ((_2163 * cbLight._m0[_2157].y) * _2198) + ((_2173 * cbLight._m0[_2167].y) * _2196);
    float _2207 = ((_2163 * cbLight._m0[_2157].z) * _2198) + ((_2173 * cbLight._m0[_2167].z) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2140 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2213)
    {
        _2224 = _2205;
        _2226 = _2206;
        _2228 = _2207;
    }
    else
    {
        uint _2232 = _2140 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2140 + 2u].xyz), vec3(_936, _937, _938)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4388 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2251 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2205;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2206;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2207;
    }
    bool _2231 = _2211.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2231)
    {
        _2269 = _2224;
        _2271 = _2226;
        _2273 = _2228;
    }
    else
    {
        uint _2439 = _2140 + 7u;
        float _2455 = (dot(vec3(cbLight._m0[_2140 + 3u].xyz), vec3(_936, _937, _938)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4404 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2458 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2269 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2224;
        _2271 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2226;
        _2273 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2228;
    }
    uint _2276 = _2140 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _939) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2140].x + _1016;
    float _2292 = cbLight._m0[_2140].y + _1017;
    float _2293 = cbLight._m0[_2140].z + _1018;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2140].xyz));
    float _4420 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2305 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2306 = dot(vec3(_936, _937, _938), vec3(_2298, _2299, _2300));
    float _4442 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2298, _2299, _2300));
    float _4453 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2327 = 0.959999978542327880859375 - _1083;
    float _2329 = 0.959999978542327880859375 - _1084;
    float _2330 = 0.959999978542327880859375 - _1085;
    float _2337 = 1.0 - _2290;
    float _2348 = (0.5 / (((_2305 * ((_2304 * _2337) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2337) + _2290) * _2304))) * _2304;
    float _4464 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2361 = _2140 + 9u;
    float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _939) * 0.949999988079071044921875);
    float _2373 = _2372 * _2372;
    float _2374 = cbLight._m0[_2177].x + _1016;
    float _2375 = cbLight._m0[_2177].y + _1017;
    float _2376 = cbLight._m0[_2177].z + _1018;
    float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
    float _2381 = _2380 * _2374;
    float _2382 = _2380 * _2375;
    float _2383 = _2380 * _2376;
    float _2384 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2177].xyz));
    float _4475 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2388 = dot(vec3(_936, _937, _938), vec3(_2381, _2382, _2383));
    float _4486 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2381, _2382, _2383));
    float _4497 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2373 * _2373;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2414 = 1.0 - _2373;
    float _2424 = (0.5 / (((_2305 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2414) + _2373) * _2387))) * _2387;
    float _4508 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    float _2436 = (((((_2407 * _2327) + _1086) * cbLight._m0[_2361].x) * _2426) * _2163) + (((((_2326 * _2327) + _1086) * cbLight._m0[_2276].x) * _2350) * _2173);
    float _2437 = (((((_2407 * _2329) + _1088) * cbLight._m0[_2361].y) * _2426) * _2163) + (((((_2326 * _2329) + _1088) * cbLight._m0[_2276].y) * _2350) * _2173);
    float _2438 = (((((_2407 * _2330) + _1089) * cbLight._m0[_2361].z) * _2426) * _2163) + (((((_2326 * _2330) + _1089) * cbLight._m0[_2276].z) * _2350) * _2173);
    float _2500;
    float _2502;
    float _2504;
    if (_2213)
    {
        _2500 = _2436;
        _2502 = _2437;
        _2504 = _2438;
    }
    else
    {
        uint _2506 = _2140 + 2u;
        uint _2510 = _2140 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _939) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _1016;
        float _2527 = cbLight._m0[_2506].y + _1017;
        float _2528 = cbLight._m0[_2506].z + _1018;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2506].xyz));
        float _4519 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2540 = dot(vec3(_936, _937, _938), vec3(_2533, _2534, _2535));
        float _4530 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4541 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2305 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2566) + _2525) * _2539))) * _2539;
        float _4552 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2500 = (((((_2559 * _2327) + _1086) * cbLight._m0[_2510].x) * _2578) * _2579) + _2436;
        _2502 = (((((_2559 * _2329) + _1088) * cbLight._m0[_2510].y) * _2578) * _2579) + _2437;
        _2504 = (((((_2559 * _2330) + _1089) * cbLight._m0[_2510].z) * _2578) * _2579) + _2438;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2231)
    {
        _2614 = _2500;
        _2616 = _2502;
        _2618 = _2504;
    }
    else
    {
        uint _2625 = _2140 + 3u;
        uint _2629 = _2140 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _939) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _1016;
        float _2646 = cbLight._m0[_2625].y + _1017;
        float _2647 = cbLight._m0[_2625].z + _1018;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2625].xyz));
        float _4568 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2659 = dot(vec3(_936, _937, _938), vec3(_2652, _2653, _2654));
        float _4579 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4590 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2305 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2685) + _2644) * _2658))) * _2658;
        float _4601 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2614 = (((((_2678 * _2327) + _1086) * cbLight._m0[_2629].x) * _2697) * _2698) + _2500;
        _2616 = (((((_2678 * _2329) + _1088) * cbLight._m0[_2629].y) * _2697) * _2698) + _2502;
        _2618 = (((((_2678 * _2330) + _1089) * cbLight._m0[_2629].z) * _2697) * _2698) + _2504;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2138.y == 0u)
    {
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2773;
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2773;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2773;
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.x;
        uint _2800 = uint((float(_2788.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1025) / _2789))) + floor(float(uint(cbSceneParam._m0[85u].x * _1024) / _2789)));
        float _2810 = (log2(_2776 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2811 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        uint _2814 = uint(isnan(14.0) ? _2811 : (isnan(_2811) ? 14.0 : min(_2811, 14.0)));
        uvec4 _2819 = texelFetch(g_lightClusterGridBuffer, int(((_2814 << 2u) + (_2800 << 6u)) >> 2u));
        uint _2820 = _2819.x;
        uint _2821 = _2788.z;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((((1u << ((_2821 >> 4u) & 15u)) + 4294967295u) & _2820) == 0u) || ((_2821 & 240u) == 0u))
        {
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
        }
        else
        {
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            uint _3072 = 0u;
            uint _3081;
            bool _3082;
            for (;;)
            {
                _3081 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                _3082 = _3081 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3082)
                {
                    frontier_phi_61_pred = _3066;
                    frontier_phi_61_pred_1 = _3071;
                    frontier_phi_61_pred_2 = _3070;
                    frontier_phi_61_pred_3 = _3069;
                    frontier_phi_61_pred_4 = _3068;
                    frontier_phi_61_pred_5 = _3067;
                }
                else
                {
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    uint _3196;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3081;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    for (;;)
                    {
                        uint _3200 = uint(findLSB(_3196)) + (_3072 << 5u);
                        uint _3197 = (_3196 + 4294967295u) & _3196;
                        uint _3202 = _3200 * 48u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3222 = (_3200 * 48u) + 4u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3241 = (_3200 * 48u) + 8u;
                        vec3 _3252 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x));
                        float _3256 = _3216.x - _2774;
                        float _3257 = _3216.y - _2775;
                        float _3258 = _3216.z - _2776;
                        float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                        float _3262 = inversesqrt(_3259);
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3266 = dot(vec3(_1043, _1046, _1049), vec3(_3263, _3264, _3265));
                        float _3271 = 1.0 - (_3259 * _3216.w);
                        float _4627 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3273 = sqrt(_3259) * _3235.w;
                        float _3276 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3266) + _3277;
                        float _3283 = _3273 * _3273;
                        float _3287 = ((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3272) / ((_3283 * 0.699999988079071044921875) + 1.0);
                        float _3291 = (-0.0) - _2774;
                        float _3292 = (-0.0) - _2775;
                        float _3293 = (-0.0) - _2776;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3308 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                        float _3309 = 1.0 - _1118;
                        float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                        float _3317 = _3316 * _3316;
                        float _3318 = _3317 * _3317;
                        float _3319 = _3298 + _3263;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                        float _3329 = dot(vec3(_1043, _1046, _1049), vec3(_3298, _3299, _3300));
                        float _4643 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3333 = dot(vec3(_1043, _1046, _1049), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                        float _4654 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                        float _3341 = _3276 * _3317;
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * _3266) + _3342;
                        float _4665 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3347 = 1.0 - _3317;
                        float _3357 = (0.5 / (((_3346 * ((_3332 * _3347) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3317) * _3332))) * _3346;
                        float _4676 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3368 = (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3340 * _3340) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125))) * _3272;
                        _3125 = (_3287 * _3235.x) + _3193;
                        _3126 = (_3287 * _3235.y) + _3194;
                        _3127 = (_3287 * _3235.z) + _3195;
                        _3122 = (_3368 * _3252.x) + _3190;
                        _3123 = (_3368 * _3252.y) + _3191;
                        _3124 = (_3368 * _3252.z) + _3192;
                        if (_3197 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3197;
                        }
                    }
                    frontier_phi_61_pred = _3122;
                    frontier_phi_61_pred_1 = _3127;
                    frontier_phi_61_pred_2 = _3126;
                    frontier_phi_61_pred_3 = _3125;
                    frontier_phi_61_pred_4 = _3124;
                    frontier_phi_61_pred_5 = _3123;
                }
                _2922 = frontier_phi_61_pred;
                _2932 = frontier_phi_61_pred_1;
                _2930 = frontier_phi_61_pred_2;
                _2928 = frontier_phi_61_pred_3;
                _2926 = frontier_phi_61_pred_4;
                _2924 = frontier_phi_61_pred_5;
                uint _3073 = _3072 + 1u;
                if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3066 = _2922;
                    _3067 = _2924;
                    _3068 = _2926;
                    _3069 = _2928;
                    _3070 = _2930;
                    _3071 = _2932;
                    _3072 = _3073;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
        }
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.z;
        uint _2938 = (_2936 >> 8u) & 15u;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((4294967295u << _2938) & _2820) == 0u)
        {
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
            _3044 = _2931;
        }
        else
        {
            float _3059 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
            float _3060 = _3059 * _2774;
            float _3061 = _3059 * _2775;
            float _3062 = _3059 * _2776;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2938 < ((_2936 >> 12u) & 15u))
            {
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3173 = _2921;
                float _3174 = _2923;
                float _3175 = _2925;
                float _3176 = _2927;
                float _3177 = _2929;
                float _3178 = _2931;
                uint _3179 = _2938;
                uint _3188;
                bool _3189;
                for (;;)
                {
                    _3188 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                    _3189 = _3188 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3189)
                    {
                        frontier_phi_67_pred = _3176;
                        frontier_phi_67_pred_1 = _3177;
                        frontier_phi_67_pred_2 = _3178;
                        frontier_phi_67_pred_3 = _3175;
                        frontier_phi_67_pred_4 = _3174;
                        frontier_phi_67_pred_5 = _3173;
                    }
                    else
                    {
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        uint _3392 = _3188;
                        uint _3393;
                        vec4 _3418;
                        float _3419;
                        vec4 _3434;
                        vec3 _3446;
                        vec4 _3461;
                        vec4 _3476;
                        float _3522;
                        bool _3523;
                        for (;;)
                        {
                            uint _3403 = ((_3179 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3392));
                            _3393 = (_3392 + 4294967295u) & _3392;
                            uint _3405 = _3403 * 40u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3419 = _3418.w;
                            uint _3421 = (_3403 * 40u) + 4u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3403 * 40u) + 8u;
                            _3446 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x));
                            uint _3448 = (_3403 * 40u) + 16u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3403 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3403 * 40u) + 24u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3497 = (_3403 * 40u) + 28u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3522 = fma(_2776, _3510.z, fma(_2775, _3510.y, _3510.x * _2774)) + _3510.w;
                            _3523 = !((fma(_2776, _3491.z, fma(_2775, _3491.y, _3491.x * _2774)) + _3491.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3523)
                            {
                                float _3550 = _3418.x - _2774;
                                float _3551 = _3418.y - _2775;
                                float _3552 = _3418.z - _2776;
                                float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                                float _3556 = inversesqrt(_3553);
                                float _3557 = _3556 * _3550;
                                float _3558 = _3556 * _3551;
                                float _3559 = _3556 * _3552;
                                float _3563 = 1.0 - (_3553 / (_3419 * _3419));
                                float _4687 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3568 = sqrt(_3553) * _3434.w;
                                float _3570 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                                float _3571 = _3570 * _3570;
                                float _3574 = ((1.0 - _3571) * dot(vec3(_3557, _3558, _3559), vec3(_1043, _1046, _1049))) + _3571;
                                float _3577 = _3568 * _3568;
                                float _3581 = (fma(_2776, _3461.z, fma(_2775, _3461.y, _3461.x * _2774)) + _3461.w) / _3522;
                                float _3582 = (fma(_2776, _3476.z, fma(_2775, _3476.y, _3476.x * _2774)) + _3476.w) / _3522;
                                float _3586 = 1.0 - dot(vec2(_3581, _3582), vec2(_3581, _3582));
                                float _4703 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3588 = _3587 * (((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3564) / ((_3577 * 0.699999988079071044921875) + 1.0));
                                float _3600 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                                float _3601 = 1.0 - _1118;
                                float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                                float _3609 = _3608 * _3608;
                                float _3610 = _3609 * _3609;
                                float _3611 = _3557 - _3060;
                                float _3612 = _3558 - _3061;
                                float _3613 = _3559 - _3062;
                                float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                                float _3621 = dot(vec3(_1043, _1046, _1049), vec3((-0.0) - _3060, (-0.0) - _3061, (-0.0) - _3062));
                                float _4714 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3625 = dot(vec3(_1043, _1046, _1049), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                                float _4725 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                                float _3633 = _3570 * _3609;
                                float _3634 = _3633 * _3633;
                                float _3640 = ((1.0 - _3634) * dot(vec3(_1043, _1046, _1049), vec3(_3557, _3558, _3559))) + _3634;
                                float _4736 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3642 = 1.0 - _3609;
                                float _3652 = (0.5 / (((_3641 * ((_3624 * _3642) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3609) * _3624))) * _3641;
                                float _4747 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3662 = (_3587 * _3564) * (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3632 * _3632) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3662 * _3446.x;
                                frontier_phi_73_pred_1 = _3662 * _3446.y;
                                frontier_phi_73_pred_2 = _3588 * _3434.z;
                                frontier_phi_73_pred_3 = _3588 * _3434.y;
                                frontier_phi_73_pred_4 = _3588 * _3434.x;
                                frontier_phi_73_pred_5 = _3662 * _3446.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3666 = frontier_phi_73_pred;
                            _3667 = frontier_phi_73_pred_1;
                            _3671 = frontier_phi_73_pred_2;
                            _3670 = frontier_phi_73_pred_3;
                            _3669 = frontier_phi_73_pred_4;
                            _3668 = frontier_phi_73_pred_5;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            if (_3393 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3393;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3376;
                        frontier_phi_67_pred_1 = _3377;
                        frontier_phi_67_pred_2 = _3378;
                        frontier_phi_67_pred_3 = _3375;
                        frontier_phi_67_pred_4 = _3374;
                        frontier_phi_67_pred_5 = _3373;
                    }
                    _3041 = frontier_phi_67_pred;
                    _3043 = frontier_phi_67_pred_1;
                    _3045 = frontier_phi_67_pred_2;
                    _3039 = frontier_phi_67_pred_3;
                    _3037 = frontier_phi_67_pred_4;
                    _3035 = frontier_phi_67_pred_5;
                    uint _3180 = _3179 + 1u;
                    if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3173 = _3035;
                        _3174 = _3037;
                        _3175 = _3039;
                        _3176 = _3041;
                        _3177 = _3043;
                        _3178 = _3045;
                        _3179 = _3180;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3043;
                frontier_phi_55_56_ladder_1 = _3045;
                frontier_phi_55_56_ladder_2 = _3041;
                frontier_phi_55_56_ladder_3 = _3039;
                frontier_phi_55_56_ladder_4 = _3037;
                frontier_phi_55_56_ladder_5 = _3035;
            }
            else
            {
                frontier_phi_55_56_ladder = _2929;
                frontier_phi_55_56_ladder_1 = _2931;
                frontier_phi_55_56_ladder_2 = _2927;
                frontier_phi_55_56_ladder_3 = _2925;
                frontier_phi_55_56_ladder_4 = _2923;
                frontier_phi_55_56_ladder_5 = _2921;
            }
            _3034 = frontier_phi_55_56_ladder_5;
            _3036 = frontier_phi_55_56_ladder_4;
            _3038 = frontier_phi_55_56_ladder_3;
            _3040 = frontier_phi_55_56_ladder_2;
            _3042 = frontier_phi_55_56_ladder;
            _3044 = frontier_phi_55_56_ladder_1;
        }
        float _3049 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        _2833 = (_3049 * _3040) + _2269;
        _2835 = (_3049 * _3042) + _2271;
        _2837 = (_3049 * _3044) + _2273;
        _2839 = ((_3034 * _1086) * _3049) + _2614;
        _2841 = ((_3036 * _1088) * _3049) + _2616;
        _2843 = ((_3038 * _1089) * _3049) + _2618;
    }
    else
    {
        _2833 = _2269;
        _2835 = _2271;
        _2837 = _2273;
        _2839 = _2614;
        _2841 = _2616;
        _2843 = _2618;
    }
    float _4763 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4774 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4785 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    uint _2863 = _278 + 6u;
    float _2871 = _1024 / cbSceneParam._m0[86u].x;
    float _2872 = _1025 / cbSceneParam._m0[86u].y;
    vec4 _2886 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, (log2((isnan(cbSceneParam._m0[77u].w) ? _958 : (isnan(_958) ? cbSceneParam._m0[77u].w : min(_958, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2888 = _2886.x;
    float _2889 = _2886.y;
    float _2890 = _2886.z;
    float _2891 = _2886.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_958 > cbSceneParam._m0[78u].w)
    {
        float _2946 = isnan(_958) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _958 : min(cbSceneParam._m0[80u].w, _958));
        float _2947 = _2946 / _958;
        float _2958 = _2947 * _1009;
        float _2959 = _1010 * _2947;
        float _2960 = (-0.0) - _2959;
        float _2962 = _2947 * _1011;
        float _2964 = (cbSceneParam._m0[77u].w * _2960) / _2946;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2959;
        float _2972 = sqrt(((_2958 * _2958) + (_2959 * _2959)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2946)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3135;
        if (abs((_2960 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3135 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3095 = 1.0 / cbSceneParam._m0[80u].x;
            float _3096 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3097 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            _3135 = ((abs(_2972 / _2960) * cbSceneParam._m0[80u].y) * ((((_3106 - _3107) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))))) * _3095)) - ((exp2(_2982 * _3106) - exp2(_2982 * _3107)) * _3095))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3137 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, 1.0), 0.0);
        float _3146 = exp2((_3135 * (-1.44269502162933349609375)) * (1.0 - _3137.w));
        float _3147 = log2(_3146);
        float _3163 = log2(_2891);
        _2984 = (exp2(_3163 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].x)) * _3137.x) / cbSceneParam._m0[78u].x)) + _2888;
        _2986 = (exp2(_3163 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].y)) * _3137.y) / cbSceneParam._m0[78u].y)) + _2889;
        _2988 = (exp2(_3163 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].z)) * _3137.z) / cbSceneParam._m0[78u].z)) + _2890;
        _2990 = _3146 * _2891;
    }
    else
    {
        _2984 = _2888;
        _2986 = _2889;
        _2988 = _2890;
        _2990 = _2891;
    }
    float _3002 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3003 = _3002 == 3.0;
    float _3004 = log2(_2990);
    float _3011 = exp2(_3004 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2833 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1102))) + ((_2839 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1909)) * cbPerFrame._m0[3u].x));
    float _3012 = exp2(_3004 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2835 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1102))) + ((_2841 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1909)) * cbPerFrame._m0[3u].x));
    float _3013 = exp2(_3004 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2837 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1102))) + ((_2843 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1909)) * cbPerFrame._m0[3u].x));
    float _3022 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3022 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.y = _3022 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.z = _3022 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.w = cbInstanceData._m0[_2863].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2863].w;
}


