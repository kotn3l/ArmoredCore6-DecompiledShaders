#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1466;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[23u].w) + _417) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3790 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _442 = (_435 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _443 = (_435 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _444 = (_435 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[23u].w) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3801 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _515 = (_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442;
    float _516 = (_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443;
    float _517 = (_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444;
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _555 = _553.x;
    float _565 = dot(vec4(_555, _553.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _577 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _364.z) * 2.0) - ((((_555 - _565) * cbMtdParam._m0[23u].w) + _565) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3812 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _591 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_578 * ((_536.x * cbMtdParam._m0[14u].x) - _515)) + _515);
    float _594 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_578 * ((_536.y * cbMtdParam._m0[14u].y) - _516)) + _516);
    float _597 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_578 * ((_536.z * cbMtdParam._m0[14u].z) - _517)) + _517);
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _636 = _632.z;
    float _643 = ((_615.x - _634) * _435) + _634;
    float _644 = ((_615.y - _635) * _435) + _635;
    float _645 = ((_615.z - _636) * _435) + _636;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _668 = ((_657.x - _643) * _508) + _643;
    float _669 = ((_657.y - _644) * _508) + _644;
    float _670 = ((_657.z - _645) * _508) + _645;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _695 = ((_682.z - _670) * _578) + _670;
    float _698 = ((((_682.x - _668) * _578) + _668) * 2.0) + (-1.0);
    float _700 = ((((_682.y - _669) * _578) + _669) * 2.0) + (-1.0);
    float _701 = dot(vec2(_698, _700), vec2(_698, _700));
    float _3823 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _706 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _747 = _745.x;
    float _748 = 1.0 - _747;
    float _763 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_747 - _748) * cbMtdParam._m0[24u].z) + _748) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3834 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _771 = (_764 * (cbMtdParam._m0[17u].x - _591)) + _591;
    float _772 = (_764 * (cbMtdParam._m0[17u].y - _594)) + _594;
    float _773 = (_764 * (cbMtdParam._m0[17u].z - _597)) + _597;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _801 = _799.x;
    float _818 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _801) * _435) + _801;
    float _835 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _818) * _508) + _818;
    float _853 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _274) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _275) + cbTextureTilingScale._m0[10u].w)).x - _835) * _578) + _835;
    float _857 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _853) * cbMtdParam._m0[19u].z) + _853;
    float _859 = _857 - (_857 * _764);
    float _863 = (cbMtdParam._m0[19u].w * (_720.z - _695)) + _695;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _883 = (_876.x * 2.0) + (-1.0);
    float _884 = (_876.y * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _3845 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _893 = (_764 * (_876.z - _863)) + _863;
    float _896 = (((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _698;
    float _897 = (((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _700;
    float _909 = (((_883 - _896) + (cbMtdParam._m0[21u].x * _896)) * _764) + _896;
    float _910 = (((_884 - _897) + (cbMtdParam._m0[21u].x * _897)) * _764) + _897;
    float _911 = (_764 * (sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _706)) + _706;
    float _913 = cbMtdParam._m0[22u].x + _720.w;
    float _916 = fma(_911, _241 * NORMAL.x, fma(_910, _248 * TANGENT.x, (_234 * _226) * _909));
    float _919 = fma(_911, _241 * NORMAL.y, fma(_910, _248 * TANGENT.y, (_234 * _227) * _909));
    float _922 = fma(_911, _241 * NORMAL.z, fma(_910, _248 * TANGENT.z, (_234 * _228) * _909));
    float _926 = inversesqrt(dot(vec3(_916, _919, _922), vec3(_916, _919, _922)));
    float _927 = _926 * _916;
    float _928 = _926 * _919;
    float _929 = _926 * _922;
    float _3856 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _930 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _3878 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3889 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _3900 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _3911 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _935 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _949 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _999 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _989);
    float _1000 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _989);
    float _1001 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _989);
    float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
    float _1006 = _999 * _1005;
    float _1007 = _1000 * _1005;
    float _1008 = _1001 * _1005;
    float _1014 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1015 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1033 = fma(_929, cbSceneParam._m0[5u].z, fma(_928, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _927));
    float _1036 = fma(_929, cbSceneParam._m0[6u].z, fma(_928, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _927));
    float _1039 = fma(_929, cbSceneParam._m0[7u].z, fma(_928, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _927));
    uint _1053 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1059 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_1053].x;
    float _1060 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_1053].y;
    float _1061 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1053].z;
    float _3922 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1065 = 1.0 - _935;
    float _1066 = _1062 * _1065;
    float _1067 = _1063 * _1065;
    float _1068 = _1064 * _1065;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _935;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _935;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _935;
    float _1076 = _1073 + 0.039999999105930328369140625;
    float _1078 = _1074 + 0.039999999105930328369140625;
    float _1079 = _1075 + 0.039999999105930328369140625;
    vec4 _1088 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1014, cbSceneParam._m0[86u].y * _1015));
    float _1092 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _1088.x;
    float _1093 = dot(vec3(_927, _928, _929), vec3(_1006, _1007, _1008));
    float _1096 = _1093 * 2.0;
    float _1100 = (_1096 * _927) - _1006;
    float _1101 = (_1096 * _928) - _1007;
    float _1102 = (_1096 * _929) - _1008;
    float _1106 = abs(dot(vec3(_1006, _1007, _1008), vec3(_927, _928, _929)));
    float _3955 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1108 = sqrt(_930);
    float _1121 = exp2((_1108 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1108 * 3.0));
    float _1127 = (1.0 - _1121) * ((_1108 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1128 = _1121 * _1108;
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1465;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1190 = fma(_1164, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156));
        float _1194 = fma(_1164, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156));
        float _1198 = fma(_1164, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156));
        float _1223 = _1156 + _927;
        float _1224 = _1160 + _928;
        float _1225 = _1164 + _929;
        float _1235 = fma(_1225, cbModelParam._m0[26u].z, fma(_1224, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1223)) - _1190;
        float _1236 = fma(_1225, cbModelParam._m0[27u].z, fma(_1224, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1223)) - _1194;
        float _1237 = fma(_1225, cbModelParam._m0[28u].z, fma(_1224, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1223)) - _1198;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1190 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1194 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[34u].z) + ((((((_1198 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1293 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1259.x + (-0.5));
        float _1295 = _1293 * (_1259.y + (-0.5));
        float _1296 = _1293 * (_1259.z + (-0.5));
        float _1303 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1266.x + (-0.5));
        float _1305 = _1303 * (_1266.y + (-0.5));
        float _1306 = _1303 * (_1266.z + (-0.5));
        float _1313 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1273.x + (-0.5));
        float _1315 = _1313 * (_1273.y + (-0.5));
        float _1316 = _1313 * (_1273.z + (-0.5));
        float _1323 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1280.x + (-0.5));
        float _1325 = _1323 * (_1280.y + (-0.5));
        float _1326 = _1323 * (_1280.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1347 = (dot(vec3(_927, _928, _929), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1357 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4003 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1359 + 1.0))) + _1364) * _1327;
        float _1374 = _1295 * 0.5;
        float _1375 = _1305 * 0.5;
        float _1376 = _1315 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_927, _928, _929), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4036 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1401 + 1.0))) + _1406) * _1328;
        float _1416 = _1296 * 0.5;
        float _1417 = _1306 * 0.5;
        float _1418 = _1316 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_927, _928, _929), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4069 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1443 + 1.0))) + _1448) * _1329;
        _1465 = _1296;
        _1467 = _1295;
        _1468 = _1294;
        _1469 = _1306;
        _1470 = _1305;
        _1471 = _1304;
        _1472 = _1316;
        _1473 = _1315;
        _1474 = _1314;
        _1475 = _1329;
        _1476 = _1328;
        _1477 = _1327;
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1466;
        _1467 = _1466;
        _1468 = _1466;
        _1469 = _1466;
        _1470 = _1466;
        _1471 = _1466;
        _1472 = _1466;
        _1473 = _1466;
        _1474 = _1466;
        _1475 = _1466;
        _1476 = _1466;
        _1477 = _1466;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1503 = fma(_1164, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156));
        float _1507 = fma(_1164, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156));
        float _1511 = fma(_1164, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156));
        float _1534 = _1156 + _927;
        float _1535 = _1160 + _928;
        float _1536 = _1164 + _929;
        float _1546 = fma(_1536, cbModelParam._m0[30u].z, fma(_1535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1534)) - _1503;
        float _1547 = fma(_1536, cbModelParam._m0[31u].z, fma(_1535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1534)) - _1507;
        float _1548 = fma(_1536, cbModelParam._m0[32u].z, fma(_1535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1534)) - _1511;
        float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
        float _1565 = ((_1552 * _1546) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1503 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1552 * _1547) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1507 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1552 * _1548) / cbModelParam._m0[35u].z) + ((((((_1511 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        float _1602 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1569.x + (-0.5));
        float _1604 = _1602 * (_1569.y + (-0.5));
        float _1605 = _1602 * (_1569.z + (-0.5));
        float _1612 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1576.x + (-0.5));
        float _1614 = _1612 * (_1576.y + (-0.5));
        float _1615 = _1612 * (_1576.z + (-0.5));
        float _1622 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1583.x + (-0.5));
        float _1624 = _1622 * (_1583.y + (-0.5));
        float _1625 = _1622 * (_1583.z + (-0.5));
        float _1632 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1590.x + (-0.5));
        float _1634 = _1632 * (_1590.y + (-0.5));
        float _1635 = _1632 * (_1590.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_927, _928, _929), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4132 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1666 + 1.0))) + _1671) * _1636;
        float _1681 = _1604 * 0.5;
        float _1682 = _1614 * 0.5;
        float _1683 = _1624 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_927, _928, _929), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4165 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1708 + 1.0))) + _1713) * _1637;
        float _1723 = _1605 * 0.5;
        float _1724 = _1615 * 0.5;
        float _1725 = _1625 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_927, _928, _929), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4198 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1750 + 1.0))) + _1755) * _1638;
        _1772 = _1605;
        _1773 = _1604;
        _1774 = _1603;
        _1775 = _1615;
        _1776 = _1614;
        _1777 = _1613;
        _1778 = _1625;
        _1779 = _1624;
        _1780 = _1623;
        _1781 = _1638;
        _1782 = _1637;
        _1783 = _1636;
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1466;
        _1773 = _1466;
        _1774 = _1466;
        _1775 = _1466;
        _1776 = _1466;
        _1777 = _1466;
        _1778 = _1466;
        _1779 = _1466;
        _1780 = _1466;
        _1781 = _1466;
        _1782 = _1466;
        _1783 = _1466;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1478)) + _1478;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1479)) + _1479;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1480)) + _1480;
    float _1819 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1796));
    float _1840 = _1100 * 0.5;
    float _1841 = _1101 * 0.5;
    float _1842 = _1102 * 0.5;
    float _1843 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1846 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1849 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1883;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1856 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1465, _1469, _1472, _1475));
        float _1860 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1864 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1468, _1471, _1474, _1477));
        float _1871 = dot(vec4(cbModelParam._m0[39u]), vec4(_1840, _1841, _1842, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1894;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1885 = dot(vec4(cbModelParam._m0[40u]), vec4(_1840, _1841, _1842, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1898 = (_1894 * cbModelParam._m0[1u].x) + (_1883 * (1.0 - cbModelParam._m0[1u].x));
    float _1908 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _930);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1908 : min(cbModelParam._m0[25u].z, _1908));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1956 = fma(_1164, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1156)) + cbModelParam._m0[13u].w;
        float _1960 = fma(_1164, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1156)) + cbModelParam._m0[14u].w;
        float _1964 = fma(_1164, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1156)) + cbModelParam._m0[15u].w;
        float _1967 = fma(_1102, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100));
        float _1970 = fma(_1102, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100));
        float _1973 = fma(_1102, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100));
        float _2001;
        if (_1967 > 0.0)
        {
            _2001 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2001 = frontier_phi_14_12_ladder;
        }
        float _2204;
        if (_1970 > 0.0)
        {
            _2204 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2204 = frontier_phi_23_19_ladder;
        }
        float _2458;
        if (_1973 > 0.0)
        {
            _2458 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2458 = frontier_phi_35_30_ladder;
        }
        float _2460 = isnan(_2204) ? _2001 : (isnan(_2001) ? _2204 : min(_2001, _2204));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1967) + _1956;
        float _2466 = (_2461 * _1970) + _1960;
        float _2467 = (_2461 * _1973) + _1964;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2468;
        float _2472 = _2468 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 > _2472) || ((_2466 < _2470) || ((_2465 < _2470) || (_2465 > _2472))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2467, cbModelParam._m0[9u].z, fma(_2466, cbModelParam._m0[9u].y, _2465 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2467, cbModelParam._m0[10u].z, fma(_2466, cbModelParam._m0[10u].y, _2465 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2467, cbModelParam._m0[11u].z, fma(_2466, cbModelParam._m0[11u].y, _2465 * cbModelParam._m0[11u].x))), _1909);
            frontier_phi_13_35_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _1989 = frontier_phi_13_35_ladder_2;
        _1991 = frontier_phi_13_35_ladder_1;
        _1993 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1100, _1101, _1102), _1909);
        _1989 = _1977.x * cbModelParam._m0[1u].y;
        _1991 = _1977.y * cbModelParam._m0[1u].y;
        _1993 = _1977.z * cbModelParam._m0[1u].y;
    }
    float _1997 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _930);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1997 : min(cbModelParam._m0[25u].w, _1997));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2052 = fma(_1164, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1156)) + cbModelParam._m0[21u].w;
        float _2056 = fma(_1164, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1156)) + cbModelParam._m0[22u].w;
        float _2060 = fma(_1164, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1156)) + cbModelParam._m0[23u].w;
        float _2063 = fma(_1102, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100));
        float _2066 = fma(_1102, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100));
        float _2069 = fma(_1102, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100));
        float _2209;
        if (_2063 > 0.0)
        {
            _2209 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2209 = frontier_phi_25_21_ladder;
        }
        float _2485;
        if (_2066 > 0.0)
        {
            _2485 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2485 = frontier_phi_37_32_ladder;
        }
        float _2698;
        if (_2069 > 0.0)
        {
            _2698 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2698 = frontier_phi_46_43_ladder;
        }
        float _2700 = isnan(_2485) ? _2209 : (isnan(_2209) ? _2485 : min(_2209, _2485));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _2063) + _2052;
        float _2706 = (_2701 * _2066) + _2056;
        float _2707 = (_2701 * _2069) + _2060;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1998);
            frontier_phi_22_46_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2088 = frontier_phi_22_46_ladder_2;
        _2090 = frontier_phi_22_46_ladder_1;
        _2092 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1100, _1101, _1102), _1998);
        _2088 = _2072.x * cbModelParam._m0[1u].z;
        _2090 = _2072.y * cbModelParam._m0[1u].z;
        _2092 = _2072.z * cbModelParam._m0[1u].z;
    }
    float _2105 = (((_1127 * _1076) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2107 = (((_1127 * _1078) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2109 = (((_1127 * _1079) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2092 - _1993)) + _1993);
    float _2112 = fma(_2109, cbSceneParam._m0[89u].z, fma(_2107, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2115 = fma(_2109, cbSceneParam._m0[90u].z, fma(_2107, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2118 = fma(_2109, cbSceneParam._m0[91u].z, fma(_2107, cbSceneParam._m0[91u].y, _2105 * cbSceneParam._m0[91u].x));
    uvec4 _2128 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2130 = _2128.x * 14u;
    uint _2131 = _2130 + 13u;
    float _2138 = _1092 + (-1.0);
    float _2143 = (cbLight._m0[_2131].x * _2138) + 1.0;
    float _2144 = (cbLight._m0[_2131].y * _2138) + 1.0;
    float _2145 = (cbLight._m0[_2131].z * _2138) + 1.0;
    float _2146 = (cbLight._m0[_2131].w * _2138) + 1.0;
    uint _2147 = _2130 + 5u;
    float _2153 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2157 = _2130 + 4u;
    float _2163 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
    uint _2167 = _2130 | 1u;
    float _2178 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_927, _928, _929));
    float _2181 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_927, _928, _929));
    float _4334 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _4345 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2186 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2188 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2195 = ((cbLight._m0[_2147].x * _2153) * _2188) + ((cbLight._m0[_2157].x * _2163) * _2186);
    float _2196 = ((_2153 * cbLight._m0[_2147].y) * _2188) + ((_2163 * cbLight._m0[_2157].y) * _2186);
    float _2197 = ((_2153 * cbLight._m0[_2147].z) * _2188) + ((_2163 * cbLight._m0[_2157].z) * _2186);
    uvec4 _2201 = floatBitsToUint(cbLight._m0[_2130 + 12u]);
    bool _2203 = _2201.x == 0u;
    float _2214;
    float _2216;
    float _2218;
    if (_2203)
    {
        _2214 = _2195;
        _2216 = _2196;
        _2218 = _2197;
    }
    else
    {
        uint _2222 = _2130 + 6u;
        float _2238 = (dot(vec3(cbLight._m0[_2130 + 2u].xyz), vec3(_927, _928, _929)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4356 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2241 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2214 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2195;
        _2216 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2196;
        _2218 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2197;
    }
    bool _2221 = _2201.y == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2221)
    {
        _2259 = _2214;
        _2261 = _2216;
        _2263 = _2218;
    }
    else
    {
        uint _2429 = _2130 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2130 + 3u].xyz), vec3(_927, _928, _929)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4372 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2448 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2259 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2214;
        _2261 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2216;
        _2263 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2218;
    }
    uint _2266 = _2130 + 8u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _930) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2130].x + _1006;
    float _2282 = cbLight._m0[_2130].y + _1007;
    float _2283 = cbLight._m0[_2130].z + _1008;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2130].xyz));
    float _4388 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2295 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2296 = dot(vec3(_927, _928, _929), vec3(_2288, _2289, _2290));
    float _4410 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2288, _2289, _2290));
    float _4421 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2280 * _2280;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
    float _2317 = 0.959999978542327880859375 - _1073;
    float _2319 = 0.959999978542327880859375 - _1074;
    float _2320 = 0.959999978542327880859375 - _1075;
    float _2327 = 1.0 - _2280;
    float _2338 = (0.5 / (((_2295 * ((_2294 * _2327) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2327) + _2280) * _2294))) * _2294;
    float _4432 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    uint _2351 = _2130 + 9u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _930) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2167].x + _1006;
    float _2365 = cbLight._m0[_2167].y + _1007;
    float _2366 = cbLight._m0[_2167].z + _1008;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2167].xyz));
    float _4443 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2378 = dot(vec3(_927, _928, _929), vec3(_2371, _2372, _2373));
    float _4454 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2371, _2372, _2373));
    float _4465 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2363 * _2363;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2404 = 1.0 - _2363;
    float _2414 = (0.5 / (((_2295 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2404) + _2363) * _2377))) * _2377;
    float _4476 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    float _2426 = (((((_2397 * _2317) + _1076) * cbLight._m0[_2351].x) * _2416) * _2153) + (((((_2316 * _2317) + _1076) * cbLight._m0[_2266].x) * _2340) * _2163);
    float _2427 = (((((_2397 * _2319) + _1078) * cbLight._m0[_2351].y) * _2416) * _2153) + (((((_2316 * _2319) + _1078) * cbLight._m0[_2266].y) * _2340) * _2163);
    float _2428 = (((((_2397 * _2320) + _1079) * cbLight._m0[_2351].z) * _2416) * _2153) + (((((_2316 * _2320) + _1079) * cbLight._m0[_2266].z) * _2340) * _2163);
    float _2490;
    float _2492;
    float _2494;
    if (_2203)
    {
        _2490 = _2426;
        _2492 = _2427;
        _2494 = _2428;
    }
    else
    {
        uint _2496 = _2130 + 2u;
        uint _2500 = _2130 + 10u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _930) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _1006;
        float _2517 = cbLight._m0[_2496].y + _1007;
        float _2518 = cbLight._m0[_2496].z + _1008;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2496].xyz));
        float _4487 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2530 = dot(vec3(_927, _928, _929), vec3(_2523, _2524, _2525));
        float _4498 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4509 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2295 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2556) + _2515) * _2529))) * _2529;
        float _4520 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2490 = (((((_2549 * _2317) + _1076) * cbLight._m0[_2500].x) * _2568) * _2569) + _2426;
        _2492 = (((((_2549 * _2319) + _1078) * cbLight._m0[_2500].y) * _2568) * _2569) + _2427;
        _2494 = (((((_2549 * _2320) + _1079) * cbLight._m0[_2500].z) * _2568) * _2569) + _2428;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2221)
    {
        _2604 = _2490;
        _2606 = _2492;
        _2608 = _2494;
    }
    else
    {
        uint _2615 = _2130 + 3u;
        uint _2619 = _2130 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _930) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _1006;
        float _2636 = cbLight._m0[_2615].y + _1007;
        float _2637 = cbLight._m0[_2615].z + _1008;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2615].xyz));
        float _4536 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2649 = dot(vec3(_927, _928, _929), vec3(_2642, _2643, _2644));
        float _4547 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4558 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2668 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2675 = 1.0 - _2634;
        float _2685 = (0.5 / (((_2295 * ((_2648 * _2675) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2675) + _2634) * _2648))) * _2648;
        float _4569 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2604 = (((((_2668 * _2317) + _1076) * cbLight._m0[_2619].x) * _2687) * _2688) + _2490;
        _2606 = (((((_2668 * _2319) + _1078) * cbLight._m0[_2619].y) * _2687) * _2688) + _2492;
        _2608 = (((((_2668 * _2320) + _1079) * cbLight._m0[_2619].z) * _2687) * _2688) + _2494;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2128.y == 0u)
    {
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2763;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2763;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2763;
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1015) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _1014) / _2779)));
        float _2800 = (log2(_2766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
        }
        else
        {
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3072)
                {
                    frontier_phi_61_pred = _3056;
                    frontier_phi_61_pred_1 = _3061;
                    frontier_phi_61_pred_2 = _3060;
                    frontier_phi_61_pred_3 = _3059;
                    frontier_phi_61_pred_4 = _3058;
                    frontier_phi_61_pred_5 = _3057;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3071;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3062 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _2764;
                        float _3247 = _3206.y - _2765;
                        float _3248 = _3206.z - _2766;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_1033, _1036, _1039), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4595 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _2764;
                        float _3282 = (-0.0) - _2765;
                        float _3283 = (-0.0) - _2766;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3298 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _1108;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_1033, _1036, _1039), vec3(_3288, _3289, _3290));
                        float _4611 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3323 = dot(vec3(_1033, _1036, _1039), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4622 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3266 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3256) + _3332;
                        float _4633 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4644 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3330 * _3330) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3115 = (_3277 * _3225.x) + _3183;
                        _3116 = (_3277 * _3225.y) + _3184;
                        _3117 = (_3277 * _3225.z) + _3185;
                        _3112 = (_3358 * _3242.x) + _3180;
                        _3113 = (_3358 * _3242.y) + _3181;
                        _3114 = (_3358 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_61_pred = _3112;
                    frontier_phi_61_pred_1 = _3117;
                    frontier_phi_61_pred_2 = _3116;
                    frontier_phi_61_pred_3 = _3115;
                    frontier_phi_61_pred_4 = _3114;
                    frontier_phi_61_pred_5 = _3113;
                }
                _2912 = frontier_phi_61_pred;
                _2922 = frontier_phi_61_pred_1;
                _2920 = frontier_phi_61_pred_2;
                _2918 = frontier_phi_61_pred_3;
                _2916 = frontier_phi_61_pred_4;
                _2914 = frontier_phi_61_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2912;
                    _3057 = _2914;
                    _3058 = _2916;
                    _3059 = _2918;
                    _3060 = _2920;
                    _3061 = _2922;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
        }
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.z;
        uint _2928 = (_2926 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2928) & _2810) == 0u)
        {
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
            float _3050 = _3049 * _2764;
            float _3051 = _3049 * _2765;
            float _3052 = _3049 * _2766;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2928 < ((_2926 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3163 = _2911;
                float _3164 = _2913;
                float _3165 = _2915;
                float _3166 = _2917;
                float _3167 = _2919;
                float _3168 = _2921;
                uint _3169 = _2928;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3179)
                    {
                        frontier_phi_67_pred = _3166;
                        frontier_phi_67_pred_1 = _3167;
                        frontier_phi_67_pred_2 = _3168;
                        frontier_phi_67_pred_3 = _3165;
                        frontier_phi_67_pred_4 = _3164;
                        frontier_phi_67_pred_5 = _3163;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        uint _3382 = _3178;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_2766, _3500.z, fma(_2765, _3500.y, _3500.x * _2764)) + _3500.w;
                            _3513 = !((fma(_2766, _3481.z, fma(_2765, _3481.y, _3481.x * _2764)) + _3481.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _2764;
                                float _3541 = _3408.y - _2765;
                                float _3542 = _3408.z - _2766;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4655 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_1033, _1036, _1039))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_2766, _3451.z, fma(_2765, _3451.y, _3451.x * _2764)) + _3451.w) / _3512;
                                float _3572 = (fma(_2766, _3466.z, fma(_2765, _3466.y, _3466.x * _2764)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4671 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _1108;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3050;
                                float _3602 = _3548 - _3051;
                                float _3603 = _3549 - _3052;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_1033, _1036, _1039), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4682 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3615 = dot(vec3(_1033, _1036, _1039), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4693 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_1033, _1036, _1039), vec3(_3547, _3548, _3549))) + _3624;
                                float _4704 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4715 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3652 * _3436.x;
                                frontier_phi_73_pred_1 = _3652 * _3436.y;
                                frontier_phi_73_pred_2 = _3578 * _3424.z;
                                frontier_phi_73_pred_3 = _3578 * _3424.y;
                                frontier_phi_73_pred_4 = _3578 * _3424.x;
                                frontier_phi_73_pred_5 = _3652 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_73_pred;
                            _3657 = frontier_phi_73_pred_1;
                            _3661 = frontier_phi_73_pred_2;
                            _3660 = frontier_phi_73_pred_3;
                            _3659 = frontier_phi_73_pred_4;
                            _3658 = frontier_phi_73_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3366;
                        frontier_phi_67_pred_1 = _3367;
                        frontier_phi_67_pred_2 = _3368;
                        frontier_phi_67_pred_3 = _3365;
                        frontier_phi_67_pred_4 = _3364;
                        frontier_phi_67_pred_5 = _3363;
                    }
                    _3031 = frontier_phi_67_pred;
                    _3033 = frontier_phi_67_pred_1;
                    _3035 = frontier_phi_67_pred_2;
                    _3029 = frontier_phi_67_pred_3;
                    _3027 = frontier_phi_67_pred_4;
                    _3025 = frontier_phi_67_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3025;
                        _3164 = _3027;
                        _3165 = _3029;
                        _3166 = _3031;
                        _3167 = _3033;
                        _3168 = _3035;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3033;
                frontier_phi_55_56_ladder_1 = _3035;
                frontier_phi_55_56_ladder_2 = _3031;
                frontier_phi_55_56_ladder_3 = _3029;
                frontier_phi_55_56_ladder_4 = _3027;
                frontier_phi_55_56_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_55_56_ladder = _2919;
                frontier_phi_55_56_ladder_1 = _2921;
                frontier_phi_55_56_ladder_2 = _2917;
                frontier_phi_55_56_ladder_3 = _2915;
                frontier_phi_55_56_ladder_4 = _2913;
                frontier_phi_55_56_ladder_5 = _2911;
            }
            _3024 = frontier_phi_55_56_ladder_5;
            _3026 = frontier_phi_55_56_ladder_4;
            _3028 = frontier_phi_55_56_ladder_3;
            _3030 = frontier_phi_55_56_ladder_2;
            _3032 = frontier_phi_55_56_ladder;
            _3034 = frontier_phi_55_56_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1092 : (isnan(_1092) ? 1.0 : min(_1092, 1.0));
        _2823 = (_3039 * _3030) + _2259;
        _2825 = (_3039 * _3032) + _2261;
        _2827 = (_3039 * _3034) + _2263;
        _2829 = ((_3024 * _1076) * _3039) + _2604;
        _2831 = ((_3026 * _1078) * _3039) + _2606;
        _2833 = ((_3028 * _1079) * _3039) + _2608;
    }
    else
    {
        _2823 = _2259;
        _2825 = _2261;
        _2827 = _2263;
        _2829 = _2604;
        _2831 = _2606;
        _2833 = _2608;
    }
    float _4731 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4742 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4753 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    uint _2853 = _254 + 6u;
    float _2861 = _1014 / cbSceneParam._m0[86u].x;
    float _2862 = _1015 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _949 : (isnan(_949) ? cbSceneParam._m0[77u].w : min(_949, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_949 > cbSceneParam._m0[78u].w)
    {
        float _2936 = isnan(_949) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _949 : min(cbSceneParam._m0[80u].w, _949));
        float _2937 = _2936 / _949;
        float _2948 = _2937 * _999;
        float _2949 = _1000 * _2937;
        float _2950 = (-0.0) - _2949;
        float _2952 = _2937 * _1001;
        float _2954 = (cbSceneParam._m0[77u].w * _2950) / _2936;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2949;
        float _2962 = sqrt(((_2948 * _2948) + (_2949 * _2949)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2936)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3125;
        if (abs((_2950 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3125 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3087 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3125 = ((abs(_2962 / _2950) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2972 * _3096) - exp2(_2972 * _3097)) * _3085))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3127 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3136 = exp2((_3125 * (-1.44269502162933349609375)) * (1.0 - _3127.w));
        float _3137 = log2(_3136);
        float _3153 = log2(_2881);
        _2974 = (exp2(_3153 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].x)) * _3127.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2976 = (exp2(_3153 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].y)) * _3127.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2978 = (exp2(_3153 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].z)) * _3127.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2980 = _3136 * _2881;
    }
    else
    {
        _2974 = _2878;
        _2976 = _2879;
        _2978 = _2880;
        _2980 = _2881;
    }
    float _2992 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2993 = _2992 == 3.0;
    float _2994 = log2(_2980);
    float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2823 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1092))) + ((_2829 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2825 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1092))) + ((_2831 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2827 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1092))) + ((_2833 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3012 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3012 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.y = _3012 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.z = _3012 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.w = cbInstanceData._m0[_2853].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2853].w;
}


