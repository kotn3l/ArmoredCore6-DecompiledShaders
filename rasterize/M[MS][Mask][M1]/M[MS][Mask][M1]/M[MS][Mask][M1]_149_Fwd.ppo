#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1751;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _261 = _260 * _252;
    float _262 = _260 * _253;
    float _263 = _260 * _254;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4073 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4084 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4095 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = _381.x * cbMtdParam._m0[11u].x;
    float _387 = _381.y * cbMtdParam._m0[11u].y;
    float _388 = _381.z * cbMtdParam._m0[11u].z;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _475 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _492 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _426.x) * 2.0) - ((((_463 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4106 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _500 = (_493 * ((_407.x * cbMtdParam._m0[12u].x) - _386)) + _386;
    float _501 = (_493 * ((_407.y * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _502 = (_493 * ((_407.z * cbMtdParam._m0[12u].z) - _388)) + _388;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _541 = _539.x;
    float _551 = dot(vec4(_541, _539.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _565 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _426.y) * 2.0) - ((((_541 - _551) * cbMtdParam._m0[23u].w) + _551) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4117 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _573 = (_566 * ((_519.x * cbMtdParam._m0[13u].x) - _500)) + _500;
    float _574 = (_566 * ((_519.y * cbMtdParam._m0[13u].y) - _501)) + _501;
    float _575 = (_566 * ((_519.z * cbMtdParam._m0[13u].z) - _502)) + _502;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _623 = dot(vec4(_613, _611.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _635 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _426.z) * 2.0) - ((((_613 - _623) * cbMtdParam._m0[23u].w) + _623) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4128 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _646 = (_355.x * cbMtdParam._m0[9u].x) * ((_636 * ((_594.x * cbMtdParam._m0[14u].x) - _573)) + _573);
    float _647 = (_355.y * cbMtdParam._m0[9u].y) * ((_636 * ((_594.y * cbMtdParam._m0[14u].y) - _574)) + _574);
    float _648 = (_355.z * cbMtdParam._m0[9u].z) * ((_636 * ((_594.z * cbMtdParam._m0[14u].z) - _575)) + _575);
    float _652 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _646;
    float _655 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _647;
    float _658 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _648;
    float _666 = (((_646 - _652) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) + _652) * 4.55000019073486328125;
    float _668 = (((_647 - _655) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) + _655) * 4.55000019073486328125;
    float _670 = (((_648 - _658) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) + _658) * 4.55000019073486328125;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _318) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _319) + cbTextureTilingScale._m0[14u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _751 = _749.x;
    float _752 = _749.y;
    float _753 = _749.z;
    float _760 = ((_732.x - _751) * _493) + _751;
    float _761 = ((_732.y - _752) * _493) + _752;
    float _762 = ((_732.z - _753) * _493) + _753;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _785 = ((_774.x - _760) * _566) + _760;
    float _786 = ((_774.y - _761) * _566) + _761;
    float _787 = ((_774.z - _762) * _566) + _762;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _812 = ((_799.z - _787) * _636) + _787;
    float _815 = ((((_799.x - _785) * _636) + _785) * 2.0) + (-1.0);
    float _816 = ((((_799.y - _786) * _636) + _786) * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4139 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _822 = sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))));
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _852 = (_815 + ((((_707.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_840.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _853 = (_816 + ((((_707.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_840.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _856 = fma(_822, _268, fma(_853, _275, _852 * _261));
    float _859 = fma(_822, _269, fma(_853, _276, _852 * _262));
    float _862 = fma(_822, _270, fma(_853, _277, _852 * _263));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _895 = _893.x;
    float _896 = 1.0 - _895;
    float _904 = (cbMtdParam._m0[19u].x + dot(vec4(_866 * _856, _866 * _859, _866 * _862, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_895 - _896) * cbMtdParam._m0[24u].z) + _896) * cbMtdParam._m0[21u].z);
    float _4150 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _905 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _907 = (-0.0) - cbMtdParam._m0[24u].x;
    float _909 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
    float _917 = _905 - ((_905 * TEXCOORD_8.x) * _910);
    float _918 = _905 - ((_905 * TEXCOORD_8.y) * _910);
    float _919 = _905 - ((_905 * TEXCOORD_8.z) * _910);
    float _926 = (_917 * ((_688.x * cbMtdParam._m0[18u].x) - _666)) + _666;
    float _927 = (_918 * ((_688.y * cbMtdParam._m0[18u].y) - _668)) + _668;
    float _928 = (_919 * ((_688.z * cbMtdParam._m0[18u].z) - _670)) + _670;
    float _943 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _944 = _943 * TEXCOORD.z;
    float _945 = _943 * TEXCOORD.w;
    vec4 _957 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _944) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _945) + cbTextureTilingScale._m0[19u].w));
    float _959 = _957.x;
    float _960 = 1.0 - _959;
    float _986 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_959 - _960) * cbMtdParam._m0[24u].w) + _960) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4171 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _987 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _995 = ((((cbMtdParam._m0[10u].x - _926) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _987) + _926;
    float _996 = ((((cbMtdParam._m0[10u].y - _927) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _987) + _927;
    float _997 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _928)) * _987) + _928;
    vec4 _1023 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1025 = _1023.x;
    float _1042 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _1025) * _493) + _1025;
    float _1059 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _1042) * _566) + _1042;
    float _1076 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _1059) * _636) + _1059;
    float _1082 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1076) * cbMtdParam._m0[19u].z) + _1076;
    float _1084 = _1082 - (_1082 * _917);
    float _1086 = _1084 - (_1084 * _987);
    float _1093 = (((_707.z - _812) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _812;
    float _1097 = ((_840.z - _1093) * cbMtdParam._m0[19u].w) + _1093;
    vec4 _1113 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1120 = (_1113.x * 2.0) + (-1.0);
    float _1121 = (_1113.y * 2.0) + (-1.0);
    float _1122 = dot(vec2(_1120, _1121), vec2(_1120, _1121));
    float _4182 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1130 = ((_1113.z - _1097) * _917) + _1097;
    float _1133 = ((cbMtdParam._m0[23u].x - _1130) * _987) + _1130;
    vec4 _1156 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _944) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _945) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1162 = (_1156.x * 2.0) + (-1.0);
    float _1163 = (_1156.y * 2.0) + (-1.0);
    float _1164 = dot(vec2(_1162, _1163), vec2(_1162, _1163));
    float _4193 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _1179 = ((sqrt(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) - _822) * _919) + _822;
    float _1182 = (((_1120 - _852) * _917) + _852) + (cbMtdParam._m0[21u].x * _852);
    float _1183 = (((_1121 - _853) * _918) + _853) + (cbMtdParam._m0[21u].x * _853);
    float _1194 = (((_1162 - _1182) + (_1182 * cbMtdParam._m0[22u].z)) * _987) + _1182;
    float _1195 = (((_1163 - _1183) + (_1183 * cbMtdParam._m0[22u].z)) * _987) + _1183;
    float _1196 = (_987 * (sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) - _1179)) + _1179;
    float _1198 = cbMtdParam._m0[22u].x + _840.w;
    float _1201 = fma(_1196, _268, fma(_1195, _275, _1194 * _261));
    float _1204 = fma(_1196, _269, fma(_1195, _276, _1194 * _262));
    float _1207 = fma(_1196, _270, fma(_1195, _277, _1194 * _263));
    float _1211 = inversesqrt(dot(vec3(_1201, _1204, _1207), vec3(_1201, _1204, _1207)));
    float _1212 = _1211 * _1201;
    float _1213 = _1211 * _1204;
    float _1214 = _1211 * _1207;
    float _4204 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1215 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _4226 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4237 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4248 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4259 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1220 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _1234 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1274);
    float _1285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1274);
    float _1286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1274);
    float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
    float _1291 = _1284 * _1290;
    float _1292 = _1285 * _1290;
    float _1293 = _1286 * _1290;
    float _1299 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1300 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1318 = fma(_1214, cbSceneParam._m0[5u].z, fma(_1213, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1212));
    float _1321 = fma(_1214, cbSceneParam._m0[6u].z, fma(_1213, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1212));
    float _1324 = fma(_1214, cbSceneParam._m0[7u].z, fma(_1213, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1212));
    uint _1338 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1344 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1338].x;
    float _1345 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1338].y;
    float _1346 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * cbInstanceData._m0[_1338].z;
    float _4270 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _1347 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _1348 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1349 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _1350 = 1.0 - _1220;
    float _1351 = _1347 * _1350;
    float _1352 = _1348 * _1350;
    float _1353 = _1349 * _1350;
    float _1358 = (_1347 + (-0.039999999105930328369140625)) * _1220;
    float _1359 = (_1348 + (-0.039999999105930328369140625)) * _1220;
    float _1360 = (_1349 + (-0.039999999105930328369140625)) * _1220;
    float _1361 = _1358 + 0.039999999105930328369140625;
    float _1363 = _1359 + 0.039999999105930328369140625;
    float _1364 = _1360 + 0.039999999105930328369140625;
    vec4 _1373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1299, cbSceneParam._m0[86u].y * _1300));
    float _1377 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * TEXCOORD_5.w) * _1373.x;
    float _1378 = dot(vec3(_1212, _1213, _1214), vec3(_1291, _1292, _1293));
    float _1381 = _1378 * 2.0;
    float _1385 = (_1381 * _1212) - _1291;
    float _1386 = (_1381 * _1213) - _1292;
    float _1387 = (_1381 * _1214) - _1293;
    float _1391 = abs(dot(vec3(_1291, _1292, _1293), vec3(_1212, _1213, _1214)));
    float _4303 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
    float _1393 = sqrt(_1215);
    float _1406 = exp2((_1393 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1393 * 3.0));
    float _1412 = (1.0 - _1406) * ((_1393 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1413 = _1406 * _1393;
    float _1441 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1445 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1449 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1750;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1475 = fma(_1449, cbModelParam._m0[26u].z, fma(_1445, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1441));
        float _1479 = fma(_1449, cbModelParam._m0[27u].z, fma(_1445, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1441));
        float _1483 = fma(_1449, cbModelParam._m0[28u].z, fma(_1445, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1441));
        float _1508 = _1441 + _1212;
        float _1509 = _1445 + _1213;
        float _1510 = _1449 + _1214;
        float _1520 = fma(_1510, cbModelParam._m0[26u].z, fma(_1509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1508)) - _1475;
        float _1521 = fma(_1510, cbModelParam._m0[27u].z, fma(_1509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1508)) - _1479;
        float _1522 = fma(_1510, cbModelParam._m0[28u].z, fma(_1509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1508)) - _1483;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1539 = ((_1526 * _1520) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1475 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1526 * _1521) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1479 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1526 * _1522) / cbModelParam._m0[34u].z) + ((((((_1483 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        float _1578 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1544.x + (-0.5));
        float _1580 = _1578 * (_1544.y + (-0.5));
        float _1581 = _1578 * (_1544.z + (-0.5));
        float _1588 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1551.x + (-0.5));
        float _1590 = _1588 * (_1551.y + (-0.5));
        float _1591 = _1588 * (_1551.z + (-0.5));
        float _1598 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1558.x + (-0.5));
        float _1600 = _1598 * (_1558.y + (-0.5));
        float _1601 = _1598 * (_1558.z + (-0.5));
        float _1608 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1565.x + (-0.5));
        float _1610 = _1608 * (_1565.y + (-0.5));
        float _1611 = _1608 * (_1565.z + (-0.5));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = _1579 * 0.5;
        float _1616 = _1589 * 0.5;
        float _1617 = _1599 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1632 = (dot(vec3(_1212, _1213, _1214), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1642 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4351 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1644 + 1.0))) + _1649) * _1612;
        float _1659 = _1580 * 0.5;
        float _1660 = _1590 * 0.5;
        float _1661 = _1600 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_1212, _1213, _1214), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4384 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1686 + 1.0))) + _1691) * _1613;
        float _1701 = _1581 * 0.5;
        float _1702 = _1591 * 0.5;
        float _1703 = _1601 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_1212, _1213, _1214), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4417 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1728 + 1.0))) + _1733) * _1614;
        _1750 = _1581;
        _1752 = _1580;
        _1753 = _1579;
        _1754 = _1591;
        _1755 = _1590;
        _1756 = _1589;
        _1757 = _1601;
        _1758 = _1600;
        _1759 = _1599;
        _1760 = _1614;
        _1761 = _1613;
        _1762 = _1612;
        _1763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
    }
    else
    {
        _1750 = _1751;
        _1752 = _1751;
        _1753 = _1751;
        _1754 = _1751;
        _1755 = _1751;
        _1756 = _1751;
        _1757 = _1751;
        _1758 = _1751;
        _1759 = _1751;
        _1760 = _1751;
        _1761 = _1751;
        _1762 = _1751;
        _1763 = 0.0;
        _1764 = 0.0;
        _1765 = 0.0;
    }
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1788 = fma(_1449, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441));
        float _1792 = fma(_1449, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441));
        float _1796 = fma(_1449, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441));
        float _1819 = _1441 + _1212;
        float _1820 = _1445 + _1213;
        float _1821 = _1449 + _1214;
        float _1831 = fma(_1821, cbModelParam._m0[30u].z, fma(_1820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1819)) - _1788;
        float _1832 = fma(_1821, cbModelParam._m0[31u].z, fma(_1820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1819)) - _1792;
        float _1833 = fma(_1821, cbModelParam._m0[32u].z, fma(_1820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1819)) - _1796;
        float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
        float _1850 = ((_1837 * _1831) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1788 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1851 = ((_1837 * _1832) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1792 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1852 = ((_1837 * _1833) / cbModelParam._m0[35u].z) + ((((((_1796 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1854 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1861 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1868 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1875 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        float _1887 = exp2((_1854.w + (-0.5)) * 20.0) * 2.0;
        float _1888 = _1887 * (_1854.x + (-0.5));
        float _1889 = _1887 * (_1854.y + (-0.5));
        float _1890 = _1887 * (_1854.z + (-0.5));
        float _1897 = exp2((_1861.w + (-0.5)) * 20.0) * 2.0;
        float _1898 = _1897 * (_1861.x + (-0.5));
        float _1899 = _1897 * (_1861.y + (-0.5));
        float _1900 = _1897 * (_1861.z + (-0.5));
        float _1907 = exp2((_1868.w + (-0.5)) * 20.0) * 2.0;
        float _1908 = _1907 * (_1868.x + (-0.5));
        float _1909 = _1907 * (_1868.y + (-0.5));
        float _1910 = _1907 * (_1868.z + (-0.5));
        float _1917 = exp2((_1875.w + (-0.5)) * 20.0) * 2.0;
        float _1918 = _1917 * (_1875.x + (-0.5));
        float _1919 = _1917 * (_1875.y + (-0.5));
        float _1920 = _1917 * (_1875.z + (-0.5));
        float _1921 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1922 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = _1888 * 0.5;
        float _1925 = _1898 * 0.5;
        float _1926 = _1908 * 0.5;
        float _1927 = dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926));
        float _1932 = (_1927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1927);
        float _1940 = (dot(vec3(_1212, _1213, _1214), vec3(_1932 * _1924, _1932 * _1925, _1932 * _1926)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1949 = sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926)) / (_1921 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1951 = _1950 * 2.0;
        float _1955 = (1.0 - _1950) / (_1950 + 1.0);
        float _4480 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1965 = ((((1.0 - _1956) * (_1951 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1951 + 1.0))) + _1956) * _1921;
        float _1966 = _1889 * 0.5;
        float _1967 = _1899 * 0.5;
        float _1968 = _1909 * 0.5;
        float _1969 = dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968));
        float _1974 = (_1969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1969);
        float _1982 = (dot(vec3(_1212, _1213, _1214), vec3(_1974 * _1966, _1974 * _1967, _1974 * _1968)) + 1.0) * 0.5;
        float _4491 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1991 = sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968)) / (_1922 + 9.9999997473787516355514526367188e-06);
        float _4502 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1993 = _1992 * 2.0;
        float _1997 = (1.0 - _1992) / (_1992 + 1.0);
        float _4513 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2007 = ((((1.0 - _1998) * (_1993 + 2.0)) * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_1993 + 1.0))) + _1998) * _1922;
        float _2008 = _1890 * 0.5;
        float _2009 = _1900 * 0.5;
        float _2010 = _1910 * 0.5;
        float _2011 = dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010));
        float _2016 = (_2011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2011);
        float _2024 = (dot(vec3(_1212, _1213, _1214), vec3(_2016 * _2008, _2016 * _2009, _2016 * _2010)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2033 = sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2035 = _2034 * 2.0;
        float _2039 = (1.0 - _2034) / (_2034 + 1.0);
        float _4546 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2049 = ((((1.0 - _2040) * (_2035 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2035 + 1.0))) + _2040) * _1923;
        _2057 = _1890;
        _2058 = _1889;
        _2059 = _1888;
        _2060 = _1900;
        _2061 = _1899;
        _2062 = _1898;
        _2063 = _1910;
        _2064 = _1909;
        _2065 = _1908;
        _2066 = _1923;
        _2067 = _1922;
        _2068 = _1921;
        _2069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)));
        _2070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)));
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    }
    else
    {
        _2057 = _1751;
        _2058 = _1751;
        _2059 = _1751;
        _2060 = _1751;
        _2061 = _1751;
        _2062 = _1751;
        _2063 = _1751;
        _2064 = _1751;
        _2065 = _1751;
        _2066 = _1751;
        _2067 = _1751;
        _2068 = _1751;
        _2069 = 0.0;
        _2070 = 0.0;
        _2071 = 0.0;
    }
    float _2081 = (cbModelParam._m0[1u].x * (_2069 - _1763)) + _1763;
    float _2082 = (cbModelParam._m0[1u].x * (_2070 - _1764)) + _1764;
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1765)) + _1765;
    float _2104 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2081));
    float _2125 = _1385 * 0.5;
    float _2126 = _1386 * 0.5;
    float _2127 = _1387 * 0.5;
    float _2128 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2131 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2058, _2061, _2064, _2067));
    float _2134 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2057, _2060, _2063, _2066));
    float _2168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2141 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1750, _1754, _1757, _1760));
        float _2145 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1752, _1755, _1758, _1761));
        float _2149 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1753, _1756, _1759, _1762));
        float _2156 = dot(vec4(cbModelParam._m0[39u]), vec4(_2125, _2126, _2127, 1.0));
        _2168 = dot(vec3(isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)), isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2156) ? 0.0 : (isnan(0.0) ? _2156 : max(0.0, _2156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2168 = 1.0;
    }
    float _2179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2170 = dot(vec4(cbModelParam._m0[40u]), vec4(_2125, _2126, _2127, 1.0));
        _2179 = dot(vec3(isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0)), isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)), isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2170) ? 0.0 : (isnan(0.0) ? _2170 : max(0.0, _2170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2179 = 1.0;
    }
    float _2183 = (_2179 * cbModelParam._m0[1u].x) + (_2168 * (1.0 - cbModelParam._m0[1u].x));
    float _2193 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1215);
    float _2194 = isnan(_2193) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2193 : min(cbModelParam._m0[25u].z, _2193));
    float _2274;
    float _2276;
    float _2278;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2241 = fma(_1449, cbModelParam._m0[13u].z, fma(_1445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1441)) + cbModelParam._m0[13u].w;
        float _2245 = fma(_1449, cbModelParam._m0[14u].z, fma(_1445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1441)) + cbModelParam._m0[14u].w;
        float _2249 = fma(_1449, cbModelParam._m0[15u].z, fma(_1445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1441)) + cbModelParam._m0[15u].w;
        float _2252 = fma(_1387, cbModelParam._m0[13u].z, fma(_1386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1385));
        float _2255 = fma(_1387, cbModelParam._m0[14u].z, fma(_1386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1385));
        float _2258 = fma(_1387, cbModelParam._m0[15u].z, fma(_1386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1385));
        float _2286;
        if (_2252 > 0.0)
        {
            _2286 = abs((1.0 - _2241) / _2252);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2241 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2286 = frontier_phi_14_12_ladder;
        }
        float _2488;
        if (_2255 > 0.0)
        {
            _2488 = abs((1.0 - _2245) / _2255);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2245 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2488 = frontier_phi_23_19_ladder;
        }
        float _2742;
        if (_2258 > 0.0)
        {
            _2742 = abs((1.0 - _2249) / _2258);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2249 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2742 = frontier_phi_35_30_ladder;
        }
        float _2744 = isnan(_2488) ? _2286 : (isnan(_2286) ? _2488 : min(_2286, _2488));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _2252) + _2241;
        float _2750 = (_2745 * _2255) + _2245;
        float _2751 = (_2745 * _2258) + _2249;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2752;
        float _2756 = _2752 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 > _2756) || ((_2750 < _2754) || ((_2749 < _2754) || (_2749 > _2756))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2751, cbModelParam._m0[9u].z, fma(_2750, cbModelParam._m0[9u].y, _2749 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2751, cbModelParam._m0[10u].z, fma(_2750, cbModelParam._m0[10u].y, _2749 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2751, cbModelParam._m0[11u].z, fma(_2750, cbModelParam._m0[11u].y, _2749 * cbModelParam._m0[11u].x))), _2194);
            frontier_phi_13_35_ladder = _2879.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2879.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2879.x * cbModelParam._m0[1u].y;
        }
        _2274 = frontier_phi_13_35_ladder_2;
        _2276 = frontier_phi_13_35_ladder_1;
        _2278 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1385, _1386, _1387), _2194);
        _2274 = _2262.x * cbModelParam._m0[1u].y;
        _2276 = _2262.y * cbModelParam._m0[1u].y;
        _2278 = _2262.z * cbModelParam._m0[1u].y;
    }
    float _2282 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1215);
    float _2283 = isnan(_2282) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2282 : min(cbModelParam._m0[25u].w, _2282));
    float _2372;
    float _2374;
    float _2376;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2336 = fma(_1449, cbModelParam._m0[21u].z, fma(_1445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1441)) + cbModelParam._m0[21u].w;
        float _2340 = fma(_1449, cbModelParam._m0[22u].z, fma(_1445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1441)) + cbModelParam._m0[22u].w;
        float _2344 = fma(_1449, cbModelParam._m0[23u].z, fma(_1445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1441)) + cbModelParam._m0[23u].w;
        float _2347 = fma(_1387, cbModelParam._m0[21u].z, fma(_1386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1385));
        float _2350 = fma(_1387, cbModelParam._m0[22u].z, fma(_1386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1385));
        float _2353 = fma(_1387, cbModelParam._m0[23u].z, fma(_1386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1385));
        float _2493;
        if (_2347 > 0.0)
        {
            _2493 = abs((1.0 - _2336) / _2347);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2347 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2336 + 1.0) / _2347);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2493 = frontier_phi_25_21_ladder;
        }
        float _2769;
        if (_2350 > 0.0)
        {
            _2769 = abs((1.0 - _2340) / _2350);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2350 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2340 + 1.0) / _2350);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2769 = frontier_phi_37_32_ladder;
        }
        float _2982;
        if (_2353 > 0.0)
        {
            _2982 = abs((1.0 - _2344) / _2353);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2353 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2344 + 1.0) / _2353);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2982 = frontier_phi_46_43_ladder;
        }
        float _2984 = isnan(_2769) ? _2493 : (isnan(_2493) ? _2769 : min(_2493, _2769));
        float _2985 = isnan(_2982) ? _2984 : (isnan(_2984) ? _2982 : min(_2984, _2982));
        float _2989 = (_2985 * _2347) + _2336;
        float _2990 = (_2985 * _2350) + _2340;
        float _2991 = (_2985 * _2353) + _2344;
        float _2992 = _2985 * 9.9999997473787516355514526367188e-05;
        float _2993 = (-1.0) - _2992;
        float _2995 = _2992 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2991 > _2995) || ((_2991 < _2993) || ((_2990 > _2995) || ((_2990 < _2993) || ((_2989 < _2993) || (_2989 > _2995))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3190 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2991, cbModelParam._m0[17u].z, fma(_2990, cbModelParam._m0[17u].y, _2989 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2991, cbModelParam._m0[18u].z, fma(_2990, cbModelParam._m0[18u].y, _2989 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2991, cbModelParam._m0[19u].z, fma(_2990, cbModelParam._m0[19u].y, _2989 * cbModelParam._m0[19u].x))), _2283);
            frontier_phi_22_46_ladder = _3190.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3190.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3190.x * cbModelParam._m0[1u].z;
        }
        _2372 = frontier_phi_22_46_ladder_2;
        _2374 = frontier_phi_22_46_ladder_1;
        _2376 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1385, _1386, _1387), _2283);
        _2372 = _2356.x * cbModelParam._m0[1u].z;
        _2374 = _2356.y * cbModelParam._m0[1u].z;
        _2376 = _2356.z * cbModelParam._m0[1u].z;
    }
    float _2389 = (((_1412 * _1361) + _1413) * _1377) * ((cbModelParam._m0[1u].w * (_2372 - _2274)) + _2274);
    float _2391 = (((_1412 * _1363) + _1413) * _1377) * ((cbModelParam._m0[1u].w * (_2374 - _2276)) + _2276);
    float _2393 = (((_1412 * _1364) + _1413) * _1377) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2396 = fma(_2393, cbSceneParam._m0[89u].z, fma(_2391, cbSceneParam._m0[89u].y, _2389 * cbSceneParam._m0[89u].x));
    float _2399 = fma(_2393, cbSceneParam._m0[90u].z, fma(_2391, cbSceneParam._m0[90u].y, _2389 * cbSceneParam._m0[90u].x));
    float _2402 = fma(_2393, cbSceneParam._m0[91u].z, fma(_2391, cbSceneParam._m0[91u].y, _2389 * cbSceneParam._m0[91u].x));
    uvec4 _2412 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2414 = _2412.x * 14u;
    uint _2415 = _2414 + 13u;
    float _2422 = _1377 + (-1.0);
    float _2427 = (cbLight._m0[_2415].x * _2422) + 1.0;
    float _2428 = (cbLight._m0[_2415].y * _2422) + 1.0;
    float _2429 = (cbLight._m0[_2415].z * _2422) + 1.0;
    float _2430 = (cbLight._m0[_2415].w * _2422) + 1.0;
    uint _2431 = _2414 + 5u;
    float _2437 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2441 = _2414 + 4u;
    float _2447 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2451 = _2414 | 1u;
    float _2462 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_1212, _1213, _1214));
    float _2465 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_1212, _1213, _1214));
    float _4682 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _4693 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2470 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2472 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2479 = ((cbLight._m0[_2431].x * _2437) * _2472) + ((cbLight._m0[_2441].x * _2447) * _2470);
    float _2480 = ((_2437 * cbLight._m0[_2431].y) * _2472) + ((_2447 * cbLight._m0[_2441].y) * _2470);
    float _2481 = ((_2437 * cbLight._m0[_2431].z) * _2472) + ((_2447 * cbLight._m0[_2441].z) * _2470);
    uvec4 _2485 = floatBitsToUint(cbLight._m0[_2414 + 12u]);
    bool _2487 = _2485.x == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2487)
    {
        _2498 = _2479;
        _2500 = _2480;
        _2502 = _2481;
    }
    else
    {
        uint _2506 = _2414 + 6u;
        float _2522 = (dot(vec3(cbLight._m0[_2414 + 2u].xyz), vec3(_1212, _1213, _1214)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4704 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2525 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2498 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2479;
        _2500 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2480;
        _2502 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2481;
    }
    bool _2505 = _2485.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2505)
    {
        _2543 = _2498;
        _2545 = _2500;
        _2547 = _2502;
    }
    else
    {
        uint _2713 = _2414 + 7u;
        float _2729 = (dot(vec3(cbLight._m0[_2414 + 3u].xyz), vec3(_1212, _1213, _1214)) * 0.5) + 0.5;
        float _2730 = _2729 * _2729;
        float _4720 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2731 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2732 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2543 = (((cbLight._m0[_2713].x * 0.3183098733425140380859375) * _2731) * _2732) + _2498;
        _2545 = (((cbLight._m0[_2713].y * 0.3183098733425140380859375) * _2731) * _2732) + _2500;
        _2547 = (((cbLight._m0[_2713].z * 0.3183098733425140380859375) * _2731) * _2732) + _2502;
    }
    uint _2550 = _2414 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _1215) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2414].x + _1291;
    float _2566 = cbLight._m0[_2414].y + _1292;
    float _2567 = cbLight._m0[_2414].z + _1293;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_1212, _1213, _1214), vec3(cbLight._m0[_2414].xyz));
    float _4736 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
    float _2579 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2580 = dot(vec3(_1212, _1213, _1214), vec3(_2572, _2573, _2574));
    float _4758 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2572, _2573, _2574));
    float _4769 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2601 = 0.959999978542327880859375 - _1358;
    float _2603 = 0.959999978542327880859375 - _1359;
    float _2604 = 0.959999978542327880859375 - _1360;
    float _2611 = 1.0 - _2564;
    float _2622 = (0.5 / (((_2579 * ((_2578 * _2611) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2611) + _2564) * _2578))) * _2578;
    float _4780 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2635 = _2414 + 9u;
    float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _1215) * 0.949999988079071044921875);
    float _2647 = _2646 * _2646;
    float _2648 = cbLight._m0[_2451].x + _1291;
    float _2649 = cbLight._m0[_2451].y + _1292;
    float _2650 = cbLight._m0[_2451].z + _1293;
    float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
    float _2655 = _2654 * _2648;
    float _2656 = _2654 * _2649;
    float _2657 = _2654 * _2650;
    float _2658 = dot(vec3(_1212, _1213, _1214), vec3(cbLight._m0[_2451].xyz));
    float _4791 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2662 = dot(vec3(_1212, _1213, _1214), vec3(_2655, _2656, _2657));
    float _4802 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2666 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2655, _2656, _2657));
    float _4813 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2670 = _2647 * _2647;
    float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
    float _2688 = 1.0 - _2647;
    float _2698 = (0.5 / (((_2579 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2688) + _2647) * _2661))) * _2661;
    float _4824 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2700 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
    float _2710 = (((((_2681 * _2601) + _1361) * cbLight._m0[_2635].x) * _2700) * _2437) + (((((_2600 * _2601) + _1361) * cbLight._m0[_2550].x) * _2624) * _2447);
    float _2711 = (((((_2681 * _2603) + _1363) * cbLight._m0[_2635].y) * _2700) * _2437) + (((((_2600 * _2603) + _1363) * cbLight._m0[_2550].y) * _2624) * _2447);
    float _2712 = (((((_2681 * _2604) + _1364) * cbLight._m0[_2635].z) * _2700) * _2437) + (((((_2600 * _2604) + _1364) * cbLight._m0[_2550].z) * _2624) * _2447);
    float _2774;
    float _2776;
    float _2778;
    if (_2487)
    {
        _2774 = _2710;
        _2776 = _2711;
        _2778 = _2712;
    }
    else
    {
        uint _2780 = _2414 + 2u;
        uint _2784 = _2414 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _1215) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _1291;
        float _2801 = cbLight._m0[_2780].y + _1292;
        float _2802 = cbLight._m0[_2780].z + _1293;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_1212, _1213, _1214), vec3(cbLight._m0[_2780].xyz));
        float _4835 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2814 = dot(vec3(_1212, _1213, _1214), vec3(_2807, _2808, _2809));
        float _4846 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4857 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2579 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2840) + _2799) * _2813))) * _2813;
        float _4868 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2774 = (((((_2833 * _2601) + _1361) * cbLight._m0[_2784].x) * _2852) * _2853) + _2710;
        _2776 = (((((_2833 * _2603) + _1363) * cbLight._m0[_2784].y) * _2852) * _2853) + _2711;
        _2778 = (((((_2833 * _2604) + _1364) * cbLight._m0[_2784].z) * _2852) * _2853) + _2712;
    }
    float _2888;
    float _2890;
    float _2892;
    if (_2505)
    {
        _2888 = _2774;
        _2890 = _2776;
        _2892 = _2778;
    }
    else
    {
        uint _2899 = _2414 + 3u;
        uint _2903 = _2414 + 11u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _1215) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _1291;
        float _2920 = cbLight._m0[_2899].y + _1292;
        float _2921 = cbLight._m0[_2899].z + _1293;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_1212, _1213, _1214), vec3(cbLight._m0[_2899].xyz));
        float _4884 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2933 = dot(vec3(_1212, _1213, _1214), vec3(_2926, _2927, _2928));
        float _4895 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _4906 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
        float _2959 = 1.0 - _2918;
        float _2969 = (0.5 / (((_2579 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2959) + _2918) * _2932))) * _2932;
        float _4917 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2971 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2972 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2888 = (((((_2952 * _2601) + _1361) * cbLight._m0[_2903].x) * _2971) * _2972) + _2774;
        _2890 = (((((_2952 * _2603) + _1363) * cbLight._m0[_2903].y) * _2971) * _2972) + _2776;
        _2892 = (((((_2952 * _2604) + _1364) * cbLight._m0[_2903].z) * _2971) * _2972) + _2778;
    }
    float _3107;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_2412.y == 0u)
    {
        float _3047 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3048 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3047;
        float _3049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3047;
        float _3050 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3047;
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.x;
        uint _3074 = uint((float(_3062.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1300) / _3063))) + floor(float(uint(cbSceneParam._m0[85u].x * _1299) / _3063)));
        float _3084 = (log2(_3050 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3085 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        uint _3088 = uint(isnan(14.0) ? _3085 : (isnan(_3085) ? 14.0 : min(_3085, 14.0)));
        uvec4 _3093 = texelFetch(g_lightClusterGridBuffer, int(((_3088 << 2u) + (_3074 << 6u)) >> 2u));
        uint _3094 = _3093.x;
        uint _3095 = _3062.z;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        if (((((1u << ((_3095 >> 4u) & 15u)) + 4294967295u) & _3094) == 0u) || ((_3095 & 240u) == 0u))
        {
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
        }
        else
        {
            float _3196;
            float _3198;
            float _3200;
            float _3202;
            float _3204;
            float _3206;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            uint _3345 = 0u;
            uint _3354;
            bool _3355;
            for (;;)
            {
                _3354 = texelFetch(g_lightClassification, int((((_3088 << 5u) + (_3074 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                _3355 = _3354 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3355)
                {
                    frontier_phi_61_pred = _3339;
                    frontier_phi_61_pred_1 = _3344;
                    frontier_phi_61_pred_2 = _3343;
                    frontier_phi_61_pred_3 = _3342;
                    frontier_phi_61_pred_4 = _3341;
                    frontier_phi_61_pred_5 = _3340;
                }
                else
                {
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    uint _3469;
                    _3463 = _3339;
                    _3464 = _3340;
                    _3465 = _3341;
                    _3466 = _3342;
                    _3467 = _3343;
                    _3468 = _3344;
                    _3469 = _3354;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    for (;;)
                    {
                        uint _3473 = uint(findLSB(_3469)) + (_3345 << 5u);
                        uint _3470 = (_3469 + 4294967295u) & _3469;
                        uint _3475 = _3473 * 48u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3475)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 3u)).x));
                        uint _3495 = (_3473 * 48u) + 4u;
                        vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3514 = (_3473 * 48u) + 8u;
                        vec3 _3525 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x));
                        float _3529 = _3489.x - _3048;
                        float _3530 = _3489.y - _3049;
                        float _3531 = _3489.z - _3050;
                        float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                        float _3535 = inversesqrt(_3532);
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3539 = dot(vec3(_1318, _1321, _1324), vec3(_3536, _3537, _3538));
                        float _3544 = 1.0 - (_3532 * _3489.w);
                        float _4943 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3546 = sqrt(_3532) * _3508.w;
                        float _3549 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3539) + _3550;
                        float _3556 = _3546 * _3546;
                        float _3560 = ((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3545) / ((_3556 * 0.699999988079071044921875) + 1.0);
                        float _3564 = (-0.0) - _3048;
                        float _3565 = (-0.0) - _3049;
                        float _3566 = (-0.0) - _3050;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3571 = _3570 * _3564;
                        float _3572 = _3570 * _3565;
                        float _3573 = _3570 * _3566;
                        float _3581 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                        float _3582 = 1.0 - _1393;
                        float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                        float _3590 = _3589 * _3589;
                        float _3591 = _3590 * _3590;
                        float _3592 = _3571 + _3536;
                        float _3593 = _3572 + _3537;
                        float _3594 = _3573 + _3538;
                        float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                        float _3602 = dot(vec3(_1318, _1321, _1324), vec3(_3571, _3572, _3573));
                        float _4959 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3605 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3606 = dot(vec3(_1318, _1321, _1324), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                        float _4970 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3609 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                        float _3614 = _3549 * _3590;
                        float _3615 = _3614 * _3614;
                        float _3618 = ((1.0 - _3615) * _3539) + _3615;
                        float _4981 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3619 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3620 = 1.0 - _3590;
                        float _3630 = (0.5 / (((_3619 * ((_3605 * _3620) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3590) * _3605))) * _3619;
                        float _4992 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                        float _3641 = (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3613 * _3613) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125))) * _3545;
                        _3398 = (_3560 * _3508.x) + _3466;
                        _3399 = (_3560 * _3508.y) + _3467;
                        _3400 = (_3560 * _3508.z) + _3468;
                        _3395 = (_3641 * _3525.x) + _3463;
                        _3396 = (_3641 * _3525.y) + _3464;
                        _3397 = (_3641 * _3525.z) + _3465;
                        if (_3470 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3463 = _3395;
                            _3464 = _3396;
                            _3465 = _3397;
                            _3466 = _3398;
                            _3467 = _3399;
                            _3468 = _3400;
                            _3469 = _3470;
                        }
                    }
                    frontier_phi_61_pred = _3395;
                    frontier_phi_61_pred_1 = _3400;
                    frontier_phi_61_pred_2 = _3399;
                    frontier_phi_61_pred_3 = _3398;
                    frontier_phi_61_pred_4 = _3397;
                    frontier_phi_61_pred_5 = _3396;
                }
                _3196 = frontier_phi_61_pred;
                _3206 = frontier_phi_61_pred_1;
                _3204 = frontier_phi_61_pred_2;
                _3202 = frontier_phi_61_pred_3;
                _3200 = frontier_phi_61_pred_4;
                _3198 = frontier_phi_61_pred_5;
                uint _3346 = _3345 + 1u;
                if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3339 = _3196;
                    _3340 = _3198;
                    _3341 = _3200;
                    _3342 = _3202;
                    _3343 = _3204;
                    _3344 = _3206;
                    _3345 = _3346;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
        }
        uvec4 _3209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3210 = _3209.z;
        uint _3212 = (_3210 >> 8u) & 15u;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        if (((4294967295u << _3212) & _3094) == 0u)
        {
            _3307 = _3195;
            _3309 = _3197;
            _3311 = _3199;
            _3313 = _3201;
            _3315 = _3203;
            _3317 = _3205;
        }
        else
        {
            float _3332 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
            float _3333 = _3332 * _3048;
            float _3334 = _3332 * _3049;
            float _3335 = _3332 * _3050;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3212 < ((_3210 >> 12u) & 15u))
            {
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3446 = _3195;
                float _3447 = _3197;
                float _3448 = _3199;
                float _3449 = _3201;
                float _3450 = _3203;
                float _3451 = _3205;
                uint _3452 = _3212;
                uint _3461;
                bool _3462;
                for (;;)
                {
                    _3461 = texelFetch(g_lightClassification, int((((_3088 << 5u) + (_3074 << 9u)) + (_3452 << 2u)) >> 2u)).x;
                    _3462 = _3461 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3462)
                    {
                        frontier_phi_67_pred = _3449;
                        frontier_phi_67_pred_1 = _3450;
                        frontier_phi_67_pred_2 = _3451;
                        frontier_phi_67_pred_3 = _3448;
                        frontier_phi_67_pred_4 = _3447;
                        frontier_phi_67_pred_5 = _3446;
                    }
                    else
                    {
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3659 = _3446;
                        float _3660 = _3447;
                        float _3661 = _3448;
                        float _3662 = _3449;
                        float _3663 = _3450;
                        float _3664 = _3451;
                        uint _3665 = _3461;
                        uint _3666;
                        vec4 _3691;
                        float _3692;
                        vec4 _3707;
                        vec3 _3719;
                        vec4 _3734;
                        vec4 _3749;
                        float _3795;
                        bool _3796;
                        for (;;)
                        {
                            uint _3676 = ((_3452 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3665));
                            _3666 = (_3665 + 4294967295u) & _3665;
                            uint _3678 = _3676 * 40u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3692 = _3691.w;
                            uint _3694 = (_3676 * 40u) + 4u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3676 * 40u) + 8u;
                            _3719 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x));
                            uint _3721 = (_3676 * 40u) + 16u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3676 * 40u) + 20u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3676 * 40u) + 24u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3770 = (_3676 * 40u) + 28u;
                            vec4 _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            _3795 = fma(_3050, _3783.z, fma(_3049, _3783.y, _3783.x * _3048)) + _3783.w;
                            _3796 = !((fma(_3050, _3764.z, fma(_3049, _3764.y, _3764.x * _3048)) + _3764.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3796)
                            {
                                float _3823 = _3691.x - _3048;
                                float _3824 = _3691.y - _3049;
                                float _3825 = _3691.z - _3050;
                                float _3826 = dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825));
                                float _3829 = inversesqrt(_3826);
                                float _3830 = _3829 * _3823;
                                float _3831 = _3829 * _3824;
                                float _3832 = _3829 * _3825;
                                float _3836 = 1.0 - (_3826 / (_3692 * _3692));
                                float _5003 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3841 = sqrt(_3826) * _3707.w;
                                float _3843 = 1.39999997615814208984375 / (_3841 + 1.39999997615814208984375);
                                float _3844 = _3843 * _3843;
                                float _3847 = ((1.0 - _3844) * dot(vec3(_3830, _3831, _3832), vec3(_1318, _1321, _1324))) + _3844;
                                float _3850 = _3841 * _3841;
                                float _3854 = (fma(_3050, _3734.z, fma(_3049, _3734.y, _3734.x * _3048)) + _3734.w) / _3795;
                                float _3855 = (fma(_3050, _3749.z, fma(_3049, _3749.y, _3749.x * _3048)) + _3749.w) / _3795;
                                float _3859 = 1.0 - dot(vec2(_3854, _3855), vec2(_3854, _3855));
                                float _5019 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3861 = _3860 * (((isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0))) * _3837) / ((_3850 * 0.699999988079071044921875) + 1.0));
                                float _3873 = exp2(log2(1.0 / ((_3850 * 3.5) + 5.0)) * 0.25);
                                float _3874 = 1.0 - _1393;
                                float _3881 = sqrt(1.0 - ((1.0 - (_3874 * _3874)) * (1.0 - (_3873 * _3873))));
                                float _3882 = _3881 * _3881;
                                float _3883 = _3882 * _3882;
                                float _3884 = _3830 - _3333;
                                float _3885 = _3831 - _3334;
                                float _3886 = _3832 - _3335;
                                float _3890 = inversesqrt(dot(vec3(_3884, _3885, _3886), vec3(_3884, _3885, _3886)));
                                float _3894 = dot(vec3(_1318, _1321, _1324), vec3((-0.0) - _3333, (-0.0) - _3334, (-0.0) - _3335));
                                float _5030 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3897 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3898 = dot(vec3(_1318, _1321, _1324), vec3(_3890 * _3884, _3890 * _3885, _3890 * _3886));
                                float _5041 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3901 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3905 = ((_3901 * _3901) * (_3883 + (-1.0))) + 1.0;
                                float _3906 = _3843 * _3882;
                                float _3907 = _3906 * _3906;
                                float _3913 = ((1.0 - _3907) * dot(vec3(_1318, _1321, _1324), vec3(_3830, _3831, _3832))) + _3907;
                                float _5052 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3915 = 1.0 - _3882;
                                float _3925 = (0.5 / (((_3914 * ((_3897 * _3915) + _3882)) + 9.9999999392252902907785028219223e-09) + (((_3914 * _3915) + _3882) * _3897))) * _3914;
                                float _5063 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3935 = (_3860 * _3837) * (((_3883 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3905 * _3905) * ((_3850 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3935 * _3719.x;
                                frontier_phi_73_pred_1 = _3935 * _3719.y;
                                frontier_phi_73_pred_2 = _3861 * _3707.z;
                                frontier_phi_73_pred_3 = _3861 * _3707.y;
                                frontier_phi_73_pred_4 = _3861 * _3707.x;
                                frontier_phi_73_pred_5 = _3935 * _3719.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3939 = frontier_phi_73_pred;
                            _3940 = frontier_phi_73_pred_1;
                            _3944 = frontier_phi_73_pred_2;
                            _3943 = frontier_phi_73_pred_3;
                            _3942 = frontier_phi_73_pred_4;
                            _3941 = frontier_phi_73_pred_5;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            _3651 = _3944 + _3664;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            if (_3666 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3666;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3649;
                        frontier_phi_67_pred_1 = _3650;
                        frontier_phi_67_pred_2 = _3651;
                        frontier_phi_67_pred_3 = _3648;
                        frontier_phi_67_pred_4 = _3647;
                        frontier_phi_67_pred_5 = _3646;
                    }
                    _3314 = frontier_phi_67_pred;
                    _3316 = frontier_phi_67_pred_1;
                    _3318 = frontier_phi_67_pred_2;
                    _3312 = frontier_phi_67_pred_3;
                    _3310 = frontier_phi_67_pred_4;
                    _3308 = frontier_phi_67_pred_5;
                    uint _3453 = _3452 + 1u;
                    if (_3453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3446 = _3308;
                        _3447 = _3310;
                        _3448 = _3312;
                        _3449 = _3314;
                        _3450 = _3316;
                        _3451 = _3318;
                        _3452 = _3453;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3316;
                frontier_phi_55_56_ladder_1 = _3318;
                frontier_phi_55_56_ladder_2 = _3314;
                frontier_phi_55_56_ladder_3 = _3312;
                frontier_phi_55_56_ladder_4 = _3310;
                frontier_phi_55_56_ladder_5 = _3308;
            }
            else
            {
                frontier_phi_55_56_ladder = _3203;
                frontier_phi_55_56_ladder_1 = _3205;
                frontier_phi_55_56_ladder_2 = _3201;
                frontier_phi_55_56_ladder_3 = _3199;
                frontier_phi_55_56_ladder_4 = _3197;
                frontier_phi_55_56_ladder_5 = _3195;
            }
            _3307 = frontier_phi_55_56_ladder_5;
            _3309 = frontier_phi_55_56_ladder_4;
            _3311 = frontier_phi_55_56_ladder_3;
            _3313 = frontier_phi_55_56_ladder_2;
            _3315 = frontier_phi_55_56_ladder;
            _3317 = frontier_phi_55_56_ladder_1;
        }
        float _3322 = isnan(1.0) ? _1377 : (isnan(_1377) ? 1.0 : min(_1377, 1.0));
        _3107 = (_3322 * _3313) + _2543;
        _3109 = (_3322 * _3315) + _2545;
        _3111 = (_3322 * _3317) + _2547;
        _3113 = ((_3307 * _1361) * _3322) + _2888;
        _3115 = ((_3309 * _1363) * _3322) + _2890;
        _3117 = ((_3311 * _1364) * _3322) + _2892;
    }
    else
    {
        _3107 = _2543;
        _3109 = _2545;
        _3111 = _2547;
        _3113 = _2888;
        _3115 = _2890;
        _3117 = _2892;
    }
    float _5079 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _5090 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
    float _5101 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    uint _3137 = _299 + 6u;
    float _3145 = _1299 / cbSceneParam._m0[86u].x;
    float _3146 = _1300 / cbSceneParam._m0[86u].y;
    vec4 _3160 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3145, _3146, (log2((isnan(cbSceneParam._m0[77u].w) ? _1234 : (isnan(_1234) ? cbSceneParam._m0[77u].w : min(_1234, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3162 = _3160.x;
    float _3163 = _3160.y;
    float _3164 = _3160.z;
    float _3165 = _3160.w;
    float _3257;
    float _3259;
    float _3261;
    float _3263;
    if (_1234 > cbSceneParam._m0[78u].w)
    {
        float _3220 = isnan(_1234) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1234 : min(cbSceneParam._m0[80u].w, _1234));
        float _3221 = _3220 / _1234;
        float _3232 = _3221 * _1284;
        float _3233 = _1285 * _3221;
        float _3234 = (-0.0) - _3233;
        float _3235 = _3221 * _1286;
        float _3237 = (cbSceneParam._m0[77u].w * _3234) / _3220;
        float _3238 = _3237 + cbSceneParam._m0[79u].w;
        float _3239 = cbSceneParam._m0[79u].w - _3233;
        float _3245 = sqrt(((_3232 * _3232) + (_3233 * _3233)) + (_3235 * _3235));
        float _3248 = (1.0 - (cbSceneParam._m0[77u].w / _3220)) * _3245;
        float _3253 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3255 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3408;
        if (abs((_3234 - _3237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3408 = ((((_3238 > 0.0) ? exp2(_3253 * _3238) : (2.0 - exp2(_3255 * _3238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3248;
        }
        else
        {
            float _3368 = 1.0 / cbSceneParam._m0[80u].x;
            float _3369 = isnan(_3239) ? _3238 : (isnan(_3238) ? _3239 : max(_3238, _3239));
            float _3370 = isnan(_3239) ? _3238 : (isnan(_3238) ? _3239 : min(_3238, _3239));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            _3408 = ((abs(_3245 / _3234) * cbSceneParam._m0[80u].y) * ((((_3379 - _3380) * 2.0) - ((exp2(_3253 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0)))) - exp2(_3253 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))))) * _3368)) - ((exp2(_3255 * _3379) - exp2(_3255 * _3380)) * _3368))) + (_3248 * cbSceneParam._m0[80u].z);
        }
        vec4 _3410 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3145, _3146, 1.0), 0.0);
        float _3419 = exp2((_3408 * (-1.44269502162933349609375)) * (1.0 - _3410.w));
        float _3420 = log2(_3419);
        float _3436 = log2(_3165);
        _3257 = (exp2(_3436 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3420 * cbSceneParam._m0[78u].x)) * _3410.x) / cbSceneParam._m0[78u].x)) + _3162;
        _3259 = (exp2(_3436 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3420 * cbSceneParam._m0[78u].y)) * _3410.y) / cbSceneParam._m0[78u].y)) + _3163;
        _3261 = (exp2(_3436 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3420 * cbSceneParam._m0[78u].z)) * _3410.z) / cbSceneParam._m0[78u].z)) + _3164;
        _3263 = _3419 * _3165;
    }
    else
    {
        _3257 = _3162;
        _3259 = _3163;
        _3261 = _3164;
        _3263 = _3165;
    }
    float _3275 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3276 = _3275 == 3.0;
    float _3277 = log2(_3263);
    float _3284 = exp2(_3277 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3107 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1377))) + ((_3113 + ((isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0))) * _2183)) * cbPerFrame._m0[3u].x));
    float _3285 = exp2(_3277 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3109 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1377))) + ((_3115 + ((isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0))) * _2183)) * cbPerFrame._m0[3u].x));
    float _3286 = exp2(_3277 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3111 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1377))) + ((_3117 + ((isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0))) * _2183)) * cbPerFrame._m0[3u].x));
    float _3295 = (_3275 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3295 * (_3276 ? _3284 : (_3284 + (cbSceneParam._m0[72u].w * _3257)));
    SV_Target.y = _3295 * (_3276 ? _3285 : (_3285 + (cbSceneParam._m0[72u].w * _3259)));
    SV_Target.z = _3295 * (_3276 ? _3286 : (_3286 + (cbSceneParam._m0[72u].w * _3261)));
    SV_Target.w = cbInstanceData._m0[_3137].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3137].w;
}


