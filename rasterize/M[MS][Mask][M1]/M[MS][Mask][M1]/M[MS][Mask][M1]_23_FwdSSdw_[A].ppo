#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1345;
float _3750;
float _3751;
float _3752;
float _3753;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3762 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3773 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3784 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[23u].w) + _417) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3795 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _442 = (_435 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _443 = (_435 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _444 = (_435 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _448 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _442;
    float _451 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _443;
    float _454 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _444;
    float _461 = ((_442 - _448) * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) + _448;
    float _462 = ((_443 - _451) * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) + _451;
    float _463 = ((_444 - _454) * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) + _454;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _538 = ((_508.z - _529) * _435) + _529;
    float _541 = ((((_508.x - _527) * _435) + _527) * 2.0) + (-1.0);
    float _542 = ((((_508.y - _528) * _435) + _528) * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3806 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _548 = sqrt(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _580 = (_541 + ((((_481.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_568.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _581 = (_542 + ((((_481.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_568.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _584 = fma(_548, _239, fma(_581, _246, _580 * _232));
    float _587 = fma(_548, _240, fma(_581, _247, _580 * _233));
    float _590 = fma(_548, _241, fma(_581, _248, _580 * _234));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _633 = (cbMtdParam._m0[19u].x + dot(vec4(_594 * _584, _594 * _587, _594 * _590, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_623 - _624) * cbMtdParam._m0[24u].z) + _624) * cbMtdParam._m0[21u].z);
    float _3817 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _641 = (_634 * (cbMtdParam._m0[17u].x - _461)) + _461;
    float _642 = (_634 * (cbMtdParam._m0[17u].y - _462)) + _462;
    float _643 = (_634 * (cbMtdParam._m0[17u].z - _463)) + _463;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _671 = _669.x;
    float _689 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _671) * _435) + _671;
    float _693 = ((_655.x - _689) * cbMtdParam._m0[19u].z) + _689;
    float _695 = _693 - (_693 * _634);
    float _700 = (((_481.z - _538) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _538;
    float _704 = ((_568.z - _700) * cbMtdParam._m0[19u].w) + _700;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _724 = (_717.x * 2.0) + (-1.0);
    float _725 = (_717.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _3828 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _734 = ((_717.z - _704) * _634) + _704;
    float _744 = ((sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) - _548) * _634) + _548;
    float _747 = (((_724 - _580) * _634) + _580) + (cbMtdParam._m0[21u].x * _580);
    float _748 = (((_725 - _581) * _634) + _581) + (cbMtdParam._m0[21u].x * _581);
    float _750 = cbMtdParam._m0[22u].x + _568.w;
    float _753 = fma(_744, _239, fma(_748, _246, _747 * _232));
    float _756 = fma(_744, _240, fma(_748, _247, _747 * _233));
    float _759 = fma(_744, _241, fma(_748, _248, _747 * _234));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3839 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _767 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3861 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3872 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3883 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3894 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _772 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _837 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _827);
    float _838 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _827);
    float _839 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _827);
    float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
    float _844 = _837 * _843;
    float _845 = _838 * _843;
    float _846 = _839 * _843;
    vec4 _851 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _853 = _851.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1025 = sqrt(((_837 * _837) + (_838 * _838)) + (_839 * _839));
        float _1031 = (cbMatDynParam._m0[5u].x * _1025) + cbMatDynParam._m0[5u].y;
        float _3905 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1036 = (cbMatDynParam._m0[5u].z * _1025) + cbMatDynParam._m0[5u].w;
        float _3916 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) - _1032)) + _1032) < ((_853 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _883 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _886 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _889 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _902 = _272 + 9u;
    uint _903 = _902 + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_903].z;
    float _3927 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _915 = 1.0 - _772;
    float _916 = _912 * _915;
    float _917 = _913 * _915;
    float _918 = _914 * _915;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _772;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _772;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _772;
    float _926 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _942 = ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * TEXCOORD_5.w) * _938.x;
    float _943 = dot(vec3(_764, _765, _766), vec3(_844, _845, _846));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _764) - _844;
    float _951 = (_946 * _765) - _845;
    float _952 = (_946 * _766) - _846;
    float _956 = abs(dot(vec3(_844, _845, _846), vec3(_764, _765, _766)));
    float _3960 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_767);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _977 = (1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _958;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1344;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1069 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1073 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1077 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1102 = _1006 + _764;
        float _1103 = _1010 + _765;
        float _1104 = _1014 + _766;
        float _1114 = fma(_1104, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102)) - _1069;
        float _1115 = fma(_1104, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102)) - _1073;
        float _1116 = fma(_1104, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102)) - _1077;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1069 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1073 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[34u].z) + ((((((_1077 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1172 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1138.x + (-0.5));
        float _1174 = _1172 * (_1138.y + (-0.5));
        float _1175 = _1172 * (_1138.z + (-0.5));
        float _1182 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1145.x + (-0.5));
        float _1184 = _1182 * (_1145.y + (-0.5));
        float _1185 = _1182 * (_1145.z + (-0.5));
        float _1192 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1152.x + (-0.5));
        float _1194 = _1192 * (_1152.y + (-0.5));
        float _1195 = _1192 * (_1152.z + (-0.5));
        float _1202 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1159.x + (-0.5));
        float _1204 = _1202 * (_1159.y + (-0.5));
        float _1205 = _1202 * (_1159.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1226 = (dot(vec3(_764, _765, _766), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1236 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4008 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1238 + 1.0))) + _1243) * _1206;
        float _1253 = _1174 * 0.5;
        float _1254 = _1184 * 0.5;
        float _1255 = _1194 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_764, _765, _766), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4041 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1280 + 1.0))) + _1285) * _1207;
        float _1295 = _1175 * 0.5;
        float _1296 = _1185 * 0.5;
        float _1297 = _1195 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_764, _765, _766), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4074 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1322 + 1.0))) + _1327) * _1208;
        _1344 = _1175;
        _1346 = _1174;
        _1347 = _1173;
        _1348 = _1185;
        _1349 = _1184;
        _1350 = _1183;
        _1351 = _1195;
        _1352 = _1194;
        _1353 = _1193;
        _1354 = _1208;
        _1355 = _1207;
        _1356 = _1206;
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1345;
        _1346 = _1345;
        _1347 = _1345;
        _1348 = _1345;
        _1349 = _1345;
        _1350 = _1345;
        _1351 = _1345;
        _1352 = _1345;
        _1353 = _1345;
        _1354 = _1345;
        _1355 = _1345;
        _1356 = _1345;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1391 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1395 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1418 = _1006 + _764;
        float _1419 = _1010 + _765;
        float _1420 = _1014 + _766;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_764, _765, _766), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4137 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_764, _765, _766), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4170 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_764, _765, _766), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4203 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1345;
        _1657 = _1345;
        _1658 = _1345;
        _1659 = _1345;
        _1660 = _1345;
        _1661 = _1345;
        _1662 = _1345;
        _1663 = _1345;
        _1664 = _1345;
        _1665 = _1345;
        _1666 = _1345;
        _1667 = _1345;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1358)) + _1358;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _950 * 0.5;
    float _1725 = _951 * 0.5;
    float _1726 = _952 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1344, _1348, _1351, _1354));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1855 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1858 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1886 = frontier_phi_17_15_ladder;
        }
        float _2110;
        if (_1855 > 0.0)
        {
            _2110 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2110 = frontier_phi_26_22_ladder;
        }
        float _2367;
        if (_1858 > 0.0)
        {
            _2367 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2367 = frontier_phi_38_33_ladder;
        }
        float _2369 = isnan(_2110) ? _1886 : (isnan(_1886) ? _2110 : min(_1886, _2110));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1852) + _1841;
        float _2375 = (_2370 * _1855) + _1845;
        float _2376 = (_2370 * _1858) + _1849;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_16_38_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_16_38_ladder_2;
        _1876 = frontier_phi_16_38_ladder_1;
        _1878 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1793);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1951 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1954 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2115;
        if (_1948 > 0.0)
        {
            _2115 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2115 = frontier_phi_28_24_ladder;
        }
        float _2394;
        if (_1951 > 0.0)
        {
            _2394 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2394 = frontier_phi_40_35_ladder;
        }
        float _2607;
        if (_1954 > 0.0)
        {
            _2607 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2607 = frontier_phi_49_46_ladder;
        }
        float _2609 = isnan(_2394) ? _2115 : (isnan(_2115) ? _2394 : min(_2115, _2394));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _1948) + _1937;
        float _2615 = (_2610 * _1951) + _1941;
        float _2616 = (_2610 * _1954) + _1945;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2618 = (-1.0) - _2617;
        float _2620 = _2617 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2616 > _2620) || ((_2616 < _2618) || ((_2615 > _2620) || ((_2615 < _2618) || ((_2614 < _2618) || (_2614 > _2620))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2616, cbModelParam._m0[17u].z, fma(_2615, cbModelParam._m0[17u].y, _2614 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2616, cbModelParam._m0[18u].z, fma(_2615, cbModelParam._m0[18u].y, _2614 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2616, cbModelParam._m0[19u].z, fma(_2615, cbModelParam._m0[19u].y, _2614 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_25_49_ladder = _2815.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2815.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2815.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_25_49_ladder_2;
        _1975 = frontier_phi_25_49_ladder_1;
        _1977 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1883);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1990 = (((_977 * _926) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1992 = (((_977 * _928) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1994 = (((_977 * _929) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    vec4 _2011 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_864, _865));
    float _2013 = _2011.w;
    float _2025 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2013);
    float _2026 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2013);
    float _2027 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2013);
    uvec4 _2031 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2033 = _2031.x * 14u;
    uint _2034 = _2033 + 13u;
    float _2041 = _942 + (-1.0);
    float _2046 = (cbLight._m0[_2034].x * _2041) + 1.0;
    float _2047 = (cbLight._m0[_2034].y * _2041) + 1.0;
    float _2048 = (cbLight._m0[_2034].z * _2041) + 1.0;
    float _2049 = (cbLight._m0[_2034].w * _2041) + 1.0;
    uint _2050 = _2033 + 5u;
    float _2056 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2060 = _2033 + 4u;
    float _2069 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
    uint _2073 = _2033 | 1u;
    float _2084 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_764, _765, _766));
    float _2087 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_764, _765, _766));
    float _4339 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _4350 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2094 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2101 = ((cbLight._m0[_2050].x * _2056) * _2094) + (((cbLight._m0[_2060].x * _2025) * _2069) * _2092);
    float _2102 = ((_2056 * cbLight._m0[_2050].y) * _2094) + (((cbLight._m0[_2060].y * _2026) * _2069) * _2092);
    float _2103 = ((_2056 * cbLight._m0[_2050].z) * _2094) + (((cbLight._m0[_2060].z * _2027) * _2069) * _2092);
    uvec4 _2107 = floatBitsToUint(cbLight._m0[_2033 + 12u]);
    bool _2109 = _2107.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2109)
    {
        _2120 = _2101;
        _2122 = _2102;
        _2124 = _2103;
    }
    else
    {
        uint _2128 = _2033 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_2033 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4361 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2147 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2101;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2102;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2103;
    }
    bool _2127 = _2107.y == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2127)
    {
        _2165 = _2120;
        _2167 = _2122;
        _2169 = _2124;
    }
    else
    {
        uint _2338 = _2033 + 7u;
        float _2354 = (dot(vec3(cbLight._m0[_2033 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4377 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2357 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2165 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2120;
        _2167 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2122;
        _2169 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2124;
    }
    uint _2172 = _2033 + 8u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _767) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_2033].x + _844;
    float _2188 = cbLight._m0[_2033].y + _845;
    float _2189 = cbLight._m0[_2033].z + _846;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2033].xyz));
    float _4393 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2201 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2202 = dot(vec3(_764, _765, _766), vec3(_2194, _2195, _2196));
    float _4415 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2206 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2194, _2195, _2196));
    float _4426 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = _2186 * _2186;
    float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2223 = 0.959999978542327880859375 - _923;
    float _2225 = 0.959999978542327880859375 - _924;
    float _2226 = 0.959999978542327880859375 - _925;
    float _2233 = 1.0 - _2186;
    float _2244 = (0.5 / (((_2201 * ((_2200 * _2233) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2233) + _2186) * _2200))) * _2200;
    float _4437 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
    uint _2260 = _2033 + 9u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _767) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2073].x + _844;
    float _2274 = cbLight._m0[_2073].y + _845;
    float _2275 = cbLight._m0[_2073].z + _846;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2073].xyz));
    float _4448 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2287 = dot(vec3(_764, _765, _766), vec3(_2280, _2281, _2282));
    float _4459 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2280, _2281, _2282));
    float _4470 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2272 * _2272;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2313 = 1.0 - _2272;
    float _2323 = (0.5 / (((_2201 * ((_2286 * _2313) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2313) + _2272) * _2286))) * _2286;
    float _4481 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    float _2335 = (((((_2306 * _2223) + _926) * cbLight._m0[_2260].x) * _2325) * _2056) + ((((cbLight._m0[_2172].x * _2025) * ((_2222 * _2223) + _926)) * _2246) * _2069);
    float _2336 = (((((_2306 * _2225) + _928) * cbLight._m0[_2260].y) * _2325) * _2056) + ((((cbLight._m0[_2172].y * _2026) * ((_2222 * _2225) + _928)) * _2246) * _2069);
    float _2337 = (((((_2306 * _2226) + _929) * cbLight._m0[_2260].z) * _2325) * _2056) + ((((cbLight._m0[_2172].z * _2027) * ((_2222 * _2226) + _929)) * _2246) * _2069);
    float _2399;
    float _2401;
    float _2403;
    if (_2109)
    {
        _2399 = _2335;
        _2401 = _2336;
        _2403 = _2337;
    }
    else
    {
        uint _2405 = _2033 + 2u;
        uint _2409 = _2033 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _767) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _844;
        float _2426 = cbLight._m0[_2405].y + _845;
        float _2427 = cbLight._m0[_2405].z + _846;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2405].xyz));
        float _4492 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2439 = dot(vec3(_764, _765, _766), vec3(_2432, _2433, _2434));
        float _4503 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4514 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2465 = 1.0 - _2424;
        float _2475 = (0.5 / (((_2201 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2465) + _2424) * _2438))) * _2438;
        float _4525 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2399 = (((((_2458 * _2223) + _926) * cbLight._m0[_2409].x) * _2477) * _2478) + _2335;
        _2401 = (((((_2458 * _2225) + _928) * cbLight._m0[_2409].y) * _2477) * _2478) + _2336;
        _2403 = (((((_2458 * _2226) + _929) * cbLight._m0[_2409].z) * _2477) * _2478) + _2337;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2127)
    {
        _2513 = _2399;
        _2515 = _2401;
        _2517 = _2403;
    }
    else
    {
        uint _2524 = _2033 + 3u;
        uint _2528 = _2033 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _767) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _844;
        float _2545 = cbLight._m0[_2524].y + _845;
        float _2546 = cbLight._m0[_2524].z + _846;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2524].xyz));
        float _4541 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2558 = dot(vec3(_764, _765, _766), vec3(_2551, _2552, _2553));
        float _4552 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4563 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2584 = 1.0 - _2543;
        float _2594 = (0.5 / (((_2201 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2584) + _2543) * _2557))) * _2557;
        float _4574 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2513 = (((((_2577 * _2223) + _926) * cbLight._m0[_2528].x) * _2596) * _2597) + _2399;
        _2515 = (((((_2577 * _2225) + _928) * cbLight._m0[_2528].y) * _2596) * _2597) + _2401;
        _2517 = (((((_2577 * _2226) + _929) * cbLight._m0[_2528].z) * _2596) * _2597) + _2403;
    }
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_2031.y == 0u)
    {
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2672;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2672;
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2672;
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.x;
        uint _2699 = uint((float(_2687.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _2688))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _2688)));
        float _2709 = (log2(_2675 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2710 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        uint _2713 = uint(isnan(14.0) ? _2710 : (isnan(_2710) ? 14.0 : min(_2710, 14.0)));
        uvec4 _2718 = texelFetch(g_lightClusterGridBuffer, int(((_2713 << 2u) + (_2699 << 6u)) >> 2u));
        uint _2719 = _2718.x;
        uint _2720 = _2687.z;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((((1u << ((_2720 >> 4u) & 15u)) + 4294967295u) & _2719) == 0u) || ((_2720 & 240u) == 0u))
        {
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
        }
        else
        {
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            uint _2979 = 0u;
            uint _2988;
            bool _2989;
            for (;;)
            {
                _2988 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                _2989 = _2988 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2989)
                {
                    frontier_phi_66_pred = _2973;
                    frontier_phi_66_pred_1 = _2978;
                    frontier_phi_66_pred_2 = _2977;
                    frontier_phi_66_pred_3 = _2976;
                    frontier_phi_66_pred_4 = _2975;
                    frontier_phi_66_pred_5 = _2974;
                }
                else
                {
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    uint _3124;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2988;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    for (;;)
                    {
                        uint _3128 = uint(findLSB(_3124)) + (_2979 << 5u);
                        uint _3125 = (_3124 + 4294967295u) & _3124;
                        uint _3130 = _3128 * 48u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3150 = (_3128 * 48u) + 4u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3169 = (_3128 * 48u) + 8u;
                        vec3 _3180 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x));
                        float _3184 = _3144.x - _2673;
                        float _3185 = _3144.y - _2674;
                        float _3186 = _3144.z - _2675;
                        float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                        float _3190 = inversesqrt(_3187);
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3194 = dot(vec3(_883, _886, _889), vec3(_3191, _3192, _3193));
                        float _3199 = 1.0 - (_3187 * _3144.w);
                        float _4600 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3201 = sqrt(_3187) * _3163.w;
                        float _3204 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3194) + _3205;
                        float _3211 = _3201 * _3201;
                        float _3215 = ((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3200) / ((_3211 * 0.699999988079071044921875) + 1.0);
                        float _3219 = (-0.0) - _2673;
                        float _3220 = (-0.0) - _2674;
                        float _3221 = (-0.0) - _2675;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3236 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                        float _3237 = 1.0 - _958;
                        float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                        float _3245 = _3244 * _3244;
                        float _3246 = _3245 * _3245;
                        float _3247 = _3226 + _3191;
                        float _3248 = _3227 + _3192;
                        float _3249 = _3228 + _3193;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3257 = dot(vec3(_883, _886, _889), vec3(_3226, _3227, _3228));
                        float _4616 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3261 = dot(vec3(_883, _886, _889), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                        float _4627 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                        float _3269 = _3204 * _3245;
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3194) + _3270;
                        float _4638 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3275 = 1.0 - _3245;
                        float _3285 = (0.5 / (((_3274 * ((_3260 * _3275) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3245) * _3260))) * _3274;
                        float _4649 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3296 = (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3268 * _3268) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125))) * _3200;
                        _3048 = (_3215 * _3163.x) + _3121;
                        _3049 = (_3215 * _3163.y) + _3122;
                        _3050 = (_3215 * _3163.z) + _3123;
                        _3045 = (_3296 * _3180.x) + _3118;
                        _3046 = (_3296 * _3180.y) + _3119;
                        _3047 = (_3296 * _3180.z) + _3120;
                        if (_3125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3125;
                        }
                    }
                    frontier_phi_66_pred = _3045;
                    frontier_phi_66_pred_1 = _3050;
                    frontier_phi_66_pred_2 = _3049;
                    frontier_phi_66_pred_3 = _3048;
                    frontier_phi_66_pred_4 = _3047;
                    frontier_phi_66_pred_5 = _3046;
                }
                _2821 = frontier_phi_66_pred;
                _2831 = frontier_phi_66_pred_1;
                _2829 = frontier_phi_66_pred_2;
                _2827 = frontier_phi_66_pred_3;
                _2825 = frontier_phi_66_pred_4;
                _2823 = frontier_phi_66_pred_5;
                uint _2980 = _2979 + 1u;
                if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2973 = _2821;
                    _2974 = _2823;
                    _2975 = _2825;
                    _2976 = _2827;
                    _2977 = _2829;
                    _2978 = _2831;
                    _2979 = _2980;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
        }
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.z;
        uint _2837 = (_2835 >> 8u) & 15u;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((4294967295u << _2837) & _2719) == 0u)
        {
            _2941 = _2820;
            _2943 = _2822;
            _2945 = _2824;
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
        }
        else
        {
            float _2966 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
            float _2967 = _2966 * _2673;
            float _2968 = _2966 * _2674;
            float _2969 = _2966 * _2675;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2837 < ((_2835 >> 12u) & 15u))
            {
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _3101 = _2820;
                float _3102 = _2822;
                float _3103 = _2824;
                float _3104 = _2826;
                float _3105 = _2828;
                float _3106 = _2830;
                uint _3107 = _2837;
                uint _3116;
                bool _3117;
                for (;;)
                {
                    _3116 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                    _3117 = _3116 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3117)
                    {
                        frontier_phi_77_pred = _3106;
                        frontier_phi_77_pred_1 = _3105;
                        frontier_phi_77_pred_2 = _3104;
                        frontier_phi_77_pred_3 = _3103;
                        frontier_phi_77_pred_4 = _3102;
                        frontier_phi_77_pred_5 = _3101;
                    }
                    else
                    {
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        uint _3329 = _3116;
                        uint _3330;
                        vec4 _3355;
                        float _3356;
                        vec4 _3371;
                        vec3 _3383;
                        vec4 _3398;
                        vec4 _3413;
                        float _3459;
                        bool _3460;
                        for (;;)
                        {
                            uint _3340 = ((_3107 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3329));
                            _3330 = (_3329 + 4294967295u) & _3329;
                            uint _3342 = _3340 * 40u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3356 = _3355.w;
                            uint _3358 = (_3340 * 40u) + 4u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3340 * 40u) + 8u;
                            _3383 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x));
                            uint _3385 = (_3340 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3340 * 40u) + 20u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3340 * 40u) + 24u;
                            vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3434 = (_3340 * 40u) + 28u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3459 = fma(_2675, _3447.z, fma(_2674, _3447.y, _3447.x * _2673)) + _3447.w;
                            _3460 = !((fma(_2675, _3428.z, fma(_2674, _3428.y, _3428.x * _2673)) + _3428.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3460)
                            {
                                float _3487 = _3355.x - _2673;
                                float _3488 = _3355.y - _2674;
                                float _3489 = _3355.z - _2675;
                                float _3490 = dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489));
                                float _3493 = inversesqrt(_3490);
                                float _3494 = _3493 * _3487;
                                float _3495 = _3493 * _3488;
                                float _3496 = _3493 * _3489;
                                float _3500 = 1.0 - (_3490 / (_3356 * _3356));
                                float _4660 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3505 = sqrt(_3490) * _3371.w;
                                float _3507 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                                float _3508 = _3507 * _3507;
                                float _3511 = ((1.0 - _3508) * dot(vec3(_3494, _3495, _3496), vec3(_883, _886, _889))) + _3508;
                                float _3514 = _3505 * _3505;
                                float _3518 = (fma(_2675, _3398.z, fma(_2674, _3398.y, _3398.x * _2673)) + _3398.w) / _3459;
                                float _3519 = (fma(_2675, _3413.z, fma(_2674, _3413.y, _3413.x * _2673)) + _3413.w) / _3459;
                                float _3523 = 1.0 - dot(vec2(_3518, _3519), vec2(_3518, _3519));
                                float _4676 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3525 = _3524 * (((isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))) * _3501) / ((_3514 * 0.699999988079071044921875) + 1.0));
                                float _3537 = exp2(log2(1.0 / ((_3514 * 3.5) + 5.0)) * 0.25);
                                float _3538 = 1.0 - _958;
                                float _3545 = sqrt(1.0 - ((1.0 - (_3538 * _3538)) * (1.0 - (_3537 * _3537))));
                                float _3546 = _3545 * _3545;
                                float _3547 = _3546 * _3546;
                                float _3548 = _3494 - _2967;
                                float _3549 = _3495 - _2968;
                                float _3550 = _3496 - _2969;
                                float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                                float _3558 = dot(vec3(_883, _886, _889), vec3((-0.0) - _2967, (-0.0) - _2968, (-0.0) - _2969));
                                float _4687 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3561 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3562 = dot(vec3(_883, _886, _889), vec3(_3554 * _3548, _3554 * _3549, _3554 * _3550));
                                float _4698 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3569 = ((_3565 * _3565) * (_3547 + (-1.0))) + 1.0;
                                float _3570 = _3507 * _3546;
                                float _3571 = _3570 * _3570;
                                float _3577 = ((1.0 - _3571) * dot(vec3(_883, _886, _889), vec3(_3494, _3495, _3496))) + _3571;
                                float _4709 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3579 = 1.0 - _3546;
                                float _3589 = (0.5 / (((_3578 * ((_3561 * _3579) + _3546)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3546) * _3561))) * _3578;
                                float _4720 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3599 = (_3524 * _3501) * (((_3547 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3569 * _3569) * ((_3514 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3525 * _3371.y;
                                frontier_phi_83_pred_1 = _3525 * _3371.x;
                                frontier_phi_83_pred_2 = _3599 * _3383.z;
                                frontier_phi_83_pred_3 = _3599 * _3383.y;
                                frontier_phi_83_pred_4 = _3599 * _3383.x;
                                frontier_phi_83_pred_5 = _3525 * _3371.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3607 = frontier_phi_83_pred;
                            _3606 = frontier_phi_83_pred_1;
                            _3605 = frontier_phi_83_pred_2;
                            _3604 = frontier_phi_83_pred_3;
                            _3603 = frontier_phi_83_pred_4;
                            _3608 = frontier_phi_83_pred_5;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            if (_3330 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3330;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3315;
                        frontier_phi_77_pred_1 = _3314;
                        frontier_phi_77_pred_2 = _3313;
                        frontier_phi_77_pred_3 = _3312;
                        frontier_phi_77_pred_4 = _3311;
                        frontier_phi_77_pred_5 = _3310;
                    }
                    _2952 = frontier_phi_77_pred;
                    _2950 = frontier_phi_77_pred_1;
                    _2948 = frontier_phi_77_pred_2;
                    _2946 = frontier_phi_77_pred_3;
                    _2944 = frontier_phi_77_pred_4;
                    _2942 = frontier_phi_77_pred_5;
                    uint _3108 = _3107 + 1u;
                    if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3101 = _2942;
                        _3102 = _2944;
                        _3103 = _2946;
                        _3104 = _2948;
                        _3105 = _2950;
                        _3106 = _2952;
                        _3107 = _3108;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2946;
                frontier_phi_58_59_ladder_1 = _2952;
                frontier_phi_58_59_ladder_2 = _2950;
                frontier_phi_58_59_ladder_3 = _2948;
                frontier_phi_58_59_ladder_4 = _2944;
                frontier_phi_58_59_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_58_59_ladder = _2824;
                frontier_phi_58_59_ladder_1 = _2830;
                frontier_phi_58_59_ladder_2 = _2828;
                frontier_phi_58_59_ladder_3 = _2826;
                frontier_phi_58_59_ladder_4 = _2822;
                frontier_phi_58_59_ladder_5 = _2820;
            }
            _2941 = frontier_phi_58_59_ladder_5;
            _2943 = frontier_phi_58_59_ladder_4;
            _2945 = frontier_phi_58_59_ladder;
            _2947 = frontier_phi_58_59_ladder_3;
            _2949 = frontier_phi_58_59_ladder_2;
            _2951 = frontier_phi_58_59_ladder_1;
        }
        float _2956 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2732 = (_2956 * _2947) + _2165;
        _2734 = (_2956 * _2949) + _2167;
        _2736 = (_2956 * _2951) + _2169;
        _2738 = ((_2941 * _926) * _2956) + _2513;
        _2740 = ((_2943 * _928) * _2956) + _2515;
        _2742 = ((_2945 * _929) * _2956) + _2517;
    }
    else
    {
        _2732 = _2165;
        _2734 = _2167;
        _2736 = _2169;
        _2738 = _2513;
        _2740 = _2515;
        _2742 = _2517;
    }
    float _4736 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4747 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4758 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2759 = ((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2732 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _942))) + ((_2738 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2760 = ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2734 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _942))) + ((_2740 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2761 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2736 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _942))) + ((_2742 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    uint _2762 = _272 + 6u;
    float _2770 = _864 / cbSceneParam._m0[86u].x;
    float _2771 = _865 / cbSceneParam._m0[86u].y;
    vec4 _2785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2787 = _2785.x;
    float _2788 = _2785.y;
    float _2789 = _2785.z;
    float _2790 = _2785.w;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _2845 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _2846 = _2845 / _786;
        float _2857 = _2846 * _837;
        float _2858 = _838 * _2846;
        float _2859 = (-0.0) - _2858;
        float _2861 = _2846 * _839;
        float _2863 = (cbSceneParam._m0[77u].w * _2859) / _2845;
        float _2864 = _2863 + cbSceneParam._m0[79u].w;
        float _2865 = cbSceneParam._m0[79u].w - _2858;
        float _2871 = sqrt(((_2857 * _2857) + (_2858 * _2858)) + (_2861 * _2861));
        float _2874 = (1.0 - (cbSceneParam._m0[77u].w / _2845)) * _2871;
        float _2879 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2881 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3058;
        if (abs((_2859 - _2863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3058 = ((((_2864 > 0.0) ? exp2(_2879 * _2864) : (2.0 - exp2(_2881 * _2864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2874;
        }
        else
        {
            float _3002 = 1.0 / cbSceneParam._m0[80u].x;
            float _3003 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : max(_2864, _2865));
            float _3004 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : min(_2864, _2865));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            _3058 = ((abs(_2871 / _2859) * cbSceneParam._m0[80u].y) * ((((_3013 - _3014) * 2.0) - ((exp2(_2879 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0)))) - exp2(_2879 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))))) * _3002)) - ((exp2(_2881 * _3013) - exp2(_2881 * _3014)) * _3002))) + (_2874 * cbSceneParam._m0[80u].z);
        }
        vec4 _3060 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, 1.0), 0.0);
        float _3069 = exp2((_3058 * (-1.44269502162933349609375)) * (1.0 - _3060.w));
        float _3070 = log2(_3069);
        float _3086 = log2(_2790);
        _2883 = (exp2(_3086 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].x)) * _3060.x) / cbSceneParam._m0[78u].x)) + _2787;
        _2885 = (exp2(_3086 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].y)) * _3060.y) / cbSceneParam._m0[78u].y)) + _2788;
        _2887 = (exp2(_3086 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].z)) * _3060.z) / cbSceneParam._m0[78u].z)) + _2789;
        _2889 = _3069 * _2790;
    }
    else
    {
        _2883 = _2787;
        _2885 = _2788;
        _2887 = _2789;
        _2889 = _2790;
    }
    bool _3096;
    vec4 _2899;
    vec4 _2921;
    float _2923;
    float _2927;
    float _2928;
    float _2929;
    float _2930;
    bool _2940;
    for (;;)
    {
        _2899 = cbMatDynParam._m0[0u];
        float _2901 = roundEven(_2899.y);
        bool _2902 = _2901 == 3.0;
        float _2903 = log2(_2889);
        float _2910 = exp2(_2903 * cbSceneParam._m0[78u].x) * _2759;
        float _2911 = exp2(_2903 * cbSceneParam._m0[78u].y) * _2760;
        float _2912 = exp2(_2903 * cbSceneParam._m0[78u].z) * _2761;
        float _2919 = _853 + (-0.5);
        _2921 = cbMtdParam._m0[1u];
        _2923 = _2921.y * _2919;
        float _2926 = (_2901 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2927 = _2926 * (_2902 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2883)));
        _2928 = _2926 * (_2902 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2885)));
        _2929 = _2926 * (_2902 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2887)));
        _2930 = _2919 * 0.999000012874603271484375;
        _2940 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2940)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2930) < 0.5)
            {
                _3096 = true;
                break;
            }
        }
        uint _3037 = _902 + uint(_2899.w);
        if ((cbInstanceData._m0[_3037].w < 1.0) && ((cbInstanceData._m0[_3037].w + _2930) < 0.5))
        {
            _3096 = true;
            break;
        }
        if ((_2923 + 1.0) < _2921.x)
        {
            _3096 = true;
            break;
        }
        _3096 = false;
        break;
    }
    float _3301;
    if (_3096)
    {
        discard_state = true;
        _3301 = 0.0;
    }
    else
    {
        _3301 = cbInstanceData._m0[_2762].w;
    }
    SV_Target.x = _2927;
    SV_Target.y = _2928;
    SV_Target.z = _2929;
    SV_Target.w = _3301;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2762].w;
    discard_exit();
}


