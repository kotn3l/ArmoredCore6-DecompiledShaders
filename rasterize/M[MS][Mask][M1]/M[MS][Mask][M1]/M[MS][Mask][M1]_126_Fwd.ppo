#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1583;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _404 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_392 - _404) * cbMtdParam._m0[23u].w) + _404) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3906 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _429 = (_422 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _430 = (_422 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _431 = (_422 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[23u].w) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _502 = (_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429;
    float _503 = (_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430;
    float _504 = (_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _564 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _351.z) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[23u].w) + _552) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3928 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _572 = (_565 * ((_523.x * cbMtdParam._m0[14u].x) - _502)) + _502;
    float _573 = (_565 * ((_523.y * cbMtdParam._m0[14u].y) - _503)) + _503;
    float _574 = (_565 * ((_523.z * cbMtdParam._m0[14u].z) - _504)) + _504;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _611 = _609.x;
    float _612 = _609.y;
    float _613 = _609.z;
    float _620 = ((_592.x - _611) * _422) + _611;
    float _621 = ((_592.y - _612) * _422) + _612;
    float _622 = ((_592.z - _613) * _422) + _613;
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _645 = ((_634.x - _620) * _495) + _620;
    float _646 = ((_634.y - _621) * _495) + _621;
    float _647 = ((_634.z - _622) * _495) + _622;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _672 = ((_659.z - _647) * _565) + _647;
    float _675 = ((((_659.x - _645) * _565) + _645) * 2.0) + (-1.0);
    float _677 = ((((_659.y - _646) * _565) + _646) * 2.0) + (-1.0);
    float _678 = dot(vec2(_675, _677), vec2(_675, _677));
    float _3939 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _709 = (((_697.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _675;
    float _710 = (((_697.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _677;
    float _713 = fma(_683, _253, fma(_710, _260, _709 * _246));
    float _716 = fma(_683, _254, fma(_710, _261, _709 * _247));
    float _719 = fma(_683, _255, fma(_710, _262, _709 * _248));
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _761 = (cbMtdParam._m0[19u].x + dot(vec4(_723 * _713, _723 * _716, _723 * _719, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_752 - _753) * cbMtdParam._m0[24u].z) + _753) * cbMtdParam._m0[21u].z);
    float _3950 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _764 = (-0.0) - cbMtdParam._m0[24u].x;
    float _766 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
    float _774 = _762 - ((_762 * TEXCOORD_8.x) * _767);
    float _775 = _762 - ((_762 * TEXCOORD_8.y) * _767);
    float _776 = _762 - ((_762 * TEXCOORD_8.z) * _767);
    float _783 = (_774 * (cbMtdParam._m0[17u].x - _572)) + _572;
    float _784 = (_775 * (cbMtdParam._m0[17u].y - _573)) + _573;
    float _785 = (_776 * (cbMtdParam._m0[17u].z - _574)) + _574;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _826 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_799 - _800) * cbMtdParam._m0[24u].w) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3971 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _835 = ((((cbMtdParam._m0[10u].x - _783) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _827) + _783;
    float _836 = ((((cbMtdParam._m0[10u].y - _784) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _827) + _784;
    float _837 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _785)) * _827) + _785;
    vec4 _863 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _865 = _863.x;
    float _883 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _865) * _422) + _865;
    float _900 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _883) * _495) + _883;
    float _917 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _284) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _285) + cbTextureTilingScale._m0[10u].w)).x - _900) * _565) + _900;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _917) * cbMtdParam._m0[19u].z) + _917;
    float _923 = _921 - (_921 * _774);
    float _925 = _923 - (_923 * _827);
    float _929 = (cbMtdParam._m0[19u].w * (_697.z - _672)) + _672;
    vec4 _945 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _952 = (_945.x * 2.0) + (-1.0);
    float _953 = (_945.y * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _3982 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _962 = ((_945.z - _929) * _774) + _929;
    float _965 = ((cbMtdParam._m0[23u].x - _962) * _827) + _962;
    vec4 _988 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _994 = (_988.x * 2.0) + (-1.0);
    float _995 = (_988.y * 2.0) + (-1.0);
    float _996 = dot(vec2(_994, _995), vec2(_994, _995));
    float _3993 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _1011 = ((sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _683) * _776) + _683;
    float _1014 = (((_952 - _709) * _774) + _709) + (cbMtdParam._m0[21u].x * _709);
    float _1015 = (((_953 - _710) * _775) + _710) + (cbMtdParam._m0[21u].x * _710);
    float _1026 = (((_994 - _1014) + (_1014 * cbMtdParam._m0[22u].z)) * _827) + _1014;
    float _1027 = (((_995 - _1015) + (_1015 * cbMtdParam._m0[22u].z)) * _827) + _1015;
    float _1028 = (_827 * (sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _1011)) + _1011;
    float _1030 = cbMtdParam._m0[22u].x + _697.w;
    float _1033 = fma(_1028, _253, fma(_1027, _260, _1026 * _246));
    float _1036 = fma(_1028, _254, fma(_1027, _261, _1026 * _247));
    float _1039 = fma(_1028, _255, fma(_1027, _262, _1026 * _248));
    float _1043 = inversesqrt(dot(vec3(_1033, _1036, _1039), vec3(_1033, _1036, _1039)));
    float _1044 = _1043 * _1033;
    float _1045 = _1043 * _1036;
    float _1046 = _1043 * _1039;
    float _4004 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _1047 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4026 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4037 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4048 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4059 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _1052 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1066 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1116 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1106);
    float _1117 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1106);
    float _1118 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1106);
    float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
    float _1123 = _1116 * _1122;
    float _1124 = _1117 * _1122;
    float _1125 = _1118 * _1122;
    float _1131 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1132 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1150 = fma(_1046, cbSceneParam._m0[5u].z, fma(_1045, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1044));
    float _1153 = fma(_1046, cbSceneParam._m0[6u].z, fma(_1045, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1044));
    float _1156 = fma(_1046, cbSceneParam._m0[7u].z, fma(_1045, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1044));
    uint _1170 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1176 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1170].x;
    float _1177 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1170].y;
    float _1178 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1170].z;
    float _4070 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1182 = 1.0 - _1052;
    float _1183 = _1179 * _1182;
    float _1184 = _1180 * _1182;
    float _1185 = _1181 * _1182;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1052;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1052;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1052;
    float _1193 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    float _1196 = _1192 + 0.039999999105930328369140625;
    vec4 _1205 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1131, cbSceneParam._m0[86u].y * _1132));
    float _1209 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _1205.x;
    float _1210 = dot(vec3(_1044, _1045, _1046), vec3(_1123, _1124, _1125));
    float _1213 = _1210 * 2.0;
    float _1217 = (_1213 * _1044) - _1123;
    float _1218 = (_1213 * _1045) - _1124;
    float _1219 = (_1213 * _1046) - _1125;
    float _1223 = abs(dot(vec3(_1123, _1124, _1125), vec3(_1044, _1045, _1046)));
    float _4103 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _1225 = sqrt(_1047);
    float _1238 = exp2((_1225 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1225 * 3.0));
    float _1244 = (1.0 - _1238) * ((_1225 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1245 = _1238 * _1225;
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1582;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1307 = fma(_1281, cbModelParam._m0[26u].z, fma(_1277, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1273));
        float _1311 = fma(_1281, cbModelParam._m0[27u].z, fma(_1277, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1273));
        float _1315 = fma(_1281, cbModelParam._m0[28u].z, fma(_1277, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1273));
        float _1340 = _1273 + _1044;
        float _1341 = _1277 + _1045;
        float _1342 = _1281 + _1046;
        float _1352 = fma(_1342, cbModelParam._m0[26u].z, fma(_1341, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1340)) - _1307;
        float _1353 = fma(_1342, cbModelParam._m0[27u].z, fma(_1341, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1340)) - _1311;
        float _1354 = fma(_1342, cbModelParam._m0[28u].z, fma(_1341, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1340)) - _1315;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1307 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1311 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[34u].z) + ((((((_1315 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1410 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1376.x + (-0.5));
        float _1412 = _1410 * (_1376.y + (-0.5));
        float _1413 = _1410 * (_1376.z + (-0.5));
        float _1420 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1383.x + (-0.5));
        float _1422 = _1420 * (_1383.y + (-0.5));
        float _1423 = _1420 * (_1383.z + (-0.5));
        float _1430 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1390.x + (-0.5));
        float _1432 = _1430 * (_1390.y + (-0.5));
        float _1433 = _1430 * (_1390.z + (-0.5));
        float _1440 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1397.x + (-0.5));
        float _1442 = _1440 * (_1397.y + (-0.5));
        float _1443 = _1440 * (_1397.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1464 = (dot(vec3(_1044, _1045, _1046), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1474 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4151 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1476 + 1.0))) + _1481) * _1444;
        float _1491 = _1412 * 0.5;
        float _1492 = _1422 * 0.5;
        float _1493 = _1432 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_1044, _1045, _1046), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4184 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1518 + 1.0))) + _1523) * _1445;
        float _1533 = _1413 * 0.5;
        float _1534 = _1423 * 0.5;
        float _1535 = _1433 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_1044, _1045, _1046), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4217 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1560 + 1.0))) + _1565) * _1446;
        _1582 = _1413;
        _1584 = _1412;
        _1585 = _1411;
        _1586 = _1423;
        _1587 = _1422;
        _1588 = _1421;
        _1589 = _1433;
        _1590 = _1432;
        _1591 = _1431;
        _1592 = _1446;
        _1593 = _1445;
        _1594 = _1444;
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1597 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _1583;
        _1584 = _1583;
        _1585 = _1583;
        _1586 = _1583;
        _1587 = _1583;
        _1588 = _1583;
        _1589 = _1583;
        _1590 = _1583;
        _1591 = _1583;
        _1592 = _1583;
        _1593 = _1583;
        _1594 = _1583;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1620 = fma(_1281, cbModelParam._m0[30u].z, fma(_1277, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273));
        float _1624 = fma(_1281, cbModelParam._m0[31u].z, fma(_1277, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273));
        float _1628 = fma(_1281, cbModelParam._m0[32u].z, fma(_1277, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273));
        float _1651 = _1273 + _1044;
        float _1652 = _1277 + _1045;
        float _1653 = _1281 + _1046;
        float _1663 = fma(_1653, cbModelParam._m0[30u].z, fma(_1652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1651)) - _1620;
        float _1664 = fma(_1653, cbModelParam._m0[31u].z, fma(_1652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1651)) - _1624;
        float _1665 = fma(_1653, cbModelParam._m0[32u].z, fma(_1652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1651)) - _1628;
        float _1669 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
        float _1682 = ((_1669 * _1663) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1620 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1669 * _1664) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1624 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1684 = ((_1669 * _1665) / cbModelParam._m0[35u].z) + ((((((_1628 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        float _1719 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1686.x + (-0.5));
        float _1721 = _1719 * (_1686.y + (-0.5));
        float _1722 = _1719 * (_1686.z + (-0.5));
        float _1729 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1693.x + (-0.5));
        float _1731 = _1729 * (_1693.y + (-0.5));
        float _1732 = _1729 * (_1693.z + (-0.5));
        float _1739 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1700.x + (-0.5));
        float _1741 = _1739 * (_1700.y + (-0.5));
        float _1742 = _1739 * (_1700.z + (-0.5));
        float _1749 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1707.x + (-0.5));
        float _1751 = _1749 * (_1707.y + (-0.5));
        float _1752 = _1749 * (_1707.z + (-0.5));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = _1720 * 0.5;
        float _1757 = _1730 * 0.5;
        float _1758 = _1740 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_1044, _1045, _1046), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4280 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1783 + 1.0))) + _1788) * _1753;
        float _1798 = _1721 * 0.5;
        float _1799 = _1731 * 0.5;
        float _1800 = _1741 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_1044, _1045, _1046), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4313 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1825 + 1.0))) + _1830) * _1754;
        float _1840 = _1722 * 0.5;
        float _1841 = _1732 * 0.5;
        float _1842 = _1742 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1044, _1045, _1046), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4346 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1867 + 1.0))) + _1872) * _1755;
        _1889 = _1722;
        _1890 = _1721;
        _1891 = _1720;
        _1892 = _1732;
        _1893 = _1731;
        _1894 = _1730;
        _1895 = _1742;
        _1896 = _1741;
        _1897 = _1740;
        _1898 = _1755;
        _1899 = _1754;
        _1900 = _1753;
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
    }
    else
    {
        _1889 = _1583;
        _1890 = _1583;
        _1891 = _1583;
        _1892 = _1583;
        _1893 = _1583;
        _1894 = _1583;
        _1895 = _1583;
        _1896 = _1583;
        _1897 = _1583;
        _1898 = _1583;
        _1899 = _1583;
        _1900 = _1583;
        _1901 = 0.0;
        _1902 = 0.0;
        _1903 = 0.0;
    }
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1595)) + _1595;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1596)) + _1596;
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1597)) + _1597;
    float _1936 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1913));
    float _1957 = _1217 * 0.5;
    float _1958 = _1218 * 0.5;
    float _1959 = _1219 * 0.5;
    float _1960 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _1963 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1966 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _2000;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1973 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1582, _1586, _1589, _1592));
        float _1977 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1584, _1587, _1590, _1593));
        float _1981 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1585, _1588, _1591, _1594));
        float _1988 = dot(vec4(cbModelParam._m0[39u]), vec4(_1957, _1958, _1959, 1.0));
        _2000 = dot(vec3(isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1988) ? 0.0 : (isnan(0.0) ? _1988 : max(0.0, _1988))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2000 = 1.0;
    }
    float _2011;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2002 = dot(vec4(cbModelParam._m0[40u]), vec4(_1957, _1958, _1959, 1.0));
        _2011 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2002) ? 0.0 : (isnan(0.0) ? _2002 : max(0.0, _2002))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2011 = 1.0;
    }
    float _2015 = (_2011 * cbModelParam._m0[1u].x) + (_2000 * (1.0 - cbModelParam._m0[1u].x));
    float _2025 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1047);
    float _2026 = isnan(_2025) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2025 : min(cbModelParam._m0[25u].z, _2025));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2073 = fma(_1281, cbModelParam._m0[13u].z, fma(_1277, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1273)) + cbModelParam._m0[13u].w;
        float _2077 = fma(_1281, cbModelParam._m0[14u].z, fma(_1277, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1273)) + cbModelParam._m0[14u].w;
        float _2081 = fma(_1281, cbModelParam._m0[15u].z, fma(_1277, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1273)) + cbModelParam._m0[15u].w;
        float _2084 = fma(_1219, cbModelParam._m0[13u].z, fma(_1218, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1217));
        float _2087 = fma(_1219, cbModelParam._m0[14u].z, fma(_1218, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1217));
        float _2090 = fma(_1219, cbModelParam._m0[15u].z, fma(_1218, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1217));
        float _2118;
        if (_2084 > 0.0)
        {
            _2118 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2118 = frontier_phi_14_12_ladder;
        }
        float _2321;
        if (_2087 > 0.0)
        {
            _2321 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2321 = frontier_phi_23_19_ladder;
        }
        float _2575;
        if (_2090 > 0.0)
        {
            _2575 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2575 = frontier_phi_35_30_ladder;
        }
        float _2577 = isnan(_2321) ? _2118 : (isnan(_2118) ? _2321 : min(_2118, _2321));
        float _2578 = isnan(_2575) ? _2577 : (isnan(_2577) ? _2575 : min(_2577, _2575));
        float _2582 = (_2578 * _2084) + _2073;
        float _2583 = (_2578 * _2087) + _2077;
        float _2584 = (_2578 * _2090) + _2081;
        float _2585 = _2578 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2585;
        float _2589 = _2585 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 > _2589) || ((_2583 < _2587) || ((_2582 < _2587) || (_2582 > _2589))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2584, cbModelParam._m0[9u].z, fma(_2583, cbModelParam._m0[9u].y, _2582 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2584, cbModelParam._m0[10u].z, fma(_2583, cbModelParam._m0[10u].y, _2582 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2584, cbModelParam._m0[11u].z, fma(_2583, cbModelParam._m0[11u].y, _2582 * cbModelParam._m0[11u].x))), _2026);
            frontier_phi_13_35_ladder = _2712.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2712.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2712.x * cbModelParam._m0[1u].y;
        }
        _2106 = frontier_phi_13_35_ladder_2;
        _2108 = frontier_phi_13_35_ladder_1;
        _2110 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1217, _1218, _1219), _2026);
        _2106 = _2094.x * cbModelParam._m0[1u].y;
        _2108 = _2094.y * cbModelParam._m0[1u].y;
        _2110 = _2094.z * cbModelParam._m0[1u].y;
    }
    float _2114 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1047);
    float _2115 = isnan(_2114) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2114 : min(cbModelParam._m0[25u].w, _2114));
    float _2205;
    float _2207;
    float _2209;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2169 = fma(_1281, cbModelParam._m0[21u].z, fma(_1277, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1273)) + cbModelParam._m0[21u].w;
        float _2173 = fma(_1281, cbModelParam._m0[22u].z, fma(_1277, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1273)) + cbModelParam._m0[22u].w;
        float _2177 = fma(_1281, cbModelParam._m0[23u].z, fma(_1277, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1273)) + cbModelParam._m0[23u].w;
        float _2180 = fma(_1219, cbModelParam._m0[21u].z, fma(_1218, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1217));
        float _2183 = fma(_1219, cbModelParam._m0[22u].z, fma(_1218, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1217));
        float _2186 = fma(_1219, cbModelParam._m0[23u].z, fma(_1218, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1217));
        float _2326;
        if (_2180 > 0.0)
        {
            _2326 = abs((1.0 - _2169) / _2180);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2169 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2326 = frontier_phi_25_21_ladder;
        }
        float _2602;
        if (_2183 > 0.0)
        {
            _2602 = abs((1.0 - _2173) / _2183);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2173 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2602 = frontier_phi_37_32_ladder;
        }
        float _2815;
        if (_2186 > 0.0)
        {
            _2815 = abs((1.0 - _2177) / _2186);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2177 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2815 = frontier_phi_46_43_ladder;
        }
        float _2817 = isnan(_2602) ? _2326 : (isnan(_2326) ? _2602 : min(_2326, _2602));
        float _2818 = isnan(_2815) ? _2817 : (isnan(_2817) ? _2815 : min(_2817, _2815));
        float _2822 = (_2818 * _2180) + _2169;
        float _2823 = (_2818 * _2183) + _2173;
        float _2824 = (_2818 * _2186) + _2177;
        float _2825 = _2818 * 9.9999997473787516355514526367188e-05;
        float _2826 = (-1.0) - _2825;
        float _2828 = _2825 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2824 > _2828) || ((_2824 < _2826) || ((_2823 > _2828) || ((_2823 < _2826) || ((_2822 < _2826) || (_2822 > _2828))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2824, cbModelParam._m0[17u].z, fma(_2823, cbModelParam._m0[17u].y, _2822 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2824, cbModelParam._m0[18u].z, fma(_2823, cbModelParam._m0[18u].y, _2822 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2824, cbModelParam._m0[19u].z, fma(_2823, cbModelParam._m0[19u].y, _2822 * cbModelParam._m0[19u].x))), _2115);
            frontier_phi_22_46_ladder = _3023.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3023.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3023.x * cbModelParam._m0[1u].z;
        }
        _2205 = frontier_phi_22_46_ladder_2;
        _2207 = frontier_phi_22_46_ladder_1;
        _2209 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1217, _1218, _1219), _2115);
        _2205 = _2189.x * cbModelParam._m0[1u].z;
        _2207 = _2189.y * cbModelParam._m0[1u].z;
        _2209 = _2189.z * cbModelParam._m0[1u].z;
    }
    float _2222 = (((_1244 * _1193) + _1245) * _1209) * ((cbModelParam._m0[1u].w * (_2205 - _2106)) + _2106);
    float _2224 = (((_1244 * _1195) + _1245) * _1209) * ((cbModelParam._m0[1u].w * (_2207 - _2108)) + _2108);
    float _2226 = (((_1244 * _1196) + _1245) * _1209) * ((cbModelParam._m0[1u].w * (_2209 - _2110)) + _2110);
    float _2229 = fma(_2226, cbSceneParam._m0[89u].z, fma(_2224, cbSceneParam._m0[89u].y, _2222 * cbSceneParam._m0[89u].x));
    float _2232 = fma(_2226, cbSceneParam._m0[90u].z, fma(_2224, cbSceneParam._m0[90u].y, _2222 * cbSceneParam._m0[90u].x));
    float _2235 = fma(_2226, cbSceneParam._m0[91u].z, fma(_2224, cbSceneParam._m0[91u].y, _2222 * cbSceneParam._m0[91u].x));
    uvec4 _2245 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2247 = _2245.x * 14u;
    uint _2248 = _2247 + 13u;
    float _2255 = _1209 + (-1.0);
    float _2260 = (cbLight._m0[_2248].x * _2255) + 1.0;
    float _2261 = (cbLight._m0[_2248].y * _2255) + 1.0;
    float _2262 = (cbLight._m0[_2248].z * _2255) + 1.0;
    float _2263 = (cbLight._m0[_2248].w * _2255) + 1.0;
    uint _2264 = _2247 + 5u;
    float _2270 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2274 = _2247 + 4u;
    float _2280 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2284 = _2247 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_1044, _1045, _1046));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_1044, _1045, _1046));
    float _4482 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4493 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2264].x * _2270) * _2305) + ((cbLight._m0[_2274].x * _2280) * _2303);
    float _2313 = ((_2270 * cbLight._m0[_2264].y) * _2305) + ((_2280 * cbLight._m0[_2274].y) * _2303);
    float _2314 = ((_2270 * cbLight._m0[_2264].z) * _2305) + ((_2280 * cbLight._m0[_2274].z) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2247 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2320)
    {
        _2331 = _2312;
        _2333 = _2313;
        _2335 = _2314;
    }
    else
    {
        uint _2339 = _2247 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2247 + 2u].xyz), vec3(_1044, _1045, _1046)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4504 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2358 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2312;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2313;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2314;
    }
    bool _2338 = _2318.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2338)
    {
        _2376 = _2331;
        _2378 = _2333;
        _2380 = _2335;
    }
    else
    {
        uint _2546 = _2247 + 7u;
        float _2562 = (dot(vec3(cbLight._m0[_2247 + 3u].xyz), vec3(_1044, _1045, _1046)) * 0.5) + 0.5;
        float _2563 = _2562 * _2562;
        float _4520 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2564 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2565 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2376 = (((cbLight._m0[_2546].x * 0.3183098733425140380859375) * _2564) * _2565) + _2331;
        _2378 = (((cbLight._m0[_2546].y * 0.3183098733425140380859375) * _2564) * _2565) + _2333;
        _2380 = (((cbLight._m0[_2546].z * 0.3183098733425140380859375) * _2564) * _2565) + _2335;
    }
    uint _2383 = _2247 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _1047) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2247].x + _1123;
    float _2399 = cbLight._m0[_2247].y + _1124;
    float _2400 = cbLight._m0[_2247].z + _1125;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2247].xyz));
    float _4536 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _2412 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2413 = dot(vec3(_1044, _1045, _1046), vec3(_2405, _2406, _2407));
    float _4558 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2405, _2406, _2407));
    float _4569 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _1190;
    float _2436 = 0.959999978542327880859375 - _1191;
    float _2437 = 0.959999978542327880859375 - _1192;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4580 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2468 = _2247 + 9u;
    float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _1047) * 0.949999988079071044921875);
    float _2480 = _2479 * _2479;
    float _2481 = cbLight._m0[_2284].x + _1123;
    float _2482 = cbLight._m0[_2284].y + _1124;
    float _2483 = cbLight._m0[_2284].z + _1125;
    float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
    float _2488 = _2487 * _2481;
    float _2489 = _2487 * _2482;
    float _2490 = _2487 * _2483;
    float _2491 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2284].xyz));
    float _4591 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2495 = dot(vec3(_1044, _1045, _1046), vec3(_2488, _2489, _2490));
    float _4602 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2499 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2488, _2489, _2490));
    float _4613 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2503 = _2480 * _2480;
    float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
    float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2521 = 1.0 - _2480;
    float _2531 = (0.5 / (((_2412 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2521) + _2480) * _2494))) * _2494;
    float _4624 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
    float _2543 = (((((_2514 * _2434) + _1193) * cbLight._m0[_2468].x) * _2533) * _2270) + (((((_2433 * _2434) + _1193) * cbLight._m0[_2383].x) * _2457) * _2280);
    float _2544 = (((((_2514 * _2436) + _1195) * cbLight._m0[_2468].y) * _2533) * _2270) + (((((_2433 * _2436) + _1195) * cbLight._m0[_2383].y) * _2457) * _2280);
    float _2545 = (((((_2514 * _2437) + _1196) * cbLight._m0[_2468].z) * _2533) * _2270) + (((((_2433 * _2437) + _1196) * cbLight._m0[_2383].z) * _2457) * _2280);
    float _2607;
    float _2609;
    float _2611;
    if (_2320)
    {
        _2607 = _2543;
        _2609 = _2544;
        _2611 = _2545;
    }
    else
    {
        uint _2613 = _2247 + 2u;
        uint _2617 = _2247 + 10u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _1047) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _1123;
        float _2634 = cbLight._m0[_2613].y + _1124;
        float _2635 = cbLight._m0[_2613].z + _1125;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2613].xyz));
        float _4635 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2647 = dot(vec3(_1044, _1045, _1046), vec3(_2640, _2641, _2642));
        float _4646 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4657 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2673 = 1.0 - _2632;
        float _2683 = (0.5 / (((_2412 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2673) + _2632) * _2646))) * _2646;
        float _4668 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2607 = (((((_2666 * _2434) + _1193) * cbLight._m0[_2617].x) * _2685) * _2686) + _2543;
        _2609 = (((((_2666 * _2436) + _1195) * cbLight._m0[_2617].y) * _2685) * _2686) + _2544;
        _2611 = (((((_2666 * _2437) + _1196) * cbLight._m0[_2617].z) * _2685) * _2686) + _2545;
    }
    float _2721;
    float _2723;
    float _2725;
    if (_2338)
    {
        _2721 = _2607;
        _2723 = _2609;
        _2725 = _2611;
    }
    else
    {
        uint _2732 = _2247 + 3u;
        uint _2736 = _2247 + 11u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _1047) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _1123;
        float _2753 = cbLight._m0[_2732].y + _1124;
        float _2754 = cbLight._m0[_2732].z + _1125;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2732].xyz));
        float _4684 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2766 = dot(vec3(_1044, _1045, _1046), vec3(_2759, _2760, _2761));
        float _4695 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4706 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2785 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2792 = 1.0 - _2751;
        float _2802 = (0.5 / (((_2412 * ((_2765 * _2792) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2792) + _2751) * _2765))) * _2765;
        float _4717 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2804 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2805 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2721 = (((((_2785 * _2434) + _1193) * cbLight._m0[_2736].x) * _2804) * _2805) + _2607;
        _2723 = (((((_2785 * _2436) + _1195) * cbLight._m0[_2736].y) * _2804) * _2805) + _2609;
        _2725 = (((((_2785 * _2437) + _1196) * cbLight._m0[_2736].z) * _2804) * _2805) + _2611;
    }
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_2245.y == 0u)
    {
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2880;
        float _2882 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2880;
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2880;
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.x;
        uint _2907 = uint((float(_2895.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1132) / _2896))) + floor(float(uint(cbSceneParam._m0[85u].x * _1131) / _2896)));
        float _2917 = (log2(_2883 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2918 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        uint _2921 = uint(isnan(14.0) ? _2918 : (isnan(_2918) ? 14.0 : min(_2918, 14.0)));
        uvec4 _2926 = texelFetch(g_lightClusterGridBuffer, int(((_2921 << 2u) + (_2907 << 6u)) >> 2u));
        uint _2927 = _2926.x;
        uint _2928 = _2895.z;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((((1u << ((_2928 >> 4u) & 15u)) + 4294967295u) & _2927) == 0u) || ((_2928 & 240u) == 0u))
        {
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
        }
        else
        {
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            uint _3178 = 0u;
            uint _3187;
            bool _3188;
            for (;;)
            {
                _3187 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                _3188 = _3187 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3188)
                {
                    frontier_phi_61_pred = _3172;
                    frontier_phi_61_pred_1 = _3177;
                    frontier_phi_61_pred_2 = _3176;
                    frontier_phi_61_pred_3 = _3175;
                    frontier_phi_61_pred_4 = _3174;
                    frontier_phi_61_pred_5 = _3173;
                }
                else
                {
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    uint _3302;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3187;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    for (;;)
                    {
                        uint _3306 = uint(findLSB(_3302)) + (_3178 << 5u);
                        uint _3303 = (_3302 + 4294967295u) & _3302;
                        uint _3308 = _3306 * 48u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3328 = (_3306 * 48u) + 4u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 3u)).x));
                        uint _3347 = (_3306 * 48u) + 8u;
                        vec3 _3358 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x));
                        float _3362 = _3322.x - _2881;
                        float _3363 = _3322.y - _2882;
                        float _3364 = _3322.z - _2883;
                        float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                        float _3368 = inversesqrt(_3365);
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3372 = dot(vec3(_1150, _1153, _1156), vec3(_3369, _3370, _3371));
                        float _3377 = 1.0 - (_3365 * _3322.w);
                        float _4743 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3379 = sqrt(_3365) * _3341.w;
                        float _3382 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3372) + _3383;
                        float _3389 = _3379 * _3379;
                        float _3393 = ((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3378) / ((_3389 * 0.699999988079071044921875) + 1.0);
                        float _3397 = (-0.0) - _2881;
                        float _3398 = (-0.0) - _2882;
                        float _3399 = (-0.0) - _2883;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3414 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                        float _3415 = 1.0 - _1225;
                        float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                        float _3423 = _3422 * _3422;
                        float _3424 = _3423 * _3423;
                        float _3425 = _3404 + _3369;
                        float _3426 = _3405 + _3370;
                        float _3427 = _3406 + _3371;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3435 = dot(vec3(_1150, _1153, _1156), vec3(_3404, _3405, _3406));
                        float _4759 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3439 = dot(vec3(_1150, _1153, _1156), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                        float _4770 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                        float _3447 = _3382 * _3423;
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3372) + _3448;
                        float _4781 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3453 = 1.0 - _3423;
                        float _3463 = (0.5 / (((_3452 * ((_3438 * _3453) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3423) * _3438))) * _3452;
                        float _4792 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3474 = (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3446 * _3446) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125))) * _3378;
                        _3231 = (_3393 * _3341.x) + _3299;
                        _3232 = (_3393 * _3341.y) + _3300;
                        _3233 = (_3393 * _3341.z) + _3301;
                        _3228 = (_3474 * _3358.x) + _3296;
                        _3229 = (_3474 * _3358.y) + _3297;
                        _3230 = (_3474 * _3358.z) + _3298;
                        if (_3303 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3303;
                        }
                    }
                    frontier_phi_61_pred = _3228;
                    frontier_phi_61_pred_1 = _3233;
                    frontier_phi_61_pred_2 = _3232;
                    frontier_phi_61_pred_3 = _3231;
                    frontier_phi_61_pred_4 = _3230;
                    frontier_phi_61_pred_5 = _3229;
                }
                _3029 = frontier_phi_61_pred;
                _3039 = frontier_phi_61_pred_1;
                _3037 = frontier_phi_61_pred_2;
                _3035 = frontier_phi_61_pred_3;
                _3033 = frontier_phi_61_pred_4;
                _3031 = frontier_phi_61_pred_5;
                uint _3179 = _3178 + 1u;
                if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3172 = _3029;
                    _3173 = _3031;
                    _3174 = _3033;
                    _3175 = _3035;
                    _3176 = _3037;
                    _3177 = _3039;
                    _3178 = _3179;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
        }
        uvec4 _3042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3043 = _3042.z;
        uint _3045 = (_3043 >> 8u) & 15u;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        if (((4294967295u << _3045) & _2927) == 0u)
        {
            _3140 = _3028;
            _3142 = _3030;
            _3144 = _3032;
            _3146 = _3034;
            _3148 = _3036;
            _3150 = _3038;
        }
        else
        {
            float _3165 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
            float _3166 = _3165 * _2881;
            float _3167 = _3165 * _2882;
            float _3168 = _3165 * _2883;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3045 < ((_3043 >> 12u) & 15u))
            {
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3279 = _3028;
                float _3280 = _3030;
                float _3281 = _3032;
                float _3282 = _3034;
                float _3283 = _3036;
                float _3284 = _3038;
                uint _3285 = _3045;
                uint _3294;
                bool _3295;
                for (;;)
                {
                    _3294 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3285 << 2u)) >> 2u)).x;
                    _3295 = _3294 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3295)
                    {
                        frontier_phi_67_pred = _3282;
                        frontier_phi_67_pred_1 = _3283;
                        frontier_phi_67_pred_2 = _3284;
                        frontier_phi_67_pred_3 = _3281;
                        frontier_phi_67_pred_4 = _3280;
                        frontier_phi_67_pred_5 = _3279;
                    }
                    else
                    {
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        uint _3498 = _3294;
                        uint _3499;
                        vec4 _3524;
                        float _3525;
                        vec4 _3540;
                        vec3 _3552;
                        vec4 _3567;
                        vec4 _3582;
                        float _3628;
                        bool _3629;
                        for (;;)
                        {
                            uint _3509 = ((_3285 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3498));
                            _3499 = (_3498 + 4294967295u) & _3498;
                            uint _3511 = _3509 * 40u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3525 = _3524.w;
                            uint _3527 = (_3509 * 40u) + 4u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3509 * 40u) + 8u;
                            _3552 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x));
                            uint _3554 = (_3509 * 40u) + 16u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3509 * 40u) + 20u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3509 * 40u) + 24u;
                            vec4 _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3603 = (_3509 * 40u) + 28u;
                            vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3628 = fma(_2883, _3616.z, fma(_2882, _3616.y, _3616.x * _2881)) + _3616.w;
                            _3629 = !((fma(_2883, _3597.z, fma(_2882, _3597.y, _3597.x * _2881)) + _3597.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3629)
                            {
                                float _3656 = _3524.x - _2881;
                                float _3657 = _3524.y - _2882;
                                float _3658 = _3524.z - _2883;
                                float _3659 = dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658));
                                float _3662 = inversesqrt(_3659);
                                float _3663 = _3662 * _3656;
                                float _3664 = _3662 * _3657;
                                float _3665 = _3662 * _3658;
                                float _3669 = 1.0 - (_3659 / (_3525 * _3525));
                                float _4803 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3674 = sqrt(_3659) * _3540.w;
                                float _3676 = 1.39999997615814208984375 / (_3674 + 1.39999997615814208984375);
                                float _3677 = _3676 * _3676;
                                float _3680 = ((1.0 - _3677) * dot(vec3(_3663, _3664, _3665), vec3(_1150, _1153, _1156))) + _3677;
                                float _3683 = _3674 * _3674;
                                float _3687 = (fma(_2883, _3567.z, fma(_2882, _3567.y, _3567.x * _2881)) + _3567.w) / _3628;
                                float _3688 = (fma(_2883, _3582.z, fma(_2882, _3582.y, _3582.x * _2881)) + _3582.w) / _3628;
                                float _3692 = 1.0 - dot(vec2(_3687, _3688), vec2(_3687, _3688));
                                float _4819 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3694 = _3693 * (((isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0))) * _3670) / ((_3683 * 0.699999988079071044921875) + 1.0));
                                float _3706 = exp2(log2(1.0 / ((_3683 * 3.5) + 5.0)) * 0.25);
                                float _3707 = 1.0 - _1225;
                                float _3714 = sqrt(1.0 - ((1.0 - (_3707 * _3707)) * (1.0 - (_3706 * _3706))));
                                float _3715 = _3714 * _3714;
                                float _3716 = _3715 * _3715;
                                float _3717 = _3663 - _3166;
                                float _3718 = _3664 - _3167;
                                float _3719 = _3665 - _3168;
                                float _3723 = inversesqrt(dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719)));
                                float _3727 = dot(vec3(_1150, _1153, _1156), vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168));
                                float _4830 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3731 = dot(vec3(_1150, _1153, _1156), vec3(_3723 * _3717, _3723 * _3718, _3723 * _3719));
                                float _4841 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3738 = ((_3734 * _3734) * (_3716 + (-1.0))) + 1.0;
                                float _3739 = _3676 * _3715;
                                float _3740 = _3739 * _3739;
                                float _3746 = ((1.0 - _3740) * dot(vec3(_1150, _1153, _1156), vec3(_3663, _3664, _3665))) + _3740;
                                float _4852 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3748 = 1.0 - _3715;
                                float _3758 = (0.5 / (((_3747 * ((_3730 * _3748) + _3715)) + 9.9999999392252902907785028219223e-09) + (((_3747 * _3748) + _3715) * _3730))) * _3747;
                                float _4863 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3768 = (_3693 * _3670) * (((_3716 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3738 * _3738) * ((_3683 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3768 * _3552.x;
                                frontier_phi_73_pred_1 = _3768 * _3552.y;
                                frontier_phi_73_pred_2 = _3694 * _3540.z;
                                frontier_phi_73_pred_3 = _3694 * _3540.y;
                                frontier_phi_73_pred_4 = _3694 * _3540.x;
                                frontier_phi_73_pred_5 = _3768 * _3552.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_73_pred;
                            _3773 = frontier_phi_73_pred_1;
                            _3777 = frontier_phi_73_pred_2;
                            _3776 = frontier_phi_73_pred_3;
                            _3775 = frontier_phi_73_pred_4;
                            _3774 = frontier_phi_73_pred_5;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            if (_3499 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3499;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3482;
                        frontier_phi_67_pred_1 = _3483;
                        frontier_phi_67_pred_2 = _3484;
                        frontier_phi_67_pred_3 = _3481;
                        frontier_phi_67_pred_4 = _3480;
                        frontier_phi_67_pred_5 = _3479;
                    }
                    _3147 = frontier_phi_67_pred;
                    _3149 = frontier_phi_67_pred_1;
                    _3151 = frontier_phi_67_pred_2;
                    _3145 = frontier_phi_67_pred_3;
                    _3143 = frontier_phi_67_pred_4;
                    _3141 = frontier_phi_67_pred_5;
                    uint _3286 = _3285 + 1u;
                    if (_3286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3279 = _3141;
                        _3280 = _3143;
                        _3281 = _3145;
                        _3282 = _3147;
                        _3283 = _3149;
                        _3284 = _3151;
                        _3285 = _3286;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3149;
                frontier_phi_55_56_ladder_1 = _3151;
                frontier_phi_55_56_ladder_2 = _3147;
                frontier_phi_55_56_ladder_3 = _3145;
                frontier_phi_55_56_ladder_4 = _3143;
                frontier_phi_55_56_ladder_5 = _3141;
            }
            else
            {
                frontier_phi_55_56_ladder = _3036;
                frontier_phi_55_56_ladder_1 = _3038;
                frontier_phi_55_56_ladder_2 = _3034;
                frontier_phi_55_56_ladder_3 = _3032;
                frontier_phi_55_56_ladder_4 = _3030;
                frontier_phi_55_56_ladder_5 = _3028;
            }
            _3140 = frontier_phi_55_56_ladder_5;
            _3142 = frontier_phi_55_56_ladder_4;
            _3144 = frontier_phi_55_56_ladder_3;
            _3146 = frontier_phi_55_56_ladder_2;
            _3148 = frontier_phi_55_56_ladder;
            _3150 = frontier_phi_55_56_ladder_1;
        }
        float _3155 = isnan(1.0) ? _1209 : (isnan(_1209) ? 1.0 : min(_1209, 1.0));
        _2940 = (_3155 * _3146) + _2376;
        _2942 = (_3155 * _3148) + _2378;
        _2944 = (_3155 * _3150) + _2380;
        _2946 = ((_3140 * _1193) * _3155) + _2721;
        _2948 = ((_3142 * _1195) * _3155) + _2723;
        _2950 = ((_3144 * _1196) * _3155) + _2725;
    }
    else
    {
        _2940 = _2376;
        _2942 = _2378;
        _2944 = _2380;
        _2946 = _2721;
        _2948 = _2723;
        _2950 = _2725;
    }
    float _4879 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _4890 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _4901 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    uint _2970 = _265 + 6u;
    float _2978 = _1131 / cbSceneParam._m0[86u].x;
    float _2979 = _1132 / cbSceneParam._m0[86u].y;
    vec4 _2993 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, (log2((isnan(cbSceneParam._m0[77u].w) ? _1066 : (isnan(_1066) ? cbSceneParam._m0[77u].w : min(_1066, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2995 = _2993.x;
    float _2996 = _2993.y;
    float _2997 = _2993.z;
    float _2998 = _2993.w;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    if (_1066 > cbSceneParam._m0[78u].w)
    {
        float _3053 = isnan(_1066) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1066 : min(cbSceneParam._m0[80u].w, _1066));
        float _3054 = _3053 / _1066;
        float _3065 = _3054 * _1116;
        float _3066 = _1117 * _3054;
        float _3067 = (-0.0) - _3066;
        float _3068 = _3054 * _1118;
        float _3070 = (cbSceneParam._m0[77u].w * _3067) / _3053;
        float _3071 = _3070 + cbSceneParam._m0[79u].w;
        float _3072 = cbSceneParam._m0[79u].w - _3066;
        float _3078 = sqrt(((_3065 * _3065) + (_3066 * _3066)) + (_3068 * _3068));
        float _3081 = (1.0 - (cbSceneParam._m0[77u].w / _3053)) * _3078;
        float _3086 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3088 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3241;
        if (abs((_3067 - _3070) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3241 = ((((_3071 > 0.0) ? exp2(_3086 * _3071) : (2.0 - exp2(_3088 * _3071))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3081;
        }
        else
        {
            float _3201 = 1.0 / cbSceneParam._m0[80u].x;
            float _3202 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : max(_3071, _3072));
            float _3203 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : min(_3071, _3072));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            _3241 = ((abs(_3078 / _3067) * cbSceneParam._m0[80u].y) * ((((_3212 - _3213) * 2.0) - ((exp2(_3086 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0)))) - exp2(_3086 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))))) * _3201)) - ((exp2(_3088 * _3212) - exp2(_3088 * _3213)) * _3201))) + (_3081 * cbSceneParam._m0[80u].z);
        }
        vec4 _3243 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, 1.0), 0.0);
        float _3252 = exp2((_3241 * (-1.44269502162933349609375)) * (1.0 - _3243.w));
        float _3253 = log2(_3252);
        float _3269 = log2(_2998);
        _3090 = (exp2(_3269 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].x)) * _3243.x) / cbSceneParam._m0[78u].x)) + _2995;
        _3092 = (exp2(_3269 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].y)) * _3243.y) / cbSceneParam._m0[78u].y)) + _2996;
        _3094 = (exp2(_3269 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].z)) * _3243.z) / cbSceneParam._m0[78u].z)) + _2997;
        _3096 = _3252 * _2998;
    }
    else
    {
        _3090 = _2995;
        _3092 = _2996;
        _3094 = _2997;
        _3096 = _2998;
    }
    float _3108 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3109 = _3108 == 3.0;
    float _3110 = log2(_3096);
    float _3117 = exp2(_3110 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2940 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1209))) + ((_2946 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3118 = exp2(_3110 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2942 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1209))) + ((_2948 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3119 = exp2(_3110 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2944 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1209))) + ((_2950 + ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3128 = (_3108 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3128 * (_3109 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.y = _3128 * (_3109 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.z = _3128 * (_3109 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.w = cbInstanceData._m0[_2970].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2970].w;
}


