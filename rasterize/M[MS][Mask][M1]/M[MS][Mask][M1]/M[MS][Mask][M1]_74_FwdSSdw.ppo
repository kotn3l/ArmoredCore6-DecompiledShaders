#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1455;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3805 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3816 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3827 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[23u].w) + _451) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3838 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _476 = (_469 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _477 = (_469 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _478 = (_469 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _517 = _515.x;
    float _527 = dot(vec4(_517, _515.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _541 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_517 - _527) * cbMtdParam._m0[23u].w) + _527) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3849 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _552 = (_334.x * cbMtdParam._m0[9u].x) * ((_542 * ((_495.x * cbMtdParam._m0[13u].x) - _476)) + _476);
    float _553 = (_334.y * cbMtdParam._m0[9u].y) * ((_542 * ((_495.y * cbMtdParam._m0[13u].y) - _477)) + _477);
    float _554 = (_334.z * cbMtdParam._m0[9u].z) * ((_542 * ((_495.z * cbMtdParam._m0[13u].z) - _478)) + _478);
    float _558 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _552;
    float _561 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _553;
    float _564 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _554;
    float _572 = (((_552 - _558) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _558) * 4.55000019073486328125;
    float _574 = (((_553 - _561) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _561) * 4.55000019073486328125;
    float _576 = (((_554 - _564) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) + _564) * 4.55000019073486328125;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _469) + _637;
    float _647 = ((_618.y - _638) * _469) + _638;
    float _648 = ((_618.z - _639) * _469) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_660.z - _648) * _542) + _648;
    float _676 = ((((_660.x - _646) * _542) + _646) * 2.0) + (-1.0);
    float _677 = ((((_660.y - _647) * _542) + _647) * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3860 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _713 = (_676 + ((((_593.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _714 = (_677 + ((((_593.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _717 = fma(_683, _245, fma(_714, _252, _713 * _238));
    float _720 = fma(_683, _246, fma(_714, _253, _713 * _239));
    float _723 = fma(_683, _247, fma(_714, _254, _713 * _240));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _766 = (cbMtdParam._m0[19u].x + dot(vec4(_727 * _717, _727 * _720, _727 * _723, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_756 - _757) * cbMtdParam._m0[24u].z) + _757) * cbMtdParam._m0[21u].z);
    float _3871 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _774 = (_767 * (cbMtdParam._m0[17u].x - _572)) + _572;
    float _775 = (_767 * (cbMtdParam._m0[17u].y - _574)) + _574;
    float _776 = (_767 * (cbMtdParam._m0[17u].z - _576)) + _576;
    vec4 _802 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _804 = _802.x;
    float _821 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _804) * _469) + _804;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _821) * _542) + _821;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _838) * cbMtdParam._m0[19u].z) + _838;
    float _844 = _842 - (_842 * _767);
    float _849 = (((_593.z - _673) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _673;
    float _853 = ((_701.z - _849) * cbMtdParam._m0[19u].w) + _849;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _3882 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = ((_866.z - _853) * _767) + _853;
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _683) * _767) + _683;
    float _896 = (((_873 - _713) * _767) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _897 = (((_874 - _714) * _767) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _901 = cbMtdParam._m0[22u].x + _701.w;
    float _904 = fma(_893, _245, fma(_897, _252, _896 * _238));
    float _907 = fma(_893, _246, fma(_897, _253, _896 * _239));
    float _910 = fma(_893, _247, fma(_897, _254, _896 * _240));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _3893 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _918 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _3915 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _3926 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3937 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _3948 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _923 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _937 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _988 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _978);
    float _989 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _978);
    float _990 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _978);
    float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
    float _995 = _988 * _994;
    float _996 = _989 * _994;
    float _997 = _990 * _994;
    float _1003 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1004 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1022 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1025 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1028 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1042 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1048 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_1042].x;
    float _1049 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_1042].y;
    float _1050 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_1042].z;
    float _3959 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1054 = 1.0 - _923;
    float _1055 = _1051 * _1054;
    float _1056 = _1052 * _1054;
    float _1057 = _1053 * _1054;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _923;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _923;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _923;
    float _1065 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1003, cbSceneParam._m0[86u].y * _1004));
    float _1081 = ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_915, _916, _917), vec3(_995, _996, _997));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _915) - _995;
    float _1090 = (_1085 * _916) - _996;
    float _1091 = (_1085 * _917) - _997;
    float _1095 = abs(dot(vec3(_995, _996, _997), vec3(_915, _916, _917)));
    float _3992 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_918);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1116 = (1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1117 = _1110 * _1097;
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1454;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1179 = fma(_1153, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145));
        float _1183 = fma(_1153, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145));
        float _1187 = fma(_1153, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145));
        float _1212 = _1145 + _915;
        float _1213 = _1149 + _916;
        float _1214 = _1153 + _917;
        float _1224 = fma(_1214, cbModelParam._m0[26u].z, fma(_1213, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1212)) - _1179;
        float _1225 = fma(_1214, cbModelParam._m0[27u].z, fma(_1213, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1212)) - _1183;
        float _1226 = fma(_1214, cbModelParam._m0[28u].z, fma(_1213, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1212)) - _1187;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1179 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1183 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[34u].z) + ((((((_1187 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1282 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1248.x + (-0.5));
        float _1284 = _1282 * (_1248.y + (-0.5));
        float _1285 = _1282 * (_1248.z + (-0.5));
        float _1292 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1255.x + (-0.5));
        float _1294 = _1292 * (_1255.y + (-0.5));
        float _1295 = _1292 * (_1255.z + (-0.5));
        float _1302 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1262.x + (-0.5));
        float _1304 = _1302 * (_1262.y + (-0.5));
        float _1305 = _1302 * (_1262.z + (-0.5));
        float _1312 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1269.x + (-0.5));
        float _1314 = _1312 * (_1269.y + (-0.5));
        float _1315 = _1312 * (_1269.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1336 = (dot(vec3(_915, _916, _917), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1346 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4040 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1348 + 1.0))) + _1353) * _1316;
        float _1363 = _1284 * 0.5;
        float _1364 = _1294 * 0.5;
        float _1365 = _1304 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_915, _916, _917), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4073 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1390 + 1.0))) + _1395) * _1317;
        float _1405 = _1285 * 0.5;
        float _1406 = _1295 * 0.5;
        float _1407 = _1305 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_915, _916, _917), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4106 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1432 + 1.0))) + _1437) * _1318;
        _1454 = _1285;
        _1456 = _1284;
        _1457 = _1283;
        _1458 = _1295;
        _1459 = _1294;
        _1460 = _1293;
        _1461 = _1305;
        _1462 = _1304;
        _1463 = _1303;
        _1464 = _1318;
        _1465 = _1317;
        _1466 = _1316;
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1455;
        _1456 = _1455;
        _1457 = _1455;
        _1458 = _1455;
        _1459 = _1455;
        _1460 = _1455;
        _1461 = _1455;
        _1462 = _1455;
        _1463 = _1455;
        _1464 = _1455;
        _1465 = _1455;
        _1466 = _1455;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1153, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145));
        float _1497 = fma(_1153, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145));
        float _1501 = fma(_1153, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145));
        float _1524 = _1145 + _915;
        float _1525 = _1149 + _916;
        float _1526 = _1153 + _917;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_915, _916, _917), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4169 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_915, _916, _917), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4202 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_915, _916, _917), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4235 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1455;
        _1763 = _1455;
        _1764 = _1455;
        _1765 = _1455;
        _1766 = _1455;
        _1767 = _1455;
        _1768 = _1455;
        _1769 = _1455;
        _1770 = _1455;
        _1771 = _1455;
        _1772 = _1455;
        _1773 = _1455;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1467)) + _1467;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1468)) + _1468;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1469)) + _1469;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1089 * 0.5;
    float _1831 = _1090 * 0.5;
    float _1832 = _1091 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1454, _1458, _1461, _1464));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1947 = fma(_1153, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145)) + cbModelParam._m0[13u].w;
        float _1951 = fma(_1153, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145)) + cbModelParam._m0[14u].w;
        float _1955 = fma(_1153, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145)) + cbModelParam._m0[15u].w;
        float _1958 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1961 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1964 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _1992;
        if (_1958 > 0.0)
        {
            _1992 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1992 = frontier_phi_14_12_ladder;
        }
        float _2216;
        if (_1961 > 0.0)
        {
            _2216 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2216 = frontier_phi_23_19_ladder;
        }
        float _2473;
        if (_1964 > 0.0)
        {
            _2473 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2473 = frontier_phi_35_30_ladder;
        }
        float _2475 = isnan(_2216) ? _1992 : (isnan(_1992) ? _2216 : min(_1992, _2216));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1958) + _1947;
        float _2481 = (_2476 * _1961) + _1951;
        float _2482 = (_2476 * _1964) + _1955;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2483;
        float _2487 = _2483 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 > _2487) || ((_2481 < _2485) || ((_2480 < _2485) || (_2480 > _2487))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2482, cbModelParam._m0[9u].z, fma(_2481, cbModelParam._m0[9u].y, _2480 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2482, cbModelParam._m0[10u].z, fma(_2481, cbModelParam._m0[10u].y, _2480 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2482, cbModelParam._m0[11u].z, fma(_2481, cbModelParam._m0[11u].y, _2480 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_13_35_ladder = _2610.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2610.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2610.x * cbModelParam._m0[1u].y;
        }
        _1980 = frontier_phi_13_35_ladder_2;
        _1982 = frontier_phi_13_35_ladder_1;
        _1984 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1899);
        _1980 = _1968.x * cbModelParam._m0[1u].y;
        _1982 = _1968.y * cbModelParam._m0[1u].y;
        _1984 = _1968.z * cbModelParam._m0[1u].y;
    }
    float _1988 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1989 = isnan(_1988) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1988 : min(cbModelParam._m0[25u].w, _1988));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1153, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1153, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1153, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2057 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2060 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2221;
        if (_2054 > 0.0)
        {
            _2221 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2221 = frontier_phi_25_21_ladder;
        }
        float _2500;
        if (_2057 > 0.0)
        {
            _2500 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2500 = frontier_phi_37_32_ladder;
        }
        float _2713;
        if (_2060 > 0.0)
        {
            _2713 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2713 = frontier_phi_46_43_ladder;
        }
        float _2715 = isnan(_2500) ? _2221 : (isnan(_2221) ? _2500 : min(_2221, _2500));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _2054) + _2043;
        float _2721 = (_2716 * _2057) + _2047;
        float _2722 = (_2716 * _2060) + _2051;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1989);
            frontier_phi_22_46_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_22_46_ladder_2;
        _2081 = frontier_phi_22_46_ladder_1;
        _2083 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _1989);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1116 * _1065) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2079 - _1980)) + _1980);
    float _2098 = (((_1116 * _1067) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2100 = (((_1116 * _1068) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    vec4 _2117 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1003, _1004));
    float _2119 = _2117.w;
    float _2131 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2119);
    float _2132 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2119);
    float _2133 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2119);
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _1081 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2175 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2179 = _2139 | 1u;
    float _2190 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_915, _916, _917));
    float _2193 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_915, _916, _917));
    float _4371 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _4382 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2198 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2200 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2207 = ((cbLight._m0[_2156].x * _2162) * _2200) + (((cbLight._m0[_2166].x * _2131) * _2175) * _2198);
    float _2208 = ((_2162 * cbLight._m0[_2156].y) * _2200) + (((cbLight._m0[_2166].y * _2132) * _2175) * _2198);
    float _2209 = ((_2162 * cbLight._m0[_2156].z) * _2200) + (((cbLight._m0[_2166].z * _2133) * _2175) * _2198);
    uvec4 _2213 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2215 = _2213.x == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2215)
    {
        _2226 = _2207;
        _2228 = _2208;
        _2230 = _2209;
    }
    else
    {
        uint _2234 = _2139 + 6u;
        float _2250 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4393 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2253 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2226 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2207;
        _2228 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2208;
        _2230 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2209;
    }
    bool _2233 = _2213.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2233)
    {
        _2271 = _2226;
        _2273 = _2228;
        _2275 = _2230;
    }
    else
    {
        uint _2444 = _2139 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4409 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2463 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2271 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2226;
        _2273 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2228;
        _2275 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2230;
    }
    uint _2278 = _2139 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _918) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2139].x + _995;
    float _2294 = cbLight._m0[_2139].y + _996;
    float _2295 = cbLight._m0[_2139].z + _997;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2139].xyz));
    float _4425 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2307 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2308 = dot(vec3(_915, _916, _917), vec3(_2300, _2301, _2302));
    float _4447 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2300, _2301, _2302));
    float _4458 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2329 = 0.959999978542327880859375 - _1062;
    float _2331 = 0.959999978542327880859375 - _1063;
    float _2332 = 0.959999978542327880859375 - _1064;
    float _2339 = 1.0 - _2292;
    float _2350 = (0.5 / (((_2307 * ((_2306 * _2339) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2339) + _2292) * _2306))) * _2306;
    float _4469 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2366 = _2139 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _918) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2179].x + _995;
    float _2380 = cbLight._m0[_2179].y + _996;
    float _2381 = cbLight._m0[_2179].z + _997;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2179].xyz));
    float _4480 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2393 = dot(vec3(_915, _916, _917), vec3(_2386, _2387, _2388));
    float _4491 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2386, _2387, _2388));
    float _4502 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2307 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2419) + _2378) * _2392))) * _2392;
    float _4513 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2329) + _1065) * cbLight._m0[_2366].x) * _2431) * _2162) + ((((cbLight._m0[_2278].x * _2131) * ((_2328 * _2329) + _1065)) * _2352) * _2175);
    float _2442 = (((((_2412 * _2331) + _1067) * cbLight._m0[_2366].y) * _2431) * _2162) + ((((cbLight._m0[_2278].y * _2132) * ((_2328 * _2331) + _1067)) * _2352) * _2175);
    float _2443 = (((((_2412 * _2332) + _1068) * cbLight._m0[_2366].z) * _2431) * _2162) + ((((cbLight._m0[_2278].z * _2133) * ((_2328 * _2332) + _1068)) * _2352) * _2175);
    float _2505;
    float _2507;
    float _2509;
    if (_2215)
    {
        _2505 = _2441;
        _2507 = _2442;
        _2509 = _2443;
    }
    else
    {
        uint _2511 = _2139 + 2u;
        uint _2515 = _2139 + 10u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _918) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _995;
        float _2532 = cbLight._m0[_2511].y + _996;
        float _2533 = cbLight._m0[_2511].z + _997;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2511].xyz));
        float _4524 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2545 = dot(vec3(_915, _916, _917), vec3(_2538, _2539, _2540));
        float _4535 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4546 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2307 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2571) + _2530) * _2544))) * _2544;
        float _4557 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2505 = (((((_2564 * _2329) + _1065) * cbLight._m0[_2515].x) * _2583) * _2584) + _2441;
        _2507 = (((((_2564 * _2331) + _1067) * cbLight._m0[_2515].y) * _2583) * _2584) + _2442;
        _2509 = (((((_2564 * _2332) + _1068) * cbLight._m0[_2515].z) * _2583) * _2584) + _2443;
    }
    float _2619;
    float _2621;
    float _2623;
    if (_2233)
    {
        _2619 = _2505;
        _2621 = _2507;
        _2623 = _2509;
    }
    else
    {
        uint _2630 = _2139 + 3u;
        uint _2634 = _2139 + 11u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _918) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _995;
        float _2651 = cbLight._m0[_2630].y + _996;
        float _2652 = cbLight._m0[_2630].z + _997;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2630].xyz));
        float _4573 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2664 = dot(vec3(_915, _916, _917), vec3(_2657, _2658, _2659));
        float _4584 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4595 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2690 = 1.0 - _2649;
        float _2700 = (0.5 / (((_2307 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2690) + _2649) * _2663))) * _2663;
        float _4606 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2619 = (((((_2683 * _2329) + _1065) * cbLight._m0[_2634].x) * _2702) * _2703) + _2505;
        _2621 = (((((_2683 * _2331) + _1067) * cbLight._m0[_2634].y) * _2702) * _2703) + _2507;
        _2623 = (((((_2683 * _2332) + _1068) * cbLight._m0[_2634].z) * _2702) * _2703) + _2509;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2137.y == 0u)
    {
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2778;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2778;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2778;
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1004) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _1003) / _2794)));
        float _2815 = (log2(_2781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            uint _3077 = 0u;
            uint _3086;
            bool _3087;
            for (;;)
            {
                _3086 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                _3087 = _3086 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3087)
                {
                    frontier_phi_61_pred = _3071;
                    frontier_phi_61_pred_1 = _3076;
                    frontier_phi_61_pred_2 = _3075;
                    frontier_phi_61_pred_3 = _3074;
                    frontier_phi_61_pred_4 = _3073;
                    frontier_phi_61_pred_5 = _3072;
                }
                else
                {
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    uint _3201;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3086;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    for (;;)
                    {
                        uint _3205 = uint(findLSB(_3201)) + (_3077 << 5u);
                        uint _3202 = (_3201 + 4294967295u) & _3201;
                        uint _3207 = _3205 * 48u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3227 = (_3205 * 48u) + 4u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 3u)).x));
                        uint _3246 = (_3205 * 48u) + 8u;
                        vec3 _3257 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x));
                        float _3261 = _3221.x - _2779;
                        float _3262 = _3221.y - _2780;
                        float _3263 = _3221.z - _2781;
                        float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                        float _3267 = inversesqrt(_3264);
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3271 = dot(vec3(_1022, _1025, _1028), vec3(_3268, _3269, _3270));
                        float _3276 = 1.0 - (_3264 * _3221.w);
                        float _4632 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3277 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3278 = sqrt(_3264) * _3240.w;
                        float _3281 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3271) + _3282;
                        float _3288 = _3278 * _3278;
                        float _3292 = ((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3277) / ((_3288 * 0.699999988079071044921875) + 1.0);
                        float _3296 = (-0.0) - _2779;
                        float _3297 = (-0.0) - _2780;
                        float _3298 = (-0.0) - _2781;
                        float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3313 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                        float _3314 = 1.0 - _1097;
                        float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                        float _3322 = _3321 * _3321;
                        float _3323 = _3322 * _3322;
                        float _3324 = _3303 + _3268;
                        float _3325 = _3304 + _3269;
                        float _3326 = _3305 + _3270;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3334 = dot(vec3(_1022, _1025, _1028), vec3(_3303, _3304, _3305));
                        float _4648 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3338 = dot(vec3(_1022, _1025, _1028), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                        float _4659 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                        float _3346 = _3281 * _3322;
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3271) + _3347;
                        float _4670 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3352 = 1.0 - _3322;
                        float _3362 = (0.5 / (((_3351 * ((_3337 * _3352) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3322) * _3337))) * _3351;
                        float _4681 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3373 = (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3345 * _3345) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125))) * _3277;
                        _3130 = (_3292 * _3240.x) + _3198;
                        _3131 = (_3292 * _3240.y) + _3199;
                        _3132 = (_3292 * _3240.z) + _3200;
                        _3127 = (_3373 * _3257.x) + _3195;
                        _3128 = (_3373 * _3257.y) + _3196;
                        _3129 = (_3373 * _3257.z) + _3197;
                        if (_3202 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3202;
                        }
                    }
                    frontier_phi_61_pred = _3127;
                    frontier_phi_61_pred_1 = _3132;
                    frontier_phi_61_pred_2 = _3131;
                    frontier_phi_61_pred_3 = _3130;
                    frontier_phi_61_pred_4 = _3129;
                    frontier_phi_61_pred_5 = _3128;
                }
                _2927 = frontier_phi_61_pred;
                _2937 = frontier_phi_61_pred_1;
                _2935 = frontier_phi_61_pred_2;
                _2933 = frontier_phi_61_pred_3;
                _2931 = frontier_phi_61_pred_4;
                _2929 = frontier_phi_61_pred_5;
                uint _3078 = _3077 + 1u;
                if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3071 = _2927;
                    _3072 = _2929;
                    _3073 = _2931;
                    _3074 = _2933;
                    _3075 = _2935;
                    _3076 = _2937;
                    _3077 = _3078;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((4294967295u << _2943) & _2825) == 0u)
        {
            _3039 = _2926;
            _3041 = _2928;
            _3043 = _2930;
            _3045 = _2932;
            _3047 = _2934;
            _3049 = _2936;
        }
        else
        {
            float _3064 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
            float _3065 = _3064 * _2779;
            float _3066 = _3064 * _2780;
            float _3067 = _3064 * _2781;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3178 = _2926;
                float _3179 = _2928;
                float _3180 = _2930;
                float _3181 = _2932;
                float _3182 = _2934;
                float _3183 = _2936;
                uint _3184 = _2943;
                uint _3193;
                bool _3194;
                for (;;)
                {
                    _3193 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3184 << 2u)) >> 2u)).x;
                    _3194 = _3193 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3194)
                    {
                        frontier_phi_67_pred = _3181;
                        frontier_phi_67_pred_1 = _3182;
                        frontier_phi_67_pred_2 = _3183;
                        frontier_phi_67_pred_3 = _3180;
                        frontier_phi_67_pred_4 = _3179;
                        frontier_phi_67_pred_5 = _3178;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        uint _3397 = _3193;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3527;
                        bool _3528;
                        for (;;)
                        {
                            uint _3408 = ((_3184 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3408 * 40u) + 24u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3502 = (_3408 * 40u) + 28u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3527 = fma(_2781, _3515.z, fma(_2780, _3515.y, _3515.x * _2779)) + _3515.w;
                            _3528 = !((fma(_2781, _3496.z, fma(_2780, _3496.y, _3496.x * _2779)) + _3496.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3528)
                            {
                                float _3555 = _3423.x - _2779;
                                float _3556 = _3423.y - _2780;
                                float _3557 = _3423.z - _2781;
                                float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                                float _3561 = inversesqrt(_3558);
                                float _3562 = _3561 * _3555;
                                float _3563 = _3561 * _3556;
                                float _3564 = _3561 * _3557;
                                float _3568 = 1.0 - (_3558 / (_3424 * _3424));
                                float _4692 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3573 = sqrt(_3558) * _3439.w;
                                float _3575 = 1.39999997615814208984375 / (_3573 + 1.39999997615814208984375);
                                float _3576 = _3575 * _3575;
                                float _3579 = ((1.0 - _3576) * dot(vec3(_3562, _3563, _3564), vec3(_1022, _1025, _1028))) + _3576;
                                float _3582 = _3573 * _3573;
                                float _3586 = (fma(_2781, _3466.z, fma(_2780, _3466.y, _3466.x * _2779)) + _3466.w) / _3527;
                                float _3587 = (fma(_2781, _3481.z, fma(_2780, _3481.y, _3481.x * _2779)) + _3481.w) / _3527;
                                float _3591 = 1.0 - dot(vec2(_3586, _3587), vec2(_3586, _3587));
                                float _4708 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3593 = _3592 * (((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3569) / ((_3582 * 0.699999988079071044921875) + 1.0));
                                float _3605 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                                float _3606 = 1.0 - _1097;
                                float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                                float _3614 = _3613 * _3613;
                                float _3615 = _3614 * _3614;
                                float _3616 = _3562 - _3065;
                                float _3617 = _3563 - _3066;
                                float _3618 = _3564 - _3067;
                                float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                                float _3626 = dot(vec3(_1022, _1025, _1028), vec3((-0.0) - _3065, (-0.0) - _3066, (-0.0) - _3067));
                                float _4719 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3630 = dot(vec3(_1022, _1025, _1028), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                                float _4730 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                                float _3638 = _3575 * _3614;
                                float _3639 = _3638 * _3638;
                                float _3645 = ((1.0 - _3639) * dot(vec3(_1022, _1025, _1028), vec3(_3562, _3563, _3564))) + _3639;
                                float _4741 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3647 = 1.0 - _3614;
                                float _3657 = (0.5 / (((_3646 * ((_3629 * _3647) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3646 * _3647) + _3614) * _3629))) * _3646;
                                float _4752 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3667 = (_3592 * _3569) * (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3637 * _3637) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3667 * _3451.x;
                                frontier_phi_73_pred_1 = _3667 * _3451.y;
                                frontier_phi_73_pred_2 = _3593 * _3439.z;
                                frontier_phi_73_pred_3 = _3593 * _3439.y;
                                frontier_phi_73_pred_4 = _3593 * _3439.x;
                                frontier_phi_73_pred_5 = _3667 * _3451.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3671 = frontier_phi_73_pred;
                            _3672 = frontier_phi_73_pred_1;
                            _3676 = frontier_phi_73_pred_2;
                            _3675 = frontier_phi_73_pred_3;
                            _3674 = frontier_phi_73_pred_4;
                            _3673 = frontier_phi_73_pred_5;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3381;
                        frontier_phi_67_pred_1 = _3382;
                        frontier_phi_67_pred_2 = _3383;
                        frontier_phi_67_pred_3 = _3380;
                        frontier_phi_67_pred_4 = _3379;
                        frontier_phi_67_pred_5 = _3378;
                    }
                    _3046 = frontier_phi_67_pred;
                    _3048 = frontier_phi_67_pred_1;
                    _3050 = frontier_phi_67_pred_2;
                    _3044 = frontier_phi_67_pred_3;
                    _3042 = frontier_phi_67_pred_4;
                    _3040 = frontier_phi_67_pred_5;
                    uint _3185 = _3184 + 1u;
                    if (_3185 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3178 = _3040;
                        _3179 = _3042;
                        _3180 = _3044;
                        _3181 = _3046;
                        _3182 = _3048;
                        _3183 = _3050;
                        _3184 = _3185;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3048;
                frontier_phi_55_56_ladder_1 = _3050;
                frontier_phi_55_56_ladder_2 = _3046;
                frontier_phi_55_56_ladder_3 = _3044;
                frontier_phi_55_56_ladder_4 = _3042;
                frontier_phi_55_56_ladder_5 = _3040;
            }
            else
            {
                frontier_phi_55_56_ladder = _2934;
                frontier_phi_55_56_ladder_1 = _2936;
                frontier_phi_55_56_ladder_2 = _2932;
                frontier_phi_55_56_ladder_3 = _2930;
                frontier_phi_55_56_ladder_4 = _2928;
                frontier_phi_55_56_ladder_5 = _2926;
            }
            _3039 = frontier_phi_55_56_ladder_5;
            _3041 = frontier_phi_55_56_ladder_4;
            _3043 = frontier_phi_55_56_ladder_3;
            _3045 = frontier_phi_55_56_ladder_2;
            _3047 = frontier_phi_55_56_ladder;
            _3049 = frontier_phi_55_56_ladder_1;
        }
        float _3054 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _2838 = (_3054 * _3045) + _2271;
        _2840 = (_3054 * _3047) + _2273;
        _2842 = (_3054 * _3049) + _2275;
        _2844 = ((_3039 * _1065) * _3054) + _2619;
        _2846 = ((_3041 * _1067) * _3054) + _2621;
        _2848 = ((_3043 * _1068) * _3054) + _2623;
    }
    else
    {
        _2838 = _2271;
        _2840 = _2273;
        _2842 = _2275;
        _2844 = _2619;
        _2846 = _2621;
        _2848 = _2623;
    }
    float _4768 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _4779 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4790 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    uint _2868 = _278 + 6u;
    float _2876 = _1003 / cbSceneParam._m0[86u].x;
    float _2877 = _1004 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _937 : (isnan(_937) ? cbSceneParam._m0[77u].w : min(_937, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_937 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_937) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _937 : min(cbSceneParam._m0[80u].w, _937));
        float _2952 = _2951 / _937;
        float _2963 = _2952 * _988;
        float _2964 = _989 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2967 = _2952 * _990;
        float _2969 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2970 = _2969 + cbSceneParam._m0[79u].w;
        float _2971 = cbSceneParam._m0[79u].w - _2964;
        float _2977 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2967 * _2967));
        float _2980 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2977;
        float _2985 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2987 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3140;
        if (abs((_2965 - _2969) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3140 = ((((_2970 > 0.0) ? exp2(_2985 * _2970) : (2.0 - exp2(_2987 * _2970))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2980;
        }
        else
        {
            float _3100 = 1.0 / cbSceneParam._m0[80u].x;
            float _3101 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : max(_2970, _2971));
            float _3102 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : min(_2970, _2971));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            _3140 = ((abs(_2977 / _2965) * cbSceneParam._m0[80u].y) * ((((_3111 - _3112) * 2.0) - ((exp2(_2985 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0)))) - exp2(_2985 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))))) * _3100)) - ((exp2(_2987 * _3111) - exp2(_2987 * _3112)) * _3100))) + (_2980 * cbSceneParam._m0[80u].z);
        }
        vec4 _3142 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3151 = exp2((_3140 * (-1.44269502162933349609375)) * (1.0 - _3142.w));
        float _3152 = log2(_3151);
        float _3168 = log2(_2896);
        _2989 = (exp2(_3168 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].x)) * _3142.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2991 = (exp2(_3168 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].y)) * _3142.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2993 = (exp2(_3168 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].z)) * _3142.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2995 = _3151 * _2896;
    }
    else
    {
        _2989 = _2893;
        _2991 = _2894;
        _2993 = _2895;
        _2995 = _2896;
    }
    float _3007 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3008 = _3007 == 3.0;
    float _3009 = log2(_2995);
    float _3016 = exp2(_3009 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2838 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1081))) + ((_2844 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3017 = exp2(_3009 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2840 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1081))) + ((_2846 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3018 = exp2(_3009 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2842 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1081))) + ((_2848 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3027 = (_3007 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3027 * (_3008 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2989)));
    SV_Target.y = _3027 * (_3008 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2991)));
    SV_Target.z = _3027 * (_3008 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2993)));
    SV_Target.w = cbInstanceData._m0[_2868].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
}


