#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1477;
float _3855;
float _3856;
float _3857;
float _3858;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3867 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3878 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _557 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _344.z) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3889 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _565 = (_558 * ((_516.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _566 = (_558 * ((_516.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _567 = (_558 * ((_516.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _605 = _602.y;
    float _606 = _602.z;
    float _613 = ((_585.x - _604) * _415) + _604;
    float _614 = ((_585.y - _605) * _415) + _605;
    float _615 = ((_585.z - _606) * _415) + _606;
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _638 = ((_627.x - _613) * _488) + _613;
    float _639 = ((_627.y - _614) * _488) + _614;
    float _640 = ((_627.z - _615) * _488) + _615;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _665 = ((_652.z - _640) * _558) + _640;
    float _668 = ((((_652.x - _638) * _558) + _638) * 2.0) + (-1.0);
    float _670 = ((((_652.y - _639) * _558) + _639) * 2.0) + (-1.0);
    float _671 = dot(vec2(_668, _670), vec2(_668, _670));
    float _3900 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _676 = sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _717 = _715.x;
    float _718 = 1.0 - _717;
    float _733 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_717 - _718) * cbMtdParam._m0[24u].z) + _718) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3911 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _741 = (_734 * (cbMtdParam._m0[17u].x - _565)) + _565;
    float _742 = (_734 * (cbMtdParam._m0[17u].y - _566)) + _566;
    float _743 = (_734 * (cbMtdParam._m0[17u].z - _567)) + _567;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _771) * _415) + _771;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _789) * _488) + _789;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _806) * _558) + _806;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _824) * cbMtdParam._m0[19u].z) + _824;
    float _830 = _828 - (_828 * _734);
    float _834 = (cbMtdParam._m0[19u].w * (_690.z - _665)) + _665;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _854 = (_847.x * 2.0) + (-1.0);
    float _855 = (_847.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _3922 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _864 = (_734 * (_847.z - _834)) + _834;
    float _867 = (((_690.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _668;
    float _868 = (((_690.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _670;
    float _880 = (((_854 - _867) + (cbMtdParam._m0[21u].x * _867)) * _734) + _867;
    float _881 = (((_855 - _868) + (cbMtdParam._m0[21u].x * _868)) * _734) + _868;
    float _882 = (_734 * (sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) - _676)) + _676;
    float _884 = cbMtdParam._m0[22u].x + _690.w;
    float _887 = fma(_882, _243 * NORMAL.x, fma(_881, _250 * TANGENT.x, (_236 * _228) * _880));
    float _890 = fma(_882, _243 * NORMAL.y, fma(_881, _250 * TANGENT.y, (_236 * _229) * _880));
    float _893 = fma(_882, _243 * NORMAL.z, fma(_881, _250 * TANGENT.z, (_236 * _230) * _880));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _3933 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _901 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _3955 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3966 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3977 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _3988 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _906 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _920 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _970 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _960);
    float _971 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _960);
    float _972 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _960);
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    vec4 _984 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _986 = _984.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1158 = sqrt(((_970 * _970) + (_971 * _971)) + (_972 * _972));
        float _1164 = (cbMatDynParam._m0[5u].x * _1158) + cbMatDynParam._m0[5u].y;
        float _3999 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1169 = (cbMatDynParam._m0[5u].z * _1158) + cbMatDynParam._m0[5u].w;
        float _4010 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) - _1165)) + _1165) < ((_986 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _997 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _998 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1016 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1019 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1022 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1035 = _256 + 9u;
    uint _1036 = _1035 + uint(cbMatDynParam._m0[0u].w);
    float _1042 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_1036].x;
    float _1043 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_1036].y;
    float _1044 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_1036].z;
    float _4021 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1048 = 1.0 - _906;
    float _1049 = _1045 * _1048;
    float _1050 = _1046 * _1048;
    float _1051 = _1047 * _1048;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _906;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _906;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _906;
    float _1059 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _997, cbSceneParam._m0[86u].y * _998));
    float _1075 = ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_898, _899, _900), vec3(_977, _978, _979));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _898) - _977;
    float _1084 = (_1079 * _899) - _978;
    float _1085 = (_1079 * _900) - _979;
    float _1089 = abs(dot(vec3(_977, _978, _979), vec3(_898, _899, _900)));
    float _4054 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_901);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1091;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1476;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1201 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1205 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1209 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1234 = _1139 + _898;
        float _1235 = _1143 + _899;
        float _1236 = _1147 + _900;
        float _1246 = fma(_1236, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1234)) - _1201;
        float _1247 = fma(_1236, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1234)) - _1205;
        float _1248 = fma(_1236, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1234)) - _1209;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1201 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1205 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[34u].z) + ((((((_1209 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1304 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1270.x + (-0.5));
        float _1306 = _1304 * (_1270.y + (-0.5));
        float _1307 = _1304 * (_1270.z + (-0.5));
        float _1314 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1277.x + (-0.5));
        float _1316 = _1314 * (_1277.y + (-0.5));
        float _1317 = _1314 * (_1277.z + (-0.5));
        float _1324 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1284.x + (-0.5));
        float _1326 = _1324 * (_1284.y + (-0.5));
        float _1327 = _1324 * (_1284.z + (-0.5));
        float _1334 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1291.x + (-0.5));
        float _1336 = _1334 * (_1291.y + (-0.5));
        float _1337 = _1334 * (_1291.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1358 = (dot(vec3(_898, _899, _900), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1368 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4102 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1370 + 1.0))) + _1375) * _1338;
        float _1385 = _1306 * 0.5;
        float _1386 = _1316 * 0.5;
        float _1387 = _1326 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_898, _899, _900), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4135 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1412 + 1.0))) + _1417) * _1339;
        float _1427 = _1307 * 0.5;
        float _1428 = _1317 * 0.5;
        float _1429 = _1327 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_898, _899, _900), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4168 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1454 + 1.0))) + _1459) * _1340;
        _1476 = _1307;
        _1478 = _1306;
        _1479 = _1305;
        _1480 = _1317;
        _1481 = _1316;
        _1482 = _1315;
        _1483 = _1327;
        _1484 = _1326;
        _1485 = _1325;
        _1486 = _1340;
        _1487 = _1339;
        _1488 = _1338;
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1477;
        _1478 = _1477;
        _1479 = _1477;
        _1480 = _1477;
        _1481 = _1477;
        _1482 = _1477;
        _1483 = _1477;
        _1484 = _1477;
        _1485 = _1477;
        _1486 = _1477;
        _1487 = _1477;
        _1488 = _1477;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1517 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1521 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1525 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1548 = _1139 + _898;
        float _1549 = _1143 + _899;
        float _1550 = _1147 + _900;
        float _1560 = fma(_1550, cbModelParam._m0[30u].z, fma(_1549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1548)) - _1517;
        float _1561 = fma(_1550, cbModelParam._m0[31u].z, fma(_1549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1548)) - _1521;
        float _1562 = fma(_1550, cbModelParam._m0[32u].z, fma(_1549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1548)) - _1525;
        float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
        float _1579 = ((_1566 * _1560) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1517 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1566 * _1561) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1521 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1566 * _1562) / cbModelParam._m0[35u].z) + ((((((_1525 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        float _1616 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1583.x + (-0.5));
        float _1618 = _1616 * (_1583.y + (-0.5));
        float _1619 = _1616 * (_1583.z + (-0.5));
        float _1626 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1590.x + (-0.5));
        float _1628 = _1626 * (_1590.y + (-0.5));
        float _1629 = _1626 * (_1590.z + (-0.5));
        float _1636 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1597.x + (-0.5));
        float _1638 = _1636 * (_1597.y + (-0.5));
        float _1639 = _1636 * (_1597.z + (-0.5));
        float _1646 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1604.x + (-0.5));
        float _1648 = _1646 * (_1604.y + (-0.5));
        float _1649 = _1646 * (_1604.z + (-0.5));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = _1617 * 0.5;
        float _1654 = _1627 * 0.5;
        float _1655 = _1637 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_898, _899, _900), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4231 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1680 + 1.0))) + _1685) * _1650;
        float _1695 = _1618 * 0.5;
        float _1696 = _1628 * 0.5;
        float _1697 = _1638 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_898, _899, _900), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4264 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1722 + 1.0))) + _1727) * _1651;
        float _1737 = _1619 * 0.5;
        float _1738 = _1629 * 0.5;
        float _1739 = _1639 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_898, _899, _900), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4297 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1764 + 1.0))) + _1769) * _1652;
        _1786 = _1619;
        _1787 = _1618;
        _1788 = _1617;
        _1789 = _1629;
        _1790 = _1628;
        _1791 = _1627;
        _1792 = _1639;
        _1793 = _1638;
        _1794 = _1637;
        _1795 = _1652;
        _1796 = _1651;
        _1797 = _1650;
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
    }
    else
    {
        _1786 = _1477;
        _1787 = _1477;
        _1788 = _1477;
        _1789 = _1477;
        _1790 = _1477;
        _1791 = _1477;
        _1792 = _1477;
        _1793 = _1477;
        _1794 = _1477;
        _1795 = _1477;
        _1796 = _1477;
        _1797 = _1477;
        _1798 = 0.0;
        _1799 = 0.0;
        _1800 = 0.0;
    }
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1489)) + _1489;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1490)) + _1490;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1491)) + _1491;
    float _1833 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1810));
    float _1854 = _1083 * 0.5;
    float _1855 = _1084 * 0.5;
    float _1856 = _1085 * 0.5;
    float _1857 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1860 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1863 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1897;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1870 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1476, _1480, _1483, _1486));
        float _1874 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1878 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1885 = dot(vec4(cbModelParam._m0[39u]), vec4(_1854, _1855, _1856, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1908;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1899 = dot(vec4(cbModelParam._m0[40u]), vec4(_1854, _1855, _1856, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1912 = (_1908 * cbModelParam._m0[1u].x) + (_1897 * (1.0 - cbModelParam._m0[1u].x));
    float _1922 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1922 : min(cbModelParam._m0[25u].z, _1922));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1970 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1974 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1978 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1981 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1984 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1987 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2015;
        if (_1981 > 0.0)
        {
            _2015 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2015 = frontier_phi_17_15_ladder;
        }
        float _2218;
        if (_1984 > 0.0)
        {
            _2218 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2218 = frontier_phi_26_22_ladder;
        }
        float _2472;
        if (_1987 > 0.0)
        {
            _2472 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2472 = frontier_phi_38_33_ladder;
        }
        float _2474 = isnan(_2218) ? _2015 : (isnan(_2015) ? _2218 : min(_2015, _2218));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1981) + _1970;
        float _2480 = (_2475 * _1984) + _1974;
        float _2481 = (_2475 * _1987) + _1978;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1923);
            frontier_phi_16_38_ladder = _2609.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2609.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2609.x * cbModelParam._m0[1u].y;
        }
        _2003 = frontier_phi_16_38_ladder_2;
        _2005 = frontier_phi_16_38_ladder_1;
        _2007 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1923);
        _2003 = _1991.x * cbModelParam._m0[1u].y;
        _2005 = _1991.y * cbModelParam._m0[1u].y;
        _2007 = _1991.z * cbModelParam._m0[1u].y;
    }
    float _2011 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _2012 = isnan(_2011) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2011 : min(cbModelParam._m0[25u].w, _2011));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2066 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2070 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2074 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2077 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2080 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2083 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2223;
        if (_2077 > 0.0)
        {
            _2223 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2223 = frontier_phi_28_24_ladder;
        }
        float _2499;
        if (_2080 > 0.0)
        {
            _2499 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2499 = frontier_phi_40_35_ladder;
        }
        float _2712;
        if (_2083 > 0.0)
        {
            _2712 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2712 = frontier_phi_49_46_ladder;
        }
        float _2714 = isnan(_2499) ? _2223 : (isnan(_2223) ? _2499 : min(_2223, _2499));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _2077) + _2066;
        float _2720 = (_2715 * _2080) + _2070;
        float _2721 = (_2715 * _2083) + _2074;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _2012);
            frontier_phi_25_49_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2102 = frontier_phi_25_49_ladder_2;
        _2104 = frontier_phi_25_49_ladder_1;
        _2106 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2012);
        _2102 = _2086.x * cbModelParam._m0[1u].z;
        _2104 = _2086.y * cbModelParam._m0[1u].z;
        _2106 = _2086.z * cbModelParam._m0[1u].z;
    }
    float _2119 = (((_1110 * _1059) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2102 - _2003)) + _2003);
    float _2121 = (((_1110 * _1061) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2104 - _2005)) + _2005);
    float _2123 = (((_1110 * _1062) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2106 - _2007)) + _2007);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2119 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2119 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2119 * cbSceneParam._m0[91u].x));
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _1075 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2177 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2181 = _2144 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_898, _899, _900));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_898, _899, _900));
    float _4433 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4444 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2161].x * _2167) * _2202) + ((cbLight._m0[_2171].x * _2177) * _2200);
    float _2210 = ((_2167 * cbLight._m0[_2161].y) * _2202) + ((_2177 * cbLight._m0[_2171].y) * _2200);
    float _2211 = ((_2167 * cbLight._m0[_2161].z) * _2202) + ((_2177 * cbLight._m0[_2171].z) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2144 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4455 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2255 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2443 = _2144 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4471 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2462 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2273 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2228;
        _2275 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2230;
        _2277 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2232;
    }
    uint _2280 = _2144 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _901) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2144].x + _977;
    float _2296 = cbLight._m0[_2144].y + _978;
    float _2297 = cbLight._m0[_2144].z + _979;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2144].xyz));
    float _4487 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2309 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2310 = dot(vec3(_898, _899, _900), vec3(_2302, _2303, _2304));
    float _4509 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2302, _2303, _2304));
    float _4520 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2331 = 0.959999978542327880859375 - _1056;
    float _2333 = 0.959999978542327880859375 - _1057;
    float _2334 = 0.959999978542327880859375 - _1058;
    float _2341 = 1.0 - _2294;
    float _2352 = (0.5 / (((_2309 * ((_2308 * _2341) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2341) + _2294) * _2308))) * _2308;
    float _4531 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2365 = _2144 + 9u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _901) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2181].x + _977;
    float _2379 = cbLight._m0[_2181].y + _978;
    float _2380 = cbLight._m0[_2181].z + _979;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2181].xyz));
    float _4542 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2392 = dot(vec3(_898, _899, _900), vec3(_2385, _2386, _2387));
    float _4553 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2385, _2386, _2387));
    float _4564 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2377 * _2377;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2418 = 1.0 - _2377;
    float _2428 = (0.5 / (((_2309 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2418) + _2377) * _2391))) * _2391;
    float _4575 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    float _2440 = (((((_2411 * _2331) + _1059) * cbLight._m0[_2365].x) * _2430) * _2167) + (((((_2330 * _2331) + _1059) * cbLight._m0[_2280].x) * _2354) * _2177);
    float _2441 = (((((_2411 * _2333) + _1061) * cbLight._m0[_2365].y) * _2430) * _2167) + (((((_2330 * _2333) + _1061) * cbLight._m0[_2280].y) * _2354) * _2177);
    float _2442 = (((((_2411 * _2334) + _1062) * cbLight._m0[_2365].z) * _2430) * _2167) + (((((_2330 * _2334) + _1062) * cbLight._m0[_2280].z) * _2354) * _2177);
    float _2504;
    float _2506;
    float _2508;
    if (_2217)
    {
        _2504 = _2440;
        _2506 = _2441;
        _2508 = _2442;
    }
    else
    {
        uint _2510 = _2144 + 2u;
        uint _2514 = _2144 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _901) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _977;
        float _2531 = cbLight._m0[_2510].y + _978;
        float _2532 = cbLight._m0[_2510].z + _979;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2510].xyz));
        float _4586 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2544 = dot(vec3(_898, _899, _900), vec3(_2537, _2538, _2539));
        float _4597 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4608 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2309 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2570) + _2529) * _2543))) * _2543;
        float _4619 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2504 = (((((_2563 * _2331) + _1059) * cbLight._m0[_2514].x) * _2582) * _2583) + _2440;
        _2506 = (((((_2563 * _2333) + _1061) * cbLight._m0[_2514].y) * _2582) * _2583) + _2441;
        _2508 = (((((_2563 * _2334) + _1062) * cbLight._m0[_2514].z) * _2582) * _2583) + _2442;
    }
    float _2618;
    float _2620;
    float _2622;
    if (_2235)
    {
        _2618 = _2504;
        _2620 = _2506;
        _2622 = _2508;
    }
    else
    {
        uint _2629 = _2144 + 3u;
        uint _2633 = _2144 + 11u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _901) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _977;
        float _2650 = cbLight._m0[_2629].y + _978;
        float _2651 = cbLight._m0[_2629].z + _979;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2629].xyz));
        float _4635 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2663 = dot(vec3(_898, _899, _900), vec3(_2656, _2657, _2658));
        float _4646 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4657 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2309 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2689) + _2648) * _2662))) * _2662;
        float _4668 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2618 = (((((_2682 * _2331) + _1059) * cbLight._m0[_2633].x) * _2701) * _2702) + _2504;
        _2620 = (((((_2682 * _2333) + _1061) * cbLight._m0[_2633].y) * _2701) * _2702) + _2506;
        _2622 = (((((_2682 * _2334) + _1062) * cbLight._m0[_2633].z) * _2701) * _2702) + _2508;
    }
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_2142.y == 0u)
    {
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2777;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2777;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2777;
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _998) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _997) / _2793)));
        float _2814 = (log2(_2780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3094)
                {
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3093;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3084 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _2778;
                        float _3290 = _3249.y - _2779;
                        float _3291 = _3249.z - _2780;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_1016, _1019, _1022), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4694 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _2778;
                        float _3325 = (-0.0) - _2779;
                        float _3326 = (-0.0) - _2780;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3341 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3342 = 1.0 - _1091;
                        float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                        float _3350 = _3349 * _3349;
                        float _3351 = _3350 * _3350;
                        float _3352 = _3331 + _3296;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3362 = dot(vec3(_1016, _1019, _1022), vec3(_3331, _3332, _3333));
                        float _4710 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3366 = dot(vec3(_1016, _1019, _1022), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                        float _4721 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                        float _3374 = _3309 * _3350;
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3299) + _3375;
                        float _4732 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3380 = 1.0 - _3350;
                        float _3390 = (0.5 / (((_3379 * ((_3365 * _3380) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3350) * _3365))) * _3379;
                        float _4743 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3401 = (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3373 * _3373) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3153 = (_3320 * _3268.x) + _3226;
                        _3154 = (_3320 * _3268.y) + _3227;
                        _3155 = (_3320 * _3268.z) + _3228;
                        _3150 = (_3401 * _3285.x) + _3223;
                        _3151 = (_3401 * _3285.y) + _3224;
                        _3152 = (_3401 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_66_pred = _3150;
                    frontier_phi_66_pred_1 = _3155;
                    frontier_phi_66_pred_2 = _3154;
                    frontier_phi_66_pred_3 = _3153;
                    frontier_phi_66_pred_4 = _3152;
                    frontier_phi_66_pred_5 = _3151;
                }
                _2926 = frontier_phi_66_pred;
                _2936 = frontier_phi_66_pred_1;
                _2934 = frontier_phi_66_pred_2;
                _2932 = frontier_phi_66_pred_3;
                _2930 = frontier_phi_66_pred_4;
                _2928 = frontier_phi_66_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2926;
                    _3079 = _2928;
                    _3080 = _2930;
                    _3081 = _2932;
                    _3082 = _2934;
                    _3083 = _2936;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2942) & _2824) == 0u)
        {
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
            float _3072 = _3071 * _2778;
            float _3073 = _3071 * _2779;
            float _3074 = _3071 * _2780;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3206 = _2925;
                float _3207 = _2927;
                float _3208 = _2929;
                float _3209 = _2931;
                float _3210 = _2933;
                float _3211 = _2935;
                uint _3212 = _2942;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3222)
                    {
                        frontier_phi_77_pred = _3211;
                        frontier_phi_77_pred_1 = _3210;
                        frontier_phi_77_pred_2 = _3209;
                        frontier_phi_77_pred_3 = _3208;
                        frontier_phi_77_pred_4 = _3207;
                        frontier_phi_77_pred_5 = _3206;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        uint _3434 = _3221;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3445 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3445 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3445 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3445 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_2780, _3552.z, fma(_2779, _3552.y, _3552.x * _2778)) + _3552.w;
                            _3565 = !((fma(_2780, _3533.z, fma(_2779, _3533.y, _3533.x * _2778)) + _3533.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3460.x - _2778;
                                float _3593 = _3460.y - _2779;
                                float _3594 = _3460.z - _2780;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3461 * _3461));
                                float _4754 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3610 = sqrt(_3595) * _3476.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_1016, _1019, _1022))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_2780, _3503.z, fma(_2779, _3503.y, _3503.x * _2778)) + _3503.w) / _3564;
                                float _3624 = (fma(_2780, _3518.z, fma(_2779, _3518.y, _3518.x * _2778)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4770 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _1091;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3072;
                                float _3654 = _3600 - _3073;
                                float _3655 = _3601 - _3074;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_1016, _1019, _1022), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4781 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3667 = dot(vec3(_1016, _1019, _1022), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4792 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_1016, _1019, _1022), vec3(_3599, _3600, _3601))) + _3676;
                                float _4803 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4814 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3630 * _3476.y;
                                frontier_phi_83_pred_1 = _3630 * _3476.x;
                                frontier_phi_83_pred_2 = _3704 * _3488.z;
                                frontier_phi_83_pred_3 = _3704 * _3488.y;
                                frontier_phi_83_pred_4 = _3704 * _3488.x;
                                frontier_phi_83_pred_5 = _3630 * _3476.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3712 = frontier_phi_83_pred;
                            _3711 = frontier_phi_83_pred_1;
                            _3710 = frontier_phi_83_pred_2;
                            _3709 = frontier_phi_83_pred_3;
                            _3708 = frontier_phi_83_pred_4;
                            _3713 = frontier_phi_83_pred_5;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3420;
                        frontier_phi_77_pred_1 = _3419;
                        frontier_phi_77_pred_2 = _3418;
                        frontier_phi_77_pred_3 = _3417;
                        frontier_phi_77_pred_4 = _3416;
                        frontier_phi_77_pred_5 = _3415;
                    }
                    _3057 = frontier_phi_77_pred;
                    _3055 = frontier_phi_77_pred_1;
                    _3053 = frontier_phi_77_pred_2;
                    _3051 = frontier_phi_77_pred_3;
                    _3049 = frontier_phi_77_pred_4;
                    _3047 = frontier_phi_77_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3047;
                        _3207 = _3049;
                        _3208 = _3051;
                        _3209 = _3053;
                        _3210 = _3055;
                        _3211 = _3057;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3051;
                frontier_phi_58_59_ladder_1 = _3057;
                frontier_phi_58_59_ladder_2 = _3055;
                frontier_phi_58_59_ladder_3 = _3053;
                frontier_phi_58_59_ladder_4 = _3049;
                frontier_phi_58_59_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_58_59_ladder = _2929;
                frontier_phi_58_59_ladder_1 = _2935;
                frontier_phi_58_59_ladder_2 = _2933;
                frontier_phi_58_59_ladder_3 = _2931;
                frontier_phi_58_59_ladder_4 = _2927;
                frontier_phi_58_59_ladder_5 = _2925;
            }
            _3046 = frontier_phi_58_59_ladder_5;
            _3048 = frontier_phi_58_59_ladder_4;
            _3050 = frontier_phi_58_59_ladder;
            _3052 = frontier_phi_58_59_ladder_3;
            _3054 = frontier_phi_58_59_ladder_2;
            _3056 = frontier_phi_58_59_ladder_1;
        }
        float _3061 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2837 = (_3061 * _3052) + _2273;
        _2839 = (_3061 * _3054) + _2275;
        _2841 = (_3061 * _3056) + _2277;
        _2843 = ((_3046 * _1059) * _3061) + _2618;
        _2845 = ((_3048 * _1061) * _3061) + _2620;
        _2847 = ((_3050 * _1062) * _3061) + _2622;
    }
    else
    {
        _2837 = _2273;
        _2839 = _2275;
        _2841 = _2277;
        _2843 = _2618;
        _2845 = _2620;
        _2847 = _2622;
    }
    float _4830 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _4841 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4852 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _2864 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2837 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1075))) + ((_2843 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _2865 = ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2839 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1075))) + ((_2845 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2841 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1075))) + ((_2847 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    uint _2867 = _256 + 6u;
    float _2875 = _997 / cbSceneParam._m0[86u].x;
    float _2876 = _998 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _920 : (isnan(_920) ? cbSceneParam._m0[77u].w : min(_920, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_920 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_920) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _920 : min(cbSceneParam._m0[80u].w, _920));
        float _2951 = _2950 / _920;
        float _2962 = _2951 * _970;
        float _2963 = _971 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2966 = _2951 * _972;
        float _2968 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2963;
        float _2976 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2964 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3163 = ((abs(_2976 / _2964) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2986 * _3118) - exp2(_2986 * _3119)) * _3107))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2895);
        _2988 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2990 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2992 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2994 = _3174 * _2895;
    }
    else
    {
        _2988 = _2892;
        _2990 = _2893;
        _2992 = _2894;
        _2994 = _2895;
    }
    bool _3201;
    vec4 _3004;
    vec4 _3026;
    float _3028;
    float _3032;
    float _3033;
    float _3034;
    float _3035;
    bool _3045;
    for (;;)
    {
        _3004 = cbMatDynParam._m0[0u];
        float _3006 = roundEven(_3004.y);
        bool _3007 = _3006 == 3.0;
        float _3008 = log2(_2994);
        float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * _2864;
        float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * _2865;
        float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * _2866;
        float _3024 = _986 + (-0.5);
        _3026 = cbMtdParam._m0[1u];
        _3028 = _3026.y * _3024;
        float _3031 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3032 = _3031 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = _3031 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
        _3034 = _3031 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
        _3035 = _3024 * 0.999000012874603271484375;
        _3045 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3045)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3035) < 0.5)
            {
                _3201 = true;
                break;
            }
        }
        uint _3142 = _1035 + uint(_3004.w);
        if ((cbInstanceData._m0[_3142].w < 1.0) && ((cbInstanceData._m0[_3142].w + _3035) < 0.5))
        {
            _3201 = true;
            break;
        }
        if ((_3028 + 1.0) < _3026.x)
        {
            _3201 = true;
            break;
        }
        _3201 = false;
        break;
    }
    float _3406;
    if (_3201)
    {
        discard_state = true;
        _3406 = 0.0;
    }
    else
    {
        _3406 = cbInstanceData._m0[_2867].w;
    }
    SV_Target.x = _3032;
    SV_Target.y = _3033;
    SV_Target.z = _3034;
    SV_Target.w = _3406;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
    discard_exit();
}


