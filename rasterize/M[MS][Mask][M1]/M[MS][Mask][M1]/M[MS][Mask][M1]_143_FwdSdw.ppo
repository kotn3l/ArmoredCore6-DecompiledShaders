#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1569;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4175 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4186 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4197 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = _345.x * cbMtdParam._m0[11u].x;
    float _351 = _345.y * cbMtdParam._m0[11u].y;
    float _352 = _345.z * cbMtdParam._m0[11u].z;
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _390.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4208 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _464 = (_457 * ((_371.x * cbMtdParam._m0[12u].x) - _350)) + _350;
    float _465 = (_457 * ((_371.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _466 = (_457 * ((_371.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _390.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4219 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _577 = _575.x;
    float _587 = dot(vec4(_577, _575.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _599 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _390.z) * 2.0) - ((((_577 - _587) * cbMtdParam._m0[23u].w) + _587) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4230 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _607 = (_600 * ((_558.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _608 = (_600 * ((_558.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _609 = (_600 * ((_558.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _613 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _607;
    float _616 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _608;
    float _619 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _609;
    float _626 = ((_607 - _613) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) + _613;
    float _627 = ((_608 - _616) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _616;
    float _628 = ((_609 - _619) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) + _619;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _307) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _308) + cbTextureTilingScale._m0[14u].w));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _711 = _707.z;
    float _718 = ((_690.x - _709) * _457) + _709;
    float _719 = ((_690.y - _710) * _457) + _710;
    float _720 = ((_690.z - _711) * _457) + _711;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _743 = ((_732.x - _718) * _530) + _718;
    float _744 = ((_732.y - _719) * _530) + _719;
    float _745 = ((_732.z - _720) * _530) + _720;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _770 = ((_757.z - _745) * _600) + _745;
    float _773 = ((((_757.x - _743) * _600) + _743) * 2.0) + (-1.0);
    float _774 = ((((_757.y - _744) * _600) + _744) * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4241 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))));
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _810 = (_773 + ((((_665.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_798.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _811 = (_774 + ((((_665.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_798.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _814 = fma(_780, _255, fma(_811, _262, _810 * _248));
    float _817 = fma(_780, _256, fma(_811, _263, _810 * _249));
    float _820 = fma(_780, _257, fma(_811, _264, _810 * _250));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    vec4 _851 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _853 = _851.x;
    float _854 = 1.0 - _853;
    float _862 = (cbMtdParam._m0[19u].x + dot(vec4(_824 * _814, _824 * _817, _824 * _820, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_853 - _854) * cbMtdParam._m0[24u].z) + _854) * cbMtdParam._m0[21u].z);
    float _4252 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _863 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _870 = (_863 * ((_646.x * cbMtdParam._m0[18u].x) - _626)) + _626;
    float _871 = (_863 * ((_646.y * cbMtdParam._m0[18u].y) - _627)) + _627;
    float _872 = (_863 * ((_646.z * cbMtdParam._m0[18u].z) - _628)) + _628;
    vec4 _898 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _900 = _898.x;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _900) * _457) + _900;
    float _935 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _918) * _530) + _918;
    float _953 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _935) * _600) + _935;
    float _957 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _953) * cbMtdParam._m0[19u].z) + _953;
    float _959 = _957 - (_957 * _863);
    float _964 = (((_665.z - _770) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _770;
    float _968 = ((_798.z - _964) * cbMtdParam._m0[19u].w) + _964;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _988 = (_981.x * 2.0) + (-1.0);
    float _989 = (_981.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4263 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _998 = ((_981.z - _968) * _863) + _968;
    float _1008 = ((sqrt(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) - _780) * _863) + _780;
    float _1011 = (((_988 - _810) * _863) + _810) + (cbMtdParam._m0[21u].x * _810);
    float _1012 = (((_989 - _811) * _863) + _811) + (cbMtdParam._m0[21u].x * _811);
    float _1016 = cbMtdParam._m0[22u].x + _798.w;
    float _1019 = fma(_1008, _255, fma(_1012, _262, _1011 * _248));
    float _1022 = fma(_1008, _256, fma(_1012, _263, _1011 * _249));
    float _1025 = fma(_1008, _257, fma(_1012, _264, _1011 * _250));
    float _1029 = inversesqrt(dot(vec3(_1019, _1022, _1025), vec3(_1019, _1022, _1025)));
    float _1030 = _1029 * _1019;
    float _1031 = _1029 * _1022;
    float _1032 = _1029 * _1025;
    float _4274 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1033 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _4296 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4307 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4318 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4329 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _1038 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _1052 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1102 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1092);
    float _1103 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1092);
    float _1104 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1092);
    float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
    float _1109 = _1102 * _1108;
    float _1110 = _1103 * _1108;
    float _1111 = _1104 * _1108;
    float _1117 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1118 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1136 = fma(_1032, cbSceneParam._m0[5u].z, fma(_1031, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1030));
    float _1139 = fma(_1032, cbSceneParam._m0[6u].z, fma(_1031, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1030));
    float _1142 = fma(_1032, cbSceneParam._m0[7u].z, fma(_1031, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1030));
    uint _1156 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1162 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1156].x;
    float _1163 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1156].y;
    float _1164 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1156].z;
    float _4340 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _1167 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _1168 = 1.0 - _1038;
    float _1169 = _1165 * _1168;
    float _1170 = _1166 * _1168;
    float _1171 = _1167 * _1168;
    float _1176 = (_1165 + (-0.039999999105930328369140625)) * _1038;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1038;
    float _1178 = (_1167 + (-0.039999999105930328369140625)) * _1038;
    float _1179 = _1176 + 0.039999999105930328369140625;
    float _1181 = _1177 + 0.039999999105930328369140625;
    float _1182 = _1178 + 0.039999999105930328369140625;
    vec4 _1191 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1117, cbSceneParam._m0[86u].y * _1118));
    float _1195 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * TEXCOORD_5.w) * _1191.x;
    float _1196 = dot(vec3(_1030, _1031, _1032), vec3(_1109, _1110, _1111));
    float _1199 = _1196 * 2.0;
    float _1203 = (_1199 * _1030) - _1109;
    float _1204 = (_1199 * _1031) - _1110;
    float _1205 = (_1199 * _1032) - _1111;
    float _1209 = abs(dot(vec3(_1109, _1110, _1111), vec3(_1030, _1031, _1032)));
    float _4373 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1211 = sqrt(_1033);
    float _1224 = exp2((_1211 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1211 * 3.0));
    float _1230 = (1.0 - _1224) * ((_1211 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1231 = _1224 * _1211;
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1568;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1293 = fma(_1267, cbModelParam._m0[26u].z, fma(_1263, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1259));
        float _1297 = fma(_1267, cbModelParam._m0[27u].z, fma(_1263, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1259));
        float _1301 = fma(_1267, cbModelParam._m0[28u].z, fma(_1263, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1259));
        float _1326 = _1259 + _1030;
        float _1327 = _1263 + _1031;
        float _1328 = _1267 + _1032;
        float _1338 = fma(_1328, cbModelParam._m0[26u].z, fma(_1327, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1326)) - _1293;
        float _1339 = fma(_1328, cbModelParam._m0[27u].z, fma(_1327, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1326)) - _1297;
        float _1340 = fma(_1328, cbModelParam._m0[28u].z, fma(_1327, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1326)) - _1301;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1293 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1297 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[34u].z) + ((((((_1301 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1396 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1362.x + (-0.5));
        float _1398 = _1396 * (_1362.y + (-0.5));
        float _1399 = _1396 * (_1362.z + (-0.5));
        float _1406 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1369.x + (-0.5));
        float _1408 = _1406 * (_1369.y + (-0.5));
        float _1409 = _1406 * (_1369.z + (-0.5));
        float _1416 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1376.x + (-0.5));
        float _1418 = _1416 * (_1376.y + (-0.5));
        float _1419 = _1416 * (_1376.z + (-0.5));
        float _1426 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1383.x + (-0.5));
        float _1428 = _1426 * (_1383.y + (-0.5));
        float _1429 = _1426 * (_1383.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1450 = (dot(vec3(_1030, _1031, _1032), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1460 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4421 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1462 + 1.0))) + _1467) * _1430;
        float _1477 = _1398 * 0.5;
        float _1478 = _1408 * 0.5;
        float _1479 = _1418 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_1030, _1031, _1032), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4454 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1504 + 1.0))) + _1509) * _1431;
        float _1519 = _1399 * 0.5;
        float _1520 = _1409 * 0.5;
        float _1521 = _1419 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_1030, _1031, _1032), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4487 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1546 + 1.0))) + _1551) * _1432;
        _1568 = _1399;
        _1570 = _1398;
        _1571 = _1397;
        _1572 = _1409;
        _1573 = _1408;
        _1574 = _1407;
        _1575 = _1419;
        _1576 = _1418;
        _1577 = _1417;
        _1578 = _1432;
        _1579 = _1431;
        _1580 = _1430;
        _1581 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1582 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1583 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1569;
        _1570 = _1569;
        _1571 = _1569;
        _1572 = _1569;
        _1573 = _1569;
        _1574 = _1569;
        _1575 = _1569;
        _1576 = _1569;
        _1577 = _1569;
        _1578 = _1569;
        _1579 = _1569;
        _1580 = _1569;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1606 = fma(_1267, cbModelParam._m0[30u].z, fma(_1263, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1259));
        float _1610 = fma(_1267, cbModelParam._m0[31u].z, fma(_1263, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1259));
        float _1614 = fma(_1267, cbModelParam._m0[32u].z, fma(_1263, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1259));
        float _1637 = _1259 + _1030;
        float _1638 = _1263 + _1031;
        float _1639 = _1267 + _1032;
        float _1649 = fma(_1639, cbModelParam._m0[30u].z, fma(_1638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1637)) - _1606;
        float _1650 = fma(_1639, cbModelParam._m0[31u].z, fma(_1638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1637)) - _1610;
        float _1651 = fma(_1639, cbModelParam._m0[32u].z, fma(_1638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1637)) - _1614;
        float _1655 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
        float _1668 = ((_1655 * _1649) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1606 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1669 = ((_1655 * _1650) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1610 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1670 = ((_1655 * _1651) / cbModelParam._m0[35u].z) + ((((((_1614 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        float _1705 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1672.x + (-0.5));
        float _1707 = _1705 * (_1672.y + (-0.5));
        float _1708 = _1705 * (_1672.z + (-0.5));
        float _1715 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1679.x + (-0.5));
        float _1717 = _1715 * (_1679.y + (-0.5));
        float _1718 = _1715 * (_1679.z + (-0.5));
        float _1725 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1686.x + (-0.5));
        float _1727 = _1725 * (_1686.y + (-0.5));
        float _1728 = _1725 * (_1686.z + (-0.5));
        float _1735 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1693.x + (-0.5));
        float _1737 = _1735 * (_1693.y + (-0.5));
        float _1738 = _1735 * (_1693.z + (-0.5));
        float _1739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1740 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1742 = _1706 * 0.5;
        float _1743 = _1716 * 0.5;
        float _1744 = _1726 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_1030, _1031, _1032), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1739 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4550 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1769 + 1.0))) + _1774) * _1739;
        float _1784 = _1707 * 0.5;
        float _1785 = _1717 * 0.5;
        float _1786 = _1727 * 0.5;
        float _1787 = dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786));
        float _1792 = (_1787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1787);
        float _1800 = (dot(vec3(_1030, _1031, _1032), vec3(_1792 * _1784, _1792 * _1785, _1792 * _1786)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786)) / (_1740 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1811 = _1810 * 2.0;
        float _1815 = (1.0 - _1810) / (_1810 + 1.0);
        float _4583 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1825 = ((((1.0 - _1816) * (_1811 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1811 + 1.0))) + _1816) * _1740;
        float _1826 = _1708 * 0.5;
        float _1827 = _1718 * 0.5;
        float _1828 = _1728 * 0.5;
        float _1829 = dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828));
        float _1834 = (_1829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1829);
        float _1842 = (dot(vec3(_1030, _1031, _1032), vec3(_1834 * _1826, _1834 * _1827, _1834 * _1828)) + 1.0) * 0.5;
        float _4594 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1851 = sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828)) / (_1741 + 9.9999997473787516355514526367188e-06);
        float _4605 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1853 = _1852 * 2.0;
        float _1857 = (1.0 - _1852) / (_1852 + 1.0);
        float _4616 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1867 = ((((1.0 - _1858) * (_1853 + 2.0)) * exp2(log2(isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_1853 + 1.0))) + _1858) * _1741;
        _1875 = _1708;
        _1876 = _1707;
        _1877 = _1706;
        _1878 = _1718;
        _1879 = _1717;
        _1880 = _1716;
        _1881 = _1728;
        _1882 = _1727;
        _1883 = _1726;
        _1884 = _1741;
        _1885 = _1740;
        _1886 = _1739;
        _1887 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
        _1888 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)));
        _1889 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)));
    }
    else
    {
        _1875 = _1569;
        _1876 = _1569;
        _1877 = _1569;
        _1878 = _1569;
        _1879 = _1569;
        _1880 = _1569;
        _1881 = _1569;
        _1882 = _1569;
        _1883 = _1569;
        _1884 = _1569;
        _1885 = _1569;
        _1886 = _1569;
        _1887 = 0.0;
        _1888 = 0.0;
        _1889 = 0.0;
    }
    float _1899 = (cbModelParam._m0[1u].x * (_1887 - _1581)) + _1581;
    float _1900 = (cbModelParam._m0[1u].x * (_1888 - _1582)) + _1582;
    float _1901 = (cbModelParam._m0[1u].x * (_1889 - _1583)) + _1583;
    float _1922 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1899));
    float _1943 = _1203 * 0.5;
    float _1944 = _1204 * 0.5;
    float _1945 = _1205 * 0.5;
    float _1946 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1877, _1880, _1883, _1886));
    float _1949 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1876, _1879, _1882, _1885));
    float _1952 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1875, _1878, _1881, _1884));
    float _1986;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1959 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1568, _1572, _1575, _1578));
        float _1963 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1570, _1573, _1576, _1579));
        float _1967 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1571, _1574, _1577, _1580));
        float _1974 = dot(vec4(cbModelParam._m0[39u]), vec4(_1943, _1944, _1945, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1974) ? 0.0 : (isnan(0.0) ? _1974 : max(0.0, _1974))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1997;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1988 = dot(vec4(cbModelParam._m0[40u]), vec4(_1943, _1944, _1945, 1.0));
        _1997 = dot(vec3(isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1988) ? 0.0 : (isnan(0.0) ? _1988 : max(0.0, _1988))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1997 = 1.0;
    }
    float _2001 = (_1997 * cbModelParam._m0[1u].x) + (_1986 * (1.0 - cbModelParam._m0[1u].x));
    float _2011 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1033);
    float _2012 = isnan(_2011) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2011 : min(cbModelParam._m0[25u].z, _2011));
    float _2092;
    float _2094;
    float _2096;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2059 = fma(_1267, cbModelParam._m0[13u].z, fma(_1263, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1259)) + cbModelParam._m0[13u].w;
        float _2063 = fma(_1267, cbModelParam._m0[14u].z, fma(_1263, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1259)) + cbModelParam._m0[14u].w;
        float _2067 = fma(_1267, cbModelParam._m0[15u].z, fma(_1263, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1259)) + cbModelParam._m0[15u].w;
        float _2070 = fma(_1205, cbModelParam._m0[13u].z, fma(_1204, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1203));
        float _2073 = fma(_1205, cbModelParam._m0[14u].z, fma(_1204, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1203));
        float _2076 = fma(_1205, cbModelParam._m0[15u].z, fma(_1204, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1203));
        float _2104;
        if (_2070 > 0.0)
        {
            _2104 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2104 = frontier_phi_14_12_ladder;
        }
        float _2275;
        if (_2073 > 0.0)
        {
            _2275 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2275 = frontier_phi_23_19_ladder;
        }
        float _2570;
        if (_2076 > 0.0)
        {
            _2570 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2570 = frontier_phi_35_30_ladder;
        }
        float _2572 = isnan(_2275) ? _2104 : (isnan(_2104) ? _2275 : min(_2104, _2275));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _2070) + _2059;
        float _2578 = (_2573 * _2073) + _2063;
        float _2579 = (_2573 * _2076) + _2067;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2582 = (-1.0) - _2580;
        float _2584 = _2580 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2579 > _2584) || ((_2579 < _2582) || ((_2578 > _2584) || ((_2578 < _2582) || ((_2577 < _2582) || (_2577 > _2584))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2579, cbModelParam._m0[9u].z, fma(_2578, cbModelParam._m0[9u].y, _2577 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2579, cbModelParam._m0[10u].z, fma(_2578, cbModelParam._m0[10u].y, _2577 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2579, cbModelParam._m0[11u].z, fma(_2578, cbModelParam._m0[11u].y, _2577 * cbModelParam._m0[11u].x))), _2012);
            frontier_phi_13_35_ladder = _2724.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2724.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2724.x * cbModelParam._m0[1u].y;
        }
        _2092 = frontier_phi_13_35_ladder_2;
        _2094 = frontier_phi_13_35_ladder_1;
        _2096 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2080 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1203, _1204, _1205), _2012);
        _2092 = _2080.x * cbModelParam._m0[1u].y;
        _2094 = _2080.y * cbModelParam._m0[1u].y;
        _2096 = _2080.z * cbModelParam._m0[1u].y;
    }
    float _2100 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1033);
    float _2101 = isnan(_2100) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2100 : min(cbModelParam._m0[25u].w, _2100));
    float _2190;
    float _2192;
    float _2194;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2154 = fma(_1267, cbModelParam._m0[21u].z, fma(_1263, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1259)) + cbModelParam._m0[21u].w;
        float _2158 = fma(_1267, cbModelParam._m0[22u].z, fma(_1263, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1259)) + cbModelParam._m0[22u].w;
        float _2162 = fma(_1267, cbModelParam._m0[23u].z, fma(_1263, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1259)) + cbModelParam._m0[23u].w;
        float _2165 = fma(_1205, cbModelParam._m0[21u].z, fma(_1204, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1203));
        float _2168 = fma(_1205, cbModelParam._m0[22u].z, fma(_1204, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1203));
        float _2171 = fma(_1205, cbModelParam._m0[23u].z, fma(_1204, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1203));
        float _2280;
        if (_2165 > 0.0)
        {
            _2280 = abs((1.0 - _2154) / _2165);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2154 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2280 = frontier_phi_25_21_ladder;
        }
        float _2597;
        if (_2168 > 0.0)
        {
            _2597 = abs((1.0 - _2158) / _2168);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2168 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2158 + 1.0) / _2168);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2597 = frontier_phi_37_32_ladder;
        }
        float _2935;
        if (_2171 > 0.0)
        {
            _2935 = abs((1.0 - _2162) / _2171);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2171 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2162 + 1.0) / _2171);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2935 = frontier_phi_47_44_ladder;
        }
        float _2937 = isnan(_2597) ? _2280 : (isnan(_2280) ? _2597 : min(_2280, _2597));
        float _2938 = isnan(_2935) ? _2937 : (isnan(_2937) ? _2935 : min(_2937, _2935));
        float _2942 = (_2938 * _2165) + _2154;
        float _2943 = (_2938 * _2168) + _2158;
        float _2944 = (_2938 * _2171) + _2162;
        float _2945 = _2938 * 9.9999997473787516355514526367188e-05;
        float _2946 = (-1.0) - _2945;
        float _2948 = _2945 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2944 > _2948) || ((_2944 < _2946) || ((_2943 > _2948) || ((_2943 < _2946) || ((_2942 < _2946) || (_2942 > _2948))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3066 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2944, cbModelParam._m0[17u].z, fma(_2943, cbModelParam._m0[17u].y, _2942 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2944, cbModelParam._m0[18u].z, fma(_2943, cbModelParam._m0[18u].y, _2942 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2944, cbModelParam._m0[19u].z, fma(_2943, cbModelParam._m0[19u].y, _2942 * cbModelParam._m0[19u].x))), _2101);
            frontier_phi_22_47_ladder = _3066.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3066.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3066.x * cbModelParam._m0[1u].z;
        }
        _2190 = frontier_phi_22_47_ladder_2;
        _2192 = frontier_phi_22_47_ladder_1;
        _2194 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1203, _1204, _1205), _2101);
        _2190 = _2174.x * cbModelParam._m0[1u].z;
        _2192 = _2174.y * cbModelParam._m0[1u].z;
        _2194 = _2174.z * cbModelParam._m0[1u].z;
    }
    float _2207 = (((_1230 * _1179) + _1231) * _1195) * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2209 = (((_1230 * _1181) + _1231) * _1195) * ((cbModelParam._m0[1u].w * (_2192 - _2094)) + _2094);
    float _2211 = (((_1230 * _1182) + _1231) * _1195) * ((cbModelParam._m0[1u].w * (_2194 - _2096)) + _2096);
    float _2214 = fma(_2211, cbSceneParam._m0[89u].z, fma(_2209, cbSceneParam._m0[89u].y, _2207 * cbSceneParam._m0[89u].x));
    float _2217 = fma(_2211, cbSceneParam._m0[90u].z, fma(_2209, cbSceneParam._m0[90u].y, _2207 * cbSceneParam._m0[90u].x));
    float _2220 = fma(_2211, cbSceneParam._m0[91u].z, fma(_2209, cbSceneParam._m0[91u].y, _2207 * cbSceneParam._m0[91u].x));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2262 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2266 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2267 = _2254 / _2266;
    float _2268 = _2258 / _2266;
    float _2269 = _2262 / _2266;
    float _2416;
    float _2417;
    float _2418;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2296 = ((uint(_2269 > cbSceneParam._m0[59u].y) + uint(_2269 > cbSceneParam._m0[59u].x)) + uint(_2269 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2297 = _2296 + 43u;
        uint _2305 = _2296 + 44u;
        uint _2313 = _2296 + 45u;
        uint _2321 = _2296 + 46u;
        float _2332 = fma(_2266, cbSceneParam._m0[_2297].w, fma(_2262, cbSceneParam._m0[_2297].z, fma(_2258, cbSceneParam._m0[_2297].y, _2254 * cbSceneParam._m0[_2297].x)));
        float _2336 = fma(_2266, cbSceneParam._m0[_2305].w, fma(_2262, cbSceneParam._m0[_2305].z, fma(_2258, cbSceneParam._m0[_2305].y, _2254 * cbSceneParam._m0[_2305].x)));
        float _2344 = fma(_2266, cbSceneParam._m0[_2321].w, fma(_2262, cbSceneParam._m0[_2321].z, fma(_2258, cbSceneParam._m0[_2321].y, _2254 * cbSceneParam._m0[_2321].x)));
        float _2349 = cbSceneParam._m0[33u].z * _2344;
        float _2351 = cbSceneParam._m0[33u].w * _2344;
        float _2354 = fma(_2266, cbSceneParam._m0[_2313].w, fma(_2262, cbSceneParam._m0[_2313].z, fma(_2258, cbSceneParam._m0[_2313].y, _2254 * cbSceneParam._m0[_2313].x))) / _2344;
        float _2402 = (cbSceneParam._m0[33u].x - sqrt(((_2268 * _2268) + (_2267 * _2267)) + (_2269 * _2269))) * cbSceneParam._m0[33u].y;
        float _4742 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2409 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2349 + _2332) / _2344, (_2351 + _2336) / _2344), _2354), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2351 + _2332) / _2344, (_2336 - _2349) / _2344), _2354), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2332 - _2349) / _2344, (_2336 - _2351) / _2344), _2354), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2332 - _2351) / _2344, (_2349 + _2336) / _2344), _2354), 0.0)).x), vec4(0.25)));
        _2416 = 1.0 - (_2409 * cbSceneParam._m0[34u].x);
        _2417 = 1.0 - (_2409 * cbSceneParam._m0[34u].y);
        _2418 = 1.0 - (_2409 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2416 = 1.0;
        _2417 = 1.0;
        _2418 = 1.0;
    }
    float _2482;
    float _2484;
    float _2486;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2470 = fma(_2266, cbSceneParam._m0[63u].w, fma(_2262, cbSceneParam._m0[63u].z, fma(_2258, cbSceneParam._m0[63u].y, _2254 * cbSceneParam._m0[63u].x)));
        float _2471 = fma(_2266, cbSceneParam._m0[60u].w, fma(_2262, cbSceneParam._m0[60u].z, fma(_2258, cbSceneParam._m0[60u].y, _2254 * cbSceneParam._m0[60u].x))) / _2470;
        float _2472 = fma(_2266, cbSceneParam._m0[61u].w, fma(_2262, cbSceneParam._m0[61u].z, fma(_2258, cbSceneParam._m0[61u].y, _2254 * cbSceneParam._m0[61u].x))) / _2470;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2471 >= cbSceneParam._m0[64u].x) && (_2472 >= cbSceneParam._m0[64u].y)) && (_2471 <= cbSceneParam._m0[64u].z)) && (_2472 <= cbSceneParam._m0[64u].w))
        {
            float _2610 = fma(_2266, cbSceneParam._m0[62u].w, fma(_2262, cbSceneParam._m0[62u].z, fma(_2258, cbSceneParam._m0[62u].y, _2254 * cbSceneParam._m0[62u].x))) / _2470;
            float _2614 = isnan(cbSceneParam._m0[41u].w) ? _2610 : (isnan(_2610) ? cbSceneParam._m0[41u].w : max(_2610, cbSceneParam._m0[41u].w));
            float _2657 = (cbSceneParam._m0[33u].x - sqrt(((_2268 * _2268) + (_2267 * _2267)) + (_2269 * _2269))) * cbSceneParam._m0[33u].y;
            float _4758 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
            float _2664 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2471, cbSceneParam._m0[33u].w + _2472), _2614), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2471, _2472 - cbSceneParam._m0[33u].z), _2614), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2471 - cbSceneParam._m0[33u].z, _2472 - cbSceneParam._m0[33u].w), _2614), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2471 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2472), _2614), 0.0)).x), vec4(0.25)));
            float _2668 = 1.0 - (_2664 * cbSceneParam._m0[34u].x);
            float _2669 = 1.0 - (_2664 * cbSceneParam._m0[34u].y);
            float _2670 = 1.0 - (_2664 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2670) ? _2418 : (isnan(_2418) ? _2670 : min(_2418, _2670));
            frontier_phi_34_33_ladder_1 = isnan(_2669) ? _2417 : (isnan(_2417) ? _2669 : min(_2417, _2669));
            frontier_phi_34_33_ladder_2 = isnan(_2668) ? _2416 : (isnan(_2416) ? _2668 : min(_2416, _2668));
        }
        else
        {
            frontier_phi_34_33_ladder = _2418;
            frontier_phi_34_33_ladder_1 = _2417;
            frontier_phi_34_33_ladder_2 = _2416;
        }
        _2482 = frontier_phi_34_33_ladder_2;
        _2484 = frontier_phi_34_33_ladder_1;
        _2486 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2482 = _2416;
        _2484 = _2417;
        _2486 = _2418;
    }
    uvec4 _2491 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2493 = _2491.x * 14u;
    uint _2494 = _2493 + 13u;
    float _2501 = _1195 + (-1.0);
    float _2506 = (cbLight._m0[_2494].x * _2501) + 1.0;
    float _2507 = (cbLight._m0[_2494].y * _2501) + 1.0;
    float _2508 = (cbLight._m0[_2494].z * _2501) + 1.0;
    float _2509 = (cbLight._m0[_2494].w * _2501) + 1.0;
    uint _2510 = _2493 + 5u;
    float _2516 = isnan(1.0) ? _2507 : (isnan(_2507) ? 1.0 : min(_2507, 1.0));
    uint _2520 = _2493 + 4u;
    float _2529 = isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0));
    uint _2533 = _2493 | 1u;
    float _2544 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_1030, _1031, _1032));
    float _2547 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_1030, _1031, _1032));
    float _4794 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _4805 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2552 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * 0.3183098733425140380859375;
    float _2554 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * 0.3183098733425140380859375;
    float _2561 = ((cbLight._m0[_2510].x * _2516) * _2554) + (((cbLight._m0[_2520].x * _2482) * _2529) * _2552);
    float _2562 = ((_2516 * cbLight._m0[_2510].y) * _2554) + (((cbLight._m0[_2520].y * _2484) * _2529) * _2552);
    float _2563 = ((_2516 * cbLight._m0[_2510].z) * _2554) + (((cbLight._m0[_2520].z * _2486) * _2529) * _2552);
    uvec4 _2567 = floatBitsToUint(cbLight._m0[_2493 + 12u]);
    bool _2569 = _2567.x == 0u;
    float _2671;
    float _2673;
    float _2675;
    if (_2569)
    {
        _2671 = _2561;
        _2673 = _2562;
        _2675 = _2563;
    }
    else
    {
        uint _2679 = _2493 + 6u;
        float _2695 = (dot(vec3(cbLight._m0[_2493 + 2u].xyz), vec3(_1030, _1031, _1032)) * 0.5) + 0.5;
        float _2696 = _2695 * _2695;
        float _4816 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2697 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2698 = isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0));
        _2671 = (((cbLight._m0[_2679].x * 0.3183098733425140380859375) * _2697) * _2698) + _2561;
        _2673 = (((cbLight._m0[_2679].y * 0.3183098733425140380859375) * _2697) * _2698) + _2562;
        _2675 = (((cbLight._m0[_2679].z * 0.3183098733425140380859375) * _2697) * _2698) + _2563;
    }
    bool _2678 = _2567.y == 0u;
    float _2733;
    float _2735;
    float _2737;
    if (_2678)
    {
        _2733 = _2671;
        _2735 = _2673;
        _2737 = _2675;
    }
    else
    {
        uint _2906 = _2493 + 7u;
        float _2922 = (dot(vec3(cbLight._m0[_2493 + 3u].xyz), vec3(_1030, _1031, _1032)) * 0.5) + 0.5;
        float _2923 = _2922 * _2922;
        float _4832 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2924 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2925 = isnan(1.0) ? _2509 : (isnan(_2509) ? 1.0 : min(_2509, 1.0));
        _2733 = (((cbLight._m0[_2906].x * 0.3183098733425140380859375) * _2924) * _2925) + _2671;
        _2735 = (((cbLight._m0[_2906].y * 0.3183098733425140380859375) * _2924) * _2925) + _2673;
        _2737 = (((cbLight._m0[_2906].z * 0.3183098733425140380859375) * _2924) * _2925) + _2675;
    }
    uint _2740 = _2493 + 8u;
    float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _1033) * 0.949999988079071044921875);
    float _2754 = _2753 * _2753;
    float _2755 = cbLight._m0[_2493].x + _1109;
    float _2756 = cbLight._m0[_2493].y + _1110;
    float _2757 = cbLight._m0[_2493].z + _1111;
    float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
    float _2762 = _2761 * _2755;
    float _2763 = _2761 * _2756;
    float _2764 = _2761 * _2757;
    float _2765 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2493].xyz));
    float _4848 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2768 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
    float _4859 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _2769 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _2770 = dot(vec3(_1030, _1031, _1032), vec3(_2762, _2763, _2764));
    float _4870 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2773 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2774 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2762, _2763, _2764));
    float _4881 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2778 = _2754 * _2754;
    float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
    float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) * 5.0);
    float _2791 = 0.959999978542327880859375 - _1176;
    float _2793 = 0.959999978542327880859375 - _1177;
    float _2794 = 0.959999978542327880859375 - _1178;
    float _2801 = 1.0 - _2754;
    float _2812 = (0.5 / (((_2769 * ((_2768 * _2801) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2769 * _2801) + _2754) * _2768))) * _2768;
    float _4892 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2814 = (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
    uint _2828 = _2493 + 9u;
    float _2839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _1033) * 0.949999988079071044921875);
    float _2840 = _2839 * _2839;
    float _2841 = cbLight._m0[_2533].x + _1109;
    float _2842 = cbLight._m0[_2533].y + _1110;
    float _2843 = cbLight._m0[_2533].z + _1111;
    float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
    float _2848 = _2847 * _2841;
    float _2849 = _2847 * _2842;
    float _2850 = _2847 * _2843;
    float _2851 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2533].xyz));
    float _4903 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2854 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _2855 = dot(vec3(_1030, _1031, _1032), vec3(_2848, _2849, _2850));
    float _4914 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2858 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2859 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2848, _2849, _2850));
    float _4925 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
    float _2863 = _2840 * _2840;
    float _2867 = ((_2858 * _2858) * (_2863 + (-1.0))) + 1.0;
    float _2874 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
    float _2881 = 1.0 - _2840;
    float _2891 = (0.5 / (((_2769 * ((_2854 * _2881) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2769 * _2881) + _2840) * _2854))) * _2854;
    float _4936 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
    float _2893 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2863 / ((_2867 * _2867) * 3.141590118408203125));
    float _2903 = (((((_2874 * _2791) + _1179) * cbLight._m0[_2828].x) * _2893) * _2516) + ((((cbLight._m0[_2740].x * _2482) * ((_2790 * _2791) + _1179)) * _2814) * _2529);
    float _2904 = (((((_2874 * _2793) + _1181) * cbLight._m0[_2828].y) * _2893) * _2516) + ((((cbLight._m0[_2740].y * _2484) * ((_2790 * _2793) + _1181)) * _2814) * _2529);
    float _2905 = (((((_2874 * _2794) + _1182) * cbLight._m0[_2828].z) * _2893) * _2516) + ((((cbLight._m0[_2740].z * _2486) * ((_2790 * _2794) + _1182)) * _2814) * _2529);
    float _2961;
    float _2963;
    float _2965;
    if (_2569)
    {
        _2961 = _2903;
        _2963 = _2904;
        _2965 = _2905;
    }
    else
    {
        uint _2967 = _2493 + 2u;
        uint _2971 = _2493 + 10u;
        float _2985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2967].w)) * _1033) * 0.949999988079071044921875);
        float _2986 = _2985 * _2985;
        float _2987 = cbLight._m0[_2967].x + _1109;
        float _2988 = cbLight._m0[_2967].y + _1110;
        float _2989 = cbLight._m0[_2967].z + _1111;
        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
        float _2994 = _2993 * _2987;
        float _2995 = _2993 * _2988;
        float _2996 = _2993 * _2989;
        float _2997 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2967].xyz));
        float _4947 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3000 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
        float _3001 = dot(vec3(_1030, _1031, _1032), vec3(_2994, _2995, _2996));
        float _4958 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3004 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _3005 = dot(vec3(cbLight._m0[_2967].xyz), vec3(_2994, _2995, _2996));
        float _4969 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3009 = _2986 * _2986;
        float _3013 = ((_3004 * _3004) * (_3009 + (-1.0))) + 1.0;
        float _3020 = exp2(log2(1.0 - (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) * 5.0);
        float _3027 = 1.0 - _2986;
        float _3037 = (0.5 / (((_2769 * ((_3000 * _3027) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_2769 * _3027) + _2986) * _3000))) * _3000;
        float _4980 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3039 = (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_3009 / ((_3013 * _3013) * 3.141590118408203125));
        float _3040 = isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0));
        _2961 = (((((_3020 * _2791) + _1179) * cbLight._m0[_2971].x) * _3039) * _3040) + _2903;
        _2963 = (((((_3020 * _2793) + _1181) * cbLight._m0[_2971].y) * _3039) * _3040) + _2904;
        _2965 = (((((_3020 * _2794) + _1182) * cbLight._m0[_2971].z) * _3039) * _3040) + _2905;
    }
    float _3071;
    float _3073;
    float _3075;
    if (_2678)
    {
        _3071 = _2961;
        _3073 = _2963;
        _3075 = _2965;
    }
    else
    {
        uint _3082 = _2493 + 3u;
        uint _3086 = _2493 + 11u;
        float _3100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3082].w)) * _1033) * 0.949999988079071044921875);
        float _3101 = _3100 * _3100;
        float _3102 = cbLight._m0[_3082].x + _1109;
        float _3103 = cbLight._m0[_3082].y + _1110;
        float _3104 = cbLight._m0[_3082].z + _1111;
        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
        float _3109 = _3108 * _3102;
        float _3110 = _3108 * _3103;
        float _3111 = _3108 * _3104;
        float _3112 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_3082].xyz));
        float _4996 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3115 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _3116 = dot(vec3(_1030, _1031, _1032), vec3(_3109, _3110, _3111));
        float _5007 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        float _3119 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _3120 = dot(vec3(cbLight._m0[_3082].xyz), vec3(_3109, _3110, _3111));
        float _5018 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
        float _3124 = _3101 * _3101;
        float _3128 = ((_3119 * _3119) * (_3124 + (-1.0))) + 1.0;
        float _3135 = exp2(log2(1.0 - (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) * 5.0);
        float _3142 = 1.0 - _3101;
        float _3152 = (0.5 / (((_2769 * ((_3115 * _3142) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_2769 * _3142) + _3101) * _3115))) * _3115;
        float _5029 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
        float _3154 = (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3124 / ((_3128 * _3128) * 3.141590118408203125));
        float _3155 = isnan(1.0) ? _2509 : (isnan(_2509) ? 1.0 : min(_2509, 1.0));
        _3071 = (((((_3135 * _2791) + _1179) * cbLight._m0[_3086].x) * _3154) * _3155) + _2961;
        _3073 = (((((_3135 * _2793) + _1181) * cbLight._m0[_3086].y) * _3154) * _3155) + _2963;
        _3075 = (((((_3135 * _2794) + _1182) * cbLight._m0[_3086].z) * _3154) * _3155) + _2965;
    }
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    float _3229;
    float _3231;
    if (_2491.y == 0u)
    {
        uvec4 _3176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3177 = _3176.x;
        uint _3188 = uint((float(_3176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1118) / _3177))) + floor(float(uint(cbSceneParam._m0[85u].x * _1117) / _3177)));
        float _3198 = (log2(_2269 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3199 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
        uint _3202 = uint(isnan(14.0) ? _3199 : (isnan(_3199) ? 14.0 : min(_3199, 14.0)));
        uvec4 _3207 = texelFetch(g_lightClusterGridBuffer, int(((_3202 << 2u) + (_3188 << 6u)) >> 2u));
        uint _3208 = _3207.x;
        uint _3209 = _3176.z;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        if (((((1u << ((_3209 >> 4u) & 15u)) + 4294967295u) & _3208) == 0u) || ((_3209 & 240u) == 0u))
        {
            _3288 = 0.0;
            _3290 = 0.0;
            _3292 = 0.0;
            _3294 = 0.0;
            _3296 = 0.0;
            _3298 = 0.0;
        }
        else
        {
            float _3289;
            float _3291;
            float _3293;
            float _3295;
            float _3297;
            float _3299;
            float _3433 = 0.0;
            float _3434 = 0.0;
            float _3435 = 0.0;
            float _3436 = 0.0;
            float _3437 = 0.0;
            float _3438 = 0.0;
            uint _3439 = 0u;
            uint _3448;
            bool _3449;
            for (;;)
            {
                _3448 = texelFetch(g_lightClassification, int((((_3202 << 5u) + (_3188 << 9u)) + (_3439 << 2u)) >> 2u)).x;
                _3449 = _3448 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3449)
                {
                    frontier_phi_66_pred = _3438;
                    frontier_phi_66_pred_1 = _3437;
                    frontier_phi_66_pred_2 = _3436;
                    frontier_phi_66_pred_3 = _3435;
                    frontier_phi_66_pred_4 = _3434;
                    frontier_phi_66_pred_5 = _3433;
                }
                else
                {
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    float _3561;
                    float _3562;
                    uint _3563;
                    _3557 = _3433;
                    _3558 = _3434;
                    _3559 = _3435;
                    _3560 = _3436;
                    _3561 = _3437;
                    _3562 = _3438;
                    _3563 = _3448;
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    float _3494;
                    for (;;)
                    {
                        uint _3567 = uint(findLSB(_3563)) + (_3439 << 5u);
                        uint _3564 = (_3563 + 4294967295u) & _3563;
                        uint _3569 = _3567 * 48u;
                        vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3569)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 3u)).x));
                        uint _3589 = (_3567 * 48u) + 4u;
                        vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3589)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 3u)).x));
                        uint _3608 = (_3567 * 48u) + 8u;
                        vec3 _3619 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3608)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 2u)).x));
                        float _3623 = _3583.x - _2267;
                        float _3624 = _3583.y - _2268;
                        float _3625 = _3583.z - _2269;
                        float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                        float _3629 = inversesqrt(_3626);
                        float _3630 = _3629 * _3623;
                        float _3631 = _3629 * _3624;
                        float _3632 = _3629 * _3625;
                        float _3633 = dot(vec3(_1136, _1139, _1142), vec3(_3630, _3631, _3632));
                        float _3638 = 1.0 - (_3626 * _3583.w);
                        float _5055 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                        float _3639 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3640 = sqrt(_3626) * _3602.w;
                        float _3643 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                        float _3644 = _3643 * _3643;
                        float _3647 = ((1.0 - _3644) * _3633) + _3644;
                        float _3650 = _3640 * _3640;
                        float _3654 = ((isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0))) * _3639) / ((_3650 * 0.699999988079071044921875) + 1.0);
                        float _3658 = (-0.0) - _2267;
                        float _3659 = (-0.0) - _2268;
                        float _3660 = (-0.0) - _2269;
                        float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                        float _3665 = _3664 * _3658;
                        float _3666 = _3664 * _3659;
                        float _3667 = _3664 * _3660;
                        float _3674 = exp2(log2(1.0 / ((_3650 * 3.5) + 5.0)) * 0.25);
                        float _3675 = 1.0 - _1211;
                        float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                        float _3683 = _3682 * _3682;
                        float _3684 = _3683 * _3683;
                        float _3685 = _3665 + _3630;
                        float _3686 = _3666 + _3631;
                        float _3687 = _3667 + _3632;
                        float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                        float _3695 = dot(vec3(_1136, _1139, _1142), vec3(_3665, _3666, _3667));
                        float _5071 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3698 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3699 = dot(vec3(_1136, _1139, _1142), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                        float _5082 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                        float _3702 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                        float _3707 = _3643 * _3683;
                        float _3708 = _3707 * _3707;
                        float _3711 = ((1.0 - _3708) * _3633) + _3708;
                        float _5093 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                        float _3712 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3713 = 1.0 - _3683;
                        float _3723 = (0.5 / (((_3712 * ((_3698 * _3713) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3712 * _3713) + _3683) * _3698))) * _3712;
                        float _5104 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                        float _3734 = (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0)))) / ((_3706 * _3706) * ((_3650 * 2.1991131305694580078125) + 3.141590118408203125))) * _3639;
                        _3492 = (_3654 * _3602.x) + _3560;
                        _3493 = (_3654 * _3602.y) + _3561;
                        _3494 = (_3654 * _3602.z) + _3562;
                        _3489 = (_3734 * _3619.x) + _3557;
                        _3490 = (_3734 * _3619.y) + _3558;
                        _3491 = (_3734 * _3619.z) + _3559;
                        if (_3564 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3557 = _3489;
                            _3558 = _3490;
                            _3559 = _3491;
                            _3560 = _3492;
                            _3561 = _3493;
                            _3562 = _3494;
                            _3563 = _3564;
                        }
                    }
                    frontier_phi_66_pred = _3494;
                    frontier_phi_66_pred_1 = _3493;
                    frontier_phi_66_pred_2 = _3492;
                    frontier_phi_66_pred_3 = _3491;
                    frontier_phi_66_pred_4 = _3490;
                    frontier_phi_66_pred_5 = _3489;
                }
                _3299 = frontier_phi_66_pred;
                _3297 = frontier_phi_66_pred_1;
                _3295 = frontier_phi_66_pred_2;
                _3293 = frontier_phi_66_pred_3;
                _3291 = frontier_phi_66_pred_4;
                _3289 = frontier_phi_66_pred_5;
                uint _3440 = _3439 + 1u;
                if (_3440 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3433 = _3289;
                    _3434 = _3291;
                    _3435 = _3293;
                    _3436 = _3295;
                    _3437 = _3297;
                    _3438 = _3299;
                    _3439 = _3440;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3288 = _3289;
            _3290 = _3291;
            _3292 = _3293;
            _3294 = _3295;
            _3296 = _3297;
            _3298 = _3299;
        }
        uvec4 _3302 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3303 = _3302.z;
        uint _3305 = (_3303 >> 8u) & 15u;
        float _3401;
        float _3403;
        float _3405;
        float _3407;
        float _3409;
        float _3411;
        if (((4294967295u << _3305) & _3208) == 0u)
        {
            _3401 = _3288;
            _3403 = _3290;
            _3405 = _3292;
            _3407 = _3294;
            _3409 = _3296;
            _3411 = _3298;
        }
        else
        {
            float _3426 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
            float _3427 = _3426 * _2267;
            float _3428 = _3426 * _2268;
            float _3429 = _3426 * _2269;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3305 < ((_3303 >> 12u) & 15u))
            {
                float _3402;
                float _3404;
                float _3406;
                float _3408;
                float _3410;
                float _3412;
                float _3540 = _3288;
                float _3541 = _3290;
                float _3542 = _3292;
                float _3543 = _3294;
                float _3544 = _3296;
                float _3545 = _3298;
                uint _3546 = _3305;
                uint _3555;
                bool _3556;
                for (;;)
                {
                    _3555 = texelFetch(g_lightClassification, int((((_3202 << 5u) + (_3188 << 9u)) + (_3546 << 2u)) >> 2u)).x;
                    _3556 = _3555 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3556)
                    {
                        frontier_phi_72_pred = _3545;
                        frontier_phi_72_pred_1 = _3544;
                        frontier_phi_72_pred_2 = _3543;
                        frontier_phi_72_pred_3 = _3542;
                        frontier_phi_72_pred_4 = _3541;
                        frontier_phi_72_pred_5 = _3540;
                    }
                    else
                    {
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _4032;
                        float _4033;
                        float _4034;
                        float _4035;
                        float _4036;
                        float _4037;
                        float _3752 = _3540;
                        float _3753 = _3541;
                        float _3754 = _3542;
                        float _3755 = _3543;
                        float _3756 = _3544;
                        float _3757 = _3545;
                        uint _3758 = _3555;
                        uint _3759;
                        vec4 _3784;
                        float _3785;
                        vec4 _3800;
                        vec3 _3812;
                        vec4 _3827;
                        vec4 _3842;
                        float _3888;
                        bool _3889;
                        for (;;)
                        {
                            uint _3769 = ((_3546 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3758));
                            _3759 = (_3758 + 4294967295u) & _3758;
                            uint _3771 = _3769 * 40u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            _3785 = _3784.w;
                            uint _3787 = (_3769 * 40u) + 4u;
                            _3800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 3u)).x));
                            uint _3802 = (_3769 * 40u) + 8u;
                            _3812 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 2u)).x));
                            uint _3814 = (_3769 * 40u) + 16u;
                            _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            uint _3829 = (_3769 * 40u) + 20u;
                            _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3844 = (_3769 * 40u) + 24u;
                            vec4 _3857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 3u)).x));
                            uint _3863 = (_3769 * 40u) + 28u;
                            vec4 _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            _3888 = fma(_2269, _3876.z, fma(_2268, _3876.y, _3876.x * _2267)) + _3876.w;
                            _3889 = !((fma(_2269, _3857.z, fma(_2268, _3857.y, _3857.x * _2267)) + _3857.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3889)
                            {
                                float _3916 = _3784.x - _2267;
                                float _3917 = _3784.y - _2268;
                                float _3918 = _3784.z - _2269;
                                float _3919 = dot(vec3(_3916, _3917, _3918), vec3(_3916, _3917, _3918));
                                float _3922 = inversesqrt(_3919);
                                float _3923 = _3922 * _3916;
                                float _3924 = _3922 * _3917;
                                float _3925 = _3922 * _3918;
                                float _3929 = 1.0 - (_3919 / (_3785 * _3785));
                                float _5115 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3930 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3934 = sqrt(_3919) * _3800.w;
                                float _3936 = 1.39999997615814208984375 / (_3934 + 1.39999997615814208984375);
                                float _3937 = _3936 * _3936;
                                float _3940 = ((1.0 - _3937) * dot(vec3(_3923, _3924, _3925), vec3(_1136, _1139, _1142))) + _3937;
                                float _3943 = _3934 * _3934;
                                float _3947 = (fma(_2269, _3827.z, fma(_2268, _3827.y, _3827.x * _2267)) + _3827.w) / _3888;
                                float _3948 = (fma(_2269, _3842.z, fma(_2268, _3842.y, _3842.x * _2267)) + _3842.w) / _3888;
                                float _3952 = 1.0 - dot(vec2(_3947, _3948), vec2(_3947, _3948));
                                float _5131 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3953 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3954 = _3953 * (((isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0))) * _3930) / ((_3943 * 0.699999988079071044921875) + 1.0));
                                float _3966 = exp2(log2(1.0 / ((_3943 * 3.5) + 5.0)) * 0.25);
                                float _3967 = 1.0 - _1211;
                                float _3974 = sqrt(1.0 - ((1.0 - (_3967 * _3967)) * (1.0 - (_3966 * _3966))));
                                float _3975 = _3974 * _3974;
                                float _3976 = _3975 * _3975;
                                float _3977 = _3923 - _3427;
                                float _3978 = _3924 - _3428;
                                float _3979 = _3925 - _3429;
                                float _3983 = inversesqrt(dot(vec3(_3977, _3978, _3979), vec3(_3977, _3978, _3979)));
                                float _3987 = dot(vec3(_1136, _1139, _1142), vec3((-0.0) - _3427, (-0.0) - _3428, (-0.0) - _3429));
                                float _5142 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3990 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3991 = dot(vec3(_1136, _1139, _1142), vec3(_3983 * _3977, _3983 * _3978, _3983 * _3979));
                                float _5153 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3994 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3998 = ((_3994 * _3994) * (_3976 + (-1.0))) + 1.0;
                                float _3999 = _3936 * _3975;
                                float _4000 = _3999 * _3999;
                                float _4006 = ((1.0 - _4000) * dot(vec3(_1136, _1139, _1142), vec3(_3923, _3924, _3925))) + _4000;
                                float _5164 = isnan(0.0) ? _4006 : (isnan(_4006) ? 0.0 : max(_4006, 0.0));
                                float _4007 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _4008 = 1.0 - _3975;
                                float _4018 = (0.5 / (((_4007 * ((_3990 * _4008) + _3975)) + 9.9999999392252902907785028219223e-09) + (((_4007 * _4008) + _3975) * _3990))) * _4007;
                                float _5175 = isnan(0.0) ? _4018 : (isnan(_4018) ? 0.0 : max(_4018, 0.0));
                                float _4028 = (_3953 * _3930) * (((_3976 * 3.1415927410125732421875) * (isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0)))) / ((_3998 * _3998) * ((_3943 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3954 * _3800.y;
                                frontier_phi_78_pred_1 = _3954 * _3800.x;
                                frontier_phi_78_pred_2 = _4028 * _3812.z;
                                frontier_phi_78_pred_3 = _4028 * _3812.y;
                                frontier_phi_78_pred_4 = _4028 * _3812.x;
                                frontier_phi_78_pred_5 = _3954 * _3800.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4036 = frontier_phi_78_pred;
                            _4035 = frontier_phi_78_pred_1;
                            _4034 = frontier_phi_78_pred_2;
                            _4033 = frontier_phi_78_pred_3;
                            _4032 = frontier_phi_78_pred_4;
                            _4037 = frontier_phi_78_pred_5;
                            _3742 = _4035 + _3755;
                            _3743 = _4036 + _3756;
                            _3744 = _4037 + _3757;
                            _3739 = _4032 + _3752;
                            _3740 = _4033 + _3753;
                            _3741 = _4034 + _3754;
                            if (_3759 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3752 = _3739;
                                _3753 = _3740;
                                _3754 = _3741;
                                _3755 = _3742;
                                _3756 = _3743;
                                _3757 = _3744;
                                _3758 = _3759;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3744;
                        frontier_phi_72_pred_1 = _3743;
                        frontier_phi_72_pred_2 = _3742;
                        frontier_phi_72_pred_3 = _3741;
                        frontier_phi_72_pred_4 = _3740;
                        frontier_phi_72_pred_5 = _3739;
                    }
                    _3412 = frontier_phi_72_pred;
                    _3410 = frontier_phi_72_pred_1;
                    _3408 = frontier_phi_72_pred_2;
                    _3406 = frontier_phi_72_pred_3;
                    _3404 = frontier_phi_72_pred_4;
                    _3402 = frontier_phi_72_pred_5;
                    uint _3547 = _3546 + 1u;
                    if (_3547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3540 = _3402;
                        _3541 = _3404;
                        _3542 = _3406;
                        _3543 = _3408;
                        _3544 = _3410;
                        _3545 = _3412;
                        _3546 = _3547;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3412;
                frontier_phi_60_61_ladder_1 = _3410;
                frontier_phi_60_61_ladder_2 = _3406;
                frontier_phi_60_61_ladder_3 = _3404;
                frontier_phi_60_61_ladder_4 = _3402;
                frontier_phi_60_61_ladder_5 = _3408;
            }
            else
            {
                frontier_phi_60_61_ladder = _3298;
                frontier_phi_60_61_ladder_1 = _3296;
                frontier_phi_60_61_ladder_2 = _3292;
                frontier_phi_60_61_ladder_3 = _3290;
                frontier_phi_60_61_ladder_4 = _3288;
                frontier_phi_60_61_ladder_5 = _3294;
            }
            _3401 = frontier_phi_60_61_ladder_4;
            _3403 = frontier_phi_60_61_ladder_3;
            _3405 = frontier_phi_60_61_ladder_2;
            _3407 = frontier_phi_60_61_ladder_5;
            _3409 = frontier_phi_60_61_ladder_1;
            _3411 = frontier_phi_60_61_ladder;
        }
        float _3416 = isnan(1.0) ? _1195 : (isnan(_1195) ? 1.0 : min(_1195, 1.0));
        _3221 = (_3416 * _3407) + _2733;
        _3223 = (_3416 * _3409) + _2735;
        _3225 = (_3416 * _3411) + _2737;
        _3227 = ((_3401 * _1179) * _3416) + _3071;
        _3229 = ((_3403 * _1181) * _3416) + _3073;
        _3231 = ((_3405 * _1182) * _3416) + _3075;
    }
    else
    {
        _3221 = _2733;
        _3223 = _2735;
        _3225 = _2737;
        _3227 = _3071;
        _3229 = _3073;
        _3231 = _3075;
    }
    float _5191 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _5202 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _5213 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    uint _3251 = _288 + 6u;
    float _3259 = _1117 / cbSceneParam._m0[86u].x;
    float _3260 = _1118 / cbSceneParam._m0[86u].y;
    vec4 _3274 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3259, _3260, (log2((isnan(cbSceneParam._m0[77u].w) ? _1052 : (isnan(_1052) ? cbSceneParam._m0[77u].w : min(_1052, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3276 = _3274.x;
    float _3277 = _3274.y;
    float _3278 = _3274.z;
    float _3279 = _3274.w;
    float _3351;
    float _3353;
    float _3355;
    float _3357;
    if (_1052 > cbSceneParam._m0[78u].w)
    {
        float _3313 = isnan(_1052) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1052 : min(cbSceneParam._m0[80u].w, _1052));
        float _3314 = _3313 / _1052;
        float _3325 = _3314 * _1102;
        float _3326 = _1103 * _3314;
        float _3327 = (-0.0) - _3326;
        float _3329 = _3314 * _1104;
        float _3331 = (cbSceneParam._m0[77u].w * _3327) / _3313;
        float _3332 = _3331 + cbSceneParam._m0[79u].w;
        float _3333 = cbSceneParam._m0[79u].w - _3326;
        float _3339 = sqrt(((_3325 * _3325) + (_3326 * _3326)) + (_3329 * _3329));
        float _3342 = (1.0 - (cbSceneParam._m0[77u].w / _3313)) * _3339;
        float _3347 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3349 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3502;
        if (abs((_3327 - _3331) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3502 = ((((_3332 > 0.0) ? exp2(_3347 * _3332) : (2.0 - exp2(_3349 * _3332))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3342;
        }
        else
        {
            float _3462 = 1.0 / cbSceneParam._m0[80u].x;
            float _3463 = isnan(_3333) ? _3332 : (isnan(_3332) ? _3333 : max(_3332, _3333));
            float _3464 = isnan(_3333) ? _3332 : (isnan(_3332) ? _3333 : min(_3332, _3333));
            float _3473 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : min(_3463, 0.0));
            float _3474 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : min(_3464, 0.0));
            _3502 = ((abs(_3339 / _3327) * cbSceneParam._m0[80u].y) * ((((_3473 - _3474) * 2.0) - ((exp2(_3347 * (isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0)))) - exp2(_3347 * (isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))))) * _3462)) - ((exp2(_3349 * _3473) - exp2(_3349 * _3474)) * _3462))) + (_3342 * cbSceneParam._m0[80u].z);
        }
        vec4 _3504 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3259, _3260, 1.0), 0.0);
        float _3513 = exp2((_3502 * (-1.44269502162933349609375)) * (1.0 - _3504.w));
        float _3514 = log2(_3513);
        float _3530 = log2(_3279);
        _3351 = (exp2(_3530 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3514 * cbSceneParam._m0[78u].x)) * _3504.x) / cbSceneParam._m0[78u].x)) + _3276;
        _3353 = (exp2(_3530 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3514 * cbSceneParam._m0[78u].y)) * _3504.y) / cbSceneParam._m0[78u].y)) + _3277;
        _3355 = (exp2(_3530 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3514 * cbSceneParam._m0[78u].z)) * _3504.z) / cbSceneParam._m0[78u].z)) + _3278;
        _3357 = _3513 * _3279;
    }
    else
    {
        _3351 = _3276;
        _3353 = _3277;
        _3355 = _3278;
        _3357 = _3279;
    }
    float _3369 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3370 = _3369 == 3.0;
    float _3371 = log2(_3357);
    float _3378 = exp2(_3371 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0))) * (_3221 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1195))) + ((_3227 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _2001)) * cbPerFrame._m0[3u].x));
    float _3379 = exp2(_3371 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3223 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1195))) + ((_3229 + ((isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0))) * _2001)) * cbPerFrame._m0[3u].x));
    float _3380 = exp2(_3371 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3225 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1195))) + ((_3231 + ((isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0))) * _2001)) * cbPerFrame._m0[3u].x));
    float _3389 = (_3369 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3389 * (_3370 ? _3378 : (_3378 + (cbSceneParam._m0[72u].w * _3351)));
    SV_Target.y = _3389 * (_3370 ? _3379 : (_3379 + (cbSceneParam._m0[72u].w * _3353)));
    SV_Target.z = _3389 * (_3370 ? _3380 : (_3380 + (cbSceneParam._m0[72u].w * _3355)));
    SV_Target.w = cbInstanceData._m0[_3251].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3251].w;
}


