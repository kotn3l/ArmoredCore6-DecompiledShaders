#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1704;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4052 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4063 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4074 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = _383.x * cbMtdParam._m0[11u].x;
    float _389 = _383.y * cbMtdParam._m0[11u].y;
    float _390 = _383.z * cbMtdParam._m0[11u].z;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _477 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _494 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _428.x) * 2.0) - ((((_465 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4085 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _502 = (_495 * ((_409.x * cbMtdParam._m0[12u].x) - _388)) + _388;
    float _503 = (_495 * ((_409.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _504 = (_495 * ((_409.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _543 = _541.x;
    float _553 = dot(vec4(_543, _541.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _567 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _428.y) * 2.0) - ((((_543 - _553) * cbMtdParam._m0[23u].w) + _553) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4096 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _575 = (_568 * ((_521.x * cbMtdParam._m0[13u].x) - _502)) + _502;
    float _576 = (_568 * ((_521.y * cbMtdParam._m0[13u].y) - _503)) + _503;
    float _577 = (_568 * ((_521.z * cbMtdParam._m0[13u].z) - _504)) + _504;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _625 = dot(vec4(_615, _613.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _637 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _428.z) * 2.0) - ((((_615 - _625) * cbMtdParam._m0[23u].w) + _625) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4107 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _648 = (_357.x * cbMtdParam._m0[9u].x) * ((_638 * ((_596.x * cbMtdParam._m0[14u].x) - _575)) + _575);
    float _649 = (_357.y * cbMtdParam._m0[9u].y) * ((_638 * ((_596.y * cbMtdParam._m0[14u].y) - _576)) + _576);
    float _650 = (_357.z * cbMtdParam._m0[9u].z) * ((_638 * ((_596.z * cbMtdParam._m0[14u].z) - _577)) + _577);
    float _654 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _648;
    float _657 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _649;
    float _660 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _650;
    float _668 = (((_648 - _654) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) + _654) * 4.55000019073486328125;
    float _670 = (((_649 - _657) * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) + _657) * 4.55000019073486328125;
    float _672 = (((_650 - _660) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) + _660) * 4.55000019073486328125;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _729 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _731 = _729.x;
    float _732 = _729.y;
    float _733 = _729.z;
    float _740 = ((_712.x - _731) * _495) + _731;
    float _741 = ((_712.y - _732) * _495) + _732;
    float _742 = ((_712.z - _733) * _495) + _733;
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _765 = ((_754.x - _740) * _568) + _740;
    float _766 = ((_754.y - _741) * _568) + _741;
    float _767 = ((_754.z - _742) * _568) + _742;
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _792 = ((_779.z - _767) * _638) + _767;
    float _795 = ((((_779.x - _765) * _638) + _765) * 2.0) + (-1.0);
    float _796 = ((((_779.y - _766) * _638) + _766) * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _4118 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _802 = sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))));
    vec4 _816 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _841 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _843 = _841.x;
    float _844 = 1.0 - _843;
    float _852 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _855 = ((isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : min(_852, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _864 = (_855 - ((((((_843 - _844) * cbMtdParam._m0[24u].z) + _844) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _855))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4139 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _865 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _872 = (_865 * (cbMtdParam._m0[17u].x - _668)) + _668;
    float _873 = (_865 * (cbMtdParam._m0[17u].y - _670)) + _670;
    float _874 = (_865 * (cbMtdParam._m0[17u].z - _672)) + _672;
    float _889 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _890 = _889 * TEXCOORD.z;
    float _891 = _889 * TEXCOORD.w;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _890) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _891) + cbTextureTilingScale._m0[19u].w));
    float _905 = _903.x;
    float _906 = 1.0 - _905;
    float _931 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_905 - _906) * cbMtdParam._m0[24u].w) + _906) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4150 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _932 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _940 = ((((cbMtdParam._m0[10u].x - _872) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _932) + _872;
    float _941 = ((((cbMtdParam._m0[10u].y - _873) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _932) + _873;
    float _942 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _874)) * _932) + _874;
    vec4 _968 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _970 = _968.x;
    float _987 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _970) * _495) + _970;
    float _1004 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _987) * _568) + _987;
    float _1021 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1004) * _638) + _1004;
    float _1025 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1021) * cbMtdParam._m0[19u].z) + _1021;
    float _1027 = _1025 - (_1025 * _865);
    float _1029 = _1027 - (_1027 * _932);
    float _1034 = (((_689.z - _792) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _792;
    float _1040 = ((_816.z - _1034) * cbMtdParam._m0[19u].w) + _1034;
    vec4 _1056 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1063 = (_1056.x * 2.0) + (-1.0);
    float _1064 = (_1056.y * 2.0) + (-1.0);
    float _1065 = dot(vec2(_1063, _1064), vec2(_1063, _1064));
    float _4161 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1073 = (_865 * (_1056.z - _1040)) + _1040;
    float _1076 = ((cbMtdParam._m0[23u].x - _1073) * _932) + _1073;
    vec4 _1099 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _890) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _891) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1105 = (_1099.x * 2.0) + (-1.0);
    float _1106 = (_1099.y * 2.0) + (-1.0);
    float _1107 = dot(vec2(_1105, _1106), vec2(_1105, _1106));
    float _4172 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1121 = (_795 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_689.x * 2.0) + (-1.0)))) + (((_816.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1122 = (_796 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_689.y * 2.0) + (-1.0)))) + (((_816.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1134 = (((_1063 - _1121) + (cbMtdParam._m0[21u].x * _1121)) * _865) + _1121;
    float _1135 = (((_1064 - _1122) + (cbMtdParam._m0[21u].x * _1122)) * _865) + _1122;
    float _1136 = (_865 * (sqrt(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) - _802)) + _802;
    float _1147 = (((_1105 - _1134) + (_1134 * cbMtdParam._m0[22u].z)) * _932) + _1134;
    float _1148 = (((_1106 - _1135) + (_1135 * cbMtdParam._m0[22u].z)) * _932) + _1135;
    float _1149 = ((sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) - _1136) * _932) + _1136;
    float _1151 = cbMtdParam._m0[22u].x + _816.w;
    float _1154 = fma(_1149, _269 * NORMAL.x, fma(_1148, _276 * TANGENT.x, (_262 * _254) * _1147));
    float _1157 = fma(_1149, _269 * NORMAL.y, fma(_1148, _276 * TANGENT.y, (_262 * _255) * _1147));
    float _1160 = fma(_1149, _269 * NORMAL.z, fma(_1148, _276 * TANGENT.z, (_262 * _256) * _1147));
    float _1164 = inversesqrt(dot(vec3(_1154, _1157, _1160), vec3(_1154, _1157, _1160)));
    float _1165 = _1164 * _1154;
    float _1166 = _1164 * _1157;
    float _1167 = _1164 * _1160;
    float _4183 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1168 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _4205 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4216 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4227 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4238 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1173 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _1187 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1237 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1227);
    float _1238 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1227);
    float _1239 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1227);
    float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
    float _1244 = _1237 * _1243;
    float _1245 = _1238 * _1243;
    float _1246 = _1239 * _1243;
    float _1252 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1253 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1271 = fma(_1167, cbSceneParam._m0[5u].z, fma(_1166, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1165));
    float _1274 = fma(_1167, cbSceneParam._m0[6u].z, fma(_1166, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1165));
    float _1277 = fma(_1167, cbSceneParam._m0[7u].z, fma(_1166, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1165));
    uint _1291 = (_301 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1297 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1291].x;
    float _1298 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1291].y;
    float _1299 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1291].z;
    float _4249 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
    float _1300 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1301 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _1302 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _1303 = 1.0 - _1173;
    float _1304 = _1300 * _1303;
    float _1305 = _1301 * _1303;
    float _1306 = _1302 * _1303;
    float _1311 = (_1300 + (-0.039999999105930328369140625)) * _1173;
    float _1312 = (_1301 + (-0.039999999105930328369140625)) * _1173;
    float _1313 = (_1302 + (-0.039999999105930328369140625)) * _1173;
    float _1314 = _1311 + 0.039999999105930328369140625;
    float _1316 = _1312 + 0.039999999105930328369140625;
    float _1317 = _1313 + 0.039999999105930328369140625;
    vec4 _1326 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1252, cbSceneParam._m0[86u].y * _1253));
    float _1330 = ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * TEXCOORD_5.w) * _1326.x;
    float _1331 = dot(vec3(_1165, _1166, _1167), vec3(_1244, _1245, _1246));
    float _1334 = _1331 * 2.0;
    float _1338 = (_1334 * _1165) - _1244;
    float _1339 = (_1334 * _1166) - _1245;
    float _1340 = (_1334 * _1167) - _1246;
    float _1344 = abs(dot(vec3(_1244, _1245, _1246), vec3(_1165, _1166, _1167)));
    float _4282 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _1346 = sqrt(_1168);
    float _1359 = exp2((_1346 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1346 * 3.0));
    float _1365 = (1.0 - _1359) * ((_1346 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1366 = _1359 * _1346;
    float _1394 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1398 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1402 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1703;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1428 = fma(_1402, cbModelParam._m0[26u].z, fma(_1398, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1394));
        float _1432 = fma(_1402, cbModelParam._m0[27u].z, fma(_1398, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1394));
        float _1436 = fma(_1402, cbModelParam._m0[28u].z, fma(_1398, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1394));
        float _1461 = _1394 + _1165;
        float _1462 = _1398 + _1166;
        float _1463 = _1402 + _1167;
        float _1473 = fma(_1463, cbModelParam._m0[26u].z, fma(_1462, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1461)) - _1428;
        float _1474 = fma(_1463, cbModelParam._m0[27u].z, fma(_1462, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1461)) - _1432;
        float _1475 = fma(_1463, cbModelParam._m0[28u].z, fma(_1462, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1461)) - _1436;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1428 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1432 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[34u].z) + ((((((_1436 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1531 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1497.x + (-0.5));
        float _1533 = _1531 * (_1497.y + (-0.5));
        float _1534 = _1531 * (_1497.z + (-0.5));
        float _1541 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1504.x + (-0.5));
        float _1543 = _1541 * (_1504.y + (-0.5));
        float _1544 = _1541 * (_1504.z + (-0.5));
        float _1551 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1511.x + (-0.5));
        float _1553 = _1551 * (_1511.y + (-0.5));
        float _1554 = _1551 * (_1511.z + (-0.5));
        float _1561 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1518.x + (-0.5));
        float _1563 = _1561 * (_1518.y + (-0.5));
        float _1564 = _1561 * (_1518.z + (-0.5));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = _1532 * 0.5;
        float _1569 = _1542 * 0.5;
        float _1570 = _1552 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1585 = (dot(vec3(_1165, _1166, _1167), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1595 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4330 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1597 + 1.0))) + _1602) * _1565;
        float _1612 = _1533 * 0.5;
        float _1613 = _1543 * 0.5;
        float _1614 = _1553 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_1165, _1166, _1167), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4363 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1639 + 1.0))) + _1644) * _1566;
        float _1654 = _1534 * 0.5;
        float _1655 = _1544 * 0.5;
        float _1656 = _1554 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_1165, _1166, _1167), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4396 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1681 + 1.0))) + _1686) * _1567;
        _1703 = _1534;
        _1705 = _1533;
        _1706 = _1532;
        _1707 = _1544;
        _1708 = _1543;
        _1709 = _1542;
        _1710 = _1554;
        _1711 = _1553;
        _1712 = _1552;
        _1713 = _1567;
        _1714 = _1566;
        _1715 = _1565;
        _1716 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1717 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1704;
        _1705 = _1704;
        _1706 = _1704;
        _1707 = _1704;
        _1708 = _1704;
        _1709 = _1704;
        _1710 = _1704;
        _1711 = _1704;
        _1712 = _1704;
        _1713 = _1704;
        _1714 = _1704;
        _1715 = _1704;
        _1716 = 0.0;
        _1717 = 0.0;
        _1718 = 0.0;
    }
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1741 = fma(_1402, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1394));
        float _1745 = fma(_1402, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1394));
        float _1749 = fma(_1402, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1394));
        float _1772 = _1394 + _1165;
        float _1773 = _1398 + _1166;
        float _1774 = _1402 + _1167;
        float _1784 = fma(_1774, cbModelParam._m0[30u].z, fma(_1773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1772)) - _1741;
        float _1785 = fma(_1774, cbModelParam._m0[31u].z, fma(_1773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1772)) - _1745;
        float _1786 = fma(_1774, cbModelParam._m0[32u].z, fma(_1773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1772)) - _1749;
        float _1790 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
        float _1803 = ((_1790 * _1784) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1741 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1804 = ((_1790 * _1785) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1745 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1805 = ((_1790 * _1786) / cbModelParam._m0[35u].z) + ((((((_1749 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1807 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        vec4 _1814 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        vec4 _1821 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        vec4 _1828 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        float _1840 = exp2((_1807.w + (-0.5)) * 20.0) * 2.0;
        float _1841 = _1840 * (_1807.x + (-0.5));
        float _1842 = _1840 * (_1807.y + (-0.5));
        float _1843 = _1840 * (_1807.z + (-0.5));
        float _1850 = exp2((_1814.w + (-0.5)) * 20.0) * 2.0;
        float _1851 = _1850 * (_1814.x + (-0.5));
        float _1852 = _1850 * (_1814.y + (-0.5));
        float _1853 = _1850 * (_1814.z + (-0.5));
        float _1860 = exp2((_1821.w + (-0.5)) * 20.0) * 2.0;
        float _1861 = _1860 * (_1821.x + (-0.5));
        float _1862 = _1860 * (_1821.y + (-0.5));
        float _1863 = _1860 * (_1821.z + (-0.5));
        float _1870 = exp2((_1828.w + (-0.5)) * 20.0) * 2.0;
        float _1871 = _1870 * (_1828.x + (-0.5));
        float _1872 = _1870 * (_1828.y + (-0.5));
        float _1873 = _1870 * (_1828.z + (-0.5));
        float _1874 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1875 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1876 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1877 = _1841 * 0.5;
        float _1878 = _1851 * 0.5;
        float _1879 = _1861 * 0.5;
        float _1880 = dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879));
        float _1885 = (_1880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1880);
        float _1893 = (dot(vec3(_1165, _1166, _1167), vec3(_1885 * _1877, _1885 * _1878, _1885 * _1879)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1902 = sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879)) / (_1874 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1904 = _1903 * 2.0;
        float _1908 = (1.0 - _1903) / (_1903 + 1.0);
        float _4459 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1918 = ((((1.0 - _1909) * (_1904 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1904 + 1.0))) + _1909) * _1874;
        float _1919 = _1842 * 0.5;
        float _1920 = _1852 * 0.5;
        float _1921 = _1862 * 0.5;
        float _1922 = dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921));
        float _1927 = (_1922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1922);
        float _1935 = (dot(vec3(_1165, _1166, _1167), vec3(_1927 * _1919, _1927 * _1920, _1927 * _1921)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1944 = sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921)) / (_1875 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1946 = _1945 * 2.0;
        float _1950 = (1.0 - _1945) / (_1945 + 1.0);
        float _4492 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1960 = ((((1.0 - _1951) * (_1946 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1946 + 1.0))) + _1951) * _1875;
        float _1961 = _1843 * 0.5;
        float _1962 = _1853 * 0.5;
        float _1963 = _1863 * 0.5;
        float _1964 = dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963));
        float _1969 = (_1964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1964);
        float _1977 = (dot(vec3(_1165, _1166, _1167), vec3(_1969 * _1961, _1969 * _1962, _1969 * _1963)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1986 = sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963)) / (_1876 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1988 = _1987 * 2.0;
        float _1992 = (1.0 - _1987) / (_1987 + 1.0);
        float _4525 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2002 = ((((1.0 - _1993) * (_1988 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1988 + 1.0))) + _1993) * _1876;
        _2010 = _1843;
        _2011 = _1842;
        _2012 = _1841;
        _2013 = _1853;
        _2014 = _1852;
        _2015 = _1851;
        _2016 = _1863;
        _2017 = _1862;
        _2018 = _1861;
        _2019 = _1876;
        _2020 = _1875;
        _2021 = _1874;
        _2022 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)));
        _2023 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)));
        _2024 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
    }
    else
    {
        _2010 = _1704;
        _2011 = _1704;
        _2012 = _1704;
        _2013 = _1704;
        _2014 = _1704;
        _2015 = _1704;
        _2016 = _1704;
        _2017 = _1704;
        _2018 = _1704;
        _2019 = _1704;
        _2020 = _1704;
        _2021 = _1704;
        _2022 = 0.0;
        _2023 = 0.0;
        _2024 = 0.0;
    }
    float _2034 = (cbModelParam._m0[1u].x * (_2022 - _1716)) + _1716;
    float _2035 = (cbModelParam._m0[1u].x * (_2023 - _1717)) + _1717;
    float _2036 = (cbModelParam._m0[1u].x * (_2024 - _1718)) + _1718;
    float _2057 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2035, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2035, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2035, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2034));
    float _2078 = _1338 * 0.5;
    float _2079 = _1339 * 0.5;
    float _2080 = _1340 * 0.5;
    float _2081 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_2012, _2015, _2018, _2021));
    float _2084 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_2011, _2014, _2017, _2020));
    float _2087 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_2010, _2013, _2016, _2019));
    float _2121;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2094 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_1703, _1707, _1710, _1713));
        float _2098 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_1705, _1708, _1711, _1714));
        float _2102 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_1706, _1709, _1712, _1715));
        float _2109 = dot(vec4(cbModelParam._m0[39u]), vec4(_2078, _2079, _2080, 1.0));
        _2121 = dot(vec3(isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)), isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)), isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2109) ? 0.0 : (isnan(0.0) ? _2109 : max(0.0, _2109))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2121 = 1.0;
    }
    float _2132;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2123 = dot(vec4(cbModelParam._m0[40u]), vec4(_2078, _2079, _2080, 1.0));
        _2132 = dot(vec3(isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0)), isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0)), isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2123) ? 0.0 : (isnan(0.0) ? _2123 : max(0.0, _2123))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2132 = 1.0;
    }
    float _2136 = (_2132 * cbModelParam._m0[1u].x) + (_2121 * (1.0 - cbModelParam._m0[1u].x));
    float _2146 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1168);
    float _2147 = isnan(_2146) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2146 : min(cbModelParam._m0[25u].z, _2146));
    float _2227;
    float _2229;
    float _2231;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2194 = fma(_1402, cbModelParam._m0[13u].z, fma(_1398, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1394)) + cbModelParam._m0[13u].w;
        float _2198 = fma(_1402, cbModelParam._m0[14u].z, fma(_1398, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1394)) + cbModelParam._m0[14u].w;
        float _2202 = fma(_1402, cbModelParam._m0[15u].z, fma(_1398, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1394)) + cbModelParam._m0[15u].w;
        float _2205 = fma(_1340, cbModelParam._m0[13u].z, fma(_1339, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1338));
        float _2208 = fma(_1340, cbModelParam._m0[14u].z, fma(_1339, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1338));
        float _2211 = fma(_1340, cbModelParam._m0[15u].z, fma(_1339, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1338));
        float _2239;
        if (_2205 > 0.0)
        {
            _2239 = abs((1.0 - _2194) / _2205);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2194 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2239 = frontier_phi_14_12_ladder;
        }
        float _2463;
        if (_2208 > 0.0)
        {
            _2463 = abs((1.0 - _2198) / _2208);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2198 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2463 = frontier_phi_23_19_ladder;
        }
        float _2720;
        if (_2211 > 0.0)
        {
            _2720 = abs((1.0 - _2202) / _2211);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2202 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2720 = frontier_phi_35_30_ladder;
        }
        float _2722 = isnan(_2463) ? _2239 : (isnan(_2239) ? _2463 : min(_2239, _2463));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2205) + _2194;
        float _2728 = (_2723 * _2208) + _2198;
        float _2729 = (_2723 * _2211) + _2202;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2732 = (-1.0) - _2730;
        float _2734 = _2730 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2729 > _2734) || ((_2729 < _2732) || ((_2728 > _2734) || ((_2728 < _2732) || ((_2727 < _2732) || (_2727 > _2734))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2857 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2729, cbModelParam._m0[9u].z, fma(_2728, cbModelParam._m0[9u].y, _2727 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2729, cbModelParam._m0[10u].z, fma(_2728, cbModelParam._m0[10u].y, _2727 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2729, cbModelParam._m0[11u].z, fma(_2728, cbModelParam._m0[11u].y, _2727 * cbModelParam._m0[11u].x))), _2147);
            frontier_phi_13_35_ladder = _2857.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2857.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2857.x * cbModelParam._m0[1u].y;
        }
        _2227 = frontier_phi_13_35_ladder_2;
        _2229 = frontier_phi_13_35_ladder_1;
        _2231 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2215 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1338, _1339, _1340), _2147);
        _2227 = _2215.x * cbModelParam._m0[1u].y;
        _2229 = _2215.y * cbModelParam._m0[1u].y;
        _2231 = _2215.z * cbModelParam._m0[1u].y;
    }
    float _2235 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1168);
    float _2236 = isnan(_2235) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2235 : min(cbModelParam._m0[25u].w, _2235));
    float _2326;
    float _2328;
    float _2330;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2290 = fma(_1402, cbModelParam._m0[21u].z, fma(_1398, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1394)) + cbModelParam._m0[21u].w;
        float _2294 = fma(_1402, cbModelParam._m0[22u].z, fma(_1398, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1394)) + cbModelParam._m0[22u].w;
        float _2298 = fma(_1402, cbModelParam._m0[23u].z, fma(_1398, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1394)) + cbModelParam._m0[23u].w;
        float _2301 = fma(_1340, cbModelParam._m0[21u].z, fma(_1339, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1338));
        float _2304 = fma(_1340, cbModelParam._m0[22u].z, fma(_1339, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1338));
        float _2307 = fma(_1340, cbModelParam._m0[23u].z, fma(_1339, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1338));
        float _2468;
        if (_2301 > 0.0)
        {
            _2468 = abs((1.0 - _2290) / _2301);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2301 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2290 + 1.0) / _2301);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2468 = frontier_phi_25_21_ladder;
        }
        float _2747;
        if (_2304 > 0.0)
        {
            _2747 = abs((1.0 - _2294) / _2304);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2304 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2294 + 1.0) / _2304);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2747 = frontier_phi_37_32_ladder;
        }
        float _2960;
        if (_2307 > 0.0)
        {
            _2960 = abs((1.0 - _2298) / _2307);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2307 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2298 + 1.0) / _2307);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2960 = frontier_phi_46_43_ladder;
        }
        float _2962 = isnan(_2747) ? _2468 : (isnan(_2468) ? _2747 : min(_2468, _2747));
        float _2963 = isnan(_2960) ? _2962 : (isnan(_2962) ? _2960 : min(_2962, _2960));
        float _2967 = (_2963 * _2301) + _2290;
        float _2968 = (_2963 * _2304) + _2294;
        float _2969 = (_2963 * _2307) + _2298;
        float _2970 = _2963 * 9.9999997473787516355514526367188e-05;
        float _2971 = (-1.0) - _2970;
        float _2973 = _2970 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2969 > _2973) || ((_2969 < _2971) || ((_2968 > _2973) || ((_2968 < _2971) || ((_2967 < _2971) || (_2967 > _2973))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2969, cbModelParam._m0[17u].z, fma(_2968, cbModelParam._m0[17u].y, _2967 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2969, cbModelParam._m0[18u].z, fma(_2968, cbModelParam._m0[18u].y, _2967 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2969, cbModelParam._m0[19u].z, fma(_2968, cbModelParam._m0[19u].y, _2967 * cbModelParam._m0[19u].x))), _2236);
            frontier_phi_22_46_ladder = _3168.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3168.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3168.x * cbModelParam._m0[1u].z;
        }
        _2326 = frontier_phi_22_46_ladder_2;
        _2328 = frontier_phi_22_46_ladder_1;
        _2330 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1338, _1339, _1340), _2236);
        _2326 = _2310.x * cbModelParam._m0[1u].z;
        _2328 = _2310.y * cbModelParam._m0[1u].z;
        _2330 = _2310.z * cbModelParam._m0[1u].z;
    }
    float _2343 = (((_1365 * _1314) + _1366) * _1330) * ((cbModelParam._m0[1u].w * (_2326 - _2227)) + _2227);
    float _2345 = (((_1365 * _1316) + _1366) * _1330) * ((cbModelParam._m0[1u].w * (_2328 - _2229)) + _2229);
    float _2347 = (((_1365 * _1317) + _1366) * _1330) * ((cbModelParam._m0[1u].w * (_2330 - _2231)) + _2231);
    float _2350 = fma(_2347, cbSceneParam._m0[89u].z, fma(_2345, cbSceneParam._m0[89u].y, _2343 * cbSceneParam._m0[89u].x));
    float _2353 = fma(_2347, cbSceneParam._m0[90u].z, fma(_2345, cbSceneParam._m0[90u].y, _2343 * cbSceneParam._m0[90u].x));
    float _2356 = fma(_2347, cbSceneParam._m0[91u].z, fma(_2345, cbSceneParam._m0[91u].y, _2343 * cbSceneParam._m0[91u].x));
    vec4 _2364 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1252, _1253));
    float _2366 = _2364.w;
    float _2378 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2366);
    float _2379 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2366);
    float _2380 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2366);
    uvec4 _2384 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2386 = _2384.x * 14u;
    uint _2387 = _2386 + 13u;
    float _2394 = _1330 + (-1.0);
    float _2399 = (cbLight._m0[_2387].x * _2394) + 1.0;
    float _2400 = (cbLight._m0[_2387].y * _2394) + 1.0;
    float _2401 = (cbLight._m0[_2387].z * _2394) + 1.0;
    float _2402 = (cbLight._m0[_2387].w * _2394) + 1.0;
    uint _2403 = _2386 + 5u;
    float _2409 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
    uint _2413 = _2386 + 4u;
    float _2422 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
    uint _2426 = _2386 | 1u;
    float _2437 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_1165, _1166, _1167));
    float _2440 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_1165, _1166, _1167));
    float _4661 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _4672 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2445 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2447 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2454 = ((cbLight._m0[_2403].x * _2409) * _2447) + (((cbLight._m0[_2413].x * _2378) * _2422) * _2445);
    float _2455 = ((_2409 * cbLight._m0[_2403].y) * _2447) + (((cbLight._m0[_2413].y * _2379) * _2422) * _2445);
    float _2456 = ((_2409 * cbLight._m0[_2403].z) * _2447) + (((cbLight._m0[_2413].z * _2380) * _2422) * _2445);
    uvec4 _2460 = floatBitsToUint(cbLight._m0[_2386 + 12u]);
    bool _2462 = _2460.x == 0u;
    float _2473;
    float _2475;
    float _2477;
    if (_2462)
    {
        _2473 = _2454;
        _2475 = _2455;
        _2477 = _2456;
    }
    else
    {
        uint _2481 = _2386 + 6u;
        float _2497 = (dot(vec3(cbLight._m0[_2386 + 2u].xyz), vec3(_1165, _1166, _1167)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4683 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2500 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2473 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2454;
        _2475 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2455;
        _2477 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2456;
    }
    bool _2480 = _2460.y == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2480)
    {
        _2518 = _2473;
        _2520 = _2475;
        _2522 = _2477;
    }
    else
    {
        uint _2691 = _2386 + 7u;
        float _2707 = (dot(vec3(cbLight._m0[_2386 + 3u].xyz), vec3(_1165, _1166, _1167)) * 0.5) + 0.5;
        float _2708 = _2707 * _2707;
        float _4699 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2709 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2710 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2518 = (((cbLight._m0[_2691].x * 0.3183098733425140380859375) * _2709) * _2710) + _2473;
        _2520 = (((cbLight._m0[_2691].y * 0.3183098733425140380859375) * _2709) * _2710) + _2475;
        _2522 = (((cbLight._m0[_2691].z * 0.3183098733425140380859375) * _2709) * _2710) + _2477;
    }
    uint _2525 = _2386 + 8u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _1168) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2386].x + _1244;
    float _2541 = cbLight._m0[_2386].y + _1245;
    float _2542 = cbLight._m0[_2386].z + _1246;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_1165, _1166, _1167), vec3(cbLight._m0[_2386].xyz));
    float _4715 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _4726 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _2554 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2555 = dot(vec3(_1165, _1166, _1167), vec3(_2547, _2548, _2549));
    float _4737 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2559 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2547, _2548, _2549));
    float _4748 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2563 = _2539 * _2539;
    float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
    float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
    float _2576 = 0.959999978542327880859375 - _1311;
    float _2578 = 0.959999978542327880859375 - _1312;
    float _2579 = 0.959999978542327880859375 - _1313;
    float _2586 = 1.0 - _2539;
    float _2597 = (0.5 / (((_2554 * ((_2553 * _2586) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2586) + _2539) * _2553))) * _2553;
    float _4759 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
    uint _2613 = _2386 + 9u;
    float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _1168) * 0.949999988079071044921875);
    float _2625 = _2624 * _2624;
    float _2626 = cbLight._m0[_2426].x + _1244;
    float _2627 = cbLight._m0[_2426].y + _1245;
    float _2628 = cbLight._m0[_2426].z + _1246;
    float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
    float _2633 = _2632 * _2626;
    float _2634 = _2632 * _2627;
    float _2635 = _2632 * _2628;
    float _2636 = dot(vec3(_1165, _1166, _1167), vec3(cbLight._m0[_2426].xyz));
    float _4770 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2640 = dot(vec3(_1165, _1166, _1167), vec3(_2633, _2634, _2635));
    float _4781 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2644 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2633, _2634, _2635));
    float _4792 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2648 = _2625 * _2625;
    float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
    float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
    float _2666 = 1.0 - _2625;
    float _2676 = (0.5 / (((_2554 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2666) + _2625) * _2639))) * _2639;
    float _4803 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
    float _2688 = (((((_2659 * _2576) + _1314) * cbLight._m0[_2613].x) * _2678) * _2409) + ((((cbLight._m0[_2525].x * _2378) * ((_2575 * _2576) + _1314)) * _2599) * _2422);
    float _2689 = (((((_2659 * _2578) + _1316) * cbLight._m0[_2613].y) * _2678) * _2409) + ((((cbLight._m0[_2525].y * _2379) * ((_2575 * _2578) + _1316)) * _2599) * _2422);
    float _2690 = (((((_2659 * _2579) + _1317) * cbLight._m0[_2613].z) * _2678) * _2409) + ((((cbLight._m0[_2525].z * _2380) * ((_2575 * _2579) + _1317)) * _2599) * _2422);
    float _2752;
    float _2754;
    float _2756;
    if (_2462)
    {
        _2752 = _2688;
        _2754 = _2689;
        _2756 = _2690;
    }
    else
    {
        uint _2758 = _2386 + 2u;
        uint _2762 = _2386 + 10u;
        float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2758].w)) * _1168) * 0.949999988079071044921875);
        float _2777 = _2776 * _2776;
        float _2778 = cbLight._m0[_2758].x + _1244;
        float _2779 = cbLight._m0[_2758].y + _1245;
        float _2780 = cbLight._m0[_2758].z + _1246;
        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
        float _2785 = _2784 * _2778;
        float _2786 = _2784 * _2779;
        float _2787 = _2784 * _2780;
        float _2788 = dot(vec3(_1165, _1166, _1167), vec3(cbLight._m0[_2758].xyz));
        float _4814 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2792 = dot(vec3(_1165, _1166, _1167), vec3(_2785, _2786, _2787));
        float _4825 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2796 = dot(vec3(cbLight._m0[_2758].xyz), vec3(_2785, _2786, _2787));
        float _4836 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2800 = _2777 * _2777;
        float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
        float _2811 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
        float _2818 = 1.0 - _2777;
        float _2828 = (0.5 / (((_2554 * ((_2791 * _2818) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2818) + _2777) * _2791))) * _2791;
        float _4847 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2752 = (((((_2811 * _2576) + _1314) * cbLight._m0[_2762].x) * _2830) * _2831) + _2688;
        _2754 = (((((_2811 * _2578) + _1316) * cbLight._m0[_2762].y) * _2830) * _2831) + _2689;
        _2756 = (((((_2811 * _2579) + _1317) * cbLight._m0[_2762].z) * _2830) * _2831) + _2690;
    }
    float _2866;
    float _2868;
    float _2870;
    if (_2480)
    {
        _2866 = _2752;
        _2868 = _2754;
        _2870 = _2756;
    }
    else
    {
        uint _2877 = _2386 + 3u;
        uint _2881 = _2386 + 11u;
        float _2895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2877].w)) * _1168) * 0.949999988079071044921875);
        float _2896 = _2895 * _2895;
        float _2897 = cbLight._m0[_2877].x + _1244;
        float _2898 = cbLight._m0[_2877].y + _1245;
        float _2899 = cbLight._m0[_2877].z + _1246;
        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
        float _2904 = _2903 * _2897;
        float _2905 = _2903 * _2898;
        float _2906 = _2903 * _2899;
        float _2907 = dot(vec3(_1165, _1166, _1167), vec3(cbLight._m0[_2877].xyz));
        float _4863 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2911 = dot(vec3(_1165, _1166, _1167), vec3(_2904, _2905, _2906));
        float _4874 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2915 = dot(vec3(cbLight._m0[_2877].xyz), vec3(_2904, _2905, _2906));
        float _4885 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2919 = _2896 * _2896;
        float _2923 = ((_2914 * _2914) * (_2919 + (-1.0))) + 1.0;
        float _2930 = exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0);
        float _2937 = 1.0 - _2896;
        float _2947 = (0.5 / (((_2554 * ((_2910 * _2937) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2937) + _2896) * _2910))) * _2910;
        float _4896 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2949 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2919 / ((_2923 * _2923) * 3.141590118408203125));
        float _2950 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2866 = (((((_2930 * _2576) + _1314) * cbLight._m0[_2881].x) * _2949) * _2950) + _2752;
        _2868 = (((((_2930 * _2578) + _1316) * cbLight._m0[_2881].y) * _2949) * _2950) + _2754;
        _2870 = (((((_2930 * _2579) + _1317) * cbLight._m0[_2881].z) * _2949) * _2950) + _2756;
    }
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_2384.y == 0u)
    {
        float _3025 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3026 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3025;
        float _3027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3025;
        float _3028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3025;
        uvec4 _3040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3041 = _3040.x;
        uint _3052 = uint((float(_3040.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1253) / _3041))) + floor(float(uint(cbSceneParam._m0[85u].x * _1252) / _3041)));
        float _3062 = (log2(_3028 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3063 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        uint _3066 = uint(isnan(14.0) ? _3063 : (isnan(_3063) ? 14.0 : min(_3063, 14.0)));
        uvec4 _3071 = texelFetch(g_lightClusterGridBuffer, int(((_3066 << 2u) + (_3052 << 6u)) >> 2u));
        uint _3072 = _3071.x;
        uint _3073 = _3040.z;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((((1u << ((_3073 >> 4u) & 15u)) + 4294967295u) & _3072) == 0u) || ((_3073 & 240u) == 0u))
        {
            _3173 = 0.0;
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
        }
        else
        {
            float _3174;
            float _3176;
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            uint _3324 = 0u;
            uint _3333;
            bool _3334;
            for (;;)
            {
                _3333 = texelFetch(g_lightClassification, int((((_3066 << 5u) + (_3052 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                _3334 = _3333 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3334)
                {
                    frontier_phi_61_pred = _3318;
                    frontier_phi_61_pred_1 = _3323;
                    frontier_phi_61_pred_2 = _3322;
                    frontier_phi_61_pred_3 = _3321;
                    frontier_phi_61_pred_4 = _3320;
                    frontier_phi_61_pred_5 = _3319;
                }
                else
                {
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    uint _3448;
                    _3442 = _3318;
                    _3443 = _3319;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3333;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    for (;;)
                    {
                        uint _3452 = uint(findLSB(_3448)) + (_3324 << 5u);
                        uint _3449 = (_3448 + 4294967295u) & _3448;
                        uint _3454 = _3452 * 48u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3474 = (_3452 * 48u) + 4u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3493 = (_3452 * 48u) + 8u;
                        vec3 _3504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x));
                        float _3508 = _3468.x - _3026;
                        float _3509 = _3468.y - _3027;
                        float _3510 = _3468.z - _3028;
                        float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                        float _3514 = inversesqrt(_3511);
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3518 = dot(vec3(_1271, _1274, _1277), vec3(_3515, _3516, _3517));
                        float _3523 = 1.0 - (_3511 * _3468.w);
                        float _4922 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3524 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3525 = sqrt(_3511) * _3487.w;
                        float _3528 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3518) + _3529;
                        float _3535 = _3525 * _3525;
                        float _3539 = ((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3524) / ((_3535 * 0.699999988079071044921875) + 1.0);
                        float _3543 = (-0.0) - _3026;
                        float _3544 = (-0.0) - _3027;
                        float _3545 = (-0.0) - _3028;
                        float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3560 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                        float _3561 = 1.0 - _1346;
                        float _3568 = sqrt(1.0 - ((1.0 - (_3561 * _3561)) * (1.0 - (_3560 * _3560))));
                        float _3569 = _3568 * _3568;
                        float _3570 = _3569 * _3569;
                        float _3571 = _3550 + _3515;
                        float _3572 = _3551 + _3516;
                        float _3573 = _3552 + _3517;
                        float _3577 = inversesqrt(dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573)));
                        float _3581 = dot(vec3(_1271, _1274, _1277), vec3(_3550, _3551, _3552));
                        float _4938 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3584 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3585 = dot(vec3(_1271, _1274, _1277), vec3(_3577 * _3571, _3577 * _3572, _3577 * _3573));
                        float _4949 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3588 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3592 = ((_3588 * _3588) * (_3570 + (-1.0))) + 1.0;
                        float _3593 = _3528 * _3569;
                        float _3594 = _3593 * _3593;
                        float _3597 = ((1.0 - _3594) * _3518) + _3594;
                        float _4960 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3598 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3599 = 1.0 - _3569;
                        float _3609 = (0.5 / (((_3598 * ((_3584 * _3599) + _3569)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3569) * _3584))) * _3598;
                        float _4971 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3620 = (((_3570 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3592 * _3592) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125))) * _3524;
                        _3377 = (_3539 * _3487.x) + _3445;
                        _3378 = (_3539 * _3487.y) + _3446;
                        _3379 = (_3539 * _3487.z) + _3447;
                        _3374 = (_3620 * _3504.x) + _3442;
                        _3375 = (_3620 * _3504.y) + _3443;
                        _3376 = (_3620 * _3504.z) + _3444;
                        if (_3449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3442 = _3374;
                            _3443 = _3375;
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3449;
                        }
                    }
                    frontier_phi_61_pred = _3374;
                    frontier_phi_61_pred_1 = _3379;
                    frontier_phi_61_pred_2 = _3378;
                    frontier_phi_61_pred_3 = _3377;
                    frontier_phi_61_pred_4 = _3376;
                    frontier_phi_61_pred_5 = _3375;
                }
                _3174 = frontier_phi_61_pred;
                _3184 = frontier_phi_61_pred_1;
                _3182 = frontier_phi_61_pred_2;
                _3180 = frontier_phi_61_pred_3;
                _3178 = frontier_phi_61_pred_4;
                _3176 = frontier_phi_61_pred_5;
                uint _3325 = _3324 + 1u;
                if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3318 = _3174;
                    _3319 = _3176;
                    _3320 = _3178;
                    _3321 = _3180;
                    _3322 = _3182;
                    _3323 = _3184;
                    _3324 = _3325;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3173 = _3174;
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
        }
        uvec4 _3187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3188 = _3187.z;
        uint _3190 = (_3188 >> 8u) & 15u;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        if (((4294967295u << _3190) & _3072) == 0u)
        {
            _3286 = _3173;
            _3288 = _3175;
            _3290 = _3177;
            _3292 = _3179;
            _3294 = _3181;
            _3296 = _3183;
        }
        else
        {
            float _3311 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
            float _3312 = _3311 * _3026;
            float _3313 = _3311 * _3027;
            float _3314 = _3311 * _3028;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3190 < ((_3188 >> 12u) & 15u))
            {
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3425 = _3173;
                float _3426 = _3175;
                float _3427 = _3177;
                float _3428 = _3179;
                float _3429 = _3181;
                float _3430 = _3183;
                uint _3431 = _3190;
                uint _3440;
                bool _3441;
                for (;;)
                {
                    _3440 = texelFetch(g_lightClassification, int((((_3066 << 5u) + (_3052 << 9u)) + (_3431 << 2u)) >> 2u)).x;
                    _3441 = _3440 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3441)
                    {
                        frontier_phi_67_pred = _3428;
                        frontier_phi_67_pred_1 = _3429;
                        frontier_phi_67_pred_2 = _3430;
                        frontier_phi_67_pred_3 = _3427;
                        frontier_phi_67_pred_4 = _3426;
                        frontier_phi_67_pred_5 = _3425;
                    }
                    else
                    {
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3638 = _3425;
                        float _3639 = _3426;
                        float _3640 = _3427;
                        float _3641 = _3428;
                        float _3642 = _3429;
                        float _3643 = _3430;
                        uint _3644 = _3440;
                        uint _3645;
                        vec4 _3670;
                        float _3671;
                        vec4 _3686;
                        vec3 _3698;
                        vec4 _3713;
                        vec4 _3728;
                        float _3774;
                        bool _3775;
                        for (;;)
                        {
                            uint _3655 = ((_3431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3644));
                            _3645 = (_3644 + 4294967295u) & _3644;
                            uint _3657 = _3655 * 40u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            _3671 = _3670.w;
                            uint _3673 = (_3655 * 40u) + 4u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3655 * 40u) + 8u;
                            _3698 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x));
                            uint _3700 = (_3655 * 40u) + 16u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3655 * 40u) + 20u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3655 * 40u) + 24u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3749 = (_3655 * 40u) + 28u;
                            vec4 _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            _3774 = fma(_3028, _3762.z, fma(_3027, _3762.y, _3762.x * _3026)) + _3762.w;
                            _3775 = !((fma(_3028, _3743.z, fma(_3027, _3743.y, _3743.x * _3026)) + _3743.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3775)
                            {
                                float _3802 = _3670.x - _3026;
                                float _3803 = _3670.y - _3027;
                                float _3804 = _3670.z - _3028;
                                float _3805 = dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804));
                                float _3808 = inversesqrt(_3805);
                                float _3809 = _3808 * _3802;
                                float _3810 = _3808 * _3803;
                                float _3811 = _3808 * _3804;
                                float _3815 = 1.0 - (_3805 / (_3671 * _3671));
                                float _4982 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3820 = sqrt(_3805) * _3686.w;
                                float _3822 = 1.39999997615814208984375 / (_3820 + 1.39999997615814208984375);
                                float _3823 = _3822 * _3822;
                                float _3826 = ((1.0 - _3823) * dot(vec3(_3809, _3810, _3811), vec3(_1271, _1274, _1277))) + _3823;
                                float _3829 = _3820 * _3820;
                                float _3833 = (fma(_3028, _3713.z, fma(_3027, _3713.y, _3713.x * _3026)) + _3713.w) / _3774;
                                float _3834 = (fma(_3028, _3728.z, fma(_3027, _3728.y, _3728.x * _3026)) + _3728.w) / _3774;
                                float _3838 = 1.0 - dot(vec2(_3833, _3834), vec2(_3833, _3834));
                                float _4998 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3840 = _3839 * (((isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0))) * _3816) / ((_3829 * 0.699999988079071044921875) + 1.0));
                                float _3852 = exp2(log2(1.0 / ((_3829 * 3.5) + 5.0)) * 0.25);
                                float _3853 = 1.0 - _1346;
                                float _3860 = sqrt(1.0 - ((1.0 - (_3853 * _3853)) * (1.0 - (_3852 * _3852))));
                                float _3861 = _3860 * _3860;
                                float _3862 = _3861 * _3861;
                                float _3863 = _3809 - _3312;
                                float _3864 = _3810 - _3313;
                                float _3865 = _3811 - _3314;
                                float _3869 = inversesqrt(dot(vec3(_3863, _3864, _3865), vec3(_3863, _3864, _3865)));
                                float _3873 = dot(vec3(_1271, _1274, _1277), vec3((-0.0) - _3312, (-0.0) - _3313, (-0.0) - _3314));
                                float _5009 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3877 = dot(vec3(_1271, _1274, _1277), vec3(_3869 * _3863, _3869 * _3864, _3869 * _3865));
                                float _5020 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3880 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3884 = ((_3880 * _3880) * (_3862 + (-1.0))) + 1.0;
                                float _3885 = _3822 * _3861;
                                float _3886 = _3885 * _3885;
                                float _3892 = ((1.0 - _3886) * dot(vec3(_1271, _1274, _1277), vec3(_3809, _3810, _3811))) + _3886;
                                float _5031 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3894 = 1.0 - _3861;
                                float _3904 = (0.5 / (((_3893 * ((_3876 * _3894) + _3861)) + 9.9999999392252902907785028219223e-09) + (((_3893 * _3894) + _3861) * _3876))) * _3893;
                                float _5042 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3914 = (_3839 * _3816) * (((_3862 * 3.1415927410125732421875) * (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)))) / ((_3884 * _3884) * ((_3829 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3914 * _3698.x;
                                frontier_phi_73_pred_1 = _3914 * _3698.y;
                                frontier_phi_73_pred_2 = _3840 * _3686.z;
                                frontier_phi_73_pred_3 = _3840 * _3686.y;
                                frontier_phi_73_pred_4 = _3840 * _3686.x;
                                frontier_phi_73_pred_5 = _3914 * _3698.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3918 = frontier_phi_73_pred;
                            _3919 = frontier_phi_73_pred_1;
                            _3923 = frontier_phi_73_pred_2;
                            _3922 = frontier_phi_73_pred_3;
                            _3921 = frontier_phi_73_pred_4;
                            _3920 = frontier_phi_73_pred_5;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            if (_3645 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3645;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3628;
                        frontier_phi_67_pred_1 = _3629;
                        frontier_phi_67_pred_2 = _3630;
                        frontier_phi_67_pred_3 = _3627;
                        frontier_phi_67_pred_4 = _3626;
                        frontier_phi_67_pred_5 = _3625;
                    }
                    _3293 = frontier_phi_67_pred;
                    _3295 = frontier_phi_67_pred_1;
                    _3297 = frontier_phi_67_pred_2;
                    _3291 = frontier_phi_67_pred_3;
                    _3289 = frontier_phi_67_pred_4;
                    _3287 = frontier_phi_67_pred_5;
                    uint _3432 = _3431 + 1u;
                    if (_3432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3425 = _3287;
                        _3426 = _3289;
                        _3427 = _3291;
                        _3428 = _3293;
                        _3429 = _3295;
                        _3430 = _3297;
                        _3431 = _3432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3295;
                frontier_phi_55_56_ladder_1 = _3297;
                frontier_phi_55_56_ladder_2 = _3293;
                frontier_phi_55_56_ladder_3 = _3291;
                frontier_phi_55_56_ladder_4 = _3289;
                frontier_phi_55_56_ladder_5 = _3287;
            }
            else
            {
                frontier_phi_55_56_ladder = _3181;
                frontier_phi_55_56_ladder_1 = _3183;
                frontier_phi_55_56_ladder_2 = _3179;
                frontier_phi_55_56_ladder_3 = _3177;
                frontier_phi_55_56_ladder_4 = _3175;
                frontier_phi_55_56_ladder_5 = _3173;
            }
            _3286 = frontier_phi_55_56_ladder_5;
            _3288 = frontier_phi_55_56_ladder_4;
            _3290 = frontier_phi_55_56_ladder_3;
            _3292 = frontier_phi_55_56_ladder_2;
            _3294 = frontier_phi_55_56_ladder;
            _3296 = frontier_phi_55_56_ladder_1;
        }
        float _3301 = isnan(1.0) ? _1330 : (isnan(_1330) ? 1.0 : min(_1330, 1.0));
        _3085 = (_3301 * _3292) + _2518;
        _3087 = (_3301 * _3294) + _2520;
        _3089 = (_3301 * _3296) + _2522;
        _3091 = ((_3286 * _1314) * _3301) + _2866;
        _3093 = ((_3288 * _1316) * _3301) + _2868;
        _3095 = ((_3290 * _1317) * _3301) + _2870;
    }
    else
    {
        _3085 = _2518;
        _3087 = _2520;
        _3089 = _2522;
        _3091 = _2866;
        _3093 = _2868;
        _3095 = _2870;
    }
    float _5058 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _5069 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
    float _5080 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    uint _3115 = _301 + 6u;
    float _3123 = _1252 / cbSceneParam._m0[86u].x;
    float _3124 = _1253 / cbSceneParam._m0[86u].y;
    vec4 _3138 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, (log2((isnan(cbSceneParam._m0[77u].w) ? _1187 : (isnan(_1187) ? cbSceneParam._m0[77u].w : min(_1187, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3140 = _3138.x;
    float _3141 = _3138.y;
    float _3142 = _3138.z;
    float _3143 = _3138.w;
    float _3236;
    float _3238;
    float _3240;
    float _3242;
    if (_1187 > cbSceneParam._m0[78u].w)
    {
        float _3198 = isnan(_1187) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1187 : min(cbSceneParam._m0[80u].w, _1187));
        float _3199 = _3198 / _1187;
        float _3210 = _3199 * _1237;
        float _3211 = _1238 * _3199;
        float _3212 = (-0.0) - _3211;
        float _3214 = _3199 * _1239;
        float _3216 = (cbSceneParam._m0[77u].w * _3212) / _3198;
        float _3217 = _3216 + cbSceneParam._m0[79u].w;
        float _3218 = cbSceneParam._m0[79u].w - _3211;
        float _3224 = sqrt(((_3210 * _3210) + (_3211 * _3211)) + (_3214 * _3214));
        float _3227 = (1.0 - (cbSceneParam._m0[77u].w / _3198)) * _3224;
        float _3232 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3234 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3387;
        if (abs((_3212 - _3216) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3387 = ((((_3217 > 0.0) ? exp2(_3232 * _3217) : (2.0 - exp2(_3234 * _3217))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3227;
        }
        else
        {
            float _3347 = 1.0 / cbSceneParam._m0[80u].x;
            float _3348 = isnan(_3218) ? _3217 : (isnan(_3217) ? _3218 : max(_3217, _3218));
            float _3349 = isnan(_3218) ? _3217 : (isnan(_3217) ? _3218 : min(_3217, _3218));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            float _3359 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : min(_3349, 0.0));
            _3387 = ((abs(_3224 / _3212) * cbSceneParam._m0[80u].y) * ((((_3358 - _3359) * 2.0) - ((exp2(_3232 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0)))) - exp2(_3232 * (isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))))) * _3347)) - ((exp2(_3234 * _3358) - exp2(_3234 * _3359)) * _3347))) + (_3227 * cbSceneParam._m0[80u].z);
        }
        vec4 _3389 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, 1.0), 0.0);
        float _3398 = exp2((_3387 * (-1.44269502162933349609375)) * (1.0 - _3389.w));
        float _3399 = log2(_3398);
        float _3415 = log2(_3143);
        _3236 = (exp2(_3415 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].x)) * _3389.x) / cbSceneParam._m0[78u].x)) + _3140;
        _3238 = (exp2(_3415 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].y)) * _3389.y) / cbSceneParam._m0[78u].y)) + _3141;
        _3240 = (exp2(_3415 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].z)) * _3389.z) / cbSceneParam._m0[78u].z)) + _3142;
        _3242 = _3398 * _3143;
    }
    else
    {
        _3236 = _3140;
        _3238 = _3141;
        _3240 = _3142;
        _3242 = _3143;
    }
    float _3254 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3255 = _3254 == 3.0;
    float _3256 = log2(_3242);
    float _3263 = exp2(_3256 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3085 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1330))) + ((_3091 + ((isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))) * _2136)) * cbPerFrame._m0[3u].x));
    float _3264 = exp2(_3256 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3087 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1330))) + ((_3093 + ((isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))) * _2136)) * cbPerFrame._m0[3u].x));
    float _3265 = exp2(_3256 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3089 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1330))) + ((_3095 + ((isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0))) * _2136)) * cbPerFrame._m0[3u].x));
    float _3274 = (_3254 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3274 * (_3255 ? _3263 : (_3263 + (cbSceneParam._m0[72u].w * _3236)));
    SV_Target.y = _3274 * (_3255 ? _3264 : (_3264 + (cbSceneParam._m0[72u].w * _3238)));
    SV_Target.z = _3274 * (_3255 ? _3265 : (_3265 + (cbSceneParam._m0[72u].w * _3240)));
    SV_Target.w = cbInstanceData._m0[_3115].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3115].w;
}


